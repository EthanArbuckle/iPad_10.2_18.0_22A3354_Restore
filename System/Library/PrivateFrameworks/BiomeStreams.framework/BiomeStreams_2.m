uint64_t PgQuery_GroupingSet.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)v0
    || (lazy protocol witness table accessor for type PgQuery_GroupingSetKind and conformance PgQuery_GroupingSetKind(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v0 + 16) + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      if (!*(_DWORD *)(v0 + 24)
        || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for PgQuery_GroupingSet(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_GroupingSet@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DEE9D8];
  *(_DWORD *)(a1 + 24) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_GroupingSet()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_GroupingSet()
{
  return PgQuery_GroupingSet.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_GroupingSet()
{
  return PgQuery_GroupingSet.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_GroupingSet()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingSet and conformance PgQuery_GroupingSet, type metadata accessor for PgQuery_GroupingSet, (uint64_t)&protocol conformance descriptor for PgQuery_GroupingSet);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_GroupingSet@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_GroupingSet._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_GroupingSet()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingSet and conformance PgQuery_GroupingSet, type metadata accessor for PgQuery_GroupingSet, (uint64_t)&protocol conformance descriptor for PgQuery_GroupingSet);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_GroupingSet()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingSet and conformance PgQuery_GroupingSet, type metadata accessor for PgQuery_GroupingSet, (uint64_t)&protocol conformance descriptor for PgQuery_GroupingSet);
  return Message.hash(into:)();
}

uint64_t PgQuery_WindowClause._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Node;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0xE000000000000000;
  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 48) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 56) = v1;
  *(_DWORD *)(v0 + 64) = 0;
  v2 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startOffset;
  Node = type metadata accessor for PgQuery_Node(0);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v4(v2, 1, 1, Node);
  v4(v0+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__endOffset, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startInRangeFunc) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__endInRangeFunc) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inRangeColl) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inRangeAsc) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inRangeNullsFirst) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winref) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__copiedOrder) = 0;
  return v0;
}

uint64_t PgQuery_WindowClause._StorageClass.__deallocating_deinit()
{
  return PgQuery_WindowDef._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startOffset, &OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__endOffset);
}

uint64_t PgQuery_WindowDef._StorageClass.__deallocating_deinit(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v2 + *a1, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v2 + *a2, &demangling cache variable for type metadata for PgQuery_Node?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_WindowClause._StorageClass()
{
  return type metadata accessor for PgQuery_WindowClause._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_WindowClause._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_WindowClause._StorageClass);
}

void type metadata completion function for PgQuery_WindowClause._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_WindowClause.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_WindowClause, (void (*)(_QWORD))type metadata accessor for PgQuery_WindowClause._StorageClass, specialized PgQuery_WindowClause._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_WindowClause.decodeMessage<A>(decoder:));
}

uint64_t PgQuery_TableFunc.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), void (*a5)(_QWORD), uint64_t (*a6)(uint64_t), void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v10 = v7;
  v14 = *(int *)(a4(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a5(0);
    swift_allocObject();
    v15 = swift_retain();
    v16 = a6(v15);
    swift_release();
    *(_QWORD *)(v10 + v14) = v16;
    swift_release();
  }
  v17 = swift_retain();
  a7(v17, a1, a2, a3);
  return swift_release();
}

uint64_t closure #1 in PgQuery_WindowClause.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 3:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 5:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 6:
        case 7:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 8:
        case 9:
        case 10:
        case 13:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 11:
        case 12:
        case 14:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_WindowClause.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Node;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v3 = MEMORY[0x1E0C80A78](v2);
  v30 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v29 = (char *)&v26 - v5;
  Node = type metadata accessor for PgQuery_Node(0);
  v7 = *(_QWORD *)(Node - 8);
  v8 = MEMORY[0x1E0C80A78](Node);
  v27 = (uint64_t)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v28 = (uint64_t)&v26 - v10;
  v11 = *(int *)(type metadata accessor for PgQuery_WindowClause(0) + 20);
  v26 = v0;
  v12 = *(_QWORD *)(v0 + v11);
  v13 = *(_QWORD *)(v12 + 24);
  if ((v13 & 0x2000000000000000) != 0)
    v14 = HIBYTE(v13) & 0xF;
  else
    v14 = *(_QWORD *)(v12 + 16) & 0xFFFFFFFFFFFFLL;
  swift_retain();
  if (v14)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1)
      goto LABEL_17;
    swift_bridgeObjectRelease();
  }
  v15 = Node;
  v16 = *(_QWORD *)(v12 + 40);
  v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0)
    v17 = *(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFLL;
  if (v17)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1)
      goto LABEL_17;
    swift_bridgeObjectRelease();
  }
  if (!*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16))
    goto LABEL_15;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  swift_bridgeObjectRetain();
  dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
  if (v1)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return swift_release();
  }
  swift_bridgeObjectRelease();
LABEL_15:
  if (*(_QWORD *)(*(_QWORD *)(v12 + 56) + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v1)
      goto LABEL_17;
    swift_bridgeObjectRelease();
  }
  v19 = (uint64_t)v30;
  v20 = (uint64_t)v29;
  if (*(_DWORD *)(v12 + 64))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v1)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v12+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startOffset, v20, &demangling cache variable for type metadata for PgQuery_Node?);
  v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (v21(v20, 1, v15) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v20, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v22 = v28;
    outlined init with take of PgQuery_OidList(v20, v28, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v23 = v22;
    v19 = (uint64_t)v30;
    outlined destroy of PgQuery_Alias(v23, type metadata accessor for PgQuery_Node);
    if (v1)
      return swift_release();
  }
  outlined init with copy of PgQuery_Alias?(v12+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__endOffset, v19, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v21(v19, 1, v15) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v19, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v24 = v19;
    v25 = v27;
    outlined init with take of PgQuery_OidList(v24, v27, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v25, type metadata accessor for PgQuery_Node);
    if (v1)
      return swift_release();
  }
  if (*(_DWORD *)(v12
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startInRangeFunc))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v1)
      return swift_release();
  }
  if (*(_DWORD *)(v12
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__endInRangeFunc))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v1)
      return swift_release();
  }
  if (*(_DWORD *)(v12
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inRangeColl))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v1)
      return swift_release();
  }
  if (*(_BYTE *)(v12
                + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inRangeAsc) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v1)
      return swift_release();
  }
  if (*(_BYTE *)(v12
                + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inRangeNullsFirst) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v1)
      return swift_release();
  }
  if (*(_DWORD *)(v12
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winref))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v1)
      return swift_release();
  }
  if (*(_BYTE *)(v12
                + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__copiedOrder) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v1)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_WindowClause@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_WindowClause._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_WindowClause()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_WindowClause()
{
  return PgQuery_WindowClause.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_WindowClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowClause and conformance PgQuery_WindowClause, type metadata accessor for PgQuery_WindowClause, (uint64_t)&protocol conformance descriptor for PgQuery_WindowClause);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_WindowClause@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_WindowClause._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_WindowClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowClause and conformance PgQuery_WindowClause, type metadata accessor for PgQuery_WindowClause, (uint64_t)&protocol conformance descriptor for PgQuery_WindowClause);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_WindowClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowClause and conformance PgQuery_WindowClause, type metadata accessor for PgQuery_WindowClause, (uint64_t)&protocol conformance descriptor for PgQuery_WindowClause);
  return Message.hash(into:)();
}

uint64_t PgQuery_ObjectWithArgs.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_VacuumStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_ObjectWithArgs);
}

uint64_t PgQuery_VacuumStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v4 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v5))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v4 + 8) + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v5))
    {
      if (*(_BYTE *)(v4 + 16) != 1
        || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v5))
      {
        a4(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_VacuumStmt@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)a1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 8) = v1;
  *(_BYTE *)(a1 + 16) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ObjectWithArgs()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ObjectWithArgs()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, type metadata accessor for PgQuery_ObjectWithArgs, (uint64_t)&protocol conformance descriptor for PgQuery_ObjectWithArgs);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ObjectWithArgs@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ObjectWithArgs._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ObjectWithArgs()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, type metadata accessor for PgQuery_ObjectWithArgs, (uint64_t)&protocol conformance descriptor for PgQuery_ObjectWithArgs);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ObjectWithArgs()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, type metadata accessor for PgQuery_ObjectWithArgs, (uint64_t)&protocol conformance descriptor for PgQuery_ObjectWithArgs);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ObjectWithArgs(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_ObjectWithArgs.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_ObjectWithArgs) & 1;
}

uint64_t PgQuery_AccessPriv.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Alias.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PgQuery_AccessPriv);
}

uint64_t PgQuery_Alias.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v7 = v4[1];
  v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v8 = *v4 & 0xFFFFFFFFFFFFLL;
  if (!v8 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v5))
  {
    if (!*(_QWORD *)(v4[2] + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v5))
    {
      a4(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_Alias@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  a4[2] = a3;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AccessPriv()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AccessPriv()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AccessPriv and conformance PgQuery_AccessPriv, type metadata accessor for PgQuery_AccessPriv, (uint64_t)&protocol conformance descriptor for PgQuery_AccessPriv);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AccessPriv@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AccessPriv._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AccessPriv()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AccessPriv and conformance PgQuery_AccessPriv, type metadata accessor for PgQuery_AccessPriv, (uint64_t)&protocol conformance descriptor for PgQuery_AccessPriv);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AccessPriv()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AccessPriv and conformance PgQuery_AccessPriv, type metadata accessor for PgQuery_AccessPriv, (uint64_t)&protocol conformance descriptor for PgQuery_AccessPriv);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_AccessPriv(_QWORD *a1, char *a2)
{
  return specialized static PgQuery_AlterExtensionStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_AccessPriv) & 1;
}

uint64_t PgQuery_CreateOpClassItem.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 3:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for PgQuery_CreateOpClassItem(0);
          type metadata accessor for PgQuery_ObjectWithArgs(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, type metadata accessor for PgQuery_ObjectWithArgs, (uint64_t)&protocol conformance descriptor for PgQuery_ObjectWithArgs);
          goto LABEL_12;
        case 4:
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 6:
          type metadata accessor for PgQuery_CreateOpClassItem(0);
          type metadata accessor for PgQuery_TypeName(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
LABEL_12:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateOpClassItem.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t ObjectWithArgs;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t result;
  uint64_t OpClassItem;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t TypeName;
  uint64_t v26;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  MEMORY[0x1E0C80A78](v6);
  v24 = (uint64_t)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v23 = *(_QWORD *)(TypeName - 8);
  MEMORY[0x1E0C80A78](TypeName);
  v22 = (uint64_t)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  v13 = *(_QWORD *)(ObjectWithArgs - 8);
  MEMORY[0x1E0C80A78](ObjectWithArgs);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *v3;
  v26 = a3;
  if (!v16 || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v4))
  {
    OpClassItem = type metadata accessor for PgQuery_CreateOpClassItem(0);
    outlined init with copy of PgQuery_Alias?((uint64_t)v3 + *(int *)(OpClassItem + 36), (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, ObjectWithArgs) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    }
    else
    {
      outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v15, type metadata accessor for PgQuery_ObjectWithArgs);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, type metadata accessor for PgQuery_ObjectWithArgs, (uint64_t)&protocol conformance descriptor for PgQuery_ObjectWithArgs);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      result = outlined destroy of PgQuery_Alias((uint64_t)v15, type metadata accessor for PgQuery_ObjectWithArgs);
      if (v4)
        return result;
    }
    if (!v3[1] || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v4))
    {
      if (!*(_QWORD *)(*((_QWORD *)v3 + 1) + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v4))
      {
        if (!*(_QWORD *)(*((_QWORD *)v3 + 2) + 16)
          || (type metadata accessor for PgQuery_Node(0),
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v4))
        {
          v19 = v24;
          outlined init with copy of PgQuery_Alias?((uint64_t)v3 + *(int *)(OpClassItem + 40), v24, &demangling cache variable for type metadata for PgQuery_TypeName?);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v19, 1, TypeName) == 1)
          {
            outlined destroy of (key: String, value: StorableValue)(v19, &demangling cache variable for type metadata for PgQuery_TypeName?);
          }
          else
          {
            v20 = v19;
            v21 = v22;
            outlined init with take of PgQuery_OidList(v20, v22, type metadata accessor for PgQuery_TypeName);
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
            dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
            result = outlined destroy of PgQuery_Alias(v21, type metadata accessor for PgQuery_TypeName);
            if (v4)
              return result;
          }
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateOpClassItem@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t ObjectWithArgs;
  char *v7;
  uint64_t TypeName;

  *a2 = 0;
  v4 = MEMORY[0x1E0DEE9D8];
  a2[1] = MEMORY[0x1E0DEE9D8];
  a2[2] = v4;
  UnknownStorage.init()();
  v5 = (char *)a2 + *(int *)(a1 + 36);
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(ObjectWithArgs - 8) + 56))(v5, 1, 1, ObjectWithArgs);
  v7 = (char *)a2 + *(int *)(a1 + 40);
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TypeName - 8) + 56))(v7, 1, 1, TypeName);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateOpClassItem()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateOpClassItem()
{
  return PgQuery_CreateOpClassItem.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateOpClassItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CreateOpClassItem.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateOpClassItem()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassItem and conformance PgQuery_CreateOpClassItem, type metadata accessor for PgQuery_CreateOpClassItem, (uint64_t)&protocol conformance descriptor for PgQuery_CreateOpClassItem);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateOpClassItem@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateOpClassItem._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateOpClassItem()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassItem and conformance PgQuery_CreateOpClassItem, type metadata accessor for PgQuery_CreateOpClassItem, (uint64_t)&protocol conformance descriptor for PgQuery_CreateOpClassItem);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateOpClassItem()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassItem and conformance PgQuery_CreateOpClassItem, type metadata accessor for PgQuery_CreateOpClassItem, (uint64_t)&protocol conformance descriptor for PgQuery_CreateOpClassItem);
  return Message.hash(into:)();
}

uint64_t PgQuery_TableLikeClause.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2)
      {
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for PgQuery_TableLikeClause(0);
        type metadata accessor for PgQuery_RangeVar(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_TableLikeClause.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t RangeVar;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t result;
  _QWORD v16[2];
  _DWORD *v17;

  v5 = v3;
  v16[1] = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v10 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = type metadata accessor for PgQuery_TableLikeClause(0);
  v13 = *(int *)(v16[0] + 28);
  v17 = v5;
  outlined init with copy of PgQuery_Alias?((uint64_t)v5 + v13, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, RangeVar) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    v14 = v17;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v8, (uint64_t)v12, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    result = outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_RangeVar);
    v14 = v17;
    if (v4)
      return result;
  }
  if (!*v14 || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
  {
    if (!v14[1])
      return UnknownStorage.traverse<A>(visitor:)();
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (!v4)
      return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_TableLikeClause@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t RangeVar;

  *a2 = 0;
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 28);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v4, 1, 1, RangeVar);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_TableLikeClause()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_TableLikeClause()
{
  return PgQuery_TableLikeClause.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_TableLikeClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableLikeClause.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_TableLikeClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableLikeClause and conformance PgQuery_TableLikeClause, type metadata accessor for PgQuery_TableLikeClause, (uint64_t)&protocol conformance descriptor for PgQuery_TableLikeClause);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_TableLikeClause@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_TableLikeClause._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_TableLikeClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableLikeClause and conformance PgQuery_TableLikeClause, type metadata accessor for PgQuery_TableLikeClause, (uint64_t)&protocol conformance descriptor for PgQuery_TableLikeClause);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_TableLikeClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableLikeClause and conformance PgQuery_TableLikeClause, type metadata accessor for PgQuery_TableLikeClause, (uint64_t)&protocol conformance descriptor for PgQuery_TableLikeClause);
  return Message.hash(into:)();
}

uint64_t PgQuery_FunctionParameter._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t TypeName;
  uint64_t v8;
  uint64_t v9;
  uint64_t Node;
  uint64_t v11;
  char v12;
  uint64_t v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0xE000000000000000;
  v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argType;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TypeName - 8) + 56))(v6, 1, 1, TypeName);
  v8 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__mode;
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defexpr;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v9, 1, 1, Node);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v1 + 24) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argType, v6, &demangling cache variable for type metadata for PgQuery_TypeName?);
  v12 = *(_BYTE *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__mode
                 + 8);
  *(_QWORD *)v8 = *(_QWORD *)(a1
                            + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__mode);
  *(_BYTE *)(v8 + 8) = v12;
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defexpr, (uint64_t)v5, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_release();
  outlined assign with take of PgQuery_Node?((uint64_t)v5, v9, &demangling cache variable for type metadata for PgQuery_Node?);
  return v1;
}

uint64_t PgQuery_FunctionParameter._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argType, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defexpr, &demangling cache variable for type metadata for PgQuery_Node?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_FunctionParameter._StorageClass()
{
  return type metadata accessor for PgQuery_FunctionParameter._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_FunctionParameter._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_FunctionParameter._StorageClass);
}

void type metadata completion function for PgQuery_FunctionParameter._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_TypeName?, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_FunctionParameter.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;

  v2 = v1;
  v3 = *(int *)(type metadata accessor for PgQuery_FunctionParameter(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_FunctionParameter._StorageClass(0);
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v0 + v3) = PgQuery_FunctionParameter._StorageClass.init(copying:)(v4);
    swift_release();
  }
  swift_retain();
  v5 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v6 & 1) == 0)
    {
      switch(v5)
      {
        case 1:
          v8 = v2;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_7;
        case 2:
          type metadata accessor for PgQuery_TypeName(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
          goto LABEL_14;
        case 3:
          lazy protocol witness table accessor for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode();
          v8 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_7;
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
LABEL_14:
          v8 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_7:
          v2 = v8;
          break;
        default:
          break;
      }
      v5 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_FunctionParameter.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t TypeName;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t Node;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v36 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v5);
  v30 = (uint64_t)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v29 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v27 = (uint64_t)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v12 = *(_QWORD *)(TypeName - 8);
  MEMORY[0x1E0C80A78](TypeName);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(int *)(type metadata accessor for PgQuery_FunctionParameter(0) + 20);
  v28 = v3;
  v16 = *(_QWORD *)(v3 + v15);
  v17 = *(_QWORD *)(v16 + 24);
  if ((v17 & 0x2000000000000000) != 0)
    v18 = HIBYTE(v17) & 0xF;
  else
    v18 = *(_QWORD *)(v16 + 16) & 0xFFFFFFFFFFFFLL;
  swift_retain();
  v32 = a2;
  if (v18)
  {
    swift_bridgeObjectRetain();
    v19 = v33;
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    v20 = v19;
    swift_bridgeObjectRelease();
    if (v19)
      return swift_release();
  }
  else
  {
    v20 = v33;
  }
  outlined init with copy of PgQuery_Alias?(v16+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argType, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, TypeName) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_TypeName?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v10, (uint64_t)v14, type metadata accessor for PgQuery_TypeName);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v14, type metadata accessor for PgQuery_TypeName);
    if (v20)
      return swift_release();
  }
  if (*(_QWORD *)(v16
                 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__mode))
  {
    v21 = *(_BYTE *)(v16
                   + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__mode
                   + 8);
    v34 = *(_QWORD *)(v16
                    + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__mode);
    v35 = v21;
    lazy protocol witness table accessor for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v20)
      return swift_release();
  }
  v22 = v30;
  outlined init with copy of PgQuery_Alias?(v16+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defexpr, v30, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v22, 1, Node) != 1)
  {
    v23 = v22;
    v24 = v27;
    outlined init with take of PgQuery_OidList(v23, v27, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v24, type metadata accessor for PgQuery_Node);
    if (!v20)
      goto LABEL_17;
    return swift_release();
  }
  outlined destroy of (key: String, value: StorableValue)(v22, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_17:
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_FunctionParameter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_FunctionParameter._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_FunctionParameter()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_FunctionParameter()
{
  return PgQuery_FunctionParameter.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_FunctionParameter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_FunctionParameter.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_FunctionParameter()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FunctionParameter and conformance PgQuery_FunctionParameter, type metadata accessor for PgQuery_FunctionParameter, (uint64_t)&protocol conformance descriptor for PgQuery_FunctionParameter);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_FunctionParameter@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_FunctionParameter._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_FunctionParameter()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FunctionParameter and conformance PgQuery_FunctionParameter, type metadata accessor for PgQuery_FunctionParameter, (uint64_t)&protocol conformance descriptor for PgQuery_FunctionParameter);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_FunctionParameter()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FunctionParameter and conformance PgQuery_FunctionParameter, type metadata accessor for PgQuery_FunctionParameter, (uint64_t)&protocol conformance descriptor for PgQuery_FunctionParameter);
  return Message.hash(into:)();
}

uint64_t PgQuery_LockingClause.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        lazy protocol witness table accessor for type PgQuery_LockClauseStrength and conformance PgQuery_LockClauseStrength();
LABEL_5:
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
        goto LABEL_11;
      }
      if (result == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
LABEL_11:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    lazy protocol witness table accessor for type PgQuery_LockWaitPolicy and conformance PgQuery_LockWaitPolicy();
    goto LABEL_5;
  }
  return result;
}

uint64_t PgQuery_LockingClause.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*v0 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (!v0[1]
      || (lazy protocol witness table accessor for type PgQuery_LockClauseStrength and conformance PgQuery_LockClauseStrength(),
          result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v1))
    {
      if (!v0[3]
        || (lazy protocol witness table accessor for type PgQuery_LockWaitPolicy and conformance PgQuery_LockWaitPolicy(),
            result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
            !v1))
      {
        type metadata accessor for PgQuery_LockingClause(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_LockingClause@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_LockingClause()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_LockingClause()
{
  return PgQuery_LockingClause.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_LockingClause()
{
  return PgQuery_LockingClause.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_LockingClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockingClause and conformance PgQuery_LockingClause, type metadata accessor for PgQuery_LockingClause, (uint64_t)&protocol conformance descriptor for PgQuery_LockingClause);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_LockingClause@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_LockingClause._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_LockingClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockingClause and conformance PgQuery_LockingClause, type metadata accessor for PgQuery_LockingClause, (uint64_t)&protocol conformance descriptor for PgQuery_LockingClause);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_LockingClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockingClause and conformance PgQuery_LockingClause, type metadata accessor for PgQuery_LockingClause, (uint64_t)&protocol conformance descriptor for PgQuery_LockingClause);
  return Message.hash(into:)();
}

uint64_t PgQuery_RowMarkClause.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_5;
        case 2:
          lazy protocol witness table accessor for type PgQuery_LockClauseStrength and conformance PgQuery_LockClauseStrength();
          goto LABEL_11;
        case 3:
          lazy protocol witness table accessor for type PgQuery_LockWaitPolicy and conformance PgQuery_LockWaitPolicy();
LABEL_11:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 4:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_RowMarkClause.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_DWORD *)v0 || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(v0 + 8)
      || (lazy protocol witness table accessor for type PgQuery_LockClauseStrength and conformance PgQuery_LockClauseStrength(),
          result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v1))
    {
      if (!*(_QWORD *)(v0 + 24)
        || (lazy protocol witness table accessor for type PgQuery_LockWaitPolicy and conformance PgQuery_LockWaitPolicy(),
            result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
            !v1))
      {
        if (*(_BYTE *)(v0 + 33) != 1
          || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for PgQuery_RowMarkClause(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RowMarkClause@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RowMarkClause()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_RowMarkClause()
{
  return PgQuery_RowMarkClause.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_RowMarkClause()
{
  return PgQuery_RowMarkClause.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RowMarkClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowMarkClause and conformance PgQuery_RowMarkClause, type metadata accessor for PgQuery_RowMarkClause, (uint64_t)&protocol conformance descriptor for PgQuery_RowMarkClause);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RowMarkClause@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RowMarkClause._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RowMarkClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowMarkClause and conformance PgQuery_RowMarkClause, type metadata accessor for PgQuery_RowMarkClause, (uint64_t)&protocol conformance descriptor for PgQuery_RowMarkClause);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RowMarkClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowMarkClause and conformance PgQuery_RowMarkClause, type metadata accessor for PgQuery_RowMarkClause, (uint64_t)&protocol conformance descriptor for PgQuery_RowMarkClause);
  return Message.hash(into:)();
}

uint64_t PgQuery_XmlSerialize._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, &demangling cache variable for type metadata for PgQuery_TypeName?);
}

uint64_t ObjC metadata update function for PgQuery_XmlSerialize._StorageClass()
{
  return type metadata accessor for PgQuery_XmlSerialize._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_XmlSerialize._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_XmlSerialize._StorageClass);
}

void type metadata completion function for PgQuery_XmlSerialize._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_TypeName?, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_XmlSerialize.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v5;

  v1 = v0;
  specialized PgQuery_XmlSerialize._uniqueStorage()();
  type metadata accessor for PgQuery_XmlSerialize(0);
  swift_retain();
  v2 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v3 & 1) == 0)
    {
      switch(v2)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType();
          v5 = v1;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          goto LABEL_11;
        case 3:
          type metadata accessor for PgQuery_TypeName(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
LABEL_11:
          v5 = v1;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 4:
          v5 = v1;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
          v1 = v5;
          break;
        default:
          break;
      }
      v2 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_XmlSerialize.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t Node;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t TypeName;
  uint64_t v30;
  char v31;
  uint64_t v32;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  MEMORY[0x1E0C80A78](v6);
  v28 = (uint64_t)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v27 = *(_QWORD *)(TypeName - 8);
  MEMORY[0x1E0C80A78](TypeName);
  v26 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v13 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(int *)(type metadata accessor for PgQuery_XmlSerialize(0) + 20);
  v25 = v3;
  v17 = *(_QWORD *)(v3 + v16);
  v18 = *(_QWORD *)(v17 + 16);
  v32 = a3;
  if (v18)
  {
    v19 = *(_BYTE *)(v17 + 24);
    v30 = v18;
    v31 = v19;
    lazy protocol witness table accessor for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType();
    swift_retain();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  else
  {
    swift_retain();
  }
  outlined init with copy of PgQuery_Alias?(v17+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v15, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v15, type metadata accessor for PgQuery_Node);
    if (v4)
      return swift_release();
  }
  v20 = v28;
  outlined init with copy of PgQuery_Alias?(v17+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, v28, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v20, 1, TypeName) != 1)
  {
    v21 = v20;
    v22 = v26;
    outlined init with take of PgQuery_OidList(v21, v26, type metadata accessor for PgQuery_TypeName);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v22, type metadata accessor for PgQuery_TypeName);
    if (!v4)
      goto LABEL_11;
    return swift_release();
  }
  outlined destroy of (key: String, value: StorableValue)(v20, &demangling cache variable for type metadata for PgQuery_TypeName?);
LABEL_11:
  if (*(_DWORD *)(v17
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_XmlSerialize@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_XmlSerialize._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_XmlSerialize()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_XmlSerialize()
{
  return PgQuery_XmlSerialize.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_XmlSerialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_XmlSerialize.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_XmlSerialize()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlSerialize and conformance PgQuery_XmlSerialize, type metadata accessor for PgQuery_XmlSerialize, (uint64_t)&protocol conformance descriptor for PgQuery_XmlSerialize);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_XmlSerialize@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_XmlSerialize._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_XmlSerialize()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlSerialize and conformance PgQuery_XmlSerialize, type metadata accessor for PgQuery_XmlSerialize, (uint64_t)&protocol conformance descriptor for PgQuery_XmlSerialize);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_XmlSerialize()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlSerialize and conformance PgQuery_XmlSerialize, type metadata accessor for PgQuery_XmlSerialize, (uint64_t)&protocol conformance descriptor for PgQuery_XmlSerialize);
  return Message.hash(into:)();
}

uint64_t PgQuery_WithClause.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        v4 = v3;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    v4 = v3;
    dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
    v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_WithClause.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (*(_BYTE *)(v0 + 8) != 1
      || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
    {
      if (!*(_DWORD *)(v0 + 12)
        || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for PgQuery_WithClause(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_WithClause@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_WithClause()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_WithClause()
{
  return PgQuery_WithClause.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_WithClause()
{
  return PgQuery_WithClause.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_WithClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, type metadata accessor for PgQuery_WithClause, (uint64_t)&protocol conformance descriptor for PgQuery_WithClause);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_WithClause@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_WithClause._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_WithClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, type metadata accessor for PgQuery_WithClause, (uint64_t)&protocol conformance descriptor for PgQuery_WithClause);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_WithClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, type metadata accessor for PgQuery_WithClause, (uint64_t)&protocol conformance descriptor for PgQuery_WithClause);
  return Message.hash(into:)();
}

uint64_t PgQuery_InferClause._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_InferClause._StorageClass()
{
  return type metadata accessor for PgQuery_InferClause._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_InferClause._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_InferClause._StorageClass);
}

void type metadata completion function for PgQuery_InferClause._StorageClass()
{
  type metadata completion function for PgQuery_SecLabelStmt._StorageClass();
}

uint64_t PgQuery_InferClause.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for PgQuery_InferClause(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_InferClause._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    v6 = specialized PgQuery_InferClause._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v10 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_7;
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 3:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_7;
        case 4:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          v2 = v10;
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_InferClause.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Node;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v10 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v20 = (uint64_t)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(int *)(type metadata accessor for PgQuery_InferClause(0) + 20);
  v19 = v3;
  v13 = *(_QWORD *)(v3 + v12);
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 16);
  v21 = a3;
  if (v14)
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_retain();
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  else
  {
    swift_retain();
  }
  outlined init with copy of PgQuery_Alias?(v13+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_8;
  }
  v15 = v20;
  outlined init with take of PgQuery_OidList((uint64_t)v8, v20, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v15, type metadata accessor for PgQuery_Node);
  if (v4)
    return swift_release();
LABEL_8:
  v16 = *(_QWORD *)(v13
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__conname
                  + 8);
  v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0)
    v17 = *(_QWORD *)(v13
                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__conname) & 0xFFFFFFFFFFFFLL;
  if (v17)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_InferClause@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_InferClause._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_InferClause()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_InferClause()
{
  return PgQuery_InferClause.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_InferClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_InferClause.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_InferClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferClause and conformance PgQuery_InferClause, type metadata accessor for PgQuery_InferClause, (uint64_t)&protocol conformance descriptor for PgQuery_InferClause);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_InferClause@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_InferClause._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_InferClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferClause and conformance PgQuery_InferClause, type metadata accessor for PgQuery_InferClause, (uint64_t)&protocol conformance descriptor for PgQuery_InferClause);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_InferClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferClause and conformance PgQuery_InferClause, type metadata accessor for PgQuery_InferClause, (uint64_t)&protocol conformance descriptor for PgQuery_InferClause);
  return Message.hash(into:)();
}

uint64_t PgQuery_OnConflictClause._StorageClass.__deallocating_deinit()
{
  return PgQuery_WindowFunc._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__infer, &demangling cache variable for type metadata for PgQuery_InferClause?, (uint64_t)&OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList, &OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause);
}

uint64_t PgQuery_WindowFunc._StorageClass.__deallocating_deinit(_QWORD *a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;

  outlined destroy of (key: String, value: StorableValue)(v4 + *a1, a2);
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v4 + *a4, &demangling cache variable for type metadata for PgQuery_Node?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_OnConflictClause._StorageClass()
{
  return type metadata accessor for PgQuery_OnConflictClause._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_OnConflictClause._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_OnConflictClause._StorageClass);
}

void type metadata completion function for PgQuery_OnConflictClause._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_InferClause?, (void (*)(uint64_t))type metadata accessor for PgQuery_InferClause);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for PgQuery_InferClause(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_InferClause);
}

uint64_t PgQuery_OnConflictClause.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for PgQuery_OnConflictClause(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_OnConflictClause._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    v6 = specialized PgQuery_OnConflictClause._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction();
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_8;
        case 2:
          type metadata accessor for PgQuery_InferClause(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferClause and conformance PgQuery_InferClause, type metadata accessor for PgQuery_InferClause, (uint64_t)&protocol conformance descriptor for PgQuery_InferClause);
          goto LABEL_7;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v10 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_8;
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
LABEL_7:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_8;
        case 5:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_8:
          v2 = v10;
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_OnConflictClause.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t InferClause;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t Node;
  uint64_t v30;
  char v31;
  uint64_t v32;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v6);
  v28 = (uint64_t)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v27 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v26 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_InferClause?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  InferClause = type metadata accessor for PgQuery_InferClause(0);
  v13 = *(_QWORD *)(InferClause - 8);
  MEMORY[0x1E0C80A78](InferClause);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(int *)(type metadata accessor for PgQuery_OnConflictClause(0) + 20);
  v25 = v3;
  v17 = *(_QWORD *)(v3 + v16);
  v18 = *(_QWORD *)(v17 + 16);
  v32 = a3;
  if (v18)
  {
    v19 = *(_BYTE *)(v17 + 24);
    v30 = v18;
    v31 = v19;
    lazy protocol witness table accessor for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction();
    swift_retain();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  else
  {
    swift_retain();
  }
  outlined init with copy of PgQuery_Alias?(v17+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__infer, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_InferClause?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, InferClause) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_InferClause?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v15, type metadata accessor for PgQuery_InferClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferClause and conformance PgQuery_InferClause, type metadata accessor for PgQuery_InferClause, (uint64_t)&protocol conformance descriptor for PgQuery_InferClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v15, type metadata accessor for PgQuery_InferClause);
    if (v4)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v17
                             + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4)
      return swift_release();
  }
  v20 = v28;
  outlined init with copy of PgQuery_Alias?(v17+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v28, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v20, 1, Node) != 1)
  {
    v21 = v20;
    v22 = v26;
    outlined init with take of PgQuery_OidList(v21, v26, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v22, type metadata accessor for PgQuery_Node);
    if (!v4)
      goto LABEL_13;
    return swift_release();
  }
  outlined destroy of (key: String, value: StorableValue)(v20, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_13:
  if (*(_DWORD *)(v17
                 + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_OnConflictClause@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_OnConflictClause._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_OnConflictClause()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_OnConflictClause()
{
  return PgQuery_OnConflictClause.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_OnConflictClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_OnConflictClause.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_OnConflictClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictClause and conformance PgQuery_OnConflictClause, type metadata accessor for PgQuery_OnConflictClause, (uint64_t)&protocol conformance descriptor for PgQuery_OnConflictClause);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OnConflictClause@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_OnConflictClause._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_OnConflictClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictClause and conformance PgQuery_OnConflictClause, type metadata accessor for PgQuery_OnConflictClause, (uint64_t)&protocol conformance descriptor for PgQuery_OnConflictClause);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_OnConflictClause()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictClause and conformance PgQuery_OnConflictClause, type metadata accessor for PgQuery_OnConflictClause, (uint64_t)&protocol conformance descriptor for PgQuery_OnConflictClause);
  return Message.hash(into:)();
}

uint64_t PgQuery_CommonTableExpr._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Node;

  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 32) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 40) = 0;
  *(_BYTE *)(v0 + 48) = 1;
  v2 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctequery;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v2, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cterecursive) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cterefcount) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecolnames) = v1;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecoltypes) = v1;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecoltypmods) = v1;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecolcollations) = v1;
  return v0;
}

uint64_t PgQuery_CommonTableExpr._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v17;

  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0xE000000000000000;
  v3 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1 + 32) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1 + 40) = 0;
  *(_BYTE *)(v1 + 48) = 1;
  v4 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctequery;
  v17 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctequery;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v4, 1, 1, Node);
  v6 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cterecursive;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cterecursive) = 0;
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cterefcount;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cterefcount) = 0;
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecolnames;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecolnames) = v3;
  v10 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecoltypes;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecoltypes) = v3;
  v11 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecoltypmods;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecoltypmods) = v3;
  v12 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecolcollations;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecolcollations) = v3;
  v13 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v1 + 24) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = *(_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)(v1 + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(v1 + 48) = v14;
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctequery, v17, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v6) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  *(_BYTE *)(v1 + v7) = *(_BYTE *)(a1
                                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cterecursive);
  *(_DWORD *)(v1 + v8) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cterefcount);
  *(_QWORD *)(v1 + v9) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecolnames);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v10) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecoltypes);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v11) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecoltypmods);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecolcollations);
  swift_bridgeObjectRetain();
  swift_release();
  *(_QWORD *)(v1 + v12) = v15;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t PgQuery_CommonTableExpr._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctequery, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_CommonTableExpr._StorageClass()
{
  return type metadata accessor for PgQuery_CommonTableExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CommonTableExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CommonTableExpr._StorageClass);
}

void type metadata completion function for PgQuery_CommonTableExpr._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_CommonTableExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_CommonTableExpr, (void (*)(_QWORD))type metadata accessor for PgQuery_CommonTableExpr._StorageClass, PgQuery_CommonTableExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_CommonTableExpr.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_CommonTableExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_11;
        case 2:
        case 8:
        case 9:
        case 10:
        case 11:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_11;
        case 3:
          lazy protocol witness table accessor for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_11;
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_11;
        case 5:
        case 7:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_11;
        case 6:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_11:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CommonTableExpr.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v20 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v17 = (uint64_t)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(int *)(type metadata accessor for PgQuery_CommonTableExpr(0) + 20);
  v16 = v0;
  v8 = *(_QWORD *)(v0 + v7);
  v9 = *(_QWORD *)(v8 + 24);
  if ((v9 & 0x2000000000000000) != 0)
    v10 = HIBYTE(v9) & 0xF;
  else
    v10 = *(_QWORD *)(v8 + 16) & 0xFFFFFFFFFFFFLL;
  swift_retain();
  if (v10)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1)
    {
LABEL_9:
      swift_bridgeObjectRelease();
      return swift_release();
    }
    swift_bridgeObjectRelease();
  }
  if (!*(_QWORD *)(*(_QWORD *)(v8 + 32) + 16))
  {
    v11 = Node;
    v13 = *(_QWORD *)(v8 + 40);
    if (!v13)
      goto LABEL_15;
    goto LABEL_14;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  swift_bridgeObjectRetain();
  v11 = Node;
  dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
  if (v1)
    goto LABEL_9;
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(v8 + 40);
  if (v13)
  {
LABEL_14:
    v14 = *(_BYTE *)(v8 + 48);
    v18 = v13;
    v19 = v14;
    lazy protocol witness table accessor for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v1)
      return swift_release();
  }
LABEL_15:
  outlined init with copy of PgQuery_Alias?(v8+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctequery, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v4, 1, v11) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    v15 = v17;
    outlined init with take of PgQuery_OidList((uint64_t)v4, v17, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v15, type metadata accessor for PgQuery_Node);
    if (v1)
      return swift_release();
  }
  if (*(_DWORD *)(v8
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v1)
      return swift_release();
  }
  if (*(_BYTE *)(v8
                + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cterecursive) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v1)
      return swift_release();
  }
  if (*(_DWORD *)(v8
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cterefcount))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v1)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v8
                             + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecolnames)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v8
                             + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecoltypes)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v8
                             + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecoltypmods)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v8
                             + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecolcollations)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CommonTableExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CommonTableExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CommonTableExpr()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CommonTableExpr()
{
  return PgQuery_CommonTableExpr.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CommonTableExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommonTableExpr and conformance PgQuery_CommonTableExpr, type metadata accessor for PgQuery_CommonTableExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CommonTableExpr);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CommonTableExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CommonTableExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CommonTableExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommonTableExpr and conformance PgQuery_CommonTableExpr, type metadata accessor for PgQuery_CommonTableExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CommonTableExpr);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CommonTableExpr()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommonTableExpr and conformance PgQuery_CommonTableExpr, type metadata accessor for PgQuery_CommonTableExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CommonTableExpr);
  return Message.hash(into:)();
}

uint64_t PgQuery_RoleSpec.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        lazy protocol witness table accessor for type PgQuery_RoleSpecType and conformance PgQuery_RoleSpecType();
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    v4 = v3;
    dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
    v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_RoleSpec.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  if (!*(_QWORD *)v0
    || (lazy protocol witness table accessor for type PgQuery_RoleSpecType and conformance PgQuery_RoleSpecType(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    v3 = *(_QWORD *)(v0 + 24);
    v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v4 = *(_QWORD *)(v0 + 16) & 0xFFFFFFFFFFFFLL;
    if (!v4 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (!*(_DWORD *)(v0 + 32)
        || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for PgQuery_RoleSpec(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RoleSpec@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_DWORD *)(a1 + 32) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RoleSpec()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_RoleSpec()
{
  return PgQuery_RoleSpec.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_RoleSpec()
{
  return PgQuery_RoleSpec.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RoleSpec()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, type metadata accessor for PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RoleSpec@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RoleSpec._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RoleSpec()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, type metadata accessor for PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RoleSpec()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, type metadata accessor for PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
  return Message.hash(into:)();
}

uint64_t PgQuery_TriggerTransition.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2)
      {
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_TriggerTransition.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(v0 + 8);
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *(_QWORD *)v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (*(_BYTE *)(v0 + 16) != 1
      || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
    {
      if (*(_BYTE *)(v0 + 17) != 1
        || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for PgQuery_TriggerTransition(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_TriggerTransition@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_WORD *)(a1 + 16) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_TriggerTransition()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_TriggerTransition()
{
  return PgQuery_TriggerTransition.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_TriggerTransition()
{
  return PgQuery_TriggerTransition.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_TriggerTransition()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TriggerTransition and conformance PgQuery_TriggerTransition, type metadata accessor for PgQuery_TriggerTransition, (uint64_t)&protocol conformance descriptor for PgQuery_TriggerTransition);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_TriggerTransition@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_TriggerTransition._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_TriggerTransition()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TriggerTransition and conformance PgQuery_TriggerTransition, type metadata accessor for PgQuery_TriggerTransition, (uint64_t)&protocol conformance descriptor for PgQuery_TriggerTransition);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_TriggerTransition()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TriggerTransition and conformance PgQuery_TriggerTransition, type metadata accessor for PgQuery_TriggerTransition, (uint64_t)&protocol conformance descriptor for PgQuery_TriggerTransition);
  return Message.hash(into:)();
}

uint64_t PgQuery_PartitionElem._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of (key: String, value: StorableValue)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PgQuery_PartitionElem._StorageClass()
{
  return type metadata accessor for PgQuery_PartitionElem._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_PartitionElem._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_PartitionElem._StorageClass);
}

void type metadata completion function for PgQuery_PartitionElem._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t PgQuery_PartitionElem.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for PgQuery_PartitionElem(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_PartitionElem._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    v6 = specialized PgQuery_PartitionElem._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_7;
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 3:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          v10 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_7;
        case 5:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          v2 = v10;
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_PartitionElem.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t Node;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v4 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(int *)(type metadata accessor for PgQuery_PartitionElem(0) + 20);
  v15 = v0;
  v8 = *(_QWORD *)(v0 + v7);
  v9 = *(_QWORD *)(v8 + 24);
  if ((v9 & 0x2000000000000000) != 0)
    v10 = HIBYTE(v9) & 0xF;
  else
    v10 = *(_QWORD *)(v8 + 16) & 0xFFFFFFFFFFFFLL;
  swift_retain();
  if (v10)
  {
    v11 = (uint64_t)v6;
    swift_bridgeObjectRetain();
    v12 = v16;
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    v13 = v12;
    swift_bridgeObjectRelease();
    if (v12)
      return swift_release();
  }
  else
  {
    v11 = (uint64_t)v6;
    v13 = v16;
  }
  outlined init with copy of PgQuery_Alias?(v8+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, (uint64_t)v3, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v3, 1, Node) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v3, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_11;
  }
  outlined init with take of PgQuery_OidList((uint64_t)v3, v11, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v11, type metadata accessor for PgQuery_Node);
  if (v13)
    return swift_release();
LABEL_11:
  if (*(_QWORD *)(*(_QWORD *)(v8
                             + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v13)
      return swift_release();
  }
  if (*(_QWORD *)(*(_QWORD *)(v8
                             + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opclass)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v13)
      return swift_release();
  }
  if (*(_DWORD *)(v8
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v13)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_PartitionElem@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_PartitionElem._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_PartitionElem()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_PartitionElem()
{
  return PgQuery_PartitionElem.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_PartitionElem()
{
  return PgQuery_PartitionElem.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_PartitionElem()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionElem and conformance PgQuery_PartitionElem, type metadata accessor for PgQuery_PartitionElem, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionElem);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_PartitionElem@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_PartitionElem._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_PartitionElem()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionElem and conformance PgQuery_PartitionElem, type metadata accessor for PgQuery_PartitionElem, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionElem);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_PartitionElem()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionElem and conformance PgQuery_PartitionElem, type metadata accessor for PgQuery_PartitionElem, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionElem);
  return Message.hash(into:)();
}

uint64_t PgQuery_PartitionSpec.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        v4 = v3;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    v4 = v3;
    dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
    v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_PartitionSpec.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(v0 + 8);
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *(_QWORD *)v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v0 + 16) + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      if (!*(_DWORD *)(v0 + 24)
        || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for PgQuery_PartitionSpec(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_PartitionSpec@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DEE9D8];
  *(_DWORD *)(a1 + 24) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_PartitionSpec()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance PgQuery_AlterTableStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance PgQuery_AlterTableStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_PartitionSpec()
{
  return PgQuery_PartitionSpec.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_PartitionSpec()
{
  return PgQuery_PartitionSpec.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_PartitionSpec()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionSpec and conformance PgQuery_PartitionSpec, type metadata accessor for PgQuery_PartitionSpec, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionSpec);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_PartitionSpec@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_PartitionSpec._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_PartitionSpec()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionSpec and conformance PgQuery_PartitionSpec, type metadata accessor for PgQuery_PartitionSpec, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionSpec);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_PartitionSpec()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionSpec and conformance PgQuery_PartitionSpec, type metadata accessor for PgQuery_PartitionSpec, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionSpec);
  return Message.hash(into:)();
}

uint64_t PgQuery_PartitionBoundSpec.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 3:
        case 4:
        case 8:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 5:
        case 6:
        case 7:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_PartitionBoundSpec.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(v0 + 8);
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *(_QWORD *)v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (*(_BYTE *)(v0 + 16) != 1
      || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
    {
      if (!*(_DWORD *)(v0 + 20)
        || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
      {
        if (!*(_DWORD *)(v0 + 24)
          || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
        {
          if (!*(_QWORD *)(*(_QWORD *)(v0 + 32) + 16)
            || (type metadata accessor for PgQuery_Node(0),
                lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
          {
            if (!*(_QWORD *)(*(_QWORD *)(v0 + 40) + 16)
              || (type metadata accessor for PgQuery_Node(0),
                  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
            {
              if (!*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16)
                || (type metadata accessor for PgQuery_Node(0),
                    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
              {
                if (!*(_DWORD *)(v0 + 56)
                  || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
                {
                  type metadata accessor for PgQuery_PartitionBoundSpec(0);
                  return UnknownStorage.traverse<A>(visitor:)();
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_PartitionBoundSpec@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 32) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 40) = v1;
  *(_QWORD *)(a1 + 48) = v1;
  *(_DWORD *)(a1 + 56) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_PartitionBoundSpec()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance PgQuery_GrantStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 48);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance PgQuery_GrantStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 48);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_PartitionBoundSpec()
{
  return PgQuery_PartitionBoundSpec.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_PartitionBoundSpec()
{
  return PgQuery_PartitionBoundSpec.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_PartitionBoundSpec()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionBoundSpec and conformance PgQuery_PartitionBoundSpec, type metadata accessor for PgQuery_PartitionBoundSpec, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionBoundSpec);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_PartitionBoundSpec@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_PartitionBoundSpec._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_PartitionBoundSpec()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionBoundSpec and conformance PgQuery_PartitionBoundSpec, type metadata accessor for PgQuery_PartitionBoundSpec, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionBoundSpec);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_PartitionBoundSpec()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionBoundSpec and conformance PgQuery_PartitionBoundSpec, type metadata accessor for PgQuery_PartitionBoundSpec, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionBoundSpec);
  return Message.hash(into:)();
}

uint64_t PgQuery_PartitionRangeDatum._StorageClass.__deallocating_deinit()
{
  return PgQuery_Node._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_PartitionRangeDatumP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__value, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_PartitionRangeDatum._StorageClass()
{
  return type metadata accessor for PgQuery_PartitionRangeDatum._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_PartitionRangeDatum._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_PartitionRangeDatum._StorageClass);
}

void type metadata completion function for PgQuery_PartitionRangeDatum._StorageClass()
{
  type metadata completion function for PgQuery_CommentStmt._StorageClass();
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for PgQuery_PartitionRangeDatumKind()
{
  return &type metadata for PgQuery_PartitionRangeDatumKind;
}

ValueMetadata *type metadata accessor for PgQuery_CTEMaterialize()
{
  return &type metadata for PgQuery_CTEMaterialize;
}

uint64_t getEnumTagSinglePayload for PgQuery_InferClause()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_InferClause()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

ValueMetadata *type metadata accessor for PgQuery_FunctionParameterMode()
{
  return &type metadata for PgQuery_FunctionParameterMode;
}

ValueMetadata *type metadata accessor for PgQuery_WCOKind()
{
  return &type metadata for PgQuery_WCOKind;
}

ValueMetadata *type metadata accessor for PgQuery_RTEKind()
{
  return &type metadata for PgQuery_RTEKind;
}

uint64_t getEnumTagSinglePayload for PgQuery_TableFunc()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_TableFunc()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_Query()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_Query()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_TableSampleClause()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_TableSampleClause()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

ValueMetadata *type metadata accessor for PgQuery_DefElemAction()
{
  return &type metadata for PgQuery_DefElemAction;
}

ValueMetadata *type metadata accessor for PgQuery_ConstrType()
{
  return &type metadata for PgQuery_ConstrType;
}

ValueMetadata *type metadata accessor for PgQuery_SortByNulls()
{
  return &type metadata for PgQuery_SortByNulls;
}

ValueMetadata *type metadata accessor for PgQuery_SortByDir()
{
  return &type metadata for PgQuery_SortByDir;
}

uint64_t getEnumTagSinglePayload for PgQuery_WindowDef()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_WindowDef()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

ValueMetadata *type metadata accessor for PgQuery_A_Expr_Kind()
{
  return &type metadata for PgQuery_A_Expr_Kind;
}

uint64_t getEnumTagSinglePayload for PgQuery_FuncExpr()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_FuncExpr()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_FuncCall()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_FuncCall()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

ValueMetadata *type metadata accessor for PgQuery_CoercionContext()
{
  return &type metadata for PgQuery_CoercionContext;
}

uint64_t getEnumTagSinglePayload for PgQuery_ObjectWithArgs()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_ObjectWithArgs()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_ObjectWithArgs()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PgQuery_CollateClause()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CollateClause()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

ValueMetadata *type metadata accessor for PgQuery_ViewCheckOption()
{
  return &type metadata for PgQuery_ViewCheckOption;
}

ValueMetadata *type metadata accessor for PgQuery_ObjectType()
{
  return &type metadata for PgQuery_ObjectType;
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_TypeName(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v5 = a1;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    *(_WORD *)(a1 + 12) = *((_WORD *)a2 + 6);
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
    *(_QWORD *)(a1 + 32) = a2[4];
    v6 = *(int *)(a3 + 48);
    v7 = (uint64_t)a2 + v6;
    v8 = a1 + v6;
    *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v8, v7, v9);
  }
  return v5;
}

uint64_t destroy for PgQuery_TypeName(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 48);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_TypeName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(int *)(a3 + 48);
  v5 = a2 + v4;
  v6 = a1 + v4;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8(v6, v5, v7);
  return a1;
}

uint64_t assignWithCopy for PgQuery_TypeName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v6 = *(int *)(a3 + 48);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_TypeName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(int *)(a3 + 48);
  v5 = a2 + v4;
  v6 = a1 + v4;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, v5, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_TypeName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v6 = *(int *)(a3 + 48);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_TypeName()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA34D20(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 48)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_TypeName()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_18DA34DA8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 48)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_TypeName()
{
  return type metadata completion function for PgQuery_TypeName();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_PartitionSpec(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
    v6 = *(int *)(a3 + 28);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t initializeWithCopy for PgQuery_PartitionSpec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_PartitionSpec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_PartitionSpec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_PartitionSpec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_PartitionSpec()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_PartitionSpec()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_PartitionSpec()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_PartitionBoundSpec(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_QWORD *)(a1 + 20) = *(uint64_t *)((char *)a2 + 20);
    v6 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v6;
    *(_QWORD *)(a1 + 48) = a2[6];
    v7 = *(int *)(a3 + 48);
    v8 = (uint64_t)a2 + v7;
    v9 = a1 + v7;
    *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 14);
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v9, v8, v10);
  }
  return v3;
}

uint64_t destroy for PgQuery_PartitionBoundSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 48);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_PartitionBoundSpec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 20) = *(_QWORD *)(a2 + 20);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = *(int *)(a3 + 48);
  v7 = a2 + v6;
  v8 = a1 + v6;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v8, v7, v9);
  return a1;
}

uint64_t assignWithCopy for PgQuery_PartitionBoundSpec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  v6 = *(int *)(a3 + 48);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_PartitionBoundSpec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 20) = *(_QWORD *)(a2 + 20);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v4 = *(int *)(a3 + 48);
  v5 = a2 + v4;
  v6 = a1 + v4;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, v5, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_PartitionBoundSpec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 20) = *(_QWORD *)(a2 + 20);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  v7 = *(int *)(a3 + 48);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_PartitionBoundSpec()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA35598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 48), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_PartitionBoundSpec()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA35620(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 48), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_PartitionBoundSpec()
{
  return type metadata completion function for PgQuery_TypeName();
}

ValueMetadata *type metadata accessor for PgQuery_DropBehavior()
{
  return &type metadata for PgQuery_DropBehavior;
}

ValueMetadata *type metadata accessor for PgQuery_AlterTableType()
{
  return &type metadata for PgQuery_AlterTableType;
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_RoleSpec(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v5 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v5;
    v6 = *(int *)(a3 + 28);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for PgQuery_RoleSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_RoleSpec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_RoleSpec(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_RoleSpec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_RoleSpec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_RoleSpec()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_RoleSpec()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_RoleSpec()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

ValueMetadata *type metadata accessor for PgQuery_SetOperation()
{
  return &type metadata for PgQuery_SetOperation;
}

uint64_t getEnumTagSinglePayload for PgQuery_SelectStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_SelectStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_IntoClause()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_IntoClause()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_WithClause(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v5 = a1;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
    v6 = *(int *)(a3 + 28);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t initializeWithCopy for PgQuery_WithClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for PgQuery_WithClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_WithClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_WithClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_WithClause()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_WithClause()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_WithClause()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

uint64_t getEnumTagSinglePayload for PgQuery_OnConflictClause()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_OnConflictClause()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

ValueMetadata *type metadata accessor for PgQuery_LimitOption()
{
  return &type metadata for PgQuery_LimitOption;
}

ValueMetadata *type metadata accessor for PgQuery_OverridingKind()
{
  return &type metadata for PgQuery_OverridingKind;
}

uint64_t getEnumTagSinglePayload for PgQuery_QuerySource(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PgQuery_QuerySource(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for PgQuery_QuerySource(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for PgQuery_QuerySource(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PgQuery_QuerySource()
{
  return &type metadata for PgQuery_QuerySource;
}

ValueMetadata *type metadata accessor for PgQuery_CmdType()
{
  return &type metadata for PgQuery_CmdType;
}

uint64_t getEnumTagSinglePayload for PgQuery_OnConflictExpr()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_OnConflictExpr()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_FromExpr()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_FromExpr()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

ValueMetadata *type metadata accessor for PgQuery_OnCommitAction()
{
  return &type metadata for PgQuery_OnCommitAction;
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_RangeVar(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t Alias;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v28;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v9;
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    v10 = a2[7];
    v11 = a2[8];
    *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
    v12 = *(int *)(a3 + 40);
    v28 = a1 + v12;
    v13 = (uint64_t)a2 + v12;
    *(_QWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 64) = v11;
    v14 = type metadata accessor for UnknownStorage();
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15(v28, v13, v14);
    v16 = *(int *)(a3 + 44);
    v17 = (_QWORD *)((char *)v4 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    Alias = type metadata accessor for PgQuery_Alias(0);
    v20 = *(_QWORD *)(Alias - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v20 + 48))(v18, 1, Alias))
    {
      v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v23 = v18[1];
      *v17 = *v18;
      v17[1] = v23;
      v17[2] = v18[2];
      v24 = *(int *)(Alias + 24);
      v25 = (char *)v17 + v24;
      v26 = (char *)v18 + v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v15((uint64_t)v25, (uint64_t)v26, v14);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, Alias);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_RangeVar(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Alias;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 44);
  Alias = type metadata accessor for PgQuery_Alias(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Alias - 8) + 48))(v6, 1, Alias);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(Alias + 24), v5);
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_RangeVar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t Alias;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v10 = *(int *)(a3 + 40);
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v9;
  v13 = type metadata accessor for UnknownStorage();
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14(v11, v12, v13);
  v15 = *(int *)(a3 + 44);
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  Alias = type metadata accessor for PgQuery_Alias(0);
  v19 = *(_QWORD *)(Alias - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, Alias))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = v17[1];
    *v16 = *v17;
    v16[1] = v21;
    v16[2] = v17[2];
    v22 = *(int *)(Alias + 24);
    v23 = (char *)v16 + v22;
    v24 = (char *)v17 + v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14((uint64_t)v23, (uint64_t)v24, v13);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, Alias);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_RangeVar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t Alias;
  uint64_t v16;
  uint64_t (*v17)(_QWORD *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v6 = *(int *)(a3 + 40);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 44);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  Alias = type metadata accessor for PgQuery_Alias(0);
  v16 = *(_QWORD *)(Alias - 8);
  v17 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, Alias);
  v18 = v17(v14, 1, Alias);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *v13 = *v14;
      v13[1] = v14[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v13[2] = v14[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v11((uint64_t)v13 + *(int *)(Alias + 24), (uint64_t)v14 + *(int *)(Alias + 24), v9);
      return a1;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v13, type metadata accessor for PgQuery_Alias);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  *v13 = *v14;
  v13[1] = v14[1];
  v13[2] = v14[2];
  v19 = *(int *)(Alias + 24);
  v20 = (char *)v13 + v19;
  v21 = (char *)v14 + v19;
  v22 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22(v20, v21, v9);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, Alias);
  return a1;
}

uint64_t initializeWithTake for PgQuery_RangeVar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t Alias;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v8 = *(int *)(a3 + 40);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  *(_OWORD *)(a1 + 56) = v7;
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  v13 = *(int *)(a3 + 44);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  Alias = type metadata accessor for PgQuery_Alias(0);
  v17 = *(_QWORD *)(Alias - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, Alias))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v14 = *(_OWORD *)v15;
    v14[2] = v15[2];
    v12((char *)v14 + *(int *)(Alias + 24), (char *)v15 + *(int *)(Alias + 24), v11);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, Alias);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_RangeVar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t Alias;
  uint64_t v20;
  uint64_t (*v21)(_QWORD *, uint64_t, uint64_t);
  int v22;
  uint64_t v23;
  uint64_t v25;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v10 = *(int *)(a3 + 40);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 40);
  v15(v11, v12, v13);
  v16 = *(int *)(a3 + 44);
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  Alias = type metadata accessor for PgQuery_Alias(0);
  v20 = *(_QWORD *)(Alias - 8);
  v21 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v12) = v21(v17, 1, Alias);
  v22 = v21(v18, 1, Alias);
  if (!(_DWORD)v12)
  {
    if (!v22)
    {
      v25 = v18[1];
      *v17 = *v18;
      v17[1] = v25;
      swift_bridgeObjectRelease();
      v17[2] = v18[2];
      swift_bridgeObjectRelease();
      v15((uint64_t)v17 + *(int *)(Alias + 24), (uint64_t)v18 + *(int *)(Alias + 24), v13);
      return a1;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Alias);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v17 = *(_OWORD *)v18;
  v17[2] = v18[2];
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))((char *)v17 + *(int *)(Alias + 24), (char *)v18 + *(int *)(Alias + 24), v13);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, Alias);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_RangeVar()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA36860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 40);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 44);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_RangeVar()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA36910(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 40);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 44);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for PgQuery_RangeVar()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_Alias?, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

ValueMetadata *type metadata accessor for PgQuery_OnConflictAction()
{
  return &type metadata for PgQuery_OnConflictAction;
}

ValueMetadata *type metadata accessor for PgQuery_JoinType()
{
  return &type metadata for PgQuery_JoinType;
}

uint64_t getEnumTagSinglePayload for PgQuery_Alias()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_Alias()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_Alias()
{
  return type metadata completion function for PgQuery_Alias();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PgQuery_BoolTestType()
{
  return &type metadata for PgQuery_BoolTestType;
}

ValueMetadata *type metadata accessor for PgQuery_NullTestType()
{
  return &type metadata for PgQuery_NullTestType;
}

ValueMetadata *type metadata accessor for PgQuery_XmlOptionType()
{
  return &type metadata for PgQuery_XmlOptionType;
}

ValueMetadata *type metadata accessor for PgQuery_XmlExprOp()
{
  return &type metadata for PgQuery_XmlExprOp;
}

ValueMetadata *type metadata accessor for PgQuery_SQLValueFunctionOp()
{
  return &type metadata for PgQuery_SQLValueFunctionOp;
}

ValueMetadata *type metadata accessor for PgQuery_MinMaxOp()
{
  return &type metadata for PgQuery_MinMaxOp;
}

ValueMetadata *type metadata accessor for PgQuery_RowCompareType()
{
  return &type metadata for PgQuery_RowCompareType;
}

ValueMetadata *type metadata accessor for PgQuery_SubLinkType()
{
  return &type metadata for PgQuery_SubLinkType;
}

ValueMetadata *type metadata accessor for PgQuery_BoolExprType()
{
  return &type metadata for PgQuery_BoolExprType;
}

ValueMetadata *type metadata accessor for PgQuery_CoercionForm()
{
  return &type metadata for PgQuery_CoercionForm;
}

ValueMetadata *type metadata accessor for PgQuery_AggSplit()
{
  return &type metadata for PgQuery_AggSplit;
}

ValueMetadata *type metadata accessor for PgQuery_ParamKind()
{
  return &type metadata for PgQuery_ParamKind;
}

uint64_t getEnumTagSinglePayload for PgQuery_Node()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_Node()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_Node.OneOf_Node(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_18DA36C1C + 4 * word_18DC0E19C[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t type metadata accessor for PgQuery_Var(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Var);
}

uint64_t type metadata accessor for PgQuery_Param(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Param);
}

uint64_t type metadata accessor for PgQuery_Aggref(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Aggref);
}

uint64_t type metadata accessor for PgQuery_GroupingFunc(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_GroupingFunc);
}

uint64_t type metadata accessor for PgQuery_WindowFunc(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_WindowFunc);
}

uint64_t type metadata accessor for PgQuery_SubscriptingRef(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SubscriptingRef);
}

uint64_t type metadata accessor for PgQuery_NamedArgExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_NamedArgExpr);
}

uint64_t type metadata accessor for PgQuery_OpExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_OpExpr);
}

uint64_t type metadata accessor for PgQuery_DistinctExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DistinctExpr);
}

uint64_t type metadata accessor for PgQuery_NullIfExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_NullIfExpr);
}

uint64_t type metadata accessor for PgQuery_ScalarArrayOpExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ScalarArrayOpExpr);
}

uint64_t type metadata accessor for PgQuery_BoolExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_BoolExpr);
}

uint64_t type metadata accessor for PgQuery_SubLink(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SubLink);
}

uint64_t type metadata accessor for PgQuery_SubPlan(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SubPlan);
}

uint64_t type metadata accessor for PgQuery_AlternativeSubPlan(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlternativeSubPlan);
}

uint64_t type metadata accessor for PgQuery_FieldSelect(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_FieldSelect);
}

uint64_t type metadata accessor for PgQuery_FieldStore(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_FieldStore);
}

uint64_t type metadata accessor for PgQuery_RelabelType(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RelabelType);
}

uint64_t type metadata accessor for PgQuery_CoerceViaIO(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CoerceViaIO);
}

uint64_t type metadata accessor for PgQuery_ArrayCoerceExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ArrayCoerceExpr);
}

uint64_t type metadata accessor for PgQuery_ConvertRowtypeExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ConvertRowtypeExpr);
}

uint64_t type metadata accessor for PgQuery_CollateExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CollateExpr);
}

uint64_t type metadata accessor for PgQuery_CaseExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CaseExpr);
}

uint64_t type metadata accessor for PgQuery_CaseWhen(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CaseWhen);
}

uint64_t type metadata accessor for PgQuery_CaseTestExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CaseTestExpr);
}

uint64_t type metadata accessor for PgQuery_ArrayExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ArrayExpr);
}

uint64_t type metadata accessor for PgQuery_RowExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RowExpr);
}

uint64_t type metadata accessor for PgQuery_RowCompareExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RowCompareExpr);
}

uint64_t type metadata accessor for PgQuery_CoalesceExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CoalesceExpr);
}

uint64_t type metadata accessor for PgQuery_MinMaxExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_MinMaxExpr);
}

uint64_t type metadata accessor for PgQuery_SQLValueFunction(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SQLValueFunction);
}

uint64_t type metadata accessor for PgQuery_XmlExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_XmlExpr);
}

uint64_t type metadata accessor for PgQuery_NullTest(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_NullTest);
}

uint64_t type metadata accessor for PgQuery_BooleanTest(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_BooleanTest);
}

uint64_t type metadata accessor for PgQuery_CoerceToDomain(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CoerceToDomain);
}

uint64_t type metadata accessor for PgQuery_CoerceToDomainValue(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CoerceToDomainValue);
}

uint64_t type metadata accessor for PgQuery_SetToDefault(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SetToDefault);
}

uint64_t type metadata accessor for PgQuery_CurrentOfExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CurrentOfExpr);
}

uint64_t type metadata accessor for PgQuery_NextValueExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_NextValueExpr);
}

uint64_t type metadata accessor for PgQuery_InferenceElem(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_InferenceElem);
}

uint64_t type metadata accessor for PgQuery_TargetEntry(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_TargetEntry);
}

uint64_t type metadata accessor for PgQuery_RangeTblRef(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeTblRef);
}

uint64_t type metadata accessor for PgQuery_JoinExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_JoinExpr);
}

uint64_t type metadata accessor for PgQuery_RawStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RawStmt);
}

uint64_t type metadata accessor for PgQuery_InsertStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_InsertStmt);
}

uint64_t type metadata accessor for PgQuery_DeleteStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DeleteStmt);
}

uint64_t type metadata accessor for PgQuery_UpdateStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_UpdateStmt);
}

uint64_t type metadata accessor for PgQuery_AlterTableStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterTableStmt);
}

uint64_t type metadata accessor for PgQuery_AlterTableCmd(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterTableCmd);
}

uint64_t type metadata accessor for PgQuery_AlterDomainStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterDomainStmt);
}

uint64_t type metadata accessor for PgQuery_SetOperationStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SetOperationStmt);
}

uint64_t type metadata accessor for PgQuery_GrantStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_GrantStmt);
}

uint64_t type metadata accessor for PgQuery_GrantRoleStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_GrantRoleStmt);
}

uint64_t type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterDefaultPrivilegesStmt);
}

uint64_t type metadata accessor for PgQuery_ClosePortalStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ClosePortalStmt);
}

uint64_t type metadata accessor for PgQuery_ClusterStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ClusterStmt);
}

uint64_t type metadata accessor for PgQuery_CopyStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CopyStmt);
}

uint64_t type metadata accessor for PgQuery_CreateStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateStmt);
}

uint64_t type metadata accessor for PgQuery_DefineStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DefineStmt);
}

uint64_t type metadata accessor for PgQuery_DropStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DropStmt);
}

uint64_t type metadata accessor for PgQuery_TruncateStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_TruncateStmt);
}

uint64_t type metadata accessor for PgQuery_CommentStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CommentStmt);
}

uint64_t type metadata accessor for PgQuery_FetchStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_FetchStmt);
}

uint64_t type metadata accessor for PgQuery_IndexStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_IndexStmt);
}

uint64_t type metadata accessor for PgQuery_CreateFunctionStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateFunctionStmt);
}

uint64_t type metadata accessor for PgQuery_AlterFunctionStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterFunctionStmt);
}

uint64_t type metadata accessor for PgQuery_DoStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DoStmt);
}

uint64_t type metadata accessor for PgQuery_RenameStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RenameStmt);
}

uint64_t type metadata accessor for PgQuery_RuleStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RuleStmt);
}

uint64_t type metadata accessor for PgQuery_NotifyStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_NotifyStmt);
}

uint64_t type metadata accessor for PgQuery_ListenStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ListenStmt);
}

uint64_t type metadata accessor for PgQuery_UnlistenStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_UnlistenStmt);
}

uint64_t type metadata accessor for PgQuery_TransactionStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_TransactionStmt);
}

uint64_t type metadata accessor for PgQuery_ViewStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ViewStmt);
}

uint64_t type metadata accessor for PgQuery_LoadStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_LoadStmt);
}

uint64_t type metadata accessor for PgQuery_CreateDomainStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateDomainStmt);
}

uint64_t type metadata accessor for PgQuery_CreatedbStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreatedbStmt);
}

uint64_t type metadata accessor for PgQuery_DropdbStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DropdbStmt);
}

uint64_t type metadata accessor for PgQuery_VacuumStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_VacuumStmt);
}

uint64_t type metadata accessor for PgQuery_ExplainStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ExplainStmt);
}

uint64_t type metadata accessor for PgQuery_CreateTableAsStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateTableAsStmt);
}

uint64_t type metadata accessor for PgQuery_CreateSeqStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateSeqStmt);
}

uint64_t type metadata accessor for PgQuery_AlterSeqStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterSeqStmt);
}

uint64_t type metadata accessor for PgQuery_VariableSetStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_VariableSetStmt);
}

uint64_t type metadata accessor for PgQuery_VariableShowStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_VariableShowStmt);
}

uint64_t type metadata accessor for PgQuery_DiscardStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DiscardStmt);
}

uint64_t type metadata accessor for PgQuery_CreateTrigStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateTrigStmt);
}

uint64_t type metadata accessor for PgQuery_CreatePLangStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreatePLangStmt);
}

uint64_t type metadata accessor for PgQuery_CreateRoleStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateRoleStmt);
}

uint64_t type metadata accessor for PgQuery_AlterRoleStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterRoleStmt);
}

uint64_t type metadata accessor for PgQuery_DropRoleStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DropRoleStmt);
}

uint64_t type metadata accessor for PgQuery_LockStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_LockStmt);
}

uint64_t type metadata accessor for PgQuery_ConstraintsSetStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ConstraintsSetStmt);
}

uint64_t type metadata accessor for PgQuery_ReindexStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ReindexStmt);
}

uint64_t type metadata accessor for PgQuery_CreateSchemaStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateSchemaStmt);
}

uint64_t type metadata accessor for PgQuery_AlterDatabaseStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterDatabaseStmt);
}

uint64_t type metadata accessor for PgQuery_AlterDatabaseSetStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterDatabaseSetStmt);
}

uint64_t type metadata accessor for PgQuery_AlterRoleSetStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterRoleSetStmt);
}

uint64_t type metadata accessor for PgQuery_CreateConversionStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateConversionStmt);
}

uint64_t type metadata accessor for PgQuery_CreateCastStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateCastStmt);
}

uint64_t type metadata accessor for PgQuery_CreateOpClassStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateOpClassStmt);
}

uint64_t type metadata accessor for PgQuery_CreateOpFamilyStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateOpFamilyStmt);
}

uint64_t type metadata accessor for PgQuery_AlterOpFamilyStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterOpFamilyStmt);
}

uint64_t type metadata accessor for PgQuery_PrepareStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_PrepareStmt);
}

uint64_t type metadata accessor for PgQuery_ExecuteStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ExecuteStmt);
}

uint64_t type metadata accessor for PgQuery_DeallocateStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DeallocateStmt);
}

uint64_t type metadata accessor for PgQuery_DeclareCursorStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DeclareCursorStmt);
}

uint64_t type metadata accessor for PgQuery_CreateTableSpaceStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateTableSpaceStmt);
}

uint64_t type metadata accessor for PgQuery_DropTableSpaceStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DropTableSpaceStmt);
}

uint64_t type metadata accessor for PgQuery_AlterObjectDependsStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterObjectDependsStmt);
}

uint64_t type metadata accessor for PgQuery_AlterObjectSchemaStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterObjectSchemaStmt);
}

uint64_t type metadata accessor for PgQuery_AlterOwnerStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterOwnerStmt);
}

uint64_t type metadata accessor for PgQuery_AlterOperatorStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterOperatorStmt);
}

uint64_t type metadata accessor for PgQuery_AlterTypeStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterTypeStmt);
}

uint64_t type metadata accessor for PgQuery_DropOwnedStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DropOwnedStmt);
}

uint64_t type metadata accessor for PgQuery_ReassignOwnedStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ReassignOwnedStmt);
}

uint64_t type metadata accessor for PgQuery_CompositeTypeStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CompositeTypeStmt);
}

uint64_t type metadata accessor for PgQuery_CreateEnumStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateEnumStmt);
}

uint64_t type metadata accessor for PgQuery_CreateRangeStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateRangeStmt);
}

uint64_t type metadata accessor for PgQuery_AlterEnumStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterEnumStmt);
}

uint64_t type metadata accessor for PgQuery_AlterTSDictionaryStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterTSDictionaryStmt);
}

uint64_t type metadata accessor for PgQuery_AlterTSConfigurationStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterTSConfigurationStmt);
}

uint64_t type metadata accessor for PgQuery_CreateFdwStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateFdwStmt);
}

uint64_t type metadata accessor for PgQuery_AlterFdwStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterFdwStmt);
}

uint64_t type metadata accessor for PgQuery_CreateForeignServerStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateForeignServerStmt);
}

uint64_t type metadata accessor for PgQuery_AlterForeignServerStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterForeignServerStmt);
}

uint64_t type metadata accessor for PgQuery_CreateUserMappingStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateUserMappingStmt);
}

uint64_t type metadata accessor for PgQuery_AlterUserMappingStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterUserMappingStmt);
}

uint64_t type metadata accessor for PgQuery_DropUserMappingStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DropUserMappingStmt);
}

uint64_t type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterTableSpaceOptionsStmt);
}

uint64_t type metadata accessor for PgQuery_AlterTableMoveAllStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterTableMoveAllStmt);
}

uint64_t type metadata accessor for PgQuery_SecLabelStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SecLabelStmt);
}

uint64_t type metadata accessor for PgQuery_CreateForeignTableStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateForeignTableStmt);
}

uint64_t type metadata accessor for PgQuery_ImportForeignSchemaStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ImportForeignSchemaStmt);
}

uint64_t type metadata accessor for PgQuery_CreateExtensionStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateExtensionStmt);
}

uint64_t type metadata accessor for PgQuery_AlterExtensionStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterExtensionStmt);
}

uint64_t type metadata accessor for PgQuery_AlterExtensionContentsStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterExtensionContentsStmt);
}

uint64_t type metadata accessor for PgQuery_CreateEventTrigStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateEventTrigStmt);
}

uint64_t type metadata accessor for PgQuery_AlterEventTrigStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterEventTrigStmt);
}

uint64_t type metadata accessor for PgQuery_RefreshMatViewStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RefreshMatViewStmt);
}

uint64_t type metadata accessor for PgQuery_ReplicaIdentityStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ReplicaIdentityStmt);
}

uint64_t type metadata accessor for PgQuery_AlterSystemStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterSystemStmt);
}

uint64_t type metadata accessor for PgQuery_CreatePolicyStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreatePolicyStmt);
}

uint64_t type metadata accessor for PgQuery_AlterPolicyStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterPolicyStmt);
}

uint64_t type metadata accessor for PgQuery_CreateTransformStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateTransformStmt);
}

uint64_t type metadata accessor for PgQuery_CreateAmStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateAmStmt);
}

uint64_t type metadata accessor for PgQuery_CreatePublicationStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreatePublicationStmt);
}

uint64_t type metadata accessor for PgQuery_AlterPublicationStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterPublicationStmt);
}

uint64_t type metadata accessor for PgQuery_CreateSubscriptionStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateSubscriptionStmt);
}

uint64_t type metadata accessor for PgQuery_AlterSubscriptionStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterSubscriptionStmt);
}

uint64_t type metadata accessor for PgQuery_DropSubscriptionStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DropSubscriptionStmt);
}

uint64_t type metadata accessor for PgQuery_CreateStatsStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateStatsStmt);
}

uint64_t type metadata accessor for PgQuery_AlterCollationStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterCollationStmt);
}

uint64_t type metadata accessor for PgQuery_CallStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CallStmt);
}

uint64_t type metadata accessor for PgQuery_AlterStatsStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterStatsStmt);
}

uint64_t type metadata accessor for PgQuery_A_Expr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_A_Expr);
}

uint64_t type metadata accessor for PgQuery_ColumnRef(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ColumnRef);
}

uint64_t type metadata accessor for PgQuery_ParamRef(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ParamRef);
}

uint64_t type metadata accessor for PgQuery_A_Const(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_A_Const);
}

uint64_t type metadata accessor for PgQuery_A_Indices(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_A_Indices);
}

uint64_t type metadata accessor for PgQuery_A_Indirection(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_A_Indirection);
}

uint64_t type metadata accessor for PgQuery_A_ArrayExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_A_ArrayExpr);
}

uint64_t type metadata accessor for PgQuery_ResTarget(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ResTarget);
}

uint64_t type metadata accessor for PgQuery_MultiAssignRef(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_MultiAssignRef);
}

uint64_t type metadata accessor for PgQuery_TypeCast(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_TypeCast);
}

uint64_t type metadata accessor for PgQuery_SortBy(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SortBy);
}

uint64_t type metadata accessor for PgQuery_RangeSubselect(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeSubselect);
}

uint64_t type metadata accessor for PgQuery_RangeFunction(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeFunction);
}

uint64_t type metadata accessor for PgQuery_RangeTableSample(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeTableSample);
}

uint64_t type metadata accessor for PgQuery_RangeTableFunc(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeTableFunc);
}

uint64_t type metadata accessor for PgQuery_RangeTableFuncCol(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeTableFuncCol);
}

uint64_t type metadata accessor for PgQuery_ColumnDef(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ColumnDef);
}

uint64_t type metadata accessor for PgQuery_IndexElem(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_IndexElem);
}

uint64_t type metadata accessor for PgQuery_Constraint(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Constraint);
}

uint64_t type metadata accessor for PgQuery_DefElem(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DefElem);
}

uint64_t type metadata accessor for PgQuery_RangeTblEntry(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeTblEntry);
}

uint64_t type metadata accessor for PgQuery_RangeTblFunction(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeTblFunction);
}

uint64_t type metadata accessor for PgQuery_WithCheckOption(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_WithCheckOption);
}

uint64_t type metadata accessor for PgQuery_SortGroupClause(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SortGroupClause);
}

uint64_t type metadata accessor for PgQuery_GroupingSet(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_GroupingSet);
}

uint64_t type metadata accessor for PgQuery_WindowClause(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_WindowClause);
}

uint64_t type metadata accessor for PgQuery_AccessPriv(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AccessPriv);
}

uint64_t type metadata accessor for PgQuery_CreateOpClassItem(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateOpClassItem);
}

uint64_t type metadata accessor for PgQuery_TableLikeClause(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_TableLikeClause);
}

uint64_t type metadata accessor for PgQuery_FunctionParameter(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_FunctionParameter);
}

uint64_t type metadata accessor for PgQuery_LockingClause(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_LockingClause);
}

uint64_t type metadata accessor for PgQuery_RowMarkClause(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RowMarkClause);
}

uint64_t type metadata accessor for PgQuery_XmlSerialize(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_XmlSerialize);
}

uint64_t type metadata accessor for PgQuery_CommonTableExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CommonTableExpr);
}

uint64_t type metadata accessor for PgQuery_TriggerTransition(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_TriggerTransition);
}

uint64_t type metadata accessor for PgQuery_PartitionElem(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_PartitionElem);
}

uint64_t type metadata accessor for PgQuery_PartitionRangeDatum(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_PartitionRangeDatum);
}

uint64_t type metadata accessor for PgQuery_PartitionCmd(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_PartitionCmd);
}

uint64_t type metadata accessor for PgQuery_VacuumRelation(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_VacuumRelation);
}

uint64_t type metadata accessor for PgQuery_InlineCodeBlock(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_InlineCodeBlock);
}

uint64_t type metadata accessor for PgQuery_CallContext(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CallContext);
}

uint64_t type metadata accessor for PgQuery_Integer(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Integer);
}

uint64_t type metadata accessor for PgQuery_Float(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Float);
}

uint64_t type metadata accessor for PgQuery_String(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_String);
}

uint64_t type metadata accessor for PgQuery_BitString(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_BitString);
}

uint64_t type metadata accessor for PgQuery_List(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_List);
}

uint64_t type metadata accessor for PgQuery_IntList(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_IntList);
}

uint64_t type metadata accessor for PgQuery_OidList(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_OidList);
}

uint64_t destroy for PgQuery_Node.OneOf_Node(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t RangeVar;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t RangeTblRef;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t AlterTableStmt;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t GrantRoleStmt;
  uint64_t v66;
  uint64_t v67;
  uint64_t AlterDefaultPrivilegesStmt;
  uint64_t v69;
  uint64_t v70;
  uint64_t GrantStmt;
  uint64_t ClusterStmt;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t FunctionStmt;
  uint64_t AlterFunctionStmt;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t SeqStmt;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t AlterRoleStmt;
  uint64_t v93;
  uint64_t v94;
  uint64_t SchemaStmt;
  uint64_t AlterDatabaseSetStmt;
  uint64_t v97;
  uint64_t v98;
  int *AlterRoleSetStmt;
  uint64_t v100;
  uint64_t v101;
  uint64_t RoleSpec;
  uint64_t v103;
  int *OpClassItem;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t AlterOperatorStmt;
  uint64_t v112;
  uint64_t ObjectWithArgs;
  uint64_t ReassignOwnedStmt;
  uint64_t v115;
  uint64_t CompositeTypeStmt;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t ForeignTableStmt;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(uint64_t, uint64_t);
  uint64_t v128;
  uint64_t Stmt;
  uint64_t v130;
  uint64_t VariableSetStmt;
  uint64_t v132;
  uint64_t v133;
  int *TransformStmt;
  uint64_t v135;
  uint64_t v136;
  uint64_t TypeName;
  uint64_t v138;
  uint64_t v139;
  unsigned int (*v140)(uint64_t, uint64_t, uint64_t);
  uint64_t AmStmt;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t RangeFunction;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t PartitionCmd;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t Alias;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void (*v189)(uint64_t, uint64_t);

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_Alias(0) + 24);
      goto LABEL_265;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      RangeVar = type metadata accessor for PgQuery_RangeVar(0);
      v5 = a1 + *(int *)(RangeVar + 40);
      v6 = type metadata accessor for UnknownStorage();
      v189 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
      v189(v5, v6);
      goto LABEL_250;
    case 2:
      v7 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
      type metadata accessor for PgQuery_TableFunc(0);
      return swift_release();
    case 3:
    case 104:
    case 171:
    case 224:
      goto LABEL_266;
    case 4:
      v8 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
      type metadata accessor for PgQuery_Var(0);
      return swift_release();
    case 5:
      v9 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
      type metadata accessor for PgQuery_Param(0);
      return swift_release();
    case 6:
      v10 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
      type metadata accessor for PgQuery_Aggref(0);
      return swift_release();
    case 7:
      v11 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
      type metadata accessor for PgQuery_GroupingFunc(0);
      return swift_release();
    case 8:
      v12 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
      type metadata accessor for PgQuery_WindowFunc(0);
      return swift_release();
    case 9:
      v13 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
      type metadata accessor for PgQuery_SubscriptingRef(0);
      return swift_release();
    case 10:
      v14 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(a1, v14);
      type metadata accessor for PgQuery_FuncExpr(0);
      return swift_release();
    case 11:
      v15 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a1, v15);
      type metadata accessor for PgQuery_NamedArgExpr(0);
      return swift_release();
    case 12:
      v16 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a1, v16);
      type metadata accessor for PgQuery_OpExpr(0);
      return swift_release();
    case 13:
      v17 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(a1, v17);
      type metadata accessor for PgQuery_DistinctExpr(0);
      return swift_release();
    case 14:
      v18 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(a1, v18);
      type metadata accessor for PgQuery_NullIfExpr(0);
      return swift_release();
    case 15:
      v19 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(a1, v19);
      type metadata accessor for PgQuery_ScalarArrayOpExpr(0);
      return swift_release();
    case 16:
      v20 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(a1, v20);
      type metadata accessor for PgQuery_BoolExpr(0);
      return swift_release();
    case 17:
      v21 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(a1, v21);
      type metadata accessor for PgQuery_SubLink(0);
      return swift_release();
    case 18:
      v22 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(a1, v22);
      type metadata accessor for PgQuery_SubPlan(0);
      return swift_release();
    case 19:
      v23 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(a1, v23);
      type metadata accessor for PgQuery_AlternativeSubPlan(0);
      return swift_release();
    case 20:
      v24 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(a1, v24);
      type metadata accessor for PgQuery_FieldSelect(0);
      return swift_release();
    case 21:
      v25 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(a1, v25);
      type metadata accessor for PgQuery_FieldStore(0);
      return swift_release();
    case 22:
      v26 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(a1, v26);
      type metadata accessor for PgQuery_RelabelType(0);
      return swift_release();
    case 23:
      v27 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(a1, v27);
      type metadata accessor for PgQuery_CoerceViaIO(0);
      return swift_release();
    case 24:
      v28 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(a1, v28);
      type metadata accessor for PgQuery_ArrayCoerceExpr(0);
      return swift_release();
    case 25:
      v29 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(a1, v29);
      type metadata accessor for PgQuery_ConvertRowtypeExpr(0);
      return swift_release();
    case 26:
      v30 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(a1, v30);
      type metadata accessor for PgQuery_CollateExpr(0);
      return swift_release();
    case 27:
      v31 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(a1, v31);
      type metadata accessor for PgQuery_CaseExpr(0);
      return swift_release();
    case 28:
      v32 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(a1, v32);
      type metadata accessor for PgQuery_CaseWhen(0);
      return swift_release();
    case 29:
      v33 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(a1, v33);
      type metadata accessor for PgQuery_CaseTestExpr(0);
      return swift_release();
    case 30:
      v34 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(a1, v34);
      type metadata accessor for PgQuery_ArrayExpr(0);
      return swift_release();
    case 31:
      v35 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(a1, v35);
      type metadata accessor for PgQuery_RowExpr(0);
      return swift_release();
    case 32:
      v36 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(a1, v36);
      type metadata accessor for PgQuery_RowCompareExpr(0);
      return swift_release();
    case 33:
      v37 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(a1, v37);
      type metadata accessor for PgQuery_CoalesceExpr(0);
      return swift_release();
    case 34:
      v38 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(a1, v38);
      type metadata accessor for PgQuery_MinMaxExpr(0);
      return swift_release();
    case 35:
      v39 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(a1, v39);
      type metadata accessor for PgQuery_SQLValueFunction(0);
      return swift_release();
    case 36:
      v40 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(a1, v40);
      type metadata accessor for PgQuery_XmlExpr(0);
      return swift_release();
    case 37:
      v41 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(a1, v41);
      type metadata accessor for PgQuery_NullTest(0);
      return swift_release();
    case 38:
      v42 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(a1, v42);
      type metadata accessor for PgQuery_BooleanTest(0);
      return swift_release();
    case 39:
      v43 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(a1, v43);
      type metadata accessor for PgQuery_CoerceToDomain(0);
      return swift_release();
    case 40:
      v44 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(a1, v44);
      type metadata accessor for PgQuery_CoerceToDomainValue(0);
      return swift_release();
    case 41:
      v45 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 8))(a1, v45);
      type metadata accessor for PgQuery_SetToDefault(0);
      return swift_release();
    case 42:
      v46 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 8))(a1, v46);
      type metadata accessor for PgQuery_CurrentOfExpr(0);
      return swift_release();
    case 43:
      v47 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(a1, v47);
      type metadata accessor for PgQuery_NextValueExpr(0);
      return swift_release();
    case 44:
      v48 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 8))(a1, v48);
      type metadata accessor for PgQuery_InferenceElem(0);
      return swift_release();
    case 45:
      v49 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(a1, v49);
      type metadata accessor for PgQuery_TargetEntry(0);
      return swift_release();
    case 46:
      RangeTblRef = type metadata accessor for PgQuery_RangeTblRef(0);
      goto LABEL_264;
    case 47:
      v51 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 8))(a1, v51);
      type metadata accessor for PgQuery_JoinExpr(0);
      return swift_release();
    case 48:
      v52 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(a1, v52);
      type metadata accessor for PgQuery_FromExpr(0);
      return swift_release();
    case 49:
      v53 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 8))(a1, v53);
      type metadata accessor for PgQuery_OnConflictExpr(0);
      return swift_release();
    case 50:
      v54 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 8))(a1, v54);
      type metadata accessor for PgQuery_IntoClause(0);
      return swift_release();
    case 51:
      v55 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 8))(a1, v55);
      type metadata accessor for PgQuery_RawStmt(0);
      return swift_release();
    case 52:
      v56 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 8))(a1, v56);
      type metadata accessor for PgQuery_Query(0);
      return swift_release();
    case 53:
      v57 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 8))(a1, v57);
      type metadata accessor for PgQuery_InsertStmt(0);
      return swift_release();
    case 54:
      v58 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 8))(a1, v58);
      type metadata accessor for PgQuery_DeleteStmt(0);
      return swift_release();
    case 55:
      v59 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 8))(a1, v59);
      type metadata accessor for PgQuery_UpdateStmt(0);
      return swift_release();
    case 56:
      v60 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 8))(a1, v60);
      type metadata accessor for PgQuery_SelectStmt(0);
      return swift_release();
    case 57:
      swift_bridgeObjectRelease();
      AlterTableStmt = type metadata accessor for PgQuery_AlterTableStmt(0);
      goto LABEL_95;
    case 58:
      v62 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 8))(a1, v62);
      type metadata accessor for PgQuery_AlterTableCmd(0);
      return swift_release();
    case 59:
      v63 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 8))(a1, v63);
      type metadata accessor for PgQuery_AlterDomainStmt(0);
      return swift_release();
    case 60:
      v64 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 8))(a1, v64);
      type metadata accessor for PgQuery_SetOperationStmt(0);
      return swift_release();
    case 61:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_GrantStmt(0) + 48);
      goto LABEL_265;
    case 62:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      GrantRoleStmt = type metadata accessor for PgQuery_GrantRoleStmt(0);
      v66 = a1 + *(int *)(GrantRoleStmt + 36);
      v6 = type metadata accessor for UnknownStorage();
      v189 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
      v189(v66, v6);
      v67 = *(int *)(GrantRoleStmt + 40);
      goto LABEL_150;
    case 63:
      swift_bridgeObjectRelease();
      AlterDefaultPrivilegesStmt = type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt(0);
      v69 = a1 + *(int *)(AlterDefaultPrivilegesStmt + 20);
      v6 = type metadata accessor for UnknownStorage();
      v189 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
      v189(v69, v6);
      v70 = a1 + *(int *)(AlterDefaultPrivilegesStmt + 24);
      GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(GrantStmt - 8) + 48))(v70, 1, GrantStmt);
      if (!(_DWORD)result)
        goto LABEL_65;
      return result;
    case 64:
      swift_bridgeObjectRelease();
      RangeTblRef = type metadata accessor for PgQuery_ClosePortalStmt(0);
      goto LABEL_264;
    case 65:
      swift_bridgeObjectRelease();
      ClusterStmt = type metadata accessor for PgQuery_ClusterStmt(0);
      goto LABEL_247;
    case 66:
      v73 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 8))(a1, v73);
      type metadata accessor for PgQuery_CopyStmt(0);
      return swift_release();
    case 67:
      v74 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 8))(a1, v74);
      type metadata accessor for PgQuery_CreateStmt(0);
      return swift_release();
    case 68:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_DefineStmt(0) + 44);
      goto LABEL_265;
    case 69:
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_DropStmt(0) + 36);
      goto LABEL_265;
    case 70:
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_TruncateStmt(0) + 28);
      goto LABEL_265;
    case 71:
      v75 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 8))(a1, v75);
      type metadata accessor for PgQuery_CommentStmt(0);
      return swift_release();
    case 72:
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_FetchStmt(0) + 32);
      goto LABEL_265;
    case 73:
      v76 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 8))(a1, v76);
      type metadata accessor for PgQuery_IndexStmt(0);
      return swift_release();
    case 74:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      FunctionStmt = type metadata accessor for PgQuery_CreateFunctionStmt(0);
      goto LABEL_117;
    case 75:
      swift_bridgeObjectRelease();
      AlterFunctionStmt = type metadata accessor for PgQuery_AlterFunctionStmt(0);
      v79 = a1 + *(int *)(AlterFunctionStmt + 24);
      v6 = type metadata accessor for UnknownStorage();
      v189 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
      v189(v79, v6);
      v80 = *(int *)(AlterFunctionStmt + 28);
      goto LABEL_130;
    case 76:
      swift_bridgeObjectRelease();
      RangeTblRef = type metadata accessor for PgQuery_DoStmt(0);
      goto LABEL_264;
    case 77:
      v81 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 8))(a1, v81);
      type metadata accessor for PgQuery_RenameStmt(0);
      return swift_release();
    case 78:
      v82 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 8))(a1, v82);
      type metadata accessor for PgQuery_RuleStmt(0);
      return swift_release();
    case 79:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_NotifyStmt(0) + 24);
      goto LABEL_265;
    case 80:
      swift_bridgeObjectRelease();
      RangeTblRef = type metadata accessor for PgQuery_ListenStmt(0);
      goto LABEL_264;
    case 81:
      swift_bridgeObjectRelease();
      RangeTblRef = type metadata accessor for PgQuery_UnlistenStmt(0);
      goto LABEL_264;
    case 82:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_TransactionStmt(0) + 36);
      goto LABEL_265;
    case 83:
      v83 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 8))(a1, v83);
      type metadata accessor for PgQuery_ViewStmt(0);
      return swift_release();
    case 84:
      swift_bridgeObjectRelease();
      RangeTblRef = type metadata accessor for PgQuery_LoadStmt(0);
      goto LABEL_264;
    case 85:
      v84 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 8))(a1, v84);
      type metadata accessor for PgQuery_CreateDomainStmt(0);
      return swift_release();
    case 86:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_CreatedbStmt(0) + 24);
      goto LABEL_265;
    case 87:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_DropdbStmt(0) + 28);
      goto LABEL_265;
    case 88:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_VacuumStmt(0) + 28);
      goto LABEL_265;
    case 89:
      v85 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 8))(a1, v85);
      type metadata accessor for PgQuery_ExplainStmt(0);
      return swift_release();
    case 90:
      v86 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 8))(a1, v86);
      type metadata accessor for PgQuery_CreateTableAsStmt(0);
      return swift_release();
    case 91:
      swift_bridgeObjectRelease();
      SeqStmt = type metadata accessor for PgQuery_CreateSeqStmt(0);
      goto LABEL_107;
    case 92:
      swift_bridgeObjectRelease();
      AlterTableStmt = type metadata accessor for PgQuery_AlterSeqStmt(0);
LABEL_95:
      v88 = AlterTableStmt;
      v89 = a1 + *(int *)(AlterTableStmt + 28);
      v6 = type metadata accessor for UnknownStorage();
      v189 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
      v189(v89, v6);
      v90 = *(int *)(v88 + 32);
      goto LABEL_248;
    case 93:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_VariableSetStmt(0) + 32);
      goto LABEL_265;
    case 94:
      swift_bridgeObjectRelease();
      RangeTblRef = type metadata accessor for PgQuery_VariableShowStmt(0);
      goto LABEL_264;
    case 95:
      RangeTblRef = type metadata accessor for PgQuery_DiscardStmt(0);
      goto LABEL_264;
    case 96:
      v91 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 8))(a1, v91);
      type metadata accessor for PgQuery_CreateTrigStmt(0);
      return swift_release();
    case 97:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_CreatePLangStmt(0) + 40);
      goto LABEL_265;
    case 98:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_CreateRoleStmt(0) + 28);
      goto LABEL_265;
    case 99:
      swift_bridgeObjectRelease();
      AlterRoleStmt = type metadata accessor for PgQuery_AlterRoleStmt(0);
      goto LABEL_149;
    case 100:
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_DropRoleStmt(0) + 24);
      goto LABEL_265;
    case 101:
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_LockStmt(0) + 28);
      goto LABEL_265;
    case 102:
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_ConstraintsSetStmt(0) + 24);
      goto LABEL_265;
    case 103:
      swift_bridgeObjectRelease();
      SeqStmt = type metadata accessor for PgQuery_ReindexStmt(0);
LABEL_107:
      v93 = SeqStmt;
      v94 = a1 + *(int *)(SeqStmt + 32);
      v6 = type metadata accessor for UnknownStorage();
      v189 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
      v189(v94, v6);
      v90 = *(int *)(v93 + 36);
      goto LABEL_248;
    case 105:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      SchemaStmt = type metadata accessor for PgQuery_CreateSchemaStmt(0);
      goto LABEL_146;
    case 106:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_AlterDatabaseStmt(0) + 24);
      goto LABEL_265;
    case 107:
      swift_bridgeObjectRelease();
      AlterDatabaseSetStmt = type metadata accessor for PgQuery_AlterDatabaseSetStmt(0);
      v97 = a1 + *(int *)(AlterDatabaseSetStmt + 20);
      v6 = type metadata accessor for UnknownStorage();
      v189 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
      v189(v97, v6);
      v98 = *(int *)(AlterDatabaseSetStmt + 24);
      goto LABEL_166;
    case 108:
      swift_bridgeObjectRelease();
      AlterRoleSetStmt = (int *)type metadata accessor for PgQuery_AlterRoleSetStmt(0);
      v100 = a1 + AlterRoleSetStmt[5];
      v6 = type metadata accessor for UnknownStorage();
      v189 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
      v189(v100, v6);
      v101 = a1 + AlterRoleSetStmt[6];
      RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RoleSpec - 8) + 48))(v101, 1, RoleSpec))
      {
        swift_bridgeObjectRelease();
        v189(v101 + *(int *)(RoleSpec + 28), v6);
      }
      v98 = AlterRoleSetStmt[7];
      goto LABEL_166;
    case 109:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_CreateConversionStmt(0) + 36);
      goto LABEL_265;
    case 110:
      v103 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v103 - 8) + 8))(a1, v103);
      type metadata accessor for PgQuery_CreateCastStmt(0);
      return swift_release();
    case 111:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      FunctionStmt = type metadata accessor for PgQuery_CreateOpClassStmt(0);
LABEL_117:
      OpClassItem = (int *)FunctionStmt;
      v105 = a1 + *(int *)(FunctionStmt + 36);
      v6 = type metadata accessor for UnknownStorage();
      v189 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
      v189(v105, v6);
      goto LABEL_221;
    case 112:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_CreateOpFamilyStmt(0) + 24);
      goto LABEL_265;
    case 113:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_AlterOpFamilyStmt(0) + 32);
      goto LABEL_265;
    case 114:
      v106 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v106 - 8) + 8))(a1, v106);
      type metadata accessor for PgQuery_PrepareStmt(0);
      return swift_release();
    case 115:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_ExecuteStmt(0) + 24);
      goto LABEL_265;
    case 116:
      swift_bridgeObjectRelease();
      RangeTblRef = type metadata accessor for PgQuery_DeallocateStmt(0);
      goto LABEL_264;
    case 117:
      v107 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v107 - 8) + 8))(a1, v107);
      type metadata accessor for PgQuery_DeclareCursorStmt(0);
      return swift_release();
    case 118:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      SchemaStmt = type metadata accessor for PgQuery_CreateTableSpaceStmt(0);
      goto LABEL_146;
    case 119:
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_DropTableSpaceStmt(0) + 24);
      goto LABEL_265;
    case 120:
      v108 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v108 - 8) + 8))(a1, v108);
      type metadata accessor for PgQuery_AlterObjectDependsStmt(0);
      return swift_release();
    case 121:
      v109 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v109 - 8) + 8))(a1, v109);
      type metadata accessor for PgQuery_AlterObjectSchemaStmt(0);
      return swift_release();
    case 122:
      v110 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v110 - 8) + 8))(a1, v110);
      type metadata accessor for PgQuery_AlterOwnerStmt(0);
      return swift_release();
    case 123:
      swift_bridgeObjectRelease();
      AlterOperatorStmt = type metadata accessor for PgQuery_AlterOperatorStmt(0);
      v112 = a1 + *(int *)(AlterOperatorStmt + 20);
      v6 = type metadata accessor for UnknownStorage();
      v189 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
      v189(v112, v6);
      v80 = *(int *)(AlterOperatorStmt + 24);
LABEL_130:
      v70 = a1 + v80;
      ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(ObjectWithArgs - 8) + 48))(v70, 1, ObjectWithArgs);
      if ((_DWORD)result)
        return result;
      swift_bridgeObjectRelease();
      goto LABEL_151;
    case 124:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_AlterTypeStmt(0) + 24);
      goto LABEL_265;
    case 125:
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_DropOwnedStmt(0) + 24);
      goto LABEL_265;
    case 126:
      swift_bridgeObjectRelease();
      ReassignOwnedStmt = type metadata accessor for PgQuery_ReassignOwnedStmt(0);
      v115 = a1 + *(int *)(ReassignOwnedStmt + 20);
      v6 = type metadata accessor for UnknownStorage();
      v189 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
      v189(v115, v6);
      v67 = *(int *)(ReassignOwnedStmt + 24);
      goto LABEL_150;
    case 127:
      swift_bridgeObjectRelease();
      CompositeTypeStmt = type metadata accessor for PgQuery_CompositeTypeStmt(0);
      v117 = a1 + *(int *)(CompositeTypeStmt + 20);
      v6 = type metadata accessor for UnknownStorage();
      v189 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
      v189(v117, v6);
      v90 = *(int *)(CompositeTypeStmt + 24);
      goto LABEL_248;
    case 128:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_CreateEnumStmt(0) + 24);
      goto LABEL_265;
    case 129:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_CreateRangeStmt(0) + 24);
      goto LABEL_265;
    case 130:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_AlterEnumStmt(0) + 40);
      goto LABEL_265;
    case 131:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_AlterTSDictionaryStmt(0) + 24);
      goto LABEL_265;
    case 132:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_AlterTSConfigurationStmt(0) + 44);
      goto LABEL_265;
    case 133:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_CreateFdwStmt(0) + 28);
      goto LABEL_265;
    case 134:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_AlterFdwStmt(0) + 28);
      goto LABEL_265;
    case 135:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_CreateForeignServerStmt(0) + 40);
      goto LABEL_265;
    case 136:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_AlterForeignServerStmt(0) + 32);
      goto LABEL_265;
    case 137:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      SchemaStmt = type metadata accessor for PgQuery_CreateUserMappingStmt(0);
LABEL_146:
      v118 = SchemaStmt;
      v119 = a1 + *(int *)(SchemaStmt + 28);
      v6 = type metadata accessor for UnknownStorage();
      v189 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
      v189(v119, v6);
      v67 = *(int *)(v118 + 32);
      goto LABEL_150;
    case 138:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      AlterRoleStmt = type metadata accessor for PgQuery_AlterUserMappingStmt(0);
      goto LABEL_149;
    case 139:
      swift_bridgeObjectRelease();
      AlterRoleStmt = type metadata accessor for PgQuery_DropUserMappingStmt(0);
LABEL_149:
      v120 = AlterRoleStmt;
      v121 = a1 + *(int *)(AlterRoleStmt + 24);
      v6 = type metadata accessor for UnknownStorage();
      v189 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
      v189(v121, v6);
      v67 = *(int *)(v120 + 28);
LABEL_150:
      v70 = a1 + v67;
      ObjectWithArgs = type metadata accessor for PgQuery_RoleSpec(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(ObjectWithArgs - 8) + 48))(v70, 1, ObjectWithArgs);
      if ((_DWORD)result)
        return result;
LABEL_151:
      swift_bridgeObjectRelease();
      v122 = *(int *)(ObjectWithArgs + 28);
      goto LABEL_254;
    case 140:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt(0) + 28);
      goto LABEL_265;
    case 141:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_AlterTableMoveAllStmt(0) + 36);
      goto LABEL_265;
    case 142:
      v123 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v123 - 8) + 8))(a1, v123);
      type metadata accessor for PgQuery_SecLabelStmt(0);
      return swift_release();
    case 143:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      ForeignTableStmt = type metadata accessor for PgQuery_CreateForeignTableStmt(0);
      v125 = a1 + *(int *)(ForeignTableStmt + 24);
      v126 = type metadata accessor for UnknownStorage();
      v127 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v126 - 8) + 8);
      v127(v125, v126);
      v128 = a1 + *(int *)(ForeignTableStmt + 28);
      Stmt = type metadata accessor for PgQuery_CreateStmt(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Stmt - 8) + 48))(v128, 1, Stmt);
      if ((_DWORD)result)
        return result;
      v127(v128, v126);
      return swift_release();
    case 144:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_ImportForeignSchemaStmt(0) + 40);
      goto LABEL_265;
    case 145:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_CreateExtensionStmt(0) + 28);
      goto LABEL_265;
    case 146:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_AlterExtensionStmt(0) + 24);
      goto LABEL_265;
    case 147:
      v130 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v130 - 8) + 8))(a1, v130);
      type metadata accessor for PgQuery_AlterExtensionContentsStmt(0);
      return swift_release();
    case 148:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_CreateEventTrigStmt(0) + 32);
      goto LABEL_265;
    case 149:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_AlterEventTrigStmt(0) + 24);
      goto LABEL_265;
    case 150:
      ClusterStmt = type metadata accessor for PgQuery_RefreshMatViewStmt(0);
      goto LABEL_247;
    case 151:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_ReplicaIdentityStmt(0) + 24);
      goto LABEL_265;
    case 152:
      v6 = type metadata accessor for UnknownStorage();
      v189 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
      v189(a1, v6);
      v98 = *(int *)(type metadata accessor for PgQuery_AlterSystemStmt(0) + 20);
LABEL_166:
      v70 = a1 + v98;
      VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(VariableSetStmt - 8) + 48))(v70, 1, VariableSetStmt);
      if ((_DWORD)result)
        return result;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v122 = *(int *)(VariableSetStmt + 32);
      goto LABEL_254;
    case 153:
      v132 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v132 - 8) + 8))(a1, v132);
      type metadata accessor for PgQuery_CreatePolicyStmt(0);
      return swift_release();
    case 154:
      v133 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v133 - 8) + 8))(a1, v133);
      type metadata accessor for PgQuery_AlterPolicyStmt(0);
      return swift_release();
    case 155:
      swift_bridgeObjectRelease();
      TransformStmt = (int *)type metadata accessor for PgQuery_CreateTransformStmt(0);
      v135 = a1 + TransformStmt[6];
      v6 = type metadata accessor for UnknownStorage();
      v189 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
      v189(v135, v6);
      v136 = a1 + TransformStmt[7];
      TypeName = type metadata accessor for PgQuery_TypeName(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TypeName - 8) + 48))(v136, 1, TypeName))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v189(v136 + *(int *)(TypeName + 48), v6);
      }
      v138 = a1 + TransformStmt[8];
      v139 = type metadata accessor for PgQuery_ObjectWithArgs(0);
      v140 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v139 - 8) + 48);
      if (!v140(v138, 1, v139))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v189(v138 + *(int *)(v139 + 28), v6);
      }
      v70 = a1 + TransformStmt[9];
      result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v140)(v70, 1, v139);
      if ((_DWORD)result)
        return result;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v122 = *(int *)(v139 + 28);
      goto LABEL_254;
    case 156:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      AmStmt = type metadata accessor for PgQuery_CreateAmStmt(0);
      goto LABEL_236;
    case 157:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_CreatePublicationStmt(0) + 32);
      goto LABEL_265;
    case 158:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_AlterPublicationStmt(0) + 36);
      goto LABEL_265;
    case 159:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_CreateSubscriptionStmt(0) + 32);
      goto LABEL_265;
    case 160:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_AlterSubscriptionStmt(0) + 36);
      goto LABEL_265;
    case 161:
      swift_bridgeObjectRelease();
      AmStmt = type metadata accessor for PgQuery_DropSubscriptionStmt(0);
      goto LABEL_236;
    case 162:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_CreateStatsStmt(0) + 40);
      goto LABEL_265;
    case 163:
      swift_bridgeObjectRelease();
      RangeTblRef = type metadata accessor for PgQuery_AlterCollationStmt(0);
      goto LABEL_264;
    case 164:
      v142 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v142 - 8) + 8))(a1, v142);
      type metadata accessor for PgQuery_CallStmt(0);
      return swift_release();
    case 165:
      swift_bridgeObjectRelease();
      AmStmt = type metadata accessor for PgQuery_AlterStatsStmt(0);
      goto LABEL_236;
    case 166:
      v143 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v143 - 8) + 8))(a1, v143);
      type metadata accessor for PgQuery_A_Expr(0);
      return swift_release();
    case 167:
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_ColumnRef(0) + 24);
      goto LABEL_265;
    case 168:
      v3 = *(int *)(type metadata accessor for PgQuery_ParamRef(0) + 24);
      goto LABEL_265;
    case 169:
      v144 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v144 - 8) + 8))(a1, v144);
      type metadata accessor for PgQuery_A_Const(0);
      return swift_release();
    case 170:
      v145 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v145 - 8) + 8))(a1, v145);
      type metadata accessor for PgQuery_FuncCall(0);
      return swift_release();
    case 172:
      v146 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v146 - 8) + 8))(a1, v146);
      type metadata accessor for PgQuery_A_Indices(0);
      return swift_release();
    case 173:
      v147 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v147 - 8) + 8))(a1, v147);
      type metadata accessor for PgQuery_A_Indirection(0);
      return swift_release();
    case 174:
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_A_ArrayExpr(0) + 24);
      goto LABEL_265;
    case 175:
      v148 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v148 - 8) + 8))(a1, v148);
      type metadata accessor for PgQuery_ResTarget(0);
      return swift_release();
    case 176:
      v149 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v149 - 8) + 8))(a1, v149);
      type metadata accessor for PgQuery_MultiAssignRef(0);
      return swift_release();
    case 177:
      v150 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v150 - 8) + 8))(a1, v150);
      type metadata accessor for PgQuery_TypeCast(0);
      return swift_release();
    case 178:
      v151 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v151 - 8) + 8))(a1, v151);
      type metadata accessor for PgQuery_CollateClause(0);
      return swift_release();
    case 179:
      v152 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v152 - 8) + 8))(a1, v152);
      type metadata accessor for PgQuery_SortBy(0);
      return swift_release();
    case 180:
      v153 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v153 - 8) + 8))(a1, v153);
      type metadata accessor for PgQuery_WindowDef(0);
      return swift_release();
    case 181:
      v154 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v154 - 8) + 8))(a1, v154);
      type metadata accessor for PgQuery_RangeSubselect(0);
      return swift_release();
    case 182:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      RangeFunction = type metadata accessor for PgQuery_RangeFunction(0);
      v156 = a1 + *(int *)(RangeFunction + 36);
      v6 = type metadata accessor for UnknownStorage();
      v189 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
      v189(v156, v6);
      v157 = *(int *)(RangeFunction + 40);
      goto LABEL_251;
    case 183:
      v158 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v158 - 8) + 8))(a1, v158);
      type metadata accessor for PgQuery_RangeTableSample(0);
      return swift_release();
    case 184:
      v159 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v159 - 8) + 8))(a1, v159);
      type metadata accessor for PgQuery_RangeTableFunc(0);
      return swift_release();
    case 185:
      v160 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v160 - 8) + 8))(a1, v160);
      type metadata accessor for PgQuery_RangeTableFuncCol(0);
      return swift_release();
    case 186:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_TypeName(0) + 48);
      goto LABEL_265;
    case 187:
      v161 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v161 - 8) + 8))(a1, v161);
      type metadata accessor for PgQuery_ColumnDef(0);
      return swift_release();
    case 188:
      v162 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v162 - 8) + 8))(a1, v162);
      type metadata accessor for PgQuery_IndexElem(0);
      return swift_release();
    case 189:
      v163 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v163 - 8) + 8))(a1, v163);
      type metadata accessor for PgQuery_Constraint(0);
      return swift_release();
    case 190:
      v164 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v164 - 8) + 8))(a1, v164);
      type metadata accessor for PgQuery_DefElem(0);
      return swift_release();
    case 191:
      v165 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v165 - 8) + 8))(a1, v165);
      type metadata accessor for PgQuery_RangeTblEntry(0);
      return swift_release();
    case 192:
      v166 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v166 - 8) + 8))(a1, v166);
      type metadata accessor for PgQuery_RangeTblFunction(0);
      return swift_release();
    case 193:
      v167 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v167 - 8) + 8))(a1, v167);
      type metadata accessor for PgQuery_TableSampleClause(0);
      return swift_release();
    case 194:
      v168 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v168 - 8) + 8))(a1, v168);
      type metadata accessor for PgQuery_WithCheckOption(0);
      return swift_release();
    case 195:
      v3 = *(int *)(type metadata accessor for PgQuery_SortGroupClause(0) + 36);
      goto LABEL_265;
    case 196:
      swift_bridgeObjectRelease();
      AmStmt = type metadata accessor for PgQuery_GroupingSet(0);
      goto LABEL_236;
    case 197:
      v169 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v169 - 8) + 8))(a1, v169);
      type metadata accessor for PgQuery_WindowClause(0);
      return swift_release();
    case 198:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      AmStmt = type metadata accessor for PgQuery_ObjectWithArgs(0);
      goto LABEL_236;
    case 199:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_AccessPriv(0) + 24);
      goto LABEL_265;
    case 200:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OpClassItem = (int *)type metadata accessor for PgQuery_CreateOpClassItem(0);
      v170 = a1 + OpClassItem[8];
      v6 = type metadata accessor for UnknownStorage();
      v189 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
      v189(v170, v6);
      v171 = a1 + OpClassItem[9];
      v172 = type metadata accessor for PgQuery_ObjectWithArgs(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v172 - 8) + 48))(v171, 1, v172))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v189(v171 + *(int *)(v172 + 28), v6);
      }
LABEL_221:
      v70 = a1 + OpClassItem[10];
      GrantStmt = type metadata accessor for PgQuery_TypeName(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(GrantStmt - 8) + 48))(v70, 1, GrantStmt);
      if ((_DWORD)result)
        return result;
LABEL_65:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_245;
    case 201:
      ClusterStmt = type metadata accessor for PgQuery_TableLikeClause(0);
      goto LABEL_247;
    case 202:
      v173 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v173 - 8) + 8))(a1, v173);
      type metadata accessor for PgQuery_FunctionParameter(0);
      return swift_release();
    case 203:
      swift_bridgeObjectRelease();
      AmStmt = type metadata accessor for PgQuery_LockingClause(0);
      goto LABEL_236;
    case 204:
      v3 = *(int *)(type metadata accessor for PgQuery_RowMarkClause(0) + 32);
      goto LABEL_265;
    case 205:
      v174 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v174 - 8) + 8))(a1, v174);
      type metadata accessor for PgQuery_XmlSerialize(0);
      return swift_release();
    case 206:
      swift_bridgeObjectRelease();
      AmStmt = type metadata accessor for PgQuery_WithClause(0);
      goto LABEL_236;
    case 207:
      v175 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v175 - 8) + 8))(a1, v175);
      type metadata accessor for PgQuery_InferClause(0);
      return swift_release();
    case 208:
      v176 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v176 - 8) + 8))(a1, v176);
      type metadata accessor for PgQuery_OnConflictClause(0);
      return swift_release();
    case 209:
      v177 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v177 - 8) + 8))(a1, v177);
      type metadata accessor for PgQuery_CommonTableExpr(0);
      return swift_release();
    case 210:
      swift_bridgeObjectRelease();
      AmStmt = type metadata accessor for PgQuery_RoleSpec(0);
      goto LABEL_236;
    case 211:
      swift_bridgeObjectRelease();
      AmStmt = type metadata accessor for PgQuery_TriggerTransition(0);
      goto LABEL_236;
    case 212:
      v178 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v178 - 8) + 8))(a1, v178);
      type metadata accessor for PgQuery_PartitionElem(0);
      return swift_release();
    case 213:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      AmStmt = type metadata accessor for PgQuery_PartitionSpec(0);
LABEL_236:
      v3 = *(int *)(AmStmt + 28);
      goto LABEL_265;
    case 214:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_PartitionBoundSpec(0) + 48);
      goto LABEL_265;
    case 215:
      v179 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v179 - 8) + 8))(a1, v179);
      type metadata accessor for PgQuery_PartitionRangeDatum(0);
      return swift_release();
    case 216:
      v6 = type metadata accessor for UnknownStorage();
      v189 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
      v189(a1, v6);
      PartitionCmd = type metadata accessor for PgQuery_PartitionCmd(0);
      v181 = a1 + *(int *)(PartitionCmd + 20);
      v182 = type metadata accessor for PgQuery_RangeVar(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v182 - 8) + 48))(v181, 1, v182))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v189(v181 + *(int *)(v182 + 40), v6);
        v183 = v181 + *(int *)(v182 + 44);
        Alias = type metadata accessor for PgQuery_Alias(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Alias - 8) + 48))(v183, 1, Alias))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v189(v183 + *(int *)(Alias + 24), v6);
        }
      }
      v70 = a1 + *(int *)(PartitionCmd + 24);
      GrantStmt = type metadata accessor for PgQuery_PartitionBoundSpec(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(GrantStmt - 8) + 48))(v70, 1, GrantStmt);
      if ((_DWORD)result)
        return result;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_245:
      swift_bridgeObjectRelease();
      v122 = *(int *)(GrantStmt + 48);
      goto LABEL_254;
    case 217:
      swift_bridgeObjectRelease();
      ClusterStmt = type metadata accessor for PgQuery_VacuumRelation(0);
LABEL_247:
      v185 = ClusterStmt;
      v186 = a1 + *(int *)(ClusterStmt + 24);
      v6 = type metadata accessor for UnknownStorage();
      v189 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
      v189(v186, v6);
      v90 = *(int *)(v185 + 28);
LABEL_248:
      a1 += v90;
      RangeVar = type metadata accessor for PgQuery_RangeVar(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 48))(a1, 1, RangeVar);
      if ((_DWORD)result)
        return result;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v189(a1 + *(int *)(RangeVar + 40), v6);
LABEL_250:
      v157 = *(int *)(RangeVar + 44);
LABEL_251:
      v70 = a1 + v157;
      v187 = type metadata accessor for PgQuery_Alias(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v187 - 8) + 48))(v70, 1, v187);
      if ((_DWORD)result)
        return result;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v122 = *(int *)(v187 + 24);
LABEL_254:
      result = ((uint64_t (*)(uint64_t, uint64_t))v189)(v70 + v122, v6);
      break;
    case 218:
      swift_bridgeObjectRelease();
      v3 = *(int *)(type metadata accessor for PgQuery_InlineCodeBlock(0) + 32);
      goto LABEL_265;
    case 219:
      RangeTblRef = type metadata accessor for PgQuery_CallContext(0);
      goto LABEL_264;
    case 220:
      RangeTblRef = type metadata accessor for PgQuery_Integer(0);
      goto LABEL_264;
    case 221:
      swift_bridgeObjectRelease();
      RangeTblRef = type metadata accessor for PgQuery_Float(0);
      goto LABEL_264;
    case 222:
      swift_bridgeObjectRelease();
      RangeTblRef = type metadata accessor for PgQuery_String(0);
      goto LABEL_264;
    case 223:
      swift_bridgeObjectRelease();
      RangeTblRef = type metadata accessor for PgQuery_BitString(0);
      goto LABEL_264;
    case 225:
      swift_bridgeObjectRelease();
      RangeTblRef = type metadata accessor for PgQuery_List(0);
      goto LABEL_264;
    case 226:
      swift_bridgeObjectRelease();
      RangeTblRef = type metadata accessor for PgQuery_IntList(0);
      goto LABEL_264;
    case 227:
      swift_bridgeObjectRelease();
      RangeTblRef = type metadata accessor for PgQuery_OidList(0);
LABEL_264:
      v3 = *(int *)(RangeTblRef + 20);
LABEL_265:
      a1 += v3;
LABEL_266:
      v188 = type metadata accessor for UnknownStorage();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v188 - 8) + 8))(a1, v188);
      break;
    default:
      return result;
  }
  return result;
}

void initializeWithCopy for PgQuery_Node.OneOf_Node()
{
  char *v0;

  v0 = (char *)sub_18DA416D8 + 4 * word_18DC0E52C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_QWORD *sub_18DA416D8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);

  v2 = v1[1];
  *v0 = *v1;
  v0[1] = v2;
  v0[2] = v1[2];
  v3 = *(int *)(type metadata accessor for PgQuery_Alias(0) + 24);
  v4 = (char *)v0 + v3;
  v5 = (char *)v1 + v3;
  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7(v4, v5, v6);
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithCopy for PgQuery_Node.OneOf_Node(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    outlined destroy of PgQuery_Alias(result, type metadata accessor for PgQuery_Node.OneOf_Node);
    v2 = (char *)&loc_18DA48AA4 + 4 * word_18DC0E6F4[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t outlined destroy of PgQuery_Alias(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void initializeWithTake for PgQuery_Node.OneOf_Node()
{
  char *v0;

  v0 = (char *)sub_18DA5054C + 4 * word_18DC0E8BC[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_18DA5054C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__dst, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *(_OWORD *)v24 = *(_OWORD *)v25;
  *(_QWORD *)(v24 + 16) = *(_QWORD *)(v25 + 16);
  v26 = *(int *)(type metadata accessor for PgQuery_Alias(0) + 24);
  v27 = v24 + v26;
  v28 = v25 + v26;
  v29 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
  swift_storeEnumTagMultiPayload();
  return v24;
}

uint64_t assignWithTake for PgQuery_Node.OneOf_Node(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    outlined destroy of PgQuery_Alias(result, type metadata accessor for PgQuery_Node.OneOf_Node);
    v2 = (char *)&loc_18DA56A20 + 4 * word_18DC0EA84[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_Node.OneOf_Node()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;

  result = type metadata accessor for PgQuery_Alias(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for PgQuery_RangeVar(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for PgQuery_TableFunc(319);
      if (v3 <= 0x3F)
      {
        result = type metadata accessor for UnknownStorage();
        if (v4 <= 0x3F)
        {
          result = type metadata accessor for PgQuery_Var(319);
          if (v5 <= 0x3F)
          {
            result = type metadata accessor for PgQuery_Param(319);
            if (v6 <= 0x3F)
            {
              result = type metadata accessor for PgQuery_Aggref(319);
              if (v7 <= 0x3F)
              {
                result = type metadata accessor for PgQuery_GroupingFunc(319);
                if (v8 <= 0x3F)
                {
                  result = type metadata accessor for PgQuery_WindowFunc(319);
                  if (v9 <= 0x3F)
                  {
                    result = type metadata accessor for PgQuery_SubscriptingRef(319);
                    if (v10 <= 0x3F)
                    {
                      result = type metadata accessor for PgQuery_FuncExpr(319);
                      if (v11 <= 0x3F)
                      {
                        result = type metadata accessor for PgQuery_NamedArgExpr(319);
                        if (v12 <= 0x3F)
                        {
                          result = type metadata accessor for PgQuery_OpExpr(319);
                          if (v13 <= 0x3F)
                          {
                            result = type metadata accessor for PgQuery_DistinctExpr(319);
                            if (v14 <= 0x3F)
                            {
                              result = type metadata accessor for PgQuery_NullIfExpr(319);
                              if (v15 <= 0x3F)
                              {
                                result = type metadata accessor for PgQuery_ScalarArrayOpExpr(319);
                                if (v16 <= 0x3F)
                                {
                                  result = type metadata accessor for PgQuery_BoolExpr(319);
                                  if (v17 <= 0x3F)
                                  {
                                    result = type metadata accessor for PgQuery_SubLink(319);
                                    if (v18 <= 0x3F)
                                    {
                                      result = type metadata accessor for PgQuery_SubPlan(319);
                                      if (v19 <= 0x3F)
                                      {
                                        result = type metadata accessor for PgQuery_AlternativeSubPlan(319);
                                        if (v20 <= 0x3F)
                                        {
                                          result = type metadata accessor for PgQuery_FieldSelect(319);
                                          if (v21 <= 0x3F)
                                          {
                                            result = type metadata accessor for PgQuery_FieldStore(319);
                                            if (v22 <= 0x3F)
                                            {
                                              result = type metadata accessor for PgQuery_RelabelType(319);
                                              if (v23 <= 0x3F)
                                              {
                                                result = type metadata accessor for PgQuery_CoerceViaIO(319);
                                                if (v24 <= 0x3F)
                                                {
                                                  result = type metadata accessor for PgQuery_ArrayCoerceExpr(319);
                                                  if (v25 <= 0x3F)
                                                  {
                                                    result = type metadata accessor for PgQuery_ConvertRowtypeExpr(319);
                                                    if (v26 <= 0x3F)
                                                    {
                                                      result = type metadata accessor for PgQuery_CollateExpr(319);
                                                      if (v27 <= 0x3F)
                                                      {
                                                        result = type metadata accessor for PgQuery_CaseExpr(319);
                                                        if (v28 <= 0x3F)
                                                        {
                                                          result = type metadata accessor for PgQuery_CaseWhen(319);
                                                          if (v29 <= 0x3F)
                                                          {
                                                            result = type metadata accessor for PgQuery_CaseTestExpr(319);
                                                            if (v30 <= 0x3F)
                                                            {
                                                              result = type metadata accessor for PgQuery_ArrayExpr(319);
                                                              if (v31 <= 0x3F)
                                                              {
                                                                result = type metadata accessor for PgQuery_RowExpr(319);
                                                                if (v32 <= 0x3F)
                                                                {
                                                                  result = type metadata accessor for PgQuery_RowCompareExpr(319);
                                                                  if (v33 <= 0x3F)
                                                                  {
                                                                    result = type metadata accessor for PgQuery_CoalesceExpr(319);
                                                                    if (v34 <= 0x3F)
                                                                    {
                                                                      result = type metadata accessor for PgQuery_MinMaxExpr(319);
                                                                      if (v35 <= 0x3F)
                                                                      {
                                                                        result = type metadata accessor for PgQuery_SQLValueFunction(319);
                                                                        if (v36 <= 0x3F)
                                                                        {
                                                                          result = type metadata accessor for PgQuery_XmlExpr(319);
                                                                          if (v37 <= 0x3F)
                                                                          {
                                                                            result = type metadata accessor for PgQuery_NullTest(319);
                                                                            if (v38 <= 0x3F)
                                                                            {
                                                                              result = type metadata accessor for PgQuery_BooleanTest(319);
                                                                              if (v39 <= 0x3F)
                                                                              {
                                                                                result = type metadata accessor for PgQuery_CoerceToDomain(319);
                                                                                if (v40 <= 0x3F)
                                                                                {
                                                                                  result = type metadata accessor for PgQuery_CoerceToDomainValue(319);
                                                                                  if (v41 <= 0x3F)
                                                                                  {
                                                                                    result = type metadata accessor for PgQuery_SetToDefault(319);
                                                                                    if (v42 <= 0x3F)
                                                                                    {
                                                                                      result = type metadata accessor for PgQuery_CurrentOfExpr(319);
                                                                                      if (v43 <= 0x3F)
                                                                                      {
                                                                                        result = type metadata accessor for PgQuery_NextValueExpr(319);
                                                                                        if (v44 <= 0x3F)
                                                                                        {
                                                                                          result = type metadata accessor for PgQuery_InferenceElem(319);
                                                                                          if (v45 <= 0x3F)
                                                                                          {
                                                                                            result = type metadata accessor for PgQuery_TargetEntry(319);
                                                                                            if (v46 <= 0x3F)
                                                                                            {
                                                                                              result = type metadata accessor for PgQuery_RangeTblRef(319);
                                                                                              if (v47 <= 0x3F)
                                                                                              {
                                                                                                result = type metadata accessor for PgQuery_JoinExpr(319);
                                                                                                if (v48 <= 0x3F)
                                                                                                {
                                                                                                  result = type metadata accessor for PgQuery_FromExpr(319);
                                                                                                  if (v49 <= 0x3F)
                                                                                                  {
                                                                                                    result = type metadata accessor for PgQuery_OnConflictExpr(319);
                                                                                                    if (v50 <= 0x3F)
                                                                                                    {
                                                                                                      result = type metadata accessor for PgQuery_IntoClause(319);
                                                                                                      if (v51 <= 0x3F)
                                                                                                      {
                                                                                                        result = type metadata accessor for PgQuery_RawStmt(319);
                                                                                                        if (v52 <= 0x3F)
                                                                                                        {
                                                                                                          result = type metadata accessor for PgQuery_Query(319);
                                                                                                          if (v53 <= 0x3F)
                                                                                                          {
                                                                                                            result = type metadata accessor for PgQuery_InsertStmt(319);
                                                                                                            if (v54 <= 0x3F)
                                                                                                            {
                                                                                                              result = type metadata accessor for PgQuery_DeleteStmt(319);
                                                                                                              if (v55 <= 0x3F)
                                                                                                              {
                                                                                                                result = type metadata accessor for PgQuery_UpdateStmt(319);
                                                                                                                if (v56 <= 0x3F)
                                                                                                                {
                                                                                                                  result = type metadata accessor for PgQuery_SelectStmt(319);
                                                                                                                  if (v57 <= 0x3F)
                                                                                                                  {
                                                                                                                    result = type metadata accessor for PgQuery_AlterTableStmt(319);
                                                                                                                    if (v58 <= 0x3F)
                                                                                                                    {
                                                                                                                      result = type metadata accessor for PgQuery_AlterTableCmd(319);
                                                                                                                      if (v59 <= 0x3F)
                                                                                                                      {
                                                                                                                        result = type metadata accessor for PgQuery_AlterDomainStmt(319);
                                                                                                                        if (v60 <= 0x3F)
                                                                                                                        {
                                                                                                                          result = type metadata accessor for PgQuery_SetOperationStmt(319);
                                                                                                                          if (v61 <= 0x3F)
                                                                                                                          {
                                                                                                                            result = type metadata accessor for PgQuery_GrantStmt(319);
                                                                                                                            if (v62 <= 0x3F)
                                                                                                                            {
                                                                                                                              result = type metadata accessor for PgQuery_GrantRoleStmt(319);
                                                                                                                              if (v63 <= 0x3F)
                                                                                                                              {
                                                                                                                                result = type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt(319);
                                                                                                                                if (v64 <= 0x3F)
                                                                                                                                {
                                                                                                                                  result = type metadata accessor for PgQuery_ClosePortalStmt(319);
                                                                                                                                  if (v65 <= 0x3F)
                                                                                                                                  {
                                                                                                                                    result = type metadata accessor for PgQuery_ClusterStmt(319);
                                                                                                                                    if (v66 <= 0x3F)
                                                                                                                                    {
                                                                                                                                      result = type metadata accessor for PgQuery_CopyStmt(319);
                                                                                                                                      if (v67 <= 0x3F)
                                                                                                                                      {
                                                                                                                                        result = type metadata accessor for PgQuery_CreateStmt(319);
                                                                                                                                        if (v68 <= 0x3F)
                                                                                                                                        {
                                                                                                                                          result = type metadata accessor for PgQuery_DefineStmt(319);
                                                                                                                                          if (v69 <= 0x3F)
                                                                                                                                          {
                                                                                                                                            result = type metadata accessor for PgQuery_DropStmt(319);
                                                                                                                                            if (v70 <= 0x3F)
                                                                                                                                            {
                                                                                                                                              result = type metadata accessor for PgQuery_TruncateStmt(319);
                                                                                                                                              if (v71 <= 0x3F)
                                                                                                                                              {
                                                                                                                                                result = type metadata accessor for PgQuery_CommentStmt(319);
                                                                                                                                                if (v72 <= 0x3F)
                                                                                                                                                {
                                                                                                                                                  result = type metadata accessor for PgQuery_FetchStmt(319);
                                                                                                                                                  if (v73 <= 0x3F)
                                                                                                                                                  {
                                                                                                                                                    result = type metadata accessor for PgQuery_IndexStmt(319);
                                                                                                                                                    if (v74 <= 0x3F)
                                                                                                                                                    {
                                                                                                                                                      result = type metadata accessor for PgQuery_CreateFunctionStmt(319);
                                                                                                                                                      if (v75 <= 0x3F)
                                                                                                                                                      {
                                                                                                                                                        result = type metadata accessor for PgQuery_AlterFunctionStmt(319);
                                                                                                                                                        if (v76 <= 0x3F)
                                                                                                                                                        {
                                                                                                                                                          result = type metadata accessor for PgQuery_DoStmt(319);
                                                                                                                                                          if (v77 <= 0x3F)
                                                                                                                                                          {
                                                                                                                                                            result = type metadata accessor for PgQuery_RenameStmt(319);
                                                                                                                                                            if (v78 <= 0x3F)
                                                                                                                                                            {
                                                                                                                                                              result = type metadata accessor for PgQuery_RuleStmt(319);
                                                                                                                                                              if (v79 <= 0x3F)
                                                                                                                                                              {
                                                                                                                                                                result = type metadata accessor for PgQuery_NotifyStmt(319);
                                                                                                                                                                if (v80 <= 0x3F)
                                                                                                                                                                {
                                                                                                                                                                  result = type metadata accessor for PgQuery_ListenStmt(319);
                                                                                                                                                                  if (v81 <= 0x3F)
                                                                                                                                                                  {
                                                                                                                                                                    result = type metadata accessor for PgQuery_UnlistenStmt(319);
                                                                                                                                                                    if (v82 <= 0x3F)
                                                                                                                                                                    {
                                                                                                                                                                      result = type metadata accessor for PgQuery_TransactionStmt(319);
                                                                                                                                                                      if (v83 <= 0x3F)
                                                                                                                                                                      {
                                                                                                                                                                        result = type metadata accessor for PgQuery_ViewStmt(319);
                                                                                                                                                                        if (v84 <= 0x3F)
                                                                                                                                                                        {
                                                                                                                                                                          result = type metadata accessor for PgQuery_LoadStmt(319);
                                                                                                                                                                          if (v85 <= 0x3F)
                                                                                                                                                                          {
                                                                                                                                                                            result = type metadata accessor for PgQuery_CreateDomainStmt(319);
                                                                                                                                                                            if (v86 <= 0x3F)
                                                                                                                                                                            {
                                                                                                                                                                              result = type metadata accessor for PgQuery_CreatedbStmt(319);
                                                                                                                                                                              if (v87 <= 0x3F)
                                                                                                                                                                              {
                                                                                                                                                                                result = type metadata accessor for PgQuery_DropdbStmt(319);
                                                                                                                                                                                if (v88 <= 0x3F)
                                                                                                                                                                                {
                                                                                                                                                                                  result = type metadata accessor for PgQuery_VacuumStmt(319);
                                                                                                                                                                                  if (v89 <= 0x3F)
                                                                                                                                                                                  {
                                                                                                                                                                                    result = type metadata accessor for PgQuery_ExplainStmt(319);
                                                                                                                                                                                    if (v90 <= 0x3F)
                                                                                                                                                                                    {
                                                                                                                                                                                      result = type metadata accessor for PgQuery_CreateTableAsStmt(319);
                                                                                                                                                                                      if (v91 <= 0x3F)
                                                                                                                                                                                      {
                                                                                                                                                                                        result = type metadata accessor for PgQuery_CreateSeqStmt(319);
                                                                                                                                                                                        if (v92 <= 0x3F)
                                                                                                                                                                                        {
                                                                                                                                                                                          result = type metadata accessor for PgQuery_AlterSeqStmt(319);
                                                                                                                                                                                          if (v93 <= 0x3F)
                                                                                                                                                                                          {
                                                                                                                                                                                            result = type metadata accessor for PgQuery_VariableSetStmt(319);
                                                                                                                                                                                            if (v94 <= 0x3F)
                                                                                                                                                                                            {
                                                                                                                                                                                              result = type metadata accessor for PgQuery_VariableShowStmt(319);
                                                                                                                                                                                              if (v95 <= 0x3F)
                                                                                                                                                                                              {
                                                                                                                                                                                                result = type metadata accessor for PgQuery_DiscardStmt(319);
                                                                                                                                                                                                if (v96 <= 0x3F)
                                                                                                                                                                                                {
                                                                                                                                                                                                  result = type metadata accessor for PgQuery_CreateTrigStmt(319);
                                                                                                                                                                                                  if (v97 <= 0x3F)
                                                                                                                                                                                                  {
                                                                                                                                                                                                    result = type metadata accessor for PgQuery_CreatePLangStmt(319);
                                                                                                                                                                                                    if (v98 <= 0x3F)
                                                                                                                                                                                                    {
                                                                                                                                                                                                      result = type metadata accessor for PgQuery_CreateRoleStmt(319);
                                                                                                                                                                                                      if (v99 <= 0x3F)
                                                                                                                                                                                                      {
                                                                                                                                                                                                        result = type metadata accessor for PgQuery_AlterRoleStmt(319);
                                                                                                                                                                                                        if (v100 <= 0x3F)
                                                                                                                                                                                                        {
                                                                                                                                                                                                          result = type metadata accessor for PgQuery_DropRoleStmt(319);
                                                                                                                                                                                                          if (v101 <= 0x3F)
                                                                                                                                                                                                          {
                                                                                                                                                                                                            result = type metadata accessor for PgQuery_LockStmt(319);
                                                                                                                                                                                                            if (v102 <= 0x3F)
                                                                                                                                                                                                            {
                                                                                                                                                                                                              result = type metadata accessor for PgQuery_ConstraintsSetStmt(319);
                                                                                                                                                                                                              if (v103 <= 0x3F)
                                                                                                                                                                                                              {
                                                                                                                                                                                                                result = type metadata accessor for PgQuery_ReindexStmt(319);
                                                                                                                                                                                                                if (v104 <= 0x3F)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  result = type metadata accessor for PgQuery_CreateSchemaStmt(319);
                                                                                                                                                                                                                  if (v105 <= 0x3F)
                                                                                                                                                                                                                  {
                                                                                                                                                                                                                    result = type metadata accessor for PgQuery_AlterDatabaseStmt(319);
                                                                                                                                                                                                                    if (v106 <= 0x3F)
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                      result = type metadata accessor for PgQuery_AlterDatabaseSetStmt(319);
                                                                                                                                                                                                                      if (v107 <= 0x3F)
                                                                                                                                                                                                                      {
                                                                                                                                                                                                                        result = type metadata accessor for PgQuery_AlterRoleSetStmt(319);
                                                                                                                                                                                                                        if (v108 <= 0x3F)
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                          result = type metadata accessor for PgQuery_CreateConversionStmt(319);
                                                                                                                                                                                                                          if (v109 <= 0x3F)
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            result = type metadata accessor for PgQuery_CreateCastStmt(319);
                                                                                                                                                                                                                            if (v110 <= 0x3F)
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                              result = type metadata accessor for PgQuery_CreateOpClassStmt(319);
                                                                                                                                                                                                                              if (v111 <= 0x3F)
                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                result = type metadata accessor for PgQuery_CreateOpFamilyStmt(319);
                                                                                                                                                                                                                                if (v112 <= 0x3F)
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                  result = type metadata accessor for PgQuery_AlterOpFamilyStmt(319);
                                                                                                                                                                                                                                  if (v113 <= 0x3F)
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    result = type metadata accessor for PgQuery_PrepareStmt(319);
                                                                                                                                                                                                                                    if (v114 <= 0x3F)
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                      result = type metadata accessor for PgQuery_ExecuteStmt(319);
                                                                                                                                                                                                                                      if (v115 <= 0x3F)
                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                        result = type metadata accessor for PgQuery_DeallocateStmt(319);
                                                                                                                                                                                                                                        if (v116 <= 0x3F)
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                          result = type metadata accessor for PgQuery_DeclareCursorStmt(319);
                                                                                                                                                                                                                                          if (v117 <= 0x3F)
                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                            result = type metadata accessor for PgQuery_CreateTableSpaceStmt(319);
                                                                                                                                                                                                                                            if (v118 <= 0x3F)
                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                              result = type metadata accessor for PgQuery_DropTableSpaceStmt(319);
                                                                                                                                                                                                                                              if (v119 <= 0x3F)
                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                result = type metadata accessor for PgQuery_AlterObjectDependsStmt(319);
                                                                                                                                                                                                                                                if (v120 <= 0x3F)
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                  result = type metadata accessor for PgQuery_AlterObjectSchemaStmt(319);
                                                                                                                                                                                                                                                  if (v121 <= 0x3F)
                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                    result = type metadata accessor for PgQuery_AlterOwnerStmt(319);
                                                                                                                                                                                                                                                    if (v122 <= 0x3F)
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                      result = type metadata accessor for PgQuery_AlterOperatorStmt(319);
                                                                                                                                                                                                                                                      if (v123 <= 0x3F)
                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                        result = type metadata accessor for PgQuery_AlterTypeStmt(319);
                                                                                                                                                                                                                                                        if (v124 <= 0x3F)
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                          result = type metadata accessor for PgQuery_DropOwnedStmt(319);
                                                                                                                                                                                                                                                          if (v125 <= 0x3F)
                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                            result = type metadata accessor for PgQuery_ReassignOwnedStmt(319);
                                                                                                                                                                                                                                                            if (v126 <= 0x3F)
                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                              result = type metadata accessor for PgQuery_CompositeTypeStmt(319);
                                                                                                                                                                                                                                                              if (v127 <= 0x3F)
                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                result = type metadata accessor for PgQuery_CreateEnumStmt(319);
                                                                                                                                                                                                                                                                if (v128 <= 0x3F)
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                  result = type metadata accessor for PgQuery_CreateRangeStmt(319);
                                                                                                                                                                                                                                                                  if (v129 <= 0x3F)
                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                    result = type metadata accessor for PgQuery_AlterEnumStmt(319);
                                                                                                                                                                                                                                                                    if (v130 <= 0x3F)
                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                      result = type metadata accessor for PgQuery_AlterTSDictionaryStmt(319);
                                                                                                                                                                                                                                                                      if (v131 <= 0x3F)
                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                        result = type metadata accessor for PgQuery_AlterTSConfigurationStmt(319);
                                                                                                                                                                                                                                                                        if (v132 <= 0x3F)
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                          result = type metadata accessor for PgQuery_CreateFdwStmt(319);
                                                                                                                                                                                                                                                                          if (v133 <= 0x3F)
                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                            result = type metadata accessor for PgQuery_AlterFdwStmt(319);
                                                                                                                                                                                                                                                                            if (v134 <= 0x3F)
                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                              result = type metadata accessor for PgQuery_CreateForeignServerStmt(319);
                                                                                                                                                                                                                                                                              if (v135 <= 0x3F)
                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                result = type metadata accessor for PgQuery_AlterForeignServerStmt(319);
                                                                                                                                                                                                                                                                                if (v136 <= 0x3F)
                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                  result = type metadata accessor for PgQuery_CreateUserMappingStmt(319);
                                                                                                                                                                                                                                                                                  if (v137 <= 0x3F)
                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                    result = type metadata accessor for PgQuery_AlterUserMappingStmt(319);
                                                                                                                                                                                                                                                                                    if (v138 <= 0x3F)
                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                      result = type metadata accessor for PgQuery_DropUserMappingStmt(319);
                                                                                                                                                                                                                                                                                      if (v139 <= 0x3F)
                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                        result = type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt(319);
                                                                                                                                                                                                                                                                                        if (v140 <= 0x3F)
                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                          result = type metadata accessor for PgQuery_AlterTableMoveAllStmt(319);
                                                                                                                                                                                                                                                                                          if (v141 <= 0x3F)
                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                            result = type metadata accessor for PgQuery_SecLabelStmt(319);
                                                                                                                                                                                                                                                                                            if (v142 <= 0x3F)
                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                              result = type metadata accessor for PgQuery_CreateForeignTableStmt(319);
                                                                                                                                                                                                                                                                                              if (v143 <= 0x3F)
                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                result = type metadata accessor for PgQuery_ImportForeignSchemaStmt(319);
                                                                                                                                                                                                                                                                                                if (v144 <= 0x3F)
                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                  result = type metadata accessor for PgQuery_CreateExtensionStmt(319);
                                                                                                                                                                                                                                                                                                  if (v145 <= 0x3F)
                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                    result = type metadata accessor for PgQuery_AlterExtensionStmt(319);
                                                                                                                                                                                                                                                                                                    if (v146 <= 0x3F)
                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                      result = type metadata accessor for PgQuery_AlterExtensionContentsStmt(319);
                                                                                                                                                                                                                                                                                                      if (v147 <= 0x3F)
                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                        result = type metadata accessor for PgQuery_CreateEventTrigStmt(319);
                                                                                                                                                                                                                                                                                                        if (v148 <= 0x3F)
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                          result = type metadata accessor for PgQuery_AlterEventTrigStmt(319);
                                                                                                                                                                                                                                                                                                          if (v149 <= 0x3F)
                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                            result = type metadata accessor for PgQuery_RefreshMatViewStmt(319);
                                                                                                                                                                                                                                                                                                            if (v150 <= 0x3F)
                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                              result = type metadata accessor for PgQuery_ReplicaIdentityStmt(319);
                                                                                                                                                                                                                                                                                                              if (v151 <= 0x3F)
                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                result = type metadata accessor for PgQuery_AlterSystemStmt(319);
                                                                                                                                                                                                                                                                                                                if (v152 <= 0x3F)
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                  result = type metadata accessor for PgQuery_CreatePolicyStmt(319);
                                                                                                                                                                                                                                                                                                                  if (v153 <= 0x3F)
                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                    result = type metadata accessor for PgQuery_AlterPolicyStmt(319);
                                                                                                                                                                                                                                                                                                                    if (v154 <= 0x3F)
                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                      result = type metadata accessor for PgQuery_CreateTransformStmt(319);
                                                                                                                                                                                                                                                                                                                      if (v155 <= 0x3F)
                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                        result = type metadata accessor for PgQuery_CreateAmStmt(319);
                                                                                                                                                                                                                                                                                                                        if (v156 <= 0x3F)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          result = type metadata accessor for PgQuery_CreatePublicationStmt(319);
                                                                                                                                                                                                                                                                                                                          if (v157 <= 0x3F)
                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                            result = type metadata accessor for PgQuery_AlterPublicationStmt(319);
                                                                                                                                                                                                                                                                                                                            if (v158 <= 0x3F)
                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                              result = type metadata accessor for PgQuery_CreateSubscriptionStmt(319);
                                                                                                                                                                                                                                                                                                                              if (v159 <= 0x3F)
                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                result = type metadata accessor for PgQuery_AlterSubscriptionStmt(319);
                                                                                                                                                                                                                                                                                                                                if (v160 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                  result = type metadata accessor for PgQuery_DropSubscriptionStmt(319);
                                                                                                                                                                                                                                                                                                                                  if (v161 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                    result = type metadata accessor for PgQuery_CreateStatsStmt(319);
                                                                                                                                                                                                                                                                                                                                    if (v162 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                      result = type metadata accessor for PgQuery_AlterCollationStmt(319);
                                                                                                                                                                                                                                                                                                                                      if (v163 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                        result = type metadata accessor for PgQuery_CallStmt(319);
                                                                                                                                                                                                                                                                                                                                        if (v164 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                          result = type metadata accessor for PgQuery_AlterStatsStmt(319);
                                                                                                                                                                                                                                                                                                                                          if (v165 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                            result = type metadata accessor for PgQuery_A_Expr(319);
                                                                                                                                                                                                                                                                                                                                            if (v166 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                              result = type metadata accessor for PgQuery_ColumnRef(319);
                                                                                                                                                                                                                                                                                                                                              if (v167 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                result = type metadata accessor for PgQuery_ParamRef(319);
                                                                                                                                                                                                                                                                                                                                                if (v168 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                  result = type metadata accessor for PgQuery_A_Const(319);
                                                                                                                                                                                                                                                                                                                                                  if (v169 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                    result = type metadata accessor for PgQuery_FuncCall(319);
                                                                                                                                                                                                                                                                                                                                                    if (v170 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                      result = type metadata accessor for PgQuery_A_Indices(319);
                                                                                                                                                                                                                                                                                                                                                      if (v171 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                        result = type metadata accessor for PgQuery_A_Indirection(319);
                                                                                                                                                                                                                                                                                                                                                        if (v172 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                          result = type metadata accessor for PgQuery_A_ArrayExpr(319);
                                                                                                                                                                                                                                                                                                                                                          if (v173 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                            result = type metadata accessor for PgQuery_ResTarget(319);
                                                                                                                                                                                                                                                                                                                                                            if (v174 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                              result = type metadata accessor for PgQuery_MultiAssignRef(319);
                                                                                                                                                                                                                                                                                                                                                              if (v175 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                result = type metadata accessor for PgQuery_TypeCast(319);
                                                                                                                                                                                                                                                                                                                                                                if (v176 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                  result = type metadata accessor for PgQuery_CollateClause(319);
                                                                                                                                                                                                                                                                                                                                                                  if (v177 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                    result = type metadata accessor for PgQuery_SortBy(319);
                                                                                                                                                                                                                                                                                                                                                                    if (v178 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                      result = type metadata accessor for PgQuery_WindowDef(319);
                                                                                                                                                                                                                                                                                                                                                                      if (v179 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                        result = type metadata accessor for PgQuery_RangeSubselect(319);
                                                                                                                                                                                                                                                                                                                                                                        if (v180 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                          result = type metadata accessor for PgQuery_RangeFunction(319);
                                                                                                                                                                                                                                                                                                                                                                          if (v181 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                            result = type metadata accessor for PgQuery_RangeTableSample(319);
                                                                                                                                                                                                                                                                                                                                                                            if (v182 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                              result = type metadata accessor for PgQuery_RangeTableFunc(319);
                                                                                                                                                                                                                                                                                                                                                                              if (v183 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                result = type metadata accessor for PgQuery_RangeTableFuncCol(319);
                                                                                                                                                                                                                                                                                                                                                                                if (v184 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                  result = type metadata accessor for PgQuery_TypeName(319);
                                                                                                                                                                                                                                                                                                                                                                                  if (v185 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                                    result = type metadata accessor for PgQuery_ColumnDef(319);
                                                                                                                                                                                                                                                                                                                                                                                    if (v186 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                      result = type metadata accessor for PgQuery_IndexElem(319);
                                                                                                                                                                                                                                                                                                                                                                                      if (v187 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                                        result = type metadata accessor for PgQuery_Constraint(319);
                                                                                                                                                                                                                                                                                                                                                                                        if (v188 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                          result = type metadata accessor for PgQuery_DefElem(319);
                                                                                                                                                                                                                                                                                                                                                                                          if (v189 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                                            result = type metadata accessor for PgQuery_RangeTblEntry(319);
                                                                                                                                                                                                                                                                                                                                                                                            if (v190 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                              result = type metadata accessor for PgQuery_RangeTblFunction(319);
                                                                                                                                                                                                                                                                                                                                                                                              if (v191 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                result = type metadata accessor for PgQuery_TableSampleClause(319);
                                                                                                                                                                                                                                                                                                                                                                                                if (v192 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                  result = type metadata accessor for PgQuery_WithCheckOption(319);
                                                                                                                                                                                                                                                                                                                                                                                                  if (v193 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                                                    result = type metadata accessor for PgQuery_SortGroupClause(319);
                                                                                                                                                                                                                                                                                                                                                                                                    if (v194 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                      result = type metadata accessor for PgQuery_GroupingSet(319);
                                                                                                                                                                                                                                                                                                                                                                                                      if (v195 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                                                        result = type metadata accessor for PgQuery_WindowClause(319);
                                                                                                                                                                                                                                                                                                                                                                                                        if (v196 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                          result = type metadata accessor for PgQuery_ObjectWithArgs(319);
                                                                                                                                                                                                                                                                                                                                                                                                          if (v197 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                                                            result = type metadata accessor for PgQuery_AccessPriv(319);
                                                                                                                                                                                                                                                                                                                                                                                                            if (v198 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                              result = type metadata accessor for PgQuery_CreateOpClassItem(319);
                                                                                                                                                                                                                                                                                                                                                                                                              if (v199 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                                result = type metadata accessor for PgQuery_TableLikeClause(319);
                                                                                                                                                                                                                                                                                                                                                                                                                if (v200 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                  result = type metadata accessor for PgQuery_FunctionParameter(319);
                                                                                                                                                                                                                                                                                                                                                                                                                  if (v201 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                                                                    result = type metadata accessor for PgQuery_LockingClause(319);
                                                                                                                                                                                                                                                                                                                                                                                                                    if (v202 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                                      result = type metadata accessor for PgQuery_RowMarkClause(319);
                                                                                                                                                                                                                                                                                                                                                                                                                      if (v203 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                                                                        result = type metadata accessor for PgQuery_XmlSerialize(319);
                                                                                                                                                                                                                                                                                                                                                                                                                        if (v204 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                          result = type metadata accessor for PgQuery_WithClause(319);
                                                                                                                                                                                                                                                                                                                                                                                                                          if (v205 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                                                                            result = type metadata accessor for PgQuery_InferClause(319);
                                                                                                                                                                                                                                                                                                                                                                                                                            if (v206 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                              result = type metadata accessor for PgQuery_OnConflictClause(319);
                                                                                                                                                                                                                                                                                                                                                                                                                              if (v207 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                                                result = type metadata accessor for PgQuery_CommonTableExpr(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                if (v208 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                                  result = type metadata accessor for PgQuery_RoleSpec(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                  if (v209 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                                                                                    result = type metadata accessor for PgQuery_TriggerTransition(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                    if (v210 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                                                      result = type metadata accessor for PgQuery_PartitionElem(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                      if (v211 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                                                                                        result = type metadata accessor for PgQuery_PartitionSpec(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (v212 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                                          result = type metadata accessor for PgQuery_PartitionBoundSpec(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                          if (v213 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                                                                                            result = type metadata accessor for PgQuery_PartitionRangeDatum(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                            if (v214 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                                              result = type metadata accessor for PgQuery_PartitionCmd(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                              if (v215 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                                                                result = type metadata accessor for PgQuery_VacuumRelation(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                                if (v216 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                                                  result = type metadata accessor for PgQuery_InlineCodeBlock(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (v217 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                                                                                                    result = type metadata accessor for PgQuery_CallContext(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (v218 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                                                                      result = type metadata accessor for PgQuery_Integer(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (v219 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                                                                                                        result = type metadata accessor for PgQuery_Float(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (v220 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                                                          result = type metadata accessor for PgQuery_String(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (v221 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            result = type metadata accessor for PgQuery_BitString(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (v222 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                                                              result = type metadata accessor for PgQuery_List(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (v223 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                result = type metadata accessor for PgQuery_IntList(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (v224 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  result = type metadata accessor for PgQuery_OidList(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (v225 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    swift_initEnumMetadataMultiPayload();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    return 0;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                            }
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PgQuery_OidList()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_OidList()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_OidList()
{
  return type metadata completion function for PgQuery_OidList();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PgQuery_IntList()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_IntList()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_List()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_List()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_BitString()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_BitString()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_BitString()
{
  return type metadata completion function for PgQuery_OidList();
}

uint64_t getEnumTagSinglePayload for PgQuery_String()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_String()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_Float()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_Float()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_Integer()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_Integer()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_Integer()
{
  return type metadata completion function for PgQuery_OidList();
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_CallContext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

_BYTE *initializeWithCopy for PgQuery_CallContext(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_BYTE *assignWithCopy for PgQuery_CallContext(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_BYTE *initializeWithTake for PgQuery_CallContext(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_BYTE *assignWithTake for PgQuery_CallContext(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CallContext()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA5EAE0(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_CallContext()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_BYTE *sub_18DA5EB68(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_CallContext()
{
  return type metadata completion function for PgQuery_OidList();
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_InlineCodeBlock(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    *(_WORD *)(a1 + 20) = *((_WORD *)a2 + 10);
    v6 = *(int *)(a3 + 32);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for PgQuery_InlineCodeBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_InlineCodeBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  v5 = *(int *)(a3 + 32);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_InlineCodeBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_BYTE *)(a1 + 21) = *(_BYTE *)(a2 + 21);
  v6 = *(int *)(a3 + 32);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_InlineCodeBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  v4 = *(int *)(a3 + 32);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_InlineCodeBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_BYTE *)(a1 + 21) = *(_BYTE *)(a2 + 21);
  v7 = *(int *)(a3 + 32);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_InlineCodeBlock()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_InlineCodeBlock()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_InlineCodeBlock()
{
  return type metadata completion function for PgQuery_InlineCodeBlock();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_VacuumRelation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t RangeVar;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t Alias;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    a1[1] = a2[1];
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    v12 = *(int *)(a3 + 28);
    v13 = (uint64_t *)((char *)v4 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    RangeVar = type metadata accessor for PgQuery_RangeVar(0);
    v16 = *(_QWORD *)(RangeVar - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RangeVar))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v37 = v16;
      v38 = v11;
      v19 = v14[1];
      *v13 = *v14;
      v13[1] = v19;
      v20 = v14[3];
      v13[2] = v14[2];
      v13[3] = v20;
      v21 = v14[5];
      v13[4] = v14[4];
      v13[5] = v21;
      *((_BYTE *)v13 + 48) = *((_BYTE *)v14 + 48);
      v22 = v14[8];
      v13[7] = v14[7];
      v13[8] = v22;
      *((_DWORD *)v13 + 18) = *((_DWORD *)v14 + 18);
      v23 = *(int *)(RangeVar + 40);
      v24 = (char *)v13 + v23;
      v25 = (char *)v14 + v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38(v24, v25, v10);
      v26 = *(int *)(RangeVar + 44);
      v27 = (_QWORD *)((char *)v13 + v26);
      v28 = (_QWORD *)((char *)v14 + v26);
      Alias = type metadata accessor for PgQuery_Alias(0);
      v30 = *(_QWORD *)(Alias - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v30 + 48))(v28, 1, Alias))
      {
        v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        v32 = v28[1];
        *v27 = *v28;
        v27[1] = v32;
        v27[2] = v28[2];
        v33 = *(int *)(Alias + 24);
        v34 = (char *)v27 + v33;
        v35 = (char *)v28 + v33;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v38(v34, v35, v10);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, Alias);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v13, 0, 1, RangeVar);
    }
  }
  return v4;
}

uint64_t initializeWithCopy for PgQuery_VacuumRelation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t RangeVar;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t Alias;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v15 = *(_QWORD *)(RangeVar - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v35 = v15;
    v36 = v10;
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v18 = v13[3];
    v12[2] = v13[2];
    v12[3] = v18;
    v19 = v13[5];
    v12[4] = v13[4];
    v12[5] = v19;
    *((_BYTE *)v12 + 48) = *((_BYTE *)v13 + 48);
    v20 = v13[8];
    v12[7] = v13[7];
    v12[8] = v20;
    *((_DWORD *)v12 + 18) = *((_DWORD *)v13 + 18);
    v21 = *(int *)(RangeVar + 40);
    v22 = (char *)v12 + v21;
    v23 = (char *)v13 + v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36(v22, v23, v9);
    v24 = *(int *)(RangeVar + 44);
    v25 = (_QWORD *)((char *)v12 + v24);
    v26 = (_QWORD *)((char *)v13 + v24);
    Alias = type metadata accessor for PgQuery_Alias(0);
    v28 = *(_QWORD *)(Alias - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, Alias))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      v30 = v26[1];
      *v25 = *v26;
      v25[1] = v30;
      v25[2] = v26[2];
      v31 = *(int *)(Alias + 24);
      v32 = (char *)v25 + v31;
      v33 = (char *)v26 + v31;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v36(v32, v33, v9);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, Alias);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v12, 0, 1, RangeVar);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_VacuumRelation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t RangeVar;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t Alias;
  uint64_t v35;
  uint64_t (*v36)(_QWORD *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v46;
  char *v47;
  char *v48;
  void (*v49)(char *, char *, uint64_t);

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = a1 + v12;
  v14 = a2 + v12;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v16 = *(_QWORD *)(RangeVar - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, RangeVar);
  v18 = v17(v14, 1, RangeVar);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
      *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
      *(_QWORD *)(v13 + 40) = *(_QWORD *)(v14 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v13 + 48) = *(_BYTE *)(v14 + 48);
      *(_QWORD *)(v13 + 56) = *(_QWORD *)(v14 + 56);
      *(_QWORD *)(v13 + 64) = *(_QWORD *)(v14 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 72) = *(_DWORD *)(v14 + 72);
      v11(v13 + *(int *)(RangeVar + 40), v14 + *(int *)(RangeVar + 40), v9);
      v31 = *(int *)(RangeVar + 44);
      v32 = (_QWORD *)(v13 + v31);
      v33 = (_QWORD *)(v14 + v31);
      Alias = type metadata accessor for PgQuery_Alias(0);
      v35 = *(_QWORD *)(Alias - 8);
      v36 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v35 + 48);
      v37 = v36(v32, 1, Alias);
      v38 = v36(v33, 1, Alias);
      if (v37)
      {
        if (!v38)
        {
          *v32 = *v33;
          v32[1] = v33[1];
          v32[2] = v33[2];
          v39 = *(int *)(Alias + 24);
          v40 = (char *)v32 + v39;
          v41 = (char *)v33 + v39;
          v42 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v42(v40, v41, v9);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v38)
        {
          *v32 = *v33;
          v32[1] = v33[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v32[2] = v33[2];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v11((uint64_t)v32 + *(int *)(Alias + 24), (uint64_t)v33 + *(int *)(Alias + 24), v9);
          return a1;
        }
        outlined destroy of PgQuery_Alias((uint64_t)v32, type metadata accessor for PgQuery_Alias);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      v29 = v32;
      v30 = v33;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    v29 = (void *)v13;
    v30 = (const void *)v14;
LABEL_8:
    memcpy(v29, v30, v28);
    return a1;
  }
  if (v18)
    goto LABEL_7;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
  *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
  *(_QWORD *)(v13 + 40) = *(_QWORD *)(v14 + 40);
  *(_BYTE *)(v13 + 48) = *(_BYTE *)(v14 + 48);
  *(_QWORD *)(v13 + 56) = *(_QWORD *)(v14 + 56);
  *(_QWORD *)(v13 + 64) = *(_QWORD *)(v14 + 64);
  *(_DWORD *)(v13 + 72) = *(_DWORD *)(v14 + 72);
  v19 = *(int *)(RangeVar + 40);
  v46 = (char *)(v14 + v19);
  v48 = (char *)(v13 + v19);
  v20 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = v48;
  v49 = v20;
  v20(v21, v46, v9);
  v22 = *(int *)(RangeVar + 44);
  v23 = (_QWORD *)(v13 + v22);
  v24 = (_QWORD *)(v14 + v22);
  v25 = type metadata accessor for PgQuery_Alias(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    *v23 = *v24;
    v23[1] = v24[1];
    v23[2] = v24[2];
    v43 = *(int *)(v25 + 24);
    v47 = (char *)v23 + v43;
    v44 = (char *)v24 + v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v49(v47, v44, v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RangeVar);
  return a1;
}

uint64_t initializeWithTake for PgQuery_VacuumRelation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t RangeVar;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t Alias;
  uint64_t v22;
  uint64_t v23;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v15 = *(_QWORD *)(RangeVar - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v12[2] = v13[2];
    *((_BYTE *)v12 + 48) = *((_BYTE *)v13 + 48);
    *(_OWORD *)((char *)v12 + 56) = *(_OWORD *)((char *)v13 + 56);
    *((_DWORD *)v12 + 18) = *((_DWORD *)v13 + 18);
    v10((char *)v12 + *(int *)(RangeVar + 40), (char *)v13 + *(int *)(RangeVar + 40), v9);
    v18 = *(int *)(RangeVar + 44);
    v19 = (_QWORD *)((char *)v12 + v18);
    v20 = (_QWORD *)((char *)v13 + v18);
    Alias = type metadata accessor for PgQuery_Alias(0);
    v22 = *(_QWORD *)(Alias - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, Alias))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v19 = *(_OWORD *)v20;
      v19[2] = v20[2];
      v10((char *)v19 + *(int *)(Alias + 24), (char *)v20 + *(int *)(Alias + 24), v9);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, Alias);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_VacuumRelation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t RangeVar;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  __int128 v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t Alias;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v43;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = a1 + v12;
  v14 = a2 + v12;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v16 = *(_QWORD *)(RangeVar - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, RangeVar);
  v18 = v17(v14, 1, RangeVar);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v30 = *(_QWORD *)(v14 + 8);
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *(_QWORD *)(v13 + 8) = v30;
      swift_bridgeObjectRelease();
      v31 = *(_QWORD *)(v14 + 24);
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
      *(_QWORD *)(v13 + 24) = v31;
      swift_bridgeObjectRelease();
      v32 = *(_QWORD *)(v14 + 40);
      *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
      *(_QWORD *)(v13 + 40) = v32;
      swift_bridgeObjectRelease();
      *(_BYTE *)(v13 + 48) = *(_BYTE *)(v14 + 48);
      v33 = *(_QWORD *)(v14 + 64);
      *(_QWORD *)(v13 + 56) = *(_QWORD *)(v14 + 56);
      *(_QWORD *)(v13 + 64) = v33;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 72) = *(_DWORD *)(v14 + 72);
      v11(v13 + *(int *)(RangeVar + 40), v14 + *(int *)(RangeVar + 40), v9);
      v34 = *(int *)(RangeVar + 44);
      v35 = v13 + v34;
      v36 = (char *)(v14 + v34);
      Alias = type metadata accessor for PgQuery_Alias(0);
      v38 = *(_QWORD *)(Alias - 8);
      v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
      v40 = v39(v35, 1, Alias);
      v41 = v39((uint64_t)v36, 1, Alias);
      if (v40)
      {
        if (!v41)
        {
          *(_OWORD *)v35 = *(_OWORD *)v36;
          *(_QWORD *)(v35 + 16) = *((_QWORD *)v36 + 2);
          (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v35 + *(int *)(Alias + 24), &v36[*(int *)(Alias + 24)], v9);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v41)
        {
          v43 = *((_QWORD *)v36 + 1);
          *(_QWORD *)v35 = *(_QWORD *)v36;
          *(_QWORD *)(v35 + 8) = v43;
          swift_bridgeObjectRelease();
          *(_QWORD *)(v35 + 16) = *((_QWORD *)v36 + 2);
          swift_bridgeObjectRelease();
          v11(v35 + *(int *)(Alias + 24), (uint64_t)&v36[*(int *)(Alias + 24)], v9);
          return a1;
        }
        outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Alias);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      v28 = (void *)v35;
      v29 = v36;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    v28 = (void *)v13;
    v29 = (char *)v14;
LABEL_8:
    memcpy(v28, v29, v27);
    return a1;
  }
  if (v18)
    goto LABEL_7;
  v19 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v19;
  *(_OWORD *)(v13 + 32) = *(_OWORD *)(v14 + 32);
  *(_BYTE *)(v13 + 48) = *(_BYTE *)(v14 + 48);
  *(_OWORD *)(v13 + 56) = *(_OWORD *)(v14 + 56);
  *(_DWORD *)(v13 + 72) = *(_DWORD *)(v14 + 72);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  v20(v13 + *(int *)(RangeVar + 40), v14 + *(int *)(RangeVar + 40), v9);
  v21 = *(int *)(RangeVar + 44);
  v22 = (_QWORD *)(v13 + v21);
  v23 = (_QWORD *)(v14 + v21);
  v24 = type metadata accessor for PgQuery_Alias(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v22 = *(_OWORD *)v23;
    v22[2] = v23[2];
    v20((uint64_t)v22 + *(int *)(v24 + 24), (uint64_t)v23 + *(int *)(v24 + 24), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RangeVar);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_VacuumRelation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA5FD20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_61Tm(a1, a2, a3, &demangling cache variable for type metadata for PgQuery_RangeVar?);
}

uint64_t storeEnumTagSinglePayload for PgQuery_VacuumRelation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA5FD38(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for PgQuery_VacuumRelation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for PgQuery_VacuumRelation(a1, a2, a3, MEMORY[0x1E0DE9D30] + 64, MEMORY[0x1E0DE9D18] + 64, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_PartitionCmd(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t RangeVar;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t Alias;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t PartitionBoundSpec;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8((char *)a1, (char *)a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    RangeVar = type metadata accessor for PgQuery_RangeVar(0);
    v13 = *(_QWORD *)(RangeVar - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(v11, 1, RangeVar))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v46 = v13;
      v47 = v8;
      v16 = v11[1];
      *v10 = *v11;
      v10[1] = v16;
      v17 = v11[3];
      v10[2] = v11[2];
      v10[3] = v17;
      v18 = v11[5];
      v10[4] = v11[4];
      v10[5] = v18;
      *((_BYTE *)v10 + 48) = *((_BYTE *)v11 + 48);
      v19 = v11[8];
      v10[7] = v11[7];
      v10[8] = v19;
      *((_DWORD *)v10 + 18) = *((_DWORD *)v11 + 18);
      v20 = *(int *)(RangeVar + 40);
      v48 = v7;
      v21 = (char *)v10 + v20;
      v44 = (char *)v11 + v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v22 = v21;
      v7 = v48;
      v47(v22, v44, v48);
      v23 = *(int *)(RangeVar + 44);
      v24 = (_QWORD *)((char *)v10 + v23);
      v25 = (_QWORD *)((char *)v11 + v23);
      Alias = type metadata accessor for PgQuery_Alias(0);
      v27 = *(_QWORD *)(Alias - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, Alias))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        v29 = v25[1];
        *v24 = *v25;
        v24[1] = v29;
        v24[2] = v25[2];
        v30 = *(int *)(Alias + 24);
        v45 = (char *)v24 + v30;
        v31 = (char *)v25 + v30;
        swift_bridgeObjectRetain();
        v7 = v48;
        swift_bridgeObjectRetain();
        v47(v45, v31, v48);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, Alias);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v10, 0, 1, RangeVar);
      v8 = v47;
    }
    v32 = *(int *)(a3 + 24);
    v33 = (uint64_t *)((char *)a1 + v32);
    v34 = (uint64_t *)((char *)a2 + v32);
    PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
    v36 = *(_QWORD *)(PartitionBoundSpec - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v36 + 48))(v34, 1, PartitionBoundSpec))
    {
      v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      v38 = v34[1];
      *v33 = *v34;
      v33[1] = v38;
      *((_BYTE *)v33 + 16) = *((_BYTE *)v34 + 16);
      *(_QWORD *)((char *)v33 + 20) = *(_QWORD *)((char *)v34 + 20);
      v39 = v34[5];
      v33[4] = v34[4];
      v33[5] = v39;
      v33[6] = v34[6];
      *((_DWORD *)v33 + 14) = *((_DWORD *)v34 + 14);
      v40 = *(int *)(PartitionBoundSpec + 48);
      v41 = (char *)v33 + v40;
      v42 = (char *)v34 + v40;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8(v41, v42, v7);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, PartitionBoundSpec);
    }
  }
  return a1;
}

uint64_t destroy for PgQuery_PartitionCmd(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t RangeVar;
  uint64_t v7;
  uint64_t Alias;
  uint64_t v9;
  uint64_t PartitionBoundSpec;
  uint64_t result;
  void (*v12)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v12(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 48))(v5, 1, RangeVar))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12(v5 + *(int *)(RangeVar + 40), v4);
    v7 = v5 + *(int *)(RangeVar + 44);
    Alias = type metadata accessor for PgQuery_Alias(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Alias - 8) + 48))(v7, 1, Alias))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v12(v7 + *(int *)(Alias + 24), v4);
    }
  }
  v9 = a1 + *(int *)(a2 + 24);
  PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(PartitionBoundSpec - 8) + 48))(v9, 1, PartitionBoundSpec);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v9 + *(int *)(PartitionBoundSpec + 48), v4);
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_PartitionCmd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t RangeVar;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t Alias;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t PartitionBoundSpec;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UnknownStorage();
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v46(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v11 = *(_QWORD *)(RangeVar - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1, RangeVar))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v43 = v11;
    v44 = a3;
    v13 = v9[1];
    *v8 = *v9;
    v8[1] = v13;
    v14 = v9[3];
    v8[2] = v9[2];
    v8[3] = v14;
    v15 = v9[5];
    v8[4] = v9[4];
    v8[5] = v15;
    *((_BYTE *)v8 + 48) = *((_BYTE *)v9 + 48);
    v16 = v9[8];
    v8[7] = v9[7];
    v8[8] = v16;
    *((_DWORD *)v8 + 18) = *((_DWORD *)v9 + 18);
    v17 = *(int *)(RangeVar + 40);
    v18 = (char *)v8 + v17;
    v45 = v6;
    v19 = (char *)v9 + v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20 = v19;
    v6 = v45;
    v46((uint64_t)v18, (uint64_t)v20, v45);
    v21 = *(int *)(RangeVar + 44);
    v22 = (_QWORD *)((char *)v8 + v21);
    v23 = (_QWORD *)((char *)v9 + v21);
    Alias = type metadata accessor for PgQuery_Alias(0);
    v25 = *(_QWORD *)(Alias - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v25 + 48))(v23, 1, Alias))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v27 = v23[1];
      *v22 = *v23;
      v22[1] = v27;
      v22[2] = v23[2];
      v28 = *(int *)(Alias + 24);
      v29 = (char *)v22 + v28;
      v30 = (char *)v23 + v28;
      swift_bridgeObjectRetain();
      v6 = v45;
      swift_bridgeObjectRetain();
      v46((uint64_t)v29, (uint64_t)v30, v45);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, Alias);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v8, 0, 1, RangeVar);
    a3 = v44;
  }
  v31 = *(int *)(a3 + 24);
  v32 = (_QWORD *)(a1 + v31);
  v33 = (_QWORD *)(a2 + v31);
  PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  v35 = *(_QWORD *)(PartitionBoundSpec - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v35 + 48))(v33, 1, PartitionBoundSpec))
  {
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    v37 = v33[1];
    *v32 = *v33;
    v32[1] = v37;
    *((_BYTE *)v32 + 16) = *((_BYTE *)v33 + 16);
    *(_QWORD *)((char *)v32 + 20) = *(_QWORD *)((char *)v33 + 20);
    v38 = v33[5];
    v32[4] = v33[4];
    v32[5] = v38;
    v32[6] = v33[6];
    *((_DWORD *)v32 + 14) = *((_DWORD *)v33 + 14);
    v39 = *(int *)(PartitionBoundSpec + 48);
    v40 = (char *)v32 + v39;
    v41 = (char *)v33 + v39;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v46((uint64_t)v40, (uint64_t)v41, v6);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, PartitionBoundSpec);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_PartitionCmd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t RangeVar;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t Alias;
  uint64_t v35;
  uint64_t (*v36)(_QWORD *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t PartitionBoundSpec;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t, uint64_t);
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UnknownStorage();
  v64 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 24);
  v7(a1, a2, v6);
  v65 = a3;
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v12 = *(_QWORD *)(RangeVar - 8);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, RangeVar);
  v15 = v13(v10, 1, RangeVar);
  v63 = v7;
  if (!v14)
  {
    if (!v15)
    {
      *(_QWORD *)v9 = *(_QWORD *)v10;
      *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
      *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v9 + 32) = *(_QWORD *)(v10 + 32);
      *(_QWORD *)(v9 + 40) = *(_QWORD *)(v10 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v9 + 48) = *(_BYTE *)(v10 + 48);
      *(_QWORD *)(v9 + 56) = *(_QWORD *)(v10 + 56);
      *(_QWORD *)(v9 + 64) = *(_QWORD *)(v10 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v9 + 72) = *(_DWORD *)(v10 + 72);
      v7(v9 + *(int *)(RangeVar + 40), v10 + *(int *)(RangeVar + 40), v6);
      v31 = *(int *)(RangeVar + 44);
      v32 = (_QWORD *)(v9 + v31);
      v33 = (_QWORD *)(v10 + v31);
      Alias = type metadata accessor for PgQuery_Alias(0);
      v35 = *(_QWORD *)(Alias - 8);
      v36 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v35 + 48);
      v37 = v36(v32, 1, Alias);
      v38 = v36(v33, 1, Alias);
      if (v37)
      {
        if (!v38)
        {
          *v32 = *v33;
          v32[1] = v33[1];
          v32[2] = v33[2];
          v39 = *(int *)(Alias + 24);
          v40 = v6;
          v41 = (char *)v32 + v39;
          v42 = (char *)v33 + v39;
          v43 = *(void (**)(char *, char *, uint64_t))(v64 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v44 = v41;
          v6 = v40;
          v43(v44, v42, v40);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, Alias);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v38)
        {
          *v32 = *v33;
          v32[1] = v33[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v32[2] = v33[2];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v7((uint64_t)v32 + *(int *)(Alias + 24), (uint64_t)v33 + *(int *)(Alias + 24), v6);
          goto LABEL_14;
        }
        outlined destroy of PgQuery_Alias((uint64_t)v32, type metadata accessor for PgQuery_Alias);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      v29 = v32;
      v30 = v33;
LABEL_8:
      memcpy(v29, v30, v28);
      goto LABEL_14;
    }
    outlined destroy of PgQuery_Alias(v9, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    v29 = (void *)v9;
    v30 = (const void *)v10;
    goto LABEL_8;
  }
  if (v15)
    goto LABEL_7;
  v61 = a2;
  v62 = a1;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(v10 + 32);
  *(_QWORD *)(v9 + 40) = *(_QWORD *)(v10 + 40);
  *(_BYTE *)(v9 + 48) = *(_BYTE *)(v10 + 48);
  *(_QWORD *)(v9 + 56) = *(_QWORD *)(v10 + 56);
  *(_QWORD *)(v9 + 64) = *(_QWORD *)(v10 + 64);
  *(_DWORD *)(v9 + 72) = *(_DWORD *)(v10 + 72);
  v16 = *(int *)(RangeVar + 40);
  v17 = v9 + v16;
  v18 = v10 + v16;
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20 = v18;
  v21 = v6;
  v19(v17, v20, v6);
  v22 = *(int *)(RangeVar + 44);
  v23 = (_QWORD *)(v9 + v22);
  v24 = (_QWORD *)(v10 + v22);
  v25 = type metadata accessor for PgQuery_Alias(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    *v23 = *v24;
    v23[1] = v24[1];
    v23[2] = v24[2];
    v45 = *(int *)(v25 + 24);
    v46 = (char *)v23 + v45;
    v47 = (char *)v24 + v45;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19((uint64_t)v46, (uint64_t)v47, v21);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  a1 = v62;
  v6 = v21;
  a2 = v61;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, RangeVar);
LABEL_14:
  v48 = *(int *)(v65 + 24);
  v49 = a1 + v48;
  v50 = a2 + v48;
  PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  v52 = *(_QWORD *)(PartitionBoundSpec - 8);
  v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 48);
  v54 = v53(v49, 1, PartitionBoundSpec);
  v55 = v53(v50, 1, PartitionBoundSpec);
  if (!v54)
  {
    if (!v55)
    {
      *(_QWORD *)v49 = *(_QWORD *)v50;
      *(_QWORD *)(v49 + 8) = *(_QWORD *)(v50 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v49 + 16) = *(_BYTE *)(v50 + 16);
      *(_DWORD *)(v49 + 20) = *(_DWORD *)(v50 + 20);
      *(_DWORD *)(v49 + 24) = *(_DWORD *)(v50 + 24);
      *(_QWORD *)(v49 + 32) = *(_QWORD *)(v50 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v49 + 40) = *(_QWORD *)(v50 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v49 + 48) = *(_QWORD *)(v50 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v49 + 56) = *(_DWORD *)(v50 + 56);
      v63(v49 + *(int *)(PartitionBoundSpec + 48), v50 + *(int *)(PartitionBoundSpec + 48), v6);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v49, type metadata accessor for PgQuery_PartitionBoundSpec);
    goto LABEL_19;
  }
  if (v55)
  {
LABEL_19:
    v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
    memcpy((void *)v49, (const void *)v50, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v49 = *(_QWORD *)v50;
  *(_QWORD *)(v49 + 8) = *(_QWORD *)(v50 + 8);
  *(_BYTE *)(v49 + 16) = *(_BYTE *)(v50 + 16);
  *(_DWORD *)(v49 + 20) = *(_DWORD *)(v50 + 20);
  *(_DWORD *)(v49 + 24) = *(_DWORD *)(v50 + 24);
  *(_QWORD *)(v49 + 32) = *(_QWORD *)(v50 + 32);
  *(_QWORD *)(v49 + 40) = *(_QWORD *)(v50 + 40);
  *(_QWORD *)(v49 + 48) = *(_QWORD *)(v50 + 48);
  *(_DWORD *)(v49 + 56) = *(_DWORD *)(v50 + 56);
  v56 = *(int *)(PartitionBoundSpec + 48);
  v57 = v49 + v56;
  v58 = v50 + v56;
  v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v66(v57, v58, v6);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, PartitionBoundSpec);
  return a1;
}

char *initializeWithTake for PgQuery_PartitionCmd(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t RangeVar;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  uint64_t Alias;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t PartitionBoundSpec;
  uint64_t v24;
  uint64_t v25;
  char *__dst;
  uint64_t v28;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v12 = *(_QWORD *)(RangeVar - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, RangeVar))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v28 = a3;
    v14 = *((_OWORD *)v10 + 1);
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *((_OWORD *)v9 + 1) = v14;
    *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
    v9[48] = v10[48];
    *(_OWORD *)(v9 + 56) = *(_OWORD *)(v10 + 56);
    *((_DWORD *)v9 + 18) = *((_DWORD *)v10 + 18);
    v7(&v9[*(int *)(RangeVar + 40)], &v10[*(int *)(RangeVar + 40)], v6);
    v15 = *(int *)(RangeVar + 44);
    __dst = &v9[v15];
    v16 = &v10[v15];
    Alias = type metadata accessor for PgQuery_Alias(0);
    v18 = *(_QWORD *)(Alias - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, Alias))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v16;
      *((_QWORD *)__dst + 2) = *((_QWORD *)v16 + 2);
      v7(&__dst[*(int *)(Alias + 24)], &v16[*(int *)(Alias + 24)], v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, Alias);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, RangeVar);
    a3 = v28;
  }
  v20 = *(int *)(a3 + 24);
  v21 = &a1[v20];
  v22 = &a2[v20];
  PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  v24 = *(_QWORD *)(PartitionBoundSpec - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, PartitionBoundSpec))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v21 = *(_OWORD *)v22;
    v21[16] = v22[16];
    *(_QWORD *)(v21 + 20) = *(_QWORD *)(v22 + 20);
    *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
    *((_QWORD *)v21 + 6) = *((_QWORD *)v22 + 6);
    *((_DWORD *)v21 + 14) = *((_DWORD *)v22 + 14);
    v7(&v21[*(int *)(PartitionBoundSpec + 48)], &v22[*(int *)(PartitionBoundSpec + 48)], v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, PartitionBoundSpec);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_PartitionCmd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t RangeVar;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  int v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t Alias;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t, uint64_t);
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t PartitionBoundSpec;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t);
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  void (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;

  v6 = type metadata accessor for UnknownStorage();
  v52 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 40);
  v7(a1, a2, v6);
  v53 = a3;
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v12 = *(_QWORD *)(RangeVar - 8);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, RangeVar);
  v15 = v13(v10, 1, RangeVar);
  if (!v14)
  {
    if (v15)
    {
      outlined destroy of PgQuery_Alias(v9, type metadata accessor for PgQuery_RangeVar);
      goto LABEL_7;
    }
    v24 = *(_QWORD *)(v10 + 8);
    *(_QWORD *)v9 = *(_QWORD *)v10;
    *(_QWORD *)(v9 + 8) = v24;
    swift_bridgeObjectRelease();
    v25 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
    *(_QWORD *)(v9 + 24) = v25;
    swift_bridgeObjectRelease();
    v26 = *(_QWORD *)(v10 + 40);
    *(_QWORD *)(v9 + 32) = *(_QWORD *)(v10 + 32);
    *(_QWORD *)(v9 + 40) = v26;
    swift_bridgeObjectRelease();
    *(_BYTE *)(v9 + 48) = *(_BYTE *)(v10 + 48);
    v27 = *(_QWORD *)(v10 + 64);
    *(_QWORD *)(v9 + 56) = *(_QWORD *)(v10 + 56);
    *(_QWORD *)(v9 + 64) = v27;
    swift_bridgeObjectRelease();
    *(_DWORD *)(v9 + 72) = *(_DWORD *)(v10 + 72);
    v28 = v7;
    v7(v9 + *(int *)(RangeVar + 40), v10 + *(int *)(RangeVar + 40), v6);
    v29 = *(int *)(RangeVar + 44);
    v30 = (char *)(v9 + v29);
    v31 = (char *)(v10 + v29);
    Alias = type metadata accessor for PgQuery_Alias(0);
    v33 = *(_QWORD *)(Alias - 8);
    v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
    v35 = v34(v30, 1, Alias);
    v36 = v34(v31, 1, Alias);
    if (v35)
    {
      if (!v36)
      {
        *(_OWORD *)v30 = *(_OWORD *)v31;
        *((_QWORD *)v30 + 2) = *((_QWORD *)v31 + 2);
        (*(void (**)(char *, char *, uint64_t))(v52 + 32))(&v30[*(int *)(Alias + 24)], &v31[*(int *)(Alias + 24)], v6);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, Alias);
LABEL_16:
        v7 = v28;
        goto LABEL_17;
      }
    }
    else
    {
      if (!v36)
      {
        v49 = *((_QWORD *)v31 + 1);
        *(_QWORD *)v30 = *(_QWORD *)v31;
        *((_QWORD *)v30 + 1) = v49;
        swift_bridgeObjectRelease();
        *((_QWORD *)v30 + 2) = *((_QWORD *)v31 + 2);
        swift_bridgeObjectRelease();
        v7 = v28;
        v28((uint64_t)&v30[*(int *)(Alias + 24)], (uint64_t)&v31[*(int *)(Alias + 24)], v6);
        goto LABEL_17;
      }
      outlined destroy of PgQuery_Alias((uint64_t)v30, type metadata accessor for PgQuery_Alias);
    }
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_16;
  }
  if (v15)
  {
LABEL_7:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy((void *)v9, (const void *)v10, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_17;
  }
  v16 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v16;
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(_BYTE *)(v9 + 48) = *(_BYTE *)(v10 + 48);
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(v10 + 56);
  *(_DWORD *)(v9 + 72) = *(_DWORD *)(v10 + 72);
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32);
  v51 = v7;
  v50(v9 + *(int *)(RangeVar + 40), v10 + *(int *)(RangeVar + 40), v6);
  v17 = *(int *)(RangeVar + 44);
  v18 = (_QWORD *)(v9 + v17);
  v19 = (_QWORD *)(v10 + v17);
  v20 = type metadata accessor for PgQuery_Alias(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v18 = *(_OWORD *)v19;
    v18[2] = v19[2];
    v50((uint64_t)v18 + *(int *)(v20 + 24), (uint64_t)v19 + *(int *)(v20 + 24), v6);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  v7 = v51;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, RangeVar);
LABEL_17:
  v38 = *(int *)(v53 + 24);
  v39 = a1 + v38;
  v40 = a2 + v38;
  PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  v42 = *(_QWORD *)(PartitionBoundSpec - 8);
  v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
  v44 = v43(v39, 1, PartitionBoundSpec);
  v45 = v43(v40, 1, PartitionBoundSpec);
  if (!v44)
  {
    if (!v45)
    {
      v48 = *(_QWORD *)(v40 + 8);
      *(_QWORD *)v39 = *(_QWORD *)v40;
      *(_QWORD *)(v39 + 8) = v48;
      swift_bridgeObjectRelease();
      *(_BYTE *)(v39 + 16) = *(_BYTE *)(v40 + 16);
      *(_QWORD *)(v39 + 20) = *(_QWORD *)(v40 + 20);
      *(_QWORD *)(v39 + 32) = *(_QWORD *)(v40 + 32);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v39 + 40) = *(_QWORD *)(v40 + 40);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v39 + 48) = *(_QWORD *)(v40 + 48);
      swift_bridgeObjectRelease();
      *(_DWORD *)(v39 + 56) = *(_DWORD *)(v40 + 56);
      v7(v39 + *(int *)(PartitionBoundSpec + 48), v40 + *(int *)(PartitionBoundSpec + 48), v6);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_PartitionBoundSpec);
    goto LABEL_22;
  }
  if (v45)
  {
LABEL_22:
    v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
    memcpy((void *)v39, (const void *)v40, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v39 = *(_OWORD *)v40;
  *(_BYTE *)(v39 + 16) = *(_BYTE *)(v40 + 16);
  *(_QWORD *)(v39 + 20) = *(_QWORD *)(v40 + 20);
  *(_OWORD *)(v39 + 32) = *(_OWORD *)(v40 + 32);
  *(_QWORD *)(v39 + 48) = *(_QWORD *)(v40 + 48);
  *(_DWORD *)(v39 + 56) = *(_DWORD *)(v40 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v39 + *(int *)(PartitionBoundSpec + 48), v40 + *(int *)(PartitionBoundSpec + 48), v6);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, PartitionBoundSpec);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_PartitionCmd()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA61338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for PgQuery_PartitionCmd()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA613E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for PgQuery_PartitionCmd()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_PartitionBoundSpec?, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionBoundSpec);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for PgQuery_PartitionRangeDatum()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_PartitionRangeDatum()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_PartitionElem()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_PartitionElem()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_TriggerTransition(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    v6 = *(int *)(a3 + 28);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t initializeWithCopy for PgQuery_TriggerTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_TriggerTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_TriggerTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_TriggerTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_TriggerTransition()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_TriggerTransition()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_TriggerTransition()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

uint64_t getEnumTagSinglePayload for PgQuery_CommonTableExpr()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CommonTableExpr()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_XmlSerialize()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_XmlSerialize()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_RowMarkClause(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_QWORD *)(a1 + 24) = a2[3];
    v5 = *(int *)(a3 + 32);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 16);
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t initializeWithCopy for PgQuery_RowMarkClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v4 = *(int *)(a3 + 32);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for PgQuery_RowMarkClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v6 = *(int *)(a3 + 32);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_RowMarkClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v4 = *(int *)(a3 + 32);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_RowMarkClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(int *)(a3 + 32);
  v5 = a2 + v4;
  v6 = a1 + v4;
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v6, v5, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_RowMarkClause()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA61B48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 33);
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_RowMarkClause()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA61BD0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 33) = a2 + 1;
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_RowMarkClause()
{
  return type metadata completion function for PgQuery_InlineCodeBlock();
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_LockingClause(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v5 = a1;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v6 = *(int *)(a3 + 28);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t initializeWithCopy for PgQuery_LockingClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_LockingClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

uint64_t initializeWithTake for PgQuery_LockingClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PgQuery_LockingClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_LockingClause()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_LockingClause()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_LockingClause()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

uint64_t getEnumTagSinglePayload for PgQuery_FunctionParameter()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_FunctionParameter()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_TableLikeClause(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t RangeVar;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t Alias;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = *(int *)(a3 + 28);
    v13 = (uint64_t *)((char *)v4 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    RangeVar = type metadata accessor for PgQuery_RangeVar(0);
    v16 = *(_QWORD *)(RangeVar - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RangeVar))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v37 = v16;
      v38 = v11;
      v19 = v14[1];
      *v13 = *v14;
      v13[1] = v19;
      v20 = v14[3];
      v13[2] = v14[2];
      v13[3] = v20;
      v21 = v14[5];
      v13[4] = v14[4];
      v13[5] = v21;
      *((_BYTE *)v13 + 48) = *((_BYTE *)v14 + 48);
      v22 = v14[8];
      v13[7] = v14[7];
      v13[8] = v22;
      *((_DWORD *)v13 + 18) = *((_DWORD *)v14 + 18);
      v23 = *(int *)(RangeVar + 40);
      v24 = (char *)v13 + v23;
      v25 = (char *)v14 + v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38(v24, v25, v10);
      v26 = *(int *)(RangeVar + 44);
      v27 = (_QWORD *)((char *)v13 + v26);
      v28 = (_QWORD *)((char *)v14 + v26);
      Alias = type metadata accessor for PgQuery_Alias(0);
      v30 = *(_QWORD *)(Alias - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v30 + 48))(v28, 1, Alias))
      {
        v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        v32 = v28[1];
        *v27 = *v28;
        v27[1] = v32;
        v27[2] = v28[2];
        v33 = *(int *)(Alias + 24);
        v34 = (char *)v27 + v33;
        v35 = (char *)v28 + v33;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v38(v34, v35, v10);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, Alias);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v13, 0, 1, RangeVar);
    }
  }
  return v4;
}

_QWORD *initializeWithCopy for PgQuery_TableLikeClause(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t RangeVar;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t Alias;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v15 = *(_QWORD *)(RangeVar - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v35 = v15;
    v36 = v10;
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v18 = v13[3];
    v12[2] = v13[2];
    v12[3] = v18;
    v19 = v13[5];
    v12[4] = v13[4];
    v12[5] = v19;
    *((_BYTE *)v12 + 48) = *((_BYTE *)v13 + 48);
    v20 = v13[8];
    v12[7] = v13[7];
    v12[8] = v20;
    *((_DWORD *)v12 + 18) = *((_DWORD *)v13 + 18);
    v21 = *(int *)(RangeVar + 40);
    v22 = (char *)v12 + v21;
    v23 = (char *)v13 + v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36(v22, v23, v9);
    v24 = *(int *)(RangeVar + 44);
    v25 = (_QWORD *)((char *)v12 + v24);
    v26 = (_QWORD *)((char *)v13 + v24);
    Alias = type metadata accessor for PgQuery_Alias(0);
    v28 = *(_QWORD *)(Alias - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, Alias))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      v30 = v26[1];
      *v25 = *v26;
      v25[1] = v30;
      v25[2] = v26[2];
      v31 = *(int *)(Alias + 24);
      v32 = (char *)v25 + v31;
      v33 = (char *)v26 + v31;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v36(v32, v33, v9);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, Alias);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v12, 0, 1, RangeVar);
  }
  return a1;
}

_DWORD *assignWithCopy for PgQuery_TableLikeClause(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t RangeVar;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t Alias;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v46;
  char *v47;
  char *v48;
  void (*v49)(char *, char *, uint64_t);

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = (uint64_t)a1 + v12;
  v14 = (char *)a2 + v12;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v16 = *(_QWORD *)(RangeVar - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, RangeVar);
  v18 = v17((uint64_t)v14, 1, RangeVar);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *(_QWORD *)(v13 + 8) = *((_QWORD *)v14 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
      *(_QWORD *)(v13 + 24) = *((_QWORD *)v14 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v13 + 32) = *((_QWORD *)v14 + 4);
      *(_QWORD *)(v13 + 40) = *((_QWORD *)v14 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v13 + 48) = v14[48];
      *(_QWORD *)(v13 + 56) = *((_QWORD *)v14 + 7);
      *(_QWORD *)(v13 + 64) = *((_QWORD *)v14 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 72) = *((_DWORD *)v14 + 18);
      v11((char *)(v13 + *(int *)(RangeVar + 40)), &v14[*(int *)(RangeVar + 40)], v9);
      v31 = *(int *)(RangeVar + 44);
      v32 = (char *)(v13 + v31);
      v33 = &v14[v31];
      Alias = type metadata accessor for PgQuery_Alias(0);
      v35 = *(_QWORD *)(Alias - 8);
      v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
      v37 = v36(v32, 1, Alias);
      v38 = v36(v33, 1, Alias);
      if (v37)
      {
        if (!v38)
        {
          *(_QWORD *)v32 = *(_QWORD *)v33;
          *((_QWORD *)v32 + 1) = *((_QWORD *)v33 + 1);
          *((_QWORD *)v32 + 2) = *((_QWORD *)v33 + 2);
          v39 = *(int *)(Alias + 24);
          v40 = &v32[v39];
          v41 = &v33[v39];
          v42 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v42(v40, v41, v9);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v38)
        {
          *(_QWORD *)v32 = *(_QWORD *)v33;
          *((_QWORD *)v32 + 1) = *((_QWORD *)v33 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *((_QWORD *)v32 + 2) = *((_QWORD *)v33 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v11(&v32[*(int *)(Alias + 24)], &v33[*(int *)(Alias + 24)], v9);
          return a1;
        }
        outlined destroy of PgQuery_Alias((uint64_t)v32, type metadata accessor for PgQuery_Alias);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      v29 = v32;
      v30 = v33;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    v29 = (void *)v13;
    v30 = v14;
LABEL_8:
    memcpy(v29, v30, v28);
    return a1;
  }
  if (v18)
    goto LABEL_7;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_QWORD *)(v13 + 8) = *((_QWORD *)v14 + 1);
  *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
  *(_QWORD *)(v13 + 24) = *((_QWORD *)v14 + 3);
  *(_QWORD *)(v13 + 32) = *((_QWORD *)v14 + 4);
  *(_QWORD *)(v13 + 40) = *((_QWORD *)v14 + 5);
  *(_BYTE *)(v13 + 48) = v14[48];
  *(_QWORD *)(v13 + 56) = *((_QWORD *)v14 + 7);
  *(_QWORD *)(v13 + 64) = *((_QWORD *)v14 + 8);
  *(_DWORD *)(v13 + 72) = *((_DWORD *)v14 + 18);
  v19 = *(int *)(RangeVar + 40);
  v46 = &v14[v19];
  v48 = (char *)(v13 + v19);
  v20 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = v48;
  v49 = v20;
  v20(v21, v46, v9);
  v22 = *(int *)(RangeVar + 44);
  v23 = (_QWORD *)(v13 + v22);
  v24 = &v14[v22];
  v25 = type metadata accessor for PgQuery_Alias(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    *v23 = *(_QWORD *)v24;
    v23[1] = *((_QWORD *)v24 + 1);
    v23[2] = *((_QWORD *)v24 + 2);
    v43 = *(int *)(v25 + 24);
    v47 = (char *)v23 + v43;
    v44 = &v24[v43];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v49(v47, v44, v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RangeVar);
  return a1;
}

_QWORD *initializeWithTake for PgQuery_TableLikeClause(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t RangeVar;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t Alias;
  uint64_t v22;
  uint64_t v23;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_OWORD *)((char *)a1 + v11);
  v13 = (_OWORD *)((char *)a2 + v11);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v15 = *(_QWORD *)(RangeVar - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v12[2] = v13[2];
    *((_BYTE *)v12 + 48) = *((_BYTE *)v13 + 48);
    *(_OWORD *)((char *)v12 + 56) = *(_OWORD *)((char *)v13 + 56);
    *((_DWORD *)v12 + 18) = *((_DWORD *)v13 + 18);
    v10((char *)v12 + *(int *)(RangeVar + 40), (char *)v13 + *(int *)(RangeVar + 40), v9);
    v18 = *(int *)(RangeVar + 44);
    v19 = (_QWORD *)((char *)v12 + v18);
    v20 = (_QWORD *)((char *)v13 + v18);
    Alias = type metadata accessor for PgQuery_Alias(0);
    v22 = *(_QWORD *)(Alias - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, Alias))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v19 = *(_OWORD *)v20;
      v19[2] = v20[2];
      v10((char *)v19 + *(int *)(Alias + 24), (char *)v20 + *(int *)(Alias + 24), v9);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, Alias);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  }
  return a1;
}

_QWORD *assignWithTake for PgQuery_TableLikeClause(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t RangeVar;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  __int128 v19;
  void (*v20)(uint64_t, char *, uint64_t);
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t Alias;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v43;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = (uint64_t)a1 + v12;
  v14 = (char *)a2 + v12;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v16 = *(_QWORD *)(RangeVar - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, RangeVar);
  v18 = v17((uint64_t)v14, 1, RangeVar);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v30 = *((_QWORD *)v14 + 1);
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *(_QWORD *)(v13 + 8) = v30;
      swift_bridgeObjectRelease();
      v31 = *((_QWORD *)v14 + 3);
      *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
      *(_QWORD *)(v13 + 24) = v31;
      swift_bridgeObjectRelease();
      v32 = *((_QWORD *)v14 + 5);
      *(_QWORD *)(v13 + 32) = *((_QWORD *)v14 + 4);
      *(_QWORD *)(v13 + 40) = v32;
      swift_bridgeObjectRelease();
      *(_BYTE *)(v13 + 48) = v14[48];
      v33 = *((_QWORD *)v14 + 8);
      *(_QWORD *)(v13 + 56) = *((_QWORD *)v14 + 7);
      *(_QWORD *)(v13 + 64) = v33;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 72) = *((_DWORD *)v14 + 18);
      v11((char *)(v13 + *(int *)(RangeVar + 40)), &v14[*(int *)(RangeVar + 40)], v9);
      v34 = *(int *)(RangeVar + 44);
      v35 = v13 + v34;
      v36 = &v14[v34];
      Alias = type metadata accessor for PgQuery_Alias(0);
      v38 = *(_QWORD *)(Alias - 8);
      v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
      v40 = v39(v35, 1, Alias);
      v41 = v39((uint64_t)v36, 1, Alias);
      if (v40)
      {
        if (!v41)
        {
          *(_OWORD *)v35 = *(_OWORD *)v36;
          *(_QWORD *)(v35 + 16) = *((_QWORD *)v36 + 2);
          (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v35 + *(int *)(Alias + 24), &v36[*(int *)(Alias + 24)], v9);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v41)
        {
          v43 = *((_QWORD *)v36 + 1);
          *(_QWORD *)v35 = *(_QWORD *)v36;
          *(_QWORD *)(v35 + 8) = v43;
          swift_bridgeObjectRelease();
          *(_QWORD *)(v35 + 16) = *((_QWORD *)v36 + 2);
          swift_bridgeObjectRelease();
          v11((char *)(v35 + *(int *)(Alias + 24)), &v36[*(int *)(Alias + 24)], v9);
          return a1;
        }
        outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Alias);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      v28 = (void *)v35;
      v29 = v36;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    v28 = (void *)v13;
    v29 = v14;
LABEL_8:
    memcpy(v28, v29, v27);
    return a1;
  }
  if (v18)
    goto LABEL_7;
  v19 = *((_OWORD *)v14 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v19;
  *(_OWORD *)(v13 + 32) = *((_OWORD *)v14 + 2);
  *(_BYTE *)(v13 + 48) = v14[48];
  *(_OWORD *)(v13 + 56) = *(_OWORD *)(v14 + 56);
  *(_DWORD *)(v13 + 72) = *((_DWORD *)v14 + 18);
  v20 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
  v20(v13 + *(int *)(RangeVar + 40), &v14[*(int *)(RangeVar + 40)], v9);
  v21 = *(int *)(RangeVar + 44);
  v22 = (_QWORD *)(v13 + v21);
  v23 = &v14[v21];
  v24 = type metadata accessor for PgQuery_Alias(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v22 = *(_OWORD *)v23;
    v22[2] = *((_QWORD *)v23 + 2);
    v20((uint64_t)v22 + *(int *)(v24 + 24), &v23[*(int *)(v24 + 24)], v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RangeVar);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_TableLikeClause()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA62D4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(int *)(a3 + 24);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = *(int *)(a3 + 28);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for PgQuery_TableLikeClause()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA62DCC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(int *)(a4 + 24);
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = *(int *)(a4 + 28);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void type metadata completion function for PgQuery_TableLikeClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for PgQuery_VacuumRelation(a1, a2, a3, MEMORY[0x1E0DE9D30] + 64, MEMORY[0x1E0DE9D30] + 64, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_CreateOpClassItem(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t ObjectWithArgs;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t TypeName;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v33;
  void (*v34)(char *, char *, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    v8 = a3[8];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[9];
    v14 = (uint64_t *)((char *)v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
    v17 = *(_QWORD *)(ObjectWithArgs - 8);
    v34 = v12;
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, ObjectWithArgs))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v20 = v15[1];
      *v14 = *v15;
      v14[1] = v20;
      *((_BYTE *)v14 + 16) = *((_BYTE *)v15 + 16);
      v21 = *(int *)(ObjectWithArgs + 28);
      v33 = (char *)v14 + v21;
      v22 = (char *)v15 + v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12(v33, v22, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, ObjectWithArgs);
    }
    v23 = a3[10];
    v24 = (uint64_t *)((char *)v4 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    TypeName = type metadata accessor for PgQuery_TypeName(0);
    v27 = *(_QWORD *)(TypeName - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, TypeName))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      *v24 = *v25;
      *((_DWORD *)v24 + 2) = *((_DWORD *)v25 + 2);
      *((_WORD *)v24 + 6) = *((_WORD *)v25 + 6);
      v24[2] = v25[2];
      *((_DWORD *)v24 + 6) = *((_DWORD *)v25 + 6);
      v24[4] = v25[4];
      *((_DWORD *)v24 + 10) = *((_DWORD *)v25 + 10);
      v29 = *(int *)(TypeName + 48);
      v30 = (char *)v24 + v29;
      v31 = (char *)v25 + v29;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v34(v30, v31, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, TypeName);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_CreateOpClassItem(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectWithArgs;
  uint64_t v8;
  uint64_t TypeName;
  uint64_t result;
  void (*v11)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[8];
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + a2[9];
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(ObjectWithArgs - 8) + 48))(v6, 1, ObjectWithArgs))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11(v6 + *(int *)(ObjectWithArgs + 28), v5);
  }
  v8 = a1 + a2[10];
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TypeName - 8) + 48))(v8, 1, TypeName);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8 + *(int *)(TypeName + 48), v5);
  }
  return result;
}

_QWORD *initializeWithCopy for PgQuery_CreateOpClassItem(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t ObjectWithArgs;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t TypeName;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v31;
  void (*v32)(char *, char *, uint64_t);

  *a1 = *a2;
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  v7 = a3[8];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[9];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  v16 = *(_QWORD *)(ObjectWithArgs - 8);
  v32 = v11;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, ObjectWithArgs))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v18 = v14[1];
    *v13 = *v14;
    v13[1] = v18;
    *((_BYTE *)v13 + 16) = *((_BYTE *)v14 + 16);
    v19 = *(int *)(ObjectWithArgs + 28);
    v31 = (char *)v13 + v19;
    v20 = (char *)v14 + v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v31, v20, v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, ObjectWithArgs);
  }
  v21 = a3[10];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v25 = *(_QWORD *)(TypeName - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v25 + 48))(v23, 1, TypeName))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    *v22 = *v23;
    *((_DWORD *)v22 + 2) = *((_DWORD *)v23 + 2);
    *((_WORD *)v22 + 6) = *((_WORD *)v23 + 6);
    v22[2] = v23[2];
    *((_DWORD *)v22 + 6) = *((_DWORD *)v23 + 6);
    v22[4] = v23[4];
    *((_DWORD *)v22 + 10) = *((_DWORD *)v23 + 10);
    v27 = *(int *)(TypeName + 48);
    v28 = (char *)v22 + v27;
    v29 = (char *)v23 + v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v32(v28, v29, v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, TypeName);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_CreateOpClassItem(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectWithArgs;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t TypeName;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[8];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v38 = *(_QWORD *)(v9 - 8);
  v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 24);
  v37(v7, v8, v9);
  v10 = a3[9];
  v11 = a1 + v10;
  v12 = a2 + v10;
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  v14 = *(_QWORD *)(ObjectWithArgs - 8);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, ObjectWithArgs);
  v17 = v15(v12, 1, ObjectWithArgs);
  if (v16)
  {
    if (!v17)
    {
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 + 8);
      *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
      v18 = *(int *)(ObjectWithArgs + 28);
      v19 = v11 + v18;
      v20 = v12 + v18;
      v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v36(v19, v20, v9);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, ObjectWithArgs);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of PgQuery_Alias(v11, type metadata accessor for PgQuery_ObjectWithArgs);
LABEL_6:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy((void *)v11, (const void *)v12, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v11 = *(_QWORD *)v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
  v37(v11 + *(int *)(ObjectWithArgs + 28), v12 + *(int *)(ObjectWithArgs + 28), v9);
LABEL_7:
  v22 = a3[10];
  v23 = a1 + v22;
  v24 = a2 + v22;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v26 = *(_QWORD *)(TypeName - 8);
  v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  v28 = v27(v23, 1, TypeName);
  v29 = v27(v24, 1, TypeName);
  if (!v28)
  {
    if (!v29)
    {
      *(_QWORD *)v23 = *(_QWORD *)v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v23 + 8) = *(_DWORD *)(v24 + 8);
      *(_BYTE *)(v23 + 12) = *(_BYTE *)(v24 + 12);
      *(_BYTE *)(v23 + 13) = *(_BYTE *)(v24 + 13);
      *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v23 + 24) = *(_DWORD *)(v24 + 24);
      *(_QWORD *)(v23 + 32) = *(_QWORD *)(v24 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v23 + 40) = *(_DWORD *)(v24 + 40);
      v37(v23 + *(int *)(TypeName + 48), v24 + *(int *)(TypeName + 48), v9);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v23, type metadata accessor for PgQuery_TypeName);
    goto LABEL_12;
  }
  if (v29)
  {
LABEL_12:
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy((void *)v23, (const void *)v24, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_DWORD *)(v23 + 8) = *(_DWORD *)(v24 + 8);
  *(_BYTE *)(v23 + 12) = *(_BYTE *)(v24 + 12);
  *(_BYTE *)(v23 + 13) = *(_BYTE *)(v24 + 13);
  *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
  *(_DWORD *)(v23 + 24) = *(_DWORD *)(v24 + 24);
  *(_QWORD *)(v23 + 32) = *(_QWORD *)(v24 + 32);
  *(_DWORD *)(v23 + 40) = *(_DWORD *)(v24 + 40);
  v30 = *(int *)(TypeName + 48);
  v31 = v23 + v30;
  v32 = v24 + v30;
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v33(v31, v32, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, TypeName);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateOpClassItem(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  void (*v10)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t ObjectWithArgs;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t TypeName;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = a3[8];
  v7 = (_BYTE *)(a1 + v6);
  v8 = (_BYTE *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[9];
  v12 = (_BYTE *)(a1 + v11);
  v13 = (_BYTE *)(a2 + v11);
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  v15 = *(_QWORD *)(ObjectWithArgs - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v13, 1, ObjectWithArgs))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v12 = *(_OWORD *)v13;
    v12[16] = v13[16];
    v10(&v12[*(int *)(ObjectWithArgs + 28)], &v13[*(int *)(ObjectWithArgs + 28)], v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, ObjectWithArgs);
  }
  v17 = a3[10];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v21 = *(_QWORD *)(TypeName - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, TypeName))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *v18 = *v19;
    *((_DWORD *)v18 + 2) = *((_DWORD *)v19 + 2);
    *((_WORD *)v18 + 6) = *((_WORD *)v19 + 6);
    v18[2] = v19[2];
    *((_DWORD *)v18 + 6) = *((_DWORD *)v19 + 6);
    v18[4] = v19[4];
    *((_DWORD *)v18 + 10) = *((_DWORD *)v19 + 10);
    v10((_BYTE *)v18 + *(int *)(TypeName + 48), (_BYTE *)v19 + *(int *)(TypeName + 48), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, TypeName);
  }
  return a1;
}

_QWORD *assignWithTake for PgQuery_CreateOpClassItem(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t ObjectWithArgs;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t TypeName;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v6 = a3[8];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v30 = *(_QWORD *)(v9 - 8);
  v29 = *(void (**)(char *, char *, uint64_t))(v30 + 40);
  v29(v7, v8, v9);
  v10 = a3[9];
  v11 = (uint64_t)a1 + v10;
  v12 = (char *)a2 + v10;
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  v14 = *(_QWORD *)(ObjectWithArgs - 8);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, ObjectWithArgs);
  v17 = v15((uint64_t)v12, 1, ObjectWithArgs);
  if (v16)
  {
    if (!v17)
    {
      *(_OWORD *)v11 = *(_OWORD *)v12;
      *(_BYTE *)(v11 + 16) = v12[16];
      (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v11 + *(int *)(ObjectWithArgs + 28), &v12[*(int *)(ObjectWithArgs + 28)], v9);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, ObjectWithArgs);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of PgQuery_Alias(v11, type metadata accessor for PgQuery_ObjectWithArgs);
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy((void *)v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v11 = *(_QWORD *)v12;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v11 + 8) = *((_QWORD *)v12 + 1);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v11 + 16) = v12[16];
  v29((char *)(v11 + *(int *)(ObjectWithArgs + 28)), &v12[*(int *)(ObjectWithArgs + 28)], v9);
LABEL_7:
  v19 = a3[10];
  v20 = (uint64_t)a1 + v19;
  v21 = (char *)a2 + v19;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v23 = *(_QWORD *)(TypeName - 8);
  v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, TypeName);
  v26 = v24((uint64_t)v21, 1, TypeName);
  if (!v25)
  {
    if (!v26)
    {
      *(_QWORD *)v20 = *(_QWORD *)v21;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v20 + 8) = *((_DWORD *)v21 + 2);
      *(_BYTE *)(v20 + 12) = v21[12];
      *(_BYTE *)(v20 + 13) = v21[13];
      *(_QWORD *)(v20 + 16) = *((_QWORD *)v21 + 2);
      swift_bridgeObjectRelease();
      *(_DWORD *)(v20 + 24) = *((_DWORD *)v21 + 6);
      *(_QWORD *)(v20 + 32) = *((_QWORD *)v21 + 4);
      swift_bridgeObjectRelease();
      *(_DWORD *)(v20 + 40) = *((_DWORD *)v21 + 10);
      v29((char *)(v20 + *(int *)(TypeName + 48)), &v21[*(int *)(TypeName + 48)], v9);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v20, type metadata accessor for PgQuery_TypeName);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy((void *)v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_DWORD *)(v20 + 8) = *((_DWORD *)v21 + 2);
  *(_WORD *)(v20 + 12) = *((_WORD *)v21 + 6);
  *(_QWORD *)(v20 + 16) = *((_QWORD *)v21 + 2);
  *(_DWORD *)(v20 + 24) = *((_DWORD *)v21 + 6);
  *(_QWORD *)(v20 + 32) = *((_QWORD *)v21 + 4);
  *(_DWORD *)(v20 + 40) = *((_DWORD *)v21 + 10);
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v20 + *(int *)(TypeName + 48), &v21[*(int *)(TypeName + 48)], v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, TypeName);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateOpClassItem()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA63CD4(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[8];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[9];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[10];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateOpClassItem()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA63DAC(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[8];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[9];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[10];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for PgQuery_CreateOpClassItem()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_ObjectWithArgs?, (void (*)(uint64_t))type metadata accessor for PgQuery_ObjectWithArgs);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_TypeName?, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for PgQuery_AccessPriv()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_AccessPriv()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_WindowClause()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_WindowClause()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_GroupingSet(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
    v5 = *(int *)(a3 + 28);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for PgQuery_GroupingSet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_GroupingSet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for PgQuery_GroupingSet(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_GroupingSet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_GroupingSet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_GroupingSet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA642A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_GroupingSet()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA64330(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_GroupingSet()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_SortGroupClause(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    *(_WORD *)(a1 + 12) = *((_WORD *)a2 + 6);
    v5 = *(int *)(a3 + 36);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for PgQuery_SortGroupClause(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 36);
  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t initializeWithCopy for PgQuery_SortGroupClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  v4 = *(int *)(a3 + 36);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for PgQuery_SortGroupClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  v4 = *(int *)(a3 + 36);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for PgQuery_SortGroupClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  v4 = *(int *)(a3 + 36);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_SortGroupClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  v4 = *(int *)(a3 + 36);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_SortGroupClause()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA6466C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 12);
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_SortGroupClause()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA646F4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 12) = a2 + 1;
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_SortGroupClause()
{
  return type metadata completion function for PgQuery_SortGroupClause();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PgQuery_WithCheckOption()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_WithCheckOption()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_RangeTblFunction()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_RangeTblFunction()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_RangeTblEntry()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_RangeTblEntry()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_DefElem()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_DefElem()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_Constraint()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_Constraint()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_IndexElem()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_IndexElem()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_ColumnDef()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_ColumnDef()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_RangeTableFuncCol()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_RangeTableFuncCol()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_RangeTableFunc()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_RangeTableFunc()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_RangeTableSample()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_RangeTableSample()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_RangeFunction(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t Alias;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_WORD *)(a1 + 1) = *(_WORD *)((char *)a2 + 1);
    v7 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v7;
    v8 = *(int *)(a3 + 36);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 40);
    v14 = (_QWORD *)((char *)v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    Alias = type metadata accessor for PgQuery_Alias(0);
    v17 = *(_QWORD *)(Alias - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, Alias))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v20 = v15[1];
      *v14 = *v15;
      v14[1] = v20;
      v14[2] = v15[2];
      v21 = *(int *)(Alias + 24);
      v22 = (char *)v14 + v21;
      v23 = (char *)v15 + v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12((uint64_t)v22, (uint64_t)v23, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, Alias);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_RangeFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Alias;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 40);
  Alias = type metadata accessor for PgQuery_Alias(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Alias - 8) + 48))(v6, 1, Alias);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(Alias + 24), v5);
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_RangeFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t Alias;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(int *)(a3 + 36);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 40);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  Alias = type metadata accessor for PgQuery_Alias(0);
  v16 = *(_QWORD *)(Alias - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, Alias))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v18 = v14[1];
    *v13 = *v14;
    v13[1] = v18;
    v13[2] = v14[2];
    v19 = *(int *)(Alias + 24);
    v20 = (char *)v13 + v19;
    v21 = (char *)v14 + v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11((uint64_t)v20, (uint64_t)v21, v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, Alias);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_RangeFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t Alias;
  uint64_t v16;
  uint64_t (*v17)(_QWORD *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 36);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 40);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  Alias = type metadata accessor for PgQuery_Alias(0);
  v16 = *(_QWORD *)(Alias - 8);
  v17 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, Alias);
  v18 = v17(v14, 1, Alias);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *v13 = *v14;
      v13[1] = v14[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v13[2] = v14[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v11((uint64_t)v13 + *(int *)(Alias + 24), (uint64_t)v14 + *(int *)(Alias + 24), v9);
      return a1;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v13, type metadata accessor for PgQuery_Alias);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  *v13 = *v14;
  v13[1] = v14[1];
  v13[2] = v14[2];
  v19 = *(int *)(Alias + 24);
  v20 = (char *)v13 + v19;
  v21 = (char *)v14 + v19;
  v22 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22(v20, v21, v9);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, Alias);
  return a1;
}

uint64_t initializeWithTake for PgQuery_RangeFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t Alias;
  uint64_t v15;
  uint64_t v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 36);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 40);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  Alias = type metadata accessor for PgQuery_Alias(0);
  v15 = *(_QWORD *)(Alias - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, Alias))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v12 = *(_OWORD *)v13;
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(Alias + 24), (char *)v13 + *(int *)(Alias + 24), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, Alias);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_RangeFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t Alias;
  uint64_t v16;
  uint64_t (*v17)(_QWORD *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v21;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 36);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 40);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  Alias = type metadata accessor for PgQuery_Alias(0);
  v16 = *(_QWORD *)(Alias - 8);
  v17 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, Alias);
  v18 = v17(v14, 1, Alias);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v21 = v14[1];
      *v13 = *v14;
      v13[1] = v21;
      swift_bridgeObjectRelease();
      v13[2] = v14[2];
      swift_bridgeObjectRelease();
      v11((uint64_t)v13 + *(int *)(Alias + 24), (uint64_t)v14 + *(int *)(Alias + 24), v9);
      return a1;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v13, type metadata accessor for PgQuery_Alias);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v13 = *(_OWORD *)v14;
  v13[2] = v14[2];
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v13 + *(int *)(Alias + 24), (char *)v14 + *(int *)(Alias + 24), v9);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, Alias);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_RangeFunction()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA65114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_113Tm(a1, a2, a3, &demangling cache variable for type metadata for PgQuery_Alias?);
}

uint64_t storeEnumTagSinglePayload for PgQuery_RangeFunction()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA6512C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_114Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for PgQuery_Alias?);
}

void type metadata completion function for PgQuery_RangeFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for PgQuery_RangeFunction(a1, a2, a3, (uint64_t)&unk_18DC0F570, &lazy cache variable for type metadata for PgQuery_Alias?, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
}

uint64_t getEnumTagSinglePayload for PgQuery_RangeSubselect()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_RangeSubselect()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_SortBy()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_SortBy()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_TypeCast()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_TypeCast()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_MultiAssignRef()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_MultiAssignRef()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_ResTarget()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_ResTarget()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_A_ArrayExpr()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_A_ArrayExpr()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_A_ArrayExpr()
{
  return type metadata completion function for PgQuery_Alias();
}

uint64_t getEnumTagSinglePayload for PgQuery_A_Indirection()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_A_Indirection()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_A_Indices()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_A_Indices()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_A_Const()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_A_Const()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_ParamRef(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 24);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for PgQuery_ParamRef(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 24);
  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_QWORD *initializeWithCopy for PgQuery_ParamRef(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithCopy for PgQuery_ParamRef(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_QWORD *initializeWithTake for PgQuery_ParamRef(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for PgQuery_ParamRef(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_ParamRef()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA654EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for PgQuery_ParamRef()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA65538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata completion function for PgQuery_ParamRef()
{
  return type metadata completion function for PgQuery_Alias();
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_A_ArrayExpr(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v5 = a1;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    v6 = *(int *)(a3 + 24);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t initializeWithCopy for PgQuery_A_ArrayExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for PgQuery_A_ArrayExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_A_ArrayExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_A_ArrayExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_ColumnRef()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_ColumnRef()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_A_Expr()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_A_Expr()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterStatsStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterStatsStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_AlterStatsStmt()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

uint64_t getEnumTagSinglePayload for PgQuery_CallStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CallStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterCollationStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterCollationStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_CreateStatsStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v6;
    v7 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = a2[5];
    v8 = *(int *)(a3 + 40);
    v9 = (uint64_t)a2 + v8;
    v10 = a1 + v8;
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v10, v9, v11);
  }
  return v5;
}

uint64_t destroy for PgQuery_CreateStatsStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_CreateStatsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(int *)(a3 + 40);
  v8 = a2 + v7;
  v9 = a1 + v7;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v9, v8, v10);
  return a1;
}

uint64_t assignWithCopy for PgQuery_CreateStatsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(int *)(a3 + 40);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateStatsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v5 = *(int *)(a3 + 40);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PgQuery_CreateStatsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = *(int *)(a3 + 40);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateStatsStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateStatsStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_CreateStatsStmt()
{
  return type metadata completion function for PgQuery_CreateStatsStmt();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_DropSubscriptionStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_QWORD *)(a1 + 24) = a2[3];
    v6 = *(int *)(a3 + 28);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for PgQuery_TriggerTransition(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_DropSubscriptionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_DropSubscriptionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_DropSubscriptionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_DropSubscriptionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_DropSubscriptionStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_DropSubscriptionStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_DropSubscriptionStmt()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_AlterSubscriptionStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v5 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v5;
    v6 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v6;
    v7 = a2[7];
    v8 = *(int *)(a3 + 36);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v7;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
  }
  return v3;
}

uint64_t destroy for PgQuery_AlterSubscriptionStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_AlterSubscriptionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(int *)(a3 + 36);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for PgQuery_AlterSubscriptionStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 36);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_AlterSubscriptionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v5 = *(int *)(a3 + 36);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PgQuery_AlterSubscriptionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 36);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterSubscriptionStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA66470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterSubscriptionStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA664F8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_AlterSubscriptionStmt()
{
  return type metadata completion function for PgQuery_SortGroupClause();
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateSubscriptionStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateSubscriptionStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_CreateSubscriptionStmt()
{
  return type metadata completion function for PgQuery_InlineCodeBlock();
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_AlterPublicationStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v6;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_QWORD *)(a1 + 40) = a2[5];
    v7 = *(int *)(a3 + 36);
    v8 = (uint64_t)a2 + v7;
    v9 = a1 + v7;
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v9, v8, v10);
  }
  return v3;
}

uint64_t destroy for PgQuery_AlterPublicationStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_AlterPublicationStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v6 = *(int *)(a3 + 36);
  v7 = a2 + v6;
  v8 = a1 + v6;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v8, v7, v9);
  return a1;
}

uint64_t assignWithCopy for PgQuery_AlterPublicationStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(int *)(a3 + 36);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_AlterPublicationStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v5 = *(int *)(a3 + 36);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PgQuery_AlterPublicationStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = *(int *)(a3 + 36);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterPublicationStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterPublicationStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_AlterPublicationStmt()
{
  return type metadata completion function for PgQuery_SortGroupClause();
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_CreatePublicationStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v6;
    v7 = *(int *)(a3 + 32);
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t destroy for PgQuery_CreatePublicationStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_CreatePublicationStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(int *)(a3 + 32);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

uint64_t assignWithCopy for PgQuery_CreatePublicationStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(int *)(a3 + 32);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreatePublicationStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(int *)(a3 + 32);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PgQuery_CreatePublicationStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(int *)(a3 + 32);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreatePublicationStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreatePublicationStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_CreatePublicationStmt()
{
  return type metadata completion function for PgQuery_InlineCodeBlock();
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_CreateAmStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = *(int *)(a3 + 28);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    a1[4] = a2[4];
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t destroy for PgQuery_CreateAmStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for PgQuery_CreateAmStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  a1[4] = a2[4];
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

_QWORD *assignWithCopy for PgQuery_CreateAmStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateAmStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for PgQuery_CreateAmStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v7 = a2[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 28);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateAmStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateAmStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_CreateAmStmt()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_CreateTransformStmt(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t TypeName;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t ObjectWithArgs;
  uint64_t v27;
  unsigned int (*v28)(_QWORD *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    v8 = a3[6];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[7];
    v14 = (uint64_t *)((char *)v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    TypeName = type metadata accessor for PgQuery_TypeName(0);
    v17 = *(_QWORD *)(TypeName - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, TypeName))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *v14 = *v15;
      *((_DWORD *)v14 + 2) = *((_DWORD *)v15 + 2);
      *((_WORD *)v14 + 6) = *((_WORD *)v15 + 6);
      v14[2] = v15[2];
      *((_DWORD *)v14 + 6) = *((_DWORD *)v15 + 6);
      v14[4] = v15[4];
      *((_DWORD *)v14 + 10) = *((_DWORD *)v15 + 10);
      v20 = *(int *)(TypeName + 48);
      v21 = (char *)v14 + v20;
      v22 = (char *)v15 + v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12(v21, v22, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, TypeName);
    }
    v23 = a3[8];
    v24 = (uint64_t *)((char *)v4 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
    v27 = *(_QWORD *)(ObjectWithArgs - 8);
    v28 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v27 + 48);
    if (v28(v25, 1, ObjectWithArgs))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      v44 = v12;
      v45 = v11;
      v30 = v25[1];
      *v24 = *v25;
      v24[1] = v30;
      *((_BYTE *)v24 + 16) = *((_BYTE *)v25 + 16);
      v31 = *(int *)(ObjectWithArgs + 28);
      v32 = (char *)v24 + v31;
      v33 = (char *)v25 + v31;
      swift_bridgeObjectRetain();
      v11 = v45;
      swift_bridgeObjectRetain();
      v34 = v32;
      v12 = v44;
      v44(v34, v33, v45);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, ObjectWithArgs);
    }
    v35 = a3[9];
    v36 = (uint64_t *)((char *)v4 + v35);
    v37 = (uint64_t *)((char *)a2 + v35);
    if (v28(v37, 1, ObjectWithArgs))
    {
      v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      v39 = v37[1];
      *v36 = *v37;
      v36[1] = v39;
      *((_BYTE *)v36 + 16) = *((_BYTE *)v37 + 16);
      v40 = *(int *)(ObjectWithArgs + 28);
      v41 = (char *)v36 + v40;
      v42 = (char *)v37 + v40;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12(v41, v42, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v36, 0, 1, ObjectWithArgs);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_CreateTransformStmt(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t TypeName;
  uint64_t v8;
  uint64_t ObjectWithArgs;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t result;
  void (*v13)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + a2[6];
  v5 = type metadata accessor for UnknownStorage();
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v13(v4, v5);
  v6 = a1 + a2[7];
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TypeName - 8) + 48))(v6, 1, TypeName))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13(v6 + *(int *)(TypeName + 48), v5);
  }
  v8 = a1 + a2[8];
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(ObjectWithArgs - 8) + 48);
  if (!v10(v8, 1, ObjectWithArgs))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13(v8 + *(int *)(ObjectWithArgs + 28), v5);
  }
  v11 = a1 + a2[9];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v10)(v11, 1, ObjectWithArgs);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v13)(v11 + *(int *)(ObjectWithArgs + 28), v5);
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_CreateTransformStmt(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t TypeName;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t ObjectWithArgs;
  uint64_t v25;
  unsigned int (*v26)(_QWORD *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[7];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v16 = *(_QWORD *)(TypeName - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, TypeName))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    *((_DWORD *)v13 + 2) = *((_DWORD *)v14 + 2);
    *((_WORD *)v13 + 6) = *((_WORD *)v14 + 6);
    v13[2] = v14[2];
    *((_DWORD *)v13 + 6) = *((_DWORD *)v14 + 6);
    v13[4] = v14[4];
    *((_DWORD *)v13 + 10) = *((_DWORD *)v14 + 10);
    v18 = *(int *)(TypeName + 48);
    v19 = (char *)v13 + v18;
    v20 = (char *)v14 + v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11((uint64_t)v19, (uint64_t)v20, v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, TypeName);
  }
  v21 = a3[8];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (_QWORD *)(a2 + v21);
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  v25 = *(_QWORD *)(ObjectWithArgs - 8);
  v26 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v25 + 48);
  if (v26(v23, 1, ObjectWithArgs))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v42 = v11;
    v43 = v10;
    v28 = v23[1];
    *v22 = *v23;
    v22[1] = v28;
    *((_BYTE *)v22 + 16) = *((_BYTE *)v23 + 16);
    v29 = *(int *)(ObjectWithArgs + 28);
    v30 = (char *)v22 + v29;
    v31 = (char *)v23 + v29;
    swift_bridgeObjectRetain();
    v10 = v43;
    swift_bridgeObjectRetain();
    v32 = v30;
    v11 = v42;
    v42((uint64_t)v32, (uint64_t)v31, v43);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, ObjectWithArgs);
  }
  v33 = a3[9];
  v34 = (_QWORD *)(a1 + v33);
  v35 = (_QWORD *)(a2 + v33);
  if (v26(v35, 1, ObjectWithArgs))
  {
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    v37 = v35[1];
    *v34 = *v35;
    v34[1] = v37;
    *((_BYTE *)v34 + 16) = *((_BYTE *)v35 + 16);
    v38 = *(int *)(ObjectWithArgs + 28);
    v39 = (char *)v34 + v38;
    v40 = (char *)v35 + v38;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11((uint64_t)v39, (uint64_t)v40, v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v34, 0, 1, ObjectWithArgs);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_CreateTransformStmt(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t TypeName;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ObjectWithArgs;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  void (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v52 = *(_QWORD *)(v9 - 8);
  v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 24);
  v51(v7, v8, v9);
  v10 = a3[7];
  v11 = a1 + v10;
  v12 = a2 + v10;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v14 = *(_QWORD *)(TypeName - 8);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, TypeName);
  v17 = v15(v12, 1, TypeName);
  if (v16)
  {
    if (!v17)
    {
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 + 8);
      *(_BYTE *)(v11 + 12) = *(_BYTE *)(v12 + 12);
      *(_BYTE *)(v11 + 13) = *(_BYTE *)(v12 + 13);
      *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
      *(_DWORD *)(v11 + 24) = *(_DWORD *)(v12 + 24);
      *(_QWORD *)(v11 + 32) = *(_QWORD *)(v12 + 32);
      *(_DWORD *)(v11 + 40) = *(_DWORD *)(v12 + 40);
      v18 = *(int *)(TypeName + 48);
      v49 = v9;
      v19 = v11 + v18;
      v20 = v12 + v18;
      v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v21 = v19;
      v9 = v49;
      v47(v21, v20, v49);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, TypeName);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of PgQuery_Alias(v11, type metadata accessor for PgQuery_TypeName);
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy((void *)v11, (const void *)v12, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v11 = *(_QWORD *)v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 + 8);
  *(_BYTE *)(v11 + 12) = *(_BYTE *)(v12 + 12);
  *(_BYTE *)(v11 + 13) = *(_BYTE *)(v12 + 13);
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v11 + 24) = *(_DWORD *)(v12 + 24);
  *(_QWORD *)(v11 + 32) = *(_QWORD *)(v12 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v11 + 40) = *(_DWORD *)(v12 + 40);
  v51(v11 + *(int *)(TypeName + 48), v12 + *(int *)(TypeName + 48), v9);
LABEL_7:
  v23 = a3[8];
  v24 = a1 + v23;
  v25 = a2 + v23;
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  v27 = *(_QWORD *)(ObjectWithArgs - 8);
  v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 1, ObjectWithArgs);
  v30 = v28(v25, 1, ObjectWithArgs);
  if (v29)
  {
    if (!v30)
    {
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *(_QWORD *)(v24 + 8) = *(_QWORD *)(v25 + 8);
      *(_BYTE *)(v24 + 16) = *(_BYTE *)(v25 + 16);
      v31 = *(int *)(ObjectWithArgs + 28);
      v50 = v27;
      v32 = v24 + v31;
      v33 = v25 + v31;
      v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v34 = v32;
      v27 = v50;
      v48(v34, v33, v9);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v50 + 56))(v24, 0, 1, ObjectWithArgs);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    outlined destroy of PgQuery_Alias(v24, type metadata accessor for PgQuery_ObjectWithArgs);
LABEL_12:
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy((void *)v24, (const void *)v25, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_13;
  }
  *(_QWORD *)v24 = *(_QWORD *)v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v24 + 8) = *(_QWORD *)(v25 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v24 + 16) = *(_BYTE *)(v25 + 16);
  v51(v24 + *(int *)(ObjectWithArgs + 28), v25 + *(int *)(ObjectWithArgs + 28), v9);
LABEL_13:
  v36 = a3[9];
  v37 = a1 + v36;
  v38 = a2 + v36;
  v39 = v28(a1 + v36, 1, ObjectWithArgs);
  v40 = v28(v38, 1, ObjectWithArgs);
  if (!v39)
  {
    if (!v40)
    {
      *(_QWORD *)v37 = *(_QWORD *)v38;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v37 + 8) = *(_QWORD *)(v38 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v37 + 16) = *(_BYTE *)(v38 + 16);
      v51(v37 + *(int *)(ObjectWithArgs + 28), v38 + *(int *)(ObjectWithArgs + 28), v9);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v37, type metadata accessor for PgQuery_ObjectWithArgs);
    goto LABEL_18;
  }
  if (v40)
  {
LABEL_18:
    v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy((void *)v37, (const void *)v38, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_QWORD *)(v37 + 8) = *(_QWORD *)(v38 + 8);
  *(_BYTE *)(v37 + 16) = *(_BYTE *)(v38 + 16);
  v41 = *(int *)(ObjectWithArgs + 28);
  v42 = v37 + v41;
  v43 = v38 + v41;
  v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v44(v42, v43, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56))(v37, 0, 1, ObjectWithArgs);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateTransformStmt(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t TypeName;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t ObjectWithArgs;
  uint64_t v21;
  unsigned int (*v22)(_BYTE *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v15 = *(_QWORD *)(TypeName - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, TypeName))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_DWORD *)v12 + 2) = *((_DWORD *)v13 + 2);
    *((_WORD *)v12 + 6) = *((_WORD *)v13 + 6);
    v12[2] = v13[2];
    *((_DWORD *)v12 + 6) = *((_DWORD *)v13 + 6);
    v12[4] = v13[4];
    *((_DWORD *)v12 + 10) = *((_DWORD *)v13 + 10);
    v10((char *)v12 + *(int *)(TypeName + 48), (char *)v13 + *(int *)(TypeName + 48), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, TypeName);
  }
  v17 = a3[8];
  v18 = (_BYTE *)(a1 + v17);
  v19 = (_BYTE *)(a2 + v17);
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  v21 = *(_QWORD *)(ObjectWithArgs - 8);
  v22 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v21 + 48);
  if (v22(v19, 1, ObjectWithArgs))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v18 = *(_OWORD *)v19;
    v18[16] = v19[16];
    v10(&v18[*(int *)(ObjectWithArgs + 28)], &v19[*(int *)(ObjectWithArgs + 28)], v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, ObjectWithArgs);
  }
  v24 = a3[9];
  v25 = (_BYTE *)(a1 + v24);
  v26 = (_BYTE *)(a2 + v24);
  if (v22(v26, 1, ObjectWithArgs))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v25 = *(_OWORD *)v26;
    v25[16] = v26[16];
    v10(&v25[*(int *)(ObjectWithArgs + 28)], &v26[*(int *)(ObjectWithArgs + 28)], v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v25, 0, 1, ObjectWithArgs);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_CreateTransformStmt(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t TypeName;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjectWithArgs;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  int v32;
  int v33;
  uint64_t v34;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v37 = *(_QWORD *)(v10 - 8);
  v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 40);
  v36(v8, v9, v10);
  v11 = a3[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v15 = *(_QWORD *)(TypeName - 8);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, TypeName);
  v18 = v16(v13, 1, TypeName);
  if (v17)
  {
    if (!v18)
    {
      *(_QWORD *)v12 = *(_QWORD *)v13;
      *(_DWORD *)(v12 + 8) = *(_DWORD *)(v13 + 8);
      *(_WORD *)(v12 + 12) = *(_WORD *)(v13 + 12);
      *(_QWORD *)(v12 + 16) = *(_QWORD *)(v13 + 16);
      *(_DWORD *)(v12 + 24) = *(_DWORD *)(v13 + 24);
      *(_QWORD *)(v12 + 32) = *(_QWORD *)(v13 + 32);
      *(_DWORD *)(v12 + 40) = *(_DWORD *)(v13 + 40);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v12 + *(int *)(TypeName + 48), v13 + *(int *)(TypeName + 48), v10);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, TypeName);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_TypeName);
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy((void *)v12, (const void *)v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v12 = *(_QWORD *)v13;
  swift_bridgeObjectRelease();
  *(_DWORD *)(v12 + 8) = *(_DWORD *)(v13 + 8);
  *(_BYTE *)(v12 + 12) = *(_BYTE *)(v13 + 12);
  *(_BYTE *)(v12 + 13) = *(_BYTE *)(v13 + 13);
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v13 + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(v12 + 24) = *(_DWORD *)(v13 + 24);
  *(_QWORD *)(v12 + 32) = *(_QWORD *)(v13 + 32);
  swift_bridgeObjectRelease();
  *(_DWORD *)(v12 + 40) = *(_DWORD *)(v13 + 40);
  v36(v12 + *(int *)(TypeName + 48), v13 + *(int *)(TypeName + 48), v10);
LABEL_7:
  v20 = a3[8];
  v21 = a1 + v20;
  v22 = a2 + v20;
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  v24 = *(_QWORD *)(ObjectWithArgs - 8);
  v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, ObjectWithArgs);
  v27 = v25(v22, 1, ObjectWithArgs);
  if (v26)
  {
    if (!v27)
    {
      *(_OWORD *)v21 = *(_OWORD *)v22;
      *(_BYTE *)(v21 + 16) = *(_BYTE *)(v22 + 16);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v21 + *(int *)(ObjectWithArgs + 28), v22 + *(int *)(ObjectWithArgs + 28), v10);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, ObjectWithArgs);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    outlined destroy of PgQuery_Alias(v21, type metadata accessor for PgQuery_ObjectWithArgs);
LABEL_12:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy((void *)v21, (const void *)v22, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  *(_QWORD *)v21 = *(_QWORD *)v22;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v21 + 8) = *(_QWORD *)(v22 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v21 + 16) = *(_BYTE *)(v22 + 16);
  v36(v21 + *(int *)(ObjectWithArgs + 28), v22 + *(int *)(ObjectWithArgs + 28), v10);
LABEL_13:
  v29 = a3[9];
  v30 = (_BYTE *)(a1 + v29);
  v31 = (_BYTE *)(a2 + v29);
  v32 = v25(a1 + v29, 1, ObjectWithArgs);
  v33 = v25((uint64_t)v31, 1, ObjectWithArgs);
  if (!v32)
  {
    if (!v33)
    {
      *(_QWORD *)v30 = *(_QWORD *)v31;
      swift_bridgeObjectRelease();
      *((_QWORD *)v30 + 1) = *((_QWORD *)v31 + 1);
      swift_bridgeObjectRelease();
      v30[16] = v31[16];
      v36((uint64_t)&v30[*(int *)(ObjectWithArgs + 28)], (uint64_t)&v31[*(int *)(ObjectWithArgs + 28)], v10);
      return a1;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v30, type metadata accessor for PgQuery_ObjectWithArgs);
    goto LABEL_18;
  }
  if (v33)
  {
LABEL_18:
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v30 = *(_OWORD *)v31;
  v30[16] = v31[16];
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v37 + 32))(&v30[*(int *)(ObjectWithArgs + 28)], &v31[*(int *)(ObjectWithArgs + 28)], v10);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v30, 0, 1, ObjectWithArgs);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateTransformStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA68374(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[6];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[7];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[8];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateTransformStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA6844C(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[6];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[7];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[8];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for PgQuery_CreateTransformStmt()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_TypeName?, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_ObjectWithArgs?, (void (*)(uint64_t))type metadata accessor for PgQuery_ObjectWithArgs);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterPolicyStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterPolicyStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_CreatePolicyStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreatePolicyStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *initializeBufferWithCopyOfBuffer for PgQuery_AlterSystemStmt(char *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t VariableSetStmt;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, (char *)a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = &a1[v9];
    v11 = (uint64_t *)((char *)a2 + v9);
    VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
    v13 = *(_QWORD *)(VariableSetStmt - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(v11, 1, VariableSetStmt))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v10 = *v11;
      v10[8] = *((_BYTE *)v11 + 8);
      v16 = v11[3];
      *((_QWORD *)v10 + 2) = v11[2];
      *((_QWORD *)v10 + 3) = v16;
      *((_QWORD *)v10 + 4) = v11[4];
      v10[40] = *((_BYTE *)v11 + 40);
      v17 = *(int *)(VariableSetStmt + 32);
      v18 = &v10[v17];
      v19 = (char *)v11 + v17;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8(v18, v19, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, VariableSetStmt);
    }
  }
  return a1;
}

uint64_t destroy for PgQuery_AlterSystemStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t VariableSetStmt;
  uint64_t result;
  void (*v8)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v8(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(VariableSetStmt - 8) + 48))(v5, 1, VariableSetStmt);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5 + *(int *)(VariableSetStmt + 32), v4);
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_AlterSystemStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t VariableSetStmt;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  v12 = *(_QWORD *)(VariableSetStmt - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, VariableSetStmt))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    *v9 = *v10;
    *((_BYTE *)v9 + 8) = *((_BYTE *)v10 + 8);
    v14 = v10[3];
    v9[2] = v10[2];
    v9[3] = v14;
    v9[4] = v10[4];
    *((_BYTE *)v9 + 40) = *((_BYTE *)v10 + 40);
    v15 = *(int *)(VariableSetStmt + 32);
    v16 = (char *)v9 + v15;
    v17 = (char *)v10 + v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7((uint64_t)v16, (uint64_t)v17, v6);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, VariableSetStmt);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_AlterSystemStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t VariableSetStmt;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v24;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  v13 = *(_QWORD *)(VariableSetStmt - 8);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, VariableSetStmt);
  v16 = v14(v11, 1, VariableSetStmt);
  if (!v15)
  {
    if (!v16)
    {
      v24 = *(_QWORD *)v11;
      *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
      *(_QWORD *)v10 = v24;
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
      *(_QWORD *)(v10 + 24) = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v10 + 40) = *(_BYTE *)(v11 + 40);
      v8(v10 + *(int *)(VariableSetStmt + 32), v11 + *(int *)(VariableSetStmt + 32), v6);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v10, type metadata accessor for PgQuery_VariableSetStmt);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    memcpy((void *)v10, (const void *)v11, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    return a1;
  }
  v17 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  *(_QWORD *)v10 = v17;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
  *(_QWORD *)(v10 + 24) = *(_QWORD *)(v11 + 24);
  *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);
  *(_BYTE *)(v10 + 40) = *(_BYTE *)(v11 + 40);
  v18 = *(int *)(VariableSetStmt + 32);
  v19 = v10 + v18;
  v20 = v11 + v18;
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21(v19, v20, v6);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, VariableSetStmt);
  return a1;
}

char *initializeWithTake for PgQuery_AlterSystemStmt(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t VariableSetStmt;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  v12 = *(_QWORD *)(VariableSetStmt - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, VariableSetStmt))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v9 = *(_QWORD *)v10;
    v9[8] = v10[8];
    *((_OWORD *)v9 + 1) = *((_OWORD *)v10 + 1);
    *((_QWORD *)v9 + 4) = *((_QWORD *)v10 + 4);
    v9[40] = v10[40];
    v7(&v9[*(int *)(VariableSetStmt + 32)], &v10[*(int *)(VariableSetStmt + 32)], v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, VariableSetStmt);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_AlterSystemStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t VariableSetStmt;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v19;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  v13 = *(_QWORD *)(VariableSetStmt - 8);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, VariableSetStmt);
  v16 = v14(v11, 1, VariableSetStmt);
  if (!v15)
  {
    if (!v16)
    {
      *(_QWORD *)v10 = *(_QWORD *)v11;
      *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
      v19 = *(_QWORD *)(v11 + 24);
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
      *(_QWORD *)(v10 + 24) = v19;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);
      swift_bridgeObjectRelease();
      *(_BYTE *)(v10 + 40) = *(_BYTE *)(v11 + 40);
      v8(v10 + *(int *)(VariableSetStmt + 32), v11 + *(int *)(VariableSetStmt + 32), v6);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v10, type metadata accessor for PgQuery_VariableSetStmt);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    memcpy((void *)v10, (const void *)v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v11 + 16);
  *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);
  *(_BYTE *)(v10 + 40) = *(_BYTE *)(v11 + 40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v10 + *(int *)(VariableSetStmt + 32), v11 + *(int *)(VariableSetStmt + 32), v6);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, VariableSetStmt);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterSystemStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA68DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterSystemStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA68E68(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for PgQuery_AlterSystemStmt()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_VariableSetStmt?, (void (*)(uint64_t))type metadata accessor for PgQuery_VariableSetStmt);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for PgQuery_ReplicaIdentityStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_ReplicaIdentityStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_ReplicaIdentityStmt()
{
  return type metadata completion function for PgQuery_Alias();
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_RefreshMatViewStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t RangeVar;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t Alias;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = *(int *)(a3 + 28);
    v13 = (uint64_t *)((char *)v4 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    RangeVar = type metadata accessor for PgQuery_RangeVar(0);
    v16 = *(_QWORD *)(RangeVar - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RangeVar))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v37 = v16;
      v38 = v11;
      v19 = v14[1];
      *v13 = *v14;
      v13[1] = v19;
      v20 = v14[3];
      v13[2] = v14[2];
      v13[3] = v20;
      v21 = v14[5];
      v13[4] = v14[4];
      v13[5] = v21;
      *((_BYTE *)v13 + 48) = *((_BYTE *)v14 + 48);
      v22 = v14[8];
      v13[7] = v14[7];
      v13[8] = v22;
      *((_DWORD *)v13 + 18) = *((_DWORD *)v14 + 18);
      v23 = *(int *)(RangeVar + 40);
      v24 = (char *)v13 + v23;
      v25 = (char *)v14 + v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38(v24, v25, v10);
      v26 = *(int *)(RangeVar + 44);
      v27 = (_QWORD *)((char *)v13 + v26);
      v28 = (_QWORD *)((char *)v14 + v26);
      Alias = type metadata accessor for PgQuery_Alias(0);
      v30 = *(_QWORD *)(Alias - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v30 + 48))(v28, 1, Alias))
      {
        v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        v32 = v28[1];
        *v27 = *v28;
        v27[1] = v32;
        v27[2] = v28[2];
        v33 = *(int *)(Alias + 24);
        v34 = (char *)v27 + v33;
        v35 = (char *)v28 + v33;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v38(v34, v35, v10);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, Alias);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v13, 0, 1, RangeVar);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_TableLikeClause(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t RangeVar;
  uint64_t result;
  uint64_t v9;
  uint64_t Alias;
  void (*v11)(uint64_t, uint64_t);

  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + *(int *)(a2 + 28);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 48))(v6, 1, RangeVar);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11(v6 + *(int *)(RangeVar + 40), v5);
    v9 = v6 + *(int *)(RangeVar + 44);
    Alias = type metadata accessor for PgQuery_Alias(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Alias - 8) + 48))(v9, 1, Alias);
    if (!(_DWORD)result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9 + *(int *)(Alias + 24), v5);
    }
  }
  return result;
}

_WORD *initializeWithCopy for PgQuery_RefreshMatViewStmt(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t RangeVar;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t Alias;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v15 = *(_QWORD *)(RangeVar - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v35 = v15;
    v36 = v10;
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v18 = v13[3];
    v12[2] = v13[2];
    v12[3] = v18;
    v19 = v13[5];
    v12[4] = v13[4];
    v12[5] = v19;
    *((_BYTE *)v12 + 48) = *((_BYTE *)v13 + 48);
    v20 = v13[8];
    v12[7] = v13[7];
    v12[8] = v20;
    *((_DWORD *)v12 + 18) = *((_DWORD *)v13 + 18);
    v21 = *(int *)(RangeVar + 40);
    v22 = (char *)v12 + v21;
    v23 = (char *)v13 + v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36(v22, v23, v9);
    v24 = *(int *)(RangeVar + 44);
    v25 = (_QWORD *)((char *)v12 + v24);
    v26 = (_QWORD *)((char *)v13 + v24);
    Alias = type metadata accessor for PgQuery_Alias(0);
    v28 = *(_QWORD *)(Alias - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, Alias))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      v30 = v26[1];
      *v25 = *v26;
      v25[1] = v30;
      v25[2] = v26[2];
      v31 = *(int *)(Alias + 24);
      v32 = (char *)v25 + v31;
      v33 = (char *)v26 + v31;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v36(v32, v33, v9);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, Alias);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v12, 0, 1, RangeVar);
  }
  return a1;
}

_BYTE *assignWithCopy for PgQuery_RefreshMatViewStmt(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t RangeVar;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t Alias;
  uint64_t v35;
  uint64_t (*v36)(_QWORD *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v46;
  char *v47;
  char *v48;
  void (*v49)(char *, char *, uint64_t);

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 24);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = (uint64_t)&a1[v12];
  v14 = &a2[v12];
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v16 = *(_QWORD *)(RangeVar - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, RangeVar);
  v18 = v17((uint64_t)v14, 1, RangeVar);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *(_QWORD *)(v13 + 8) = *((_QWORD *)v14 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
      *(_QWORD *)(v13 + 24) = *((_QWORD *)v14 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v13 + 32) = *((_QWORD *)v14 + 4);
      *(_QWORD *)(v13 + 40) = *((_QWORD *)v14 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v13 + 48) = v14[48];
      *(_QWORD *)(v13 + 56) = *((_QWORD *)v14 + 7);
      *(_QWORD *)(v13 + 64) = *((_QWORD *)v14 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 72) = *((_DWORD *)v14 + 18);
      v11((_BYTE *)(v13 + *(int *)(RangeVar + 40)), &v14[*(int *)(RangeVar + 40)], v9);
      v31 = *(int *)(RangeVar + 44);
      v32 = (_QWORD *)(v13 + v31);
      v33 = &v14[v31];
      Alias = type metadata accessor for PgQuery_Alias(0);
      v35 = *(_QWORD *)(Alias - 8);
      v36 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v35 + 48);
      v37 = v36(v32, 1, Alias);
      v38 = v36(v33, 1, Alias);
      if (v37)
      {
        if (!v38)
        {
          *v32 = *v33;
          v32[1] = v33[1];
          v32[2] = v33[2];
          v39 = *(int *)(Alias + 24);
          v40 = (char *)v32 + v39;
          v41 = (char *)v33 + v39;
          v42 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v42(v40, v41, v9);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v38)
        {
          *v32 = *v33;
          v32[1] = v33[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v32[2] = v33[2];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v11((_BYTE *)v32 + *(int *)(Alias + 24), (_BYTE *)v33 + *(int *)(Alias + 24), v9);
          return a1;
        }
        outlined destroy of PgQuery_Alias((uint64_t)v32, type metadata accessor for PgQuery_Alias);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      v29 = v32;
      v30 = v33;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    v29 = (void *)v13;
    v30 = v14;
LABEL_8:
    memcpy(v29, v30, v28);
    return a1;
  }
  if (v18)
    goto LABEL_7;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_QWORD *)(v13 + 8) = *((_QWORD *)v14 + 1);
  *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
  *(_QWORD *)(v13 + 24) = *((_QWORD *)v14 + 3);
  *(_QWORD *)(v13 + 32) = *((_QWORD *)v14 + 4);
  *(_QWORD *)(v13 + 40) = *((_QWORD *)v14 + 5);
  *(_BYTE *)(v13 + 48) = v14[48];
  *(_QWORD *)(v13 + 56) = *((_QWORD *)v14 + 7);
  *(_QWORD *)(v13 + 64) = *((_QWORD *)v14 + 8);
  *(_DWORD *)(v13 + 72) = *((_DWORD *)v14 + 18);
  v19 = *(int *)(RangeVar + 40);
  v46 = &v14[v19];
  v48 = (char *)(v13 + v19);
  v20 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = v48;
  v49 = v20;
  v20(v21, v46, v9);
  v22 = *(int *)(RangeVar + 44);
  v23 = (_QWORD *)(v13 + v22);
  v24 = &v14[v22];
  v25 = type metadata accessor for PgQuery_Alias(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    *v23 = *v24;
    v23[1] = v24[1];
    v23[2] = v24[2];
    v43 = *(int *)(v25 + 24);
    v47 = (char *)v23 + v43;
    v44 = (char *)v24 + v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v49(v47, v44, v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RangeVar);
  return a1;
}

_WORD *initializeWithTake for PgQuery_RefreshMatViewStmt(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t RangeVar;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t Alias;
  uint64_t v22;
  uint64_t v23;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_OWORD *)((char *)a1 + v11);
  v13 = (_OWORD *)((char *)a2 + v11);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v15 = *(_QWORD *)(RangeVar - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v12[2] = v13[2];
    *((_BYTE *)v12 + 48) = *((_BYTE *)v13 + 48);
    *(_OWORD *)((char *)v12 + 56) = *(_OWORD *)((char *)v13 + 56);
    *((_DWORD *)v12 + 18) = *((_DWORD *)v13 + 18);
    v10((char *)v12 + *(int *)(RangeVar + 40), (char *)v13 + *(int *)(RangeVar + 40), v9);
    v18 = *(int *)(RangeVar + 44);
    v19 = (_QWORD *)((char *)v12 + v18);
    v20 = (_QWORD *)((char *)v13 + v18);
    Alias = type metadata accessor for PgQuery_Alias(0);
    v22 = *(_QWORD *)(Alias - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, Alias))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v19 = *(_OWORD *)v20;
      v19[2] = v20[2];
      v10((char *)v19 + *(int *)(Alias + 24), (char *)v20 + *(int *)(Alias + 24), v9);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, Alias);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  }
  return a1;
}

_BYTE *assignWithTake for PgQuery_RefreshMatViewStmt(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_BYTE *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t RangeVar;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  __int128 v19;
  void (*v20)(uint64_t, _BYTE *, uint64_t);
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  void *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t Alias;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v43;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 24);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(_BYTE *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = (uint64_t)&a1[v12];
  v14 = &a2[v12];
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v16 = *(_QWORD *)(RangeVar - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, RangeVar);
  v18 = v17((uint64_t)v14, 1, RangeVar);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v30 = *((_QWORD *)v14 + 1);
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *(_QWORD *)(v13 + 8) = v30;
      swift_bridgeObjectRelease();
      v31 = *((_QWORD *)v14 + 3);
      *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
      *(_QWORD *)(v13 + 24) = v31;
      swift_bridgeObjectRelease();
      v32 = *((_QWORD *)v14 + 5);
      *(_QWORD *)(v13 + 32) = *((_QWORD *)v14 + 4);
      *(_QWORD *)(v13 + 40) = v32;
      swift_bridgeObjectRelease();
      *(_BYTE *)(v13 + 48) = v14[48];
      v33 = *((_QWORD *)v14 + 8);
      *(_QWORD *)(v13 + 56) = *((_QWORD *)v14 + 7);
      *(_QWORD *)(v13 + 64) = v33;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 72) = *((_DWORD *)v14 + 18);
      v11((_BYTE *)(v13 + *(int *)(RangeVar + 40)), &v14[*(int *)(RangeVar + 40)], v9);
      v34 = *(int *)(RangeVar + 44);
      v35 = v13 + v34;
      v36 = &v14[v34];
      Alias = type metadata accessor for PgQuery_Alias(0);
      v38 = *(_QWORD *)(Alias - 8);
      v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
      v40 = v39(v35, 1, Alias);
      v41 = v39((uint64_t)v36, 1, Alias);
      if (v40)
      {
        if (!v41)
        {
          *(_OWORD *)v35 = *(_OWORD *)v36;
          *(_QWORD *)(v35 + 16) = *((_QWORD *)v36 + 2);
          (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v35 + *(int *)(Alias + 24), &v36[*(int *)(Alias + 24)], v9);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v41)
        {
          v43 = *((_QWORD *)v36 + 1);
          *(_QWORD *)v35 = *(_QWORD *)v36;
          *(_QWORD *)(v35 + 8) = v43;
          swift_bridgeObjectRelease();
          *(_QWORD *)(v35 + 16) = *((_QWORD *)v36 + 2);
          swift_bridgeObjectRelease();
          v11((_BYTE *)(v35 + *(int *)(Alias + 24)), &v36[*(int *)(Alias + 24)], v9);
          return a1;
        }
        outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Alias);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      v28 = (void *)v35;
      v29 = v36;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    v28 = (void *)v13;
    v29 = v14;
LABEL_8:
    memcpy(v28, v29, v27);
    return a1;
  }
  if (v18)
    goto LABEL_7;
  v19 = *((_OWORD *)v14 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v19;
  *(_OWORD *)(v13 + 32) = *((_OWORD *)v14 + 2);
  *(_BYTE *)(v13 + 48) = v14[48];
  *(_OWORD *)(v13 + 56) = *(_OWORD *)(v14 + 56);
  *(_DWORD *)(v13 + 72) = *((_DWORD *)v14 + 18);
  v20 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v10 + 32);
  v20(v13 + *(int *)(RangeVar + 40), &v14[*(int *)(RangeVar + 40)], v9);
  v21 = *(int *)(RangeVar + 44);
  v22 = (_QWORD *)(v13 + v21);
  v23 = &v14[v21];
  v24 = type metadata accessor for PgQuery_Alias(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v22 = *(_OWORD *)v23;
    v22[2] = v23[2];
    v20((uint64_t)v22 + *(int *)(v24 + 24), (_BYTE *)v23 + *(int *)(v24 + 24), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RangeVar);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_RefreshMatViewStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA69EA4(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      v12 = v10;
      v13 = *(int *)(a3 + 24);
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      v11 = *(_QWORD *)(v12 - 8);
      v13 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v11 + 48))(&a1[v13], a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_RefreshMatViewStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_BYTE *sub_18DA69F54(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for PgQuery_RefreshMatViewStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for PgQuery_VacuumRelation(a1, a2, a3, (uint64_t)&unk_18DC0F570, (uint64_t)&unk_18DC0F570, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterEventTrigStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterEventTrigStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_CreateSubscriptionStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[5];
    v8 = *(int *)(a3 + 32);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    a1[4] = a2[4];
    a1[5] = v7;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
  }
  return v3;
}

uint64_t destroy for PgQuery_CreateSubscriptionStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for PgQuery_CreateSubscriptionStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  v7 = *(int *)(a3 + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  a1[4] = a2[4];
  a1[5] = v6;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  return a1;
}

_QWORD *assignWithCopy for PgQuery_CreateSubscriptionStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for PgQuery_CreateSubscriptionStmt(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 32);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_QWORD *assignWithTake for PgQuery_CreateSubscriptionStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateEventTrigStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateEventTrigStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterExtensionContentsStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterExtensionContentsStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterExtensionStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterExtensionStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateExtensionStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateExtensionStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_CreateExtensionStmt()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_ImportForeignSchemaStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v14 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v6;
    v7 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    v8 = a2[9];
    v9 = *(int *)(a3 + 40);
    v10 = a1 + v9;
    v11 = (uint64_t)a2 + v9;
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v8;
    v12 = type metadata accessor for UnknownStorage();
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
  }
  return v3;
}

uint64_t destroy for PgQuery_ImportForeignSchemaStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_ImportForeignSchemaStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 72);
  v8 = *(int *)(a3 + 40);
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  return a1;
}

uint64_t assignWithCopy for PgQuery_ImportForeignSchemaStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 40);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_ImportForeignSchemaStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v5 = *(int *)(a3 + 40);
  v6 = a1 + v5;
  v7 = a2 + v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PgQuery_ImportForeignSchemaStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  v9 = *(int *)(a3 + 40);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_ImportForeignSchemaStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_ImportForeignSchemaStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_ImportForeignSchemaStmt()
{
  return type metadata completion function for PgQuery_CreateForeignServerStmt();
}

uint64_t type metadata completion function for PgQuery_CreateForeignServerStmt()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

{
  return type metadata completion function for PgQuery_CreateForeignServerStmt();
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_CreateForeignTableStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t Stmt;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, _QWORD, uint64_t, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    v8 = *(int *)(a3 + 24);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 28);
    v14 = (char *)v4 + v13;
    v15 = (char *)a2 + v13;
    Stmt = type metadata accessor for PgQuery_CreateStmt(0);
    v17 = *(_QWORD *)(Stmt - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, Stmt))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateStmt?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      *(_QWORD *)&v14[*(int *)(Stmt + 20)] = *(_QWORD *)&v15[*(int *)(Stmt + 20)];
      v20 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56);
      swift_retain();
      v20(v14, 0, 1, Stmt);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_CreateForeignTableStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t Stmt;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = a1 + *(int *)(a2 + 28);
  Stmt = type metadata accessor for PgQuery_CreateStmt(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Stmt - 8) + 48))(v7, 1, Stmt);
  if (!(_DWORD)result)
  {
    v6(v7, v5);
    return swift_release();
  }
  return result;
}

_QWORD *initializeWithCopy for PgQuery_CreateForeignTableStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t Stmt;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, _QWORD, uint64_t, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  Stmt = type metadata accessor for PgQuery_CreateStmt(0);
  v16 = *(_QWORD *)(Stmt - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, Stmt))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateStmt?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v10);
    *(_QWORD *)&v13[*(int *)(Stmt + 20)] = *(_QWORD *)&v14[*(int *)(Stmt + 20)];
    v18 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56);
    swift_retain();
    v18(v13, 0, 1, Stmt);
  }
  return a1;
}

_QWORD *assignWithCopy for PgQuery_CreateForeignTableStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t Stmt;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  void (*v19)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v20;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  Stmt = type metadata accessor for PgQuery_CreateStmt(0);
  v16 = *(_QWORD *)(Stmt - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, Stmt);
  v18 = v17(v14, 1, Stmt);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v11(v13, v14, v9);
      *(_QWORD *)&v13[*(int *)(Stmt + 20)] = *(_QWORD *)&v14[*(int *)(Stmt + 20)];
      swift_retain();
      swift_release();
      return a1;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v13, type metadata accessor for PgQuery_CreateStmt);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateStmt?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v14, v9);
  *(_QWORD *)&v13[*(int *)(Stmt + 20)] = *(_QWORD *)&v14[*(int *)(Stmt + 20)];
  v19 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56);
  swift_retain();
  v19(v13, 0, 1, Stmt);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateForeignTableStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t Stmt;
  uint64_t v15;
  uint64_t v16;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  Stmt = type metadata accessor for PgQuery_CreateStmt(0);
  v15 = *(_QWORD *)(Stmt - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, Stmt))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateStmt?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v10((uint64_t)v12, (uint64_t)v13, v9);
    *(_QWORD *)&v12[*(int *)(Stmt + 20)] = *(_QWORD *)&v13[*(int *)(Stmt + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, Stmt);
  }
  return a1;
}

_QWORD *assignWithTake for PgQuery_CreateForeignTableStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t Stmt;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  uint64_t v20;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(char *, char *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 28);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  Stmt = type metadata accessor for PgQuery_CreateStmt(0);
  v17 = *(_QWORD *)(Stmt - 8);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, Stmt);
  v19 = v18(v15, 1, Stmt);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      v12(v14, v15, v10);
      *(_QWORD *)&v14[*(int *)(Stmt + 20)] = *(_QWORD *)&v15[*(int *)(Stmt + 20)];
      swift_release();
      return a1;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v14, type metadata accessor for PgQuery_CreateStmt);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateStmt?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v15, v10);
  *(_QWORD *)&v14[*(int *)(Stmt + 20)] = *(_QWORD *)&v15[*(int *)(Stmt + 20)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, Stmt);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateForeignTableStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA6B118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_61Tm(a1, a2, a3, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateForeignTableStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA6B130(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_184Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
}

void type metadata completion function for PgQuery_CreateForeignTableStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for PgQuery_VacuumRelation(a1, a2, a3, (uint64_t)&unk_18DC0F588, MEMORY[0x1E0DE9D18] + 64, &lazy cache variable for type metadata for PgQuery_CreateStmt?, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateStmt);
}

uint64_t getEnumTagSinglePayload for PgQuery_SecLabelStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_SecLabelStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_AlterTableMoveAllStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v6 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v6;
    *(_QWORD *)(a1 + 48) = a2[6];
    v7 = *(int *)(a3 + 36);
    v8 = (uint64_t)a2 + v7;
    v9 = a1 + v7;
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v9, v8, v10);
  }
  return v3;
}

uint64_t destroy for PgQuery_AlterTableMoveAllStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_AlterTableMoveAllStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = *(int *)(a3 + 36);
  v7 = a2 + v6;
  v8 = a1 + v6;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v8, v7, v9);
  return a1;
}

uint64_t assignWithCopy for PgQuery_AlterTableMoveAllStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v7 = *(int *)(a3 + 36);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_AlterTableMoveAllStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = *(int *)(a3 + 36);
  v5 = a2 + v4;
  v6 = a1 + v4;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, v5, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_AlterTableMoveAllStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v8 = *(int *)(a3 + 36);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterTableMoveAllStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_153Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterTableMoveAllStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_154Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_AlterTableMoveAllStmt()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_AlterTableSpaceOptionsStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v6 = *(int *)(a3 + 28);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for PgQuery_PartitionSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_AlterTableSpaceOptionsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_AlterTableSpaceOptionsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_AlterTableSpaceOptionsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_AlterTableSpaceOptionsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterTableSpaceOptionsStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterTableSpaceOptionsStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_AlterTableSpaceOptionsStmt()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_DropUserMappingStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t RoleSpec;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = *(int *)(a3 + 24);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 28);
    v14 = (_QWORD *)((char *)v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
    v17 = *(_QWORD *)(RoleSpec - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RoleSpec))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *v14 = *v15;
      *((_BYTE *)v14 + 8) = *((_BYTE *)v15 + 8);
      v20 = v15[3];
      v14[2] = v15[2];
      v14[3] = v20;
      *((_DWORD *)v14 + 8) = *((_DWORD *)v15 + 8);
      v21 = *(int *)(RoleSpec + 28);
      v22 = (char *)v14 + v21;
      v23 = (char *)v15 + v21;
      swift_bridgeObjectRetain();
      v12((uint64_t)v22, (uint64_t)v23, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RoleSpec);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_DropUserMappingStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t RoleSpec;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 28);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RoleSpec - 8) + 48))(v6, 1, RoleSpec);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(RoleSpec + 28), v5);
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_DropUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t RoleSpec;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 28);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v16 = *(_QWORD *)(RoleSpec - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RoleSpec))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    *((_BYTE *)v13 + 8) = *((_BYTE *)v14 + 8);
    v18 = v14[3];
    v13[2] = v14[2];
    v13[3] = v18;
    *((_DWORD *)v13 + 8) = *((_DWORD *)v14 + 8);
    v19 = *(int *)(RoleSpec + 28);
    v20 = (char *)v13 + v19;
    v21 = (char *)v14 + v19;
    swift_bridgeObjectRetain();
    v11((uint64_t)v20, (uint64_t)v21, v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_DropUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t RoleSpec;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = a1 + v12;
  v14 = a2 + v12;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v16 = *(_QWORD *)(RoleSpec - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, RoleSpec);
  v18 = v17(v14, 1, RoleSpec);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v26 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(_QWORD *)v13 = v26;
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
      *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 32) = *(_DWORD *)(v14 + 32);
      v11(v13 + *(int *)(RoleSpec + 28), v14 + *(int *)(RoleSpec + 28), v9);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v13, (const void *)v14, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  v19 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_QWORD *)v13 = v19;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
  *(_DWORD *)(v13 + 32) = *(_DWORD *)(v14 + 32);
  v20 = *(int *)(RoleSpec + 28);
  v21 = v13 + v20;
  v22 = v14 + v20;
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  v23(v21, v22, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  return a1;
}

uint64_t initializeWithTake for PgQuery_DropUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t RoleSpec;
  uint64_t v15;
  uint64_t v16;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(int *)(a3 + 24);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v15 = *(_QWORD *)(RoleSpec - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RoleSpec))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_BYTE *)v12 + 8) = *((_BYTE *)v13 + 8);
    *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
    *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 8);
    v10((char *)v12 + *(int *)(RoleSpec + 28), (char *)v13 + *(int *)(RoleSpec + 28), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_DropUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t RoleSpec;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  uint64_t v22;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 28);
  v14 = a1 + v13;
  v15 = a2 + v13;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v17 = *(_QWORD *)(RoleSpec - 8);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, RoleSpec);
  v19 = v18(v15, 1, RoleSpec);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
      v22 = *(_QWORD *)(v15 + 24);
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
      *(_QWORD *)(v14 + 24) = v22;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(v15 + 32);
      v12(v14 + *(int *)(RoleSpec + 28), v15 + *(int *)(RoleSpec + 28), v10);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v14, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v14, (const void *)v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  *(_OWORD *)(v14 + 16) = *(_OWORD *)(v15 + 16);
  *(_DWORD *)(v14 + 32) = *(_DWORD *)(v15 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v14 + *(int *)(RoleSpec + 28), v15 + *(int *)(RoleSpec + 28), v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RoleSpec);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_DropUserMappingStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA6C274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_61Tm(a1, a2, a3, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
}

uint64_t storeEnumTagSinglePayload for PgQuery_DropUserMappingStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA6C28C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_184Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
}

void type metadata completion function for PgQuery_DropUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for PgQuery_VacuumRelation(a1, a2, a3, (uint64_t)&unk_18DC0F588, (uint64_t)&unk_18DC0F570, &lazy cache variable for type metadata for PgQuery_RoleSpec?, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_AlterUserMappingStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t RoleSpec;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    v8 = *(int *)(a3 + 24);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 28);
    v14 = (uint64_t *)((char *)v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
    v17 = *(_QWORD *)(RoleSpec - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RoleSpec))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *v14 = *v15;
      *((_BYTE *)v14 + 8) = *((_BYTE *)v15 + 8);
      v20 = v15[3];
      v14[2] = v15[2];
      v14[3] = v20;
      *((_DWORD *)v14 + 8) = *((_DWORD *)v15 + 8);
      v21 = *(int *)(RoleSpec + 28);
      v22 = (char *)v14 + v21;
      v23 = (char *)v15 + v21;
      swift_bridgeObjectRetain();
      v12(v22, v23, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RoleSpec);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_AlterUserMappingStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t RoleSpec;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 28);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RoleSpec - 8) + 48))(v6, 1, RoleSpec);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(RoleSpec + 28), v5);
  }
  return result;
}

_QWORD *initializeWithCopy for PgQuery_AlterUserMappingStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t RoleSpec;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 28);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v16 = *(_QWORD *)(RoleSpec - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RoleSpec))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    *((_BYTE *)v13 + 8) = *((_BYTE *)v14 + 8);
    v18 = v14[3];
    v13[2] = v14[2];
    v13[3] = v18;
    *((_DWORD *)v13 + 8) = *((_DWORD *)v14 + 8);
    v19 = *(int *)(RoleSpec + 28);
    v20 = (char *)v13 + v19;
    v21 = (char *)v14 + v19;
    swift_bridgeObjectRetain();
    v11(v20, v21, v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  }
  return a1;
}

_QWORD *assignWithCopy for PgQuery_AlterUserMappingStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t RoleSpec;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(uint64_t, char *, uint64_t);
  uint64_t v24;
  uint64_t v26;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = (uint64_t)a1 + v12;
  v14 = (char *)a2 + v12;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v16 = *(_QWORD *)(RoleSpec - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, RoleSpec);
  v18 = v17((uint64_t)v14, 1, RoleSpec);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v26 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = v14[8];
      *(_QWORD *)v13 = v26;
      *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
      *(_QWORD *)(v13 + 24) = *((_QWORD *)v14 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 32) = *((_DWORD *)v14 + 8);
      v11((char *)(v13 + *(int *)(RoleSpec + 28)), &v14[*(int *)(RoleSpec + 28)], v9);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v13, v14, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  v19 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = v14[8];
  *(_QWORD *)v13 = v19;
  *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
  *(_QWORD *)(v13 + 24) = *((_QWORD *)v14 + 3);
  *(_DWORD *)(v13 + 32) = *((_DWORD *)v14 + 8);
  v20 = *(int *)(RoleSpec + 28);
  v21 = v13 + v20;
  v22 = &v14[v20];
  v23 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  v23(v21, v22, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  return a1;
}

uint64_t initializeWithTake for PgQuery_AlterUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t RoleSpec;
  uint64_t v15;
  uint64_t v16;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 24);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v15 = *(_QWORD *)(RoleSpec - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RoleSpec))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_BYTE *)v12 + 8) = *((_BYTE *)v13 + 8);
    *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
    *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 8);
    v10((char *)v12 + *(int *)(RoleSpec + 28), (char *)v13 + *(int *)(RoleSpec + 28), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  }
  return a1;
}

_QWORD *assignWithTake for PgQuery_AlterUserMappingStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t RoleSpec;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  uint64_t v22;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(char *, char *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 28);
  v14 = (uint64_t)a1 + v13;
  v15 = (char *)a2 + v13;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v17 = *(_QWORD *)(RoleSpec - 8);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, RoleSpec);
  v19 = v18((uint64_t)v15, 1, RoleSpec);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *(_BYTE *)(v14 + 8) = v15[8];
      v22 = *((_QWORD *)v15 + 3);
      *(_QWORD *)(v14 + 16) = *((_QWORD *)v15 + 2);
      *(_QWORD *)(v14 + 24) = v22;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v14 + 32) = *((_DWORD *)v15 + 8);
      v12((char *)(v14 + *(int *)(RoleSpec + 28)), &v15[*(int *)(RoleSpec + 28)], v10);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v14, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v14, v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = v15[8];
  *(_OWORD *)(v14 + 16) = *((_OWORD *)v15 + 1);
  *(_DWORD *)(v14 + 32) = *((_DWORD *)v15 + 8);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v14 + *(int *)(RoleSpec + 28), &v15[*(int *)(RoleSpec + 28)], v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RoleSpec);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterUserMappingStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA6CB04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_61Tm(a1, a2, a3, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterUserMappingStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA6CB1C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_184Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
}

void type metadata completion function for PgQuery_AlterUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for PgQuery_VacuumRelation(a1, a2, a3, (uint64_t)&unk_18DC0F588, MEMORY[0x1E0DE9D18] + 64, &lazy cache variable for type metadata for PgQuery_RoleSpec?, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_CreateUserMappingStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t RoleSpec;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_QWORD *)(a1 + 24) = a2[3];
    v8 = *(int *)(a3 + 28);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 32);
    v14 = (_QWORD *)((char *)v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
    v17 = *(_QWORD *)(RoleSpec - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RoleSpec))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *v14 = *v15;
      *((_BYTE *)v14 + 8) = *((_BYTE *)v15 + 8);
      v20 = v15[3];
      v14[2] = v15[2];
      v14[3] = v20;
      *((_DWORD *)v14 + 8) = *((_DWORD *)v15 + 8);
      v21 = *(int *)(RoleSpec + 28);
      v22 = (char *)v14 + v21;
      v23 = (char *)v15 + v21;
      swift_bridgeObjectRetain();
      v12((uint64_t)v22, (uint64_t)v23, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RoleSpec);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_CreateUserMappingStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t RoleSpec;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 32);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RoleSpec - 8) + 48))(v6, 1, RoleSpec);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(RoleSpec + 28), v5);
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_CreateUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t RoleSpec;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 32);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v16 = *(_QWORD *)(RoleSpec - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RoleSpec))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    *((_BYTE *)v13 + 8) = *((_BYTE *)v14 + 8);
    v18 = v14[3];
    v13[2] = v14[2];
    v13[3] = v18;
    *((_DWORD *)v13 + 8) = *((_DWORD *)v14 + 8);
    v19 = *(int *)(RoleSpec + 28);
    v20 = (char *)v13 + v19;
    v21 = (char *)v14 + v19;
    swift_bridgeObjectRetain();
    v11((uint64_t)v20, (uint64_t)v21, v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_CreateUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t RoleSpec;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 32);
  v13 = a1 + v12;
  v14 = a2 + v12;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v16 = *(_QWORD *)(RoleSpec - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, RoleSpec);
  v18 = v17(v14, 1, RoleSpec);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v26 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(_QWORD *)v13 = v26;
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
      *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 32) = *(_DWORD *)(v14 + 32);
      v11(v13 + *(int *)(RoleSpec + 28), v14 + *(int *)(RoleSpec + 28), v9);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v13, (const void *)v14, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  v19 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_QWORD *)v13 = v19;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
  *(_DWORD *)(v13 + 32) = *(_DWORD *)(v14 + 32);
  v20 = *(int *)(RoleSpec + 28);
  v21 = v13 + v20;
  v22 = v14 + v20;
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  v23(v21, v22, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t RoleSpec;
  uint64_t v15;
  uint64_t v16;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(int *)(a3 + 28);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 32);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v15 = *(_QWORD *)(RoleSpec - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RoleSpec))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_BYTE *)v12 + 8) = *((_BYTE *)v13 + 8);
    *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
    *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 8);
    v10((char *)v12 + *(int *)(RoleSpec + 28), (char *)v13 + *(int *)(RoleSpec + 28), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_CreateUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t RoleSpec;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  uint64_t v22;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 32);
  v14 = a1 + v13;
  v15 = a2 + v13;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v17 = *(_QWORD *)(RoleSpec - 8);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, RoleSpec);
  v19 = v18(v15, 1, RoleSpec);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
      v22 = *(_QWORD *)(v15 + 24);
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
      *(_QWORD *)(v14 + 24) = v22;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(v15 + 32);
      v12(v14 + *(int *)(RoleSpec + 28), v15 + *(int *)(RoleSpec + 28), v10);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v14, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v14, (const void *)v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  *(_OWORD *)(v14 + 16) = *(_OWORD *)(v15 + 16);
  *(_DWORD *)(v14 + 32) = *(_DWORD *)(v15 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v14 + *(int *)(RoleSpec + 28), v15 + *(int *)(RoleSpec + 28), v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RoleSpec);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateUserMappingStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateUserMappingStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void type metadata completion function for PgQuery_CreateUserMappingStmt()
{
  type metadata completion function for PgQuery_CreateUserMappingStmt();
}

{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_RoleSpec?, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_AlterForeignServerStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = a2[4];
    v7 = *(int *)(a3 + 32);
    v8 = (uint64_t)a2 + v7;
    v9 = a1 + v7;
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v9, v8, v10);
  }
  return v3;
}

uint64_t destroy for PgQuery_AlterForeignServerStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_AlterForeignServerStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(int *)(a3 + 32);
  v7 = a2 + v6;
  v8 = a1 + v6;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v8, v7, v9);
  return a1;
}

uint64_t assignWithCopy for PgQuery_AlterForeignServerStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(int *)(a3 + 32);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_AlterForeignServerStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(int *)(a3 + 32);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PgQuery_AlterForeignServerStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(int *)(a3 + 32);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterForeignServerStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_59Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterForeignServerStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_60Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_AlterForeignServerStmt()
{
  return type metadata completion function for PgQuery_InlineCodeBlock();
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_CreateForeignServerStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v14 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v6;
    v7 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v7;
    v8 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v8;
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    v9 = *(int *)(a3 + 40);
    v10 = a1 + v9;
    v11 = (uint64_t)a2 + v9;
    *(_QWORD *)(a1 + 72) = a2[9];
    v12 = type metadata accessor for UnknownStorage();
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
  }
  return v3;
}

uint64_t destroy for PgQuery_CreateForeignServerStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_CreateForeignServerStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v8 = *(int *)(a3 + 40);
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  return a1;
}

uint64_t assignWithCopy for PgQuery_CreateForeignServerStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 40);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateForeignServerStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v6 = *(int *)(a3 + 40);
  v7 = a2 + v6;
  v8 = a1 + v6;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8, v7, v9);
  return a1;
}

uint64_t assignWithTake for PgQuery_CreateForeignServerStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 40);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateForeignServerStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_181Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateForeignServerStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_182Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterFdwStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterFdwStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_AlterFdwStmt()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_AlterFdwStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = *(int *)(a3 + 28);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t destroy for PgQuery_AlterFdwStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for PgQuery_AlterFdwStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

_QWORD *assignWithCopy for PgQuery_AlterFdwStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for PgQuery_AlterFdwStmt(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 28);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_QWORD *assignWithTake for PgQuery_AlterFdwStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 28);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateFdwStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateFdwStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_AlterTSConfigurationStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v5 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    v6 = *(int *)(a3 + 44);
    v7 = (uint64_t)a2 + v6;
    v8 = a1 + v6;
    *(_WORD *)(a1 + 41) = *(_WORD *)((char *)a2 + 41);
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v8, v7, v9);
  }
  return v3;
}

uint64_t initializeWithCopy for PgQuery_AlterTSConfigurationStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(int *)(a3 + 44);
  v6 = a2 + v5;
  v7 = a1 + v5;
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v7, v6, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_AlterTSConfigurationStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_BYTE *)(a1 + 41) = *((_BYTE *)a2 + 41);
  *(_BYTE *)(a1 + 42) = *((_BYTE *)a2 + 42);
  v7 = *(int *)(a3 + 44);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_AlterTSConfigurationStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(int *)(a3 + 44);
  v5 = a2 + v4;
  v6 = a1 + v4;
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, v5, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_AlterTSConfigurationStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  v6 = *(int *)(a3 + 44);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterTSConfigurationStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterTSConfigurationStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_AlterTSConfigurationStmt()
{
  return type metadata completion function for PgQuery_AlterTSConfigurationStmt();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterTSDictionaryStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterTSDictionaryStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_AlterTSDictionaryStmt()
{
  return type metadata completion function for PgQuery_Alias();
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_AlterEnumStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v6;
    v7 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v7;
    v8 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v8;
    v9 = *(int *)(a3 + 40);
    v10 = (uint64_t)a2 + v9;
    v11 = a1 + v9;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v12 = type metadata accessor for UnknownStorage();
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v11, v10, v12);
  }
  return v5;
}

uint64_t destroy for PgQuery_AlterEnumStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_AlterEnumStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v7 = *(int *)(a3 + 40);
  v8 = a2 + v7;
  v9 = a1 + v7;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v9, v8, v10);
  return a1;
}

uint64_t assignWithCopy for PgQuery_AlterEnumStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v6 = *(int *)(a3 + 40);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_AlterEnumStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v4 = *(int *)(a3 + 40);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_AlterEnumStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v9 = *(int *)(a3 + 40);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterEnumStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_145Tm(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 40)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterEnumStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *__swift_store_extra_inhabitant_index_146Tm(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 40)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_AlterEnumStmt()
{
  return type metadata completion function for PgQuery_CreateStatsStmt();
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateRangeStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateRangeStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateEnumStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateEnumStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_CompositeTypeStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t RangeVar;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t Alias;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (uint64_t *)((char *)v7 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    RangeVar = type metadata accessor for PgQuery_RangeVar(0);
    v17 = *(_QWORD *)(RangeVar - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RangeVar))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v37 = v17;
      v38 = v12;
      v19 = v15[1];
      *v14 = *v15;
      v14[1] = v19;
      v20 = v15[3];
      v14[2] = v15[2];
      v14[3] = v20;
      v21 = v15[5];
      v14[4] = v15[4];
      v14[5] = v21;
      *((_BYTE *)v14 + 48) = *((_BYTE *)v15 + 48);
      v22 = v15[8];
      v14[7] = v15[7];
      v14[8] = v22;
      *((_DWORD *)v14 + 18) = *((_DWORD *)v15 + 18);
      v23 = *(int *)(RangeVar + 40);
      v24 = (char *)v14 + v23;
      v25 = (char *)v15 + v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38(v24, v25, v11);
      v26 = *(int *)(RangeVar + 44);
      v27 = (_QWORD *)((char *)v14 + v26);
      v28 = (_QWORD *)((char *)v15 + v26);
      Alias = type metadata accessor for PgQuery_Alias(0);
      v30 = *(_QWORD *)(Alias - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v30 + 48))(v28, 1, Alias))
      {
        v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        v32 = v28[1];
        *v27 = *v28;
        v27[1] = v32;
        v27[2] = v28[2];
        v33 = *(int *)(Alias + 24);
        v34 = (char *)v27 + v33;
        v35 = (char *)v28 + v33;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v38(v34, v35, v11);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, Alias);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v14, 0, 1, RangeVar);
    }
  }
  return v7;
}

uint64_t destroy for PgQuery_CompositeTypeStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t RangeVar;
  uint64_t result;
  uint64_t v9;
  uint64_t Alias;
  void (*v11)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 48))(v6, 1, RangeVar);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11(v6 + *(int *)(RangeVar + 40), v5);
    v9 = v6 + *(int *)(RangeVar + 44);
    Alias = type metadata accessor for PgQuery_Alias(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Alias - 8) + 48))(v9, 1, Alias);
    if (!(_DWORD)result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9 + *(int *)(Alias + 24), v5);
    }
  }
  return result;
}

_QWORD *initializeWithCopy for PgQuery_CompositeTypeStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t RangeVar;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t Alias;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v15 = *(_QWORD *)(RangeVar - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v35 = v15;
    v36 = v10;
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v18 = v13[3];
    v12[2] = v13[2];
    v12[3] = v18;
    v19 = v13[5];
    v12[4] = v13[4];
    v12[5] = v19;
    *((_BYTE *)v12 + 48) = *((_BYTE *)v13 + 48);
    v20 = v13[8];
    v12[7] = v13[7];
    v12[8] = v20;
    *((_DWORD *)v12 + 18) = *((_DWORD *)v13 + 18);
    v21 = *(int *)(RangeVar + 40);
    v22 = (char *)v12 + v21;
    v23 = (char *)v13 + v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36(v22, v23, v9);
    v24 = *(int *)(RangeVar + 44);
    v25 = (_QWORD *)((char *)v12 + v24);
    v26 = (_QWORD *)((char *)v13 + v24);
    Alias = type metadata accessor for PgQuery_Alias(0);
    v28 = *(_QWORD *)(Alias - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, Alias))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      v30 = v26[1];
      *v25 = *v26;
      v25[1] = v30;
      v25[2] = v26[2];
      v31 = *(int *)(Alias + 24);
      v32 = (char *)v25 + v31;
      v33 = (char *)v26 + v31;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v36(v32, v33, v9);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, Alias);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v12, 0, 1, RangeVar);
  }
  return a1;
}

_QWORD *assignWithCopy for PgQuery_CompositeTypeStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t RangeVar;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t Alias;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v46;
  char *v47;
  char *v48;
  void (*v49)(char *, char *, uint64_t);

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (uint64_t)a1 + v12;
  v14 = (char *)a2 + v12;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v16 = *(_QWORD *)(RangeVar - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, RangeVar);
  v18 = v17((uint64_t)v14, 1, RangeVar);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *(_QWORD *)(v13 + 8) = *((_QWORD *)v14 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
      *(_QWORD *)(v13 + 24) = *((_QWORD *)v14 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v13 + 32) = *((_QWORD *)v14 + 4);
      *(_QWORD *)(v13 + 40) = *((_QWORD *)v14 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v13 + 48) = v14[48];
      *(_QWORD *)(v13 + 56) = *((_QWORD *)v14 + 7);
      *(_QWORD *)(v13 + 64) = *((_QWORD *)v14 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 72) = *((_DWORD *)v14 + 18);
      v11((char *)(v13 + *(int *)(RangeVar + 40)), &v14[*(int *)(RangeVar + 40)], v9);
      v31 = *(int *)(RangeVar + 44);
      v32 = (char *)(v13 + v31);
      v33 = &v14[v31];
      Alias = type metadata accessor for PgQuery_Alias(0);
      v35 = *(_QWORD *)(Alias - 8);
      v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
      v37 = v36(v32, 1, Alias);
      v38 = v36(v33, 1, Alias);
      if (v37)
      {
        if (!v38)
        {
          *(_QWORD *)v32 = *(_QWORD *)v33;
          *((_QWORD *)v32 + 1) = *((_QWORD *)v33 + 1);
          *((_QWORD *)v32 + 2) = *((_QWORD *)v33 + 2);
          v39 = *(int *)(Alias + 24);
          v40 = &v32[v39];
          v41 = &v33[v39];
          v42 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v42(v40, v41, v9);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v38)
        {
          *(_QWORD *)v32 = *(_QWORD *)v33;
          *((_QWORD *)v32 + 1) = *((_QWORD *)v33 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *((_QWORD *)v32 + 2) = *((_QWORD *)v33 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v11(&v32[*(int *)(Alias + 24)], &v33[*(int *)(Alias + 24)], v9);
          return a1;
        }
        outlined destroy of PgQuery_Alias((uint64_t)v32, type metadata accessor for PgQuery_Alias);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      v29 = v32;
      v30 = v33;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    v29 = (void *)v13;
    v30 = v14;
LABEL_8:
    memcpy(v29, v30, v28);
    return a1;
  }
  if (v18)
    goto LABEL_7;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_QWORD *)(v13 + 8) = *((_QWORD *)v14 + 1);
  *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
  *(_QWORD *)(v13 + 24) = *((_QWORD *)v14 + 3);
  *(_QWORD *)(v13 + 32) = *((_QWORD *)v14 + 4);
  *(_QWORD *)(v13 + 40) = *((_QWORD *)v14 + 5);
  *(_BYTE *)(v13 + 48) = v14[48];
  *(_QWORD *)(v13 + 56) = *((_QWORD *)v14 + 7);
  *(_QWORD *)(v13 + 64) = *((_QWORD *)v14 + 8);
  *(_DWORD *)(v13 + 72) = *((_DWORD *)v14 + 18);
  v19 = *(int *)(RangeVar + 40);
  v46 = &v14[v19];
  v48 = (char *)(v13 + v19);
  v20 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = v48;
  v49 = v20;
  v20(v21, v46, v9);
  v22 = *(int *)(RangeVar + 44);
  v23 = (_QWORD *)(v13 + v22);
  v24 = &v14[v22];
  v25 = type metadata accessor for PgQuery_Alias(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    *v23 = *(_QWORD *)v24;
    v23[1] = *((_QWORD *)v24 + 1);
    v23[2] = *((_QWORD *)v24 + 2);
    v43 = *(int *)(v25 + 24);
    v47 = (char *)v23 + v43;
    v44 = &v24[v43];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v49(v47, v44, v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RangeVar);
  return a1;
}

_QWORD *initializeWithTake for PgQuery_CompositeTypeStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t RangeVar;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t Alias;
  uint64_t v22;
  uint64_t v23;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_OWORD *)((char *)a1 + v11);
  v13 = (_OWORD *)((char *)a2 + v11);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v15 = *(_QWORD *)(RangeVar - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v12[2] = v13[2];
    *((_BYTE *)v12 + 48) = *((_BYTE *)v13 + 48);
    *(_OWORD *)((char *)v12 + 56) = *(_OWORD *)((char *)v13 + 56);
    *((_DWORD *)v12 + 18) = *((_DWORD *)v13 + 18);
    v10((char *)v12 + *(int *)(RangeVar + 40), (char *)v13 + *(int *)(RangeVar + 40), v9);
    v18 = *(int *)(RangeVar + 44);
    v19 = (_QWORD *)((char *)v12 + v18);
    v20 = (_QWORD *)((char *)v13 + v18);
    Alias = type metadata accessor for PgQuery_Alias(0);
    v22 = *(_QWORD *)(Alias - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, Alias))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v19 = *(_OWORD *)v20;
      v19[2] = v20[2];
      v10((char *)v19 + *(int *)(Alias + 24), (char *)v20 + *(int *)(Alias + 24), v9);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, Alias);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  }
  return a1;
}

_QWORD *assignWithTake for PgQuery_CompositeTypeStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t RangeVar;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  __int128 v19;
  void (*v20)(uint64_t, char *, uint64_t);
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t Alias;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v43;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (uint64_t)a1 + v12;
  v14 = (char *)a2 + v12;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v16 = *(_QWORD *)(RangeVar - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, RangeVar);
  v18 = v17((uint64_t)v14, 1, RangeVar);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v30 = *((_QWORD *)v14 + 1);
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *(_QWORD *)(v13 + 8) = v30;
      swift_bridgeObjectRelease();
      v31 = *((_QWORD *)v14 + 3);
      *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
      *(_QWORD *)(v13 + 24) = v31;
      swift_bridgeObjectRelease();
      v32 = *((_QWORD *)v14 + 5);
      *(_QWORD *)(v13 + 32) = *((_QWORD *)v14 + 4);
      *(_QWORD *)(v13 + 40) = v32;
      swift_bridgeObjectRelease();
      *(_BYTE *)(v13 + 48) = v14[48];
      v33 = *((_QWORD *)v14 + 8);
      *(_QWORD *)(v13 + 56) = *((_QWORD *)v14 + 7);
      *(_QWORD *)(v13 + 64) = v33;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 72) = *((_DWORD *)v14 + 18);
      v11((char *)(v13 + *(int *)(RangeVar + 40)), &v14[*(int *)(RangeVar + 40)], v9);
      v34 = *(int *)(RangeVar + 44);
      v35 = v13 + v34;
      v36 = &v14[v34];
      Alias = type metadata accessor for PgQuery_Alias(0);
      v38 = *(_QWORD *)(Alias - 8);
      v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
      v40 = v39(v35, 1, Alias);
      v41 = v39((uint64_t)v36, 1, Alias);
      if (v40)
      {
        if (!v41)
        {
          *(_OWORD *)v35 = *(_OWORD *)v36;
          *(_QWORD *)(v35 + 16) = *((_QWORD *)v36 + 2);
          (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v35 + *(int *)(Alias + 24), &v36[*(int *)(Alias + 24)], v9);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v41)
        {
          v43 = *((_QWORD *)v36 + 1);
          *(_QWORD *)v35 = *(_QWORD *)v36;
          *(_QWORD *)(v35 + 8) = v43;
          swift_bridgeObjectRelease();
          *(_QWORD *)(v35 + 16) = *((_QWORD *)v36 + 2);
          swift_bridgeObjectRelease();
          v11((char *)(v35 + *(int *)(Alias + 24)), &v36[*(int *)(Alias + 24)], v9);
          return a1;
        }
        outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Alias);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      v28 = (void *)v35;
      v29 = v36;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    v28 = (void *)v13;
    v29 = v14;
LABEL_8:
    memcpy(v28, v29, v27);
    return a1;
  }
  if (v18)
    goto LABEL_7;
  v19 = *((_OWORD *)v14 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v19;
  *(_OWORD *)(v13 + 32) = *((_OWORD *)v14 + 2);
  *(_BYTE *)(v13 + 48) = v14[48];
  *(_OWORD *)(v13 + 56) = *(_OWORD *)(v14 + 56);
  *(_DWORD *)(v13 + 72) = *((_DWORD *)v14 + 18);
  v20 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
  v20(v13 + *(int *)(RangeVar + 40), &v14[*(int *)(RangeVar + 40)], v9);
  v21 = *(int *)(RangeVar + 44);
  v22 = (_QWORD *)(v13 + v21);
  v23 = &v14[v21];
  v24 = type metadata accessor for PgQuery_Alias(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v22 = *(_OWORD *)v23;
    v22[2] = *((_QWORD *)v23 + 2);
    v20((uint64_t)v22 + *(int *)(v24 + 24), &v23[*(int *)(v24 + 24)], v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RangeVar);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CompositeTypeStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA6FA44(char *a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_215Tm(a1, a2, a3, &demangling cache variable for type metadata for PgQuery_RangeVar?);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CompositeTypeStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_18DA6FA5C(char *a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_216Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for PgQuery_RangeVar?);
}

void type metadata completion function for PgQuery_CompositeTypeStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for PgQuery_CompositeTypeStmt(a1, a2, a3, MEMORY[0x1E0DE9D18] + 64, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_ReassignOwnedStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t RoleSpec;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (uint64_t *)((char *)v7 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
    v17 = *(_QWORD *)(RoleSpec - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RoleSpec))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *v14 = *v15;
      *((_BYTE *)v14 + 8) = *((_BYTE *)v15 + 8);
      v19 = v15[3];
      v14[2] = v15[2];
      v14[3] = v19;
      *((_DWORD *)v14 + 8) = *((_DWORD *)v15 + 8);
      v20 = *(int *)(RoleSpec + 28);
      v21 = (char *)v14 + v20;
      v22 = (char *)v15 + v20;
      swift_bridgeObjectRetain();
      v12(v21, v22, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RoleSpec);
    }
  }
  return v7;
}

uint64_t destroy for PgQuery_ReassignOwnedStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t RoleSpec;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RoleSpec - 8) + 48))(v6, 1, RoleSpec);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(RoleSpec + 28), v5);
  }
  return result;
}

_QWORD *initializeWithCopy for PgQuery_ReassignOwnedStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t RoleSpec;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v15 = *(_QWORD *)(RoleSpec - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RoleSpec))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_BYTE *)v12 + 8) = *((_BYTE *)v13 + 8);
    v17 = v13[3];
    v12[2] = v13[2];
    v12[3] = v17;
    *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 8);
    v18 = *(int *)(RoleSpec + 28);
    v19 = (char *)v12 + v18;
    v20 = (char *)v13 + v18;
    swift_bridgeObjectRetain();
    v10(v19, v20, v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  }
  return a1;
}

_QWORD *assignWithCopy for PgQuery_ReassignOwnedStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t RoleSpec;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(uint64_t, char *, uint64_t);
  uint64_t v24;
  uint64_t v26;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (uint64_t)a1 + v12;
  v14 = (char *)a2 + v12;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v16 = *(_QWORD *)(RoleSpec - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, RoleSpec);
  v18 = v17((uint64_t)v14, 1, RoleSpec);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v26 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = v14[8];
      *(_QWORD *)v13 = v26;
      *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
      *(_QWORD *)(v13 + 24) = *((_QWORD *)v14 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 32) = *((_DWORD *)v14 + 8);
      v11((char *)(v13 + *(int *)(RoleSpec + 28)), &v14[*(int *)(RoleSpec + 28)], v9);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v13, v14, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  v19 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = v14[8];
  *(_QWORD *)v13 = v19;
  *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
  *(_QWORD *)(v13 + 24) = *((_QWORD *)v14 + 3);
  *(_DWORD *)(v13 + 32) = *((_DWORD *)v14 + 8);
  v20 = *(int *)(RoleSpec + 28);
  v21 = v13 + v20;
  v22 = &v14[v20];
  v23 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  v23(v21, v22, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  return a1;
}

_QWORD *initializeWithTake for PgQuery_ReassignOwnedStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t RoleSpec;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v15 = *(_QWORD *)(RoleSpec - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RoleSpec))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_BYTE *)v12 + 8) = *((_BYTE *)v13 + 8);
    *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
    *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 8);
    v10((char *)v12 + *(int *)(RoleSpec + 28), (char *)v13 + *(int *)(RoleSpec + 28), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  }
  return a1;
}

_QWORD *assignWithTake for PgQuery_ReassignOwnedStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t RoleSpec;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v21;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (uint64_t)a1 + v12;
  v14 = (char *)a2 + v12;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v16 = *(_QWORD *)(RoleSpec - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, RoleSpec);
  v18 = v17((uint64_t)v14, 1, RoleSpec);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = v14[8];
      v21 = *((_QWORD *)v14 + 3);
      *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
      *(_QWORD *)(v13 + 24) = v21;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 32) = *((_DWORD *)v14 + 8);
      v11((char *)(v13 + *(int *)(RoleSpec + 28)), &v14[*(int *)(RoleSpec + 28)], v9);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = v14[8];
  *(_OWORD *)(v13 + 16) = *((_OWORD *)v14 + 1);
  *(_DWORD *)(v13 + 32) = *((_DWORD *)v14 + 8);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v13 + *(int *)(RoleSpec + 28), &v14[*(int *)(RoleSpec + 28)], v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_ReassignOwnedStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA7025C(char *a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_215Tm(a1, a2, a3, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
}

uint64_t storeEnumTagSinglePayload for PgQuery_ReassignOwnedStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_18DA70274(char *a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_216Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
}

void type metadata completion function for PgQuery_ReassignOwnedStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for PgQuery_CompositeTypeStmt(a1, a2, a3, MEMORY[0x1E0DE9D18] + 64, &lazy cache variable for type metadata for PgQuery_RoleSpec?, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_DropOwnedStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v5 = a1;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v6 = *(int *)(a3 + 24);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t initializeWithCopy for PgQuery_DropOwnedStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_DropOwnedStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_DropOwnedStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PgQuery_DropOwnedStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_DropOwnedStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_DropOwnedStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_DropOwnedStmt()
{
  return type metadata completion function for PgQuery_Alias();
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_AlterTSDictionaryStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    a1[1] = a2[1];
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for PgQuery_AlterTSDictionaryStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for PgQuery_AlterTSDictionaryStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for PgQuery_AlterTSDictionaryStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for PgQuery_AlterTSDictionaryStmt(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for PgQuery_AlterTSDictionaryStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterTypeStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterTypeStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_AlterOperatorStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t ObjectWithArgs;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (uint64_t *)((char *)v7 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
    v17 = *(_QWORD *)(ObjectWithArgs - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, ObjectWithArgs))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v19 = v15[1];
      *v14 = *v15;
      v14[1] = v19;
      *((_BYTE *)v14 + 16) = *((_BYTE *)v15 + 16);
      v20 = *(int *)(ObjectWithArgs + 28);
      v21 = (char *)v14 + v20;
      v22 = (char *)v15 + v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12(v21, v22, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, ObjectWithArgs);
    }
  }
  return v7;
}

uint64_t destroy for PgQuery_AlterOperatorStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectWithArgs;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(ObjectWithArgs - 8) + 48))(v6, 1, ObjectWithArgs);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(ObjectWithArgs + 28), v5);
  }
  return result;
}

_QWORD *initializeWithCopy for PgQuery_AlterOperatorStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t ObjectWithArgs;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  v15 = *(_QWORD *)(ObjectWithArgs - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, ObjectWithArgs))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    *((_BYTE *)v12 + 16) = *((_BYTE *)v13 + 16);
    v18 = *(int *)(ObjectWithArgs + 28);
    v19 = (char *)v12 + v18;
    v20 = (char *)v13 + v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v19, v20, v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, ObjectWithArgs);
  }
  return a1;
}

_QWORD *assignWithCopy for PgQuery_AlterOperatorStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t ObjectWithArgs;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(uint64_t, char *, uint64_t);
  uint64_t v23;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (uint64_t)a1 + v12;
  v14 = (char *)a2 + v12;
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  v16 = *(_QWORD *)(ObjectWithArgs - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, ObjectWithArgs);
  v18 = v17((uint64_t)v14, 1, ObjectWithArgs);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v13 + 8) = *((_QWORD *)v14 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v13 + 16) = v14[16];
      v11((char *)(v13 + *(int *)(ObjectWithArgs + 28)), &v14[*(int *)(ObjectWithArgs + 28)], v9);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_ObjectWithArgs);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy((void *)v13, v14, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_QWORD *)(v13 + 8) = *((_QWORD *)v14 + 1);
  *(_BYTE *)(v13 + 16) = v14[16];
  v19 = *(int *)(ObjectWithArgs + 28);
  v20 = v13 + v19;
  v21 = &v14[v19];
  v22 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22(v20, v21, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, ObjectWithArgs);
  return a1;
}

_QWORD *initializeWithTake for PgQuery_AlterOperatorStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t ObjectWithArgs;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  v15 = *(_QWORD *)(ObjectWithArgs - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v13, 1, ObjectWithArgs))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v12 = *(_OWORD *)v13;
    v12[16] = v13[16];
    v10(&v12[*(int *)(ObjectWithArgs + 28)], &v13[*(int *)(ObjectWithArgs + 28)], v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, ObjectWithArgs);
  }
  return a1;
}

_QWORD *assignWithTake for PgQuery_AlterOperatorStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t ObjectWithArgs;
  uint64_t v16;
  uint64_t (*v17)(_BYTE *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  v16 = *(_QWORD *)(ObjectWithArgs - 8);
  v17 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, ObjectWithArgs);
  v18 = v17(v14, 1, ObjectWithArgs);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      swift_bridgeObjectRelease();
      *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
      swift_bridgeObjectRelease();
      v13[16] = v14[16];
      v11(&v13[*(int *)(ObjectWithArgs + 28)], &v14[*(int *)(ObjectWithArgs + 28)], v9);
      return a1;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v13, type metadata accessor for PgQuery_ObjectWithArgs);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v13 = *(_OWORD *)v14;
  v13[16] = v14[16];
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(&v13[*(int *)(ObjectWithArgs + 28)], &v14[*(int *)(ObjectWithArgs + 28)], v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, ObjectWithArgs);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterOperatorStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA71014(char *a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_215Tm(a1, a2, a3, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterOperatorStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_18DA7102C(char *a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_216Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
}

void type metadata completion function for PgQuery_AlterOperatorStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for PgQuery_CompositeTypeStmt(a1, a2, a3, MEMORY[0x1E0DE9D18] + 64, &lazy cache variable for type metadata for PgQuery_ObjectWithArgs?, (void (*)(uint64_t))type metadata accessor for PgQuery_ObjectWithArgs);
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterOwnerStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterOwnerStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterObjectSchemaStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterObjectSchemaStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterObjectDependsStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterObjectDependsStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_DropTableSpaceStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v6 = *(int *)(a3 + 24);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t initializeWithCopy for PgQuery_DropTableSpaceStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_DropTableSpaceStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_DropTableSpaceStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_DropTableSpaceStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_DropTableSpaceStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_DropTableSpaceStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_DropTableSpaceStmt()
{
  return type metadata completion function for PgQuery_Alias();
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_CreateTableSpaceStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t RoleSpec;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = *(int *)(a3 + 28);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    a1[4] = a2[4];
    v12 = type metadata accessor for UnknownStorage();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    v14 = *(int *)(a3 + 32);
    v15 = (uint64_t *)((char *)v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
    v18 = *(_QWORD *)(RoleSpec - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, RoleSpec))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      *v15 = *v16;
      *((_BYTE *)v15 + 8) = *((_BYTE *)v16 + 8);
      v21 = v16[3];
      v15[2] = v16[2];
      v15[3] = v21;
      *((_DWORD *)v15 + 8) = *((_DWORD *)v16 + 8);
      v22 = *(int *)(RoleSpec + 28);
      v23 = (char *)v15 + v22;
      v24 = (char *)v16 + v22;
      swift_bridgeObjectRetain();
      v13(v23, v24, v12);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, RoleSpec);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_CreateTableSpaceStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t RoleSpec;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 32);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RoleSpec - 8) + 48))(v6, 1, RoleSpec);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(RoleSpec + 28), v5);
  }
  return result;
}

_QWORD *initializeWithCopy for PgQuery_CreateTableSpaceStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t RoleSpec;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  a1[4] = a2[4];
  v8 = *(int *)(a3 + 28);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  v13 = *(int *)(a3 + 32);
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v17 = *(_QWORD *)(RoleSpec - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RoleSpec))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    *v14 = *v15;
    *((_BYTE *)v14 + 8) = *((_BYTE *)v15 + 8);
    v19 = v15[3];
    v14[2] = v15[2];
    v14[3] = v19;
    *((_DWORD *)v14 + 8) = *((_DWORD *)v15 + 8);
    v20 = *(int *)(RoleSpec + 28);
    v21 = (char *)v14 + v20;
    v22 = (char *)v15 + v20;
    swift_bridgeObjectRetain();
    v12(v21, v22, v11);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RoleSpec);
  }
  return a1;
}

_QWORD *assignWithCopy for PgQuery_CreateTableSpaceStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t RoleSpec;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(uint64_t, char *, uint64_t);
  uint64_t v24;
  uint64_t v26;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 32);
  v13 = (uint64_t)a1 + v12;
  v14 = (char *)a2 + v12;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v16 = *(_QWORD *)(RoleSpec - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, RoleSpec);
  v18 = v17((uint64_t)v14, 1, RoleSpec);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v26 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = v14[8];
      *(_QWORD *)v13 = v26;
      *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
      *(_QWORD *)(v13 + 24) = *((_QWORD *)v14 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 32) = *((_DWORD *)v14 + 8);
      v11((char *)(v13 + *(int *)(RoleSpec + 28)), &v14[*(int *)(RoleSpec + 28)], v9);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v13, v14, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  v19 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = v14[8];
  *(_QWORD *)v13 = v19;
  *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
  *(_QWORD *)(v13 + 24) = *((_QWORD *)v14 + 3);
  *(_DWORD *)(v13 + 32) = *((_DWORD *)v14 + 8);
  v20 = *(int *)(RoleSpec + 28);
  v21 = v13 + v20;
  v22 = &v14[v20];
  v23 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  v23(v21, v22, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateTableSpaceStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t RoleSpec;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 28);
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 32);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v16 = *(_QWORD *)(RoleSpec - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RoleSpec))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    *((_BYTE *)v13 + 8) = *((_BYTE *)v14 + 8);
    *((_OWORD *)v13 + 1) = *((_OWORD *)v14 + 1);
    *((_DWORD *)v13 + 8) = *((_DWORD *)v14 + 8);
    v11((char *)v13 + *(int *)(RoleSpec + 28), (char *)v14 + *(int *)(RoleSpec + 28), v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  }
  return a1;
}

_QWORD *assignWithTake for PgQuery_CreateTableSpaceStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t RoleSpec;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  int v20;
  uint64_t v21;
  uint64_t v23;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 28);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  v14 = *(int *)(a3 + 32);
  v15 = (uint64_t)a1 + v14;
  v16 = (char *)a2 + v14;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v18 = *(_QWORD *)(RoleSpec - 8);
  v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v10) = v19(v15, 1, RoleSpec);
  v20 = v19((uint64_t)v16, 1, RoleSpec);
  if (!(_DWORD)v10)
  {
    if (!v20)
    {
      *(_QWORD *)v15 = *(_QWORD *)v16;
      *(_BYTE *)(v15 + 8) = v16[8];
      v23 = *((_QWORD *)v16 + 3);
      *(_QWORD *)(v15 + 16) = *((_QWORD *)v16 + 2);
      *(_QWORD *)(v15 + 24) = v23;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v15 + 32) = *((_DWORD *)v16 + 8);
      v13((char *)(v15 + *(int *)(RoleSpec + 28)), &v16[*(int *)(RoleSpec + 28)], v11);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v15, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v15, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = v16[8];
  *(_OWORD *)(v15 + 16) = *((_OWORD *)v16 + 1);
  *(_DWORD *)(v15 + 32) = *((_DWORD *)v16 + 8);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v15 + *(int *)(RoleSpec + 28), &v16[*(int *)(RoleSpec + 28)], v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, RoleSpec);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateTableSpaceStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateTableSpaceStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void type metadata completion function for PgQuery_CreateTableSpaceStmt()
{
  type metadata completion function for PgQuery_CreateUserMappingStmt();
}

uint64_t getEnumTagSinglePayload for PgQuery_DeclareCursorStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_DeclareCursorStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_DeallocateStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_DeallocateStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_ExecuteStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_ExecuteStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_PrepareStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_PrepareStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_AlterOpFamilyStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v6;
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *(_QWORD *)(a1 + 32) = a2[4];
    v7 = *(int *)(a3 + 32);
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v5;
}

uint64_t destroy for PgQuery_AlterOpFamilyStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_AlterOpFamilyStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 32);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_AlterOpFamilyStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 32);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_AlterOpFamilyStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(int *)(a3 + 32);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_AlterOpFamilyStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 32);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterOpFamilyStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA7203C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 32)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterOpFamilyStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_18DA720C4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 32)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_AlterOpFamilyStmt()
{
  return type metadata completion function for PgQuery_InlineCodeBlock();
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_CreateOpFamilyStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v5;
}

uint64_t destroy for PgQuery_CreateOpFamilyStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for PgQuery_CreateOpFamilyStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for PgQuery_CreateOpFamilyStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateOpFamilyStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for PgQuery_CreateOpFamilyStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateOpFamilyStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateOpFamilyStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_CreateOpFamilyStmt()
{
  return type metadata completion function for PgQuery_Alias();
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_CreateOpClassStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t TypeName;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v24;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v8;
    v9 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v9;
    v10 = *(int *)(a3 + 36);
    v11 = a1 + v10;
    v24 = (uint64_t)a2 + v10;
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    v12 = type metadata accessor for UnknownStorage();
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v11, v24, v12);
    v14 = *(int *)(a3 + 40);
    v15 = (_QWORD *)(v7 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    TypeName = type metadata accessor for PgQuery_TypeName(0);
    v18 = *(_QWORD *)(TypeName - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, TypeName))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      *v15 = *v16;
      *((_DWORD *)v15 + 2) = *((_DWORD *)v16 + 2);
      *((_WORD *)v15 + 6) = *((_WORD *)v16 + 6);
      v15[2] = v16[2];
      *((_DWORD *)v15 + 6) = *((_DWORD *)v16 + 6);
      v15[4] = v16[4];
      *((_DWORD *)v15 + 10) = *((_DWORD *)v16 + 10);
      v20 = *(int *)(TypeName + 48);
      v21 = (char *)v15 + v20;
      v22 = (char *)v16 + v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13((uint64_t)v21, (uint64_t)v22, v12);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, TypeName);
    }
  }
  return v7;
}

uint64_t destroy for PgQuery_CreateOpClassStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t TypeName;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 40);
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TypeName - 8) + 48))(v6, 1, TypeName);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(TypeName + 48), v5);
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_CreateOpClassStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t TypeName;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v23;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v9 = *(int *)(a3 + 36);
  v10 = a1 + v9;
  v23 = a2 + v9;
  *(_QWORD *)(a1 + 32) = v8;
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v10, v23, v11);
  v13 = *(int *)(a3 + 40);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v17 = *(_QWORD *)(TypeName - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, TypeName))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    *v14 = *v15;
    *((_DWORD *)v14 + 2) = *((_DWORD *)v15 + 2);
    *((_WORD *)v14 + 6) = *((_WORD *)v15 + 6);
    v14[2] = v15[2];
    *((_DWORD *)v14 + 6) = *((_DWORD *)v15 + 6);
    v14[4] = v15[4];
    *((_DWORD *)v14 + 10) = *((_DWORD *)v15 + 10);
    v19 = *(int *)(TypeName + 48);
    v20 = (char *)v14 + v19;
    v21 = (char *)v15 + v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12((uint64_t)v20, (uint64_t)v21, v11);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, TypeName);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_CreateOpClassStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TypeName;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(int *)(a3 + 36);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 40);
  v13 = a1 + v12;
  v14 = a2 + v12;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v16 = *(_QWORD *)(TypeName - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, TypeName);
  v18 = v17(v14, 1, TypeName);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
      *(_BYTE *)(v13 + 12) = *(_BYTE *)(v14 + 12);
      *(_BYTE *)(v13 + 13) = *(_BYTE *)(v14 + 13);
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 24) = *(_DWORD *)(v14 + 24);
      *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 40) = *(_DWORD *)(v14 + 40);
      v11(v13 + *(int *)(TypeName + 48), v14 + *(int *)(TypeName + 48), v9);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_TypeName);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy((void *)v13, (const void *)v14, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
  *(_BYTE *)(v13 + 12) = *(_BYTE *)(v14 + 12);
  *(_BYTE *)(v13 + 13) = *(_BYTE *)(v14 + 13);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  *(_DWORD *)(v13 + 24) = *(_DWORD *)(v14 + 24);
  *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
  *(_DWORD *)(v13 + 40) = *(_DWORD *)(v14 + 40);
  v19 = *(int *)(TypeName + 48);
  v20 = v13 + v19;
  v21 = v14 + v19;
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22(v20, v21, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, TypeName);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateOpClassStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t TypeName;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v7 = *(int *)(a3 + 36);
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 40);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v16 = *(_QWORD *)(TypeName - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, TypeName))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    *((_DWORD *)v13 + 2) = *((_DWORD *)v14 + 2);
    *((_WORD *)v13 + 6) = *((_WORD *)v14 + 6);
    v13[2] = v14[2];
    *((_DWORD *)v13 + 6) = *((_DWORD *)v14 + 6);
    v13[4] = v14[4];
    *((_DWORD *)v13 + 10) = *((_DWORD *)v14 + 10);
    v11((char *)v13 + *(int *)(TypeName + 48), (char *)v14 + *(int *)(TypeName + 48), v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, TypeName);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_CreateOpClassStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t TypeName;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v7 = *(int *)(a3 + 36);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 40);
  v14 = a1 + v13;
  v15 = a2 + v13;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v17 = *(_QWORD *)(TypeName - 8);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, TypeName);
  v19 = v18(v15, 1, TypeName);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      *(_QWORD *)v14 = *(_QWORD *)v15;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v14 + 8) = *(_DWORD *)(v15 + 8);
      *(_BYTE *)(v14 + 12) = *(_BYTE *)(v15 + 12);
      *(_BYTE *)(v14 + 13) = *(_BYTE *)(v15 + 13);
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
      swift_bridgeObjectRelease();
      *(_DWORD *)(v14 + 24) = *(_DWORD *)(v15 + 24);
      *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
      swift_bridgeObjectRelease();
      *(_DWORD *)(v14 + 40) = *(_DWORD *)(v15 + 40);
      v12(v14 + *(int *)(TypeName + 48), v15 + *(int *)(TypeName + 48), v10);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v14, type metadata accessor for PgQuery_TypeName);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy((void *)v14, (const void *)v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_DWORD *)(v14 + 8) = *(_DWORD *)(v15 + 8);
  *(_WORD *)(v14 + 12) = *(_WORD *)(v15 + 12);
  *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
  *(_DWORD *)(v14 + 24) = *(_DWORD *)(v15 + 24);
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
  *(_DWORD *)(v14 + 40) = *(_DWORD *)(v15 + 40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v14 + *(int *)(TypeName + 48), v15 + *(int *)(TypeName + 48), v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, TypeName);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateOpClassStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA72EC4(char *a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_247Tm(a1, a2, a3, &demangling cache variable for type metadata for PgQuery_TypeName?);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateOpClassStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_18DA72EDC(char *a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_248Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for PgQuery_TypeName?);
}

void type metadata completion function for PgQuery_CreateOpClassStmt()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_TypeName?, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateCastStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateCastStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_CreateConversionStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v6;
    v7 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = a2[5];
    v8 = *(int *)(a3 + 36);
    v9 = (uint64_t)a2 + v8;
    v10 = a1 + v8;
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v10, v9, v11);
  }
  return v5;
}

uint64_t destroy for PgQuery_CreateConversionStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_CreateConversionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(int *)(a3 + 36);
  v8 = a2 + v7;
  v9 = a1 + v7;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v9, v8, v10);
  return a1;
}

uint64_t assignWithCopy for PgQuery_CreateConversionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(int *)(a3 + 36);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateConversionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v4 = *(int *)(a3 + 36);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_CreateConversionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v8 = *(int *)(a3 + 36);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateConversionStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateConversionStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_CreateConversionStmt()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_AlterRoleSetStmt(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t RoleSpec;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t VariableSetStmt;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = (uint64_t *)((char *)v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
    v17 = *(_QWORD *)(RoleSpec - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RoleSpec))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *v14 = *v15;
      *((_BYTE *)v14 + 8) = *((_BYTE *)v15 + 8);
      v20 = v15[3];
      v14[2] = v15[2];
      v14[3] = v20;
      *((_DWORD *)v14 + 8) = *((_DWORD *)v15 + 8);
      v21 = *(int *)(RoleSpec + 28);
      v22 = (char *)v14 + v21;
      v23 = (char *)v15 + v21;
      swift_bridgeObjectRetain();
      v12(v22, v23, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RoleSpec);
    }
    v24 = a3[7];
    v25 = (uint64_t *)((char *)v4 + v24);
    v26 = (uint64_t *)((char *)a2 + v24);
    VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
    v28 = *(_QWORD *)(VariableSetStmt - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, VariableSetStmt))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      *v25 = *v26;
      *((_BYTE *)v25 + 8) = *((_BYTE *)v26 + 8);
      v30 = v26[3];
      v25[2] = v26[2];
      v25[3] = v30;
      v25[4] = v26[4];
      *((_BYTE *)v25 + 40) = *((_BYTE *)v26 + 40);
      v31 = *(int *)(VariableSetStmt + 32);
      v32 = (char *)v25 + v31;
      v33 = (char *)v26 + v31;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12(v32, v33, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, VariableSetStmt);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_AlterRoleSetStmt(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t RoleSpec;
  uint64_t v8;
  uint64_t VariableSetStmt;
  uint64_t result;
  void (*v11)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + a2[6];
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RoleSpec - 8) + 48))(v6, 1, RoleSpec))
  {
    swift_bridgeObjectRelease();
    v11(v6 + *(int *)(RoleSpec + 28), v5);
  }
  v8 = a1 + a2[7];
  VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(VariableSetStmt - 8) + 48))(v8, 1, VariableSetStmt);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8 + *(int *)(VariableSetStmt + 32), v5);
  }
  return result;
}

_QWORD *initializeWithCopy for PgQuery_AlterRoleSetStmt(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t RoleSpec;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t VariableSetStmt;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v16 = *(_QWORD *)(RoleSpec - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RoleSpec))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    *((_BYTE *)v13 + 8) = *((_BYTE *)v14 + 8);
    v18 = v14[3];
    v13[2] = v14[2];
    v13[3] = v18;
    *((_DWORD *)v13 + 8) = *((_DWORD *)v14 + 8);
    v19 = *(int *)(RoleSpec + 28);
    v20 = (char *)v13 + v19;
    v21 = (char *)v14 + v19;
    swift_bridgeObjectRetain();
    v11(v20, v21, v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  }
  v22 = a3[7];
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = (_QWORD *)((char *)a2 + v22);
  VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  v26 = *(_QWORD *)(VariableSetStmt - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v26 + 48))(v24, 1, VariableSetStmt))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    *v23 = *v24;
    *((_BYTE *)v23 + 8) = *((_BYTE *)v24 + 8);
    v28 = v24[3];
    v23[2] = v24[2];
    v23[3] = v28;
    v23[4] = v24[4];
    *((_BYTE *)v23 + 40) = *((_BYTE *)v24 + 40);
    v29 = *(int *)(VariableSetStmt + 32);
    v30 = (char *)v23 + v29;
    v31 = (char *)v24 + v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v30, v31, v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, VariableSetStmt);
  }
  return a1;
}

_QWORD *assignWithCopy for PgQuery_AlterRoleSetStmt(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t RoleSpec;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(uint64_t, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t VariableSetStmt;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(uint64_t, char *, uint64_t);
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v42 = *(_QWORD *)(v9 - 8);
  v41 = *(void (**)(char *, char *, uint64_t))(v42 + 24);
  v41(v7, v8, v9);
  v10 = a3[6];
  v11 = (uint64_t)a1 + v10;
  v12 = (char *)a2 + v10;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v14 = *(_QWORD *)(RoleSpec - 8);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, RoleSpec);
  v17 = v15((uint64_t)v12, 1, RoleSpec);
  if (v16)
  {
    if (!v17)
    {
      v18 = *(_QWORD *)v12;
      *(_BYTE *)(v11 + 8) = v12[8];
      *(_QWORD *)v11 = v18;
      *(_QWORD *)(v11 + 16) = *((_QWORD *)v12 + 2);
      *(_QWORD *)(v11 + 24) = *((_QWORD *)v12 + 3);
      *(_DWORD *)(v11 + 32) = *((_DWORD *)v12 + 8);
      v19 = *(int *)(RoleSpec + 28);
      v20 = v11 + v19;
      v21 = &v12[v19];
      v22 = *(void (**)(uint64_t, char *, uint64_t))(v42 + 16);
      swift_bridgeObjectRetain();
      v22(v20, v21, v9);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, RoleSpec);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of PgQuery_Alias(v11, type metadata accessor for PgQuery_RoleSpec);
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v11, v12, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  v39 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = v12[8];
  *(_QWORD *)v11 = v39;
  *(_QWORD *)(v11 + 16) = *((_QWORD *)v12 + 2);
  *(_QWORD *)(v11 + 24) = *((_QWORD *)v12 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v11 + 32) = *((_DWORD *)v12 + 8);
  v41((char *)(v11 + *(int *)(RoleSpec + 28)), &v12[*(int *)(RoleSpec + 28)], v9);
LABEL_7:
  v24 = a3[7];
  v25 = (uint64_t)a1 + v24;
  v26 = (char *)a2 + v24;
  VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  v28 = *(_QWORD *)(VariableSetStmt - 8);
  v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, VariableSetStmt);
  v31 = v29((uint64_t)v26, 1, VariableSetStmt);
  if (!v30)
  {
    if (!v31)
    {
      v40 = *(_QWORD *)v26;
      *(_BYTE *)(v25 + 8) = v26[8];
      *(_QWORD *)v25 = v40;
      *(_QWORD *)(v25 + 16) = *((_QWORD *)v26 + 2);
      *(_QWORD *)(v25 + 24) = *((_QWORD *)v26 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v25 + 32) = *((_QWORD *)v26 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v25 + 40) = v26[40];
      v41((char *)(v25 + *(int *)(VariableSetStmt + 32)), &v26[*(int *)(VariableSetStmt + 32)], v9);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v25, type metadata accessor for PgQuery_VariableSetStmt);
    goto LABEL_12;
  }
  if (v31)
  {
LABEL_12:
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    memcpy((void *)v25, v26, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    return a1;
  }
  v32 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = v26[8];
  *(_QWORD *)v25 = v32;
  *(_QWORD *)(v25 + 16) = *((_QWORD *)v26 + 2);
  *(_QWORD *)(v25 + 24) = *((_QWORD *)v26 + 3);
  *(_QWORD *)(v25 + 32) = *((_QWORD *)v26 + 4);
  *(_BYTE *)(v25 + 40) = v26[40];
  v33 = *(int *)(VariableSetStmt + 32);
  v34 = v25 + v33;
  v35 = &v26[v33];
  v36 = *(void (**)(uint64_t, char *, uint64_t))(v42 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v36(v34, v35, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, VariableSetStmt);
  return a1;
}

_OWORD *initializeWithTake for PgQuery_AlterRoleSetStmt(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t RoleSpec;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t VariableSetStmt;
  uint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v15 = *(_QWORD *)(RoleSpec - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RoleSpec))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_BYTE *)v12 + 8) = *((_BYTE *)v13 + 8);
    *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
    *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 8);
    v10((char *)v12 + *(int *)(RoleSpec + 28), (char *)v13 + *(int *)(RoleSpec + 28), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  }
  v17 = a3[7];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  v21 = *(_QWORD *)(VariableSetStmt - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, VariableSetStmt))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *v18 = *v19;
    *((_BYTE *)v18 + 8) = *((_BYTE *)v19 + 8);
    *((_OWORD *)v18 + 1) = *((_OWORD *)v19 + 1);
    v18[4] = v19[4];
    *((_BYTE *)v18 + 40) = *((_BYTE *)v19 + 40);
    v10((char *)v18 + *(int *)(VariableSetStmt + 32), (char *)v19 + *(int *)(VariableSetStmt + 32), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, VariableSetStmt);
  }
  return a1;
}

_QWORD *assignWithTake for PgQuery_AlterRoleSetStmt(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t RoleSpec;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t VariableSetStmt;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v33 = *(_QWORD *)(v10 - 8);
  v32 = *(void (**)(char *, char *, uint64_t))(v33 + 40);
  v32(v8, v9, v10);
  v11 = a3[6];
  v12 = (uint64_t)a1 + v11;
  v13 = (char *)a2 + v11;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v15 = *(_QWORD *)(RoleSpec - 8);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, RoleSpec);
  v18 = v16((uint64_t)v13, 1, RoleSpec);
  if (v17)
  {
    if (!v18)
    {
      *(_QWORD *)v12 = *(_QWORD *)v13;
      *(_BYTE *)(v12 + 8) = v13[8];
      *(_OWORD *)(v12 + 16) = *((_OWORD *)v13 + 1);
      *(_DWORD *)(v12 + 32) = *((_DWORD *)v13 + 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v12 + *(int *)(RoleSpec + 28), &v13[*(int *)(RoleSpec + 28)], v10);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_RoleSpec);
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v13[8];
  v30 = *((_QWORD *)v13 + 3);
  *(_QWORD *)(v12 + 16) = *((_QWORD *)v13 + 2);
  *(_QWORD *)(v12 + 24) = v30;
  swift_bridgeObjectRelease();
  *(_DWORD *)(v12 + 32) = *((_DWORD *)v13 + 8);
  v32((char *)(v12 + *(int *)(RoleSpec + 28)), &v13[*(int *)(RoleSpec + 28)], v10);
LABEL_7:
  v20 = a3[7];
  v21 = (uint64_t)a1 + v20;
  v22 = (char *)a2 + v20;
  VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  v24 = *(_QWORD *)(VariableSetStmt - 8);
  v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, VariableSetStmt);
  v27 = v25((uint64_t)v22, 1, VariableSetStmt);
  if (!v26)
  {
    if (!v27)
    {
      *(_QWORD *)v21 = *(_QWORD *)v22;
      *(_BYTE *)(v21 + 8) = v22[8];
      v31 = *((_QWORD *)v22 + 3);
      *(_QWORD *)(v21 + 16) = *((_QWORD *)v22 + 2);
      *(_QWORD *)(v21 + 24) = v31;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v21 + 32) = *((_QWORD *)v22 + 4);
      swift_bridgeObjectRelease();
      *(_BYTE *)(v21 + 40) = v22[40];
      v32((char *)(v21 + *(int *)(VariableSetStmt + 32)), &v22[*(int *)(VariableSetStmt + 32)], v10);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v21, type metadata accessor for PgQuery_VariableSetStmt);
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    memcpy((void *)v21, v22, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = v22[8];
  *(_OWORD *)(v21 + 16) = *((_OWORD *)v22 + 1);
  *(_QWORD *)(v21 + 32) = *((_QWORD *)v22 + 4);
  *(_BYTE *)(v21 + 40) = v22[40];
  (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v21 + *(int *)(VariableSetStmt + 32), &v22[*(int *)(VariableSetStmt + 32)], v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, VariableSetStmt);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterRoleSetStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA741A8(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[6];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[7];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterRoleSetStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA74280(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[6];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[7];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for PgQuery_AlterRoleSetStmt()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_RoleSpec?, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_VariableSetStmt?, (void (*)(uint64_t))type metadata accessor for PgQuery_VariableSetStmt);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_AlterDatabaseSetStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t VariableSetStmt;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (uint64_t *)((char *)v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
    v17 = *(_QWORD *)(VariableSetStmt - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, VariableSetStmt))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *v14 = *v15;
      *((_BYTE *)v14 + 8) = *((_BYTE *)v15 + 8);
      v20 = v15[3];
      v14[2] = v15[2];
      v14[3] = v20;
      v14[4] = v15[4];
      *((_BYTE *)v14 + 40) = *((_BYTE *)v15 + 40);
      v21 = *(int *)(VariableSetStmt + 32);
      v22 = (char *)v14 + v21;
      v23 = (char *)v15 + v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12(v22, v23, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, VariableSetStmt);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_AlterDatabaseSetStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t VariableSetStmt;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(VariableSetStmt - 8) + 48))(v6, 1, VariableSetStmt);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(VariableSetStmt + 32), v5);
  }
  return result;
}

_QWORD *initializeWithCopy for PgQuery_AlterDatabaseSetStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t VariableSetStmt;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  v16 = *(_QWORD *)(VariableSetStmt - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, VariableSetStmt))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    *((_BYTE *)v13 + 8) = *((_BYTE *)v14 + 8);
    v18 = v14[3];
    v13[2] = v14[2];
    v13[3] = v18;
    v13[4] = v14[4];
    *((_BYTE *)v13 + 40) = *((_BYTE *)v14 + 40);
    v19 = *(int *)(VariableSetStmt + 32);
    v20 = (char *)v13 + v19;
    v21 = (char *)v14 + v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v20, v21, v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, VariableSetStmt);
  }
  return a1;
}

_QWORD *assignWithCopy for PgQuery_AlterDatabaseSetStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t VariableSetStmt;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(uint64_t, char *, uint64_t);
  uint64_t v24;
  uint64_t v26;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (uint64_t)a1 + v12;
  v14 = (char *)a2 + v12;
  VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  v16 = *(_QWORD *)(VariableSetStmt - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, VariableSetStmt);
  v18 = v17((uint64_t)v14, 1, VariableSetStmt);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v26 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = v14[8];
      *(_QWORD *)v13 = v26;
      *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
      *(_QWORD *)(v13 + 24) = *((_QWORD *)v14 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v13 + 32) = *((_QWORD *)v14 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v13 + 40) = v14[40];
      v11((char *)(v13 + *(int *)(VariableSetStmt + 32)), &v14[*(int *)(VariableSetStmt + 32)], v9);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_VariableSetStmt);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    memcpy((void *)v13, v14, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  v19 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = v14[8];
  *(_QWORD *)v13 = v19;
  *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
  *(_QWORD *)(v13 + 24) = *((_QWORD *)v14 + 3);
  *(_QWORD *)(v13 + 32) = *((_QWORD *)v14 + 4);
  *(_BYTE *)(v13 + 40) = v14[40];
  v20 = *(int *)(VariableSetStmt + 32);
  v21 = v13 + v20;
  v22 = &v14[v20];
  v23 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23(v21, v22, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, VariableSetStmt);
  return a1;
}

_OWORD *initializeWithTake for PgQuery_AlterDatabaseSetStmt(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t VariableSetStmt;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  v15 = *(_QWORD *)(VariableSetStmt - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, VariableSetStmt))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_BYTE *)v12 + 8) = *((_BYTE *)v13 + 8);
    *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
    v12[4] = v13[4];
    *((_BYTE *)v12 + 40) = *((_BYTE *)v13 + 40);
    v10((char *)v12 + *(int *)(VariableSetStmt + 32), (char *)v13 + *(int *)(VariableSetStmt + 32), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, VariableSetStmt);
  }
  return a1;
}

_QWORD *assignWithTake for PgQuery_AlterDatabaseSetStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t VariableSetStmt;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  uint64_t v22;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(char *, char *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 24);
  v14 = (uint64_t)a1 + v13;
  v15 = (char *)a2 + v13;
  VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  v17 = *(_QWORD *)(VariableSetStmt - 8);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, VariableSetStmt);
  v19 = v18((uint64_t)v15, 1, VariableSetStmt);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *(_BYTE *)(v14 + 8) = v15[8];
      v22 = *((_QWORD *)v15 + 3);
      *(_QWORD *)(v14 + 16) = *((_QWORD *)v15 + 2);
      *(_QWORD *)(v14 + 24) = v22;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v14 + 32) = *((_QWORD *)v15 + 4);
      swift_bridgeObjectRelease();
      *(_BYTE *)(v14 + 40) = v15[40];
      v12((char *)(v14 + *(int *)(VariableSetStmt + 32)), &v15[*(int *)(VariableSetStmt + 32)], v10);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v14, type metadata accessor for PgQuery_VariableSetStmt);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    memcpy((void *)v14, v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = v15[8];
  *(_OWORD *)(v14 + 16) = *((_OWORD *)v15 + 1);
  *(_QWORD *)(v14 + 32) = *((_QWORD *)v15 + 4);
  *(_BYTE *)(v14 + 40) = v15[40];
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v14 + *(int *)(VariableSetStmt + 32), &v15[*(int *)(VariableSetStmt + 32)], v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, VariableSetStmt);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterDatabaseSetStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA74C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterDatabaseSetStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA74D24(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for PgQuery_AlterDatabaseSetStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for PgQuery_CompositeTypeStmt(a1, a2, a3, (uint64_t)&unk_18DC0F588, &lazy cache variable for type metadata for PgQuery_VariableSetStmt?, (void (*)(uint64_t))type metadata accessor for PgQuery_VariableSetStmt);
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterDatabaseStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterDatabaseStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_CreateSchemaStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t RoleSpec;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v8 = *(int *)(a3 + 28);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 32);
    v14 = (_QWORD *)((char *)v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
    v17 = *(_QWORD *)(RoleSpec - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RoleSpec))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *v14 = *v15;
      *((_BYTE *)v14 + 8) = *((_BYTE *)v15 + 8);
      v20 = v15[3];
      v14[2] = v15[2];
      v14[3] = v20;
      *((_DWORD *)v14 + 8) = *((_DWORD *)v15 + 8);
      v21 = *(int *)(RoleSpec + 28);
      v22 = (char *)v14 + v21;
      v23 = (char *)v15 + v21;
      swift_bridgeObjectRetain();
      v12((uint64_t)v22, (uint64_t)v23, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RoleSpec);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_CreateSchemaStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t RoleSpec;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 32);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RoleSpec - 8) + 48))(v6, 1, RoleSpec);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(RoleSpec + 28), v5);
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_CreateSchemaStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t RoleSpec;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 32);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v16 = *(_QWORD *)(RoleSpec - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RoleSpec))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    *((_BYTE *)v13 + 8) = *((_BYTE *)v14 + 8);
    v18 = v14[3];
    v13[2] = v14[2];
    v13[3] = v18;
    *((_DWORD *)v13 + 8) = *((_DWORD *)v14 + 8);
    v19 = *(int *)(RoleSpec + 28);
    v20 = (char *)v13 + v19;
    v21 = (char *)v14 + v19;
    swift_bridgeObjectRetain();
    v11((uint64_t)v20, (uint64_t)v21, v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_CreateSchemaStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t RoleSpec;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 32);
  v13 = a1 + v12;
  v14 = a2 + v12;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v16 = *(_QWORD *)(RoleSpec - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, RoleSpec);
  v18 = v17(v14, 1, RoleSpec);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v26 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(_QWORD *)v13 = v26;
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
      *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 32) = *(_DWORD *)(v14 + 32);
      v11(v13 + *(int *)(RoleSpec + 28), v14 + *(int *)(RoleSpec + 28), v9);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v13, (const void *)v14, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  v19 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_QWORD *)v13 = v19;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
  *(_DWORD *)(v13 + 32) = *(_DWORD *)(v14 + 32);
  v20 = *(int *)(RoleSpec + 28);
  v21 = v13 + v20;
  v22 = v14 + v20;
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  v23(v21, v22, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateSchemaStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t RoleSpec;
  uint64_t v15;
  uint64_t v16;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(int *)(a3 + 28);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 32);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v15 = *(_QWORD *)(RoleSpec - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RoleSpec))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_BYTE *)v12 + 8) = *((_BYTE *)v13 + 8);
    *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
    *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 8);
    v10((char *)v12 + *(int *)(RoleSpec + 28), (char *)v13 + *(int *)(RoleSpec + 28), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_CreateSchemaStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t RoleSpec;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  uint64_t v22;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 32);
  v14 = a1 + v13;
  v15 = a2 + v13;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v17 = *(_QWORD *)(RoleSpec - 8);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, RoleSpec);
  v19 = v18(v15, 1, RoleSpec);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
      v22 = *(_QWORD *)(v15 + 24);
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
      *(_QWORD *)(v14 + 24) = v22;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(v15 + 32);
      v12(v14 + *(int *)(RoleSpec + 28), v15 + *(int *)(RoleSpec + 28), v10);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v14, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v14, (const void *)v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  *(_OWORD *)(v14 + 16) = *(_OWORD *)(v15 + 16);
  *(_DWORD *)(v14 + 32) = *(_DWORD *)(v15 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v14 + *(int *)(RoleSpec + 28), v15 + *(int *)(RoleSpec + 28), v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RoleSpec);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateSchemaStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_195Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateSchemaStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_196Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for PgQuery_CreateSchemaStmt()
{
  type metadata completion function for PgQuery_CreateUserMappingStmt();
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_ReindexStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t RangeVar;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t Alias;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = a2[2];
    v8 = a2[3];
    *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
    *(_BYTE *)(a1 + 36) = *((_BYTE *)a2 + 36);
    v9 = *(int *)(a3 + 32);
    v10 = (char *)(a1 + v9);
    v11 = (char *)a2 + v9;
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v8;
    v12 = type metadata accessor for UnknownStorage();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    v14 = *(int *)(a3 + 36);
    v15 = (_QWORD *)((char *)v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    RangeVar = type metadata accessor for PgQuery_RangeVar(0);
    v18 = *(_QWORD *)(RangeVar - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, RangeVar))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v39 = v18;
      v40 = v13;
      v21 = v16[1];
      *v15 = *v16;
      v15[1] = v21;
      v22 = v16[3];
      v15[2] = v16[2];
      v15[3] = v22;
      v23 = v16[5];
      v15[4] = v16[4];
      v15[5] = v23;
      *((_BYTE *)v15 + 48) = *((_BYTE *)v16 + 48);
      v24 = v16[8];
      v15[7] = v16[7];
      v15[8] = v24;
      *((_DWORD *)v15 + 18) = *((_DWORD *)v16 + 18);
      v25 = *(int *)(RangeVar + 40);
      v26 = (char *)v15 + v25;
      v27 = (char *)v16 + v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v40(v26, v27, v12);
      v28 = *(int *)(RangeVar + 44);
      v29 = (_QWORD *)((char *)v15 + v28);
      v30 = (_QWORD *)((char *)v16 + v28);
      Alias = type metadata accessor for PgQuery_Alias(0);
      v32 = *(_QWORD *)(Alias - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v32 + 48))(v30, 1, Alias))
      {
        v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        v34 = v30[1];
        *v29 = *v30;
        v29[1] = v34;
        v29[2] = v30[2];
        v35 = *(int *)(Alias + 24);
        v36 = (char *)v29 + v35;
        v37 = (char *)v30 + v35;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v40(v36, v37, v12);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, Alias);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v15, 0, 1, RangeVar);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_ReindexStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t RangeVar;
  uint64_t result;
  uint64_t v9;
  uint64_t Alias;
  void (*v11)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + *(int *)(a2 + 36);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 48))(v6, 1, RangeVar);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11(v6 + *(int *)(RangeVar + 40), v5);
    v9 = v6 + *(int *)(RangeVar + 44);
    Alias = type metadata accessor for PgQuery_Alias(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Alias - 8) + 48))(v9, 1, Alias);
    if (!(_DWORD)result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9 + *(int *)(Alias + 24), v5);
    }
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_ReindexStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t RangeVar;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t Alias;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v8 = *(int *)(a3 + 32);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  v13 = *(int *)(a3 + 36);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v17 = *(_QWORD *)(RangeVar - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RangeVar))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v37 = v17;
    v38 = v12;
    v19 = v15[1];
    *v14 = *v15;
    v14[1] = v19;
    v20 = v15[3];
    v14[2] = v15[2];
    v14[3] = v20;
    v21 = v15[5];
    v14[4] = v15[4];
    v14[5] = v21;
    *((_BYTE *)v14 + 48) = *((_BYTE *)v15 + 48);
    v22 = v15[8];
    v14[7] = v15[7];
    v14[8] = v22;
    *((_DWORD *)v14 + 18) = *((_DWORD *)v15 + 18);
    v23 = *(int *)(RangeVar + 40);
    v24 = (char *)v14 + v23;
    v25 = (char *)v15 + v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v38(v24, v25, v11);
    v26 = *(int *)(RangeVar + 44);
    v27 = (_QWORD *)((char *)v14 + v26);
    v28 = (_QWORD *)((char *)v15 + v26);
    Alias = type metadata accessor for PgQuery_Alias(0);
    v30 = *(_QWORD *)(Alias - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v30 + 48))(v28, 1, Alias))
    {
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      v32 = v28[1];
      *v27 = *v28;
      v27[1] = v32;
      v27[2] = v28[2];
      v33 = *(int *)(Alias + 24);
      v34 = (char *)v27 + v33;
      v35 = (char *)v28 + v33;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38(v34, v35, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, Alias);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v14, 0, 1, RangeVar);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_ReindexStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t RangeVar;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t Alias;
  uint64_t v36;
  uint64_t (*v37)(_QWORD *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  char *v41;
  char *v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  char *v45;
  char *v47;
  char *v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  *(_BYTE *)(a1 + 36) = *((_BYTE *)a2 + 36);
  v7 = *(int *)(a3 + 32);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 36);
  v14 = a1 + v13;
  v15 = (uint64_t)a2 + v13;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v17 = *(_QWORD *)(RangeVar - 8);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, RangeVar);
  v19 = v18(v15, 1, RangeVar);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *(_QWORD *)(v14 + 8) = *(_QWORD *)(v15 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
      *(_QWORD *)(v14 + 24) = *(_QWORD *)(v15 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
      *(_QWORD *)(v14 + 40) = *(_QWORD *)(v15 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v14 + 48) = *(_BYTE *)(v15 + 48);
      *(_QWORD *)(v14 + 56) = *(_QWORD *)(v15 + 56);
      *(_QWORD *)(v14 + 64) = *(_QWORD *)(v15 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v14 + 72) = *(_DWORD *)(v15 + 72);
      v12(v14 + *(int *)(RangeVar + 40), v15 + *(int *)(RangeVar + 40), v10);
      v32 = *(int *)(RangeVar + 44);
      v33 = (_QWORD *)(v14 + v32);
      v34 = (_QWORD *)(v15 + v32);
      Alias = type metadata accessor for PgQuery_Alias(0);
      v36 = *(_QWORD *)(Alias - 8);
      v37 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v36 + 48);
      v38 = v37(v33, 1, Alias);
      v39 = v37(v34, 1, Alias);
      if (v38)
      {
        if (!v39)
        {
          *v33 = *v34;
          v33[1] = v34[1];
          v33[2] = v34[2];
          v40 = *(int *)(Alias + 24);
          v41 = (char *)v33 + v40;
          v42 = (char *)v34 + v40;
          v43 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v43(v41, v42, v10);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v39)
        {
          *v33 = *v34;
          v33[1] = v34[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v33[2] = v34[2];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v12((uint64_t)v33 + *(int *)(Alias + 24), (uint64_t)v34 + *(int *)(Alias + 24), v10);
          return a1;
        }
        outlined destroy of PgQuery_Alias((uint64_t)v33, type metadata accessor for PgQuery_Alias);
      }
      v29 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      v30 = v33;
      v31 = v34;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v14, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    v29 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    v30 = (void *)v14;
    v31 = (const void *)v15;
LABEL_8:
    memcpy(v30, v31, v29);
    return a1;
  }
  if (v19)
    goto LABEL_7;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_QWORD *)(v14 + 8) = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
  *(_QWORD *)(v14 + 24) = *(_QWORD *)(v15 + 24);
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
  *(_QWORD *)(v14 + 40) = *(_QWORD *)(v15 + 40);
  *(_BYTE *)(v14 + 48) = *(_BYTE *)(v15 + 48);
  *(_QWORD *)(v14 + 56) = *(_QWORD *)(v15 + 56);
  *(_QWORD *)(v14 + 64) = *(_QWORD *)(v15 + 64);
  *(_DWORD *)(v14 + 72) = *(_DWORD *)(v15 + 72);
  v20 = *(int *)(RangeVar + 40);
  v47 = (char *)(v15 + v20);
  v49 = (char *)(v14 + v20);
  v21 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = v49;
  v50 = v21;
  v21(v22, v47, v10);
  v23 = *(int *)(RangeVar + 44);
  v24 = (_QWORD *)(v14 + v23);
  v25 = (_QWORD *)(v15 + v23);
  v26 = type metadata accessor for PgQuery_Alias(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    *v24 = *v25;
    v24[1] = v25[1];
    v24[2] = v25[2];
    v44 = *(int *)(v26 + 24);
    v48 = (char *)v24 + v44;
    v45 = (char *)v25 + v44;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v50(v48, v45, v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RangeVar);
  return a1;
}

uint64_t initializeWithTake for PgQuery_ReindexStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t RangeVar;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t Alias;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v6 = *(int *)(a3 + 32);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 36);
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v15 = *(_QWORD *)(RangeVar - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v12[2] = v13[2];
    *((_BYTE *)v12 + 48) = *((_BYTE *)v13 + 48);
    *(_OWORD *)((char *)v12 + 56) = *(_OWORD *)((char *)v13 + 56);
    *((_DWORD *)v12 + 18) = *((_DWORD *)v13 + 18);
    v10((char *)v12 + *(int *)(RangeVar + 40), (char *)v13 + *(int *)(RangeVar + 40), v9);
    v18 = *(int *)(RangeVar + 44);
    v19 = (_QWORD *)((char *)v12 + v18);
    v20 = (_QWORD *)((char *)v13 + v18);
    Alias = type metadata accessor for PgQuery_Alias(0);
    v22 = *(_QWORD *)(Alias - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, Alias))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v19 = *(_OWORD *)v20;
      v19[2] = v20[2];
      v10((char *)v19 + *(int *)(Alias + 24), (char *)v20 + *(int *)(Alias + 24), v9);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, Alias);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_ReindexStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t RangeVar;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  __int128 v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t Alias;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  int v41;
  int v42;
  uint64_t v44;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v7 = *(int *)(a3 + 32);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 36);
  v14 = a1 + v13;
  v15 = a2 + v13;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v17 = *(_QWORD *)(RangeVar - 8);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, RangeVar);
  v19 = v18(v15, 1, RangeVar);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      v31 = *(_QWORD *)(v15 + 8);
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *(_QWORD *)(v14 + 8) = v31;
      swift_bridgeObjectRelease();
      v32 = *(_QWORD *)(v15 + 24);
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
      *(_QWORD *)(v14 + 24) = v32;
      swift_bridgeObjectRelease();
      v33 = *(_QWORD *)(v15 + 40);
      *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
      *(_QWORD *)(v14 + 40) = v33;
      swift_bridgeObjectRelease();
      *(_BYTE *)(v14 + 48) = *(_BYTE *)(v15 + 48);
      v34 = *(_QWORD *)(v15 + 64);
      *(_QWORD *)(v14 + 56) = *(_QWORD *)(v15 + 56);
      *(_QWORD *)(v14 + 64) = v34;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v14 + 72) = *(_DWORD *)(v15 + 72);
      v12(v14 + *(int *)(RangeVar + 40), v15 + *(int *)(RangeVar + 40), v10);
      v35 = *(int *)(RangeVar + 44);
      v36 = v14 + v35;
      v37 = (char *)(v15 + v35);
      Alias = type metadata accessor for PgQuery_Alias(0);
      v39 = *(_QWORD *)(Alias - 8);
      v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
      v41 = v40(v36, 1, Alias);
      v42 = v40((uint64_t)v37, 1, Alias);
      if (v41)
      {
        if (!v42)
        {
          *(_OWORD *)v36 = *(_OWORD *)v37;
          *(_QWORD *)(v36 + 16) = *((_QWORD *)v37 + 2);
          (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v36 + *(int *)(Alias + 24), &v37[*(int *)(Alias + 24)], v10);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v42)
        {
          v44 = *((_QWORD *)v37 + 1);
          *(_QWORD *)v36 = *(_QWORD *)v37;
          *(_QWORD *)(v36 + 8) = v44;
          swift_bridgeObjectRelease();
          *(_QWORD *)(v36 + 16) = *((_QWORD *)v37 + 2);
          swift_bridgeObjectRelease();
          v12(v36 + *(int *)(Alias + 24), (uint64_t)&v37[*(int *)(Alias + 24)], v10);
          return a1;
        }
        outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Alias);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      v29 = (void *)v36;
      v30 = v37;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v14, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    v29 = (void *)v14;
    v30 = (char *)v15;
LABEL_8:
    memcpy(v29, v30, v28);
    return a1;
  }
  if (v19)
    goto LABEL_7;
  v20 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_OWORD *)(v14 + 16) = v20;
  *(_OWORD *)(v14 + 32) = *(_OWORD *)(v15 + 32);
  *(_BYTE *)(v14 + 48) = *(_BYTE *)(v15 + 48);
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(v15 + 56);
  *(_DWORD *)(v14 + 72) = *(_DWORD *)(v15 + 72);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
  v21(v14 + *(int *)(RangeVar + 40), v15 + *(int *)(RangeVar + 40), v10);
  v22 = *(int *)(RangeVar + 44);
  v23 = (_QWORD *)(v14 + v22);
  v24 = (_QWORD *)(v15 + v22);
  v25 = type metadata accessor for PgQuery_Alias(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v23 = *(_OWORD *)v24;
    v23[2] = v24[2];
    v21((uint64_t)v23 + *(int *)(v25 + 24), (uint64_t)v24 + *(int *)(v25 + 24), v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RangeVar);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_ReindexStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA7682C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 32);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_ReindexStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA768DC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for PgQuery_ReindexStmt()
{
  type metadata completion function for PgQuery_ReindexStmt();
}

{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for PgQuery_ConstraintsSetStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_ConstraintsSetStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_ConstraintsSetStmt()
{
  return type metadata completion function for PgQuery_Alias();
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_AlterStatsStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v5 = a1;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    *(_BYTE *)(a1 + 12) = *((_BYTE *)a2 + 12);
    v6 = *(int *)(a3 + 28);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t initializeWithCopy for PgQuery_AlterStatsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for PgQuery_AlterStatsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_AlterStatsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_AlterStatsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_LockStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_LockStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_ConstraintsSetStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v5 = a1;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v6 = *(int *)(a3 + 24);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for PgQuery_A_ArrayExpr(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_ConstraintsSetStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for PgQuery_ConstraintsSetStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_ConstraintsSetStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_ConstraintsSetStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_DropRoleStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_125Tm(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_DropRoleStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *__swift_store_extra_inhabitant_index_126Tm(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_AlterRoleStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t RoleSpec;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v7 = a1;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    v8 = *(int *)(a3 + 24);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 28);
    v14 = (_QWORD *)(v7 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
    v17 = *(_QWORD *)(RoleSpec - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RoleSpec))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *v14 = *v15;
      *((_BYTE *)v14 + 8) = *((_BYTE *)v15 + 8);
      v19 = v15[3];
      v14[2] = v15[2];
      v14[3] = v19;
      *((_DWORD *)v14 + 8) = *((_DWORD *)v15 + 8);
      v20 = *(int *)(RoleSpec + 28);
      v21 = (char *)v14 + v20;
      v22 = (char *)v15 + v20;
      swift_bridgeObjectRetain();
      v12((uint64_t)v21, (uint64_t)v22, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RoleSpec);
    }
  }
  return v7;
}

uint64_t destroy for PgQuery_AlterRoleStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t RoleSpec;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 28);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RoleSpec - 8) + 48))(v6, 1, RoleSpec);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(RoleSpec + 28), v5);
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_AlterRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t RoleSpec;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v15 = *(_QWORD *)(RoleSpec - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RoleSpec))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_BYTE *)v12 + 8) = *((_BYTE *)v13 + 8);
    v17 = v13[3];
    v12[2] = v13[2];
    v12[3] = v17;
    *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 8);
    v18 = *(int *)(RoleSpec + 28);
    v19 = (char *)v12 + v18;
    v20 = (char *)v13 + v18;
    swift_bridgeObjectRetain();
    v10((uint64_t)v19, (uint64_t)v20, v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_AlterRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t RoleSpec;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = a1 + v12;
  v14 = a2 + v12;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v16 = *(_QWORD *)(RoleSpec - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, RoleSpec);
  v18 = v17(v14, 1, RoleSpec);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v26 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(_QWORD *)v13 = v26;
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
      *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 32) = *(_DWORD *)(v14 + 32);
      v11(v13 + *(int *)(RoleSpec + 28), v14 + *(int *)(RoleSpec + 28), v9);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v13, (const void *)v14, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  v19 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_QWORD *)v13 = v19;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
  *(_DWORD *)(v13 + 32) = *(_DWORD *)(v14 + 32);
  v20 = *(int *)(RoleSpec + 28);
  v21 = v13 + v20;
  v22 = v14 + v20;
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  v23(v21, v22, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  return a1;
}

uint64_t initializeWithTake for PgQuery_AlterRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t RoleSpec;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v15 = *(_QWORD *)(RoleSpec - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RoleSpec))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_BYTE *)v12 + 8) = *((_BYTE *)v13 + 8);
    *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
    *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 8);
    v10((char *)v12 + *(int *)(RoleSpec + 28), (char *)v13 + *(int *)(RoleSpec + 28), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_AlterRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t RoleSpec;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = a1 + v12;
  v14 = a2 + v12;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v16 = *(_QWORD *)(RoleSpec - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, RoleSpec);
  v18 = v17(v14, 1, RoleSpec);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      v21 = *(_QWORD *)(v14 + 24);
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
      *(_QWORD *)(v13 + 24) = v21;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 32) = *(_DWORD *)(v14 + 32);
      v11(v13 + *(int *)(RoleSpec + 28), v14 + *(int *)(RoleSpec + 28), v9);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v13, (const void *)v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_OWORD *)(v13 + 16) = *(_OWORD *)(v14 + 16);
  *(_DWORD *)(v13 + 32) = *(_DWORD *)(v14 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v13 + *(int *)(RoleSpec + 28), v14 + *(int *)(RoleSpec + 28), v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterRoleStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA7785C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterRoleStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_18DA7790C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for PgQuery_AlterRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for PgQuery_VacuumRelation(a1, a2, a3, MEMORY[0x1E0DE9D18] + 64, MEMORY[0x1E0DE9D30] + 64, &lazy cache variable for type metadata for PgQuery_RoleSpec?, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_CreateRoleStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v5 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v5;
    v6 = *(int *)(a3 + 28);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    *(_QWORD *)(a1 + 32) = a2[4];
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for PgQuery_CreateRoleStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_CreateRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_CreateRoleStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_CreateRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateRoleStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_23Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateRoleStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_24Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_CreateRoleStmt()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_CreatePLangStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v5;
    v6 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = a2[5];
    v7 = *(int *)(a3 + 40);
    v8 = (uint64_t)a2 + v7;
    v9 = a1 + v7;
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v9, v8, v10);
  }
  return v3;
}

uint64_t destroy for PgQuery_CreatePLangStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_CreatePLangStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v6 = *(int *)(a3 + 40);
  v7 = a2 + v6;
  v8 = a1 + v6;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v8, v7, v9);
  return a1;
}

uint64_t assignWithCopy for PgQuery_CreatePLangStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(int *)(a3 + 40);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreatePLangStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v4 = *(int *)(a3 + 40);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_CreatePLangStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = *(int *)(a3 + 40);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreatePLangStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA7825C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreatePLangStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA782E4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_CreatePLangStmt()
{
  return type metadata completion function for PgQuery_CreateStatsStmt();
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateTrigStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateTrigStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_DiscardStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v5 = *(int *)(a3 + 20);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t initializeWithCopy for PgQuery_DiscardStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 20);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for PgQuery_DiscardStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = *(int *)(a3 + 20);
  v6 = a1 + v5;
  v7 = (uint64_t)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

uint64_t initializeWithTake for PgQuery_DiscardStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 20);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_DiscardStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 20);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_DiscardStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_DiscardStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PgQuery_DiscardStmt()
{
  return type metadata completion function for PgQuery_OidList();
}

uint64_t getEnumTagSinglePayload for PgQuery_VariableShowStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_VariableShowStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_VariableSetStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v5 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 32) = a2[4];
    v6 = *(int *)(a3 + 32);
    v7 = (uint64_t)a2 + v6;
    v8 = a1 + v6;
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v8, v7, v9);
  }
  return v3;
}

uint64_t destroy for PgQuery_VariableSetStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_VariableSetStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 32);
  v6 = a2 + v5;
  v7 = a1 + v5;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v7, v6, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_VariableSetStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  v7 = *(int *)(a3 + 32);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_VariableSetStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(int *)(a3 + 32);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_VariableSetStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v7 = *(int *)(a3 + 32);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_VariableSetStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA78A08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_VariableSetStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA78A90(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_VariableSetStmt()
{
  return type metadata completion function for PgQuery_InlineCodeBlock();
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_AlterSeqStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t RangeVar;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t Alias;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v7 = a1;
    *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    v8 = *(int *)(a3 + 28);
    v9 = (char *)(a1 + v8);
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 32);
    v14 = (_QWORD *)(v7 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    RangeVar = type metadata accessor for PgQuery_RangeVar(0);
    v17 = *(_QWORD *)(RangeVar - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RangeVar))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v37 = v17;
      v38 = v12;
      v19 = v15[1];
      *v14 = *v15;
      v14[1] = v19;
      v20 = v15[3];
      v14[2] = v15[2];
      v14[3] = v20;
      v21 = v15[5];
      v14[4] = v15[4];
      v14[5] = v21;
      *((_BYTE *)v14 + 48) = *((_BYTE *)v15 + 48);
      v22 = v15[8];
      v14[7] = v15[7];
      v14[8] = v22;
      *((_DWORD *)v14 + 18) = *((_DWORD *)v15 + 18);
      v23 = *(int *)(RangeVar + 40);
      v24 = (char *)v14 + v23;
      v25 = (char *)v15 + v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38(v24, v25, v11);
      v26 = *(int *)(RangeVar + 44);
      v27 = (_QWORD *)((char *)v14 + v26);
      v28 = (_QWORD *)((char *)v15 + v26);
      Alias = type metadata accessor for PgQuery_Alias(0);
      v30 = *(_QWORD *)(Alias - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v30 + 48))(v28, 1, Alias))
      {
        v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        v32 = v28[1];
        *v27 = *v28;
        v27[1] = v32;
        v27[2] = v28[2];
        v33 = *(int *)(Alias + 24);
        v34 = (char *)v27 + v33;
        v35 = (char *)v28 + v33;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v38(v34, v35, v11);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, Alias);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v14, 0, 1, RangeVar);
    }
  }
  return v7;
}

uint64_t initializeWithCopy for PgQuery_AlterSeqStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t RangeVar;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t Alias;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v6 = *(int *)(a3 + 28);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 32);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v15 = *(_QWORD *)(RangeVar - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v35 = v15;
    v36 = v10;
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v18 = v13[3];
    v12[2] = v13[2];
    v12[3] = v18;
    v19 = v13[5];
    v12[4] = v13[4];
    v12[5] = v19;
    *((_BYTE *)v12 + 48) = *((_BYTE *)v13 + 48);
    v20 = v13[8];
    v12[7] = v13[7];
    v12[8] = v20;
    *((_DWORD *)v12 + 18) = *((_DWORD *)v13 + 18);
    v21 = *(int *)(RangeVar + 40);
    v22 = (char *)v12 + v21;
    v23 = (char *)v13 + v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36(v22, v23, v9);
    v24 = *(int *)(RangeVar + 44);
    v25 = (_QWORD *)((char *)v12 + v24);
    v26 = (_QWORD *)((char *)v13 + v24);
    Alias = type metadata accessor for PgQuery_Alias(0);
    v28 = *(_QWORD *)(Alias - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, Alias))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      v30 = v26[1];
      *v25 = *v26;
      v25[1] = v30;
      v25[2] = v26[2];
      v31 = *(int *)(Alias + 24);
      v32 = (char *)v25 + v31;
      v33 = (char *)v26 + v31;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v36(v32, v33, v9);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, Alias);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v12, 0, 1, RangeVar);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_AlterSeqStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t RangeVar;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t Alias;
  uint64_t v35;
  uint64_t (*v36)(_QWORD *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v46;
  char *v47;
  char *v48;
  void (*v49)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 32);
  v13 = a1 + v12;
  v14 = a2 + v12;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v16 = *(_QWORD *)(RangeVar - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, RangeVar);
  v18 = v17(v14, 1, RangeVar);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
      *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
      *(_QWORD *)(v13 + 40) = *(_QWORD *)(v14 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v13 + 48) = *(_BYTE *)(v14 + 48);
      *(_QWORD *)(v13 + 56) = *(_QWORD *)(v14 + 56);
      *(_QWORD *)(v13 + 64) = *(_QWORD *)(v14 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 72) = *(_DWORD *)(v14 + 72);
      v11(v13 + *(int *)(RangeVar + 40), v14 + *(int *)(RangeVar + 40), v9);
      v31 = *(int *)(RangeVar + 44);
      v32 = (_QWORD *)(v13 + v31);
      v33 = (_QWORD *)(v14 + v31);
      Alias = type metadata accessor for PgQuery_Alias(0);
      v35 = *(_QWORD *)(Alias - 8);
      v36 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v35 + 48);
      v37 = v36(v32, 1, Alias);
      v38 = v36(v33, 1, Alias);
      if (v37)
      {
        if (!v38)
        {
          *v32 = *v33;
          v32[1] = v33[1];
          v32[2] = v33[2];
          v39 = *(int *)(Alias + 24);
          v40 = (char *)v32 + v39;
          v41 = (char *)v33 + v39;
          v42 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v42(v40, v41, v9);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v38)
        {
          *v32 = *v33;
          v32[1] = v33[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v32[2] = v33[2];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v11((uint64_t)v32 + *(int *)(Alias + 24), (uint64_t)v33 + *(int *)(Alias + 24), v9);
          return a1;
        }
        outlined destroy of PgQuery_Alias((uint64_t)v32, type metadata accessor for PgQuery_Alias);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      v29 = v32;
      v30 = v33;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    v29 = (void *)v13;
    v30 = (const void *)v14;
LABEL_8:
    memcpy(v29, v30, v28);
    return a1;
  }
  if (v18)
    goto LABEL_7;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
  *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
  *(_QWORD *)(v13 + 40) = *(_QWORD *)(v14 + 40);
  *(_BYTE *)(v13 + 48) = *(_BYTE *)(v14 + 48);
  *(_QWORD *)(v13 + 56) = *(_QWORD *)(v14 + 56);
  *(_QWORD *)(v13 + 64) = *(_QWORD *)(v14 + 64);
  *(_DWORD *)(v13 + 72) = *(_DWORD *)(v14 + 72);
  v19 = *(int *)(RangeVar + 40);
  v46 = (char *)(v14 + v19);
  v48 = (char *)(v13 + v19);
  v20 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = v48;
  v49 = v20;
  v20(v21, v46, v9);
  v22 = *(int *)(RangeVar + 44);
  v23 = (_QWORD *)(v13 + v22);
  v24 = (_QWORD *)(v14 + v22);
  v25 = type metadata accessor for PgQuery_Alias(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    *v23 = *v24;
    v23[1] = v24[1];
    v23[2] = v24[2];
    v43 = *(int *)(v25 + 24);
    v47 = (char *)v23 + v43;
    v44 = (char *)v24 + v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v49(v47, v44, v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RangeVar);
  return a1;
}

uint64_t initializeWithTake for PgQuery_AlterSeqStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t RangeVar;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t Alias;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v6 = *(int *)(a3 + 28);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 32);
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v15 = *(_QWORD *)(RangeVar - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v12[2] = v13[2];
    *((_BYTE *)v12 + 48) = *((_BYTE *)v13 + 48);
    *(_OWORD *)((char *)v12 + 56) = *(_OWORD *)((char *)v13 + 56);
    *((_DWORD *)v12 + 18) = *((_DWORD *)v13 + 18);
    v10((char *)v12 + *(int *)(RangeVar + 40), (char *)v13 + *(int *)(RangeVar + 40), v9);
    v18 = *(int *)(RangeVar + 44);
    v19 = (_QWORD *)((char *)v12 + v18);
    v20 = (_QWORD *)((char *)v13 + v18);
    Alias = type metadata accessor for PgQuery_Alias(0);
    v22 = *(_QWORD *)(Alias - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, Alias))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v19 = *(_OWORD *)v20;
      v19[2] = v20[2];
      v10((char *)v19 + *(int *)(Alias + 24), (char *)v20 + *(int *)(Alias + 24), v9);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, Alias);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_AlterSeqStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t RangeVar;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  __int128 v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t Alias;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v43;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 32);
  v13 = a1 + v12;
  v14 = a2 + v12;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v16 = *(_QWORD *)(RangeVar - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, RangeVar);
  v18 = v17(v14, 1, RangeVar);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v30 = *(_QWORD *)(v14 + 8);
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *(_QWORD *)(v13 + 8) = v30;
      swift_bridgeObjectRelease();
      v31 = *(_QWORD *)(v14 + 24);
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
      *(_QWORD *)(v13 + 24) = v31;
      swift_bridgeObjectRelease();
      v32 = *(_QWORD *)(v14 + 40);
      *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
      *(_QWORD *)(v13 + 40) = v32;
      swift_bridgeObjectRelease();
      *(_BYTE *)(v13 + 48) = *(_BYTE *)(v14 + 48);
      v33 = *(_QWORD *)(v14 + 64);
      *(_QWORD *)(v13 + 56) = *(_QWORD *)(v14 + 56);
      *(_QWORD *)(v13 + 64) = v33;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 72) = *(_DWORD *)(v14 + 72);
      v11(v13 + *(int *)(RangeVar + 40), v14 + *(int *)(RangeVar + 40), v9);
      v34 = *(int *)(RangeVar + 44);
      v35 = v13 + v34;
      v36 = (char *)(v14 + v34);
      Alias = type metadata accessor for PgQuery_Alias(0);
      v38 = *(_QWORD *)(Alias - 8);
      v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
      v40 = v39(v35, 1, Alias);
      v41 = v39((uint64_t)v36, 1, Alias);
      if (v40)
      {
        if (!v41)
        {
          *(_OWORD *)v35 = *(_OWORD *)v36;
          *(_QWORD *)(v35 + 16) = *((_QWORD *)v36 + 2);
          (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v35 + *(int *)(Alias + 24), &v36[*(int *)(Alias + 24)], v9);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v41)
        {
          v43 = *((_QWORD *)v36 + 1);
          *(_QWORD *)v35 = *(_QWORD *)v36;
          *(_QWORD *)(v35 + 8) = v43;
          swift_bridgeObjectRelease();
          *(_QWORD *)(v35 + 16) = *((_QWORD *)v36 + 2);
          swift_bridgeObjectRelease();
          v11(v35 + *(int *)(Alias + 24), (uint64_t)&v36[*(int *)(Alias + 24)], v9);
          return a1;
        }
        outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Alias);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      v28 = (void *)v35;
      v29 = v36;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    v28 = (void *)v13;
    v29 = (char *)v14;
LABEL_8:
    memcpy(v28, v29, v27);
    return a1;
  }
  if (v18)
    goto LABEL_7;
  v19 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v19;
  *(_OWORD *)(v13 + 32) = *(_OWORD *)(v14 + 32);
  *(_BYTE *)(v13 + 48) = *(_BYTE *)(v14 + 48);
  *(_OWORD *)(v13 + 56) = *(_OWORD *)(v14 + 56);
  *(_DWORD *)(v13 + 72) = *(_DWORD *)(v14 + 72);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  v20(v13 + *(int *)(RangeVar + 40), v14 + *(int *)(RangeVar + 40), v9);
  v21 = *(int *)(RangeVar + 44);
  v22 = (_QWORD *)(v13 + v21);
  v23 = (_QWORD *)(v14 + v21);
  v24 = type metadata accessor for PgQuery_Alias(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v22 = *(_OWORD *)v23;
    v22[2] = v23[2];
    v20((uint64_t)v22 + *(int *)(v24 + 24), (uint64_t)v23 + *(int *)(v24 + 24), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RangeVar);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterSeqStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterSeqStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void type metadata completion function for PgQuery_AlterSeqStmt()
{
  type metadata completion function for PgQuery_AlterTableStmt();
}

void type metadata completion function for PgQuery_AlterTableStmt()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

{
  type metadata completion function for PgQuery_AlterTableStmt();
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_CreateSeqStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t RangeVar;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t Alias;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v7 = a1;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    *(_WORD *)(a1 + 12) = *((_WORD *)a2 + 6);
    v8 = *(int *)(a3 + 32);
    v9 = (char *)(a1 + v8);
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 36);
    v14 = (_QWORD *)(v7 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    RangeVar = type metadata accessor for PgQuery_RangeVar(0);
    v17 = *(_QWORD *)(RangeVar - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RangeVar))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v37 = v17;
      v38 = v12;
      v19 = v15[1];
      *v14 = *v15;
      v14[1] = v19;
      v20 = v15[3];
      v14[2] = v15[2];
      v14[3] = v20;
      v21 = v15[5];
      v14[4] = v15[4];
      v14[5] = v21;
      *((_BYTE *)v14 + 48) = *((_BYTE *)v15 + 48);
      v22 = v15[8];
      v14[7] = v15[7];
      v14[8] = v22;
      *((_DWORD *)v14 + 18) = *((_DWORD *)v15 + 18);
      v23 = *(int *)(RangeVar + 40);
      v24 = (char *)v14 + v23;
      v25 = (char *)v15 + v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38(v24, v25, v11);
      v26 = *(int *)(RangeVar + 44);
      v27 = (_QWORD *)((char *)v14 + v26);
      v28 = (_QWORD *)((char *)v15 + v26);
      Alias = type metadata accessor for PgQuery_Alias(0);
      v30 = *(_QWORD *)(Alias - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v30 + 48))(v28, 1, Alias))
      {
        v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        v32 = v28[1];
        *v27 = *v28;
        v27[1] = v32;
        v27[2] = v28[2];
        v33 = *(int *)(Alias + 24);
        v34 = (char *)v27 + v33;
        v35 = (char *)v28 + v33;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v38(v34, v35, v11);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, Alias);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v14, 0, 1, RangeVar);
    }
  }
  return v7;
}

uint64_t destroy for PgQuery_CreateSeqStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t RangeVar;
  uint64_t result;
  uint64_t v9;
  uint64_t Alias;
  void (*v11)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + *(int *)(a2 + 36);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 48))(v6, 1, RangeVar);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11(v6 + *(int *)(RangeVar + 40), v5);
    v9 = v6 + *(int *)(RangeVar + 44);
    Alias = type metadata accessor for PgQuery_Alias(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Alias - 8) + 48))(v9, 1, Alias);
    if (!(_DWORD)result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9 + *(int *)(Alias + 24), v5);
    }
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_CreateSeqStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t RangeVar;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t Alias;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  v6 = *(int *)(a3 + 32);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 36);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v15 = *(_QWORD *)(RangeVar - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v35 = v15;
    v36 = v10;
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v18 = v13[3];
    v12[2] = v13[2];
    v12[3] = v18;
    v19 = v13[5];
    v12[4] = v13[4];
    v12[5] = v19;
    *((_BYTE *)v12 + 48) = *((_BYTE *)v13 + 48);
    v20 = v13[8];
    v12[7] = v13[7];
    v12[8] = v20;
    *((_DWORD *)v12 + 18) = *((_DWORD *)v13 + 18);
    v21 = *(int *)(RangeVar + 40);
    v22 = (char *)v12 + v21;
    v23 = (char *)v13 + v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36(v22, v23, v9);
    v24 = *(int *)(RangeVar + 44);
    v25 = (_QWORD *)((char *)v12 + v24);
    v26 = (_QWORD *)((char *)v13 + v24);
    Alias = type metadata accessor for PgQuery_Alias(0);
    v28 = *(_QWORD *)(Alias - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, Alias))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      v30 = v26[1];
      *v25 = *v26;
      v25[1] = v30;
      v25[2] = v26[2];
      v31 = *(int *)(Alias + 24);
      v32 = (char *)v25 + v31;
      v33 = (char *)v26 + v31;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v36(v32, v33, v9);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, Alias);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v12, 0, 1, RangeVar);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_CreateSeqStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t RangeVar;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t Alias;
  uint64_t v35;
  uint64_t (*v36)(_QWORD *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v46;
  char *v47;
  char *v48;
  void (*v49)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  v6 = *(int *)(a3 + 32);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 36);
  v13 = a1 + v12;
  v14 = a2 + v12;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v16 = *(_QWORD *)(RangeVar - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, RangeVar);
  v18 = v17(v14, 1, RangeVar);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
      *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
      *(_QWORD *)(v13 + 40) = *(_QWORD *)(v14 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v13 + 48) = *(_BYTE *)(v14 + 48);
      *(_QWORD *)(v13 + 56) = *(_QWORD *)(v14 + 56);
      *(_QWORD *)(v13 + 64) = *(_QWORD *)(v14 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 72) = *(_DWORD *)(v14 + 72);
      v11(v13 + *(int *)(RangeVar + 40), v14 + *(int *)(RangeVar + 40), v9);
      v31 = *(int *)(RangeVar + 44);
      v32 = (_QWORD *)(v13 + v31);
      v33 = (_QWORD *)(v14 + v31);
      Alias = type metadata accessor for PgQuery_Alias(0);
      v35 = *(_QWORD *)(Alias - 8);
      v36 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v35 + 48);
      v37 = v36(v32, 1, Alias);
      v38 = v36(v33, 1, Alias);
      if (v37)
      {
        if (!v38)
        {
          *v32 = *v33;
          v32[1] = v33[1];
          v32[2] = v33[2];
          v39 = *(int *)(Alias + 24);
          v40 = (char *)v32 + v39;
          v41 = (char *)v33 + v39;
          v42 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v42(v40, v41, v9);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v38)
        {
          *v32 = *v33;
          v32[1] = v33[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v32[2] = v33[2];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v11((uint64_t)v32 + *(int *)(Alias + 24), (uint64_t)v33 + *(int *)(Alias + 24), v9);
          return a1;
        }
        outlined destroy of PgQuery_Alias((uint64_t)v32, type metadata accessor for PgQuery_Alias);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      v29 = v32;
      v30 = v33;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    v29 = (void *)v13;
    v30 = (const void *)v14;
LABEL_8:
    memcpy(v29, v30, v28);
    return a1;
  }
  if (v18)
    goto LABEL_7;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
  *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
  *(_QWORD *)(v13 + 40) = *(_QWORD *)(v14 + 40);
  *(_BYTE *)(v13 + 48) = *(_BYTE *)(v14 + 48);
  *(_QWORD *)(v13 + 56) = *(_QWORD *)(v14 + 56);
  *(_QWORD *)(v13 + 64) = *(_QWORD *)(v14 + 64);
  *(_DWORD *)(v13 + 72) = *(_DWORD *)(v14 + 72);
  v19 = *(int *)(RangeVar + 40);
  v46 = (char *)(v14 + v19);
  v48 = (char *)(v13 + v19);
  v20 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = v48;
  v49 = v20;
  v20(v21, v46, v9);
  v22 = *(int *)(RangeVar + 44);
  v23 = (_QWORD *)(v13 + v22);
  v24 = (_QWORD *)(v14 + v22);
  v25 = type metadata accessor for PgQuery_Alias(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    *v23 = *v24;
    v23[1] = v24[1];
    v23[2] = v24[2];
    v43 = *(int *)(v25 + 24);
    v47 = (char *)v23 + v43;
    v44 = (char *)v24 + v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v49(v47, v44, v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RangeVar);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateSeqStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t RangeVar;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t Alias;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  v6 = *(int *)(a3 + 32);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 36);
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v15 = *(_QWORD *)(RangeVar - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v12[2] = v13[2];
    *((_BYTE *)v12 + 48) = *((_BYTE *)v13 + 48);
    *(_OWORD *)((char *)v12 + 56) = *(_OWORD *)((char *)v13 + 56);
    *((_DWORD *)v12 + 18) = *((_DWORD *)v13 + 18);
    v10((char *)v12 + *(int *)(RangeVar + 40), (char *)v13 + *(int *)(RangeVar + 40), v9);
    v18 = *(int *)(RangeVar + 44);
    v19 = (_QWORD *)((char *)v12 + v18);
    v20 = (_QWORD *)((char *)v13 + v18);
    Alias = type metadata accessor for PgQuery_Alias(0);
    v22 = *(_QWORD *)(Alias - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, Alias))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v19 = *(_OWORD *)v20;
      v19[2] = v20[2];
      v10((char *)v19 + *(int *)(Alias + 24), (char *)v20 + *(int *)(Alias + 24), v9);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, Alias);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_CreateSeqStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t RangeVar;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  __int128 v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t Alias;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v43;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  v6 = *(int *)(a3 + 32);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 36);
  v13 = a1 + v12;
  v14 = a2 + v12;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v16 = *(_QWORD *)(RangeVar - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, RangeVar);
  v18 = v17(v14, 1, RangeVar);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v30 = *(_QWORD *)(v14 + 8);
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *(_QWORD *)(v13 + 8) = v30;
      swift_bridgeObjectRelease();
      v31 = *(_QWORD *)(v14 + 24);
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
      *(_QWORD *)(v13 + 24) = v31;
      swift_bridgeObjectRelease();
      v32 = *(_QWORD *)(v14 + 40);
      *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
      *(_QWORD *)(v13 + 40) = v32;
      swift_bridgeObjectRelease();
      *(_BYTE *)(v13 + 48) = *(_BYTE *)(v14 + 48);
      v33 = *(_QWORD *)(v14 + 64);
      *(_QWORD *)(v13 + 56) = *(_QWORD *)(v14 + 56);
      *(_QWORD *)(v13 + 64) = v33;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 72) = *(_DWORD *)(v14 + 72);
      v11(v13 + *(int *)(RangeVar + 40), v14 + *(int *)(RangeVar + 40), v9);
      v34 = *(int *)(RangeVar + 44);
      v35 = v13 + v34;
      v36 = (char *)(v14 + v34);
      Alias = type metadata accessor for PgQuery_Alias(0);
      v38 = *(_QWORD *)(Alias - 8);
      v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
      v40 = v39(v35, 1, Alias);
      v41 = v39((uint64_t)v36, 1, Alias);
      if (v40)
      {
        if (!v41)
        {
          *(_OWORD *)v35 = *(_OWORD *)v36;
          *(_QWORD *)(v35 + 16) = *((_QWORD *)v36 + 2);
          (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v35 + *(int *)(Alias + 24), &v36[*(int *)(Alias + 24)], v9);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v41)
        {
          v43 = *((_QWORD *)v36 + 1);
          *(_QWORD *)v35 = *(_QWORD *)v36;
          *(_QWORD *)(v35 + 8) = v43;
          swift_bridgeObjectRelease();
          *(_QWORD *)(v35 + 16) = *((_QWORD *)v36 + 2);
          swift_bridgeObjectRelease();
          v11(v35 + *(int *)(Alias + 24), (uint64_t)&v36[*(int *)(Alias + 24)], v9);
          return a1;
        }
        outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Alias);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      v28 = (void *)v35;
      v29 = v36;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    v28 = (void *)v13;
    v29 = (char *)v14;
LABEL_8:
    memcpy(v28, v29, v27);
    return a1;
  }
  if (v18)
    goto LABEL_7;
  v19 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v19;
  *(_OWORD *)(v13 + 32) = *(_OWORD *)(v14 + 32);
  *(_BYTE *)(v13 + 48) = *(_BYTE *)(v14 + 48);
  *(_OWORD *)(v13 + 56) = *(_OWORD *)(v14 + 56);
  *(_DWORD *)(v13 + 72) = *(_DWORD *)(v14 + 72);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  v20(v13 + *(int *)(RangeVar + 40), v14 + *(int *)(RangeVar + 40), v9);
  v21 = *(int *)(RangeVar + 44);
  v22 = (_QWORD *)(v13 + v21);
  v23 = (_QWORD *)(v14 + v21);
  v24 = type metadata accessor for PgQuery_Alias(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v22 = *(_OWORD *)v23;
    v22[2] = v23[2];
    v20((uint64_t)v22 + *(int *)(v24 + 24), (uint64_t)v23 + *(int *)(v24 + 24), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RangeVar);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateSeqStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA7A964(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 32);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateSeqStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_18DA7AA14(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for PgQuery_CreateSeqStmt()
{
  type metadata completion function for PgQuery_ReindexStmt();
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateTableAsStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateTableAsStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_ExplainStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_ExplainStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_ObjectWithArgs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v5 = a1;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v6 = *(int *)(a3 + 28);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for PgQuery_ObjectWithArgs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_ObjectWithArgs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_ObjectWithArgs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_ObjectWithArgs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_ObjectWithArgs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_VacuumStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_VacuumStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_CreateExtensionStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_QWORD *)(a1 + 24) = a2[3];
    v6 = *(int *)(a3 + 28);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for PgQuery_CreateExtensionStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_CreateExtensionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_CreateExtensionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateExtensionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_CreateExtensionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_DropdbStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_19Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_DropdbStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_20Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_Alias(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    a1[2] = a2[2];
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for PgQuery_Alias(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for PgQuery_Alias(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for PgQuery_Alias(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_Alias(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for PgQuery_Alias(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreatedbStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreatedbStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateDomainStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateDomainStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_LoadStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_LoadStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_ViewStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_ViewStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_TransactionStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v5 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v5;
    v6 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v6;
    *(_QWORD *)(a1 + 48) = a2[6];
    v7 = *(int *)(a3 + 36);
    v8 = (uint64_t)a2 + v7;
    v9 = a1 + v7;
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v9, v8, v10);
  }
  return v3;
}

uint64_t destroy for PgQuery_TransactionStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_TransactionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = *(int *)(a3 + 36);
  v7 = a2 + v6;
  v8 = a1 + v6;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v8, v7, v9);
  return a1;
}

uint64_t assignWithCopy for PgQuery_TransactionStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  v7 = *(int *)(a3 + 36);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_TransactionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = *(int *)(a3 + 36);
  v5 = a2 + v4;
  v6 = a1 + v4;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, v5, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_TransactionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v8 = *(int *)(a3 + 36);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_TransactionStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA7BA84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_TransactionStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA7BB0C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_TransactionStmt()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PgQuery_UnlistenStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_UnlistenStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_ListenStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_ListenStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_ReplicaIdentityStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t destroy for PgQuery_ReplicaIdentityStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for PgQuery_ReplicaIdentityStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

_QWORD *assignWithCopy for PgQuery_ReplicaIdentityStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for PgQuery_ReplicaIdentityStmt(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_QWORD *assignWithTake for PgQuery_ReplicaIdentityStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_NotifyStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_NotifyStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_40Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PgQuery_RuleStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_RuleStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_RenameStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_RenameStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_OidList(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for PgQuery_OidList(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for PgQuery_OidList(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for PgQuery_OidList(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *initializeWithTake for PgQuery_OidList(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for PgQuery_OidList(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_DoStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_43Tm(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_DoStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *__swift_store_extra_inhabitant_index_44Tm(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_AlterFunctionStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t ObjectWithArgs;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 16) = a2[2];
    v7 = *(int *)(a3 + 24);
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    v12 = *(int *)(a3 + 28);
    v13 = (_QWORD *)((char *)v4 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
    v16 = *(_QWORD *)(ObjectWithArgs - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, ObjectWithArgs))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v19 = v14[1];
      *v13 = *v14;
      v13[1] = v19;
      *((_BYTE *)v13 + 16) = *((_BYTE *)v14 + 16);
      v20 = *(int *)(ObjectWithArgs + 28);
      v21 = (char *)v13 + v20;
      v22 = (char *)v14 + v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11((uint64_t)v21, (uint64_t)v22, v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, ObjectWithArgs);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_AlterFunctionStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectWithArgs;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 28);
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(ObjectWithArgs - 8) + 48))(v6, 1, ObjectWithArgs);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(ObjectWithArgs + 28), v5);
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_AlterFunctionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t ObjectWithArgs;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  v15 = *(_QWORD *)(ObjectWithArgs - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, ObjectWithArgs))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    *((_BYTE *)v12 + 16) = *((_BYTE *)v13 + 16);
    v18 = *(int *)(ObjectWithArgs + 28);
    v19 = (char *)v12 + v18;
    v20 = (char *)v13 + v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10((uint64_t)v19, (uint64_t)v20, v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, ObjectWithArgs);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_AlterFunctionStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectWithArgs;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 28);
  v14 = a1 + v13;
  v15 = (uint64_t)a2 + v13;
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  v17 = *(_QWORD *)(ObjectWithArgs - 8);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, ObjectWithArgs);
  v19 = v18(v15, 1, ObjectWithArgs);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      *(_QWORD *)v14 = *(_QWORD *)v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v14 + 8) = *(_QWORD *)(v15 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v14 + 16) = *(_BYTE *)(v15 + 16);
      v12(v14 + *(int *)(ObjectWithArgs + 28), v15 + *(int *)(ObjectWithArgs + 28), v10);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v14, type metadata accessor for PgQuery_ObjectWithArgs);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy((void *)v14, (const void *)v15, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_QWORD *)(v14 + 8) = *(_QWORD *)(v15 + 8);
  *(_BYTE *)(v14 + 16) = *(_BYTE *)(v15 + 16);
  v20 = *(int *)(ObjectWithArgs + 28);
  v21 = v14 + v20;
  v22 = v15 + v20;
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23(v21, v22, v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, ObjectWithArgs);
  return a1;
}

uint64_t initializeWithTake for PgQuery_AlterFunctionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  void (*v10)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t ObjectWithArgs;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 24);
  v7 = (_BYTE *)(a1 + v6);
  v8 = (_BYTE *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_BYTE *)(a1 + v11);
  v13 = (_BYTE *)(a2 + v11);
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  v15 = *(_QWORD *)(ObjectWithArgs - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v13, 1, ObjectWithArgs))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v12 = *(_OWORD *)v13;
    v12[16] = v13[16];
    v10(&v12[*(int *)(ObjectWithArgs + 28)], &v13[*(int *)(ObjectWithArgs + 28)], v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, ObjectWithArgs);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_AlterFunctionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t ObjectWithArgs;
  uint64_t v16;
  uint64_t (*v17)(_BYTE *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = (_BYTE *)(a1 + v12);
  v14 = (_BYTE *)(a2 + v12);
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  v16 = *(_QWORD *)(ObjectWithArgs - 8);
  v17 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, ObjectWithArgs);
  v18 = v17(v14, 1, ObjectWithArgs);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      swift_bridgeObjectRelease();
      *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
      swift_bridgeObjectRelease();
      v13[16] = v14[16];
      v11((uint64_t)&v13[*(int *)(ObjectWithArgs + 28)], (uint64_t)&v14[*(int *)(ObjectWithArgs + 28)], v9);
      return a1;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v13, type metadata accessor for PgQuery_ObjectWithArgs);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v13 = *(_OWORD *)v14;
  v13[16] = v14[16];
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(&v13[*(int *)(ObjectWithArgs + 28)], &v14[*(int *)(ObjectWithArgs + 28)], v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, ObjectWithArgs);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterFunctionStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA7CBD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterFunctionStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA7CC80(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for PgQuery_AlterFunctionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for PgQuery_VacuumRelation(a1, a2, a3, (uint64_t)&unk_18DC0F558, MEMORY[0x1E0DE9D18] + 64, &lazy cache variable for type metadata for PgQuery_ObjectWithArgs?, (void (*)(uint64_t))type metadata accessor for PgQuery_ObjectWithArgs);
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_CreateFunctionStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t TypeName;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    a1[3] = a2[3];
    v8 = *(int *)(a3 + 36);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 40);
    v14 = (uint64_t *)((char *)v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    TypeName = type metadata accessor for PgQuery_TypeName(0);
    v17 = *(_QWORD *)(TypeName - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, TypeName))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *v14 = *v15;
      *((_DWORD *)v14 + 2) = *((_DWORD *)v15 + 2);
      *((_WORD *)v14 + 6) = *((_WORD *)v15 + 6);
      v14[2] = v15[2];
      *((_DWORD *)v14 + 6) = *((_DWORD *)v15 + 6);
      v14[4] = v15[4];
      *((_DWORD *)v14 + 10) = *((_DWORD *)v15 + 10);
      v20 = *(int *)(TypeName + 48);
      v21 = (char *)v14 + v20;
      v22 = (char *)v15 + v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12(v21, v22, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, TypeName);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_CreateFunctionStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t TypeName;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 40);
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TypeName - 8) + 48))(v6, 1, TypeName);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(TypeName + 48), v5);
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_CreateFunctionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t TypeName;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  *(_WORD *)a1 = *(_WORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v7 = *(int *)(a3 + 36);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 40);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v16 = *(_QWORD *)(TypeName - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, TypeName))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    *((_DWORD *)v13 + 2) = *((_DWORD *)v14 + 2);
    *((_WORD *)v13 + 6) = *((_WORD *)v14 + 6);
    v13[2] = v14[2];
    *((_DWORD *)v13 + 6) = *((_DWORD *)v14 + 6);
    v13[4] = v14[4];
    *((_DWORD *)v13 + 10) = *((_DWORD *)v14 + 10);
    v18 = *(int *)(TypeName + 48);
    v19 = (char *)v13 + v18;
    v20 = (char *)v14 + v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11((uint64_t)v19, (uint64_t)v20, v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, TypeName);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_CreateFunctionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TypeName;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 36);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 40);
  v13 = a1 + v12;
  v14 = a2 + v12;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v16 = *(_QWORD *)(TypeName - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, TypeName);
  v18 = v17(v14, 1, TypeName);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
      *(_BYTE *)(v13 + 12) = *(_BYTE *)(v14 + 12);
      *(_BYTE *)(v13 + 13) = *(_BYTE *)(v14 + 13);
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 24) = *(_DWORD *)(v14 + 24);
      *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 40) = *(_DWORD *)(v14 + 40);
      v11(v13 + *(int *)(TypeName + 48), v14 + *(int *)(TypeName + 48), v9);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_TypeName);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy((void *)v13, (const void *)v14, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
  *(_BYTE *)(v13 + 12) = *(_BYTE *)(v14 + 12);
  *(_BYTE *)(v13 + 13) = *(_BYTE *)(v14 + 13);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  *(_DWORD *)(v13 + 24) = *(_DWORD *)(v14 + 24);
  *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
  *(_DWORD *)(v13 + 40) = *(_DWORD *)(v14 + 40);
  v19 = *(int *)(TypeName + 48);
  v20 = v13 + v19;
  v21 = v14 + v19;
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22(v20, v21, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, TypeName);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateFunctionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t TypeName;
  uint64_t v15;
  uint64_t v16;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(int *)(a3 + 36);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 40);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v15 = *(_QWORD *)(TypeName - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, TypeName))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_DWORD *)v12 + 2) = *((_DWORD *)v13 + 2);
    *((_WORD *)v12 + 6) = *((_WORD *)v13 + 6);
    v12[2] = v13[2];
    *((_DWORD *)v12 + 6) = *((_DWORD *)v13 + 6);
    v12[4] = v13[4];
    *((_DWORD *)v12 + 10) = *((_DWORD *)v13 + 10);
    v10((char *)v12 + *(int *)(TypeName + 48), (char *)v13 + *(int *)(TypeName + 48), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, TypeName);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_CreateFunctionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TypeName;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 36);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 40);
  v13 = a1 + v12;
  v14 = a2 + v12;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v16 = *(_QWORD *)(TypeName - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, TypeName);
  v18 = v17(v14, 1, TypeName);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
      *(_BYTE *)(v13 + 12) = *(_BYTE *)(v14 + 12);
      *(_BYTE *)(v13 + 13) = *(_BYTE *)(v14 + 13);
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 24) = *(_DWORD *)(v14 + 24);
      *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 40) = *(_DWORD *)(v14 + 40);
      v11(v13 + *(int *)(TypeName + 48), v14 + *(int *)(TypeName + 48), v9);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_TypeName);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy((void *)v13, (const void *)v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
  *(_WORD *)(v13 + 12) = *(_WORD *)(v14 + 12);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  *(_DWORD *)(v13 + 24) = *(_DWORD *)(v14 + 24);
  *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
  *(_DWORD *)(v13 + 40) = *(_DWORD *)(v14 + 40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v13 + *(int *)(TypeName + 48), v14 + *(int *)(TypeName + 48), v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, TypeName);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateFunctionStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA7D720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_113Tm(a1, a2, a3, &demangling cache variable for type metadata for PgQuery_TypeName?);
}

uint64_t __swift_get_extra_inhabitant_index_113Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (v5 >= 0xFFFFFFFF)
      LODWORD(v5) = -1;
    return (v5 + 1);
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      v12 = v10;
      v13 = *(int *)(a3 + 36);
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(a4);
      v11 = *(_QWORD *)(v12 - 8);
      v13 = *(int *)(a3 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1 + v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateFunctionStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA7D7DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_114Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for PgQuery_TypeName?);
}

uint64_t __swift_store_extra_inhabitant_index_114Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a3)
    {
      v12 = v10;
      v13 = *(int *)(a4 + 36);
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = *(_QWORD *)(v12 - 8);
      v13 = *(int *)(a4 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v6 + v13, a2, a2, v12);
  }
  return result;
}

void type metadata completion function for PgQuery_CreateFunctionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for PgQuery_RangeFunction(a1, a2, a3, MEMORY[0x1E0DE9D18] + 64, &lazy cache variable for type metadata for PgQuery_TypeName?, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
}

void type metadata completion function for PgQuery_RangeFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, void (*a6)(uint64_t))
{
  unint64_t v8;
  unint64_t v9;

  type metadata accessor for UnknownStorage();
  if (v8 <= 0x3F)
  {
    type metadata accessor for Date?(319, a5, a6);
    if (v9 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for PgQuery_IndexStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_IndexStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_FetchStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_QWORD *)(a1 + 32) = a2[4];
    v5 = *(int *)(a3 + 32);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for PgQuery_FetchStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_FetchStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(int *)(a3 + 32);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for PgQuery_FetchStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  v7 = *(int *)(a3 + 32);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_FetchStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(int *)(a3 + 32);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_FetchStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(int *)(a3 + 32);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_FetchStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA7DCD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_FetchStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA7DD5C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_FetchStmt()
{
  return type metadata completion function for PgQuery_InlineCodeBlock();
}

uint64_t getEnumTagSinglePayload for PgQuery_CommentStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CommentStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_TruncateStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v5 = a1;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v6 = *(int *)(a3 + 28);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for PgQuery_WithClause(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_TruncateStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for PgQuery_TruncateStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_TruncateStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_TruncateStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_TruncateStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_13Tm(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_TruncateStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *__swift_store_extra_inhabitant_index_14Tm(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_TruncateStmt()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_DropStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v5 = a1;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v6 = *(int *)(a3 + 36);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    *(_WORD *)(a1 + 33) = *(_WORD *)((char *)a2 + 33);
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for PgQuery_DropStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_DropStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(int *)(a3 + 36);
  v6 = a2 + v5;
  v7 = a1 + v5;
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v7, v6, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_DropStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  v8 = *(int *)(a3 + 36);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

uint64_t initializeWithTake for PgQuery_DropStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(int *)(a3 + 36);
  v6 = a2 + v5;
  v7 = a1 + v5;
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, v6, v8);
  return a1;
}

uint64_t assignWithTake for PgQuery_DropStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v6 = *(_BYTE *)(a2 + 34);
  v7 = *(int *)(a3 + 36);
  v8 = a2 + v7;
  v9 = a1 + v7;
  *(_BYTE *)(a1 + 34) = v6;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v9, v8, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_DropStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_251Tm(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 36)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_DropStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *__swift_store_extra_inhabitant_index_252Tm(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 36)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_DropStmt()
{
  return type metadata completion function for PgQuery_SortGroupClause();
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_DefineStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    v5 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 32) = a2[4];
    v6 = *(int *)(a3 + 44);
    v7 = (uint64_t)a2 + v6;
    v8 = a1 + v6;
    *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v8, v7, v9);
  }
  return v3;
}

uint64_t destroy for PgQuery_AlterTSConfigurationStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 44);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_DefineStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 44);
  v6 = a2 + v5;
  v7 = a1 + v5;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v7, v6, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_DefineStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_BYTE *)(a1 + 41) = *((_BYTE *)a2 + 41);
  v7 = *(int *)(a3 + 44);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_DefineStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  v4 = *(int *)(a3 + 44);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_DefineStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v6 = *(int *)(a3 + 44);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_DefineStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_205Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 44), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_DefineStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_206Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 44), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_DefineStmt()
{
  return type metadata completion function for PgQuery_AlterTSConfigurationStmt();
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_CopyStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CopyStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_ClusterStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t RangeVar;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t Alias;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    v8 = *(int *)(a3 + 24);
    v9 = (char *)(a1 + v8);
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 28);
    v14 = (_QWORD *)((char *)v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    RangeVar = type metadata accessor for PgQuery_RangeVar(0);
    v17 = *(_QWORD *)(RangeVar - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RangeVar))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v38 = v17;
      v39 = v12;
      v20 = v15[1];
      *v14 = *v15;
      v14[1] = v20;
      v21 = v15[3];
      v14[2] = v15[2];
      v14[3] = v21;
      v22 = v15[5];
      v14[4] = v15[4];
      v14[5] = v22;
      *((_BYTE *)v14 + 48) = *((_BYTE *)v15 + 48);
      v23 = v15[8];
      v14[7] = v15[7];
      v14[8] = v23;
      *((_DWORD *)v14 + 18) = *((_DWORD *)v15 + 18);
      v24 = *(int *)(RangeVar + 40);
      v25 = (char *)v14 + v24;
      v26 = (char *)v15 + v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v39(v25, v26, v11);
      v27 = *(int *)(RangeVar + 44);
      v28 = (_QWORD *)((char *)v14 + v27);
      v29 = (_QWORD *)((char *)v15 + v27);
      Alias = type metadata accessor for PgQuery_Alias(0);
      v31 = *(_QWORD *)(Alias - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v31 + 48))(v29, 1, Alias))
      {
        v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        v33 = v29[1];
        *v28 = *v29;
        v28[1] = v33;
        v28[2] = v29[2];
        v34 = *(int *)(Alias + 24);
        v35 = (char *)v28 + v34;
        v36 = (char *)v29 + v34;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v39(v35, v36, v11);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, Alias);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v14, 0, 1, RangeVar);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_VacuumRelation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t RangeVar;
  uint64_t result;
  uint64_t v9;
  uint64_t Alias;
  void (*v11)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + *(int *)(a2 + 28);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 48))(v6, 1, RangeVar);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11(v6 + *(int *)(RangeVar + 40), v5);
    v9 = v6 + *(int *)(RangeVar + 44);
    Alias = type metadata accessor for PgQuery_Alias(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Alias - 8) + 48))(v9, 1, Alias);
    if (!(_DWORD)result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9 + *(int *)(Alias + 24), v5);
    }
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_ClusterStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t RangeVar;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t Alias;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v7 = *(int *)(a3 + 24);
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 28);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v16 = *(_QWORD *)(RangeVar - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RangeVar))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v36 = v16;
    v37 = v11;
    v18 = v14[1];
    *v13 = *v14;
    v13[1] = v18;
    v19 = v14[3];
    v13[2] = v14[2];
    v13[3] = v19;
    v20 = v14[5];
    v13[4] = v14[4];
    v13[5] = v20;
    *((_BYTE *)v13 + 48) = *((_BYTE *)v14 + 48);
    v21 = v14[8];
    v13[7] = v14[7];
    v13[8] = v21;
    *((_DWORD *)v13 + 18) = *((_DWORD *)v14 + 18);
    v22 = *(int *)(RangeVar + 40);
    v23 = (char *)v13 + v22;
    v24 = (char *)v14 + v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v37(v23, v24, v10);
    v25 = *(int *)(RangeVar + 44);
    v26 = (_QWORD *)((char *)v13 + v25);
    v27 = (_QWORD *)((char *)v14 + v25);
    Alias = type metadata accessor for PgQuery_Alias(0);
    v29 = *(_QWORD *)(Alias - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v29 + 48))(v27, 1, Alias))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      v31 = v27[1];
      *v26 = *v27;
      v26[1] = v31;
      v26[2] = v27[2];
      v32 = *(int *)(Alias + 24);
      v33 = (char *)v26 + v32;
      v34 = (char *)v27 + v32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37(v33, v34, v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, Alias);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v13, 0, 1, RangeVar);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_ClusterStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t RangeVar;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t Alias;
  uint64_t v35;
  uint64_t (*v36)(_QWORD *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v46;
  char *v47;
  char *v48;
  void (*v49)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = a1 + v12;
  v14 = a2 + v12;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v16 = *(_QWORD *)(RangeVar - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, RangeVar);
  v18 = v17(v14, 1, RangeVar);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
      *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
      *(_QWORD *)(v13 + 40) = *(_QWORD *)(v14 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v13 + 48) = *(_BYTE *)(v14 + 48);
      *(_QWORD *)(v13 + 56) = *(_QWORD *)(v14 + 56);
      *(_QWORD *)(v13 + 64) = *(_QWORD *)(v14 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 72) = *(_DWORD *)(v14 + 72);
      v11(v13 + *(int *)(RangeVar + 40), v14 + *(int *)(RangeVar + 40), v9);
      v31 = *(int *)(RangeVar + 44);
      v32 = (_QWORD *)(v13 + v31);
      v33 = (_QWORD *)(v14 + v31);
      Alias = type metadata accessor for PgQuery_Alias(0);
      v35 = *(_QWORD *)(Alias - 8);
      v36 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v35 + 48);
      v37 = v36(v32, 1, Alias);
      v38 = v36(v33, 1, Alias);
      if (v37)
      {
        if (!v38)
        {
          *v32 = *v33;
          v32[1] = v33[1];
          v32[2] = v33[2];
          v39 = *(int *)(Alias + 24);
          v40 = (char *)v32 + v39;
          v41 = (char *)v33 + v39;
          v42 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v42(v40, v41, v9);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v38)
        {
          *v32 = *v33;
          v32[1] = v33[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v32[2] = v33[2];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v11((uint64_t)v32 + *(int *)(Alias + 24), (uint64_t)v33 + *(int *)(Alias + 24), v9);
          return a1;
        }
        outlined destroy of PgQuery_Alias((uint64_t)v32, type metadata accessor for PgQuery_Alias);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      v29 = v32;
      v30 = v33;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    v29 = (void *)v13;
    v30 = (const void *)v14;
LABEL_8:
    memcpy(v29, v30, v28);
    return a1;
  }
  if (v18)
    goto LABEL_7;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
  *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
  *(_QWORD *)(v13 + 40) = *(_QWORD *)(v14 + 40);
  *(_BYTE *)(v13 + 48) = *(_BYTE *)(v14 + 48);
  *(_QWORD *)(v13 + 56) = *(_QWORD *)(v14 + 56);
  *(_QWORD *)(v13 + 64) = *(_QWORD *)(v14 + 64);
  *(_DWORD *)(v13 + 72) = *(_DWORD *)(v14 + 72);
  v19 = *(int *)(RangeVar + 40);
  v46 = (char *)(v14 + v19);
  v48 = (char *)(v13 + v19);
  v20 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = v48;
  v49 = v20;
  v20(v21, v46, v9);
  v22 = *(int *)(RangeVar + 44);
  v23 = (_QWORD *)(v13 + v22);
  v24 = (_QWORD *)(v14 + v22);
  v25 = type metadata accessor for PgQuery_Alias(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    *v23 = *v24;
    v23[1] = v24[1];
    v23[2] = v24[2];
    v43 = *(int *)(v25 + 24);
    v47 = (char *)v23 + v43;
    v44 = (char *)v24 + v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v49(v47, v44, v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RangeVar);
  return a1;
}

uint64_t initializeWithTake for PgQuery_ClusterStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t RangeVar;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t Alias;
  uint64_t v22;
  uint64_t v23;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 24);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v15 = *(_QWORD *)(RangeVar - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v12[2] = v13[2];
    *((_BYTE *)v12 + 48) = *((_BYTE *)v13 + 48);
    *(_OWORD *)((char *)v12 + 56) = *(_OWORD *)((char *)v13 + 56);
    *((_DWORD *)v12 + 18) = *((_DWORD *)v13 + 18);
    v10((char *)v12 + *(int *)(RangeVar + 40), (char *)v13 + *(int *)(RangeVar + 40), v9);
    v18 = *(int *)(RangeVar + 44);
    v19 = (_QWORD *)((char *)v12 + v18);
    v20 = (_QWORD *)((char *)v13 + v18);
    Alias = type metadata accessor for PgQuery_Alias(0);
    v22 = *(_QWORD *)(Alias - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, Alias))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v19 = *(_OWORD *)v20;
      v19[2] = v20[2];
      v10((char *)v19 + *(int *)(Alias + 24), (char *)v20 + *(int *)(Alias + 24), v9);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, Alias);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_ClusterStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t RangeVar;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  __int128 v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t Alias;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  int v41;
  int v42;
  uint64_t v44;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 28);
  v14 = a1 + v13;
  v15 = a2 + v13;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v17 = *(_QWORD *)(RangeVar - 8);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, RangeVar);
  v19 = v18(v15, 1, RangeVar);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      v31 = *(_QWORD *)(v15 + 8);
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *(_QWORD *)(v14 + 8) = v31;
      swift_bridgeObjectRelease();
      v32 = *(_QWORD *)(v15 + 24);
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
      *(_QWORD *)(v14 + 24) = v32;
      swift_bridgeObjectRelease();
      v33 = *(_QWORD *)(v15 + 40);
      *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
      *(_QWORD *)(v14 + 40) = v33;
      swift_bridgeObjectRelease();
      *(_BYTE *)(v14 + 48) = *(_BYTE *)(v15 + 48);
      v34 = *(_QWORD *)(v15 + 64);
      *(_QWORD *)(v14 + 56) = *(_QWORD *)(v15 + 56);
      *(_QWORD *)(v14 + 64) = v34;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v14 + 72) = *(_DWORD *)(v15 + 72);
      v12(v14 + *(int *)(RangeVar + 40), v15 + *(int *)(RangeVar + 40), v10);
      v35 = *(int *)(RangeVar + 44);
      v36 = v14 + v35;
      v37 = (char *)(v15 + v35);
      Alias = type metadata accessor for PgQuery_Alias(0);
      v39 = *(_QWORD *)(Alias - 8);
      v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
      v41 = v40(v36, 1, Alias);
      v42 = v40((uint64_t)v37, 1, Alias);
      if (v41)
      {
        if (!v42)
        {
          *(_OWORD *)v36 = *(_OWORD *)v37;
          *(_QWORD *)(v36 + 16) = *((_QWORD *)v37 + 2);
          (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v36 + *(int *)(Alias + 24), &v37[*(int *)(Alias + 24)], v10);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v42)
        {
          v44 = *((_QWORD *)v37 + 1);
          *(_QWORD *)v36 = *(_QWORD *)v37;
          *(_QWORD *)(v36 + 8) = v44;
          swift_bridgeObjectRelease();
          *(_QWORD *)(v36 + 16) = *((_QWORD *)v37 + 2);
          swift_bridgeObjectRelease();
          v12(v36 + *(int *)(Alias + 24), (uint64_t)&v37[*(int *)(Alias + 24)], v10);
          return a1;
        }
        outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Alias);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      v29 = (void *)v36;
      v30 = v37;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v14, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    v29 = (void *)v14;
    v30 = (char *)v15;
LABEL_8:
    memcpy(v29, v30, v28);
    return a1;
  }
  if (v19)
    goto LABEL_7;
  v20 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_OWORD *)(v14 + 16) = v20;
  *(_OWORD *)(v14 + 32) = *(_OWORD *)(v15 + 32);
  *(_BYTE *)(v14 + 48) = *(_BYTE *)(v15 + 48);
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(v15 + 56);
  *(_DWORD *)(v14 + 72) = *(_DWORD *)(v15 + 72);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
  v21(v14 + *(int *)(RangeVar + 40), v15 + *(int *)(RangeVar + 40), v10);
  v22 = *(int *)(RangeVar + 44);
  v23 = (_QWORD *)(v14 + v22);
  v24 = (_QWORD *)(v15 + v22);
  v25 = type metadata accessor for PgQuery_Alias(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v23 = *(_OWORD *)v24;
    v23[2] = v24[2];
    v21((uint64_t)v23 + *(int *)(v25 + 24), (uint64_t)v24 + *(int *)(v25 + 24), v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RangeVar);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_ClusterStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA7FCB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_61Tm(a1, a2, a3, &demangling cache variable for type metadata for PgQuery_RangeVar?);
}

uint64_t __swift_get_extra_inhabitant_index_61Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (v5 >= 0xFFFFFFFF)
      LODWORD(v5) = -1;
    return (v5 + 1);
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      v12 = v10;
      v13 = *(int *)(a3 + 24);
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(a4);
      v11 = *(_QWORD *)(v12 - 8);
      v13 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1 + v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_ClusterStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA7FD70(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_184Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for PgQuery_RangeVar?);
}

uint64_t __swift_store_extra_inhabitant_index_184Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a3)
    {
      v12 = v10;
      v13 = *(int *)(a4 + 24);
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = *(_QWORD *)(v12 - 8);
      v13 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v6 + v13, a2, a2, v12);
  }
  return result;
}

void type metadata completion function for PgQuery_ClusterStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for PgQuery_VacuumRelation(a1, a2, a3, (uint64_t)&unk_18DC0F588, MEMORY[0x1E0DE9D30] + 64, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
}

void type metadata completion function for PgQuery_VacuumRelation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, void (*a7)(uint64_t))
{
  unint64_t v9;
  unint64_t v10;

  type metadata accessor for UnknownStorage();
  if (v9 <= 0x3F)
  {
    type metadata accessor for Date?(319, a6, a7);
    if (v10 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_BitString(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for PgQuery_BitString(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for PgQuery_BitString(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for PgQuery_BitString(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for PgQuery_BitString(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for PgQuery_BitString(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_ClosePortalStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_49Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_ClosePortalStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_50Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_AlterDefaultPrivilegesStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t GrantStmt;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (char *)v7 + v13;
    v15 = (char *)a2 + v13;
    GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
    v17 = *(_QWORD *)(GrantStmt - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v15, 1, GrantStmt))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_GrantStmt?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *v14 = *v15;
      *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
      v14[16] = v15[16];
      *((_QWORD *)v14 + 3) = *((_QWORD *)v15 + 3);
      v14[32] = v15[32];
      v19 = *((_QWORD *)v15 + 6);
      *((_QWORD *)v14 + 5) = *((_QWORD *)v15 + 5);
      *((_QWORD *)v14 + 6) = v19;
      *((_QWORD *)v14 + 7) = *((_QWORD *)v15 + 7);
      v14[64] = v15[64];
      *((_QWORD *)v14 + 9) = *((_QWORD *)v15 + 9);
      v14[80] = v15[80];
      v20 = *(int *)(GrantStmt + 48);
      v21 = &v14[v20];
      v22 = &v15[v20];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12(v21, v22, v11);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, GrantStmt);
    }
  }
  return v7;
}

uint64_t destroy for PgQuery_AlterDefaultPrivilegesStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t GrantStmt;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(GrantStmt - 8) + 48))(v6, 1, GrantStmt);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(GrantStmt + 48), v5);
  }
  return result;
}

_QWORD *initializeWithCopy for PgQuery_AlterDefaultPrivilegesStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t GrantStmt;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
  v15 = *(_QWORD *)(GrantStmt - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v13, 1, GrantStmt))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_GrantStmt?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
    v12[16] = v13[16];
    *((_QWORD *)v12 + 3) = *((_QWORD *)v13 + 3);
    v12[32] = v13[32];
    v17 = *((_QWORD *)v13 + 6);
    *((_QWORD *)v12 + 5) = *((_QWORD *)v13 + 5);
    *((_QWORD *)v12 + 6) = v17;
    *((_QWORD *)v12 + 7) = *((_QWORD *)v13 + 7);
    v12[64] = v13[64];
    *((_QWORD *)v12 + 9) = *((_QWORD *)v13 + 9);
    v12[80] = v13[80];
    v18 = *(int *)(GrantStmt + 48);
    v19 = &v12[v18];
    v20 = &v13[v18];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v19, v20, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, GrantStmt);
  }
  return a1;
}

_QWORD *assignWithCopy for PgQuery_AlterDefaultPrivilegesStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t GrantStmt;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(uint64_t, char *, uint64_t);
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (uint64_t)a1 + v12;
  v14 = (char *)a2 + v12;
  GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
  v16 = *(_QWORD *)(GrantStmt - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, GrantStmt);
  v18 = v17((uint64_t)v14, 1, GrantStmt);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_BYTE *)v13 = *v14;
      v28 = *((_QWORD *)v14 + 1);
      *(_BYTE *)(v13 + 16) = v14[16];
      *(_QWORD *)(v13 + 8) = v28;
      v29 = *((_QWORD *)v14 + 3);
      *(_BYTE *)(v13 + 32) = v14[32];
      *(_QWORD *)(v13 + 24) = v29;
      *(_QWORD *)(v13 + 40) = *((_QWORD *)v14 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v13 + 48) = *((_QWORD *)v14 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v13 + 56) = *((_QWORD *)v14 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v13 + 64) = v14[64];
      v30 = *((_QWORD *)v14 + 9);
      *(_BYTE *)(v13 + 80) = v14[80];
      *(_QWORD *)(v13 + 72) = v30;
      v11((char *)(v13 + *(int *)(GrantStmt + 48)), &v14[*(int *)(GrantStmt + 48)], v9);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_GrantStmt);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_GrantStmt?);
    memcpy((void *)v13, v14, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    return a1;
  }
  *(_BYTE *)v13 = *v14;
  v19 = *((_QWORD *)v14 + 1);
  *(_BYTE *)(v13 + 16) = v14[16];
  *(_QWORD *)(v13 + 8) = v19;
  v20 = *((_QWORD *)v14 + 3);
  *(_BYTE *)(v13 + 32) = v14[32];
  *(_QWORD *)(v13 + 24) = v20;
  *(_QWORD *)(v13 + 40) = *((_QWORD *)v14 + 5);
  *(_QWORD *)(v13 + 48) = *((_QWORD *)v14 + 6);
  *(_QWORD *)(v13 + 56) = *((_QWORD *)v14 + 7);
  *(_BYTE *)(v13 + 64) = v14[64];
  v21 = *((_QWORD *)v14 + 9);
  *(_BYTE *)(v13 + 80) = v14[80];
  *(_QWORD *)(v13 + 72) = v21;
  v22 = *(int *)(GrantStmt + 48);
  v23 = v13 + v22;
  v24 = &v14[v22];
  v25 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v25(v23, v24, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, GrantStmt);
  return a1;
}

_QWORD *initializeWithTake for PgQuery_AlterDefaultPrivilegesStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t GrantStmt;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
  v15 = *(_QWORD *)(GrantStmt - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v13, 1, GrantStmt))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_GrantStmt?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
    v12[16] = v13[16];
    *((_QWORD *)v12 + 3) = *((_QWORD *)v13 + 3);
    v12[32] = v13[32];
    *(_OWORD *)(v12 + 40) = *(_OWORD *)(v13 + 40);
    *((_QWORD *)v12 + 7) = *((_QWORD *)v13 + 7);
    v12[64] = v13[64];
    v17 = *((_QWORD *)v13 + 9);
    v12[80] = v13[80];
    *((_QWORD *)v12 + 9) = v17;
    v10(&v12[*(int *)(GrantStmt + 48)], &v13[*(int *)(GrantStmt + 48)], v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, GrantStmt);
  }
  return a1;
}

_QWORD *assignWithTake for PgQuery_AlterDefaultPrivilegesStmt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t GrantStmt;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v20;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (uint64_t)a1 + v12;
  v14 = (char *)a2 + v12;
  GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
  v16 = *(_QWORD *)(GrantStmt - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, GrantStmt);
  v18 = v17((uint64_t)v14, 1, GrantStmt);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_BYTE *)v13 = *v14;
      *(_QWORD *)(v13 + 8) = *((_QWORD *)v14 + 1);
      *(_BYTE *)(v13 + 16) = v14[16];
      *(_QWORD *)(v13 + 24) = *((_QWORD *)v14 + 3);
      *(_BYTE *)(v13 + 32) = v14[32];
      *(_QWORD *)(v13 + 40) = *((_QWORD *)v14 + 5);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v13 + 48) = *((_QWORD *)v14 + 6);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v13 + 56) = *((_QWORD *)v14 + 7);
      swift_bridgeObjectRelease();
      *(_BYTE *)(v13 + 64) = v14[64];
      *(_QWORD *)(v13 + 72) = *((_QWORD *)v14 + 9);
      *(_BYTE *)(v13 + 80) = v14[80];
      v11((char *)(v13 + *(int *)(GrantStmt + 48)), &v14[*(int *)(GrantStmt + 48)], v9);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_GrantStmt);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_GrantStmt?);
    memcpy((void *)v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  *(_BYTE *)v13 = *v14;
  *(_QWORD *)(v13 + 8) = *((_QWORD *)v14 + 1);
  *(_BYTE *)(v13 + 16) = v14[16];
  *(_QWORD *)(v13 + 24) = *((_QWORD *)v14 + 3);
  *(_BYTE *)(v13 + 32) = v14[32];
  *(_OWORD *)(v13 + 40) = *(_OWORD *)(v14 + 40);
  *(_QWORD *)(v13 + 56) = *((_QWORD *)v14 + 7);
  *(_BYTE *)(v13 + 64) = v14[64];
  v19 = *((_QWORD *)v14 + 9);
  *(_BYTE *)(v13 + 80) = v14[80];
  *(_QWORD *)(v13 + 72) = v19;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v13 + *(int *)(GrantStmt + 48), &v14[*(int *)(GrantStmt + 48)], v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, GrantStmt);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterDefaultPrivilegesStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA80C44(char *a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_215Tm(a1, a2, a3, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
}

uint64_t __swift_get_extra_inhabitant_index_215Tm(char *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v5 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v5) = -1;
    return (v5 + 1);
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      v12 = v10;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(a4);
      v11 = *(_QWORD *)(v12 - 8);
      v13 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(&a1[v13], a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterDefaultPrivilegesStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_18DA80D00(char *a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_216Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
}

char *__swift_store_extra_inhabitant_index_216Tm(char *result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  char *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a3)
    {
      v12 = v10;
      v13 = *(int *)(a4 + 20);
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = *(_QWORD *)(v12 - 8);
      v13 = *(int *)(a4 + 24);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(&v6[v13], a2, a2, v12);
  }
  return result;
}

void type metadata completion function for PgQuery_AlterDefaultPrivilegesStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for PgQuery_CompositeTypeStmt(a1, a2, a3, MEMORY[0x1E0DE9D18] + 64, &lazy cache variable for type metadata for PgQuery_GrantStmt?, (void (*)(uint64_t))type metadata accessor for PgQuery_GrantStmt);
}

void type metadata completion function for PgQuery_CompositeTypeStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, void (*a6)(uint64_t))
{
  unint64_t v8;
  unint64_t v9;

  type metadata accessor for UnknownStorage();
  if (v8 <= 0x3F)
  {
    type metadata accessor for Date?(319, a5, a6);
    if (v9 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_GrantRoleStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t RoleSpec;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v7 = a1;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v8 = *(int *)(a3 + 36);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 40);
    v14 = (_QWORD *)(v7 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
    v17 = *(_QWORD *)(RoleSpec - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RoleSpec))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *v14 = *v15;
      *((_BYTE *)v14 + 8) = *((_BYTE *)v15 + 8);
      v19 = v15[3];
      v14[2] = v15[2];
      v14[3] = v19;
      *((_DWORD *)v14 + 8) = *((_DWORD *)v15 + 8);
      v20 = *(int *)(RoleSpec + 28);
      v21 = (char *)v14 + v20;
      v22 = (char *)v15 + v20;
      swift_bridgeObjectRetain();
      v12((uint64_t)v21, (uint64_t)v22, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RoleSpec);
    }
  }
  return v7;
}

uint64_t destroy for PgQuery_GrantRoleStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t RoleSpec;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 40);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RoleSpec - 8) + 48))(v6, 1, RoleSpec);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(RoleSpec + 28), v5);
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_GrantRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t RoleSpec;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(int *)(a3 + 36);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 40);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v16 = *(_QWORD *)(RoleSpec - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RoleSpec))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    *((_BYTE *)v13 + 8) = *((_BYTE *)v14 + 8);
    v18 = v14[3];
    v13[2] = v14[2];
    v13[3] = v18;
    *((_DWORD *)v13 + 8) = *((_DWORD *)v14 + 8);
    v19 = *(int *)(RoleSpec + 28);
    v20 = (char *)v13 + v19;
    v21 = (char *)v14 + v19;
    swift_bridgeObjectRetain();
    v11((uint64_t)v20, (uint64_t)v21, v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_GrantRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t RoleSpec;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v27;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v6 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(int *)(a3 + 36);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 40);
  v14 = a1 + v13;
  v15 = a2 + v13;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v17 = *(_QWORD *)(RoleSpec - 8);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, RoleSpec);
  v19 = v18(v15, 1, RoleSpec);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      v27 = *(_QWORD *)v15;
      *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
      *(_QWORD *)v14 = v27;
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
      *(_QWORD *)(v14 + 24) = *(_QWORD *)(v15 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(v15 + 32);
      v12(v14 + *(int *)(RoleSpec + 28), v15 + *(int *)(RoleSpec + 28), v10);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v14, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v14, (const void *)v15, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    return a1;
  }
  v20 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  *(_QWORD *)v14 = v20;
  *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
  *(_QWORD *)(v14 + 24) = *(_QWORD *)(v15 + 24);
  *(_DWORD *)(v14 + 32) = *(_DWORD *)(v15 + 32);
  v21 = *(int *)(RoleSpec + 28);
  v22 = v14 + v21;
  v23 = v15 + v21;
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  swift_bridgeObjectRetain();
  v24(v22, v23, v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RoleSpec);
  return a1;
}

uint64_t initializeWithTake for PgQuery_GrantRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t RoleSpec;
  uint64_t v15;
  uint64_t v16;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(int *)(a3 + 36);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 40);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v15 = *(_QWORD *)(RoleSpec - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RoleSpec))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_BYTE *)v12 + 8) = *((_BYTE *)v13 + 8);
    *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
    *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 8);
    v10((char *)v12 + *(int *)(RoleSpec + 28), (char *)v13 + *(int *)(RoleSpec + 28), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_GrantRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t RoleSpec;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(int *)(a3 + 36);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 40);
  v13 = a1 + v12;
  v14 = a2 + v12;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v16 = *(_QWORD *)(RoleSpec - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, RoleSpec);
  v18 = v17(v14, 1, RoleSpec);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      v21 = *(_QWORD *)(v14 + 24);
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
      *(_QWORD *)(v13 + 24) = v21;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 32) = *(_DWORD *)(v14 + 32);
      v11(v13 + *(int *)(RoleSpec + 28), v14 + *(int *)(RoleSpec + 28), v9);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v13, (const void *)v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_OWORD *)(v13 + 16) = *(_OWORD *)(v14 + 16);
  *(_DWORD *)(v13 + 32) = *(_DWORD *)(v14 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v13 + *(int *)(RoleSpec + 28), v14 + *(int *)(RoleSpec + 28), v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_GrantRoleStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA8172C(char *a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_247Tm(a1, a2, a3, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
}

uint64_t __swift_get_extra_inhabitant_index_247Tm(char *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v5 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v5) = -1;
    return (v5 + 1);
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      v12 = v10;
      v13 = *(int *)(a3 + 36);
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(a4);
      v11 = *(_QWORD *)(v12 - 8);
      v13 = *(int *)(a3 + 40);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(&a1[v13], a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_GrantRoleStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_18DA817E8(char *a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_248Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
}

char *__swift_store_extra_inhabitant_index_248Tm(char *result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  char *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a3)
    {
      v12 = v10;
      v13 = *(int *)(a4 + 36);
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = *(_QWORD *)(v12 - 8);
      v13 = *(int *)(a4 + 40);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(&v6[v13], a2, a2, v12);
  }
  return result;
}

void type metadata completion function for PgQuery_GrantRoleStmt()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for PgQuery_RoleSpec?, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for PgQuery_GrantStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v5 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v5;
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *(_QWORD *)(a1 + 72) = a2[9];
    v6 = *(int *)(a3 + 48);
    v7 = (uint64_t)a2 + v6;
    v8 = a1 + v6;
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v8, v7, v9);
  }
  return v3;
}

uint64_t destroy for PgQuery_GrantStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 48);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_GrantStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v5 = *(int *)(a3 + 48);
  v6 = a2 + v5;
  v7 = a1 + v5;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v7, v6, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_GrantStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v8 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v8;
  v9 = *(int *)(a3 + 48);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

uint64_t initializeWithTake for PgQuery_GrantStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v4 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v5 = *(int *)(a3 + 48);
  v6 = a1 + v5;
  v7 = a2 + v5;
  *(_QWORD *)(a1 + 72) = v4;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PgQuery_GrantStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v6 = *(int *)(a3 + 48);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_GrantStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA81DE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 48), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_GrantStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18DA81E68(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 40) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 48), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_GrantStmt()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PgQuery_SetOperationStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_SetOperationStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterDomainStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterDomainStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterTableCmd()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterTableCmd()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_AlterTableStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t RangeVar;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t Alias;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v7 = a1;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    v8 = *(int *)(a3 + 28);
    v9 = (char *)(a1 + v8);
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 32);
    v14 = (_QWORD *)(v7 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    RangeVar = type metadata accessor for PgQuery_RangeVar(0);
    v17 = *(_QWORD *)(RangeVar - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RangeVar))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v37 = v17;
      v38 = v12;
      v19 = v15[1];
      *v14 = *v15;
      v14[1] = v19;
      v20 = v15[3];
      v14[2] = v15[2];
      v14[3] = v20;
      v21 = v15[5];
      v14[4] = v15[4];
      v14[5] = v21;
      *((_BYTE *)v14 + 48) = *((_BYTE *)v15 + 48);
      v22 = v15[8];
      v14[7] = v15[7];
      v14[8] = v22;
      *((_DWORD *)v14 + 18) = *((_DWORD *)v15 + 18);
      v23 = *(int *)(RangeVar + 40);
      v24 = (char *)v14 + v23;
      v25 = (char *)v15 + v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38(v24, v25, v11);
      v26 = *(int *)(RangeVar + 44);
      v27 = (_QWORD *)((char *)v14 + v26);
      v28 = (_QWORD *)((char *)v15 + v26);
      Alias = type metadata accessor for PgQuery_Alias(0);
      v30 = *(_QWORD *)(Alias - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v30 + 48))(v28, 1, Alias))
      {
        v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        v32 = v28[1];
        *v27 = *v28;
        v27[1] = v32;
        v27[2] = v28[2];
        v33 = *(int *)(Alias + 24);
        v34 = (char *)v27 + v33;
        v35 = (char *)v28 + v33;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v38(v34, v35, v11);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, Alias);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v14, 0, 1, RangeVar);
    }
  }
  return v7;
}

uint64_t destroy for PgQuery_AlterSeqStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t RangeVar;
  uint64_t result;
  uint64_t v9;
  uint64_t Alias;
  void (*v11)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + *(int *)(a2 + 32);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 48))(v6, 1, RangeVar);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11(v6 + *(int *)(RangeVar + 40), v5);
    v9 = v6 + *(int *)(RangeVar + 44);
    Alias = type metadata accessor for PgQuery_Alias(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Alias - 8) + 48))(v9, 1, Alias);
    if (!(_DWORD)result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9 + *(int *)(Alias + 24), v5);
    }
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_AlterTableStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t RangeVar;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t Alias;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v7 = *(int *)(a3 + 28);
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 32);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v16 = *(_QWORD *)(RangeVar - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RangeVar))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v36 = v16;
    v37 = v11;
    v18 = v14[1];
    *v13 = *v14;
    v13[1] = v18;
    v19 = v14[3];
    v13[2] = v14[2];
    v13[3] = v19;
    v20 = v14[5];
    v13[4] = v14[4];
    v13[5] = v20;
    *((_BYTE *)v13 + 48) = *((_BYTE *)v14 + 48);
    v21 = v14[8];
    v13[7] = v14[7];
    v13[8] = v21;
    *((_DWORD *)v13 + 18) = *((_DWORD *)v14 + 18);
    v22 = *(int *)(RangeVar + 40);
    v23 = (char *)v13 + v22;
    v24 = (char *)v14 + v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v37(v23, v24, v10);
    v25 = *(int *)(RangeVar + 44);
    v26 = (_QWORD *)((char *)v13 + v25);
    v27 = (_QWORD *)((char *)v14 + v25);
    Alias = type metadata accessor for PgQuery_Alias(0);
    v29 = *(_QWORD *)(Alias - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v29 + 48))(v27, 1, Alias))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      v31 = v27[1];
      *v26 = *v27;
      v26[1] = v31;
      v26[2] = v27[2];
      v32 = *(int *)(Alias + 24);
      v33 = (char *)v26 + v32;
      v34 = (char *)v27 + v32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37(v33, v34, v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, Alias);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v13, 0, 1, RangeVar);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_AlterTableStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t RangeVar;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t Alias;
  uint64_t v36;
  uint64_t (*v37)(_QWORD *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  char *v41;
  char *v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  char *v45;
  char *v47;
  char *v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 32);
  v14 = a1 + v13;
  v15 = a2 + v13;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v17 = *(_QWORD *)(RangeVar - 8);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, RangeVar);
  v19 = v18(v15, 1, RangeVar);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *(_QWORD *)(v14 + 8) = *(_QWORD *)(v15 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
      *(_QWORD *)(v14 + 24) = *(_QWORD *)(v15 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
      *(_QWORD *)(v14 + 40) = *(_QWORD *)(v15 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v14 + 48) = *(_BYTE *)(v15 + 48);
      *(_QWORD *)(v14 + 56) = *(_QWORD *)(v15 + 56);
      *(_QWORD *)(v14 + 64) = *(_QWORD *)(v15 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v14 + 72) = *(_DWORD *)(v15 + 72);
      v12(v14 + *(int *)(RangeVar + 40), v15 + *(int *)(RangeVar + 40), v10);
      v32 = *(int *)(RangeVar + 44);
      v33 = (_QWORD *)(v14 + v32);
      v34 = (_QWORD *)(v15 + v32);
      Alias = type metadata accessor for PgQuery_Alias(0);
      v36 = *(_QWORD *)(Alias - 8);
      v37 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v36 + 48);
      v38 = v37(v33, 1, Alias);
      v39 = v37(v34, 1, Alias);
      if (v38)
      {
        if (!v39)
        {
          *v33 = *v34;
          v33[1] = v34[1];
          v33[2] = v34[2];
          v40 = *(int *)(Alias + 24);
          v41 = (char *)v33 + v40;
          v42 = (char *)v34 + v40;
          v43 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v43(v41, v42, v10);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v39)
        {
          *v33 = *v34;
          v33[1] = v34[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v33[2] = v34[2];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v12((uint64_t)v33 + *(int *)(Alias + 24), (uint64_t)v34 + *(int *)(Alias + 24), v10);
          return a1;
        }
        outlined destroy of PgQuery_Alias((uint64_t)v33, type metadata accessor for PgQuery_Alias);
      }
      v29 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      v30 = v33;
      v31 = v34;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v14, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    v29 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    v30 = (void *)v14;
    v31 = (const void *)v15;
LABEL_8:
    memcpy(v30, v31, v29);
    return a1;
  }
  if (v19)
    goto LABEL_7;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_QWORD *)(v14 + 8) = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
  *(_QWORD *)(v14 + 24) = *(_QWORD *)(v15 + 24);
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
  *(_QWORD *)(v14 + 40) = *(_QWORD *)(v15 + 40);
  *(_BYTE *)(v14 + 48) = *(_BYTE *)(v15 + 48);
  *(_QWORD *)(v14 + 56) = *(_QWORD *)(v15 + 56);
  *(_QWORD *)(v14 + 64) = *(_QWORD *)(v15 + 64);
  *(_DWORD *)(v14 + 72) = *(_DWORD *)(v15 + 72);
  v20 = *(int *)(RangeVar + 40);
  v47 = (char *)(v15 + v20);
  v49 = (char *)(v14 + v20);
  v21 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = v49;
  v50 = v21;
  v21(v22, v47, v10);
  v23 = *(int *)(RangeVar + 44);
  v24 = (_QWORD *)(v14 + v23);
  v25 = (_QWORD *)(v15 + v23);
  v26 = type metadata accessor for PgQuery_Alias(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    *v24 = *v25;
    v24[1] = v25[1];
    v24[2] = v25[2];
    v44 = *(int *)(v26 + 24);
    v48 = (char *)v24 + v44;
    v45 = (char *)v25 + v44;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v50(v48, v45, v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RangeVar);
  return a1;
}

uint64_t initializeWithTake for PgQuery_AlterTableStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t RangeVar;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t Alias;
  uint64_t v23;
  uint64_t v24;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v7 = *(int *)(a3 + 28);
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 32);
  v13 = (_OWORD *)(a1 + v12);
  v14 = (_OWORD *)(a2 + v12);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v16 = *(_QWORD *)(RangeVar - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RangeVar))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v18 = v14[1];
    *v13 = *v14;
    v13[1] = v18;
    v13[2] = v14[2];
    *((_BYTE *)v13 + 48) = *((_BYTE *)v14 + 48);
    *(_OWORD *)((char *)v13 + 56) = *(_OWORD *)((char *)v14 + 56);
    *((_DWORD *)v13 + 18) = *((_DWORD *)v14 + 18);
    v11((char *)v13 + *(int *)(RangeVar + 40), (char *)v14 + *(int *)(RangeVar + 40), v10);
    v19 = *(int *)(RangeVar + 44);
    v20 = (_QWORD *)((char *)v13 + v19);
    v21 = (_QWORD *)((char *)v14 + v19);
    Alias = type metadata accessor for PgQuery_Alias(0);
    v23 = *(_QWORD *)(Alias - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, Alias))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v20 = *(_OWORD *)v21;
      v20[2] = v21[2];
      v11((char *)v20 + *(int *)(Alias + 24), (char *)v21 + *(int *)(Alias + 24), v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, Alias);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RangeVar);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_AlterTableStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t RangeVar;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  __int128 v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t Alias;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v43;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 32);
  v13 = a1 + v12;
  v14 = a2 + v12;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v16 = *(_QWORD *)(RangeVar - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, RangeVar);
  v18 = v17(v14, 1, RangeVar);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v30 = *(_QWORD *)(v14 + 8);
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *(_QWORD *)(v13 + 8) = v30;
      swift_bridgeObjectRelease();
      v31 = *(_QWORD *)(v14 + 24);
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
      *(_QWORD *)(v13 + 24) = v31;
      swift_bridgeObjectRelease();
      v32 = *(_QWORD *)(v14 + 40);
      *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
      *(_QWORD *)(v13 + 40) = v32;
      swift_bridgeObjectRelease();
      *(_BYTE *)(v13 + 48) = *(_BYTE *)(v14 + 48);
      v33 = *(_QWORD *)(v14 + 64);
      *(_QWORD *)(v13 + 56) = *(_QWORD *)(v14 + 56);
      *(_QWORD *)(v13 + 64) = v33;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 72) = *(_DWORD *)(v14 + 72);
      v11(v13 + *(int *)(RangeVar + 40), v14 + *(int *)(RangeVar + 40), v9);
      v34 = *(int *)(RangeVar + 44);
      v35 = v13 + v34;
      v36 = (char *)(v14 + v34);
      Alias = type metadata accessor for PgQuery_Alias(0);
      v38 = *(_QWORD *)(Alias - 8);
      v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
      v40 = v39(v35, 1, Alias);
      v41 = v39((uint64_t)v36, 1, Alias);
      if (v40)
      {
        if (!v41)
        {
          *(_OWORD *)v35 = *(_OWORD *)v36;
          *(_QWORD *)(v35 + 16) = *((_QWORD *)v36 + 2);
          (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v35 + *(int *)(Alias + 24), &v36[*(int *)(Alias + 24)], v9);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v41)
        {
          v43 = *((_QWORD *)v36 + 1);
          *(_QWORD *)v35 = *(_QWORD *)v36;
          *(_QWORD *)(v35 + 8) = v43;
          swift_bridgeObjectRelease();
          *(_QWORD *)(v35 + 16) = *((_QWORD *)v36 + 2);
          swift_bridgeObjectRelease();
          v11(v35 + *(int *)(Alias + 24), (uint64_t)&v36[*(int *)(Alias + 24)], v9);
          return a1;
        }
        outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Alias);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      v28 = (void *)v35;
      v29 = v36;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    v28 = (void *)v13;
    v29 = (char *)v14;
LABEL_8:
    memcpy(v28, v29, v27);
    return a1;
  }
  if (v18)
    goto LABEL_7;
  v19 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v19;
  *(_OWORD *)(v13 + 32) = *(_OWORD *)(v14 + 32);
  *(_BYTE *)(v13 + 48) = *(_BYTE *)(v14 + 48);
  *(_OWORD *)(v13 + 56) = *(_OWORD *)(v14 + 56);
  *(_DWORD *)(v13 + 72) = *(_DWORD *)(v14 + 72);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  v20(v13 + *(int *)(RangeVar + 40), v14 + *(int *)(RangeVar + 40), v9);
  v21 = *(int *)(RangeVar + 44);
  v22 = (_QWORD *)(v13 + v21);
  v23 = (_QWORD *)(v14 + v21);
  v24 = type metadata accessor for PgQuery_Alias(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v22 = *(_OWORD *)v23;
    v22[2] = v23[2];
    v20((uint64_t)v22 + *(int *)(v24 + 24), (uint64_t)v23 + *(int *)(v24 + 24), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RangeVar);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterTableStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_283Tm(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterTableStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *__swift_store_extra_inhabitant_index_284Tm(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PgQuery_UpdateStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_UpdateStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_DeleteStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_DeleteStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_InsertStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_InsertStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_RawStmt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_RawStmt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_JoinExpr()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_JoinExpr()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_Integer(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for PgQuery_Integer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_DWORD *initializeWithCopy for PgQuery_Integer(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithCopy for PgQuery_Integer(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_DWORD *initializeWithTake for PgQuery_Integer(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithTake for PgQuery_Integer(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_RangeTblRef()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_55Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for PgQuery_RangeTblRef()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_56Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t getEnumTagSinglePayload for PgQuery_TargetEntry()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_TargetEntry()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_InferenceElem()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_InferenceElem()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_NextValueExpr()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_NextValueExpr()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_CurrentOfExpr()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CurrentOfExpr()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_SetToDefault()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_SetToDefault()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_CoerceToDomainValue()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CoerceToDomainValue()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_CoerceToDomain()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CoerceToDomain()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_BooleanTest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_BooleanTest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_NullTest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_NullTest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_XmlExpr()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_XmlExpr()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_SQLValueFunction()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_SQLValueFunction()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_MinMaxExpr()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_MinMaxExpr()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_CoalesceExpr()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CoalesceExpr()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_RowCompareExpr()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_RowCompareExpr()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_RowExpr()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_RowExpr()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_ArrayExpr()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_ArrayExpr()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_CaseTestExpr()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CaseTestExpr()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_CaseWhen()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CaseWhen()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_CaseExpr()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CaseExpr()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_CollateExpr()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CollateExpr()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_ConvertRowtypeExpr()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_ConvertRowtypeExpr()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_ArrayCoerceExpr()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_ArrayCoerceExpr()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_CoerceViaIO()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_CoerceViaIO()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_RelabelType()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_RelabelType()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_FieldStore()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_FieldStore()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_FieldSelect()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_FieldSelect()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_AlternativeSubPlan()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlternativeSubPlan()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_SubPlan()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_SubPlan()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_SubLink()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_SubLink()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_BoolExpr()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_BoolExpr()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_ScalarArrayOpExpr()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_ScalarArrayOpExpr()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_NullIfExpr()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_NullIfExpr()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_DistinctExpr()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_DistinctExpr()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_OpExpr()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_OpExpr()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_NamedArgExpr()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_NamedArgExpr()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_SubscriptingRef()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_SubscriptingRef()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_WindowFunc()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_WindowFunc()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_GroupingFunc()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_GroupingFunc()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_Aggref()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_Aggref()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PgQuery_Param()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_Param()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_InferClause(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for PgQuery_InferClause(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t initializeWithCopy for PgQuery_InferClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PgQuery_InferClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for PgQuery_InferClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for PgQuery_InferClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_Var()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm_1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for PgQuery_Var()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_indexTm_1(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for PgQuery_InferClause()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PgQuery_ParseResult()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PgQuery_ParseResult()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for PgQuery_ParseResult(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ParseResult);
}

uint64_t type metadata completion function for PgQuery_ParseResult()
{
  return type metadata completion function for PgQuery_Alias();
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_ParseResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    a1[1] = a2[1];
    v5 = *(int *)(a3 + 24);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for PgQuery_DropTableSpaceStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_ParseResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for PgQuery_ParseResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_ParseResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_ParseResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_ScanResult()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_39Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_ScanResult()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for PgQuery_ScanResult(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ScanResult);
}

unint64_t lazy protocol witness table accessor for type PgQuery_ParamKind and conformance PgQuery_ParamKind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_ParamKind and conformance PgQuery_ParamKind;
  if (!lazy protocol witness table cache variable for type PgQuery_ParamKind and conformance PgQuery_ParamKind)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_ParamKind, &type metadata for PgQuery_ParamKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ParamKind and conformance PgQuery_ParamKind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_ParamKind and conformance PgQuery_ParamKind;
  if (!lazy protocol witness table cache variable for type PgQuery_ParamKind and conformance PgQuery_ParamKind)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_ParamKind, &type metadata for PgQuery_ParamKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ParamKind and conformance PgQuery_ParamKind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_ParamKind and conformance PgQuery_ParamKind;
  if (!lazy protocol witness table cache variable for type PgQuery_ParamKind and conformance PgQuery_ParamKind)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_ParamKind, &type metadata for PgQuery_ParamKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ParamKind and conformance PgQuery_ParamKind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_ParamKind and conformance PgQuery_ParamKind;
  if (!lazy protocol witness table cache variable for type PgQuery_ParamKind and conformance PgQuery_ParamKind)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_ParamKind, &type metadata for PgQuery_ParamKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ParamKind and conformance PgQuery_ParamKind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_AggSplit and conformance PgQuery_AggSplit()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_AggSplit and conformance PgQuery_AggSplit;
  if (!lazy protocol witness table cache variable for type PgQuery_AggSplit and conformance PgQuery_AggSplit)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_AggSplit, &type metadata for PgQuery_AggSplit);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_AggSplit and conformance PgQuery_AggSplit);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_AggSplit and conformance PgQuery_AggSplit;
  if (!lazy protocol witness table cache variable for type PgQuery_AggSplit and conformance PgQuery_AggSplit)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_AggSplit, &type metadata for PgQuery_AggSplit);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_AggSplit and conformance PgQuery_AggSplit);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_AggSplit and conformance PgQuery_AggSplit;
  if (!lazy protocol witness table cache variable for type PgQuery_AggSplit and conformance PgQuery_AggSplit)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_AggSplit, &type metadata for PgQuery_AggSplit);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_AggSplit and conformance PgQuery_AggSplit);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_AggSplit and conformance PgQuery_AggSplit;
  if (!lazy protocol witness table cache variable for type PgQuery_AggSplit and conformance PgQuery_AggSplit)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_AggSplit, &type metadata for PgQuery_AggSplit);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_AggSplit and conformance PgQuery_AggSplit);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm;
  if (!lazy protocol witness table cache variable for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_CoercionForm, &type metadata for PgQuery_CoercionForm);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm;
  if (!lazy protocol witness table cache variable for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_CoercionForm, &type metadata for PgQuery_CoercionForm);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm;
  if (!lazy protocol witness table cache variable for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_CoercionForm, &type metadata for PgQuery_CoercionForm);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm;
  if (!lazy protocol witness table cache variable for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_CoercionForm, &type metadata for PgQuery_CoercionForm);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType;
  if (!lazy protocol witness table cache variable for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_BoolExprType, &type metadata for PgQuery_BoolExprType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType;
  if (!lazy protocol witness table cache variable for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_BoolExprType, &type metadata for PgQuery_BoolExprType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType;
  if (!lazy protocol witness table cache variable for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_BoolExprType, &type metadata for PgQuery_BoolExprType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType;
  if (!lazy protocol witness table cache variable for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_BoolExprType, &type metadata for PgQuery_BoolExprType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType;
  if (!lazy protocol witness table cache variable for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_SubLinkType, &type metadata for PgQuery_SubLinkType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType;
  if (!lazy protocol witness table cache variable for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_SubLinkType, &type metadata for PgQuery_SubLinkType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType;
  if (!lazy protocol witness table cache variable for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_SubLinkType, &type metadata for PgQuery_SubLinkType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType;
  if (!lazy protocol witness table cache variable for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_SubLinkType, &type metadata for PgQuery_SubLinkType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType;
  if (!lazy protocol witness table cache variable for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_RowCompareType, &type metadata for PgQuery_RowCompareType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType;
  if (!lazy protocol witness table cache variable for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_RowCompareType, &type metadata for PgQuery_RowCompareType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType;
  if (!lazy protocol witness table cache variable for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_RowCompareType, &type metadata for PgQuery_RowCompareType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType;
  if (!lazy protocol witness table cache variable for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_RowCompareType, &type metadata for PgQuery_RowCompareType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp;
  if (!lazy protocol witness table cache variable for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_MinMaxOp, &type metadata for PgQuery_MinMaxOp);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp;
  if (!lazy protocol witness table cache variable for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_MinMaxOp, &type metadata for PgQuery_MinMaxOp);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp;
  if (!lazy protocol witness table cache variable for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_MinMaxOp, &type metadata for PgQuery_MinMaxOp);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp;
  if (!lazy protocol witness table cache variable for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_MinMaxOp, &type metadata for PgQuery_MinMaxOp);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp;
  if (!lazy protocol witness table cache variable for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_SQLValueFunctionOp, &type metadata for PgQuery_SQLValueFunctionOp);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp;
  if (!lazy protocol witness table cache variable for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_SQLValueFunctionOp, &type metadata for PgQuery_SQLValueFunctionOp);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp;
  if (!lazy protocol witness table cache variable for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_SQLValueFunctionOp, &type metadata for PgQuery_SQLValueFunctionOp);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp;
  if (!lazy protocol witness table cache variable for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_SQLValueFunctionOp, &type metadata for PgQuery_SQLValueFunctionOp);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp;
  if (!lazy protocol witness table cache variable for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_XmlExprOp, &type metadata for PgQuery_XmlExprOp);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp;
  if (!lazy protocol witness table cache variable for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_XmlExprOp, &type metadata for PgQuery_XmlExprOp);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp;
  if (!lazy protocol witness table cache variable for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_XmlExprOp, &type metadata for PgQuery_XmlExprOp);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp;
  if (!lazy protocol witness table cache variable for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_XmlExprOp, &type metadata for PgQuery_XmlExprOp);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType;
  if (!lazy protocol witness table cache variable for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_XmlOptionType, &type metadata for PgQuery_XmlOptionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType;
  if (!lazy protocol witness table cache variable for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_XmlOptionType, &type metadata for PgQuery_XmlOptionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType;
  if (!lazy protocol witness table cache variable for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_XmlOptionType, &type metadata for PgQuery_XmlOptionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType;
  if (!lazy protocol witness table cache variable for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_XmlOptionType, &type metadata for PgQuery_XmlOptionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_NullTestType and conformance PgQuery_NullTestType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_NullTestType and conformance PgQuery_NullTestType;
  if (!lazy protocol witness table cache variable for type PgQuery_NullTestType and conformance PgQuery_NullTestType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_NullTestType, &type metadata for PgQuery_NullTestType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_NullTestType and conformance PgQuery_NullTestType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_NullTestType and conformance PgQuery_NullTestType;
  if (!lazy protocol witness table cache variable for type PgQuery_NullTestType and conformance PgQuery_NullTestType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_NullTestType, &type metadata for PgQuery_NullTestType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_NullTestType and conformance PgQuery_NullTestType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_NullTestType and conformance PgQuery_NullTestType;
  if (!lazy protocol witness table cache variable for type PgQuery_NullTestType and conformance PgQuery_NullTestType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_NullTestType, &type metadata for PgQuery_NullTestType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_NullTestType and conformance PgQuery_NullTestType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_NullTestType and conformance PgQuery_NullTestType;
  if (!lazy protocol witness table cache variable for type PgQuery_NullTestType and conformance PgQuery_NullTestType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_NullTestType, &type metadata for PgQuery_NullTestType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_NullTestType and conformance PgQuery_NullTestType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType;
  if (!lazy protocol witness table cache variable for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_BoolTestType, &type metadata for PgQuery_BoolTestType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType;
  if (!lazy protocol witness table cache variable for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_BoolTestType, &type metadata for PgQuery_BoolTestType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType;
  if (!lazy protocol witness table cache variable for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_BoolTestType, &type metadata for PgQuery_BoolTestType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType;
  if (!lazy protocol witness table cache variable for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_BoolTestType, &type metadata for PgQuery_BoolTestType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_JoinType and conformance PgQuery_JoinType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_JoinType and conformance PgQuery_JoinType;
  if (!lazy protocol witness table cache variable for type PgQuery_JoinType and conformance PgQuery_JoinType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_JoinType, &type metadata for PgQuery_JoinType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_JoinType and conformance PgQuery_JoinType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_JoinType and conformance PgQuery_JoinType;
  if (!lazy protocol witness table cache variable for type PgQuery_JoinType and conformance PgQuery_JoinType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_JoinType, &type metadata for PgQuery_JoinType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_JoinType and conformance PgQuery_JoinType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_JoinType and conformance PgQuery_JoinType;
  if (!lazy protocol witness table cache variable for type PgQuery_JoinType and conformance PgQuery_JoinType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_JoinType, &type metadata for PgQuery_JoinType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_JoinType and conformance PgQuery_JoinType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_JoinType and conformance PgQuery_JoinType;
  if (!lazy protocol witness table cache variable for type PgQuery_JoinType and conformance PgQuery_JoinType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_JoinType, &type metadata for PgQuery_JoinType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_JoinType and conformance PgQuery_JoinType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction;
  if (!lazy protocol witness table cache variable for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_OnConflictAction, &type metadata for PgQuery_OnConflictAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction;
  if (!lazy protocol witness table cache variable for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_OnConflictAction, &type metadata for PgQuery_OnConflictAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction;
  if (!lazy protocol witness table cache variable for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_OnConflictAction, &type metadata for PgQuery_OnConflictAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction;
  if (!lazy protocol witness table cache variable for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_OnConflictAction, &type metadata for PgQuery_OnConflictAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction;
  if (!lazy protocol witness table cache variable for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_OnCommitAction, &type metadata for PgQuery_OnCommitAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction;
  if (!lazy protocol witness table cache variable for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_OnCommitAction, &type metadata for PgQuery_OnCommitAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction;
  if (!lazy protocol witness table cache variable for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_OnCommitAction, &type metadata for PgQuery_OnCommitAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction;
  if (!lazy protocol witness table cache variable for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_OnCommitAction, &type metadata for PgQuery_OnCommitAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_CmdType and conformance PgQuery_CmdType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_CmdType and conformance PgQuery_CmdType;
  if (!lazy protocol witness table cache variable for type PgQuery_CmdType and conformance PgQuery_CmdType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_CmdType, &type metadata for PgQuery_CmdType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CmdType and conformance PgQuery_CmdType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_CmdType and conformance PgQuery_CmdType;
  if (!lazy protocol witness table cache variable for type PgQuery_CmdType and conformance PgQuery_CmdType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_CmdType, &type metadata for PgQuery_CmdType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CmdType and conformance PgQuery_CmdType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_CmdType and conformance PgQuery_CmdType;
  if (!lazy protocol witness table cache variable for type PgQuery_CmdType and conformance PgQuery_CmdType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_CmdType, &type metadata for PgQuery_CmdType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CmdType and conformance PgQuery_CmdType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_CmdType and conformance PgQuery_CmdType;
  if (!lazy protocol witness table cache variable for type PgQuery_CmdType and conformance PgQuery_CmdType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_CmdType, &type metadata for PgQuery_CmdType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CmdType and conformance PgQuery_CmdType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_QuerySource and conformance PgQuery_QuerySource()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_QuerySource and conformance PgQuery_QuerySource;
  if (!lazy protocol witness table cache variable for type PgQuery_QuerySource and conformance PgQuery_QuerySource)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_QuerySource, &type metadata for PgQuery_QuerySource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_QuerySource and conformance PgQuery_QuerySource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_QuerySource and conformance PgQuery_QuerySource;
  if (!lazy protocol witness table cache variable for type PgQuery_QuerySource and conformance PgQuery_QuerySource)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_QuerySource, &type metadata for PgQuery_QuerySource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_QuerySource and conformance PgQuery_QuerySource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_QuerySource and conformance PgQuery_QuerySource;
  if (!lazy protocol witness table cache variable for type PgQuery_QuerySource and conformance PgQuery_QuerySource)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_QuerySource, &type metadata for PgQuery_QuerySource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_QuerySource and conformance PgQuery_QuerySource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_QuerySource and conformance PgQuery_QuerySource;
  if (!lazy protocol witness table cache variable for type PgQuery_QuerySource and conformance PgQuery_QuerySource)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_QuerySource, &type metadata for PgQuery_QuerySource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_QuerySource and conformance PgQuery_QuerySource);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind;
  if (!lazy protocol witness table cache variable for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_OverridingKind, &type metadata for PgQuery_OverridingKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind;
  if (!lazy protocol witness table cache variable for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_OverridingKind, &type metadata for PgQuery_OverridingKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind;
  if (!lazy protocol witness table cache variable for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_OverridingKind, &type metadata for PgQuery_OverridingKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind;
  if (!lazy protocol witness table cache variable for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_OverridingKind, &type metadata for PgQuery_OverridingKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_LimitOption and conformance PgQuery_LimitOption()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_LimitOption and conformance PgQuery_LimitOption;
  if (!lazy protocol witness table cache variable for type PgQuery_LimitOption and conformance PgQuery_LimitOption)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_LimitOption, &type metadata for PgQuery_LimitOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_LimitOption and conformance PgQuery_LimitOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_LimitOption and conformance PgQuery_LimitOption;
  if (!lazy protocol witness table cache variable for type PgQuery_LimitOption and conformance PgQuery_LimitOption)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_LimitOption, &type metadata for PgQuery_LimitOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_LimitOption and conformance PgQuery_LimitOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_LimitOption and conformance PgQuery_LimitOption;
  if (!lazy protocol witness table cache variable for type PgQuery_LimitOption and conformance PgQuery_LimitOption)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_LimitOption, &type metadata for PgQuery_LimitOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_LimitOption and conformance PgQuery_LimitOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_LimitOption and conformance PgQuery_LimitOption;
  if (!lazy protocol witness table cache variable for type PgQuery_LimitOption and conformance PgQuery_LimitOption)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_LimitOption, &type metadata for PgQuery_LimitOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_LimitOption and conformance PgQuery_LimitOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_SetOperation and conformance PgQuery_SetOperation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_SetOperation and conformance PgQuery_SetOperation;
  if (!lazy protocol witness table cache variable for type PgQuery_SetOperation and conformance PgQuery_SetOperation)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_SetOperation, &type metadata for PgQuery_SetOperation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SetOperation and conformance PgQuery_SetOperation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_SetOperation and conformance PgQuery_SetOperation;
  if (!lazy protocol witness table cache variable for type PgQuery_SetOperation and conformance PgQuery_SetOperation)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_SetOperation, &type metadata for PgQuery_SetOperation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SetOperation and conformance PgQuery_SetOperation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_SetOperation and conformance PgQuery_SetOperation;
  if (!lazy protocol witness table cache variable for type PgQuery_SetOperation and conformance PgQuery_SetOperation)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_SetOperation, &type metadata for PgQuery_SetOperation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SetOperation and conformance PgQuery_SetOperation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_SetOperation and conformance PgQuery_SetOperation;
  if (!lazy protocol witness table cache variable for type PgQuery_SetOperation and conformance PgQuery_SetOperation)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_SetOperation, &type metadata for PgQuery_SetOperation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SetOperation and conformance PgQuery_SetOperation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType;
  if (!lazy protocol witness table cache variable for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_AlterTableType, &type metadata for PgQuery_AlterTableType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType;
  if (!lazy protocol witness table cache variable for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_AlterTableType, &type metadata for PgQuery_AlterTableType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType;
  if (!lazy protocol witness table cache variable for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_AlterTableType, &type metadata for PgQuery_AlterTableType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType;
  if (!lazy protocol witness table cache variable for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_AlterTableType, &type metadata for PgQuery_AlterTableType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior;
  if (!lazy protocol witness table cache variable for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_DropBehavior, &type metadata for PgQuery_DropBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior;
  if (!lazy protocol witness table cache variable for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_DropBehavior, &type metadata for PgQuery_DropBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior;
  if (!lazy protocol witness table cache variable for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_DropBehavior, &type metadata for PgQuery_DropBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior;
  if (!lazy protocol witness table cache variable for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_DropBehavior, &type metadata for PgQuery_DropBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_ObjectType and conformance PgQuery_ObjectType;
  if (!lazy protocol witness table cache variable for type PgQuery_ObjectType and conformance PgQuery_ObjectType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_ObjectType, &type metadata for PgQuery_ObjectType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ObjectType and conformance PgQuery_ObjectType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_ObjectType and conformance PgQuery_ObjectType;
  if (!lazy protocol witness table cache variable for type PgQuery_ObjectType and conformance PgQuery_ObjectType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_ObjectType, &type metadata for PgQuery_ObjectType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ObjectType and conformance PgQuery_ObjectType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_ObjectType and conformance PgQuery_ObjectType;
  if (!lazy protocol witness table cache variable for type PgQuery_ObjectType and conformance PgQuery_ObjectType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_ObjectType, &type metadata for PgQuery_ObjectType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ObjectType and conformance PgQuery_ObjectType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_ObjectType and conformance PgQuery_ObjectType;
  if (!lazy protocol witness table cache variable for type PgQuery_ObjectType and conformance PgQuery_ObjectType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_ObjectType, &type metadata for PgQuery_ObjectType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ObjectType and conformance PgQuery_ObjectType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption;
  if (!lazy protocol witness table cache variable for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_ViewCheckOption, &type metadata for PgQuery_ViewCheckOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption;
  if (!lazy protocol witness table cache variable for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_ViewCheckOption, &type metadata for PgQuery_ViewCheckOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption;
  if (!lazy protocol witness table cache variable for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_ViewCheckOption, &type metadata for PgQuery_ViewCheckOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption;
  if (!lazy protocol witness table cache variable for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_ViewCheckOption, &type metadata for PgQuery_ViewCheckOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext;
  if (!lazy protocol witness table cache variable for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_CoercionContext, &type metadata for PgQuery_CoercionContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext;
  if (!lazy protocol witness table cache variable for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_CoercionContext, &type metadata for PgQuery_CoercionContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext;
  if (!lazy protocol witness table cache variable for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_CoercionContext, &type metadata for PgQuery_CoercionContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext;
  if (!lazy protocol witness table cache variable for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_CoercionContext, &type metadata for PgQuery_CoercionContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind;
  if (!lazy protocol witness table cache variable for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_A_Expr_Kind, &type metadata for PgQuery_A_Expr_Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind;
  if (!lazy protocol witness table cache variable for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_A_Expr_Kind, &type metadata for PgQuery_A_Expr_Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind;
  if (!lazy protocol witness table cache variable for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_A_Expr_Kind, &type metadata for PgQuery_A_Expr_Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind;
  if (!lazy protocol witness table cache variable for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_A_Expr_Kind, &type metadata for PgQuery_A_Expr_Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_SortByDir and conformance PgQuery_SortByDir()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_SortByDir and conformance PgQuery_SortByDir;
  if (!lazy protocol witness table cache variable for type PgQuery_SortByDir and conformance PgQuery_SortByDir)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_SortByDir, &type metadata for PgQuery_SortByDir);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SortByDir and conformance PgQuery_SortByDir);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_SortByDir and conformance PgQuery_SortByDir;
  if (!lazy protocol witness table cache variable for type PgQuery_SortByDir and conformance PgQuery_SortByDir)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_SortByDir, &type metadata for PgQuery_SortByDir);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SortByDir and conformance PgQuery_SortByDir);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_SortByDir and conformance PgQuery_SortByDir;
  if (!lazy protocol witness table cache variable for type PgQuery_SortByDir and conformance PgQuery_SortByDir)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_SortByDir, &type metadata for PgQuery_SortByDir);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SortByDir and conformance PgQuery_SortByDir);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_SortByDir and conformance PgQuery_SortByDir;
  if (!lazy protocol witness table cache variable for type PgQuery_SortByDir and conformance PgQuery_SortByDir)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_SortByDir, &type metadata for PgQuery_SortByDir);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SortByDir and conformance PgQuery_SortByDir);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls;
  if (!lazy protocol witness table cache variable for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_SortByNulls, &type metadata for PgQuery_SortByNulls);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls;
  if (!lazy protocol witness table cache variable for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_SortByNulls, &type metadata for PgQuery_SortByNulls);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls;
  if (!lazy protocol witness table cache variable for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_SortByNulls, &type metadata for PgQuery_SortByNulls);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls;
  if (!lazy protocol witness table cache variable for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_SortByNulls, &type metadata for PgQuery_SortByNulls);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_ConstrType and conformance PgQuery_ConstrType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_ConstrType and conformance PgQuery_ConstrType;
  if (!lazy protocol witness table cache variable for type PgQuery_ConstrType and conformance PgQuery_ConstrType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_ConstrType, &type metadata for PgQuery_ConstrType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ConstrType and conformance PgQuery_ConstrType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_ConstrType and conformance PgQuery_ConstrType;
  if (!lazy protocol witness table cache variable for type PgQuery_ConstrType and conformance PgQuery_ConstrType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_ConstrType, &type metadata for PgQuery_ConstrType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ConstrType and conformance PgQuery_ConstrType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_ConstrType and conformance PgQuery_ConstrType;
  if (!lazy protocol witness table cache variable for type PgQuery_ConstrType and conformance PgQuery_ConstrType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_ConstrType, &type metadata for PgQuery_ConstrType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ConstrType and conformance PgQuery_ConstrType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_ConstrType and conformance PgQuery_ConstrType;
  if (!lazy protocol witness table cache variable for type PgQuery_ConstrType and conformance PgQuery_ConstrType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_ConstrType, &type metadata for PgQuery_ConstrType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ConstrType and conformance PgQuery_ConstrType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction;
  if (!lazy protocol witness table cache variable for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_DefElemAction, &type metadata for PgQuery_DefElemAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction;
  if (!lazy protocol witness table cache variable for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_DefElemAction, &type metadata for PgQuery_DefElemAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction;
  if (!lazy protocol witness table cache variable for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_DefElemAction, &type metadata for PgQuery_DefElemAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction;
  if (!lazy protocol witness table cache variable for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_DefElemAction, &type metadata for PgQuery_DefElemAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_RTEKind and conformance PgQuery_RTEKind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_RTEKind and conformance PgQuery_RTEKind;
  if (!lazy protocol witness table cache variable for type PgQuery_RTEKind and conformance PgQuery_RTEKind)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_RTEKind, &type metadata for PgQuery_RTEKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_RTEKind and conformance PgQuery_RTEKind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_RTEKind and conformance PgQuery_RTEKind;
  if (!lazy protocol witness table cache variable for type PgQuery_RTEKind and conformance PgQuery_RTEKind)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_RTEKind, &type metadata for PgQuery_RTEKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_RTEKind and conformance PgQuery_RTEKind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_RTEKind and conformance PgQuery_RTEKind;
  if (!lazy protocol witness table cache variable for type PgQuery_RTEKind and conformance PgQuery_RTEKind)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_RTEKind, &type metadata for PgQuery_RTEKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_RTEKind and conformance PgQuery_RTEKind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_RTEKind and conformance PgQuery_RTEKind;
  if (!lazy protocol witness table cache variable for type PgQuery_RTEKind and conformance PgQuery_RTEKind)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_RTEKind, &type metadata for PgQuery_RTEKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_RTEKind and conformance PgQuery_RTEKind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_WCOKind and conformance PgQuery_WCOKind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_WCOKind and conformance PgQuery_WCOKind;
  if (!lazy protocol witness table cache variable for type PgQuery_WCOKind and conformance PgQuery_WCOKind)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_WCOKind, &type metadata for PgQuery_WCOKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_WCOKind and conformance PgQuery_WCOKind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_WCOKind and conformance PgQuery_WCOKind;
  if (!lazy protocol witness table cache variable for type PgQuery_WCOKind and conformance PgQuery_WCOKind)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_WCOKind, &type metadata for PgQuery_WCOKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_WCOKind and conformance PgQuery_WCOKind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_WCOKind and conformance PgQuery_WCOKind;
  if (!lazy protocol witness table cache variable for type PgQuery_WCOKind and conformance PgQuery_WCOKind)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_WCOKind, &type metadata for PgQuery_WCOKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_WCOKind and conformance PgQuery_WCOKind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_WCOKind and conformance PgQuery_WCOKind;
  if (!lazy protocol witness table cache variable for type PgQuery_WCOKind and conformance PgQuery_WCOKind)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_WCOKind, &type metadata for PgQuery_WCOKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_WCOKind and conformance PgQuery_WCOKind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode;
  if (!lazy protocol witness table cache variable for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_FunctionParameterMode, &type metadata for PgQuery_FunctionParameterMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode;
  if (!lazy protocol witness table cache variable for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_FunctionParameterMode, &type metadata for PgQuery_FunctionParameterMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode;
  if (!lazy protocol witness table cache variable for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_FunctionParameterMode, &type metadata for PgQuery_FunctionParameterMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode;
  if (!lazy protocol witness table cache variable for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_FunctionParameterMode, &type metadata for PgQuery_FunctionParameterMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize;
  if (!lazy protocol witness table cache variable for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_CTEMaterialize, &type metadata for PgQuery_CTEMaterialize);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize;
  if (!lazy protocol witness table cache variable for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_CTEMaterialize, &type metadata for PgQuery_CTEMaterialize);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize;
  if (!lazy protocol witness table cache variable for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_CTEMaterialize, &type metadata for PgQuery_CTEMaterialize);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize;
  if (!lazy protocol witness table cache variable for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_CTEMaterialize, &type metadata for PgQuery_CTEMaterialize);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind;
  if (!lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_PartitionRangeDatumKind, &type metadata for PgQuery_PartitionRangeDatumKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind;
  if (!lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_PartitionRangeDatumKind, &type metadata for PgQuery_PartitionRangeDatumKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind;
  if (!lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_PartitionRangeDatumKind, &type metadata for PgQuery_PartitionRangeDatumKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind;
  if (!lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_PartitionRangeDatumKind, &type metadata for PgQuery_PartitionRangeDatumKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind);
  }
  return result;
}

uint64_t PgQuery_PartitionRangeDatum.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v5;

  v1 = v0;
  specialized PgQuery_PartitionRangeDatum._uniqueStorage()();
  type metadata accessor for PgQuery_PartitionRangeDatum(0);
  swift_retain();
  v2 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if ((v3 & 1) != 0)
        return swift_release();
      if (v2 == 1)
        break;
      if (v2 == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
        v5 = v1;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (v2 == 3)
      {
        v5 = v1;
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
        goto LABEL_5;
      }
LABEL_6:
      v2 = dispatch thunk of Decoder.nextFieldNumber()();
    }
    lazy protocol witness table accessor for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind();
    v5 = v1;
    dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_5:
    v1 = v5;
    goto LABEL_6;
  }
  return swift_release();
}

uint64_t PgQuery_PartitionRangeDatum.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Node = type metadata accessor for PgQuery_Node(0);
  v9 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v18 = (uint64_t)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(int *)(type metadata accessor for PgQuery_PartitionRangeDatum(0) + 20);
  v17 = v2;
  v12 = *(_QWORD *)(v2 + v11);
  v13 = *(_QWORD *)(v12 + 16);
  v21 = a2;
  if (v13)
  {
    v14 = *(_BYTE *)(v12 + 24);
    v19 = v13;
    v20 = v14;
    lazy protocol witness table accessor for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind();
    swift_retain();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v3)
      return swift_release();
  }
  else
  {
    swift_retain();
  }
  outlined init with copy of PgQuery_Alias?(v12+ OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_PartitionRangeDatumP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__value, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) != 1)
  {
    v15 = v18;
    outlined init with take of PgQuery_OidList((uint64_t)v7, v18, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v15, type metadata accessor for PgQuery_Node);
    if (!v3)
      goto LABEL_8;
    return swift_release();
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_8:
  if (*(_DWORD *)(v12
                 + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_PartitionRangeDatumP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v3)
      return swift_release();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_PartitionRangeDatum@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_PartitionRangeDatum._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.init() in conformance PgQuery_Node@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X2>, _QWORD *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;

  UnknownStorage.init()();
  v8 = *(int *)(a1 + 20);
  if (*a2 != -1)
    swift_once();
  *(_QWORD *)(a4 + v8) = *a3;
  return swift_retain();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_PartitionRangeDatum()
{
  return 0xD00000000000001CLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_PartitionRangeDatum()
{
  return PgQuery_PartitionRangeDatum.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_PartitionRangeDatum(uint64_t a1, uint64_t a2)
{
  return PgQuery_PartitionRangeDatum.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_PartitionRangeDatum()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatum and conformance PgQuery_PartitionRangeDatum, type metadata accessor for PgQuery_PartitionRangeDatum, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionRangeDatum);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_PartitionRangeDatum@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_PartitionRangeDatum._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_PartitionRangeDatum()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatum and conformance PgQuery_PartitionRangeDatum, type metadata accessor for PgQuery_PartitionRangeDatum, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionRangeDatum);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_PartitionRangeDatum()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatum and conformance PgQuery_PartitionRangeDatum, type metadata accessor for PgQuery_PartitionRangeDatum, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionRangeDatum);
  return Message.hash(into:)();
}

uint64_t PgQuery_PartitionCmd.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  unint64_t *v3;
  uint64_t (*v4)(uint64_t);
  void *v5;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 2)
        break;
      if (result == 1)
      {
        type metadata accessor for PgQuery_PartitionCmd(0);
        type metadata accessor for PgQuery_RangeVar(0);
        v3 = &lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar;
        v4 = type metadata accessor for PgQuery_RangeVar;
        v5 = &protocol conformance descriptor for PgQuery_RangeVar;
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for PgQuery_PartitionCmd(0);
    type metadata accessor for PgQuery_PartitionBoundSpec(0);
    v3 = &lazy protocol witness table cache variable for type PgQuery_PartitionBoundSpec and conformance PgQuery_PartitionBoundSpec;
    v4 = type metadata accessor for PgQuery_PartitionBoundSpec;
    v5 = &protocol conformance descriptor for PgQuery_PartitionBoundSpec;
LABEL_5:
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(v3, v4, (uint64_t)v5);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_PartitionCmd.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t PartitionBoundSpec;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t RangeVar;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t PartitionCmd;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = v3;
  v27 = a2;
  v28 = a3;
  v26 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  v24 = *(_QWORD *)(PartitionBoundSpec - 8);
  v25 = PartitionBoundSpec;
  MEMORY[0x1E0C80A78](PartitionBoundSpec);
  v23 = (uint64_t)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v15 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  PartitionCmd = type metadata accessor for PgQuery_PartitionCmd(0);
  v19 = *(int *)(PartitionCmd + 20);
  v29 = v5;
  outlined init with copy of PgQuery_Alias?(v5 + v19, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    v20 = v29;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v13, (uint64_t)v17, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    result = outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RangeVar);
    v20 = v29;
    if (v4)
      return result;
  }
  outlined init with copy of PgQuery_Alias?(v20 + *(int *)(PartitionCmd + 24), (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v8, 1, v25) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  }
  else
  {
    v22 = v23;
    outlined init with take of PgQuery_OidList((uint64_t)v8, v23, type metadata accessor for PgQuery_PartitionBoundSpec);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionBoundSpec and conformance PgQuery_PartitionBoundSpec, type metadata accessor for PgQuery_PartitionBoundSpec, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionBoundSpec);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    result = outlined destroy of PgQuery_Alias(v22, type metadata accessor for PgQuery_PartitionBoundSpec);
    if (v4)
      return result;
  }
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_PartitionCmd@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t RangeVar;
  uint64_t v6;
  uint64_t PartitionBoundSpec;

  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 20);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v4, 1, 1, RangeVar);
  v6 = a2 + *(int *)(a1 + 24);
  PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(PartitionBoundSpec - 8) + 56))(v6, 1, 1, PartitionBoundSpec);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_PartitionCmd()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance PgQuery_Node@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance PgQuery_Node(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_PartitionCmd()
{
  return PgQuery_PartitionCmd.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_PartitionCmd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_PartitionCmd.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_PartitionCmd()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionCmd and conformance PgQuery_PartitionCmd, type metadata accessor for PgQuery_PartitionCmd, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionCmd);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_PartitionCmd@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_PartitionCmd._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_PartitionCmd()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionCmd and conformance PgQuery_PartitionCmd, type metadata accessor for PgQuery_PartitionCmd, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionCmd);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_PartitionCmd()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionCmd and conformance PgQuery_PartitionCmd, type metadata accessor for PgQuery_PartitionCmd, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionCmd);
  return Message.hash(into:)();
}

uint64_t PgQuery_VacuumRelation.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for PgQuery_VacuumRelation(0);
        type metadata accessor for PgQuery_RangeVar(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    v4 = v3;
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
    v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_VacuumRelation.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t RangeVar;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  _QWORD v14[4];

  v5 = v3;
  v14[3] = a3;
  v14[1] = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v10 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v12 = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = type metadata accessor for PgQuery_VacuumRelation(0);
  outlined init with copy of PgQuery_Alias?(v5 + *(int *)(v14[0] + 28), (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, RangeVar) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v8, (uint64_t)v12, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    result = outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_RangeVar);
    if (v4)
      return result;
  }
  if (!*(_DWORD *)v5 || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v5 + 8) + 16))
      return UnknownStorage.traverse<A>(visitor:)();
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
    result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (!v4)
      return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_VacuumRelation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t RangeVar;

  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = MEMORY[0x1E0DEE9D8];
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 28);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v4, 1, 1, RangeVar);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_VacuumRelation()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance PgQuery_ParseResult@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance PgQuery_ParseResult(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_VacuumRelation()
{
  return PgQuery_VacuumRelation.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_VacuumRelation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_VacuumRelation.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_VacuumRelation()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumRelation and conformance PgQuery_VacuumRelation, type metadata accessor for PgQuery_VacuumRelation, (uint64_t)&protocol conformance descriptor for PgQuery_VacuumRelation);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_VacuumRelation@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_VacuumRelation._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_VacuumRelation()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumRelation and conformance PgQuery_VacuumRelation, type metadata accessor for PgQuery_VacuumRelation, (uint64_t)&protocol conformance descriptor for PgQuery_VacuumRelation);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_VacuumRelation()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumRelation and conformance PgQuery_VacuumRelation, type metadata accessor for PgQuery_VacuumRelation, (uint64_t)&protocol conformance descriptor for PgQuery_VacuumRelation);
  return Message.hash(into:)();
}

uint64_t PgQuery_InlineCodeBlock.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_InlineCodeBlock.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(v0 + 8);
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *(_QWORD *)v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!*(_DWORD *)(v0 + 16)
      || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
    {
      if (*(_BYTE *)(v0 + 20) != 1
        || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
      {
        if (*(_BYTE *)(v0 + 21) != 1
          || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for PgQuery_InlineCodeBlock(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_InlineCodeBlock@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_DWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 20) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_InlineCodeBlock()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_InlineCodeBlock()
{
  return PgQuery_InlineCodeBlock.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_InlineCodeBlock()
{
  return PgQuery_InlineCodeBlock.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_InlineCodeBlock()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InlineCodeBlock and conformance PgQuery_InlineCodeBlock, type metadata accessor for PgQuery_InlineCodeBlock, (uint64_t)&protocol conformance descriptor for PgQuery_InlineCodeBlock);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_InlineCodeBlock@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_InlineCodeBlock._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_InlineCodeBlock()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InlineCodeBlock and conformance PgQuery_InlineCodeBlock, type metadata accessor for PgQuery_InlineCodeBlock, (uint64_t)&protocol conformance descriptor for PgQuery_InlineCodeBlock);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_InlineCodeBlock()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InlineCodeBlock and conformance PgQuery_InlineCodeBlock, type metadata accessor for PgQuery_InlineCodeBlock, (uint64_t)&protocol conformance descriptor for PgQuery_InlineCodeBlock);
  return Message.hash(into:)();
}

uint64_t PgQuery_CallContext.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 1)
      dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  }
  return result;
}

uint64_t PgQuery_CallContext.traverse<A>(visitor:)()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t result;

  if (*v0 != 1 || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for PgQuery_CallContext(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CallContext@<X0>(_BYTE *a1@<X8>)
{
  *a1 = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CallContext()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance PgQuery_Integer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance PgQuery_Integer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CallContext()
{
  return PgQuery_CallContext.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CallContext()
{
  return PgQuery_CallContext.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CallContext()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallContext and conformance PgQuery_CallContext, type metadata accessor for PgQuery_CallContext, (uint64_t)&protocol conformance descriptor for PgQuery_CallContext);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CallContext@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CallContext._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CallContext()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallContext and conformance PgQuery_CallContext, type metadata accessor for PgQuery_CallContext, (uint64_t)&protocol conformance descriptor for PgQuery_CallContext);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CallContext()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallContext and conformance PgQuery_CallContext, type metadata accessor for PgQuery_CallContext, (uint64_t)&protocol conformance descriptor for PgQuery_CallContext);
  return Message.hash(into:)();
}

uint64_t PgQuery_ScanToken.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 4:
          lazy protocol witness table accessor for type PgQuery_Token and conformance PgQuery_Token();
          goto LABEL_9;
        case 5:
          lazy protocol witness table accessor for type PgQuery_KeywordKind and conformance PgQuery_KeywordKind();
LABEL_9:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_ScanToken.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_DWORD *)v0 || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
  {
    if (!*(_DWORD *)(v0 + 4) || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
    {
      if (!PgQuery_Token.rawValue.getter(*(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16))
        || (lazy protocol witness table accessor for type PgQuery_Token and conformance PgQuery_Token(),
            result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
            !v1))
      {
        if (!*(_QWORD *)(v0 + 24)
          || (lazy protocol witness table accessor for type PgQuery_KeywordKind and conformance PgQuery_KeywordKind(),
              result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
              !v1))
        {
          type metadata accessor for PgQuery_ScanToken(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ScanToken@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ScanToken()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance PgQuery_FetchStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance PgQuery_FetchStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_ScanToken()
{
  return PgQuery_ScanToken.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_ScanToken()
{
  return PgQuery_ScanToken.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ScanToken()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScanToken and conformance PgQuery_ScanToken, type metadata accessor for PgQuery_ScanToken, (uint64_t)&protocol conformance descriptor for PgQuery_ScanToken);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ScanToken@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ScanToken._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ScanToken()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScanToken and conformance PgQuery_ScanToken, type metadata accessor for PgQuery_ScanToken, (uint64_t)&protocol conformance descriptor for PgQuery_ScanToken);
  return Message.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PgQuery_ParseResult()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ScanToken()
{
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScanToken and conformance PgQuery_ScanToken, type metadata accessor for PgQuery_ScanToken, (uint64_t)&protocol conformance descriptor for PgQuery_ScanToken);
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PgQuery_ParseResult()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t base witness table accessor for Equatable in PgQuery_ScanToken()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScanToken and conformance PgQuery_ScanToken, type metadata accessor for PgQuery_ScanToken, (uint64_t)&protocol conformance descriptor for PgQuery_ScanToken);
}

uint64_t type metadata accessor for PgQuery_ScanToken(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ScanToken);
}

uint64_t base witness table accessor for Message in PgQuery_ScanToken()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScanToken and conformance PgQuery_ScanToken, type metadata accessor for PgQuery_ScanToken, (uint64_t)&protocol conformance descriptor for PgQuery_ScanToken);
}

uint64_t lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x193FED7A0](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Hashable in PgQuery_ScanToken()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScanToken and conformance PgQuery_ScanToken, type metadata accessor for PgQuery_ScanToken, (uint64_t)&protocol conformance descriptor for PgQuery_ScanToken);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ScanToken()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScanToken and conformance PgQuery_ScanToken, type metadata accessor for PgQuery_ScanToken, (uint64_t)&protocol conformance descriptor for PgQuery_ScanToken);
}

uint64_t base witness table accessor for Equatable in PgQuery_CallContext()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallContext and conformance PgQuery_CallContext, type metadata accessor for PgQuery_CallContext, (uint64_t)&protocol conformance descriptor for PgQuery_CallContext);
}

uint64_t base witness table accessor for Message in PgQuery_CallContext()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallContext and conformance PgQuery_CallContext, type metadata accessor for PgQuery_CallContext, (uint64_t)&protocol conformance descriptor for PgQuery_CallContext);
}

uint64_t base witness table accessor for Hashable in PgQuery_CallContext()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallContext and conformance PgQuery_CallContext, type metadata accessor for PgQuery_CallContext, (uint64_t)&protocol conformance descriptor for PgQuery_CallContext);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CallContext()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallContext and conformance PgQuery_CallContext, type metadata accessor for PgQuery_CallContext, (uint64_t)&protocol conformance descriptor for PgQuery_CallContext);
}

uint64_t base witness table accessor for Equatable in PgQuery_InlineCodeBlock()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InlineCodeBlock and conformance PgQuery_InlineCodeBlock, type metadata accessor for PgQuery_InlineCodeBlock, (uint64_t)&protocol conformance descriptor for PgQuery_InlineCodeBlock);
}

uint64_t base witness table accessor for Message in PgQuery_InlineCodeBlock()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InlineCodeBlock and conformance PgQuery_InlineCodeBlock, type metadata accessor for PgQuery_InlineCodeBlock, (uint64_t)&protocol conformance descriptor for PgQuery_InlineCodeBlock);
}

uint64_t base witness table accessor for Hashable in PgQuery_InlineCodeBlock()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InlineCodeBlock and conformance PgQuery_InlineCodeBlock, type metadata accessor for PgQuery_InlineCodeBlock, (uint64_t)&protocol conformance descriptor for PgQuery_InlineCodeBlock);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_InlineCodeBlock()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InlineCodeBlock and conformance PgQuery_InlineCodeBlock, type metadata accessor for PgQuery_InlineCodeBlock, (uint64_t)&protocol conformance descriptor for PgQuery_InlineCodeBlock);
}

uint64_t base witness table accessor for Equatable in PgQuery_VacuumRelation()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumRelation and conformance PgQuery_VacuumRelation, type metadata accessor for PgQuery_VacuumRelation, (uint64_t)&protocol conformance descriptor for PgQuery_VacuumRelation);
}

uint64_t base witness table accessor for Message in PgQuery_VacuumRelation()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumRelation and conformance PgQuery_VacuumRelation, type metadata accessor for PgQuery_VacuumRelation, (uint64_t)&protocol conformance descriptor for PgQuery_VacuumRelation);
}

uint64_t base witness table accessor for Hashable in PgQuery_VacuumRelation()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumRelation and conformance PgQuery_VacuumRelation, type metadata accessor for PgQuery_VacuumRelation, (uint64_t)&protocol conformance descriptor for PgQuery_VacuumRelation);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_VacuumRelation()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumRelation and conformance PgQuery_VacuumRelation, type metadata accessor for PgQuery_VacuumRelation, (uint64_t)&protocol conformance descriptor for PgQuery_VacuumRelation);
}

uint64_t base witness table accessor for Equatable in PgQuery_PartitionCmd()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionCmd and conformance PgQuery_PartitionCmd, type metadata accessor for PgQuery_PartitionCmd, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionCmd);
}

uint64_t base witness table accessor for Message in PgQuery_PartitionCmd()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionCmd and conformance PgQuery_PartitionCmd, type metadata accessor for PgQuery_PartitionCmd, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionCmd);
}

uint64_t base witness table accessor for Hashable in PgQuery_PartitionCmd()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionCmd and conformance PgQuery_PartitionCmd, type metadata accessor for PgQuery_PartitionCmd, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionCmd);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_PartitionCmd()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionCmd and conformance PgQuery_PartitionCmd, type metadata accessor for PgQuery_PartitionCmd, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionCmd);
}

uint64_t base witness table accessor for Equatable in PgQuery_PartitionRangeDatum()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatum and conformance PgQuery_PartitionRangeDatum, type metadata accessor for PgQuery_PartitionRangeDatum, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionRangeDatum);
}

uint64_t base witness table accessor for Message in PgQuery_PartitionRangeDatum()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatum and conformance PgQuery_PartitionRangeDatum, type metadata accessor for PgQuery_PartitionRangeDatum, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionRangeDatum);
}

uint64_t base witness table accessor for Hashable in PgQuery_PartitionRangeDatum()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatum and conformance PgQuery_PartitionRangeDatum, type metadata accessor for PgQuery_PartitionRangeDatum, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionRangeDatum);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_PartitionRangeDatum()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatum and conformance PgQuery_PartitionRangeDatum, type metadata accessor for PgQuery_PartitionRangeDatum, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionRangeDatum);
}

uint64_t base witness table accessor for Equatable in PgQuery_PartitionBoundSpec()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionBoundSpec and conformance PgQuery_PartitionBoundSpec, type metadata accessor for PgQuery_PartitionBoundSpec, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionBoundSpec);
}

uint64_t base witness table accessor for Message in PgQuery_PartitionBoundSpec()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionBoundSpec and conformance PgQuery_PartitionBoundSpec, type metadata accessor for PgQuery_PartitionBoundSpec, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionBoundSpec);
}

uint64_t base witness table accessor for Hashable in PgQuery_PartitionBoundSpec()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionBoundSpec and conformance PgQuery_PartitionBoundSpec, type metadata accessor for PgQuery_PartitionBoundSpec, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionBoundSpec);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_PartitionBoundSpec()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionBoundSpec and conformance PgQuery_PartitionBoundSpec, type metadata accessor for PgQuery_PartitionBoundSpec, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionBoundSpec);
}

uint64_t base witness table accessor for Equatable in PgQuery_PartitionSpec()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionSpec and conformance PgQuery_PartitionSpec, type metadata accessor for PgQuery_PartitionSpec, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionSpec);
}

uint64_t base witness table accessor for Message in PgQuery_PartitionSpec()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionSpec and conformance PgQuery_PartitionSpec, type metadata accessor for PgQuery_PartitionSpec, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionSpec);
}

uint64_t base witness table accessor for Hashable in PgQuery_PartitionSpec()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionSpec and conformance PgQuery_PartitionSpec, type metadata accessor for PgQuery_PartitionSpec, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionSpec);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_PartitionSpec()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionSpec and conformance PgQuery_PartitionSpec, type metadata accessor for PgQuery_PartitionSpec, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionSpec);
}

uint64_t base witness table accessor for Equatable in PgQuery_PartitionElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionElem and conformance PgQuery_PartitionElem, type metadata accessor for PgQuery_PartitionElem, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionElem);
}

uint64_t base witness table accessor for Message in PgQuery_PartitionElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionElem and conformance PgQuery_PartitionElem, type metadata accessor for PgQuery_PartitionElem, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionElem);
}

uint64_t base witness table accessor for Hashable in PgQuery_PartitionElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionElem and conformance PgQuery_PartitionElem, type metadata accessor for PgQuery_PartitionElem, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionElem);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_PartitionElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionElem and conformance PgQuery_PartitionElem, type metadata accessor for PgQuery_PartitionElem, (uint64_t)&protocol conformance descriptor for PgQuery_PartitionElem);
}

uint64_t base witness table accessor for Equatable in PgQuery_TriggerTransition()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TriggerTransition and conformance PgQuery_TriggerTransition, type metadata accessor for PgQuery_TriggerTransition, (uint64_t)&protocol conformance descriptor for PgQuery_TriggerTransition);
}

uint64_t base witness table accessor for Message in PgQuery_TriggerTransition()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TriggerTransition and conformance PgQuery_TriggerTransition, type metadata accessor for PgQuery_TriggerTransition, (uint64_t)&protocol conformance descriptor for PgQuery_TriggerTransition);
}

uint64_t base witness table accessor for Hashable in PgQuery_TriggerTransition()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TriggerTransition and conformance PgQuery_TriggerTransition, type metadata accessor for PgQuery_TriggerTransition, (uint64_t)&protocol conformance descriptor for PgQuery_TriggerTransition);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_TriggerTransition()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TriggerTransition and conformance PgQuery_TriggerTransition, type metadata accessor for PgQuery_TriggerTransition, (uint64_t)&protocol conformance descriptor for PgQuery_TriggerTransition);
}

uint64_t base witness table accessor for Equatable in PgQuery_RoleSpec()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, type metadata accessor for PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
}

uint64_t base witness table accessor for Message in PgQuery_RoleSpec()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, type metadata accessor for PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
}

uint64_t base witness table accessor for Hashable in PgQuery_RoleSpec()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, type metadata accessor for PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RoleSpec()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, type metadata accessor for PgQuery_RoleSpec, (uint64_t)&protocol conformance descriptor for PgQuery_RoleSpec);
}

uint64_t base witness table accessor for Equatable in PgQuery_CommonTableExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommonTableExpr and conformance PgQuery_CommonTableExpr, type metadata accessor for PgQuery_CommonTableExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CommonTableExpr);
}

uint64_t base witness table accessor for Message in PgQuery_CommonTableExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommonTableExpr and conformance PgQuery_CommonTableExpr, type metadata accessor for PgQuery_CommonTableExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CommonTableExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_CommonTableExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommonTableExpr and conformance PgQuery_CommonTableExpr, type metadata accessor for PgQuery_CommonTableExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CommonTableExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CommonTableExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommonTableExpr and conformance PgQuery_CommonTableExpr, type metadata accessor for PgQuery_CommonTableExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CommonTableExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_OnConflictClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictClause and conformance PgQuery_OnConflictClause, type metadata accessor for PgQuery_OnConflictClause, (uint64_t)&protocol conformance descriptor for PgQuery_OnConflictClause);
}

uint64_t base witness table accessor for Message in PgQuery_OnConflictClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictClause and conformance PgQuery_OnConflictClause, type metadata accessor for PgQuery_OnConflictClause, (uint64_t)&protocol conformance descriptor for PgQuery_OnConflictClause);
}

uint64_t base witness table accessor for Hashable in PgQuery_OnConflictClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictClause and conformance PgQuery_OnConflictClause, type metadata accessor for PgQuery_OnConflictClause, (uint64_t)&protocol conformance descriptor for PgQuery_OnConflictClause);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_OnConflictClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictClause and conformance PgQuery_OnConflictClause, type metadata accessor for PgQuery_OnConflictClause, (uint64_t)&protocol conformance descriptor for PgQuery_OnConflictClause);
}

uint64_t base witness table accessor for Equatable in PgQuery_InferClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferClause and conformance PgQuery_InferClause, type metadata accessor for PgQuery_InferClause, (uint64_t)&protocol conformance descriptor for PgQuery_InferClause);
}

uint64_t base witness table accessor for Message in PgQuery_InferClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferClause and conformance PgQuery_InferClause, type metadata accessor for PgQuery_InferClause, (uint64_t)&protocol conformance descriptor for PgQuery_InferClause);
}

uint64_t base witness table accessor for Hashable in PgQuery_InferClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferClause and conformance PgQuery_InferClause, type metadata accessor for PgQuery_InferClause, (uint64_t)&protocol conformance descriptor for PgQuery_InferClause);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_InferClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferClause and conformance PgQuery_InferClause, type metadata accessor for PgQuery_InferClause, (uint64_t)&protocol conformance descriptor for PgQuery_InferClause);
}

uint64_t base witness table accessor for Equatable in PgQuery_WithClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, type metadata accessor for PgQuery_WithClause, (uint64_t)&protocol conformance descriptor for PgQuery_WithClause);
}

uint64_t base witness table accessor for Message in PgQuery_WithClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, type metadata accessor for PgQuery_WithClause, (uint64_t)&protocol conformance descriptor for PgQuery_WithClause);
}

uint64_t base witness table accessor for Hashable in PgQuery_WithClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, type metadata accessor for PgQuery_WithClause, (uint64_t)&protocol conformance descriptor for PgQuery_WithClause);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_WithClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, type metadata accessor for PgQuery_WithClause, (uint64_t)&protocol conformance descriptor for PgQuery_WithClause);
}

uint64_t base witness table accessor for Equatable in PgQuery_XmlSerialize()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlSerialize and conformance PgQuery_XmlSerialize, type metadata accessor for PgQuery_XmlSerialize, (uint64_t)&protocol conformance descriptor for PgQuery_XmlSerialize);
}

uint64_t base witness table accessor for Message in PgQuery_XmlSerialize()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlSerialize and conformance PgQuery_XmlSerialize, type metadata accessor for PgQuery_XmlSerialize, (uint64_t)&protocol conformance descriptor for PgQuery_XmlSerialize);
}

uint64_t base witness table accessor for Hashable in PgQuery_XmlSerialize()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlSerialize and conformance PgQuery_XmlSerialize, type metadata accessor for PgQuery_XmlSerialize, (uint64_t)&protocol conformance descriptor for PgQuery_XmlSerialize);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_XmlSerialize()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlSerialize and conformance PgQuery_XmlSerialize, type metadata accessor for PgQuery_XmlSerialize, (uint64_t)&protocol conformance descriptor for PgQuery_XmlSerialize);
}

uint64_t base witness table accessor for Equatable in PgQuery_RowMarkClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowMarkClause and conformance PgQuery_RowMarkClause, type metadata accessor for PgQuery_RowMarkClause, (uint64_t)&protocol conformance descriptor for PgQuery_RowMarkClause);
}

uint64_t base witness table accessor for Message in PgQuery_RowMarkClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowMarkClause and conformance PgQuery_RowMarkClause, type metadata accessor for PgQuery_RowMarkClause, (uint64_t)&protocol conformance descriptor for PgQuery_RowMarkClause);
}

uint64_t base witness table accessor for Hashable in PgQuery_RowMarkClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowMarkClause and conformance PgQuery_RowMarkClause, type metadata accessor for PgQuery_RowMarkClause, (uint64_t)&protocol conformance descriptor for PgQuery_RowMarkClause);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RowMarkClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowMarkClause and conformance PgQuery_RowMarkClause, type metadata accessor for PgQuery_RowMarkClause, (uint64_t)&protocol conformance descriptor for PgQuery_RowMarkClause);
}

uint64_t base witness table accessor for Equatable in PgQuery_LockingClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockingClause and conformance PgQuery_LockingClause, type metadata accessor for PgQuery_LockingClause, (uint64_t)&protocol conformance descriptor for PgQuery_LockingClause);
}

uint64_t base witness table accessor for Message in PgQuery_LockingClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockingClause and conformance PgQuery_LockingClause, type metadata accessor for PgQuery_LockingClause, (uint64_t)&protocol conformance descriptor for PgQuery_LockingClause);
}

uint64_t base witness table accessor for Hashable in PgQuery_LockingClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockingClause and conformance PgQuery_LockingClause, type metadata accessor for PgQuery_LockingClause, (uint64_t)&protocol conformance descriptor for PgQuery_LockingClause);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_LockingClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockingClause and conformance PgQuery_LockingClause, type metadata accessor for PgQuery_LockingClause, (uint64_t)&protocol conformance descriptor for PgQuery_LockingClause);
}

uint64_t base witness table accessor for Equatable in PgQuery_FunctionParameter()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FunctionParameter and conformance PgQuery_FunctionParameter, type metadata accessor for PgQuery_FunctionParameter, (uint64_t)&protocol conformance descriptor for PgQuery_FunctionParameter);
}

uint64_t base witness table accessor for Message in PgQuery_FunctionParameter()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FunctionParameter and conformance PgQuery_FunctionParameter, type metadata accessor for PgQuery_FunctionParameter, (uint64_t)&protocol conformance descriptor for PgQuery_FunctionParameter);
}

uint64_t base witness table accessor for Hashable in PgQuery_FunctionParameter()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FunctionParameter and conformance PgQuery_FunctionParameter, type metadata accessor for PgQuery_FunctionParameter, (uint64_t)&protocol conformance descriptor for PgQuery_FunctionParameter);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_FunctionParameter()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FunctionParameter and conformance PgQuery_FunctionParameter, type metadata accessor for PgQuery_FunctionParameter, (uint64_t)&protocol conformance descriptor for PgQuery_FunctionParameter);
}

uint64_t base witness table accessor for Equatable in PgQuery_TableLikeClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableLikeClause and conformance PgQuery_TableLikeClause, type metadata accessor for PgQuery_TableLikeClause, (uint64_t)&protocol conformance descriptor for PgQuery_TableLikeClause);
}

uint64_t base witness table accessor for Message in PgQuery_TableLikeClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableLikeClause and conformance PgQuery_TableLikeClause, type metadata accessor for PgQuery_TableLikeClause, (uint64_t)&protocol conformance descriptor for PgQuery_TableLikeClause);
}

uint64_t base witness table accessor for Hashable in PgQuery_TableLikeClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableLikeClause and conformance PgQuery_TableLikeClause, type metadata accessor for PgQuery_TableLikeClause, (uint64_t)&protocol conformance descriptor for PgQuery_TableLikeClause);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_TableLikeClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableLikeClause and conformance PgQuery_TableLikeClause, type metadata accessor for PgQuery_TableLikeClause, (uint64_t)&protocol conformance descriptor for PgQuery_TableLikeClause);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateOpClassItem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassItem and conformance PgQuery_CreateOpClassItem, type metadata accessor for PgQuery_CreateOpClassItem, (uint64_t)&protocol conformance descriptor for PgQuery_CreateOpClassItem);
}

uint64_t base witness table accessor for Message in PgQuery_CreateOpClassItem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassItem and conformance PgQuery_CreateOpClassItem, type metadata accessor for PgQuery_CreateOpClassItem, (uint64_t)&protocol conformance descriptor for PgQuery_CreateOpClassItem);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateOpClassItem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassItem and conformance PgQuery_CreateOpClassItem, type metadata accessor for PgQuery_CreateOpClassItem, (uint64_t)&protocol conformance descriptor for PgQuery_CreateOpClassItem);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateOpClassItem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassItem and conformance PgQuery_CreateOpClassItem, type metadata accessor for PgQuery_CreateOpClassItem, (uint64_t)&protocol conformance descriptor for PgQuery_CreateOpClassItem);
}

uint64_t base witness table accessor for Equatable in PgQuery_AccessPriv()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AccessPriv and conformance PgQuery_AccessPriv, type metadata accessor for PgQuery_AccessPriv, (uint64_t)&protocol conformance descriptor for PgQuery_AccessPriv);
}

uint64_t base witness table accessor for Message in PgQuery_AccessPriv()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AccessPriv and conformance PgQuery_AccessPriv, type metadata accessor for PgQuery_AccessPriv, (uint64_t)&protocol conformance descriptor for PgQuery_AccessPriv);
}

uint64_t base witness table accessor for Hashable in PgQuery_AccessPriv()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AccessPriv and conformance PgQuery_AccessPriv, type metadata accessor for PgQuery_AccessPriv, (uint64_t)&protocol conformance descriptor for PgQuery_AccessPriv);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AccessPriv()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AccessPriv and conformance PgQuery_AccessPriv, type metadata accessor for PgQuery_AccessPriv, (uint64_t)&protocol conformance descriptor for PgQuery_AccessPriv);
}

uint64_t base witness table accessor for Equatable in PgQuery_ObjectWithArgs()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, type metadata accessor for PgQuery_ObjectWithArgs, (uint64_t)&protocol conformance descriptor for PgQuery_ObjectWithArgs);
}

uint64_t base witness table accessor for Message in PgQuery_ObjectWithArgs()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, type metadata accessor for PgQuery_ObjectWithArgs, (uint64_t)&protocol conformance descriptor for PgQuery_ObjectWithArgs);
}

uint64_t base witness table accessor for Hashable in PgQuery_ObjectWithArgs()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, type metadata accessor for PgQuery_ObjectWithArgs, (uint64_t)&protocol conformance descriptor for PgQuery_ObjectWithArgs);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ObjectWithArgs()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, type metadata accessor for PgQuery_ObjectWithArgs, (uint64_t)&protocol conformance descriptor for PgQuery_ObjectWithArgs);
}

uint64_t base witness table accessor for Equatable in PgQuery_WindowClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowClause and conformance PgQuery_WindowClause, type metadata accessor for PgQuery_WindowClause, (uint64_t)&protocol conformance descriptor for PgQuery_WindowClause);
}

uint64_t base witness table accessor for Message in PgQuery_WindowClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowClause and conformance PgQuery_WindowClause, type metadata accessor for PgQuery_WindowClause, (uint64_t)&protocol conformance descriptor for PgQuery_WindowClause);
}

uint64_t base witness table accessor for Hashable in PgQuery_WindowClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowClause and conformance PgQuery_WindowClause, type metadata accessor for PgQuery_WindowClause, (uint64_t)&protocol conformance descriptor for PgQuery_WindowClause);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_WindowClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowClause and conformance PgQuery_WindowClause, type metadata accessor for PgQuery_WindowClause, (uint64_t)&protocol conformance descriptor for PgQuery_WindowClause);
}

uint64_t base witness table accessor for Equatable in PgQuery_GroupingSet()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingSet and conformance PgQuery_GroupingSet, type metadata accessor for PgQuery_GroupingSet, (uint64_t)&protocol conformance descriptor for PgQuery_GroupingSet);
}

uint64_t base witness table accessor for Message in PgQuery_GroupingSet()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingSet and conformance PgQuery_GroupingSet, type metadata accessor for PgQuery_GroupingSet, (uint64_t)&protocol conformance descriptor for PgQuery_GroupingSet);
}

uint64_t base witness table accessor for Hashable in PgQuery_GroupingSet()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingSet and conformance PgQuery_GroupingSet, type metadata accessor for PgQuery_GroupingSet, (uint64_t)&protocol conformance descriptor for PgQuery_GroupingSet);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_GroupingSet()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingSet and conformance PgQuery_GroupingSet, type metadata accessor for PgQuery_GroupingSet, (uint64_t)&protocol conformance descriptor for PgQuery_GroupingSet);
}

uint64_t base witness table accessor for Equatable in PgQuery_SortGroupClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortGroupClause and conformance PgQuery_SortGroupClause, type metadata accessor for PgQuery_SortGroupClause, (uint64_t)&protocol conformance descriptor for PgQuery_SortGroupClause);
}

uint64_t base witness table accessor for Message in PgQuery_SortGroupClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortGroupClause and conformance PgQuery_SortGroupClause, type metadata accessor for PgQuery_SortGroupClause, (uint64_t)&protocol conformance descriptor for PgQuery_SortGroupClause);
}

uint64_t base witness table accessor for Hashable in PgQuery_SortGroupClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortGroupClause and conformance PgQuery_SortGroupClause, type metadata accessor for PgQuery_SortGroupClause, (uint64_t)&protocol conformance descriptor for PgQuery_SortGroupClause);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_SortGroupClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortGroupClause and conformance PgQuery_SortGroupClause, type metadata accessor for PgQuery_SortGroupClause, (uint64_t)&protocol conformance descriptor for PgQuery_SortGroupClause);
}

uint64_t base witness table accessor for Equatable in PgQuery_WithCheckOption()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithCheckOption and conformance PgQuery_WithCheckOption, type metadata accessor for PgQuery_WithCheckOption, (uint64_t)&protocol conformance descriptor for PgQuery_WithCheckOption);
}

uint64_t base witness table accessor for Message in PgQuery_WithCheckOption()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithCheckOption and conformance PgQuery_WithCheckOption, type metadata accessor for PgQuery_WithCheckOption, (uint64_t)&protocol conformance descriptor for PgQuery_WithCheckOption);
}

uint64_t base witness table accessor for Hashable in PgQuery_WithCheckOption()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithCheckOption and conformance PgQuery_WithCheckOption, type metadata accessor for PgQuery_WithCheckOption, (uint64_t)&protocol conformance descriptor for PgQuery_WithCheckOption);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_WithCheckOption()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithCheckOption and conformance PgQuery_WithCheckOption, type metadata accessor for PgQuery_WithCheckOption, (uint64_t)&protocol conformance descriptor for PgQuery_WithCheckOption);
}

uint64_t base witness table accessor for Equatable in PgQuery_TableSampleClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableSampleClause and conformance PgQuery_TableSampleClause, type metadata accessor for PgQuery_TableSampleClause, (uint64_t)&protocol conformance descriptor for PgQuery_TableSampleClause);
}

uint64_t base witness table accessor for Message in PgQuery_TableSampleClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableSampleClause and conformance PgQuery_TableSampleClause, type metadata accessor for PgQuery_TableSampleClause, (uint64_t)&protocol conformance descriptor for PgQuery_TableSampleClause);
}

uint64_t base witness table accessor for Hashable in PgQuery_TableSampleClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableSampleClause and conformance PgQuery_TableSampleClause, type metadata accessor for PgQuery_TableSampleClause, (uint64_t)&protocol conformance descriptor for PgQuery_TableSampleClause);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_TableSampleClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableSampleClause and conformance PgQuery_TableSampleClause, type metadata accessor for PgQuery_TableSampleClause, (uint64_t)&protocol conformance descriptor for PgQuery_TableSampleClause);
}

uint64_t base witness table accessor for Equatable in PgQuery_RangeTblFunction()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblFunction and conformance PgQuery_RangeTblFunction, type metadata accessor for PgQuery_RangeTblFunction, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTblFunction);
}

uint64_t base witness table accessor for Message in PgQuery_RangeTblFunction()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblFunction and conformance PgQuery_RangeTblFunction, type metadata accessor for PgQuery_RangeTblFunction, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTblFunction);
}

uint64_t base witness table accessor for Hashable in PgQuery_RangeTblFunction()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblFunction and conformance PgQuery_RangeTblFunction, type metadata accessor for PgQuery_RangeTblFunction, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTblFunction);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RangeTblFunction()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblFunction and conformance PgQuery_RangeTblFunction, type metadata accessor for PgQuery_RangeTblFunction, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTblFunction);
}

uint64_t base witness table accessor for Equatable in PgQuery_RangeTblEntry()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblEntry and conformance PgQuery_RangeTblEntry, type metadata accessor for PgQuery_RangeTblEntry, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTblEntry);
}

uint64_t base witness table accessor for Message in PgQuery_RangeTblEntry()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblEntry and conformance PgQuery_RangeTblEntry, type metadata accessor for PgQuery_RangeTblEntry, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTblEntry);
}

uint64_t base witness table accessor for Hashable in PgQuery_RangeTblEntry()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblEntry and conformance PgQuery_RangeTblEntry, type metadata accessor for PgQuery_RangeTblEntry, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTblEntry);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RangeTblEntry()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblEntry and conformance PgQuery_RangeTblEntry, type metadata accessor for PgQuery_RangeTblEntry, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTblEntry);
}

uint64_t base witness table accessor for Equatable in PgQuery_DefElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefElem and conformance PgQuery_DefElem, type metadata accessor for PgQuery_DefElem, (uint64_t)&protocol conformance descriptor for PgQuery_DefElem);
}

uint64_t base witness table accessor for Message in PgQuery_DefElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefElem and conformance PgQuery_DefElem, type metadata accessor for PgQuery_DefElem, (uint64_t)&protocol conformance descriptor for PgQuery_DefElem);
}

uint64_t base witness table accessor for Hashable in PgQuery_DefElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefElem and conformance PgQuery_DefElem, type metadata accessor for PgQuery_DefElem, (uint64_t)&protocol conformance descriptor for PgQuery_DefElem);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DefElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefElem and conformance PgQuery_DefElem, type metadata accessor for PgQuery_DefElem, (uint64_t)&protocol conformance descriptor for PgQuery_DefElem);
}

uint64_t base witness table accessor for Equatable in PgQuery_Constraint()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Constraint and conformance PgQuery_Constraint, type metadata accessor for PgQuery_Constraint, (uint64_t)&protocol conformance descriptor for PgQuery_Constraint);
}

uint64_t base witness table accessor for Message in PgQuery_Constraint()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Constraint and conformance PgQuery_Constraint, type metadata accessor for PgQuery_Constraint, (uint64_t)&protocol conformance descriptor for PgQuery_Constraint);
}

uint64_t base witness table accessor for Hashable in PgQuery_Constraint()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Constraint and conformance PgQuery_Constraint, type metadata accessor for PgQuery_Constraint, (uint64_t)&protocol conformance descriptor for PgQuery_Constraint);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_Constraint()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Constraint and conformance PgQuery_Constraint, type metadata accessor for PgQuery_Constraint, (uint64_t)&protocol conformance descriptor for PgQuery_Constraint);
}

uint64_t base witness table accessor for Equatable in PgQuery_IndexElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexElem and conformance PgQuery_IndexElem, type metadata accessor for PgQuery_IndexElem, (uint64_t)&protocol conformance descriptor for PgQuery_IndexElem);
}

uint64_t base witness table accessor for Message in PgQuery_IndexElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexElem and conformance PgQuery_IndexElem, type metadata accessor for PgQuery_IndexElem, (uint64_t)&protocol conformance descriptor for PgQuery_IndexElem);
}

uint64_t base witness table accessor for Hashable in PgQuery_IndexElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexElem and conformance PgQuery_IndexElem, type metadata accessor for PgQuery_IndexElem, (uint64_t)&protocol conformance descriptor for PgQuery_IndexElem);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_IndexElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexElem and conformance PgQuery_IndexElem, type metadata accessor for PgQuery_IndexElem, (uint64_t)&protocol conformance descriptor for PgQuery_IndexElem);
}

uint64_t base witness table accessor for Equatable in PgQuery_ColumnDef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnDef and conformance PgQuery_ColumnDef, type metadata accessor for PgQuery_ColumnDef, (uint64_t)&protocol conformance descriptor for PgQuery_ColumnDef);
}

uint64_t base witness table accessor for Message in PgQuery_ColumnDef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnDef and conformance PgQuery_ColumnDef, type metadata accessor for PgQuery_ColumnDef, (uint64_t)&protocol conformance descriptor for PgQuery_ColumnDef);
}

uint64_t base witness table accessor for Hashable in PgQuery_ColumnDef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnDef and conformance PgQuery_ColumnDef, type metadata accessor for PgQuery_ColumnDef, (uint64_t)&protocol conformance descriptor for PgQuery_ColumnDef);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ColumnDef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnDef and conformance PgQuery_ColumnDef, type metadata accessor for PgQuery_ColumnDef, (uint64_t)&protocol conformance descriptor for PgQuery_ColumnDef);
}

uint64_t base witness table accessor for Equatable in PgQuery_TypeName()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
}

uint64_t base witness table accessor for Message in PgQuery_TypeName()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
}

uint64_t base witness table accessor for Hashable in PgQuery_TypeName()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_TypeName()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, type metadata accessor for PgQuery_TypeName, (uint64_t)&protocol conformance descriptor for PgQuery_TypeName);
}

uint64_t base witness table accessor for Equatable in PgQuery_RangeTableFuncCol()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFuncCol and conformance PgQuery_RangeTableFuncCol, type metadata accessor for PgQuery_RangeTableFuncCol, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTableFuncCol);
}

uint64_t base witness table accessor for Message in PgQuery_RangeTableFuncCol()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFuncCol and conformance PgQuery_RangeTableFuncCol, type metadata accessor for PgQuery_RangeTableFuncCol, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTableFuncCol);
}

uint64_t base witness table accessor for Hashable in PgQuery_RangeTableFuncCol()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFuncCol and conformance PgQuery_RangeTableFuncCol, type metadata accessor for PgQuery_RangeTableFuncCol, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTableFuncCol);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RangeTableFuncCol()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFuncCol and conformance PgQuery_RangeTableFuncCol, type metadata accessor for PgQuery_RangeTableFuncCol, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTableFuncCol);
}

uint64_t base witness table accessor for Equatable in PgQuery_RangeTableFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFunc and conformance PgQuery_RangeTableFunc, type metadata accessor for PgQuery_RangeTableFunc, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTableFunc);
}

uint64_t base witness table accessor for Message in PgQuery_RangeTableFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFunc and conformance PgQuery_RangeTableFunc, type metadata accessor for PgQuery_RangeTableFunc, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTableFunc);
}

uint64_t base witness table accessor for Hashable in PgQuery_RangeTableFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFunc and conformance PgQuery_RangeTableFunc, type metadata accessor for PgQuery_RangeTableFunc, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTableFunc);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RangeTableFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFunc and conformance PgQuery_RangeTableFunc, type metadata accessor for PgQuery_RangeTableFunc, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTableFunc);
}

uint64_t base witness table accessor for Equatable in PgQuery_RangeTableSample()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableSample and conformance PgQuery_RangeTableSample, type metadata accessor for PgQuery_RangeTableSample, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTableSample);
}

uint64_t base witness table accessor for Message in PgQuery_RangeTableSample()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableSample and conformance PgQuery_RangeTableSample, type metadata accessor for PgQuery_RangeTableSample, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTableSample);
}

uint64_t base witness table accessor for Hashable in PgQuery_RangeTableSample()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableSample and conformance PgQuery_RangeTableSample, type metadata accessor for PgQuery_RangeTableSample, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTableSample);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RangeTableSample()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableSample and conformance PgQuery_RangeTableSample, type metadata accessor for PgQuery_RangeTableSample, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTableSample);
}

uint64_t base witness table accessor for Equatable in PgQuery_RangeFunction()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeFunction and conformance PgQuery_RangeFunction, type metadata accessor for PgQuery_RangeFunction, (uint64_t)&protocol conformance descriptor for PgQuery_RangeFunction);
}

uint64_t base witness table accessor for Message in PgQuery_RangeFunction()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeFunction and conformance PgQuery_RangeFunction, type metadata accessor for PgQuery_RangeFunction, (uint64_t)&protocol conformance descriptor for PgQuery_RangeFunction);
}

uint64_t base witness table accessor for Hashable in PgQuery_RangeFunction()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeFunction and conformance PgQuery_RangeFunction, type metadata accessor for PgQuery_RangeFunction, (uint64_t)&protocol conformance descriptor for PgQuery_RangeFunction);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RangeFunction()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeFunction and conformance PgQuery_RangeFunction, type metadata accessor for PgQuery_RangeFunction, (uint64_t)&protocol conformance descriptor for PgQuery_RangeFunction);
}

uint64_t base witness table accessor for Equatable in PgQuery_RangeSubselect()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeSubselect and conformance PgQuery_RangeSubselect, type metadata accessor for PgQuery_RangeSubselect, (uint64_t)&protocol conformance descriptor for PgQuery_RangeSubselect);
}

uint64_t base witness table accessor for Message in PgQuery_RangeSubselect()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeSubselect and conformance PgQuery_RangeSubselect, type metadata accessor for PgQuery_RangeSubselect, (uint64_t)&protocol conformance descriptor for PgQuery_RangeSubselect);
}

uint64_t base witness table accessor for Hashable in PgQuery_RangeSubselect()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeSubselect and conformance PgQuery_RangeSubselect, type metadata accessor for PgQuery_RangeSubselect, (uint64_t)&protocol conformance descriptor for PgQuery_RangeSubselect);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RangeSubselect()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeSubselect and conformance PgQuery_RangeSubselect, type metadata accessor for PgQuery_RangeSubselect, (uint64_t)&protocol conformance descriptor for PgQuery_RangeSubselect);
}

uint64_t base witness table accessor for Equatable in PgQuery_WindowDef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowDef and conformance PgQuery_WindowDef, type metadata accessor for PgQuery_WindowDef, (uint64_t)&protocol conformance descriptor for PgQuery_WindowDef);
}

uint64_t base witness table accessor for Message in PgQuery_WindowDef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowDef and conformance PgQuery_WindowDef, type metadata accessor for PgQuery_WindowDef, (uint64_t)&protocol conformance descriptor for PgQuery_WindowDef);
}

uint64_t base witness table accessor for Hashable in PgQuery_WindowDef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowDef and conformance PgQuery_WindowDef, type metadata accessor for PgQuery_WindowDef, (uint64_t)&protocol conformance descriptor for PgQuery_WindowDef);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_WindowDef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowDef and conformance PgQuery_WindowDef, type metadata accessor for PgQuery_WindowDef, (uint64_t)&protocol conformance descriptor for PgQuery_WindowDef);
}

uint64_t base witness table accessor for Equatable in PgQuery_SortBy()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortBy and conformance PgQuery_SortBy, type metadata accessor for PgQuery_SortBy, (uint64_t)&protocol conformance descriptor for PgQuery_SortBy);
}

uint64_t base witness table accessor for Message in PgQuery_SortBy()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortBy and conformance PgQuery_SortBy, type metadata accessor for PgQuery_SortBy, (uint64_t)&protocol conformance descriptor for PgQuery_SortBy);
}

uint64_t base witness table accessor for Hashable in PgQuery_SortBy()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortBy and conformance PgQuery_SortBy, type metadata accessor for PgQuery_SortBy, (uint64_t)&protocol conformance descriptor for PgQuery_SortBy);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_SortBy()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortBy and conformance PgQuery_SortBy, type metadata accessor for PgQuery_SortBy, (uint64_t)&protocol conformance descriptor for PgQuery_SortBy);
}

uint64_t base witness table accessor for Equatable in PgQuery_CollateClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateClause and conformance PgQuery_CollateClause, type metadata accessor for PgQuery_CollateClause, (uint64_t)&protocol conformance descriptor for PgQuery_CollateClause);
}

uint64_t base witness table accessor for Message in PgQuery_CollateClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateClause and conformance PgQuery_CollateClause, type metadata accessor for PgQuery_CollateClause, (uint64_t)&protocol conformance descriptor for PgQuery_CollateClause);
}

uint64_t base witness table accessor for Hashable in PgQuery_CollateClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateClause and conformance PgQuery_CollateClause, type metadata accessor for PgQuery_CollateClause, (uint64_t)&protocol conformance descriptor for PgQuery_CollateClause);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CollateClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateClause and conformance PgQuery_CollateClause, type metadata accessor for PgQuery_CollateClause, (uint64_t)&protocol conformance descriptor for PgQuery_CollateClause);
}

uint64_t base witness table accessor for Equatable in PgQuery_TypeCast()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeCast and conformance PgQuery_TypeCast, type metadata accessor for PgQuery_TypeCast, (uint64_t)&protocol conformance descriptor for PgQuery_TypeCast);
}

uint64_t base witness table accessor for Message in PgQuery_TypeCast()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeCast and conformance PgQuery_TypeCast, type metadata accessor for PgQuery_TypeCast, (uint64_t)&protocol conformance descriptor for PgQuery_TypeCast);
}

uint64_t base witness table accessor for Hashable in PgQuery_TypeCast()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeCast and conformance PgQuery_TypeCast, type metadata accessor for PgQuery_TypeCast, (uint64_t)&protocol conformance descriptor for PgQuery_TypeCast);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_TypeCast()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeCast and conformance PgQuery_TypeCast, type metadata accessor for PgQuery_TypeCast, (uint64_t)&protocol conformance descriptor for PgQuery_TypeCast);
}

uint64_t base witness table accessor for Equatable in PgQuery_MultiAssignRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MultiAssignRef and conformance PgQuery_MultiAssignRef, type metadata accessor for PgQuery_MultiAssignRef, (uint64_t)&protocol conformance descriptor for PgQuery_MultiAssignRef);
}

uint64_t base witness table accessor for Message in PgQuery_MultiAssignRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MultiAssignRef and conformance PgQuery_MultiAssignRef, type metadata accessor for PgQuery_MultiAssignRef, (uint64_t)&protocol conformance descriptor for PgQuery_MultiAssignRef);
}

uint64_t base witness table accessor for Hashable in PgQuery_MultiAssignRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MultiAssignRef and conformance PgQuery_MultiAssignRef, type metadata accessor for PgQuery_MultiAssignRef, (uint64_t)&protocol conformance descriptor for PgQuery_MultiAssignRef);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_MultiAssignRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MultiAssignRef and conformance PgQuery_MultiAssignRef, type metadata accessor for PgQuery_MultiAssignRef, (uint64_t)&protocol conformance descriptor for PgQuery_MultiAssignRef);
}

uint64_t base witness table accessor for Equatable in PgQuery_ResTarget()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ResTarget and conformance PgQuery_ResTarget, type metadata accessor for PgQuery_ResTarget, (uint64_t)&protocol conformance descriptor for PgQuery_ResTarget);
}

uint64_t base witness table accessor for Message in PgQuery_ResTarget()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ResTarget and conformance PgQuery_ResTarget, type metadata accessor for PgQuery_ResTarget, (uint64_t)&protocol conformance descriptor for PgQuery_ResTarget);
}

uint64_t base witness table accessor for Hashable in PgQuery_ResTarget()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ResTarget and conformance PgQuery_ResTarget, type metadata accessor for PgQuery_ResTarget, (uint64_t)&protocol conformance descriptor for PgQuery_ResTarget);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ResTarget()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ResTarget and conformance PgQuery_ResTarget, type metadata accessor for PgQuery_ResTarget, (uint64_t)&protocol conformance descriptor for PgQuery_ResTarget);
}

uint64_t base witness table accessor for Equatable in PgQuery_A_ArrayExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_ArrayExpr and conformance PgQuery_A_ArrayExpr, type metadata accessor for PgQuery_A_ArrayExpr, (uint64_t)&protocol conformance descriptor for PgQuery_A_ArrayExpr);
}

uint64_t base witness table accessor for Message in PgQuery_A_ArrayExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_ArrayExpr and conformance PgQuery_A_ArrayExpr, type metadata accessor for PgQuery_A_ArrayExpr, (uint64_t)&protocol conformance descriptor for PgQuery_A_ArrayExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_A_ArrayExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_ArrayExpr and conformance PgQuery_A_ArrayExpr, type metadata accessor for PgQuery_A_ArrayExpr, (uint64_t)&protocol conformance descriptor for PgQuery_A_ArrayExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_A_ArrayExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_ArrayExpr and conformance PgQuery_A_ArrayExpr, type metadata accessor for PgQuery_A_ArrayExpr, (uint64_t)&protocol conformance descriptor for PgQuery_A_ArrayExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_A_Indirection()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indirection and conformance PgQuery_A_Indirection, type metadata accessor for PgQuery_A_Indirection, (uint64_t)&protocol conformance descriptor for PgQuery_A_Indirection);
}

uint64_t base witness table accessor for Message in PgQuery_A_Indirection()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indirection and conformance PgQuery_A_Indirection, type metadata accessor for PgQuery_A_Indirection, (uint64_t)&protocol conformance descriptor for PgQuery_A_Indirection);
}

uint64_t base witness table accessor for Hashable in PgQuery_A_Indirection()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indirection and conformance PgQuery_A_Indirection, type metadata accessor for PgQuery_A_Indirection, (uint64_t)&protocol conformance descriptor for PgQuery_A_Indirection);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_A_Indirection()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indirection and conformance PgQuery_A_Indirection, type metadata accessor for PgQuery_A_Indirection, (uint64_t)&protocol conformance descriptor for PgQuery_A_Indirection);
}

uint64_t base witness table accessor for Equatable in PgQuery_A_Indices()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indices and conformance PgQuery_A_Indices, type metadata accessor for PgQuery_A_Indices, (uint64_t)&protocol conformance descriptor for PgQuery_A_Indices);
}

uint64_t base witness table accessor for Message in PgQuery_A_Indices()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indices and conformance PgQuery_A_Indices, type metadata accessor for PgQuery_A_Indices, (uint64_t)&protocol conformance descriptor for PgQuery_A_Indices);
}

uint64_t base witness table accessor for Hashable in PgQuery_A_Indices()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indices and conformance PgQuery_A_Indices, type metadata accessor for PgQuery_A_Indices, (uint64_t)&protocol conformance descriptor for PgQuery_A_Indices);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_A_Indices()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indices and conformance PgQuery_A_Indices, type metadata accessor for PgQuery_A_Indices, (uint64_t)&protocol conformance descriptor for PgQuery_A_Indices);
}

uint64_t base witness table accessor for Equatable in PgQuery_A_Star()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Star and conformance PgQuery_A_Star, type metadata accessor for PgQuery_A_Star, (uint64_t)&protocol conformance descriptor for PgQuery_A_Star);
}

uint64_t type metadata accessor for PgQuery_A_Star(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_A_Star);
}

uint64_t base witness table accessor for Message in PgQuery_A_Star()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Star and conformance PgQuery_A_Star, type metadata accessor for PgQuery_A_Star, (uint64_t)&protocol conformance descriptor for PgQuery_A_Star);
}

uint64_t base witness table accessor for Hashable in PgQuery_A_Star()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Star and conformance PgQuery_A_Star, type metadata accessor for PgQuery_A_Star, (uint64_t)&protocol conformance descriptor for PgQuery_A_Star);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_A_Star()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Star and conformance PgQuery_A_Star, type metadata accessor for PgQuery_A_Star, (uint64_t)&protocol conformance descriptor for PgQuery_A_Star);
}

uint64_t base witness table accessor for Equatable in PgQuery_FuncCall()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncCall and conformance PgQuery_FuncCall, type metadata accessor for PgQuery_FuncCall, (uint64_t)&protocol conformance descriptor for PgQuery_FuncCall);
}

uint64_t base witness table accessor for Message in PgQuery_FuncCall()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncCall and conformance PgQuery_FuncCall, type metadata accessor for PgQuery_FuncCall, (uint64_t)&protocol conformance descriptor for PgQuery_FuncCall);
}

uint64_t base witness table accessor for Hashable in PgQuery_FuncCall()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncCall and conformance PgQuery_FuncCall, type metadata accessor for PgQuery_FuncCall, (uint64_t)&protocol conformance descriptor for PgQuery_FuncCall);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_FuncCall()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncCall and conformance PgQuery_FuncCall, type metadata accessor for PgQuery_FuncCall, (uint64_t)&protocol conformance descriptor for PgQuery_FuncCall);
}

uint64_t base witness table accessor for Equatable in PgQuery_A_Const()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Const and conformance PgQuery_A_Const, type metadata accessor for PgQuery_A_Const, (uint64_t)&protocol conformance descriptor for PgQuery_A_Const);
}

uint64_t base witness table accessor for Message in PgQuery_A_Const()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Const and conformance PgQuery_A_Const, type metadata accessor for PgQuery_A_Const, (uint64_t)&protocol conformance descriptor for PgQuery_A_Const);
}

uint64_t base witness table accessor for Hashable in PgQuery_A_Const()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Const and conformance PgQuery_A_Const, type metadata accessor for PgQuery_A_Const, (uint64_t)&protocol conformance descriptor for PgQuery_A_Const);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_A_Const()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Const and conformance PgQuery_A_Const, type metadata accessor for PgQuery_A_Const, (uint64_t)&protocol conformance descriptor for PgQuery_A_Const);
}

uint64_t base witness table accessor for Equatable in PgQuery_ParamRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParamRef and conformance PgQuery_ParamRef, type metadata accessor for PgQuery_ParamRef, (uint64_t)&protocol conformance descriptor for PgQuery_ParamRef);
}

uint64_t base witness table accessor for Message in PgQuery_ParamRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParamRef and conformance PgQuery_ParamRef, type metadata accessor for PgQuery_ParamRef, (uint64_t)&protocol conformance descriptor for PgQuery_ParamRef);
}

uint64_t base witness table accessor for Hashable in PgQuery_ParamRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParamRef and conformance PgQuery_ParamRef, type metadata accessor for PgQuery_ParamRef, (uint64_t)&protocol conformance descriptor for PgQuery_ParamRef);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ParamRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParamRef and conformance PgQuery_ParamRef, type metadata accessor for PgQuery_ParamRef, (uint64_t)&protocol conformance descriptor for PgQuery_ParamRef);
}

uint64_t base witness table accessor for Equatable in PgQuery_ColumnRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnRef and conformance PgQuery_ColumnRef, type metadata accessor for PgQuery_ColumnRef, (uint64_t)&protocol conformance descriptor for PgQuery_ColumnRef);
}

uint64_t base witness table accessor for Message in PgQuery_ColumnRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnRef and conformance PgQuery_ColumnRef, type metadata accessor for PgQuery_ColumnRef, (uint64_t)&protocol conformance descriptor for PgQuery_ColumnRef);
}

uint64_t base witness table accessor for Hashable in PgQuery_ColumnRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnRef and conformance PgQuery_ColumnRef, type metadata accessor for PgQuery_ColumnRef, (uint64_t)&protocol conformance descriptor for PgQuery_ColumnRef);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ColumnRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnRef and conformance PgQuery_ColumnRef, type metadata accessor for PgQuery_ColumnRef, (uint64_t)&protocol conformance descriptor for PgQuery_ColumnRef);
}

uint64_t base witness table accessor for Equatable in PgQuery_A_Expr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Expr and conformance PgQuery_A_Expr, type metadata accessor for PgQuery_A_Expr, (uint64_t)&protocol conformance descriptor for PgQuery_A_Expr);
}

uint64_t base witness table accessor for Message in PgQuery_A_Expr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Expr and conformance PgQuery_A_Expr, type metadata accessor for PgQuery_A_Expr, (uint64_t)&protocol conformance descriptor for PgQuery_A_Expr);
}

uint64_t base witness table accessor for Hashable in PgQuery_A_Expr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Expr and conformance PgQuery_A_Expr, type metadata accessor for PgQuery_A_Expr, (uint64_t)&protocol conformance descriptor for PgQuery_A_Expr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_A_Expr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Expr and conformance PgQuery_A_Expr, type metadata accessor for PgQuery_A_Expr, (uint64_t)&protocol conformance descriptor for PgQuery_A_Expr);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterStatsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterStatsStmt and conformance PgQuery_AlterStatsStmt, type metadata accessor for PgQuery_AlterStatsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterStatsStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterStatsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterStatsStmt and conformance PgQuery_AlterStatsStmt, type metadata accessor for PgQuery_AlterStatsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterStatsStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterStatsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterStatsStmt and conformance PgQuery_AlterStatsStmt, type metadata accessor for PgQuery_AlterStatsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterStatsStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterStatsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterStatsStmt and conformance PgQuery_AlterStatsStmt, type metadata accessor for PgQuery_AlterStatsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterStatsStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CallStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallStmt and conformance PgQuery_CallStmt, type metadata accessor for PgQuery_CallStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CallStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CallStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallStmt and conformance PgQuery_CallStmt, type metadata accessor for PgQuery_CallStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CallStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CallStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallStmt and conformance PgQuery_CallStmt, type metadata accessor for PgQuery_CallStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CallStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CallStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallStmt and conformance PgQuery_CallStmt, type metadata accessor for PgQuery_CallStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CallStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterCollationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterCollationStmt and conformance PgQuery_AlterCollationStmt, type metadata accessor for PgQuery_AlterCollationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterCollationStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterCollationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterCollationStmt and conformance PgQuery_AlterCollationStmt, type metadata accessor for PgQuery_AlterCollationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterCollationStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterCollationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterCollationStmt and conformance PgQuery_AlterCollationStmt, type metadata accessor for PgQuery_AlterCollationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterCollationStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterCollationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterCollationStmt and conformance PgQuery_AlterCollationStmt, type metadata accessor for PgQuery_AlterCollationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterCollationStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateStatsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStatsStmt and conformance PgQuery_CreateStatsStmt, type metadata accessor for PgQuery_CreateStatsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateStatsStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateStatsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStatsStmt and conformance PgQuery_CreateStatsStmt, type metadata accessor for PgQuery_CreateStatsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateStatsStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateStatsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStatsStmt and conformance PgQuery_CreateStatsStmt, type metadata accessor for PgQuery_CreateStatsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateStatsStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateStatsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStatsStmt and conformance PgQuery_CreateStatsStmt, type metadata accessor for PgQuery_CreateStatsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateStatsStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_DropSubscriptionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropSubscriptionStmt and conformance PgQuery_DropSubscriptionStmt, type metadata accessor for PgQuery_DropSubscriptionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropSubscriptionStmt);
}

uint64_t base witness table accessor for Message in PgQuery_DropSubscriptionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropSubscriptionStmt and conformance PgQuery_DropSubscriptionStmt, type metadata accessor for PgQuery_DropSubscriptionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropSubscriptionStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_DropSubscriptionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropSubscriptionStmt and conformance PgQuery_DropSubscriptionStmt, type metadata accessor for PgQuery_DropSubscriptionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropSubscriptionStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DropSubscriptionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropSubscriptionStmt and conformance PgQuery_DropSubscriptionStmt, type metadata accessor for PgQuery_DropSubscriptionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropSubscriptionStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterSubscriptionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSubscriptionStmt and conformance PgQuery_AlterSubscriptionStmt, type metadata accessor for PgQuery_AlterSubscriptionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterSubscriptionStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterSubscriptionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSubscriptionStmt and conformance PgQuery_AlterSubscriptionStmt, type metadata accessor for PgQuery_AlterSubscriptionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterSubscriptionStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterSubscriptionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSubscriptionStmt and conformance PgQuery_AlterSubscriptionStmt, type metadata accessor for PgQuery_AlterSubscriptionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterSubscriptionStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterSubscriptionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSubscriptionStmt and conformance PgQuery_AlterSubscriptionStmt, type metadata accessor for PgQuery_AlterSubscriptionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterSubscriptionStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateSubscriptionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSubscriptionStmt and conformance PgQuery_CreateSubscriptionStmt, type metadata accessor for PgQuery_CreateSubscriptionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateSubscriptionStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateSubscriptionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSubscriptionStmt and conformance PgQuery_CreateSubscriptionStmt, type metadata accessor for PgQuery_CreateSubscriptionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateSubscriptionStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateSubscriptionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSubscriptionStmt and conformance PgQuery_CreateSubscriptionStmt, type metadata accessor for PgQuery_CreateSubscriptionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateSubscriptionStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateSubscriptionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSubscriptionStmt and conformance PgQuery_CreateSubscriptionStmt, type metadata accessor for PgQuery_CreateSubscriptionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateSubscriptionStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterPublicationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPublicationStmt and conformance PgQuery_AlterPublicationStmt, type metadata accessor for PgQuery_AlterPublicationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterPublicationStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterPublicationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPublicationStmt and conformance PgQuery_AlterPublicationStmt, type metadata accessor for PgQuery_AlterPublicationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterPublicationStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterPublicationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPublicationStmt and conformance PgQuery_AlterPublicationStmt, type metadata accessor for PgQuery_AlterPublicationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterPublicationStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterPublicationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPublicationStmt and conformance PgQuery_AlterPublicationStmt, type metadata accessor for PgQuery_AlterPublicationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterPublicationStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreatePublicationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePublicationStmt and conformance PgQuery_CreatePublicationStmt, type metadata accessor for PgQuery_CreatePublicationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatePublicationStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreatePublicationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePublicationStmt and conformance PgQuery_CreatePublicationStmt, type metadata accessor for PgQuery_CreatePublicationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatePublicationStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreatePublicationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePublicationStmt and conformance PgQuery_CreatePublicationStmt, type metadata accessor for PgQuery_CreatePublicationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatePublicationStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreatePublicationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePublicationStmt and conformance PgQuery_CreatePublicationStmt, type metadata accessor for PgQuery_CreatePublicationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatePublicationStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateAmStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateAmStmt and conformance PgQuery_CreateAmStmt, type metadata accessor for PgQuery_CreateAmStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateAmStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateAmStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateAmStmt and conformance PgQuery_CreateAmStmt, type metadata accessor for PgQuery_CreateAmStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateAmStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateAmStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateAmStmt and conformance PgQuery_CreateAmStmt, type metadata accessor for PgQuery_CreateAmStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateAmStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateAmStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateAmStmt and conformance PgQuery_CreateAmStmt, type metadata accessor for PgQuery_CreateAmStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateAmStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateTransformStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTransformStmt and conformance PgQuery_CreateTransformStmt, type metadata accessor for PgQuery_CreateTransformStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTransformStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateTransformStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTransformStmt and conformance PgQuery_CreateTransformStmt, type metadata accessor for PgQuery_CreateTransformStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTransformStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateTransformStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTransformStmt and conformance PgQuery_CreateTransformStmt, type metadata accessor for PgQuery_CreateTransformStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTransformStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateTransformStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTransformStmt and conformance PgQuery_CreateTransformStmt, type metadata accessor for PgQuery_CreateTransformStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTransformStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterPolicyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPolicyStmt and conformance PgQuery_AlterPolicyStmt, type metadata accessor for PgQuery_AlterPolicyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterPolicyStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterPolicyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPolicyStmt and conformance PgQuery_AlterPolicyStmt, type metadata accessor for PgQuery_AlterPolicyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterPolicyStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterPolicyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPolicyStmt and conformance PgQuery_AlterPolicyStmt, type metadata accessor for PgQuery_AlterPolicyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterPolicyStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterPolicyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPolicyStmt and conformance PgQuery_AlterPolicyStmt, type metadata accessor for PgQuery_AlterPolicyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterPolicyStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreatePolicyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePolicyStmt and conformance PgQuery_CreatePolicyStmt, type metadata accessor for PgQuery_CreatePolicyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatePolicyStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreatePolicyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePolicyStmt and conformance PgQuery_CreatePolicyStmt, type metadata accessor for PgQuery_CreatePolicyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatePolicyStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreatePolicyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePolicyStmt and conformance PgQuery_CreatePolicyStmt, type metadata accessor for PgQuery_CreatePolicyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatePolicyStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreatePolicyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePolicyStmt and conformance PgQuery_CreatePolicyStmt, type metadata accessor for PgQuery_CreatePolicyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatePolicyStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterSystemStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSystemStmt and conformance PgQuery_AlterSystemStmt, type metadata accessor for PgQuery_AlterSystemStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterSystemStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterSystemStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSystemStmt and conformance PgQuery_AlterSystemStmt, type metadata accessor for PgQuery_AlterSystemStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterSystemStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterSystemStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSystemStmt and conformance PgQuery_AlterSystemStmt, type metadata accessor for PgQuery_AlterSystemStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterSystemStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterSystemStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSystemStmt and conformance PgQuery_AlterSystemStmt, type metadata accessor for PgQuery_AlterSystemStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterSystemStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_ReplicaIdentityStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReplicaIdentityStmt and conformance PgQuery_ReplicaIdentityStmt, type metadata accessor for PgQuery_ReplicaIdentityStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ReplicaIdentityStmt);
}

uint64_t base witness table accessor for Message in PgQuery_ReplicaIdentityStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReplicaIdentityStmt and conformance PgQuery_ReplicaIdentityStmt, type metadata accessor for PgQuery_ReplicaIdentityStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ReplicaIdentityStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_ReplicaIdentityStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReplicaIdentityStmt and conformance PgQuery_ReplicaIdentityStmt, type metadata accessor for PgQuery_ReplicaIdentityStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ReplicaIdentityStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ReplicaIdentityStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReplicaIdentityStmt and conformance PgQuery_ReplicaIdentityStmt, type metadata accessor for PgQuery_ReplicaIdentityStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ReplicaIdentityStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_RefreshMatViewStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RefreshMatViewStmt and conformance PgQuery_RefreshMatViewStmt, type metadata accessor for PgQuery_RefreshMatViewStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RefreshMatViewStmt);
}

uint64_t base witness table accessor for Message in PgQuery_RefreshMatViewStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RefreshMatViewStmt and conformance PgQuery_RefreshMatViewStmt, type metadata accessor for PgQuery_RefreshMatViewStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RefreshMatViewStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_RefreshMatViewStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RefreshMatViewStmt and conformance PgQuery_RefreshMatViewStmt, type metadata accessor for PgQuery_RefreshMatViewStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RefreshMatViewStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RefreshMatViewStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RefreshMatViewStmt and conformance PgQuery_RefreshMatViewStmt, type metadata accessor for PgQuery_RefreshMatViewStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RefreshMatViewStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterEventTrigStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEventTrigStmt and conformance PgQuery_AlterEventTrigStmt, type metadata accessor for PgQuery_AlterEventTrigStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterEventTrigStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterEventTrigStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEventTrigStmt and conformance PgQuery_AlterEventTrigStmt, type metadata accessor for PgQuery_AlterEventTrigStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterEventTrigStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterEventTrigStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEventTrigStmt and conformance PgQuery_AlterEventTrigStmt, type metadata accessor for PgQuery_AlterEventTrigStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterEventTrigStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterEventTrigStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEventTrigStmt and conformance PgQuery_AlterEventTrigStmt, type metadata accessor for PgQuery_AlterEventTrigStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterEventTrigStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateEventTrigStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEventTrigStmt and conformance PgQuery_CreateEventTrigStmt, type metadata accessor for PgQuery_CreateEventTrigStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateEventTrigStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateEventTrigStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEventTrigStmt and conformance PgQuery_CreateEventTrigStmt, type metadata accessor for PgQuery_CreateEventTrigStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateEventTrigStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateEventTrigStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEventTrigStmt and conformance PgQuery_CreateEventTrigStmt, type metadata accessor for PgQuery_CreateEventTrigStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateEventTrigStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateEventTrigStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEventTrigStmt and conformance PgQuery_CreateEventTrigStmt, type metadata accessor for PgQuery_CreateEventTrigStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateEventTrigStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterExtensionContentsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionContentsStmt and conformance PgQuery_AlterExtensionContentsStmt, type metadata accessor for PgQuery_AlterExtensionContentsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterExtensionContentsStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterExtensionContentsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionContentsStmt and conformance PgQuery_AlterExtensionContentsStmt, type metadata accessor for PgQuery_AlterExtensionContentsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterExtensionContentsStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterExtensionContentsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionContentsStmt and conformance PgQuery_AlterExtensionContentsStmt, type metadata accessor for PgQuery_AlterExtensionContentsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterExtensionContentsStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterExtensionContentsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionContentsStmt and conformance PgQuery_AlterExtensionContentsStmt, type metadata accessor for PgQuery_AlterExtensionContentsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterExtensionContentsStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterExtensionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionStmt and conformance PgQuery_AlterExtensionStmt, type metadata accessor for PgQuery_AlterExtensionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterExtensionStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterExtensionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionStmt and conformance PgQuery_AlterExtensionStmt, type metadata accessor for PgQuery_AlterExtensionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterExtensionStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterExtensionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionStmt and conformance PgQuery_AlterExtensionStmt, type metadata accessor for PgQuery_AlterExtensionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterExtensionStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterExtensionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionStmt and conformance PgQuery_AlterExtensionStmt, type metadata accessor for PgQuery_AlterExtensionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterExtensionStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateExtensionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateExtensionStmt and conformance PgQuery_CreateExtensionStmt, type metadata accessor for PgQuery_CreateExtensionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateExtensionStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateExtensionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateExtensionStmt and conformance PgQuery_CreateExtensionStmt, type metadata accessor for PgQuery_CreateExtensionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateExtensionStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateExtensionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateExtensionStmt and conformance PgQuery_CreateExtensionStmt, type metadata accessor for PgQuery_CreateExtensionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateExtensionStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateExtensionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateExtensionStmt and conformance PgQuery_CreateExtensionStmt, type metadata accessor for PgQuery_CreateExtensionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateExtensionStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_ImportForeignSchemaStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ImportForeignSchemaStmt and conformance PgQuery_ImportForeignSchemaStmt, type metadata accessor for PgQuery_ImportForeignSchemaStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ImportForeignSchemaStmt);
}

uint64_t base witness table accessor for Message in PgQuery_ImportForeignSchemaStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ImportForeignSchemaStmt and conformance PgQuery_ImportForeignSchemaStmt, type metadata accessor for PgQuery_ImportForeignSchemaStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ImportForeignSchemaStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_ImportForeignSchemaStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ImportForeignSchemaStmt and conformance PgQuery_ImportForeignSchemaStmt, type metadata accessor for PgQuery_ImportForeignSchemaStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ImportForeignSchemaStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ImportForeignSchemaStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ImportForeignSchemaStmt and conformance PgQuery_ImportForeignSchemaStmt, type metadata accessor for PgQuery_ImportForeignSchemaStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ImportForeignSchemaStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateForeignTableStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignTableStmt and conformance PgQuery_CreateForeignTableStmt, type metadata accessor for PgQuery_CreateForeignTableStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateForeignTableStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateForeignTableStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignTableStmt and conformance PgQuery_CreateForeignTableStmt, type metadata accessor for PgQuery_CreateForeignTableStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateForeignTableStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateForeignTableStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignTableStmt and conformance PgQuery_CreateForeignTableStmt, type metadata accessor for PgQuery_CreateForeignTableStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateForeignTableStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateForeignTableStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignTableStmt and conformance PgQuery_CreateForeignTableStmt, type metadata accessor for PgQuery_CreateForeignTableStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateForeignTableStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_SecLabelStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SecLabelStmt and conformance PgQuery_SecLabelStmt, type metadata accessor for PgQuery_SecLabelStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SecLabelStmt);
}

uint64_t base witness table accessor for Message in PgQuery_SecLabelStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SecLabelStmt and conformance PgQuery_SecLabelStmt, type metadata accessor for PgQuery_SecLabelStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SecLabelStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_SecLabelStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SecLabelStmt and conformance PgQuery_SecLabelStmt, type metadata accessor for PgQuery_SecLabelStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SecLabelStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_SecLabelStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SecLabelStmt and conformance PgQuery_SecLabelStmt, type metadata accessor for PgQuery_SecLabelStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SecLabelStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterTableMoveAllStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableMoveAllStmt and conformance PgQuery_AlterTableMoveAllStmt, type metadata accessor for PgQuery_AlterTableMoveAllStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableMoveAllStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterTableMoveAllStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableMoveAllStmt and conformance PgQuery_AlterTableMoveAllStmt, type metadata accessor for PgQuery_AlterTableMoveAllStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableMoveAllStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterTableMoveAllStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableMoveAllStmt and conformance PgQuery_AlterTableMoveAllStmt, type metadata accessor for PgQuery_AlterTableMoveAllStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableMoveAllStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterTableMoveAllStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableMoveAllStmt and conformance PgQuery_AlterTableMoveAllStmt, type metadata accessor for PgQuery_AlterTableMoveAllStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableMoveAllStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterTableSpaceOptionsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableSpaceOptionsStmt and conformance PgQuery_AlterTableSpaceOptionsStmt, type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableSpaceOptionsStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterTableSpaceOptionsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableSpaceOptionsStmt and conformance PgQuery_AlterTableSpaceOptionsStmt, type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableSpaceOptionsStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterTableSpaceOptionsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableSpaceOptionsStmt and conformance PgQuery_AlterTableSpaceOptionsStmt, type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableSpaceOptionsStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterTableSpaceOptionsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableSpaceOptionsStmt and conformance PgQuery_AlterTableSpaceOptionsStmt, type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableSpaceOptionsStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_DropUserMappingStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropUserMappingStmt and conformance PgQuery_DropUserMappingStmt, type metadata accessor for PgQuery_DropUserMappingStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropUserMappingStmt);
}

uint64_t base witness table accessor for Message in PgQuery_DropUserMappingStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropUserMappingStmt and conformance PgQuery_DropUserMappingStmt, type metadata accessor for PgQuery_DropUserMappingStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropUserMappingStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_DropUserMappingStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropUserMappingStmt and conformance PgQuery_DropUserMappingStmt, type metadata accessor for PgQuery_DropUserMappingStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropUserMappingStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DropUserMappingStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropUserMappingStmt and conformance PgQuery_DropUserMappingStmt, type metadata accessor for PgQuery_DropUserMappingStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropUserMappingStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterUserMappingStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterUserMappingStmt and conformance PgQuery_AlterUserMappingStmt, type metadata accessor for PgQuery_AlterUserMappingStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterUserMappingStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterUserMappingStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterUserMappingStmt and conformance PgQuery_AlterUserMappingStmt, type metadata accessor for PgQuery_AlterUserMappingStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterUserMappingStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterUserMappingStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterUserMappingStmt and conformance PgQuery_AlterUserMappingStmt, type metadata accessor for PgQuery_AlterUserMappingStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterUserMappingStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterUserMappingStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterUserMappingStmt and conformance PgQuery_AlterUserMappingStmt, type metadata accessor for PgQuery_AlterUserMappingStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterUserMappingStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateUserMappingStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateUserMappingStmt and conformance PgQuery_CreateUserMappingStmt, type metadata accessor for PgQuery_CreateUserMappingStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateUserMappingStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateUserMappingStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateUserMappingStmt and conformance PgQuery_CreateUserMappingStmt, type metadata accessor for PgQuery_CreateUserMappingStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateUserMappingStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateUserMappingStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateUserMappingStmt and conformance PgQuery_CreateUserMappingStmt, type metadata accessor for PgQuery_CreateUserMappingStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateUserMappingStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateUserMappingStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateUserMappingStmt and conformance PgQuery_CreateUserMappingStmt, type metadata accessor for PgQuery_CreateUserMappingStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateUserMappingStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterForeignServerStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterForeignServerStmt and conformance PgQuery_AlterForeignServerStmt, type metadata accessor for PgQuery_AlterForeignServerStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterForeignServerStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterForeignServerStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterForeignServerStmt and conformance PgQuery_AlterForeignServerStmt, type metadata accessor for PgQuery_AlterForeignServerStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterForeignServerStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterForeignServerStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterForeignServerStmt and conformance PgQuery_AlterForeignServerStmt, type metadata accessor for PgQuery_AlterForeignServerStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterForeignServerStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterForeignServerStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterForeignServerStmt and conformance PgQuery_AlterForeignServerStmt, type metadata accessor for PgQuery_AlterForeignServerStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterForeignServerStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateForeignServerStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignServerStmt and conformance PgQuery_CreateForeignServerStmt, type metadata accessor for PgQuery_CreateForeignServerStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateForeignServerStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateForeignServerStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignServerStmt and conformance PgQuery_CreateForeignServerStmt, type metadata accessor for PgQuery_CreateForeignServerStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateForeignServerStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateForeignServerStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignServerStmt and conformance PgQuery_CreateForeignServerStmt, type metadata accessor for PgQuery_CreateForeignServerStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateForeignServerStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateForeignServerStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignServerStmt and conformance PgQuery_CreateForeignServerStmt, type metadata accessor for PgQuery_CreateForeignServerStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateForeignServerStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterFdwStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFdwStmt and conformance PgQuery_AlterFdwStmt, type metadata accessor for PgQuery_AlterFdwStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterFdwStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterFdwStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFdwStmt and conformance PgQuery_AlterFdwStmt, type metadata accessor for PgQuery_AlterFdwStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterFdwStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterFdwStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFdwStmt and conformance PgQuery_AlterFdwStmt, type metadata accessor for PgQuery_AlterFdwStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterFdwStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterFdwStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFdwStmt and conformance PgQuery_AlterFdwStmt, type metadata accessor for PgQuery_AlterFdwStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterFdwStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateFdwStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFdwStmt and conformance PgQuery_CreateFdwStmt, type metadata accessor for PgQuery_CreateFdwStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateFdwStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateFdwStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFdwStmt and conformance PgQuery_CreateFdwStmt, type metadata accessor for PgQuery_CreateFdwStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateFdwStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateFdwStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFdwStmt and conformance PgQuery_CreateFdwStmt, type metadata accessor for PgQuery_CreateFdwStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateFdwStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateFdwStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFdwStmt and conformance PgQuery_CreateFdwStmt, type metadata accessor for PgQuery_CreateFdwStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateFdwStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterTSConfigurationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSConfigurationStmt and conformance PgQuery_AlterTSConfigurationStmt, type metadata accessor for PgQuery_AlterTSConfigurationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTSConfigurationStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterTSConfigurationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSConfigurationStmt and conformance PgQuery_AlterTSConfigurationStmt, type metadata accessor for PgQuery_AlterTSConfigurationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTSConfigurationStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterTSConfigurationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSConfigurationStmt and conformance PgQuery_AlterTSConfigurationStmt, type metadata accessor for PgQuery_AlterTSConfigurationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTSConfigurationStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterTSConfigurationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSConfigurationStmt and conformance PgQuery_AlterTSConfigurationStmt, type metadata accessor for PgQuery_AlterTSConfigurationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTSConfigurationStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterTSDictionaryStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSDictionaryStmt and conformance PgQuery_AlterTSDictionaryStmt, type metadata accessor for PgQuery_AlterTSDictionaryStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTSDictionaryStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterTSDictionaryStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSDictionaryStmt and conformance PgQuery_AlterTSDictionaryStmt, type metadata accessor for PgQuery_AlterTSDictionaryStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTSDictionaryStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterTSDictionaryStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSDictionaryStmt and conformance PgQuery_AlterTSDictionaryStmt, type metadata accessor for PgQuery_AlterTSDictionaryStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTSDictionaryStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterTSDictionaryStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSDictionaryStmt and conformance PgQuery_AlterTSDictionaryStmt, type metadata accessor for PgQuery_AlterTSDictionaryStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTSDictionaryStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterEnumStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEnumStmt and conformance PgQuery_AlterEnumStmt, type metadata accessor for PgQuery_AlterEnumStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterEnumStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterEnumStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEnumStmt and conformance PgQuery_AlterEnumStmt, type metadata accessor for PgQuery_AlterEnumStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterEnumStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterEnumStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEnumStmt and conformance PgQuery_AlterEnumStmt, type metadata accessor for PgQuery_AlterEnumStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterEnumStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterEnumStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEnumStmt and conformance PgQuery_AlterEnumStmt, type metadata accessor for PgQuery_AlterEnumStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterEnumStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateRangeStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRangeStmt and conformance PgQuery_CreateRangeStmt, type metadata accessor for PgQuery_CreateRangeStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateRangeStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateRangeStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRangeStmt and conformance PgQuery_CreateRangeStmt, type metadata accessor for PgQuery_CreateRangeStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateRangeStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateRangeStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRangeStmt and conformance PgQuery_CreateRangeStmt, type metadata accessor for PgQuery_CreateRangeStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateRangeStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateRangeStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRangeStmt and conformance PgQuery_CreateRangeStmt, type metadata accessor for PgQuery_CreateRangeStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateRangeStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateEnumStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEnumStmt and conformance PgQuery_CreateEnumStmt, type metadata accessor for PgQuery_CreateEnumStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateEnumStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateEnumStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEnumStmt and conformance PgQuery_CreateEnumStmt, type metadata accessor for PgQuery_CreateEnumStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateEnumStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateEnumStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEnumStmt and conformance PgQuery_CreateEnumStmt, type metadata accessor for PgQuery_CreateEnumStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateEnumStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateEnumStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEnumStmt and conformance PgQuery_CreateEnumStmt, type metadata accessor for PgQuery_CreateEnumStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateEnumStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CompositeTypeStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CompositeTypeStmt and conformance PgQuery_CompositeTypeStmt, type metadata accessor for PgQuery_CompositeTypeStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CompositeTypeStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CompositeTypeStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CompositeTypeStmt and conformance PgQuery_CompositeTypeStmt, type metadata accessor for PgQuery_CompositeTypeStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CompositeTypeStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CompositeTypeStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CompositeTypeStmt and conformance PgQuery_CompositeTypeStmt, type metadata accessor for PgQuery_CompositeTypeStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CompositeTypeStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CompositeTypeStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CompositeTypeStmt and conformance PgQuery_CompositeTypeStmt, type metadata accessor for PgQuery_CompositeTypeStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CompositeTypeStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_ReassignOwnedStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReassignOwnedStmt and conformance PgQuery_ReassignOwnedStmt, type metadata accessor for PgQuery_ReassignOwnedStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ReassignOwnedStmt);
}

uint64_t base witness table accessor for Message in PgQuery_ReassignOwnedStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReassignOwnedStmt and conformance PgQuery_ReassignOwnedStmt, type metadata accessor for PgQuery_ReassignOwnedStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ReassignOwnedStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_ReassignOwnedStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReassignOwnedStmt and conformance PgQuery_ReassignOwnedStmt, type metadata accessor for PgQuery_ReassignOwnedStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ReassignOwnedStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ReassignOwnedStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReassignOwnedStmt and conformance PgQuery_ReassignOwnedStmt, type metadata accessor for PgQuery_ReassignOwnedStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ReassignOwnedStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_DropOwnedStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropOwnedStmt and conformance PgQuery_DropOwnedStmt, type metadata accessor for PgQuery_DropOwnedStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropOwnedStmt);
}

uint64_t base witness table accessor for Message in PgQuery_DropOwnedStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropOwnedStmt and conformance PgQuery_DropOwnedStmt, type metadata accessor for PgQuery_DropOwnedStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropOwnedStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_DropOwnedStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropOwnedStmt and conformance PgQuery_DropOwnedStmt, type metadata accessor for PgQuery_DropOwnedStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropOwnedStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DropOwnedStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropOwnedStmt and conformance PgQuery_DropOwnedStmt, type metadata accessor for PgQuery_DropOwnedStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropOwnedStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterTypeStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTypeStmt and conformance PgQuery_AlterTypeStmt, type metadata accessor for PgQuery_AlterTypeStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTypeStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterTypeStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTypeStmt and conformance PgQuery_AlterTypeStmt, type metadata accessor for PgQuery_AlterTypeStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTypeStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterTypeStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTypeStmt and conformance PgQuery_AlterTypeStmt, type metadata accessor for PgQuery_AlterTypeStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTypeStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterTypeStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTypeStmt and conformance PgQuery_AlterTypeStmt, type metadata accessor for PgQuery_AlterTypeStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTypeStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterOperatorStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOperatorStmt and conformance PgQuery_AlterOperatorStmt, type metadata accessor for PgQuery_AlterOperatorStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterOperatorStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterOperatorStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOperatorStmt and conformance PgQuery_AlterOperatorStmt, type metadata accessor for PgQuery_AlterOperatorStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterOperatorStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterOperatorStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOperatorStmt and conformance PgQuery_AlterOperatorStmt, type metadata accessor for PgQuery_AlterOperatorStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterOperatorStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterOperatorStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOperatorStmt and conformance PgQuery_AlterOperatorStmt, type metadata accessor for PgQuery_AlterOperatorStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterOperatorStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterOwnerStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOwnerStmt and conformance PgQuery_AlterOwnerStmt, type metadata accessor for PgQuery_AlterOwnerStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterOwnerStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterOwnerStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOwnerStmt and conformance PgQuery_AlterOwnerStmt, type metadata accessor for PgQuery_AlterOwnerStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterOwnerStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterOwnerStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOwnerStmt and conformance PgQuery_AlterOwnerStmt, type metadata accessor for PgQuery_AlterOwnerStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterOwnerStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterOwnerStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOwnerStmt and conformance PgQuery_AlterOwnerStmt, type metadata accessor for PgQuery_AlterOwnerStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterOwnerStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterObjectSchemaStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectSchemaStmt and conformance PgQuery_AlterObjectSchemaStmt, type metadata accessor for PgQuery_AlterObjectSchemaStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterObjectSchemaStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterObjectSchemaStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectSchemaStmt and conformance PgQuery_AlterObjectSchemaStmt, type metadata accessor for PgQuery_AlterObjectSchemaStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterObjectSchemaStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterObjectSchemaStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectSchemaStmt and conformance PgQuery_AlterObjectSchemaStmt, type metadata accessor for PgQuery_AlterObjectSchemaStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterObjectSchemaStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterObjectSchemaStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectSchemaStmt and conformance PgQuery_AlterObjectSchemaStmt, type metadata accessor for PgQuery_AlterObjectSchemaStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterObjectSchemaStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterObjectDependsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectDependsStmt and conformance PgQuery_AlterObjectDependsStmt, type metadata accessor for PgQuery_AlterObjectDependsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterObjectDependsStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterObjectDependsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectDependsStmt and conformance PgQuery_AlterObjectDependsStmt, type metadata accessor for PgQuery_AlterObjectDependsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterObjectDependsStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterObjectDependsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectDependsStmt and conformance PgQuery_AlterObjectDependsStmt, type metadata accessor for PgQuery_AlterObjectDependsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterObjectDependsStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterObjectDependsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectDependsStmt and conformance PgQuery_AlterObjectDependsStmt, type metadata accessor for PgQuery_AlterObjectDependsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterObjectDependsStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_DropTableSpaceStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropTableSpaceStmt and conformance PgQuery_DropTableSpaceStmt, type metadata accessor for PgQuery_DropTableSpaceStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropTableSpaceStmt);
}

uint64_t base witness table accessor for Message in PgQuery_DropTableSpaceStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropTableSpaceStmt and conformance PgQuery_DropTableSpaceStmt, type metadata accessor for PgQuery_DropTableSpaceStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropTableSpaceStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_DropTableSpaceStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropTableSpaceStmt and conformance PgQuery_DropTableSpaceStmt, type metadata accessor for PgQuery_DropTableSpaceStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropTableSpaceStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DropTableSpaceStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropTableSpaceStmt and conformance PgQuery_DropTableSpaceStmt, type metadata accessor for PgQuery_DropTableSpaceStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropTableSpaceStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateTableSpaceStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableSpaceStmt and conformance PgQuery_CreateTableSpaceStmt, type metadata accessor for PgQuery_CreateTableSpaceStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTableSpaceStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateTableSpaceStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableSpaceStmt and conformance PgQuery_CreateTableSpaceStmt, type metadata accessor for PgQuery_CreateTableSpaceStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTableSpaceStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateTableSpaceStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableSpaceStmt and conformance PgQuery_CreateTableSpaceStmt, type metadata accessor for PgQuery_CreateTableSpaceStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTableSpaceStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateTableSpaceStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableSpaceStmt and conformance PgQuery_CreateTableSpaceStmt, type metadata accessor for PgQuery_CreateTableSpaceStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTableSpaceStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_DeclareCursorStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeclareCursorStmt and conformance PgQuery_DeclareCursorStmt, type metadata accessor for PgQuery_DeclareCursorStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DeclareCursorStmt);
}

uint64_t base witness table accessor for Message in PgQuery_DeclareCursorStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeclareCursorStmt and conformance PgQuery_DeclareCursorStmt, type metadata accessor for PgQuery_DeclareCursorStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DeclareCursorStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_DeclareCursorStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeclareCursorStmt and conformance PgQuery_DeclareCursorStmt, type metadata accessor for PgQuery_DeclareCursorStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DeclareCursorStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DeclareCursorStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeclareCursorStmt and conformance PgQuery_DeclareCursorStmt, type metadata accessor for PgQuery_DeclareCursorStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DeclareCursorStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_DeallocateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeallocateStmt and conformance PgQuery_DeallocateStmt, type metadata accessor for PgQuery_DeallocateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DeallocateStmt);
}

uint64_t base witness table accessor for Message in PgQuery_DeallocateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeallocateStmt and conformance PgQuery_DeallocateStmt, type metadata accessor for PgQuery_DeallocateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DeallocateStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_DeallocateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeallocateStmt and conformance PgQuery_DeallocateStmt, type metadata accessor for PgQuery_DeallocateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DeallocateStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DeallocateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeallocateStmt and conformance PgQuery_DeallocateStmt, type metadata accessor for PgQuery_DeallocateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DeallocateStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_ExecuteStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExecuteStmt and conformance PgQuery_ExecuteStmt, type metadata accessor for PgQuery_ExecuteStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ExecuteStmt);
}

uint64_t base witness table accessor for Message in PgQuery_ExecuteStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExecuteStmt and conformance PgQuery_ExecuteStmt, type metadata accessor for PgQuery_ExecuteStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ExecuteStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_ExecuteStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExecuteStmt and conformance PgQuery_ExecuteStmt, type metadata accessor for PgQuery_ExecuteStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ExecuteStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ExecuteStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExecuteStmt and conformance PgQuery_ExecuteStmt, type metadata accessor for PgQuery_ExecuteStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ExecuteStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_PrepareStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PrepareStmt and conformance PgQuery_PrepareStmt, type metadata accessor for PgQuery_PrepareStmt, (uint64_t)&protocol conformance descriptor for PgQuery_PrepareStmt);
}

uint64_t base witness table accessor for Message in PgQuery_PrepareStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PrepareStmt and conformance PgQuery_PrepareStmt, type metadata accessor for PgQuery_PrepareStmt, (uint64_t)&protocol conformance descriptor for PgQuery_PrepareStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_PrepareStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PrepareStmt and conformance PgQuery_PrepareStmt, type metadata accessor for PgQuery_PrepareStmt, (uint64_t)&protocol conformance descriptor for PgQuery_PrepareStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_PrepareStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PrepareStmt and conformance PgQuery_PrepareStmt, type metadata accessor for PgQuery_PrepareStmt, (uint64_t)&protocol conformance descriptor for PgQuery_PrepareStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterOpFamilyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOpFamilyStmt and conformance PgQuery_AlterOpFamilyStmt, type metadata accessor for PgQuery_AlterOpFamilyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterOpFamilyStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterOpFamilyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOpFamilyStmt and conformance PgQuery_AlterOpFamilyStmt, type metadata accessor for PgQuery_AlterOpFamilyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterOpFamilyStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterOpFamilyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOpFamilyStmt and conformance PgQuery_AlterOpFamilyStmt, type metadata accessor for PgQuery_AlterOpFamilyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterOpFamilyStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterOpFamilyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOpFamilyStmt and conformance PgQuery_AlterOpFamilyStmt, type metadata accessor for PgQuery_AlterOpFamilyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterOpFamilyStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateOpFamilyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpFamilyStmt and conformance PgQuery_CreateOpFamilyStmt, type metadata accessor for PgQuery_CreateOpFamilyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateOpFamilyStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateOpFamilyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpFamilyStmt and conformance PgQuery_CreateOpFamilyStmt, type metadata accessor for PgQuery_CreateOpFamilyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateOpFamilyStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateOpFamilyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpFamilyStmt and conformance PgQuery_CreateOpFamilyStmt, type metadata accessor for PgQuery_CreateOpFamilyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateOpFamilyStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateOpFamilyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpFamilyStmt and conformance PgQuery_CreateOpFamilyStmt, type metadata accessor for PgQuery_CreateOpFamilyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateOpFamilyStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateOpClassStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassStmt and conformance PgQuery_CreateOpClassStmt, type metadata accessor for PgQuery_CreateOpClassStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateOpClassStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateOpClassStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassStmt and conformance PgQuery_CreateOpClassStmt, type metadata accessor for PgQuery_CreateOpClassStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateOpClassStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateOpClassStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassStmt and conformance PgQuery_CreateOpClassStmt, type metadata accessor for PgQuery_CreateOpClassStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateOpClassStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateOpClassStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassStmt and conformance PgQuery_CreateOpClassStmt, type metadata accessor for PgQuery_CreateOpClassStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateOpClassStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateCastStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateCastStmt and conformance PgQuery_CreateCastStmt, type metadata accessor for PgQuery_CreateCastStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateCastStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateCastStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateCastStmt and conformance PgQuery_CreateCastStmt, type metadata accessor for PgQuery_CreateCastStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateCastStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateCastStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateCastStmt and conformance PgQuery_CreateCastStmt, type metadata accessor for PgQuery_CreateCastStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateCastStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateCastStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateCastStmt and conformance PgQuery_CreateCastStmt, type metadata accessor for PgQuery_CreateCastStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateCastStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateConversionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateConversionStmt and conformance PgQuery_CreateConversionStmt, type metadata accessor for PgQuery_CreateConversionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateConversionStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateConversionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateConversionStmt and conformance PgQuery_CreateConversionStmt, type metadata accessor for PgQuery_CreateConversionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateConversionStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateConversionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateConversionStmt and conformance PgQuery_CreateConversionStmt, type metadata accessor for PgQuery_CreateConversionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateConversionStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateConversionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateConversionStmt and conformance PgQuery_CreateConversionStmt, type metadata accessor for PgQuery_CreateConversionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateConversionStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterRoleSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleSetStmt and conformance PgQuery_AlterRoleSetStmt, type metadata accessor for PgQuery_AlterRoleSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterRoleSetStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterRoleSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleSetStmt and conformance PgQuery_AlterRoleSetStmt, type metadata accessor for PgQuery_AlterRoleSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterRoleSetStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterRoleSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleSetStmt and conformance PgQuery_AlterRoleSetStmt, type metadata accessor for PgQuery_AlterRoleSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterRoleSetStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterRoleSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleSetStmt and conformance PgQuery_AlterRoleSetStmt, type metadata accessor for PgQuery_AlterRoleSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterRoleSetStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterDatabaseSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseSetStmt and conformance PgQuery_AlterDatabaseSetStmt, type metadata accessor for PgQuery_AlterDatabaseSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDatabaseSetStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterDatabaseSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseSetStmt and conformance PgQuery_AlterDatabaseSetStmt, type metadata accessor for PgQuery_AlterDatabaseSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDatabaseSetStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterDatabaseSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseSetStmt and conformance PgQuery_AlterDatabaseSetStmt, type metadata accessor for PgQuery_AlterDatabaseSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDatabaseSetStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterDatabaseSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseSetStmt and conformance PgQuery_AlterDatabaseSetStmt, type metadata accessor for PgQuery_AlterDatabaseSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDatabaseSetStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterDatabaseStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseStmt and conformance PgQuery_AlterDatabaseStmt, type metadata accessor for PgQuery_AlterDatabaseStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDatabaseStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterDatabaseStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseStmt and conformance PgQuery_AlterDatabaseStmt, type metadata accessor for PgQuery_AlterDatabaseStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDatabaseStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterDatabaseStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseStmt and conformance PgQuery_AlterDatabaseStmt, type metadata accessor for PgQuery_AlterDatabaseStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDatabaseStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterDatabaseStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseStmt and conformance PgQuery_AlterDatabaseStmt, type metadata accessor for PgQuery_AlterDatabaseStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDatabaseStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateSchemaStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSchemaStmt and conformance PgQuery_CreateSchemaStmt, type metadata accessor for PgQuery_CreateSchemaStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateSchemaStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateSchemaStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSchemaStmt and conformance PgQuery_CreateSchemaStmt, type metadata accessor for PgQuery_CreateSchemaStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateSchemaStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateSchemaStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSchemaStmt and conformance PgQuery_CreateSchemaStmt, type metadata accessor for PgQuery_CreateSchemaStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateSchemaStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateSchemaStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSchemaStmt and conformance PgQuery_CreateSchemaStmt, type metadata accessor for PgQuery_CreateSchemaStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateSchemaStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CheckPointStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CheckPointStmt and conformance PgQuery_CheckPointStmt, type metadata accessor for PgQuery_CheckPointStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CheckPointStmt);
}

uint64_t type metadata accessor for PgQuery_CheckPointStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CheckPointStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CheckPointStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CheckPointStmt and conformance PgQuery_CheckPointStmt, type metadata accessor for PgQuery_CheckPointStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CheckPointStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CheckPointStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CheckPointStmt and conformance PgQuery_CheckPointStmt, type metadata accessor for PgQuery_CheckPointStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CheckPointStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CheckPointStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CheckPointStmt and conformance PgQuery_CheckPointStmt, type metadata accessor for PgQuery_CheckPointStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CheckPointStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_ReindexStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReindexStmt and conformance PgQuery_ReindexStmt, type metadata accessor for PgQuery_ReindexStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ReindexStmt);
}

uint64_t base witness table accessor for Message in PgQuery_ReindexStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReindexStmt and conformance PgQuery_ReindexStmt, type metadata accessor for PgQuery_ReindexStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ReindexStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_ReindexStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReindexStmt and conformance PgQuery_ReindexStmt, type metadata accessor for PgQuery_ReindexStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ReindexStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ReindexStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReindexStmt and conformance PgQuery_ReindexStmt, type metadata accessor for PgQuery_ReindexStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ReindexStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_ConstraintsSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConstraintsSetStmt and conformance PgQuery_ConstraintsSetStmt, type metadata accessor for PgQuery_ConstraintsSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ConstraintsSetStmt);
}

uint64_t base witness table accessor for Message in PgQuery_ConstraintsSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConstraintsSetStmt and conformance PgQuery_ConstraintsSetStmt, type metadata accessor for PgQuery_ConstraintsSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ConstraintsSetStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_ConstraintsSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConstraintsSetStmt and conformance PgQuery_ConstraintsSetStmt, type metadata accessor for PgQuery_ConstraintsSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ConstraintsSetStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ConstraintsSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConstraintsSetStmt and conformance PgQuery_ConstraintsSetStmt, type metadata accessor for PgQuery_ConstraintsSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ConstraintsSetStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_LockStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockStmt and conformance PgQuery_LockStmt, type metadata accessor for PgQuery_LockStmt, (uint64_t)&protocol conformance descriptor for PgQuery_LockStmt);
}

uint64_t base witness table accessor for Message in PgQuery_LockStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockStmt and conformance PgQuery_LockStmt, type metadata accessor for PgQuery_LockStmt, (uint64_t)&protocol conformance descriptor for PgQuery_LockStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_LockStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockStmt and conformance PgQuery_LockStmt, type metadata accessor for PgQuery_LockStmt, (uint64_t)&protocol conformance descriptor for PgQuery_LockStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_LockStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockStmt and conformance PgQuery_LockStmt, type metadata accessor for PgQuery_LockStmt, (uint64_t)&protocol conformance descriptor for PgQuery_LockStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_DropRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropRoleStmt and conformance PgQuery_DropRoleStmt, type metadata accessor for PgQuery_DropRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropRoleStmt);
}

uint64_t base witness table accessor for Message in PgQuery_DropRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropRoleStmt and conformance PgQuery_DropRoleStmt, type metadata accessor for PgQuery_DropRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropRoleStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_DropRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropRoleStmt and conformance PgQuery_DropRoleStmt, type metadata accessor for PgQuery_DropRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropRoleStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DropRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropRoleStmt and conformance PgQuery_DropRoleStmt, type metadata accessor for PgQuery_DropRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropRoleStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleStmt and conformance PgQuery_AlterRoleStmt, type metadata accessor for PgQuery_AlterRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterRoleStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleStmt and conformance PgQuery_AlterRoleStmt, type metadata accessor for PgQuery_AlterRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterRoleStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleStmt and conformance PgQuery_AlterRoleStmt, type metadata accessor for PgQuery_AlterRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterRoleStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleStmt and conformance PgQuery_AlterRoleStmt, type metadata accessor for PgQuery_AlterRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterRoleStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRoleStmt and conformance PgQuery_CreateRoleStmt, type metadata accessor for PgQuery_CreateRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateRoleStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRoleStmt and conformance PgQuery_CreateRoleStmt, type metadata accessor for PgQuery_CreateRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateRoleStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRoleStmt and conformance PgQuery_CreateRoleStmt, type metadata accessor for PgQuery_CreateRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateRoleStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRoleStmt and conformance PgQuery_CreateRoleStmt, type metadata accessor for PgQuery_CreateRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateRoleStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreatePLangStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePLangStmt and conformance PgQuery_CreatePLangStmt, type metadata accessor for PgQuery_CreatePLangStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatePLangStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreatePLangStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePLangStmt and conformance PgQuery_CreatePLangStmt, type metadata accessor for PgQuery_CreatePLangStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatePLangStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreatePLangStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePLangStmt and conformance PgQuery_CreatePLangStmt, type metadata accessor for PgQuery_CreatePLangStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatePLangStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreatePLangStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePLangStmt and conformance PgQuery_CreatePLangStmt, type metadata accessor for PgQuery_CreatePLangStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatePLangStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateTrigStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTrigStmt and conformance PgQuery_CreateTrigStmt, type metadata accessor for PgQuery_CreateTrigStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTrigStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateTrigStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTrigStmt and conformance PgQuery_CreateTrigStmt, type metadata accessor for PgQuery_CreateTrigStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTrigStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateTrigStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTrigStmt and conformance PgQuery_CreateTrigStmt, type metadata accessor for PgQuery_CreateTrigStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTrigStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateTrigStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTrigStmt and conformance PgQuery_CreateTrigStmt, type metadata accessor for PgQuery_CreateTrigStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTrigStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_DiscardStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DiscardStmt and conformance PgQuery_DiscardStmt, type metadata accessor for PgQuery_DiscardStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DiscardStmt);
}

uint64_t base witness table accessor for Message in PgQuery_DiscardStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DiscardStmt and conformance PgQuery_DiscardStmt, type metadata accessor for PgQuery_DiscardStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DiscardStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_DiscardStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DiscardStmt and conformance PgQuery_DiscardStmt, type metadata accessor for PgQuery_DiscardStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DiscardStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DiscardStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DiscardStmt and conformance PgQuery_DiscardStmt, type metadata accessor for PgQuery_DiscardStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DiscardStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_VariableShowStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableShowStmt and conformance PgQuery_VariableShowStmt, type metadata accessor for PgQuery_VariableShowStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VariableShowStmt);
}

uint64_t base witness table accessor for Message in PgQuery_VariableShowStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableShowStmt and conformance PgQuery_VariableShowStmt, type metadata accessor for PgQuery_VariableShowStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VariableShowStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_VariableShowStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableShowStmt and conformance PgQuery_VariableShowStmt, type metadata accessor for PgQuery_VariableShowStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VariableShowStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_VariableShowStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableShowStmt and conformance PgQuery_VariableShowStmt, type metadata accessor for PgQuery_VariableShowStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VariableShowStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_VariableSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt, type metadata accessor for PgQuery_VariableSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VariableSetStmt);
}

uint64_t base witness table accessor for Message in PgQuery_VariableSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt, type metadata accessor for PgQuery_VariableSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VariableSetStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_VariableSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt, type metadata accessor for PgQuery_VariableSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VariableSetStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_VariableSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt, type metadata accessor for PgQuery_VariableSetStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VariableSetStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterSeqStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSeqStmt and conformance PgQuery_AlterSeqStmt, type metadata accessor for PgQuery_AlterSeqStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterSeqStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterSeqStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSeqStmt and conformance PgQuery_AlterSeqStmt, type metadata accessor for PgQuery_AlterSeqStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterSeqStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterSeqStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSeqStmt and conformance PgQuery_AlterSeqStmt, type metadata accessor for PgQuery_AlterSeqStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterSeqStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterSeqStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSeqStmt and conformance PgQuery_AlterSeqStmt, type metadata accessor for PgQuery_AlterSeqStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterSeqStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateSeqStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSeqStmt and conformance PgQuery_CreateSeqStmt, type metadata accessor for PgQuery_CreateSeqStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateSeqStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateSeqStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSeqStmt and conformance PgQuery_CreateSeqStmt, type metadata accessor for PgQuery_CreateSeqStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateSeqStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateSeqStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSeqStmt and conformance PgQuery_CreateSeqStmt, type metadata accessor for PgQuery_CreateSeqStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateSeqStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateSeqStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSeqStmt and conformance PgQuery_CreateSeqStmt, type metadata accessor for PgQuery_CreateSeqStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateSeqStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateTableAsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableAsStmt and conformance PgQuery_CreateTableAsStmt, type metadata accessor for PgQuery_CreateTableAsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTableAsStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateTableAsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableAsStmt and conformance PgQuery_CreateTableAsStmt, type metadata accessor for PgQuery_CreateTableAsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTableAsStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateTableAsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableAsStmt and conformance PgQuery_CreateTableAsStmt, type metadata accessor for PgQuery_CreateTableAsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTableAsStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateTableAsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableAsStmt and conformance PgQuery_CreateTableAsStmt, type metadata accessor for PgQuery_CreateTableAsStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateTableAsStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_ExplainStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExplainStmt and conformance PgQuery_ExplainStmt, type metadata accessor for PgQuery_ExplainStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ExplainStmt);
}

uint64_t base witness table accessor for Message in PgQuery_ExplainStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExplainStmt and conformance PgQuery_ExplainStmt, type metadata accessor for PgQuery_ExplainStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ExplainStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_ExplainStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExplainStmt and conformance PgQuery_ExplainStmt, type metadata accessor for PgQuery_ExplainStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ExplainStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ExplainStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExplainStmt and conformance PgQuery_ExplainStmt, type metadata accessor for PgQuery_ExplainStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ExplainStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_VacuumStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumStmt and conformance PgQuery_VacuumStmt, type metadata accessor for PgQuery_VacuumStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VacuumStmt);
}

uint64_t base witness table accessor for Message in PgQuery_VacuumStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumStmt and conformance PgQuery_VacuumStmt, type metadata accessor for PgQuery_VacuumStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VacuumStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_VacuumStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumStmt and conformance PgQuery_VacuumStmt, type metadata accessor for PgQuery_VacuumStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VacuumStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_VacuumStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumStmt and conformance PgQuery_VacuumStmt, type metadata accessor for PgQuery_VacuumStmt, (uint64_t)&protocol conformance descriptor for PgQuery_VacuumStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_DropdbStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropdbStmt and conformance PgQuery_DropdbStmt, type metadata accessor for PgQuery_DropdbStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropdbStmt);
}

uint64_t base witness table accessor for Message in PgQuery_DropdbStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropdbStmt and conformance PgQuery_DropdbStmt, type metadata accessor for PgQuery_DropdbStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropdbStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_DropdbStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropdbStmt and conformance PgQuery_DropdbStmt, type metadata accessor for PgQuery_DropdbStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropdbStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DropdbStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropdbStmt and conformance PgQuery_DropdbStmt, type metadata accessor for PgQuery_DropdbStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropdbStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreatedbStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatedbStmt and conformance PgQuery_CreatedbStmt, type metadata accessor for PgQuery_CreatedbStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatedbStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreatedbStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatedbStmt and conformance PgQuery_CreatedbStmt, type metadata accessor for PgQuery_CreatedbStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatedbStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreatedbStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatedbStmt and conformance PgQuery_CreatedbStmt, type metadata accessor for PgQuery_CreatedbStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatedbStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreatedbStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatedbStmt and conformance PgQuery_CreatedbStmt, type metadata accessor for PgQuery_CreatedbStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreatedbStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateDomainStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateDomainStmt and conformance PgQuery_CreateDomainStmt, type metadata accessor for PgQuery_CreateDomainStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateDomainStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateDomainStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateDomainStmt and conformance PgQuery_CreateDomainStmt, type metadata accessor for PgQuery_CreateDomainStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateDomainStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateDomainStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateDomainStmt and conformance PgQuery_CreateDomainStmt, type metadata accessor for PgQuery_CreateDomainStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateDomainStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateDomainStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateDomainStmt and conformance PgQuery_CreateDomainStmt, type metadata accessor for PgQuery_CreateDomainStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateDomainStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_LoadStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LoadStmt and conformance PgQuery_LoadStmt, type metadata accessor for PgQuery_LoadStmt, (uint64_t)&protocol conformance descriptor for PgQuery_LoadStmt);
}

uint64_t base witness table accessor for Message in PgQuery_LoadStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LoadStmt and conformance PgQuery_LoadStmt, type metadata accessor for PgQuery_LoadStmt, (uint64_t)&protocol conformance descriptor for PgQuery_LoadStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_LoadStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LoadStmt and conformance PgQuery_LoadStmt, type metadata accessor for PgQuery_LoadStmt, (uint64_t)&protocol conformance descriptor for PgQuery_LoadStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_LoadStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LoadStmt and conformance PgQuery_LoadStmt, type metadata accessor for PgQuery_LoadStmt, (uint64_t)&protocol conformance descriptor for PgQuery_LoadStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_ViewStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ViewStmt and conformance PgQuery_ViewStmt, type metadata accessor for PgQuery_ViewStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ViewStmt);
}

uint64_t base witness table accessor for Message in PgQuery_ViewStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ViewStmt and conformance PgQuery_ViewStmt, type metadata accessor for PgQuery_ViewStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ViewStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_ViewStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ViewStmt and conformance PgQuery_ViewStmt, type metadata accessor for PgQuery_ViewStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ViewStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ViewStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ViewStmt and conformance PgQuery_ViewStmt, type metadata accessor for PgQuery_ViewStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ViewStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_TransactionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TransactionStmt and conformance PgQuery_TransactionStmt, type metadata accessor for PgQuery_TransactionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_TransactionStmt);
}

uint64_t base witness table accessor for Message in PgQuery_TransactionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TransactionStmt and conformance PgQuery_TransactionStmt, type metadata accessor for PgQuery_TransactionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_TransactionStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_TransactionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TransactionStmt and conformance PgQuery_TransactionStmt, type metadata accessor for PgQuery_TransactionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_TransactionStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_TransactionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TransactionStmt and conformance PgQuery_TransactionStmt, type metadata accessor for PgQuery_TransactionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_TransactionStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_UnlistenStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UnlistenStmt and conformance PgQuery_UnlistenStmt, type metadata accessor for PgQuery_UnlistenStmt, (uint64_t)&protocol conformance descriptor for PgQuery_UnlistenStmt);
}

uint64_t base witness table accessor for Message in PgQuery_UnlistenStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UnlistenStmt and conformance PgQuery_UnlistenStmt, type metadata accessor for PgQuery_UnlistenStmt, (uint64_t)&protocol conformance descriptor for PgQuery_UnlistenStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_UnlistenStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UnlistenStmt and conformance PgQuery_UnlistenStmt, type metadata accessor for PgQuery_UnlistenStmt, (uint64_t)&protocol conformance descriptor for PgQuery_UnlistenStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_UnlistenStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UnlistenStmt and conformance PgQuery_UnlistenStmt, type metadata accessor for PgQuery_UnlistenStmt, (uint64_t)&protocol conformance descriptor for PgQuery_UnlistenStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_ListenStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ListenStmt and conformance PgQuery_ListenStmt, type metadata accessor for PgQuery_ListenStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ListenStmt);
}

uint64_t base witness table accessor for Message in PgQuery_ListenStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ListenStmt and conformance PgQuery_ListenStmt, type metadata accessor for PgQuery_ListenStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ListenStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_ListenStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ListenStmt and conformance PgQuery_ListenStmt, type metadata accessor for PgQuery_ListenStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ListenStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ListenStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ListenStmt and conformance PgQuery_ListenStmt, type metadata accessor for PgQuery_ListenStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ListenStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_NotifyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NotifyStmt and conformance PgQuery_NotifyStmt, type metadata accessor for PgQuery_NotifyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_NotifyStmt);
}

uint64_t base witness table accessor for Message in PgQuery_NotifyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NotifyStmt and conformance PgQuery_NotifyStmt, type metadata accessor for PgQuery_NotifyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_NotifyStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_NotifyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NotifyStmt and conformance PgQuery_NotifyStmt, type metadata accessor for PgQuery_NotifyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_NotifyStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_NotifyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NotifyStmt and conformance PgQuery_NotifyStmt, type metadata accessor for PgQuery_NotifyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_NotifyStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_RuleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RuleStmt and conformance PgQuery_RuleStmt, type metadata accessor for PgQuery_RuleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RuleStmt);
}

uint64_t base witness table accessor for Message in PgQuery_RuleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RuleStmt and conformance PgQuery_RuleStmt, type metadata accessor for PgQuery_RuleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RuleStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_RuleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RuleStmt and conformance PgQuery_RuleStmt, type metadata accessor for PgQuery_RuleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RuleStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RuleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RuleStmt and conformance PgQuery_RuleStmt, type metadata accessor for PgQuery_RuleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RuleStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_RenameStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RenameStmt and conformance PgQuery_RenameStmt, type metadata accessor for PgQuery_RenameStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RenameStmt);
}

uint64_t base witness table accessor for Message in PgQuery_RenameStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RenameStmt and conformance PgQuery_RenameStmt, type metadata accessor for PgQuery_RenameStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RenameStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_RenameStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RenameStmt and conformance PgQuery_RenameStmt, type metadata accessor for PgQuery_RenameStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RenameStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RenameStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RenameStmt and conformance PgQuery_RenameStmt, type metadata accessor for PgQuery_RenameStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RenameStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_DoStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DoStmt and conformance PgQuery_DoStmt, type metadata accessor for PgQuery_DoStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DoStmt);
}

uint64_t base witness table accessor for Message in PgQuery_DoStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DoStmt and conformance PgQuery_DoStmt, type metadata accessor for PgQuery_DoStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DoStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_DoStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DoStmt and conformance PgQuery_DoStmt, type metadata accessor for PgQuery_DoStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DoStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DoStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DoStmt and conformance PgQuery_DoStmt, type metadata accessor for PgQuery_DoStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DoStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterFunctionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFunctionStmt and conformance PgQuery_AlterFunctionStmt, type metadata accessor for PgQuery_AlterFunctionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterFunctionStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterFunctionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFunctionStmt and conformance PgQuery_AlterFunctionStmt, type metadata accessor for PgQuery_AlterFunctionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterFunctionStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterFunctionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFunctionStmt and conformance PgQuery_AlterFunctionStmt, type metadata accessor for PgQuery_AlterFunctionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterFunctionStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterFunctionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFunctionStmt and conformance PgQuery_AlterFunctionStmt, type metadata accessor for PgQuery_AlterFunctionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterFunctionStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateFunctionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFunctionStmt and conformance PgQuery_CreateFunctionStmt, type metadata accessor for PgQuery_CreateFunctionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateFunctionStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateFunctionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFunctionStmt and conformance PgQuery_CreateFunctionStmt, type metadata accessor for PgQuery_CreateFunctionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateFunctionStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateFunctionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFunctionStmt and conformance PgQuery_CreateFunctionStmt, type metadata accessor for PgQuery_CreateFunctionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateFunctionStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateFunctionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFunctionStmt and conformance PgQuery_CreateFunctionStmt, type metadata accessor for PgQuery_CreateFunctionStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateFunctionStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_IndexStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexStmt and conformance PgQuery_IndexStmt, type metadata accessor for PgQuery_IndexStmt, (uint64_t)&protocol conformance descriptor for PgQuery_IndexStmt);
}

uint64_t base witness table accessor for Message in PgQuery_IndexStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexStmt and conformance PgQuery_IndexStmt, type metadata accessor for PgQuery_IndexStmt, (uint64_t)&protocol conformance descriptor for PgQuery_IndexStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_IndexStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexStmt and conformance PgQuery_IndexStmt, type metadata accessor for PgQuery_IndexStmt, (uint64_t)&protocol conformance descriptor for PgQuery_IndexStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_IndexStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexStmt and conformance PgQuery_IndexStmt, type metadata accessor for PgQuery_IndexStmt, (uint64_t)&protocol conformance descriptor for PgQuery_IndexStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_FetchStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FetchStmt and conformance PgQuery_FetchStmt, type metadata accessor for PgQuery_FetchStmt, (uint64_t)&protocol conformance descriptor for PgQuery_FetchStmt);
}

uint64_t base witness table accessor for Message in PgQuery_FetchStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FetchStmt and conformance PgQuery_FetchStmt, type metadata accessor for PgQuery_FetchStmt, (uint64_t)&protocol conformance descriptor for PgQuery_FetchStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_FetchStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FetchStmt and conformance PgQuery_FetchStmt, type metadata accessor for PgQuery_FetchStmt, (uint64_t)&protocol conformance descriptor for PgQuery_FetchStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_FetchStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FetchStmt and conformance PgQuery_FetchStmt, type metadata accessor for PgQuery_FetchStmt, (uint64_t)&protocol conformance descriptor for PgQuery_FetchStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CommentStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommentStmt and conformance PgQuery_CommentStmt, type metadata accessor for PgQuery_CommentStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CommentStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CommentStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommentStmt and conformance PgQuery_CommentStmt, type metadata accessor for PgQuery_CommentStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CommentStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CommentStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommentStmt and conformance PgQuery_CommentStmt, type metadata accessor for PgQuery_CommentStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CommentStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CommentStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommentStmt and conformance PgQuery_CommentStmt, type metadata accessor for PgQuery_CommentStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CommentStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_TruncateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TruncateStmt and conformance PgQuery_TruncateStmt, type metadata accessor for PgQuery_TruncateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_TruncateStmt);
}

uint64_t base witness table accessor for Message in PgQuery_TruncateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TruncateStmt and conformance PgQuery_TruncateStmt, type metadata accessor for PgQuery_TruncateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_TruncateStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_TruncateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TruncateStmt and conformance PgQuery_TruncateStmt, type metadata accessor for PgQuery_TruncateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_TruncateStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_TruncateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TruncateStmt and conformance PgQuery_TruncateStmt, type metadata accessor for PgQuery_TruncateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_TruncateStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_DropStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropStmt and conformance PgQuery_DropStmt, type metadata accessor for PgQuery_DropStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropStmt);
}

uint64_t base witness table accessor for Message in PgQuery_DropStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropStmt and conformance PgQuery_DropStmt, type metadata accessor for PgQuery_DropStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_DropStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropStmt and conformance PgQuery_DropStmt, type metadata accessor for PgQuery_DropStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DropStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropStmt and conformance PgQuery_DropStmt, type metadata accessor for PgQuery_DropStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DropStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_DefineStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefineStmt and conformance PgQuery_DefineStmt, type metadata accessor for PgQuery_DefineStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DefineStmt);
}

uint64_t base witness table accessor for Message in PgQuery_DefineStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefineStmt and conformance PgQuery_DefineStmt, type metadata accessor for PgQuery_DefineStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DefineStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_DefineStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefineStmt and conformance PgQuery_DefineStmt, type metadata accessor for PgQuery_DefineStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DefineStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DefineStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefineStmt and conformance PgQuery_DefineStmt, type metadata accessor for PgQuery_DefineStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DefineStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStmt and conformance PgQuery_CreateStmt, type metadata accessor for PgQuery_CreateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStmt and conformance PgQuery_CreateStmt, type metadata accessor for PgQuery_CreateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStmt and conformance PgQuery_CreateStmt, type metadata accessor for PgQuery_CreateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStmt and conformance PgQuery_CreateStmt, type metadata accessor for PgQuery_CreateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CreateStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CopyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CopyStmt and conformance PgQuery_CopyStmt, type metadata accessor for PgQuery_CopyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CopyStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CopyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CopyStmt and conformance PgQuery_CopyStmt, type metadata accessor for PgQuery_CopyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CopyStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CopyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CopyStmt and conformance PgQuery_CopyStmt, type metadata accessor for PgQuery_CopyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CopyStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CopyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CopyStmt and conformance PgQuery_CopyStmt, type metadata accessor for PgQuery_CopyStmt, (uint64_t)&protocol conformance descriptor for PgQuery_CopyStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_ClusterStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClusterStmt and conformance PgQuery_ClusterStmt, type metadata accessor for PgQuery_ClusterStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ClusterStmt);
}

uint64_t base witness table accessor for Message in PgQuery_ClusterStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClusterStmt and conformance PgQuery_ClusterStmt, type metadata accessor for PgQuery_ClusterStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ClusterStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_ClusterStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClusterStmt and conformance PgQuery_ClusterStmt, type metadata accessor for PgQuery_ClusterStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ClusterStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ClusterStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClusterStmt and conformance PgQuery_ClusterStmt, type metadata accessor for PgQuery_ClusterStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ClusterStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_ClosePortalStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClosePortalStmt and conformance PgQuery_ClosePortalStmt, type metadata accessor for PgQuery_ClosePortalStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ClosePortalStmt);
}

uint64_t base witness table accessor for Message in PgQuery_ClosePortalStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClosePortalStmt and conformance PgQuery_ClosePortalStmt, type metadata accessor for PgQuery_ClosePortalStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ClosePortalStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_ClosePortalStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClosePortalStmt and conformance PgQuery_ClosePortalStmt, type metadata accessor for PgQuery_ClosePortalStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ClosePortalStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ClosePortalStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClosePortalStmt and conformance PgQuery_ClosePortalStmt, type metadata accessor for PgQuery_ClosePortalStmt, (uint64_t)&protocol conformance descriptor for PgQuery_ClosePortalStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterDefaultPrivilegesStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDefaultPrivilegesStmt and conformance PgQuery_AlterDefaultPrivilegesStmt, type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDefaultPrivilegesStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterDefaultPrivilegesStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDefaultPrivilegesStmt and conformance PgQuery_AlterDefaultPrivilegesStmt, type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDefaultPrivilegesStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterDefaultPrivilegesStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDefaultPrivilegesStmt and conformance PgQuery_AlterDefaultPrivilegesStmt, type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDefaultPrivilegesStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterDefaultPrivilegesStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDefaultPrivilegesStmt and conformance PgQuery_AlterDefaultPrivilegesStmt, type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDefaultPrivilegesStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_GrantRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantRoleStmt and conformance PgQuery_GrantRoleStmt, type metadata accessor for PgQuery_GrantRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_GrantRoleStmt);
}

uint64_t base witness table accessor for Message in PgQuery_GrantRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantRoleStmt and conformance PgQuery_GrantRoleStmt, type metadata accessor for PgQuery_GrantRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_GrantRoleStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_GrantRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantRoleStmt and conformance PgQuery_GrantRoleStmt, type metadata accessor for PgQuery_GrantRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_GrantRoleStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_GrantRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantRoleStmt and conformance PgQuery_GrantRoleStmt, type metadata accessor for PgQuery_GrantRoleStmt, (uint64_t)&protocol conformance descriptor for PgQuery_GrantRoleStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_GrantStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantStmt and conformance PgQuery_GrantStmt, type metadata accessor for PgQuery_GrantStmt, (uint64_t)&protocol conformance descriptor for PgQuery_GrantStmt);
}

uint64_t base witness table accessor for Message in PgQuery_GrantStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantStmt and conformance PgQuery_GrantStmt, type metadata accessor for PgQuery_GrantStmt, (uint64_t)&protocol conformance descriptor for PgQuery_GrantStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_GrantStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantStmt and conformance PgQuery_GrantStmt, type metadata accessor for PgQuery_GrantStmt, (uint64_t)&protocol conformance descriptor for PgQuery_GrantStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_GrantStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantStmt and conformance PgQuery_GrantStmt, type metadata accessor for PgQuery_GrantStmt, (uint64_t)&protocol conformance descriptor for PgQuery_GrantStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_SetOperationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetOperationStmt and conformance PgQuery_SetOperationStmt, type metadata accessor for PgQuery_SetOperationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SetOperationStmt);
}

uint64_t base witness table accessor for Message in PgQuery_SetOperationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetOperationStmt and conformance PgQuery_SetOperationStmt, type metadata accessor for PgQuery_SetOperationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SetOperationStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_SetOperationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetOperationStmt and conformance PgQuery_SetOperationStmt, type metadata accessor for PgQuery_SetOperationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SetOperationStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_SetOperationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetOperationStmt and conformance PgQuery_SetOperationStmt, type metadata accessor for PgQuery_SetOperationStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SetOperationStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterDomainStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDomainStmt and conformance PgQuery_AlterDomainStmt, type metadata accessor for PgQuery_AlterDomainStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDomainStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterDomainStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDomainStmt and conformance PgQuery_AlterDomainStmt, type metadata accessor for PgQuery_AlterDomainStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDomainStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterDomainStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDomainStmt and conformance PgQuery_AlterDomainStmt, type metadata accessor for PgQuery_AlterDomainStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDomainStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterDomainStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDomainStmt and conformance PgQuery_AlterDomainStmt, type metadata accessor for PgQuery_AlterDomainStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterDomainStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterTableCmd()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableCmd and conformance PgQuery_AlterTableCmd, type metadata accessor for PgQuery_AlterTableCmd, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableCmd);
}

uint64_t base witness table accessor for Message in PgQuery_AlterTableCmd()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableCmd and conformance PgQuery_AlterTableCmd, type metadata accessor for PgQuery_AlterTableCmd, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableCmd);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterTableCmd()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableCmd and conformance PgQuery_AlterTableCmd, type metadata accessor for PgQuery_AlterTableCmd, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableCmd);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterTableCmd()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableCmd and conformance PgQuery_AlterTableCmd, type metadata accessor for PgQuery_AlterTableCmd, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableCmd);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterTableStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableStmt and conformance PgQuery_AlterTableStmt, type metadata accessor for PgQuery_AlterTableStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterTableStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableStmt and conformance PgQuery_AlterTableStmt, type metadata accessor for PgQuery_AlterTableStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterTableStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableStmt and conformance PgQuery_AlterTableStmt, type metadata accessor for PgQuery_AlterTableStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterTableStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableStmt and conformance PgQuery_AlterTableStmt, type metadata accessor for PgQuery_AlterTableStmt, (uint64_t)&protocol conformance descriptor for PgQuery_AlterTableStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_SelectStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SelectStmt and conformance PgQuery_SelectStmt, type metadata accessor for PgQuery_SelectStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SelectStmt);
}

uint64_t base witness table accessor for Message in PgQuery_SelectStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SelectStmt and conformance PgQuery_SelectStmt, type metadata accessor for PgQuery_SelectStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SelectStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_SelectStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SelectStmt and conformance PgQuery_SelectStmt, type metadata accessor for PgQuery_SelectStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SelectStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_SelectStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SelectStmt and conformance PgQuery_SelectStmt, type metadata accessor for PgQuery_SelectStmt, (uint64_t)&protocol conformance descriptor for PgQuery_SelectStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_UpdateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UpdateStmt and conformance PgQuery_UpdateStmt, type metadata accessor for PgQuery_UpdateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_UpdateStmt);
}

uint64_t base witness table accessor for Message in PgQuery_UpdateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UpdateStmt and conformance PgQuery_UpdateStmt, type metadata accessor for PgQuery_UpdateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_UpdateStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_UpdateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UpdateStmt and conformance PgQuery_UpdateStmt, type metadata accessor for PgQuery_UpdateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_UpdateStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_UpdateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UpdateStmt and conformance PgQuery_UpdateStmt, type metadata accessor for PgQuery_UpdateStmt, (uint64_t)&protocol conformance descriptor for PgQuery_UpdateStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_DeleteStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeleteStmt and conformance PgQuery_DeleteStmt, type metadata accessor for PgQuery_DeleteStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DeleteStmt);
}

uint64_t base witness table accessor for Message in PgQuery_DeleteStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeleteStmt and conformance PgQuery_DeleteStmt, type metadata accessor for PgQuery_DeleteStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DeleteStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_DeleteStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeleteStmt and conformance PgQuery_DeleteStmt, type metadata accessor for PgQuery_DeleteStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DeleteStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DeleteStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeleteStmt and conformance PgQuery_DeleteStmt, type metadata accessor for PgQuery_DeleteStmt, (uint64_t)&protocol conformance descriptor for PgQuery_DeleteStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_InsertStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InsertStmt and conformance PgQuery_InsertStmt, type metadata accessor for PgQuery_InsertStmt, (uint64_t)&protocol conformance descriptor for PgQuery_InsertStmt);
}

uint64_t base witness table accessor for Message in PgQuery_InsertStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InsertStmt and conformance PgQuery_InsertStmt, type metadata accessor for PgQuery_InsertStmt, (uint64_t)&protocol conformance descriptor for PgQuery_InsertStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_InsertStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InsertStmt and conformance PgQuery_InsertStmt, type metadata accessor for PgQuery_InsertStmt, (uint64_t)&protocol conformance descriptor for PgQuery_InsertStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_InsertStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InsertStmt and conformance PgQuery_InsertStmt, type metadata accessor for PgQuery_InsertStmt, (uint64_t)&protocol conformance descriptor for PgQuery_InsertStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_Query()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Query and conformance PgQuery_Query, type metadata accessor for PgQuery_Query, (uint64_t)&protocol conformance descriptor for PgQuery_Query);
}

uint64_t base witness table accessor for Message in PgQuery_Query()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Query and conformance PgQuery_Query, type metadata accessor for PgQuery_Query, (uint64_t)&protocol conformance descriptor for PgQuery_Query);
}

uint64_t base witness table accessor for Hashable in PgQuery_Query()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Query and conformance PgQuery_Query, type metadata accessor for PgQuery_Query, (uint64_t)&protocol conformance descriptor for PgQuery_Query);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_Query()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Query and conformance PgQuery_Query, type metadata accessor for PgQuery_Query, (uint64_t)&protocol conformance descriptor for PgQuery_Query);
}

uint64_t base witness table accessor for Equatable in PgQuery_RawStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RawStmt and conformance PgQuery_RawStmt, type metadata accessor for PgQuery_RawStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RawStmt);
}

uint64_t base witness table accessor for Message in PgQuery_RawStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RawStmt and conformance PgQuery_RawStmt, type metadata accessor for PgQuery_RawStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RawStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_RawStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RawStmt and conformance PgQuery_RawStmt, type metadata accessor for PgQuery_RawStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RawStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RawStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RawStmt and conformance PgQuery_RawStmt, type metadata accessor for PgQuery_RawStmt, (uint64_t)&protocol conformance descriptor for PgQuery_RawStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_IntoClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntoClause and conformance PgQuery_IntoClause, type metadata accessor for PgQuery_IntoClause, (uint64_t)&protocol conformance descriptor for PgQuery_IntoClause);
}

uint64_t base witness table accessor for Message in PgQuery_IntoClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntoClause and conformance PgQuery_IntoClause, type metadata accessor for PgQuery_IntoClause, (uint64_t)&protocol conformance descriptor for PgQuery_IntoClause);
}

uint64_t base witness table accessor for Hashable in PgQuery_IntoClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntoClause and conformance PgQuery_IntoClause, type metadata accessor for PgQuery_IntoClause, (uint64_t)&protocol conformance descriptor for PgQuery_IntoClause);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_IntoClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntoClause and conformance PgQuery_IntoClause, type metadata accessor for PgQuery_IntoClause, (uint64_t)&protocol conformance descriptor for PgQuery_IntoClause);
}

uint64_t base witness table accessor for Equatable in PgQuery_OnConflictExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictExpr and conformance PgQuery_OnConflictExpr, type metadata accessor for PgQuery_OnConflictExpr, (uint64_t)&protocol conformance descriptor for PgQuery_OnConflictExpr);
}

uint64_t base witness table accessor for Message in PgQuery_OnConflictExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictExpr and conformance PgQuery_OnConflictExpr, type metadata accessor for PgQuery_OnConflictExpr, (uint64_t)&protocol conformance descriptor for PgQuery_OnConflictExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_OnConflictExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictExpr and conformance PgQuery_OnConflictExpr, type metadata accessor for PgQuery_OnConflictExpr, (uint64_t)&protocol conformance descriptor for PgQuery_OnConflictExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_OnConflictExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictExpr and conformance PgQuery_OnConflictExpr, type metadata accessor for PgQuery_OnConflictExpr, (uint64_t)&protocol conformance descriptor for PgQuery_OnConflictExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_FromExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FromExpr and conformance PgQuery_FromExpr, type metadata accessor for PgQuery_FromExpr, (uint64_t)&protocol conformance descriptor for PgQuery_FromExpr);
}

uint64_t base witness table accessor for Message in PgQuery_FromExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FromExpr and conformance PgQuery_FromExpr, type metadata accessor for PgQuery_FromExpr, (uint64_t)&protocol conformance descriptor for PgQuery_FromExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_FromExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FromExpr and conformance PgQuery_FromExpr, type metadata accessor for PgQuery_FromExpr, (uint64_t)&protocol conformance descriptor for PgQuery_FromExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_FromExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FromExpr and conformance PgQuery_FromExpr, type metadata accessor for PgQuery_FromExpr, (uint64_t)&protocol conformance descriptor for PgQuery_FromExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_JoinExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_JoinExpr and conformance PgQuery_JoinExpr, type metadata accessor for PgQuery_JoinExpr, (uint64_t)&protocol conformance descriptor for PgQuery_JoinExpr);
}

uint64_t base witness table accessor for Message in PgQuery_JoinExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_JoinExpr and conformance PgQuery_JoinExpr, type metadata accessor for PgQuery_JoinExpr, (uint64_t)&protocol conformance descriptor for PgQuery_JoinExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_JoinExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_JoinExpr and conformance PgQuery_JoinExpr, type metadata accessor for PgQuery_JoinExpr, (uint64_t)&protocol conformance descriptor for PgQuery_JoinExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_JoinExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_JoinExpr and conformance PgQuery_JoinExpr, type metadata accessor for PgQuery_JoinExpr, (uint64_t)&protocol conformance descriptor for PgQuery_JoinExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_RangeTblRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblRef and conformance PgQuery_RangeTblRef, type metadata accessor for PgQuery_RangeTblRef, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTblRef);
}

uint64_t base witness table accessor for Message in PgQuery_RangeTblRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblRef and conformance PgQuery_RangeTblRef, type metadata accessor for PgQuery_RangeTblRef, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTblRef);
}

uint64_t base witness table accessor for Hashable in PgQuery_RangeTblRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblRef and conformance PgQuery_RangeTblRef, type metadata accessor for PgQuery_RangeTblRef, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTblRef);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RangeTblRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblRef and conformance PgQuery_RangeTblRef, type metadata accessor for PgQuery_RangeTblRef, (uint64_t)&protocol conformance descriptor for PgQuery_RangeTblRef);
}

uint64_t base witness table accessor for Equatable in PgQuery_TargetEntry()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TargetEntry and conformance PgQuery_TargetEntry, type metadata accessor for PgQuery_TargetEntry, (uint64_t)&protocol conformance descriptor for PgQuery_TargetEntry);
}

uint64_t base witness table accessor for Message in PgQuery_TargetEntry()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TargetEntry and conformance PgQuery_TargetEntry, type metadata accessor for PgQuery_TargetEntry, (uint64_t)&protocol conformance descriptor for PgQuery_TargetEntry);
}

uint64_t base witness table accessor for Hashable in PgQuery_TargetEntry()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TargetEntry and conformance PgQuery_TargetEntry, type metadata accessor for PgQuery_TargetEntry, (uint64_t)&protocol conformance descriptor for PgQuery_TargetEntry);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_TargetEntry()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TargetEntry and conformance PgQuery_TargetEntry, type metadata accessor for PgQuery_TargetEntry, (uint64_t)&protocol conformance descriptor for PgQuery_TargetEntry);
}

uint64_t base witness table accessor for Equatable in PgQuery_InferenceElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferenceElem and conformance PgQuery_InferenceElem, type metadata accessor for PgQuery_InferenceElem, (uint64_t)&protocol conformance descriptor for PgQuery_InferenceElem);
}

uint64_t base witness table accessor for Message in PgQuery_InferenceElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferenceElem and conformance PgQuery_InferenceElem, type metadata accessor for PgQuery_InferenceElem, (uint64_t)&protocol conformance descriptor for PgQuery_InferenceElem);
}

uint64_t base witness table accessor for Hashable in PgQuery_InferenceElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferenceElem and conformance PgQuery_InferenceElem, type metadata accessor for PgQuery_InferenceElem, (uint64_t)&protocol conformance descriptor for PgQuery_InferenceElem);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_InferenceElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferenceElem and conformance PgQuery_InferenceElem, type metadata accessor for PgQuery_InferenceElem, (uint64_t)&protocol conformance descriptor for PgQuery_InferenceElem);
}

uint64_t base witness table accessor for Equatable in PgQuery_NextValueExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NextValueExpr and conformance PgQuery_NextValueExpr, type metadata accessor for PgQuery_NextValueExpr, (uint64_t)&protocol conformance descriptor for PgQuery_NextValueExpr);
}

uint64_t base witness table accessor for Message in PgQuery_NextValueExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NextValueExpr and conformance PgQuery_NextValueExpr, type metadata accessor for PgQuery_NextValueExpr, (uint64_t)&protocol conformance descriptor for PgQuery_NextValueExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_NextValueExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NextValueExpr and conformance PgQuery_NextValueExpr, type metadata accessor for PgQuery_NextValueExpr, (uint64_t)&protocol conformance descriptor for PgQuery_NextValueExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_NextValueExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NextValueExpr and conformance PgQuery_NextValueExpr, type metadata accessor for PgQuery_NextValueExpr, (uint64_t)&protocol conformance descriptor for PgQuery_NextValueExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_CurrentOfExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CurrentOfExpr and conformance PgQuery_CurrentOfExpr, type metadata accessor for PgQuery_CurrentOfExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CurrentOfExpr);
}

uint64_t base witness table accessor for Message in PgQuery_CurrentOfExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CurrentOfExpr and conformance PgQuery_CurrentOfExpr, type metadata accessor for PgQuery_CurrentOfExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CurrentOfExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_CurrentOfExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CurrentOfExpr and conformance PgQuery_CurrentOfExpr, type metadata accessor for PgQuery_CurrentOfExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CurrentOfExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CurrentOfExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CurrentOfExpr and conformance PgQuery_CurrentOfExpr, type metadata accessor for PgQuery_CurrentOfExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CurrentOfExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_SetToDefault()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetToDefault and conformance PgQuery_SetToDefault, type metadata accessor for PgQuery_SetToDefault, (uint64_t)&protocol conformance descriptor for PgQuery_SetToDefault);
}

uint64_t base witness table accessor for Message in PgQuery_SetToDefault()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetToDefault and conformance PgQuery_SetToDefault, type metadata accessor for PgQuery_SetToDefault, (uint64_t)&protocol conformance descriptor for PgQuery_SetToDefault);
}

uint64_t base witness table accessor for Hashable in PgQuery_SetToDefault()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetToDefault and conformance PgQuery_SetToDefault, type metadata accessor for PgQuery_SetToDefault, (uint64_t)&protocol conformance descriptor for PgQuery_SetToDefault);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_SetToDefault()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetToDefault and conformance PgQuery_SetToDefault, type metadata accessor for PgQuery_SetToDefault, (uint64_t)&protocol conformance descriptor for PgQuery_SetToDefault);
}

uint64_t base witness table accessor for Equatable in PgQuery_CoerceToDomainValue()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomainValue and conformance PgQuery_CoerceToDomainValue, type metadata accessor for PgQuery_CoerceToDomainValue, (uint64_t)&protocol conformance descriptor for PgQuery_CoerceToDomainValue);
}

uint64_t base witness table accessor for Message in PgQuery_CoerceToDomainValue()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomainValue and conformance PgQuery_CoerceToDomainValue, type metadata accessor for PgQuery_CoerceToDomainValue, (uint64_t)&protocol conformance descriptor for PgQuery_CoerceToDomainValue);
}

uint64_t base witness table accessor for Hashable in PgQuery_CoerceToDomainValue()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomainValue and conformance PgQuery_CoerceToDomainValue, type metadata accessor for PgQuery_CoerceToDomainValue, (uint64_t)&protocol conformance descriptor for PgQuery_CoerceToDomainValue);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CoerceToDomainValue()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomainValue and conformance PgQuery_CoerceToDomainValue, type metadata accessor for PgQuery_CoerceToDomainValue, (uint64_t)&protocol conformance descriptor for PgQuery_CoerceToDomainValue);
}

uint64_t base witness table accessor for Equatable in PgQuery_CoerceToDomain()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomain and conformance PgQuery_CoerceToDomain, type metadata accessor for PgQuery_CoerceToDomain, (uint64_t)&protocol conformance descriptor for PgQuery_CoerceToDomain);
}

uint64_t base witness table accessor for Message in PgQuery_CoerceToDomain()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomain and conformance PgQuery_CoerceToDomain, type metadata accessor for PgQuery_CoerceToDomain, (uint64_t)&protocol conformance descriptor for PgQuery_CoerceToDomain);
}

uint64_t base witness table accessor for Hashable in PgQuery_CoerceToDomain()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomain and conformance PgQuery_CoerceToDomain, type metadata accessor for PgQuery_CoerceToDomain, (uint64_t)&protocol conformance descriptor for PgQuery_CoerceToDomain);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CoerceToDomain()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomain and conformance PgQuery_CoerceToDomain, type metadata accessor for PgQuery_CoerceToDomain, (uint64_t)&protocol conformance descriptor for PgQuery_CoerceToDomain);
}

uint64_t base witness table accessor for Equatable in PgQuery_BooleanTest()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BooleanTest and conformance PgQuery_BooleanTest, type metadata accessor for PgQuery_BooleanTest, (uint64_t)&protocol conformance descriptor for PgQuery_BooleanTest);
}

uint64_t base witness table accessor for Message in PgQuery_BooleanTest()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BooleanTest and conformance PgQuery_BooleanTest, type metadata accessor for PgQuery_BooleanTest, (uint64_t)&protocol conformance descriptor for PgQuery_BooleanTest);
}

uint64_t base witness table accessor for Hashable in PgQuery_BooleanTest()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BooleanTest and conformance PgQuery_BooleanTest, type metadata accessor for PgQuery_BooleanTest, (uint64_t)&protocol conformance descriptor for PgQuery_BooleanTest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_BooleanTest()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BooleanTest and conformance PgQuery_BooleanTest, type metadata accessor for PgQuery_BooleanTest, (uint64_t)&protocol conformance descriptor for PgQuery_BooleanTest);
}

uint64_t base witness table accessor for Equatable in PgQuery_NullTest()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullTest and conformance PgQuery_NullTest, type metadata accessor for PgQuery_NullTest, (uint64_t)&protocol conformance descriptor for PgQuery_NullTest);
}

uint64_t base witness table accessor for Message in PgQuery_NullTest()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullTest and conformance PgQuery_NullTest, type metadata accessor for PgQuery_NullTest, (uint64_t)&protocol conformance descriptor for PgQuery_NullTest);
}

uint64_t base witness table accessor for Hashable in PgQuery_NullTest()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullTest and conformance PgQuery_NullTest, type metadata accessor for PgQuery_NullTest, (uint64_t)&protocol conformance descriptor for PgQuery_NullTest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_NullTest()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullTest and conformance PgQuery_NullTest, type metadata accessor for PgQuery_NullTest, (uint64_t)&protocol conformance descriptor for PgQuery_NullTest);
}

uint64_t base witness table accessor for Equatable in PgQuery_XmlExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlExpr and conformance PgQuery_XmlExpr, type metadata accessor for PgQuery_XmlExpr, (uint64_t)&protocol conformance descriptor for PgQuery_XmlExpr);
}

uint64_t base witness table accessor for Message in PgQuery_XmlExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlExpr and conformance PgQuery_XmlExpr, type metadata accessor for PgQuery_XmlExpr, (uint64_t)&protocol conformance descriptor for PgQuery_XmlExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_XmlExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlExpr and conformance PgQuery_XmlExpr, type metadata accessor for PgQuery_XmlExpr, (uint64_t)&protocol conformance descriptor for PgQuery_XmlExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_XmlExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlExpr and conformance PgQuery_XmlExpr, type metadata accessor for PgQuery_XmlExpr, (uint64_t)&protocol conformance descriptor for PgQuery_XmlExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_SQLValueFunction()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SQLValueFunction and conformance PgQuery_SQLValueFunction, type metadata accessor for PgQuery_SQLValueFunction, (uint64_t)&protocol conformance descriptor for PgQuery_SQLValueFunction);
}

uint64_t base witness table accessor for Message in PgQuery_SQLValueFunction()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SQLValueFunction and conformance PgQuery_SQLValueFunction, type metadata accessor for PgQuery_SQLValueFunction, (uint64_t)&protocol conformance descriptor for PgQuery_SQLValueFunction);
}

uint64_t base witness table accessor for Hashable in PgQuery_SQLValueFunction()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SQLValueFunction and conformance PgQuery_SQLValueFunction, type metadata accessor for PgQuery_SQLValueFunction, (uint64_t)&protocol conformance descriptor for PgQuery_SQLValueFunction);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_SQLValueFunction()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SQLValueFunction and conformance PgQuery_SQLValueFunction, type metadata accessor for PgQuery_SQLValueFunction, (uint64_t)&protocol conformance descriptor for PgQuery_SQLValueFunction);
}

uint64_t base witness table accessor for Equatable in PgQuery_MinMaxExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MinMaxExpr and conformance PgQuery_MinMaxExpr, type metadata accessor for PgQuery_MinMaxExpr, (uint64_t)&protocol conformance descriptor for PgQuery_MinMaxExpr);
}

uint64_t base witness table accessor for Message in PgQuery_MinMaxExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MinMaxExpr and conformance PgQuery_MinMaxExpr, type metadata accessor for PgQuery_MinMaxExpr, (uint64_t)&protocol conformance descriptor for PgQuery_MinMaxExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_MinMaxExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MinMaxExpr and conformance PgQuery_MinMaxExpr, type metadata accessor for PgQuery_MinMaxExpr, (uint64_t)&protocol conformance descriptor for PgQuery_MinMaxExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_MinMaxExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MinMaxExpr and conformance PgQuery_MinMaxExpr, type metadata accessor for PgQuery_MinMaxExpr, (uint64_t)&protocol conformance descriptor for PgQuery_MinMaxExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_CoalesceExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoalesceExpr and conformance PgQuery_CoalesceExpr, type metadata accessor for PgQuery_CoalesceExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CoalesceExpr);
}

uint64_t base witness table accessor for Message in PgQuery_CoalesceExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoalesceExpr and conformance PgQuery_CoalesceExpr, type metadata accessor for PgQuery_CoalesceExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CoalesceExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_CoalesceExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoalesceExpr and conformance PgQuery_CoalesceExpr, type metadata accessor for PgQuery_CoalesceExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CoalesceExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CoalesceExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoalesceExpr and conformance PgQuery_CoalesceExpr, type metadata accessor for PgQuery_CoalesceExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CoalesceExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_RowCompareExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowCompareExpr and conformance PgQuery_RowCompareExpr, type metadata accessor for PgQuery_RowCompareExpr, (uint64_t)&protocol conformance descriptor for PgQuery_RowCompareExpr);
}

uint64_t base witness table accessor for Message in PgQuery_RowCompareExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowCompareExpr and conformance PgQuery_RowCompareExpr, type metadata accessor for PgQuery_RowCompareExpr, (uint64_t)&protocol conformance descriptor for PgQuery_RowCompareExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_RowCompareExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowCompareExpr and conformance PgQuery_RowCompareExpr, type metadata accessor for PgQuery_RowCompareExpr, (uint64_t)&protocol conformance descriptor for PgQuery_RowCompareExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RowCompareExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowCompareExpr and conformance PgQuery_RowCompareExpr, type metadata accessor for PgQuery_RowCompareExpr, (uint64_t)&protocol conformance descriptor for PgQuery_RowCompareExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_RowExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowExpr and conformance PgQuery_RowExpr, type metadata accessor for PgQuery_RowExpr, (uint64_t)&protocol conformance descriptor for PgQuery_RowExpr);
}

uint64_t base witness table accessor for Message in PgQuery_RowExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowExpr and conformance PgQuery_RowExpr, type metadata accessor for PgQuery_RowExpr, (uint64_t)&protocol conformance descriptor for PgQuery_RowExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_RowExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowExpr and conformance PgQuery_RowExpr, type metadata accessor for PgQuery_RowExpr, (uint64_t)&protocol conformance descriptor for PgQuery_RowExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RowExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowExpr and conformance PgQuery_RowExpr, type metadata accessor for PgQuery_RowExpr, (uint64_t)&protocol conformance descriptor for PgQuery_RowExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_ArrayExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayExpr and conformance PgQuery_ArrayExpr, type metadata accessor for PgQuery_ArrayExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ArrayExpr);
}

uint64_t base witness table accessor for Message in PgQuery_ArrayExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayExpr and conformance PgQuery_ArrayExpr, type metadata accessor for PgQuery_ArrayExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ArrayExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_ArrayExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayExpr and conformance PgQuery_ArrayExpr, type metadata accessor for PgQuery_ArrayExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ArrayExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ArrayExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayExpr and conformance PgQuery_ArrayExpr, type metadata accessor for PgQuery_ArrayExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ArrayExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_CaseTestExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseTestExpr and conformance PgQuery_CaseTestExpr, type metadata accessor for PgQuery_CaseTestExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CaseTestExpr);
}

uint64_t base witness table accessor for Message in PgQuery_CaseTestExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseTestExpr and conformance PgQuery_CaseTestExpr, type metadata accessor for PgQuery_CaseTestExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CaseTestExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_CaseTestExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseTestExpr and conformance PgQuery_CaseTestExpr, type metadata accessor for PgQuery_CaseTestExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CaseTestExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CaseTestExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseTestExpr and conformance PgQuery_CaseTestExpr, type metadata accessor for PgQuery_CaseTestExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CaseTestExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_CaseWhen()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseWhen and conformance PgQuery_CaseWhen, type metadata accessor for PgQuery_CaseWhen, (uint64_t)&protocol conformance descriptor for PgQuery_CaseWhen);
}

uint64_t base witness table accessor for Message in PgQuery_CaseWhen()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseWhen and conformance PgQuery_CaseWhen, type metadata accessor for PgQuery_CaseWhen, (uint64_t)&protocol conformance descriptor for PgQuery_CaseWhen);
}

uint64_t base witness table accessor for Hashable in PgQuery_CaseWhen()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseWhen and conformance PgQuery_CaseWhen, type metadata accessor for PgQuery_CaseWhen, (uint64_t)&protocol conformance descriptor for PgQuery_CaseWhen);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CaseWhen()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseWhen and conformance PgQuery_CaseWhen, type metadata accessor for PgQuery_CaseWhen, (uint64_t)&protocol conformance descriptor for PgQuery_CaseWhen);
}

uint64_t base witness table accessor for Equatable in PgQuery_CaseExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseExpr and conformance PgQuery_CaseExpr, type metadata accessor for PgQuery_CaseExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CaseExpr);
}

uint64_t base witness table accessor for Message in PgQuery_CaseExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseExpr and conformance PgQuery_CaseExpr, type metadata accessor for PgQuery_CaseExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CaseExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_CaseExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseExpr and conformance PgQuery_CaseExpr, type metadata accessor for PgQuery_CaseExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CaseExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CaseExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseExpr and conformance PgQuery_CaseExpr, type metadata accessor for PgQuery_CaseExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CaseExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_CollateExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateExpr and conformance PgQuery_CollateExpr, type metadata accessor for PgQuery_CollateExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CollateExpr);
}

uint64_t base witness table accessor for Message in PgQuery_CollateExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateExpr and conformance PgQuery_CollateExpr, type metadata accessor for PgQuery_CollateExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CollateExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_CollateExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateExpr and conformance PgQuery_CollateExpr, type metadata accessor for PgQuery_CollateExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CollateExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CollateExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateExpr and conformance PgQuery_CollateExpr, type metadata accessor for PgQuery_CollateExpr, (uint64_t)&protocol conformance descriptor for PgQuery_CollateExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_ConvertRowtypeExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConvertRowtypeExpr and conformance PgQuery_ConvertRowtypeExpr, type metadata accessor for PgQuery_ConvertRowtypeExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ConvertRowtypeExpr);
}

uint64_t base witness table accessor for Message in PgQuery_ConvertRowtypeExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConvertRowtypeExpr and conformance PgQuery_ConvertRowtypeExpr, type metadata accessor for PgQuery_ConvertRowtypeExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ConvertRowtypeExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_ConvertRowtypeExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConvertRowtypeExpr and conformance PgQuery_ConvertRowtypeExpr, type metadata accessor for PgQuery_ConvertRowtypeExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ConvertRowtypeExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ConvertRowtypeExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConvertRowtypeExpr and conformance PgQuery_ConvertRowtypeExpr, type metadata accessor for PgQuery_ConvertRowtypeExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ConvertRowtypeExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_ArrayCoerceExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayCoerceExpr and conformance PgQuery_ArrayCoerceExpr, type metadata accessor for PgQuery_ArrayCoerceExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ArrayCoerceExpr);
}

uint64_t base witness table accessor for Message in PgQuery_ArrayCoerceExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayCoerceExpr and conformance PgQuery_ArrayCoerceExpr, type metadata accessor for PgQuery_ArrayCoerceExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ArrayCoerceExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_ArrayCoerceExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayCoerceExpr and conformance PgQuery_ArrayCoerceExpr, type metadata accessor for PgQuery_ArrayCoerceExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ArrayCoerceExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ArrayCoerceExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayCoerceExpr and conformance PgQuery_ArrayCoerceExpr, type metadata accessor for PgQuery_ArrayCoerceExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ArrayCoerceExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_CoerceViaIO()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceViaIO and conformance PgQuery_CoerceViaIO, type metadata accessor for PgQuery_CoerceViaIO, (uint64_t)&protocol conformance descriptor for PgQuery_CoerceViaIO);
}

uint64_t base witness table accessor for Message in PgQuery_CoerceViaIO()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceViaIO and conformance PgQuery_CoerceViaIO, type metadata accessor for PgQuery_CoerceViaIO, (uint64_t)&protocol conformance descriptor for PgQuery_CoerceViaIO);
}

uint64_t base witness table accessor for Hashable in PgQuery_CoerceViaIO()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceViaIO and conformance PgQuery_CoerceViaIO, type metadata accessor for PgQuery_CoerceViaIO, (uint64_t)&protocol conformance descriptor for PgQuery_CoerceViaIO);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CoerceViaIO()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceViaIO and conformance PgQuery_CoerceViaIO, type metadata accessor for PgQuery_CoerceViaIO, (uint64_t)&protocol conformance descriptor for PgQuery_CoerceViaIO);
}

uint64_t base witness table accessor for Equatable in PgQuery_RelabelType()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RelabelType and conformance PgQuery_RelabelType, type metadata accessor for PgQuery_RelabelType, (uint64_t)&protocol conformance descriptor for PgQuery_RelabelType);
}

uint64_t base witness table accessor for Message in PgQuery_RelabelType()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RelabelType and conformance PgQuery_RelabelType, type metadata accessor for PgQuery_RelabelType, (uint64_t)&protocol conformance descriptor for PgQuery_RelabelType);
}

uint64_t base witness table accessor for Hashable in PgQuery_RelabelType()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RelabelType and conformance PgQuery_RelabelType, type metadata accessor for PgQuery_RelabelType, (uint64_t)&protocol conformance descriptor for PgQuery_RelabelType);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RelabelType()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RelabelType and conformance PgQuery_RelabelType, type metadata accessor for PgQuery_RelabelType, (uint64_t)&protocol conformance descriptor for PgQuery_RelabelType);
}

uint64_t base witness table accessor for Equatable in PgQuery_FieldStore()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldStore and conformance PgQuery_FieldStore, type metadata accessor for PgQuery_FieldStore, (uint64_t)&protocol conformance descriptor for PgQuery_FieldStore);
}

uint64_t base witness table accessor for Message in PgQuery_FieldStore()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldStore and conformance PgQuery_FieldStore, type metadata accessor for PgQuery_FieldStore, (uint64_t)&protocol conformance descriptor for PgQuery_FieldStore);
}

uint64_t base witness table accessor for Hashable in PgQuery_FieldStore()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldStore and conformance PgQuery_FieldStore, type metadata accessor for PgQuery_FieldStore, (uint64_t)&protocol conformance descriptor for PgQuery_FieldStore);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_FieldStore()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldStore and conformance PgQuery_FieldStore, type metadata accessor for PgQuery_FieldStore, (uint64_t)&protocol conformance descriptor for PgQuery_FieldStore);
}

uint64_t base witness table accessor for Equatable in PgQuery_FieldSelect()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldSelect and conformance PgQuery_FieldSelect, type metadata accessor for PgQuery_FieldSelect, (uint64_t)&protocol conformance descriptor for PgQuery_FieldSelect);
}

uint64_t base witness table accessor for Message in PgQuery_FieldSelect()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldSelect and conformance PgQuery_FieldSelect, type metadata accessor for PgQuery_FieldSelect, (uint64_t)&protocol conformance descriptor for PgQuery_FieldSelect);
}

uint64_t base witness table accessor for Hashable in PgQuery_FieldSelect()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldSelect and conformance PgQuery_FieldSelect, type metadata accessor for PgQuery_FieldSelect, (uint64_t)&protocol conformance descriptor for PgQuery_FieldSelect);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_FieldSelect()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldSelect and conformance PgQuery_FieldSelect, type metadata accessor for PgQuery_FieldSelect, (uint64_t)&protocol conformance descriptor for PgQuery_FieldSelect);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlternativeSubPlan()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlternativeSubPlan and conformance PgQuery_AlternativeSubPlan, type metadata accessor for PgQuery_AlternativeSubPlan, (uint64_t)&protocol conformance descriptor for PgQuery_AlternativeSubPlan);
}

uint64_t base witness table accessor for Message in PgQuery_AlternativeSubPlan()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlternativeSubPlan and conformance PgQuery_AlternativeSubPlan, type metadata accessor for PgQuery_AlternativeSubPlan, (uint64_t)&protocol conformance descriptor for PgQuery_AlternativeSubPlan);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlternativeSubPlan()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlternativeSubPlan and conformance PgQuery_AlternativeSubPlan, type metadata accessor for PgQuery_AlternativeSubPlan, (uint64_t)&protocol conformance descriptor for PgQuery_AlternativeSubPlan);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlternativeSubPlan()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlternativeSubPlan and conformance PgQuery_AlternativeSubPlan, type metadata accessor for PgQuery_AlternativeSubPlan, (uint64_t)&protocol conformance descriptor for PgQuery_AlternativeSubPlan);
}

uint64_t base witness table accessor for Equatable in PgQuery_SubPlan()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubPlan and conformance PgQuery_SubPlan, type metadata accessor for PgQuery_SubPlan, (uint64_t)&protocol conformance descriptor for PgQuery_SubPlan);
}

uint64_t base witness table accessor for Message in PgQuery_SubPlan()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubPlan and conformance PgQuery_SubPlan, type metadata accessor for PgQuery_SubPlan, (uint64_t)&protocol conformance descriptor for PgQuery_SubPlan);
}

uint64_t base witness table accessor for Hashable in PgQuery_SubPlan()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubPlan and conformance PgQuery_SubPlan, type metadata accessor for PgQuery_SubPlan, (uint64_t)&protocol conformance descriptor for PgQuery_SubPlan);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_SubPlan()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubPlan and conformance PgQuery_SubPlan, type metadata accessor for PgQuery_SubPlan, (uint64_t)&protocol conformance descriptor for PgQuery_SubPlan);
}

uint64_t base witness table accessor for Equatable in PgQuery_SubLink()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubLink and conformance PgQuery_SubLink, type metadata accessor for PgQuery_SubLink, (uint64_t)&protocol conformance descriptor for PgQuery_SubLink);
}

uint64_t base witness table accessor for Message in PgQuery_SubLink()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubLink and conformance PgQuery_SubLink, type metadata accessor for PgQuery_SubLink, (uint64_t)&protocol conformance descriptor for PgQuery_SubLink);
}

uint64_t base witness table accessor for Hashable in PgQuery_SubLink()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubLink and conformance PgQuery_SubLink, type metadata accessor for PgQuery_SubLink, (uint64_t)&protocol conformance descriptor for PgQuery_SubLink);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_SubLink()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubLink and conformance PgQuery_SubLink, type metadata accessor for PgQuery_SubLink, (uint64_t)&protocol conformance descriptor for PgQuery_SubLink);
}

uint64_t base witness table accessor for Equatable in PgQuery_BoolExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BoolExpr and conformance PgQuery_BoolExpr, type metadata accessor for PgQuery_BoolExpr, (uint64_t)&protocol conformance descriptor for PgQuery_BoolExpr);
}

uint64_t base witness table accessor for Message in PgQuery_BoolExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BoolExpr and conformance PgQuery_BoolExpr, type metadata accessor for PgQuery_BoolExpr, (uint64_t)&protocol conformance descriptor for PgQuery_BoolExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_BoolExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BoolExpr and conformance PgQuery_BoolExpr, type metadata accessor for PgQuery_BoolExpr, (uint64_t)&protocol conformance descriptor for PgQuery_BoolExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_BoolExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BoolExpr and conformance PgQuery_BoolExpr, type metadata accessor for PgQuery_BoolExpr, (uint64_t)&protocol conformance descriptor for PgQuery_BoolExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_ScalarArrayOpExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScalarArrayOpExpr and conformance PgQuery_ScalarArrayOpExpr, type metadata accessor for PgQuery_ScalarArrayOpExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ScalarArrayOpExpr);
}

uint64_t base witness table accessor for Message in PgQuery_ScalarArrayOpExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScalarArrayOpExpr and conformance PgQuery_ScalarArrayOpExpr, type metadata accessor for PgQuery_ScalarArrayOpExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ScalarArrayOpExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_ScalarArrayOpExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScalarArrayOpExpr and conformance PgQuery_ScalarArrayOpExpr, type metadata accessor for PgQuery_ScalarArrayOpExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ScalarArrayOpExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ScalarArrayOpExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScalarArrayOpExpr and conformance PgQuery_ScalarArrayOpExpr, type metadata accessor for PgQuery_ScalarArrayOpExpr, (uint64_t)&protocol conformance descriptor for PgQuery_ScalarArrayOpExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_NullIfExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullIfExpr and conformance PgQuery_NullIfExpr, type metadata accessor for PgQuery_NullIfExpr, (uint64_t)&protocol conformance descriptor for PgQuery_NullIfExpr);
}

uint64_t base witness table accessor for Message in PgQuery_NullIfExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullIfExpr and conformance PgQuery_NullIfExpr, type metadata accessor for PgQuery_NullIfExpr, (uint64_t)&protocol conformance descriptor for PgQuery_NullIfExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_NullIfExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullIfExpr and conformance PgQuery_NullIfExpr, type metadata accessor for PgQuery_NullIfExpr, (uint64_t)&protocol conformance descriptor for PgQuery_NullIfExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_NullIfExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullIfExpr and conformance PgQuery_NullIfExpr, type metadata accessor for PgQuery_NullIfExpr, (uint64_t)&protocol conformance descriptor for PgQuery_NullIfExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_DistinctExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DistinctExpr and conformance PgQuery_DistinctExpr, type metadata accessor for PgQuery_DistinctExpr, (uint64_t)&protocol conformance descriptor for PgQuery_DistinctExpr);
}

uint64_t base witness table accessor for Message in PgQuery_DistinctExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DistinctExpr and conformance PgQuery_DistinctExpr, type metadata accessor for PgQuery_DistinctExpr, (uint64_t)&protocol conformance descriptor for PgQuery_DistinctExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_DistinctExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DistinctExpr and conformance PgQuery_DistinctExpr, type metadata accessor for PgQuery_DistinctExpr, (uint64_t)&protocol conformance descriptor for PgQuery_DistinctExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DistinctExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DistinctExpr and conformance PgQuery_DistinctExpr, type metadata accessor for PgQuery_DistinctExpr, (uint64_t)&protocol conformance descriptor for PgQuery_DistinctExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_OpExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OpExpr and conformance PgQuery_OpExpr, type metadata accessor for PgQuery_OpExpr, (uint64_t)&protocol conformance descriptor for PgQuery_OpExpr);
}

uint64_t base witness table accessor for Message in PgQuery_OpExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OpExpr and conformance PgQuery_OpExpr, type metadata accessor for PgQuery_OpExpr, (uint64_t)&protocol conformance descriptor for PgQuery_OpExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_OpExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OpExpr and conformance PgQuery_OpExpr, type metadata accessor for PgQuery_OpExpr, (uint64_t)&protocol conformance descriptor for PgQuery_OpExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_OpExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OpExpr and conformance PgQuery_OpExpr, type metadata accessor for PgQuery_OpExpr, (uint64_t)&protocol conformance descriptor for PgQuery_OpExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_NamedArgExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NamedArgExpr and conformance PgQuery_NamedArgExpr, type metadata accessor for PgQuery_NamedArgExpr, (uint64_t)&protocol conformance descriptor for PgQuery_NamedArgExpr);
}

uint64_t base witness table accessor for Message in PgQuery_NamedArgExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NamedArgExpr and conformance PgQuery_NamedArgExpr, type metadata accessor for PgQuery_NamedArgExpr, (uint64_t)&protocol conformance descriptor for PgQuery_NamedArgExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_NamedArgExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NamedArgExpr and conformance PgQuery_NamedArgExpr, type metadata accessor for PgQuery_NamedArgExpr, (uint64_t)&protocol conformance descriptor for PgQuery_NamedArgExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_NamedArgExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NamedArgExpr and conformance PgQuery_NamedArgExpr, type metadata accessor for PgQuery_NamedArgExpr, (uint64_t)&protocol conformance descriptor for PgQuery_NamedArgExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_FuncExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncExpr and conformance PgQuery_FuncExpr, type metadata accessor for PgQuery_FuncExpr, (uint64_t)&protocol conformance descriptor for PgQuery_FuncExpr);
}

uint64_t base witness table accessor for Message in PgQuery_FuncExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncExpr and conformance PgQuery_FuncExpr, type metadata accessor for PgQuery_FuncExpr, (uint64_t)&protocol conformance descriptor for PgQuery_FuncExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_FuncExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncExpr and conformance PgQuery_FuncExpr, type metadata accessor for PgQuery_FuncExpr, (uint64_t)&protocol conformance descriptor for PgQuery_FuncExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_FuncExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncExpr and conformance PgQuery_FuncExpr, type metadata accessor for PgQuery_FuncExpr, (uint64_t)&protocol conformance descriptor for PgQuery_FuncExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_SubscriptingRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubscriptingRef and conformance PgQuery_SubscriptingRef, type metadata accessor for PgQuery_SubscriptingRef, (uint64_t)&protocol conformance descriptor for PgQuery_SubscriptingRef);
}

uint64_t base witness table accessor for Message in PgQuery_SubscriptingRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubscriptingRef and conformance PgQuery_SubscriptingRef, type metadata accessor for PgQuery_SubscriptingRef, (uint64_t)&protocol conformance descriptor for PgQuery_SubscriptingRef);
}

uint64_t base witness table accessor for Hashable in PgQuery_SubscriptingRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubscriptingRef and conformance PgQuery_SubscriptingRef, type metadata accessor for PgQuery_SubscriptingRef, (uint64_t)&protocol conformance descriptor for PgQuery_SubscriptingRef);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_SubscriptingRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubscriptingRef and conformance PgQuery_SubscriptingRef, type metadata accessor for PgQuery_SubscriptingRef, (uint64_t)&protocol conformance descriptor for PgQuery_SubscriptingRef);
}

uint64_t base witness table accessor for Equatable in PgQuery_WindowFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowFunc and conformance PgQuery_WindowFunc, type metadata accessor for PgQuery_WindowFunc, (uint64_t)&protocol conformance descriptor for PgQuery_WindowFunc);
}

uint64_t base witness table accessor for Message in PgQuery_WindowFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowFunc and conformance PgQuery_WindowFunc, type metadata accessor for PgQuery_WindowFunc, (uint64_t)&protocol conformance descriptor for PgQuery_WindowFunc);
}

uint64_t base witness table accessor for Hashable in PgQuery_WindowFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowFunc and conformance PgQuery_WindowFunc, type metadata accessor for PgQuery_WindowFunc, (uint64_t)&protocol conformance descriptor for PgQuery_WindowFunc);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_WindowFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowFunc and conformance PgQuery_WindowFunc, type metadata accessor for PgQuery_WindowFunc, (uint64_t)&protocol conformance descriptor for PgQuery_WindowFunc);
}

uint64_t base witness table accessor for Equatable in PgQuery_GroupingFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingFunc and conformance PgQuery_GroupingFunc, type metadata accessor for PgQuery_GroupingFunc, (uint64_t)&protocol conformance descriptor for PgQuery_GroupingFunc);
}

uint64_t base witness table accessor for Message in PgQuery_GroupingFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingFunc and conformance PgQuery_GroupingFunc, type metadata accessor for PgQuery_GroupingFunc, (uint64_t)&protocol conformance descriptor for PgQuery_GroupingFunc);
}

uint64_t base witness table accessor for Hashable in PgQuery_GroupingFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingFunc and conformance PgQuery_GroupingFunc, type metadata accessor for PgQuery_GroupingFunc, (uint64_t)&protocol conformance descriptor for PgQuery_GroupingFunc);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_GroupingFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingFunc and conformance PgQuery_GroupingFunc, type metadata accessor for PgQuery_GroupingFunc, (uint64_t)&protocol conformance descriptor for PgQuery_GroupingFunc);
}

uint64_t base witness table accessor for Equatable in PgQuery_Aggref()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Aggref and conformance PgQuery_Aggref, type metadata accessor for PgQuery_Aggref, (uint64_t)&protocol conformance descriptor for PgQuery_Aggref);
}

uint64_t base witness table accessor for Message in PgQuery_Aggref()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Aggref and conformance PgQuery_Aggref, type metadata accessor for PgQuery_Aggref, (uint64_t)&protocol conformance descriptor for PgQuery_Aggref);
}

uint64_t base witness table accessor for Hashable in PgQuery_Aggref()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Aggref and conformance PgQuery_Aggref, type metadata accessor for PgQuery_Aggref, (uint64_t)&protocol conformance descriptor for PgQuery_Aggref);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_Aggref()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Aggref and conformance PgQuery_Aggref, type metadata accessor for PgQuery_Aggref, (uint64_t)&protocol conformance descriptor for PgQuery_Aggref);
}

uint64_t base witness table accessor for Equatable in PgQuery_Param()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Param and conformance PgQuery_Param, type metadata accessor for PgQuery_Param, (uint64_t)&protocol conformance descriptor for PgQuery_Param);
}

uint64_t base witness table accessor for Message in PgQuery_Param()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Param and conformance PgQuery_Param, type metadata accessor for PgQuery_Param, (uint64_t)&protocol conformance descriptor for PgQuery_Param);
}

uint64_t base witness table accessor for Hashable in PgQuery_Param()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Param and conformance PgQuery_Param, type metadata accessor for PgQuery_Param, (uint64_t)&protocol conformance descriptor for PgQuery_Param);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_Param()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Param and conformance PgQuery_Param, type metadata accessor for PgQuery_Param, (uint64_t)&protocol conformance descriptor for PgQuery_Param);
}

uint64_t base witness table accessor for Equatable in PgQuery_Var()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Var and conformance PgQuery_Var, type metadata accessor for PgQuery_Var, (uint64_t)&protocol conformance descriptor for PgQuery_Var);
}

uint64_t base witness table accessor for Message in PgQuery_Var()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Var and conformance PgQuery_Var, type metadata accessor for PgQuery_Var, (uint64_t)&protocol conformance descriptor for PgQuery_Var);
}

uint64_t base witness table accessor for Hashable in PgQuery_Var()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Var and conformance PgQuery_Var, type metadata accessor for PgQuery_Var, (uint64_t)&protocol conformance descriptor for PgQuery_Var);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_Var()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Var and conformance PgQuery_Var, type metadata accessor for PgQuery_Var, (uint64_t)&protocol conformance descriptor for PgQuery_Var);
}

uint64_t base witness table accessor for Equatable in PgQuery_Expr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Expr and conformance PgQuery_Expr, type metadata accessor for PgQuery_Expr, (uint64_t)&protocol conformance descriptor for PgQuery_Expr);
}

uint64_t type metadata accessor for PgQuery_Expr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Expr);
}

uint64_t base witness table accessor for Message in PgQuery_Expr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Expr and conformance PgQuery_Expr, type metadata accessor for PgQuery_Expr, (uint64_t)&protocol conformance descriptor for PgQuery_Expr);
}

uint64_t base witness table accessor for Hashable in PgQuery_Expr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Expr and conformance PgQuery_Expr, type metadata accessor for PgQuery_Expr, (uint64_t)&protocol conformance descriptor for PgQuery_Expr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_Expr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Expr and conformance PgQuery_Expr, type metadata accessor for PgQuery_Expr, (uint64_t)&protocol conformance descriptor for PgQuery_Expr);
}

uint64_t base witness table accessor for Equatable in PgQuery_TableFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableFunc and conformance PgQuery_TableFunc, type metadata accessor for PgQuery_TableFunc, (uint64_t)&protocol conformance descriptor for PgQuery_TableFunc);
}

uint64_t base witness table accessor for Message in PgQuery_TableFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableFunc and conformance PgQuery_TableFunc, type metadata accessor for PgQuery_TableFunc, (uint64_t)&protocol conformance descriptor for PgQuery_TableFunc);
}

uint64_t base witness table accessor for Hashable in PgQuery_TableFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableFunc and conformance PgQuery_TableFunc, type metadata accessor for PgQuery_TableFunc, (uint64_t)&protocol conformance descriptor for PgQuery_TableFunc);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_TableFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableFunc and conformance PgQuery_TableFunc, type metadata accessor for PgQuery_TableFunc, (uint64_t)&protocol conformance descriptor for PgQuery_TableFunc);
}

uint64_t base witness table accessor for Equatable in PgQuery_RangeVar()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
}

uint64_t base witness table accessor for Message in PgQuery_RangeVar()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
}

uint64_t base witness table accessor for Hashable in PgQuery_RangeVar()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RangeVar()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, type metadata accessor for PgQuery_RangeVar, (uint64_t)&protocol conformance descriptor for PgQuery_RangeVar);
}

uint64_t base witness table accessor for Equatable in PgQuery_Alias()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, type metadata accessor for PgQuery_Alias, (uint64_t)&protocol conformance descriptor for PgQuery_Alias);
}

uint64_t base witness table accessor for Message in PgQuery_Alias()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, type metadata accessor for PgQuery_Alias, (uint64_t)&protocol conformance descriptor for PgQuery_Alias);
}

uint64_t base witness table accessor for Hashable in PgQuery_Alias()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, type metadata accessor for PgQuery_Alias, (uint64_t)&protocol conformance descriptor for PgQuery_Alias);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_Alias()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, type metadata accessor for PgQuery_Alias, (uint64_t)&protocol conformance descriptor for PgQuery_Alias);
}

uint64_t base witness table accessor for Equatable in PgQuery_IntList()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntList and conformance PgQuery_IntList, type metadata accessor for PgQuery_IntList, (uint64_t)&protocol conformance descriptor for PgQuery_IntList);
}

uint64_t base witness table accessor for Message in PgQuery_IntList()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntList and conformance PgQuery_IntList, type metadata accessor for PgQuery_IntList, (uint64_t)&protocol conformance descriptor for PgQuery_IntList);
}

uint64_t base witness table accessor for Hashable in PgQuery_IntList()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntList and conformance PgQuery_IntList, type metadata accessor for PgQuery_IntList, (uint64_t)&protocol conformance descriptor for PgQuery_IntList);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_IntList()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntList and conformance PgQuery_IntList, type metadata accessor for PgQuery_IntList, (uint64_t)&protocol conformance descriptor for PgQuery_IntList);
}

uint64_t base witness table accessor for Equatable in PgQuery_OidList()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OidList and conformance PgQuery_OidList, type metadata accessor for PgQuery_OidList, (uint64_t)&protocol conformance descriptor for PgQuery_OidList);
}

uint64_t base witness table accessor for Message in PgQuery_OidList()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OidList and conformance PgQuery_OidList, type metadata accessor for PgQuery_OidList, (uint64_t)&protocol conformance descriptor for PgQuery_OidList);
}

uint64_t base witness table accessor for Hashable in PgQuery_OidList()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OidList and conformance PgQuery_OidList, type metadata accessor for PgQuery_OidList, (uint64_t)&protocol conformance descriptor for PgQuery_OidList);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_OidList()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OidList and conformance PgQuery_OidList, type metadata accessor for PgQuery_OidList, (uint64_t)&protocol conformance descriptor for PgQuery_OidList);
}

uint64_t base witness table accessor for Equatable in PgQuery_List()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_List and conformance PgQuery_List, type metadata accessor for PgQuery_List, (uint64_t)&protocol conformance descriptor for PgQuery_List);
}

uint64_t base witness table accessor for Message in PgQuery_List()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_List and conformance PgQuery_List, type metadata accessor for PgQuery_List, (uint64_t)&protocol conformance descriptor for PgQuery_List);
}

uint64_t base witness table accessor for Hashable in PgQuery_List()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_List and conformance PgQuery_List, type metadata accessor for PgQuery_List, (uint64_t)&protocol conformance descriptor for PgQuery_List);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_List()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_List and conformance PgQuery_List, type metadata accessor for PgQuery_List, (uint64_t)&protocol conformance descriptor for PgQuery_List);
}

uint64_t base witness table accessor for Equatable in PgQuery_Null()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Null and conformance PgQuery_Null, type metadata accessor for PgQuery_Null, (uint64_t)&protocol conformance descriptor for PgQuery_Null);
}

uint64_t type metadata accessor for PgQuery_Null(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Null);
}

uint64_t type metadata accessor for PgQuery_Node._StorageClass(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t base witness table accessor for Message in PgQuery_Null()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Null and conformance PgQuery_Null, type metadata accessor for PgQuery_Null, (uint64_t)&protocol conformance descriptor for PgQuery_Null);
}

uint64_t base witness table accessor for Hashable in PgQuery_Null()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Null and conformance PgQuery_Null, type metadata accessor for PgQuery_Null, (uint64_t)&protocol conformance descriptor for PgQuery_Null);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_Null()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Null and conformance PgQuery_Null, type metadata accessor for PgQuery_Null, (uint64_t)&protocol conformance descriptor for PgQuery_Null);
}

uint64_t base witness table accessor for Equatable in PgQuery_BitString()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BitString and conformance PgQuery_BitString, type metadata accessor for PgQuery_BitString, (uint64_t)&protocol conformance descriptor for PgQuery_BitString);
}

uint64_t base witness table accessor for Message in PgQuery_BitString()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BitString and conformance PgQuery_BitString, type metadata accessor for PgQuery_BitString, (uint64_t)&protocol conformance descriptor for PgQuery_BitString);
}

uint64_t base witness table accessor for Hashable in PgQuery_BitString()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BitString and conformance PgQuery_BitString, type metadata accessor for PgQuery_BitString, (uint64_t)&protocol conformance descriptor for PgQuery_BitString);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_BitString()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BitString and conformance PgQuery_BitString, type metadata accessor for PgQuery_BitString, (uint64_t)&protocol conformance descriptor for PgQuery_BitString);
}

uint64_t base witness table accessor for Equatable in PgQuery_String()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_String and conformance PgQuery_String, type metadata accessor for PgQuery_String, (uint64_t)&protocol conformance descriptor for PgQuery_String);
}

uint64_t base witness table accessor for Message in PgQuery_String()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_String and conformance PgQuery_String, type metadata accessor for PgQuery_String, (uint64_t)&protocol conformance descriptor for PgQuery_String);
}

uint64_t base witness table accessor for Hashable in PgQuery_String()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_String and conformance PgQuery_String, type metadata accessor for PgQuery_String, (uint64_t)&protocol conformance descriptor for PgQuery_String);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_String()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_String and conformance PgQuery_String, type metadata accessor for PgQuery_String, (uint64_t)&protocol conformance descriptor for PgQuery_String);
}

uint64_t base witness table accessor for Equatable in PgQuery_Float()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Float and conformance PgQuery_Float, type metadata accessor for PgQuery_Float, (uint64_t)&protocol conformance descriptor for PgQuery_Float);
}

uint64_t base witness table accessor for Message in PgQuery_Float()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Float and conformance PgQuery_Float, type metadata accessor for PgQuery_Float, (uint64_t)&protocol conformance descriptor for PgQuery_Float);
}

uint64_t base witness table accessor for Hashable in PgQuery_Float()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Float and conformance PgQuery_Float, type metadata accessor for PgQuery_Float, (uint64_t)&protocol conformance descriptor for PgQuery_Float);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_Float()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Float and conformance PgQuery_Float, type metadata accessor for PgQuery_Float, (uint64_t)&protocol conformance descriptor for PgQuery_Float);
}

uint64_t base witness table accessor for Equatable in PgQuery_Integer()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Integer and conformance PgQuery_Integer, type metadata accessor for PgQuery_Integer, (uint64_t)&protocol conformance descriptor for PgQuery_Integer);
}

uint64_t base witness table accessor for Message in PgQuery_Integer()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Integer and conformance PgQuery_Integer, type metadata accessor for PgQuery_Integer, (uint64_t)&protocol conformance descriptor for PgQuery_Integer);
}

uint64_t base witness table accessor for Hashable in PgQuery_Integer()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Integer and conformance PgQuery_Integer, type metadata accessor for PgQuery_Integer, (uint64_t)&protocol conformance descriptor for PgQuery_Integer);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_Integer()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Integer and conformance PgQuery_Integer, type metadata accessor for PgQuery_Integer, (uint64_t)&protocol conformance descriptor for PgQuery_Integer);
}

uint64_t base witness table accessor for Equatable in PgQuery_Node()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
}

uint64_t base witness table accessor for Message in PgQuery_Node()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
}

uint64_t base witness table accessor for Hashable in PgQuery_Node()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_Node()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, type metadata accessor for PgQuery_Node, (uint64_t)&protocol conformance descriptor for PgQuery_Node);
}

uint64_t base witness table accessor for Equatable in PgQuery_ScanResult()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScanResult and conformance PgQuery_ScanResult, type metadata accessor for PgQuery_ScanResult, (uint64_t)&protocol conformance descriptor for PgQuery_ScanResult);
}

uint64_t base witness table accessor for Message in PgQuery_ScanResult()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScanResult and conformance PgQuery_ScanResult, type metadata accessor for PgQuery_ScanResult, (uint64_t)&protocol conformance descriptor for PgQuery_ScanResult);
}

uint64_t base witness table accessor for Hashable in PgQuery_ScanResult()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScanResult and conformance PgQuery_ScanResult, type metadata accessor for PgQuery_ScanResult, (uint64_t)&protocol conformance descriptor for PgQuery_ScanResult);
}

uint64_t base witness table accessor for Equatable in PgQuery_ParseResult()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParseResult and conformance PgQuery_ParseResult, type metadata accessor for PgQuery_ParseResult, (uint64_t)&protocol conformance descriptor for PgQuery_ParseResult);
}

uint64_t base witness table accessor for Message in PgQuery_ParseResult()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParseResult and conformance PgQuery_ParseResult, type metadata accessor for PgQuery_ParseResult, (uint64_t)&protocol conformance descriptor for PgQuery_ParseResult);
}

uint64_t base witness table accessor for Hashable in PgQuery_ParseResult()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParseResult and conformance PgQuery_ParseResult, type metadata accessor for PgQuery_ParseResult, (uint64_t)&protocol conformance descriptor for PgQuery_ParseResult);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_Token()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_Token] and conformance [A], &demangling cache variable for type metadata for [PgQuery_Token]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_KeywordKind()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_KeywordKind] and conformance [A], &demangling cache variable for type metadata for [PgQuery_KeywordKind]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_LockTupleMode()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_LockTupleMode] and conformance [A], &demangling cache variable for type metadata for [PgQuery_LockTupleMode]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_LockWaitPolicy()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_LockWaitPolicy] and conformance [A], &demangling cache variable for type metadata for [PgQuery_LockWaitPolicy]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_LockClauseStrength()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_LockClauseStrength] and conformance [A], &demangling cache variable for type metadata for [PgQuery_LockClauseStrength]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_LimitOption()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_LimitOption] and conformance [A], &demangling cache variable for type metadata for [PgQuery_LimitOption]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_OnConflictAction()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_OnConflictAction] and conformance [A], &demangling cache variable for type metadata for [PgQuery_OnConflictAction]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_SetOpStrategy()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_SetOpStrategy] and conformance [A], &demangling cache variable for type metadata for [PgQuery_SetOpStrategy]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_SetOpCmd()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_SetOpCmd] and conformance [A], &demangling cache variable for type metadata for [PgQuery_SetOpCmd]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_AggSplit()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_AggSplit] and conformance [A], &demangling cache variable for type metadata for [PgQuery_AggSplit]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_AggStrategy()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_AggStrategy] and conformance [A], &demangling cache variable for type metadata for [PgQuery_AggStrategy]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_JoinType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_JoinType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_JoinType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_CmdType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_CmdType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_CmdType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_BoolTestType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_BoolTestType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_BoolTestType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_NullTestType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_NullTestType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_NullTestType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_XmlOptionType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_XmlOptionType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_XmlOptionType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_XmlExprOp()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_XmlExprOp] and conformance [A], &demangling cache variable for type metadata for [PgQuery_XmlExprOp]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_SQLValueFunctionOp()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_SQLValueFunctionOp] and conformance [A], &demangling cache variable for type metadata for [PgQuery_SQLValueFunctionOp]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_MinMaxOp()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_MinMaxOp] and conformance [A], &demangling cache variable for type metadata for [PgQuery_MinMaxOp]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_RowCompareType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_RowCompareType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_RowCompareType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_SubLinkType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_SubLinkType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_SubLinkType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_BoolExprType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_BoolExprType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_BoolExprType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_CoercionForm()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_CoercionForm] and conformance [A], &demangling cache variable for type metadata for [PgQuery_CoercionForm]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_CoercionContext()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_CoercionContext] and conformance [A], &demangling cache variable for type metadata for [PgQuery_CoercionContext]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_ParamKind()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_ParamKind] and conformance [A], &demangling cache variable for type metadata for [PgQuery_ParamKind]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_OnCommitAction()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_OnCommitAction] and conformance [A], &demangling cache variable for type metadata for [PgQuery_OnCommitAction]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_AlterSubscriptionType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_AlterSubscriptionType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_AlterSubscriptionType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_AlterTSConfigType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_AlterTSConfigType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_AlterTSConfigType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_ReindexObjectType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_ReindexObjectType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_ReindexObjectType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_DiscardMode()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_DiscardMode] and conformance [A], &demangling cache variable for type metadata for [PgQuery_DiscardMode]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_ClusterOption()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_ClusterOption] and conformance [A], &demangling cache variable for type metadata for [PgQuery_ClusterOption]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_ViewCheckOption()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_ViewCheckOption] and conformance [A], &demangling cache variable for type metadata for [PgQuery_ViewCheckOption]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_TransactionStmtKind()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_TransactionStmtKind] and conformance [A], &demangling cache variable for type metadata for [PgQuery_TransactionStmtKind]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_FunctionParameterMode()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_FunctionParameterMode] and conformance [A], &demangling cache variable for type metadata for [PgQuery_FunctionParameterMode]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_FetchDirection()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_FetchDirection] and conformance [A], &demangling cache variable for type metadata for [PgQuery_FetchDirection]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_RoleStmtType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_RoleStmtType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_RoleStmtType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_ImportForeignSchemaType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_ImportForeignSchemaType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_ImportForeignSchemaType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_ConstrType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_ConstrType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_ConstrType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_VariableSetKind()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_VariableSetKind] and conformance [A], &demangling cache variable for type metadata for [PgQuery_VariableSetKind]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_GrantTargetType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_GrantTargetType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_GrantTargetType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_AlterTableType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_AlterTableType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_AlterTableType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_DropBehavior()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_DropBehavior] and conformance [A], &demangling cache variable for type metadata for [PgQuery_DropBehavior]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_ObjectType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_ObjectType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_ObjectType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_SetOperation()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_SetOperation] and conformance [A], &demangling cache variable for type metadata for [PgQuery_SetOperation]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_CTEMaterialize()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_CTEMaterialize] and conformance [A], &demangling cache variable for type metadata for [PgQuery_CTEMaterialize]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_GroupingSetKind()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_GroupingSetKind] and conformance [A], &demangling cache variable for type metadata for [PgQuery_GroupingSetKind]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_WCOKind()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_WCOKind] and conformance [A], &demangling cache variable for type metadata for [PgQuery_WCOKind]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_RTEKind()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_RTEKind] and conformance [A], &demangling cache variable for type metadata for [PgQuery_RTEKind]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_PartitionRangeDatumKind()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_PartitionRangeDatumKind] and conformance [A], &demangling cache variable for type metadata for [PgQuery_PartitionRangeDatumKind]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_DefElemAction()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_DefElemAction] and conformance [A], &demangling cache variable for type metadata for [PgQuery_DefElemAction]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_TableLikeOption()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_TableLikeOption] and conformance [A], &demangling cache variable for type metadata for [PgQuery_TableLikeOption]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_RoleSpecType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_RoleSpecType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_RoleSpecType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_A_Expr_Kind()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_A_Expr_Kind] and conformance [A], &demangling cache variable for type metadata for [PgQuery_A_Expr_Kind]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_SortByNulls()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_SortByNulls] and conformance [A], &demangling cache variable for type metadata for [PgQuery_SortByNulls]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_SortByDir()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_SortByDir] and conformance [A], &demangling cache variable for type metadata for [PgQuery_SortByDir]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_QuerySource()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_QuerySource] and conformance [A], &demangling cache variable for type metadata for [PgQuery_QuerySource]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_OverridingKind()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_OverridingKind] and conformance [A], &demangling cache variable for type metadata for [PgQuery_OverridingKind]);
}

uint64_t lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x193FED7A0](MEMORY[0x1E0DEAF50], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ScanResult()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScanResult and conformance PgQuery_ScanResult, type metadata accessor for PgQuery_ScanResult, (uint64_t)&protocol conformance descriptor for PgQuery_ScanResult);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ParseResult()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParseResult and conformance PgQuery_ParseResult, type metadata accessor for PgQuery_ParseResult, (uint64_t)&protocol conformance descriptor for PgQuery_ParseResult);
}

uint64_t specialized PgQuery_Token.init(rawValue:)(uint64_t result)
{
  uint64_t v1;

  switch(result)
  {
    case 0:
      return result;
    case 37:
      result = 1;
      break;
    case 40:
      result = 2;
      break;
    case 41:
      result = 3;
      break;
    case 42:
      result = 4;
      break;
    case 43:
      result = 5;
      break;
    case 44:
      result = 6;
      break;
    case 45:
      result = 7;
      break;
    case 46:
      result = 8;
      break;
    case 47:
      result = 9;
      break;
    case 58:
      result = 10;
      break;
    case 59:
      result = 11;
      break;
    case 60:
      result = 12;
      break;
    case 61:
      result = 13;
      break;
    case 62:
      result = 14;
      break;
    case 63:
      result = 15;
      break;
    case 91:
      result = 16;
      break;
    case 92:
      result = 17;
      break;
    case 93:
      result = 18;
      break;
    case 94:
      result = 19;
      break;
    case 258:
      result = 20;
      break;
    case 259:
      result = 21;
      break;
    case 260:
      result = 22;
      break;
    case 261:
      result = 23;
      break;
    case 262:
      result = 24;
      break;
    case 263:
      result = 25;
      break;
    case 264:
      result = 26;
      break;
    case 265:
      result = 27;
      break;
    case 266:
      result = 28;
      break;
    case 267:
      result = 29;
      break;
    case 268:
      result = 30;
      break;
    case 269:
      result = 31;
      break;
    case 270:
      result = 32;
      break;
    case 271:
      result = 33;
      break;
    case 272:
      result = 34;
      break;
    case 273:
      result = 35;
      break;
    case 274:
      result = 36;
      break;
    case 275:
      result = 37;
      break;
    case 276:
      result = 38;
      break;
    case 277:
      result = 39;
      break;
    case 278:
      result = 40;
      break;
    case 279:
      result = 41;
      break;
    case 280:
      result = 42;
      break;
    case 281:
      result = 43;
      break;
    case 282:
      result = 44;
      break;
    case 283:
      result = 45;
      break;
    case 284:
      result = 46;
      break;
    case 285:
      result = 47;
      break;
    case 286:
      result = 48;
      break;
    case 287:
      result = 49;
      break;
    case 288:
      result = 50;
      break;
    case 289:
      result = 51;
      break;
    case 290:
      result = 52;
      break;
    case 291:
      result = 53;
      break;
    case 292:
      result = 54;
      break;
    case 293:
      result = 55;
      break;
    case 294:
      result = 56;
      break;
    case 295:
      result = 57;
      break;
    case 296:
      result = 58;
      break;
    case 297:
      result = 59;
      break;
    case 298:
      result = 60;
      break;
    case 299:
      result = 61;
      break;
    case 300:
      result = 62;
      break;
    case 301:
      result = 63;
      break;
    case 302:
      result = 64;
      break;
    case 303:
      result = 65;
      break;
    case 304:
      result = 66;
      break;
    case 305:
      result = 67;
      break;
    case 306:
      result = 68;
      break;
    case 307:
      result = 69;
      break;
    case 308:
      result = 70;
      break;
    case 309:
      result = 71;
      break;
    case 310:
      result = 72;
      break;
    case 311:
      result = 73;
      break;
    case 312:
      result = 74;
      break;
    case 313:
      result = 75;
      break;
    case 314:
      result = 76;
      break;
    case 315:
      result = 77;
      break;
    case 316:
      result = 78;
      break;
    case 317:
      result = 79;
      break;
    case 318:
      result = 80;
      break;
    case 319:
      result = 81;
      break;
    case 320:
      result = 82;
      break;
    case 321:
      result = 83;
      break;
    case 322:
      result = 84;
      break;
    case 323:
      result = 85;
      break;
    case 324:
      result = 86;
      break;
    case 325:
      result = 87;
      break;
    case 326:
      result = 88;
      break;
    case 327:
      result = 89;
      break;
    case 328:
      result = 90;
      break;
    case 329:
      result = 91;
      break;
    case 330:
      result = 92;
      break;
    case 331:
      result = 93;
      break;
    case 332:
      result = 94;
      break;
    case 333:
      result = 95;
      break;
    case 334:
      result = 96;
      break;
    case 335:
      result = 97;
      break;
    case 336:
      result = 98;
      break;
    case 337:
      result = 99;
      break;
    case 338:
      result = 100;
      break;
    case 339:
      result = 101;
      break;
    case 340:
      result = 102;
      break;
    case 341:
      result = 103;
      break;
    case 342:
      result = 104;
      break;
    case 343:
      result = 105;
      break;
    case 344:
      result = 106;
      break;
    case 345:
      result = 107;
      break;
    case 346:
      result = 108;
      break;
    case 347:
      result = 109;
      break;
    case 348:
      result = 110;
      break;
    case 349:
      result = 111;
      break;
    case 350:
      result = 112;
      break;
    case 351:
      result = 113;
      break;
    case 352:
      result = 114;
      break;
    case 353:
      result = 115;
      break;
    case 354:
      result = 116;
      break;
    case 355:
      result = 117;
      break;
    case 356:
      result = 118;
      break;
    case 357:
      result = 119;
      break;
    case 358:
      result = 120;
      break;
    case 359:
      result = 121;
      break;
    case 360:
      result = 122;
      break;
    case 361:
      result = 123;
      break;
    case 362:
      result = 124;
      break;
    case 363:
      result = 125;
      break;
    case 364:
      result = 126;
      break;
    case 365:
      result = 127;
      break;
    default:
      v1 = result - 366;
      result = 128;
      switch(v1)
      {
        case 0:
          return result;
        case 1:
          result = 129;
          break;
        case 2:
          result = 130;
          break;
        case 3:
          result = 131;
          break;
        case 4:
          result = 132;
          break;
        case 5:
          result = 133;
          break;
        case 6:
          result = 134;
          break;
        case 7:
          result = 135;
          break;
        case 8:
          result = 136;
          break;
        case 9:
          result = 137;
          break;
        case 10:
          result = 138;
          break;
        case 11:
          result = 139;
          break;
        case 12:
          result = 140;
          break;
        case 13:
          result = 141;
          break;
        case 14:
          result = 142;
          break;
        case 15:
          result = 143;
          break;
        case 16:
          result = 144;
          break;
        case 17:
          result = 145;
          break;
        case 18:
          result = 146;
          break;
        case 19:
          result = 147;
          break;
        case 20:
          result = 148;
          break;
        case 21:
          result = 149;
          break;
        case 22:
          result = 150;
          break;
        case 23:
          result = 151;
          break;
        case 24:
          result = 152;
          break;
        case 25:
          result = 153;
          break;
        case 26:
          result = 154;
          break;
        case 27:
          result = 155;
          break;
        case 28:
          result = 156;
          break;
        case 29:
          result = 157;
          break;
        case 30:
          result = 158;
          break;
        case 31:
          result = 159;
          break;
        case 32:
          result = 160;
          break;
        case 33:
          result = 161;
          break;
        case 34:
          result = 162;
          break;
        case 35:
          result = 163;
          break;
        case 36:
          result = 164;
          break;
        case 37:
          result = 165;
          break;
        case 38:
          result = 166;
          break;
        case 39:
          result = 167;
          break;
        case 40:
          result = 168;
          break;
        case 41:
          result = 169;
          break;
        case 42:
          result = 170;
          break;
        case 43:
          result = 171;
          break;
        case 44:
          result = 172;
          break;
        case 45:
          result = 173;
          break;
        case 46:
          result = 174;
          break;
        case 47:
          result = 175;
          break;
        case 48:
          result = 176;
          break;
        case 49:
          result = 177;
          break;
        case 50:
          result = 178;
          break;
        case 51:
          result = 179;
          break;
        case 52:
          result = 180;
          break;
        case 53:
          result = 181;
          break;
        case 54:
          result = 182;
          break;
        case 55:
          result = 183;
          break;
        case 56:
          result = 184;
          break;
        case 57:
          result = 185;
          break;
        case 58:
          result = 186;
          break;
        case 59:
          result = 187;
          break;
        case 60:
          result = 188;
          break;
        case 61:
          result = 189;
          break;
        case 62:
          result = 190;
          break;
        case 63:
          result = 191;
          break;
        default:
          result = 448;
          break;
      }
      break;
  }
  return result;
}

uint64_t specialized static PgQuery_AlterTableSpaceOptionsStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  uint64_t AlterTableSpaceOptionsStmt;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  v11 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16)) & 1) != 0
      && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
    {
      AlterTableSpaceOptionsStmt = type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt(0);
      v14 = a1 + *(int *)(AlterTableSpaceOptionsStmt + 28);
      v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v15(v10, v14, v4);
      v15(v8, a2 + *(int *)(AlterTableSpaceOptionsStmt + 28), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
    }
    else
    {
      v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_AlterExtensionContentsStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AlterExtensionContentsStmt;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  char v46;
  void (*v47)(char *, uint64_t, uint64_t);
  void (*v48)(char *, uint64_t);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v50 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v12 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v54 = (uint64_t)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v14);
  v56 = (uint64_t)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v55 = (uint64_t)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v57 = (uint64_t)&v50 - v19;
  AlterExtensionContentsStmt = type metadata accessor for PgQuery_AlterExtensionContentsStmt(0);
  v21 = a1;
  v22 = *(int *)(AlterExtensionContentsStmt + 20);
  v23 = *(_QWORD *)(a1 + v22);
  v24 = *(_QWORD *)(a2 + v22);
  if (v23 == v24)
    goto LABEL_19;
  v52 = v21;
  v53 = a2;
  v25 = *(_QWORD *)(v23 + 16) == *(_QWORD *)(v24 + 16) && *(_QWORD *)(v23 + 24) == *(_QWORD *)(v24 + 24);
  if (v25 || (v26 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(_DWORD *)(v23 + 32) != *(_DWORD *)(v24 + 32))
      goto LABEL_24;
    v50 = v5;
    v51 = v8;
    v27 = *(_QWORD *)(v24 + 40);
    v28 = *(unsigned __int8 *)(v24 + 48);
    v29 = destructiveProjectEnumData for StorableValue(*(_QWORD *)(v23 + 40), *(unsigned __int8 *)(v23 + 48));
    if (v29 != destructiveProjectEnumData for StorableValue(v27, v28))
      goto LABEL_24;
    v30 = v23
        + OBJC_IVAR____TtCV14BiomeSQLParser34PgQuery_AlterExtensionContentsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
    v31 = v57;
    outlined init with copy of PgQuery_Alias?(v24+ OBJC_IVAR____TtCV14BiomeSQLParser34PgQuery_AlterExtensionContentsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, v57, &demangling cache variable for type metadata for PgQuery_Node?);
    v32 = v56;
    v33 = v56 + *(int *)(v14 + 48);
    outlined init with copy of PgQuery_Alias?(v30, v56, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined init with copy of PgQuery_Alias?(v31, v33, &demangling cache variable for type metadata for PgQuery_Node?);
    v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    if (v34(v32, 1, Node) == 1)
    {
      v35 = v34(v33, 1, Node);
      swift_retain();
      swift_retain();
      v8 = v51;
      a2 = v53;
      if (v35 == 1)
      {
        outlined destroy of (key: String, value: StorableValue)(v56, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v57, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_18:
        swift_release();
        swift_release();
        v5 = v50;
        v21 = v52;
LABEL_19:
        v47 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v47(v10, v21, v4);
        v47(v8, a2, v4);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v26 = dispatch thunk of static Equatable.== infix(_:_:)();
        v48 = *(void (**)(char *, uint64_t))(v5 + 8);
        v48(v8, v4);
        v48(v10, v4);
        return v26 & 1;
      }
      v38 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
      v39 = v56;
    }
    else
    {
      v36 = v55;
      outlined init with copy of PgQuery_Alias?(v32, v55, &demangling cache variable for type metadata for PgQuery_Node?);
      v37 = v34(v33, 1, Node);
      v8 = v51;
      a2 = v53;
      if (v37 == 1)
      {
        swift_retain();
        swift_retain();
        v38 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
        v39 = v56;
      }
      else
      {
        v40 = v54;
        outlined init with take of PgQuery_OidList(v33, v54, type metadata accessor for PgQuery_Node);
        v41 = *(int *)(Node + 20);
        v42 = *(_QWORD *)(v36 + v41);
        v43 = *(_QWORD *)(v40 + v41);
        swift_retain();
        swift_retain();
        if (v42 == v43
          || (swift_retain(),
              swift_retain(),
              v44 = closure #1 in static PgQuery_Node.== infix(_:_:)(v42, v43),
              swift_release(),
              swift_release(),
              v44))
        {
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v45 = v55;
          v46 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_Node);
          outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_Node);
          outlined destroy of (key: String, value: StorableValue)(v56, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined destroy of (key: String, value: StorableValue)(v57, &demangling cache variable for type metadata for PgQuery_Node?);
          if ((v46 & 1) != 0)
            goto LABEL_18;
          goto LABEL_23;
        }
        outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_Node);
        v38 = &demangling cache variable for type metadata for PgQuery_Node?;
        v36 = v55;
        v39 = v56;
      }
      outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
    }
    outlined destroy of (key: String, value: StorableValue)(v39, v38);
    outlined destroy of (key: String, value: StorableValue)(v57, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_23:
    swift_release();
    swift_release();
LABEL_24:
    v26 = 0;
  }
  return v26 & 1;
}

uint64_t specialized static PgQuery_AlterDefaultPrivilegesStmt.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t GrantStmt;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t AlterDefaultPrivilegesStmt;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  uint64_t v35;
  char *v36;
  char v37;
  void (*v38)(char *, uint64_t);
  uint64_t *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  unsigned __int8 *v55;
  char *v56;
  char *v57;
  uint64_t v58;

  v4 = type metadata accessor for UnknownStorage();
  v58 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v57 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v56 = (char *)&v51 - v7;
  GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
  v9 = *(_QWORD *)(GrantStmt - 8);
  MEMORY[0x1E0C80A78](GrantStmt);
  v55 = (unsigned __int8 *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_GrantStmt?, PgQuery_GrantStmt?));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_GrantStmt?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (unsigned __int8 *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v51 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v51 - v21;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0)
    goto LABEL_12;
  v53 = v4;
  AlterDefaultPrivilegesStmt = type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt(0);
  v24 = *(int *)(AlterDefaultPrivilegesStmt + 24);
  v54 = a1;
  v25 = (uint64_t)a1 + v24;
  v26 = AlterDefaultPrivilegesStmt;
  outlined init with copy of PgQuery_Alias?(v25, (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
  v27 = *(int *)(v26 + 24);
  v52 = a2;
  outlined init with copy of PgQuery_Alias?((uint64_t)a2 + v27, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v28, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, GrantStmt) != 1)
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
    if (v29(v28, 1, GrantStmt) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_GrantStmt);
      goto LABEL_8;
    }
    v41 = v55;
    outlined init with take of PgQuery_OidList(v28, (uint64_t)v55, type metadata accessor for PgQuery_GrantStmt);
    v30 = v54;
    if (*v17 != *v41)
      goto LABEL_10;
    v43 = *((_QWORD *)v41 + 1);
    if (v41[16] == 1)
      __asm { BR              X11 }
    if (*((_QWORD *)v17 + 1) != v43)
      goto LABEL_10;
    v44 = *((_QWORD *)v17 + 3);
    v45 = v17[32];
    v51 = *((_QWORD *)v41 + 3);
    v46 = v41[32];
    v47 = destructiveProjectEnumData for StorableValue(v44, v45);
    if (v47 != destructiveProjectEnumData for StorableValue(v51, v46)
      || (specialized static Array<A>.== infix(_:_:)(*((_QWORD *)v17 + 5), *((_QWORD *)v41 + 5)) & 1) == 0
      || (specialized static Array<A>.== infix(_:_:)(*((_QWORD *)v17 + 6), *((_QWORD *)v41 + 6)) & 1) == 0
      || (specialized static Array<A>.== infix(_:_:)(*((_QWORD *)v17 + 7), *((_QWORD *)v41 + 7)) & 1) == 0
      || v17[64] != v41[64])
    {
      goto LABEL_10;
    }
    v48 = *((_QWORD *)v17 + 9);
    v49 = *((_QWORD *)v41 + 9);
    if (v41[80] == 1)
    {
      if (v49)
      {
        if (v49 == 1)
        {
          if (v48 == 1)
            goto LABEL_32;
        }
        else if (v48 == 2)
        {
          goto LABEL_32;
        }
LABEL_10:
        outlined destroy of PgQuery_Alias((uint64_t)v41, type metadata accessor for PgQuery_GrantStmt);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
        outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_GrantStmt);
        v40 = (uint64_t)v13;
        v39 = &demangling cache variable for type metadata for PgQuery_GrantStmt?;
        goto LABEL_11;
      }
      if (v48)
        goto LABEL_10;
    }
    else if (v48 != v49)
    {
      goto LABEL_10;
    }
LABEL_32:
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v50 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of PgQuery_Alias((uint64_t)v41, type metadata accessor for PgQuery_GrantStmt);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
    outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_GrantStmt);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
    if ((v50 & 1) != 0)
      goto LABEL_5;
LABEL_12:
    v37 = 0;
    return v37 & 1;
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
  if (v29(v28, 1, GrantStmt) != 1)
  {
LABEL_8:
    v39 = &demangling cache variable for type metadata for (PgQuery_GrantStmt?, PgQuery_GrantStmt?);
    v40 = (uint64_t)v13;
LABEL_11:
    outlined destroy of (key: String, value: StorableValue)(v40, v39);
    goto LABEL_12;
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
  v30 = v54;
LABEL_5:
  v31 = (uint64_t)v30 + *(int *)(v26 + 20);
  v32 = v58;
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v58 + 16);
  v34 = v56;
  v35 = v53;
  v33(v56, v31, v53);
  v36 = v57;
  v33(v57, (uint64_t)v52 + *(int *)(v26 + 20), v35);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v37 = dispatch thunk of static Equatable.== infix(_:_:)();
  v38 = *(void (**)(char *, uint64_t))(v32 + 8);
  v38(v36, v35);
  v38(v34, v35);
  return v37 & 1;
}

uint64_t specialized static PgQuery_AlterTSConfigurationStmt.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t AlterTSConfigurationStmt;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  v11 = *a2;
  if (*((_BYTE *)a2 + 8) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)a1 == v11
    && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 16), a2[2]) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 24), a2[3]) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 32), a2[4]) & 1) != 0
    && *(unsigned __int8 *)(a1 + 40) == *((unsigned __int8 *)a2 + 40)
    && *(unsigned __int8 *)(a1 + 41) == *((unsigned __int8 *)a2 + 41)
    && *(unsigned __int8 *)(a1 + 42) == *((unsigned __int8 *)a2 + 42))
  {
    AlterTSConfigurationStmt = type metadata accessor for PgQuery_AlterTSConfigurationStmt(0);
    v13 = a1 + *(int *)(AlterTSConfigurationStmt + 44);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v14(v10, v13, v4);
    v14(v8, (uint64_t)a2 + *(int *)(AlterTSConfigurationStmt + 44), v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t specialized static PgQuery_ImportForeignSchemaStmt.== infix(_:_:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  uint64_t ImportForeignSchemaStmt;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v20 - v9;
  v11 = *a1 == *(_QWORD *)a2 && a1[1] == *(_QWORD *)(a2 + 8);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v13 = a1[2] == *(_QWORD *)(a2 + 16) && a1[3] == *(_QWORD *)(a2 + 24);
    if (v13 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (a1[4] == *(_QWORD *)(a2 + 32) && a1[5] == *(_QWORD *)(a2 + 40)
        || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        v14 = *(_QWORD *)(a2 + 48);
        if (*(_BYTE *)(a2 + 56) == 1)
          __asm { BR              X11 }
        if (a1[6] == v14
          && (specialized static Array<A>.== infix(_:_:)(a1[8], *(_QWORD *)(a2 + 64)) & 1) != 0
          && (specialized static Array<A>.== infix(_:_:)(a1[9], *(_QWORD *)(a2 + 72)) & 1) != 0)
        {
          ImportForeignSchemaStmt = type metadata accessor for PgQuery_ImportForeignSchemaStmt(0);
          v16 = (char *)a1 + *(int *)(ImportForeignSchemaStmt + 40);
          v17 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
          v17(v10, v16, v4);
          v17(v8, (char *)(a2 + *(int *)(ImportForeignSchemaStmt + 40)), v4);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v12 = dispatch thunk of static Equatable.== infix(_:_:)();
          v18 = *(void (**)(char *, uint64_t))(v5 + 8);
          v18(v8, v4);
          v18(v10, v4);
        }
        else
        {
          v12 = 0;
        }
      }
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_CreateForeignServerStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  BOOL v13;
  uint64_t ForeignServerStmt;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v13 = *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
    if (v13 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32) && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40)
        || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48) && *(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56)
          || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          if (*(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64)
            && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 72), *(_QWORD *)(a2 + 72)) & 1) != 0)
          {
            ForeignServerStmt = type metadata accessor for PgQuery_CreateForeignServerStmt(0);
            v15 = a1 + *(int *)(ForeignServerStmt + 40);
            v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
            v16(v10, v15, v4);
            v16(v8, a2 + *(int *)(ForeignServerStmt + 40), v4);
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
            v12 = dispatch thunk of static Equatable.== infix(_:_:)();
            v17 = *(void (**)(char *, uint64_t))(v5 + 8);
            v17(v8, v4);
            v17(v10, v4);
          }
          else
          {
            v12 = 0;
          }
        }
      }
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_CreateForeignTableStmt.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t PartitionBoundSpec;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t RangeVar;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t Stmt;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t ForeignTableStmt;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  _QWORD *v50;
  _QWORD *v51;
  char v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  char *v59;
  char *v60;
  void (*v61)(char *, uint64_t);
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t, uint64_t);
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t (*v96)(uint64_t, uint64_t, uint64_t);
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t (*v104)(uint64_t, uint64_t, uint64_t);
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t (*v113)(uint64_t, uint64_t, uint64_t);
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  int v135;
  int v136;
  char v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t TypeName;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t PartitionSpec;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;

  v173 = a1;
  v174 = a2;
  v170 = type metadata accessor for UnknownStorage();
  v166 = *(_QWORD *)(v170 - 8);
  v2 = MEMORY[0x1E0C80A78](v170);
  v165 = (char *)&v138 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v164 = (char *)&v138 - v4;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v144 = *(_QWORD *)(TypeName - 8);
  MEMORY[0x1E0C80A78](TypeName);
  v140 = (uint64_t)&v138 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
  MEMORY[0x1E0C80A78](v143);
  v146 = (uint64_t)&v138 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v141 = (uint64_t)&v138 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v148 = (uint64_t)&v138 - v10;
  PartitionSpec = type metadata accessor for PgQuery_PartitionSpec(0);
  v151 = *(_QWORD *)(PartitionSpec - 8);
  MEMORY[0x1E0C80A78](PartitionSpec);
  v142 = (uint64_t)&v138 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_PartitionSpec?, PgQuery_PartitionSpec?));
  MEMORY[0x1E0C80A78](v150);
  v153 = (uint64_t)&v138 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v147 = (uint64_t)&v138 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v155 = (uint64_t)&v138 - v16;
  PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  v157 = *(_QWORD *)(PartitionBoundSpec - 8);
  v158 = PartitionBoundSpec;
  MEMORY[0x1E0C80A78](PartitionBoundSpec);
  v149 = (uint64_t)&v138 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_PartitionBoundSpec?, PgQuery_PartitionBoundSpec?));
  MEMORY[0x1E0C80A78](v156);
  v159 = (uint64_t)&v138 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v154 = (uint64_t)&v138 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v160 = (uint64_t)&v138 - v23;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v167 = *(_QWORD *)(RangeVar - 8);
  v168 = RangeVar;
  MEMORY[0x1E0C80A78](RangeVar);
  v161 = (uint64_t)&v138 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1E0C80A78](v26);
  v169 = (uint64_t)&v138 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v29 = MEMORY[0x1E0C80A78](v28);
  v162 = (uint64_t)&v138 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v171 = (uint64_t)&v138 - v31;
  Stmt = type metadata accessor for PgQuery_CreateStmt(0);
  v33 = *(_QWORD *)(Stmt - 8);
  MEMORY[0x1E0C80A78](Stmt);
  v172 = (uint64_t)&v138 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_CreateStmt?, PgQuery_CreateStmt?));
  MEMORY[0x1E0C80A78](v35);
  v37 = (char *)&v138 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateStmt?);
  v39 = MEMORY[0x1E0C80A78](v38);
  v41 = (char *)&v138 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = MEMORY[0x1E0C80A78](v39);
  v44 = (char *)&v138 - v43;
  MEMORY[0x1E0C80A78](v42);
  v46 = (char *)&v138 - v45;
  ForeignTableStmt = type metadata accessor for PgQuery_CreateForeignTableStmt(0);
  outlined init with copy of PgQuery_Alias?((uint64_t)v173 + *(int *)(ForeignTableStmt + 28), (uint64_t)v46, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
  v163 = ForeignTableStmt;
  outlined init with copy of PgQuery_Alias?((uint64_t)v174 + *(int *)(ForeignTableStmt + 28), (uint64_t)v44, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
  v48 = (uint64_t)&v37[*(int *)(v35 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v46, (uint64_t)v37, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v44, v48, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
  v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
  if (v49((uint64_t)v37, 1, Stmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v44, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v46, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
    if (v49(v48, 1, Stmt) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v37, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
      goto LABEL_4;
    }
    goto LABEL_11;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v37, (uint64_t)v41, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
  if (v49(v48, 1, Stmt) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v44, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v46, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
    outlined destroy of PgQuery_Alias((uint64_t)v41, type metadata accessor for PgQuery_CreateStmt);
LABEL_11:
    v62 = &demangling cache variable for type metadata for (PgQuery_CreateStmt?, PgQuery_CreateStmt?);
    v63 = (uint64_t)v37;
LABEL_22:
    outlined destroy of (key: String, value: StorableValue)(v63, v62);
    goto LABEL_23;
  }
  v139 = v46;
  v64 = v172;
  outlined init with take of PgQuery_OidList(v48, v172, type metadata accessor for PgQuery_CreateStmt);
  v65 = *(int *)(Stmt + 20);
  v66 = *(_QWORD *)&v41[v65];
  v67 = *(_QWORD *)(v64 + v65);
  if (v66 != v67)
  {
    v68 = v66
        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
    v69 = v171;
    outlined init with copy of PgQuery_Alias?(v67+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, v171, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    v70 = *(int *)(v26 + 48);
    v71 = v169;
    v72 = v169 + v70;
    outlined init with copy of PgQuery_Alias?(v68, v169, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined init with copy of PgQuery_Alias?(v69, v72, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    v73 = v168;
    v74 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v167 + 48);
    if (v74(v71, 1, v168) == 1)
    {
      v75 = v74(v72, 1, v73);
      swift_retain();
      swift_retain();
      v76 = v67;
      if (v75 == 1)
      {
        outlined destroy of (key: String, value: StorableValue)(v71, &demangling cache variable for type metadata for PgQuery_RangeVar?);
        outlined destroy of (key: String, value: StorableValue)(v171, &demangling cache variable for type metadata for PgQuery_RangeVar?);
LABEL_26:
        v83 = *(_QWORD *)(v66
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableElts);
        v84 = v66;
        v85 = *(_QWORD *)(v76
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableElts);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v86 = specialized static Array<A>.== infix(_:_:)(v83, v85);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v86 & 1) == 0)
          goto LABEL_20;
        v87 = *(_QWORD *)(v84
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inhRelations);
        v88 = *(_QWORD *)(v76
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inhRelations);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v89 = specialized static Array<A>.== infix(_:_:)(v87, v88);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v89 & 1) == 0)
          goto LABEL_20;
        v171 = v84;
        v90 = v84
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partbound;
        v91 = v160;
        outlined init with copy of PgQuery_Alias?(v76+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partbound, v160, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
        v92 = v159;
        v93 = v159 + *(int *)(v156 + 48);
        outlined init with copy of PgQuery_Alias?(v90, v159, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
        v94 = v92;
        outlined init with copy of PgQuery_Alias?(v91, v93, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
        v95 = v158;
        v96 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v157 + 48);
        if (v96(v92, 1, v158) == 1)
        {
          v97 = v96(v93, 1, v95);
          v98 = v171;
          if (v97 == 1)
          {
            outlined destroy of (key: String, value: StorableValue)(v92, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
            outlined destroy of (key: String, value: StorableValue)(v160, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
            goto LABEL_31;
          }
        }
        else
        {
          v125 = v154;
          outlined init with copy of PgQuery_Alias?(v92, v154, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
          if (v96(v93, 1, v95) != 1)
          {
            v126 = v149;
            outlined init with take of PgQuery_OidList(v93, v149, type metadata accessor for PgQuery_PartitionBoundSpec);
            if ((*(_QWORD *)v125 != *(_QWORD *)v126 || *(_QWORD *)(v125 + 8) != *(_QWORD *)(v126 + 8))
              && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
              || *(unsigned __int8 *)(v125 + 16) != *(unsigned __int8 *)(v126 + 16)
              || *(_DWORD *)(v125 + 20) != *(_DWORD *)(v126 + 20)
              || *(_DWORD *)(v125 + 24) != *(_DWORD *)(v126 + 24)
              || (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v125 + 32), *(_QWORD *)(v126 + 32)) & 1) == 0
              || (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v125 + 40), *(_QWORD *)(v126 + 40)) & 1) == 0
              || (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v125 + 48), *(_QWORD *)(v126 + 48)) & 1) == 0
              || *(_DWORD *)(v125 + 56) != *(_DWORD *)(v126 + 56))
            {
              outlined destroy of PgQuery_Alias(v126, type metadata accessor for PgQuery_PartitionBoundSpec);
              outlined destroy of PgQuery_Alias(v125, type metadata accessor for PgQuery_PartitionBoundSpec);
              v128 = &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?;
              outlined destroy of (key: String, value: StorableValue)(v94, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
              v79 = v160;
              goto LABEL_58;
            }
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
            v127 = dispatch thunk of static Equatable.== infix(_:_:)();
            outlined destroy of PgQuery_Alias(v126, type metadata accessor for PgQuery_PartitionBoundSpec);
            outlined destroy of PgQuery_Alias(v125, type metadata accessor for PgQuery_PartitionBoundSpec);
            outlined destroy of (key: String, value: StorableValue)(v94, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
            v98 = v171;
            outlined destroy of (key: String, value: StorableValue)(v160, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
            if ((v127 & 1) == 0)
              goto LABEL_20;
LABEL_31:
            v99 = v98
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partspec;
            v100 = v155;
            outlined init with copy of PgQuery_Alias?(v76+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partspec, v155, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
            v101 = v153;
            v102 = v153 + *(int *)(v150 + 48);
            outlined init with copy of PgQuery_Alias?(v99, v153, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
            v103 = v101;
            outlined init with copy of PgQuery_Alias?(v100, v102, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
            v104 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v151 + 48);
            v105 = PartitionSpec;
            if (v104(v101, 1, PartitionSpec) == 1)
            {
              v106 = v104(v102, 1, v105);
              v107 = v171;
              if (v106 == 1)
              {
                outlined destroy of (key: String, value: StorableValue)(v101, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
                outlined destroy of (key: String, value: StorableValue)(v155, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
LABEL_34:
                v108 = v107
                     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ofTypename;
                v109 = v148;
                outlined init with copy of PgQuery_Alias?(v76+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ofTypename, v148, &demangling cache variable for type metadata for PgQuery_TypeName?);
                v110 = v146;
                v111 = v146 + *(int *)(v143 + 48);
                outlined init with copy of PgQuery_Alias?(v108, v146, &demangling cache variable for type metadata for PgQuery_TypeName?);
                v112 = v110;
                outlined init with copy of PgQuery_Alias?(v109, v111, &demangling cache variable for type metadata for PgQuery_TypeName?);
                v113 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v144 + 48);
                v114 = TypeName;
                if (v113(v110, 1, TypeName) == 1)
                {
                  v115 = v113(v111, 1, v114);
                  v116 = v171;
                  if (v115 == 1)
                  {
                    outlined destroy of (key: String, value: StorableValue)(v110, &demangling cache variable for type metadata for PgQuery_TypeName?);
                    outlined destroy of (key: String, value: StorableValue)(v148, &demangling cache variable for type metadata for PgQuery_TypeName?);
LABEL_37:
                    v117 = *(_QWORD *)(v116
                                     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints);
                    v118 = v116;
                    v119 = *(_QWORD *)(v76
                                     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    v120 = specialized static Array<A>.== infix(_:_:)(v117, v119);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if ((v120 & 1) != 0)
                    {
                      v121 = *(_QWORD *)(v118
                                       + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
                      v122 = *(_QWORD *)(v76
                                       + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      v123 = specialized static Array<A>.== infix(_:_:)(v121, v122);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if ((v123 & 1) != 0)
                      {
                        v124 = *(_QWORD *)(v76
                                         + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oncommit);
                        if (*(_BYTE *)(v76
                                      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oncommit
                                      + 8) == 1)
                          __asm { BR              X11 }
                        if (*(_QWORD *)(v118
                                       + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oncommit) == v124
                          && (*(_QWORD *)(v171
                                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablespacename) == *(_QWORD *)(v76 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablespacename)
                           && *(_QWORD *)(v171
                                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablespacename
                                        + 8) == *(_QWORD *)(v76
                                                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablespacename
                                                          + 8)
                           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                          && (*(_QWORD *)(v171
                                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod) == *(_QWORD *)(v76 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod)
                           && *(_QWORD *)(v171
                                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                                        + 8) == *(_QWORD *)(v76
                                                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                                                          + 8)
                           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
                        {
                          v135 = *(unsigned __int8 *)(v171
                                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists);
                          v136 = *(unsigned __int8 *)(v76
                                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists);
                          swift_release();
                          swift_release();
                          v64 = v172;
                          if (v135 == v136)
                            goto LABEL_93;
LABEL_21:
                          outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_CreateStmt);
                          outlined destroy of (key: String, value: StorableValue)((uint64_t)v44, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
                          outlined destroy of (key: String, value: StorableValue)((uint64_t)v139, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
                          outlined destroy of PgQuery_Alias((uint64_t)v41, type metadata accessor for PgQuery_CreateStmt);
                          v63 = (uint64_t)v37;
                          v62 = &demangling cache variable for type metadata for PgQuery_CreateStmt?;
                          goto LABEL_22;
                        }
                      }
                    }
LABEL_20:
                    swift_release();
                    swift_release();
                    v64 = v172;
                    goto LABEL_21;
                  }
                  goto LABEL_72;
                }
                v132 = v141;
                outlined init with copy of PgQuery_Alias?(v110, v141, &demangling cache variable for type metadata for PgQuery_TypeName?);
                if (v113(v111, 1, v114) == 1)
                {
                  outlined destroy of PgQuery_Alias(v132, type metadata accessor for PgQuery_TypeName);
LABEL_72:
                  outlined destroy of (key: String, value: StorableValue)(v110, &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
                  v78 = &demangling cache variable for type metadata for PgQuery_TypeName?;
                  v79 = v148;
                  goto LABEL_19;
                }
                v133 = v140;
                outlined init with take of PgQuery_OidList(v111, v140, type metadata accessor for PgQuery_TypeName);
                if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)v132, *(_QWORD *)v133) & 1) != 0
                  && *(_DWORD *)(v132 + 8) == *(_DWORD *)(v133 + 8)
                  && *(unsigned __int8 *)(v132 + 12) == *(unsigned __int8 *)(v133 + 12)
                  && *(unsigned __int8 *)(v132 + 13) == *(unsigned __int8 *)(v133 + 13)
                  && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v132 + 16), *(_QWORD *)(v133 + 16)) & 1) != 0
                  && *(_DWORD *)(v132 + 24) == *(_DWORD *)(v133 + 24)
                  && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v132 + 32), *(_QWORD *)(v133 + 32)) & 1) != 0
                  && *(_DWORD *)(v132 + 40) == *(_DWORD *)(v133 + 40))
                {
                  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
                  v134 = dispatch thunk of static Equatable.== infix(_:_:)();
                  outlined destroy of PgQuery_Alias(v133, type metadata accessor for PgQuery_TypeName);
                  outlined destroy of PgQuery_Alias(v132, type metadata accessor for PgQuery_TypeName);
                  outlined destroy of (key: String, value: StorableValue)(v112, &demangling cache variable for type metadata for PgQuery_TypeName?);
                  v116 = v171;
                  outlined destroy of (key: String, value: StorableValue)(v148, &demangling cache variable for type metadata for PgQuery_TypeName?);
                  if ((v134 & 1) == 0)
                    goto LABEL_20;
                  goto LABEL_37;
                }
                outlined destroy of PgQuery_Alias(v133, type metadata accessor for PgQuery_TypeName);
                outlined destroy of PgQuery_Alias(v132, type metadata accessor for PgQuery_TypeName);
                v128 = &demangling cache variable for type metadata for PgQuery_TypeName?;
                outlined destroy of (key: String, value: StorableValue)(v112, &demangling cache variable for type metadata for PgQuery_TypeName?);
                v79 = v148;
                goto LABEL_58;
              }
LABEL_61:
              outlined destroy of (key: String, value: StorableValue)(v101, &demangling cache variable for type metadata for (PgQuery_PartitionSpec?, PgQuery_PartitionSpec?));
              v78 = &demangling cache variable for type metadata for PgQuery_PartitionSpec?;
              v79 = v155;
              goto LABEL_19;
            }
            v129 = v147;
            outlined init with copy of PgQuery_Alias?(v101, v147, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
            if (v104(v102, 1, v105) == 1)
            {
              outlined destroy of PgQuery_Alias(v129, type metadata accessor for PgQuery_PartitionSpec);
              goto LABEL_61;
            }
            v130 = v142;
            outlined init with take of PgQuery_OidList(v102, v142, type metadata accessor for PgQuery_PartitionSpec);
            if ((*(_QWORD *)v129 == *(_QWORD *)v130 && *(_QWORD *)(v129 + 8) == *(_QWORD *)(v130 + 8)
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v129 + 16), *(_QWORD *)(v130 + 16)) & 1) != 0
              && *(_DWORD *)(v129 + 24) == *(_DWORD *)(v130 + 24))
            {
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
              v131 = dispatch thunk of static Equatable.== infix(_:_:)();
              outlined destroy of PgQuery_Alias(v130, type metadata accessor for PgQuery_PartitionSpec);
              outlined destroy of PgQuery_Alias(v129, type metadata accessor for PgQuery_PartitionSpec);
              outlined destroy of (key: String, value: StorableValue)(v103, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
              v107 = v171;
              outlined destroy of (key: String, value: StorableValue)(v155, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
              if ((v131 & 1) == 0)
                goto LABEL_20;
              goto LABEL_34;
            }
            outlined destroy of PgQuery_Alias(v130, type metadata accessor for PgQuery_PartitionSpec);
            outlined destroy of PgQuery_Alias(v129, type metadata accessor for PgQuery_PartitionSpec);
            v128 = &demangling cache variable for type metadata for PgQuery_PartitionSpec?;
            outlined destroy of (key: String, value: StorableValue)(v103, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
            v79 = v155;
LABEL_58:
            v78 = v128;
            goto LABEL_19;
          }
          outlined destroy of PgQuery_Alias(v125, type metadata accessor for PgQuery_PartitionBoundSpec);
        }
        outlined destroy of (key: String, value: StorableValue)(v92, &demangling cache variable for type metadata for (PgQuery_PartitionBoundSpec?, PgQuery_PartitionBoundSpec?));
        v78 = &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?;
        v79 = v160;
LABEL_19:
        outlined destroy of (key: String, value: StorableValue)(v79, v78);
        goto LABEL_20;
      }
    }
    else
    {
      v76 = v67;
      v77 = v162;
      outlined init with copy of PgQuery_Alias?(v71, v162, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      if (v74(v72, 1, v73) != 1)
      {
        v81 = v161;
        outlined init with take of PgQuery_OidList(v72, v161, type metadata accessor for PgQuery_RangeVar);
        swift_retain();
        swift_retain();
        v82 = specialized static PgQuery_RangeVar.== infix(_:_:)(v77, v81);
        outlined destroy of PgQuery_Alias(v81, type metadata accessor for PgQuery_RangeVar);
        outlined destroy of PgQuery_Alias(v77, type metadata accessor for PgQuery_RangeVar);
        outlined destroy of (key: String, value: StorableValue)(v71, &demangling cache variable for type metadata for PgQuery_RangeVar?);
        outlined destroy of (key: String, value: StorableValue)(v171, &demangling cache variable for type metadata for PgQuery_RangeVar?);
        if ((v82 & 1) == 0)
          goto LABEL_20;
        goto LABEL_26;
      }
      swift_retain();
      swift_retain();
      outlined destroy of PgQuery_Alias(v77, type metadata accessor for PgQuery_RangeVar);
    }
    outlined destroy of (key: String, value: StorableValue)(v71, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    v78 = &demangling cache variable for type metadata for PgQuery_RangeVar?;
    v79 = v171;
    goto LABEL_19;
  }
LABEL_93:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v137 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_CreateStmt);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v44, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v139, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
  outlined destroy of PgQuery_Alias((uint64_t)v41, type metadata accessor for PgQuery_CreateStmt);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v37, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
  if ((v137 & 1) == 0)
    goto LABEL_23;
LABEL_4:
  v51 = v173;
  v50 = v174;
  if (*v173 == *v174 && v173[1] == v174[1] || (v52 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(v51[2], v50[2]) & 1) != 0)
    {
      v53 = v163;
      v54 = v164;
      v55 = (char *)v51 + *(int *)(v163 + 24);
      v56 = v166;
      v57 = *(void (**)(char *, char *, uint64_t))(v166 + 16);
      v58 = v170;
      v57(v164, v55, v170);
      v59 = (char *)v50 + *(int *)(v53 + 24);
      v60 = v165;
      v57(v165, v59, v58);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v52 = dispatch thunk of static Equatable.== infix(_:_:)();
      v61 = *(void (**)(char *, uint64_t))(v56 + 8);
      v61(v60, v58);
      v61(v54, v58);
      return v52 & 1;
    }
LABEL_23:
    v52 = 0;
  }
  return v52 & 1;
}

uint64_t specialized static PgQuery_AlterObjectDependsStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t RangeVar;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t AlterObjectDependsStmt;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t);
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  char v89;
  int v90;
  int v91;
  BOOL v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t, uint64_t);
  char *v95;
  char v96;
  void (*v97)(char *, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t Node;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v4 = type metadata accessor for UnknownStorage();
  v119 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v99 - v8;
  Node = type metadata accessor for PgQuery_Node(0);
  v111 = *(_QWORD *)(Node - 8);
  v10 = MEMORY[0x1E0C80A78](Node);
  v105 = (uint64_t)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v108 = (uint64_t)&v99 - v12;
  v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v13 = MEMORY[0x1E0C80A78](v116);
  v107 = (uint64_t)&v99 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v114 = (uint64_t)&v99 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v106 = (uint64_t)&v99 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v110 = (uint64_t)&v99 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v112 = (uint64_t)&v99 - v22;
  MEMORY[0x1E0C80A78](v21);
  v117 = (uint64_t)&v99 - v23;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v25 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v109 = (uint64_t)&v99 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1E0C80A78](v27);
  v118 = (uint64_t)&v99 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v30 = MEMORY[0x1E0C80A78](v29);
  v115 = (uint64_t)&v99 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30);
  v33 = (char *)&v99 - v32;
  AlterObjectDependsStmt = type metadata accessor for PgQuery_AlterObjectDependsStmt(0);
  v35 = a1;
  v36 = *(int *)(AlterObjectDependsStmt + 20);
  v37 = *(_QWORD *)(a1 + v36);
  v38 = *(_QWORD *)(a2 + v36);
  if (v37 == v38)
    goto LABEL_30;
  v100 = v35;
  v101 = a2;
  v102 = v9;
  v103 = v7;
  v104 = v4;
  v39 = *(_QWORD *)(v38 + 16);
  v40 = *(unsigned __int8 *)(v38 + 24);
  v41 = destructiveProjectEnumData for StorableValue(*(_QWORD *)(v37 + 16), *(unsigned __int8 *)(v37 + 24));
  if (v41 != destructiveProjectEnumData for StorableValue(v39, v40))
  {
LABEL_39:
    v96 = 0;
    return v96 & 1;
  }
  v42 = v37
      + OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  v43 = (uint64_t)v33;
  outlined init with copy of PgQuery_Alias?(v38+ OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v33, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v44 = v118;
  v45 = v118 + *(int *)(v27 + 48);
  outlined init with copy of PgQuery_Alias?(v42, v118, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?(v43, v45, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v46 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  if (v46(v44, 1, RangeVar) == 1)
  {
    v47 = v46(v45, 1, RangeVar);
    v48 = v37;
    swift_retain();
    swift_retain();
    v49 = v104;
    if (v47 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v44, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of (key: String, value: StorableValue)(v43, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_10;
    }
LABEL_8:
    outlined destroy of (key: String, value: StorableValue)(v44, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    v52 = &demangling cache variable for type metadata for PgQuery_RangeVar?;
    v53 = v43;
LABEL_37:
    outlined destroy of (key: String, value: StorableValue)(v53, v52);
    goto LABEL_38;
  }
  v48 = v37;
  v50 = v115;
  outlined init with copy of PgQuery_Alias?(v44, v115, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v51 = v46(v45, 1, RangeVar);
  v49 = v104;
  if (v51 == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias(v50, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_8;
  }
  v54 = v45;
  v55 = v50;
  v56 = v109;
  outlined init with take of PgQuery_OidList(v54, v109, type metadata accessor for PgQuery_RangeVar);
  swift_retain();
  swift_retain();
  v57 = specialized static PgQuery_RangeVar.== infix(_:_:)(v55, v56);
  outlined destroy of PgQuery_Alias(v56, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias(v55, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of (key: String, value: StorableValue)(v44, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of (key: String, value: StorableValue)(v43, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v57 & 1) == 0)
    goto LABEL_38;
LABEL_10:
  v58 = v48
      + OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  v59 = v38;
  v60 = v117;
  outlined init with copy of PgQuery_Alias?(v38+ OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, v117, &demangling cache variable for type metadata for PgQuery_Node?);
  v61 = v114 + *(int *)(v116 + 48);
  v62 = v58;
  v63 = v114;
  outlined init with copy of PgQuery_Alias?(v62, v114, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v60, v61, &demangling cache variable for type metadata for PgQuery_Node?);
  v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 48);
  v65 = Node;
  if (v64(v63, 1, Node) == 1)
  {
    if (v64(v61, 1, v65) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v63, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)(v117, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_19;
    }
    v67 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_33;
  }
  v66 = v112;
  outlined init with copy of PgQuery_Alias?(v63, v112, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v64(v61, 1, v65) == 1)
  {
    v67 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_32:
    outlined destroy of PgQuery_Alias(v112, type metadata accessor for PgQuery_Node);
LABEL_33:
    outlined destroy of (key: String, value: StorableValue)(v63, v67);
    v52 = &demangling cache variable for type metadata for PgQuery_Node?;
    v53 = v117;
    goto LABEL_37;
  }
  v68 = v108;
  outlined init with take of PgQuery_OidList(v61, v108, type metadata accessor for PgQuery_Node);
  v69 = *(int *)(v65 + 20);
  v70 = *(_QWORD *)(v66 + v69);
  v71 = *(_QWORD *)(v68 + v69);
  if (v70 != v71)
  {
    swift_retain();
    swift_retain();
    v72 = closure #1 in static PgQuery_Node.== infix(_:_:)(v70, v71);
    swift_release();
    swift_release();
    if (!v72)
    {
      outlined destroy of PgQuery_Alias(v108, type metadata accessor for PgQuery_Node);
      v67 = &demangling cache variable for type metadata for PgQuery_Node?;
      v63 = v114;
      goto LABEL_32;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v73 = v112;
  v74 = v108;
  v75 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v74, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v73, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v114, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v117, &demangling cache variable for type metadata for PgQuery_Node?);
  v38 = v59;
  if ((v75 & 1) == 0)
    goto LABEL_38;
LABEL_19:
  v76 = v48
      + OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__extname;
  v77 = v110;
  outlined init with copy of PgQuery_Alias?(v38+ OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__extname, v110, &demangling cache variable for type metadata for PgQuery_Node?);
  v78 = v107 + *(int *)(v116 + 48);
  v79 = v76;
  v80 = v107;
  outlined init with copy of PgQuery_Alias?(v79, v107, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v77, v78, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v64(v80, 1, v65) == 1)
  {
    if (v64(v78, 1, v65) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v80, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)(v110, &demangling cache variable for type metadata for PgQuery_Node?);
      v81 = v59;
      goto LABEL_28;
    }
    v83 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_36;
  }
  v82 = v106;
  outlined init with copy of PgQuery_Alias?(v80, v106, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v64(v78, 1, v65) == 1)
  {
    v83 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_35:
    outlined destroy of PgQuery_Alias(v82, type metadata accessor for PgQuery_Node);
LABEL_36:
    outlined destroy of (key: String, value: StorableValue)(v80, v83);
    v52 = &demangling cache variable for type metadata for PgQuery_Node?;
    v53 = v110;
    goto LABEL_37;
  }
  v84 = v105;
  outlined init with take of PgQuery_OidList(v78, v105, type metadata accessor for PgQuery_Node);
  v85 = *(int *)(v65 + 20);
  v86 = *(_QWORD *)(v82 + v85);
  v87 = *(_QWORD *)(v84 + v85);
  if (v86 != v87)
  {
    swift_retain();
    swift_retain();
    v88 = closure #1 in static PgQuery_Node.== infix(_:_:)(v86, v87);
    swift_release();
    swift_release();
    if (!v88)
    {
      outlined destroy of PgQuery_Alias(v84, type metadata accessor for PgQuery_Node);
      v83 = &demangling cache variable for type metadata for PgQuery_Node?;
      v80 = v107;
      goto LABEL_35;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v89 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v84, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v82, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v107, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v110, &demangling cache variable for type metadata for PgQuery_Node?);
  v81 = v59;
  if ((v89 & 1) == 0)
  {
LABEL_38:
    swift_release();
    swift_release();
    goto LABEL_39;
  }
LABEL_28:
  v90 = *(unsigned __int8 *)(v48
                           + OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__remove);
  v91 = *(unsigned __int8 *)(v81
                           + OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__remove);
  swift_release();
  swift_release();
  v92 = v90 == v91;
  v9 = v102;
  v7 = v103;
  v35 = v100;
  a2 = v101;
  v4 = v49;
  if (!v92)
    goto LABEL_39;
LABEL_30:
  v93 = v119;
  v94 = *(void (**)(char *, uint64_t, uint64_t))(v119 + 16);
  v94(v9, v35, v4);
  v94(v7, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v95 = v7;
  v96 = dispatch thunk of static Equatable.== infix(_:_:)();
  v97 = *(void (**)(char *, uint64_t))(v93 + 8);
  v97(v95, v4);
  v97(v9, v4);
  return v96 & 1;
}

uint64_t specialized static PgQuery_AlterForeignServerStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  BOOL v13;
  uint64_t AlterForeignServerStmt;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v13 = *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
    if (v13 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32)) & 1) != 0
        && *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40))
      {
        AlterForeignServerStmt = type metadata accessor for PgQuery_AlterForeignServerStmt(0);
        v15 = a1 + *(int *)(AlterForeignServerStmt + 32);
        v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v16(v10, v15, v4);
        v16(v8, a2 + *(int *)(AlterForeignServerStmt + 32), v4);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v12 = dispatch thunk of static Equatable.== infix(_:_:)();
        v17 = *(void (**)(char *, uint64_t))(v5 + 8);
        v17(v8, v4);
        v17(v10, v4);
      }
      else
      {
        v12 = 0;
      }
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_CreateUserMappingStmt.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t RoleSpec;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t UserMappingStmt;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t, uint64_t, uint64_t);
  char *v26;
  _QWORD *v27;
  char v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;

  v49 = a2;
  v3 = type metadata accessor for UnknownStorage();
  v45 = *(_QWORD *)(v3 - 8);
  v46 = v3;
  v4 = MEMORY[0x1E0C80A78](v3);
  v44 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v43 = (char *)&v42 - v6;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v8 = *(_QWORD *)(RoleSpec - 8);
  MEMORY[0x1E0C80A78](RoleSpec);
  v47 = (uint64_t)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?));
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v42 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v42 - v20;
  UserMappingStmt = type metadata accessor for PgQuery_CreateUserMappingStmt(0);
  v23 = *(int *)(UserMappingStmt + 32);
  v48 = a1;
  outlined init with copy of PgQuery_Alias?((uint64_t)a1 + v23, (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined init with copy of PgQuery_Alias?((uint64_t)&v49[*(int *)(UserMappingStmt + 32)], (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v24 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v19, v24, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v25((uint64_t)v12, 1, RoleSpec) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    if (v25(v24, 1, RoleSpec) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      goto LABEL_4;
    }
    goto LABEL_12;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if (v25(v24, 1, RoleSpec) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_RoleSpec);
LABEL_12:
    v36 = &demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?);
    v37 = (uint64_t)v12;
LABEL_23:
    outlined destroy of (key: String, value: StorableValue)(v37, v36);
    goto LABEL_24;
  }
  v38 = v47;
  outlined init with take of PgQuery_OidList(v24, v47, type metadata accessor for PgQuery_RoleSpec);
  v39 = *(_QWORD *)v38;
  if (*(_BYTE *)(v38 + 8) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)v16 != v39
    || (*((_QWORD *)v16 + 2) != *(_QWORD *)(v38 + 16) || *((_QWORD *)v16 + 3) != *(_QWORD *)(v38 + 24))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || *((_DWORD *)v16 + 8) != *(_DWORD *)(v38 + 32))
  {
    outlined destroy of PgQuery_Alias(v38, type metadata accessor for PgQuery_RoleSpec);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_RoleSpec);
    v37 = (uint64_t)v12;
    v36 = &demangling cache variable for type metadata for PgQuery_RoleSpec?;
    goto LABEL_23;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v40 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v38, type metadata accessor for PgQuery_RoleSpec);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_RoleSpec);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if ((v40 & 1) == 0)
    goto LABEL_24;
LABEL_4:
  v27 = v48;
  v26 = v49;
  if (*v48 == *(_QWORD *)v49 && v48[1] == *((_QWORD *)v49 + 1)
    || (v28 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*((unsigned __int8 *)v27 + 16) == v26[16]
      && (specialized static Array<A>.== infix(_:_:)(v27[3], *((_QWORD *)v26 + 3)) & 1) != 0)
    {
      v29 = (char *)v27 + *(int *)(UserMappingStmt + 28);
      v31 = v45;
      v30 = v46;
      v32 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
      v33 = v43;
      v32(v43, v29, v46);
      v34 = v44;
      v32(v44, &v26[*(int *)(UserMappingStmt + 28)], v30);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v28 = dispatch thunk of static Equatable.== infix(_:_:)();
      v35 = *(void (**)(char *, uint64_t))(v31 + 8);
      v35(v34, v30);
      v35(v33, v30);
      return v28 & 1;
    }
LABEL_24:
    v28 = 0;
  }
  return v28 & 1;
}

uint64_t specialized static PgQuery_CreatePublicationStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  uint64_t PublicationStmt;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  v11 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16)) & 1) != 0
      && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24)) & 1) != 0
      && *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
    {
      PublicationStmt = type metadata accessor for PgQuery_CreatePublicationStmt(0);
      v15 = a1 + *(int *)(PublicationStmt + 32);
      v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v16(v10, v15, v4);
      v16(v8, a2 + *(int *)(PublicationStmt + 32), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      v17 = *(void (**)(char *, uint64_t))(v5 + 8);
      v17(v8, v4);
      v17(v10, v4);
    }
    else
    {
      v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_AlterTableMoveAllStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AlterTableMoveAllStmt;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  void (*v20)(char *, uint64_t);
  uint64_t v21;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v21 - v9;
  v11 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v13 = *(_QWORD *)(a2 + 16);
    v14 = *(unsigned __int8 *)(a2 + 24);
    v15 = destructiveProjectEnumData for StorableValue(*(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
    if (v15 != destructiveProjectEnumData for StorableValue(v13, v14)
      || (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32)) & 1) == 0)
    {
LABEL_12:
      v12 = 0;
      return v12 & 1;
    }
    if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40) && *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48)
      || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (*(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56))
      {
        AlterTableMoveAllStmt = type metadata accessor for PgQuery_AlterTableMoveAllStmt(0);
        v18 = a1 + *(int *)(AlterTableMoveAllStmt + 36);
        v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v19(v10, v18, v4);
        v19(v8, a2 + *(int *)(AlterTableMoveAllStmt + 36), v4);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v12 = dispatch thunk of static Equatable.== infix(_:_:)();
        v20 = *(void (**)(char *, uint64_t))(v5 + 8);
        v20(v8, v4);
        v20(v10, v4);
        return v12 & 1;
      }
      goto LABEL_12;
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_AlterSubscriptionStmt.== infix(_:_:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  uint64_t AlterSubscriptionStmt;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - v9;
  v11 = *a2;
  if (*((_BYTE *)a2 + 8) == 1)
    __asm { BR              X11 }
  if (*a1 != v11)
    goto LABEL_15;
  v12 = a1[2] == a2[2] && a1[3] == a2[3];
  if (v12 || (v13 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (a1[4] == a2[4] && a1[5] == a2[5] || (v13 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if ((specialized static Array<A>.== infix(_:_:)(a1[6], a2[6]) & 1) != 0
        && (specialized static Array<A>.== infix(_:_:)(a1[7], a2[7]) & 1) != 0)
      {
        AlterSubscriptionStmt = type metadata accessor for PgQuery_AlterSubscriptionStmt(0);
        v15 = (char *)a1 + *(int *)(AlterSubscriptionStmt + 36);
        v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
        v16(v10, v15, v4);
        v16(v8, (char *)a2 + *(int *)(AlterSubscriptionStmt + 36), v4);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v13 = dispatch thunk of static Equatable.== infix(_:_:)();
        v17 = *(void (**)(char *, uint64_t))(v5 + 8);
        v17(v8, v4);
        v17(v10, v4);
        return v13 & 1;
      }
LABEL_15:
      v13 = 0;
    }
  }
  return v13 & 1;
}

uint64_t specialized static PgQuery_AlterObjectSchemaStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t RangeVar;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t AlterObjectSchemaStmt;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t, uint64_t);
  int v54;
  uint64_t v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  char v66;
  int v67;
  int v68;
  BOOL v69;
  void (*v70)(char *, uint64_t, uint64_t);
  char *v71;
  char v72;
  void (*v73)(char *, uint64_t);
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v75 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v84 = *(_QWORD *)(Node - 8);
  v85 = Node;
  MEMORY[0x1E0C80A78](Node);
  v80 = (uint64_t)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v83);
  v87 = (uint64_t)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v82 = (uint64_t)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v86 = (uint64_t)&v75 - v17;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v19 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v81 = (uint64_t)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1E0C80A78](v21);
  v89 = (uint64_t)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v24 = MEMORY[0x1E0C80A78](v23);
  v88 = (uint64_t)&v75 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v90 = (uint64_t)&v75 - v26;
  AlterObjectSchemaStmt = type metadata accessor for PgQuery_AlterObjectSchemaStmt(0);
  v28 = a1;
  v29 = *(int *)(AlterObjectSchemaStmt + 20);
  v30 = *(_QWORD *)(a1 + v29);
  v31 = *(_QWORD *)(a2 + v29);
  if (v30 == v31)
    goto LABEL_24;
  v75 = v28;
  v76 = v10;
  v77 = v8;
  v78 = v4;
  v79 = v5;
  v32 = *(_QWORD *)(v31 + 16);
  v33 = *(unsigned __int8 *)(v31 + 24);
  v34 = destructiveProjectEnumData for StorableValue(*(_QWORD *)(v30 + 16), *(unsigned __int8 *)(v30 + 24));
  if (v34 != destructiveProjectEnumData for StorableValue(v32, v33))
  {
LABEL_30:
    v72 = 0;
    return v72 & 1;
  }
  v35 = v30
      + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  v36 = v90;
  outlined init with copy of PgQuery_Alias?(v31+ OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, v90, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v37 = v89;
  v38 = v89 + *(int *)(v21 + 48);
  outlined init with copy of PgQuery_Alias?(v35, v89, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?(v36, v38, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  if (v39(v37, 1, RangeVar) == 1)
  {
    v40 = v39(v38, 1, RangeVar);
    v41 = v30;
    swift_retain();
    v42 = v31;
    swift_retain();
    if (v40 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v37, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of (key: String, value: StorableValue)(v90, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_10;
    }
LABEL_8:
    outlined destroy of (key: String, value: StorableValue)(v37, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    v44 = &demangling cache variable for type metadata for PgQuery_RangeVar?;
    v45 = v90;
LABEL_28:
    outlined destroy of (key: String, value: StorableValue)(v45, v44);
    goto LABEL_29;
  }
  v42 = v31;
  v41 = v30;
  v43 = v88;
  outlined init with copy of PgQuery_Alias?(v37, v88, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v39(v38, 1, RangeVar) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_8;
  }
  v46 = v81;
  outlined init with take of PgQuery_OidList(v38, v81, type metadata accessor for PgQuery_RangeVar);
  swift_retain();
  swift_retain();
  v47 = specialized static PgQuery_RangeVar.== infix(_:_:)(v43, v46);
  outlined destroy of PgQuery_Alias(v46, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of (key: String, value: StorableValue)(v37, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of (key: String, value: StorableValue)(v90, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v47 & 1) == 0)
    goto LABEL_29;
LABEL_10:
  v48 = v41
      + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  v49 = v86;
  outlined init with copy of PgQuery_Alias?(v42+ OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, v86, &demangling cache variable for type metadata for PgQuery_Node?);
  v50 = v87;
  v51 = v87 + *(int *)(v83 + 48);
  outlined init with copy of PgQuery_Alias?(v48, v87, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v49, v51, &demangling cache variable for type metadata for PgQuery_Node?);
  v52 = v85;
  v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 48);
  if (v53(v50, 1, v85) == 1)
  {
    v54 = v53(v51, 1, v52);
    v5 = v79;
    if (v54 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v50, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)(v49, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_19;
    }
    v57 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_27;
  }
  v55 = v82;
  outlined init with copy of PgQuery_Alias?(v50, v82, &demangling cache variable for type metadata for PgQuery_Node?);
  v56 = v53(v51, 1, v52);
  v5 = v79;
  if (v56 == 1)
  {
    v57 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_26:
    outlined destroy of PgQuery_Alias(v55, type metadata accessor for PgQuery_Node);
LABEL_27:
    outlined destroy of (key: String, value: StorableValue)(v50, v57);
    v44 = &demangling cache variable for type metadata for PgQuery_Node?;
    v45 = v49;
    goto LABEL_28;
  }
  v58 = v51;
  v59 = v52;
  v60 = v80;
  outlined init with take of PgQuery_OidList(v58, v80, type metadata accessor for PgQuery_Node);
  v61 = *(int *)(v59 + 20);
  v62 = *(_QWORD *)(v55 + v61);
  v63 = *(_QWORD *)(v60 + v61);
  if (v62 != v63)
  {
    swift_retain();
    swift_retain();
    v64 = closure #1 in static PgQuery_Node.== infix(_:_:)(v62, v63);
    swift_release();
    swift_release();
    if (!v64)
    {
      outlined destroy of PgQuery_Alias(v60, type metadata accessor for PgQuery_Node);
      v57 = &demangling cache variable for type metadata for PgQuery_Node?;
      v55 = v82;
      goto LABEL_26;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v65 = v82;
  v66 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v60, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v65, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v50, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v49, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v66 & 1) == 0)
  {
LABEL_29:
    swift_release();
    swift_release();
    goto LABEL_30;
  }
LABEL_19:
  if ((*(_QWORD *)(v41
                  + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newschema) != *(_QWORD *)(v42 + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newschema)
     || *(_QWORD *)(v41
                  + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newschema
                  + 8) != *(_QWORD *)(v42
                                    + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newschema
                                    + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_29;
  }
  v67 = *(unsigned __int8 *)(v41
                           + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk);
  v68 = *(unsigned __int8 *)(v42
                           + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk);
  swift_release();
  swift_release();
  v69 = v67 == v68;
  v10 = v76;
  v8 = v77;
  v28 = v75;
  v4 = v78;
  if (!v69)
    goto LABEL_30;
LABEL_24:
  v70 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v70(v10, v28, v4);
  v70(v8, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v71 = v8;
  v72 = dispatch thunk of static Equatable.== infix(_:_:)();
  v73 = *(void (**)(char *, uint64_t))(v5 + 8);
  v73(v71, v4);
  v73(v10, v4);
  return v72 & 1;
}

uint64_t specialized static PgQuery_DropSubscriptionStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t DropSubscriptionStmt;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v20 - v9;
  v11 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16))
      goto LABEL_15;
    v13 = *(_QWORD *)(a1 + 24);
    v14 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(a2 + 32) == 1)
    {
      if (v14)
      {
        if (v14 == 1)
        {
          if (v13 == 1)
            goto LABEL_13;
        }
        else if (v13 == 2)
        {
          goto LABEL_13;
        }
LABEL_15:
        v12 = 0;
        return v12 & 1;
      }
      if (v13)
        goto LABEL_15;
    }
    else if (v13 != v14)
    {
      goto LABEL_15;
    }
LABEL_13:
    DropSubscriptionStmt = type metadata accessor for PgQuery_DropSubscriptionStmt(0);
    v16 = a1 + *(int *)(DropSubscriptionStmt + 28);
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v17(v10, v16, v4);
    v17(v8, a2 + *(int *)(DropSubscriptionStmt + 28), v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v12 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v10, v4);
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_CreateTableSpaceStmt.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t RoleSpec;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t TableSpaceStmt;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(uint64_t, uint64_t, uint64_t);
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  char *v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;

  v4 = type metadata accessor for UnknownStorage();
  v55 = *(_QWORD *)(v4 - 8);
  v56 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v54 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v53 = (char *)&v51 - v7;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v9 = *(_QWORD *)(RoleSpec - 8);
  MEMORY[0x1E0C80A78](RoleSpec);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?));
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v51 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v51 - v22;
  v24 = *a1;
  v25 = a1[1];
  v26 = *a2;
  v27 = a2[1];
  v58 = a2;
  if (v24 != v26 || v25 != v27)
  {
    v28 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      return v28 & 1;
  }
  TableSpaceStmt = type metadata accessor for PgQuery_CreateTableSpaceStmt(0);
  v30 = a1;
  v31 = TableSpaceStmt;
  v32 = *(int *)(TableSpaceStmt + 32);
  v57 = v30;
  outlined init with copy of PgQuery_Alias?((uint64_t)v30 + v32, (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v52 = v31;
  outlined init with copy of PgQuery_Alias?((uint64_t)v58 + *(int *)(v31 + 32), (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v33 = (uint64_t)&v14[*(int *)(v12 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, v33, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v34((uint64_t)v14, 1, RoleSpec) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    if (v34(v33, 1, RoleSpec) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      v35 = v57;
      goto LABEL_7;
    }
    goto LABEL_14;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if (v34(v33, 1, RoleSpec) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RoleSpec);
LABEL_14:
    v46 = &demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?);
    v47 = (uint64_t)v14;
LABEL_25:
    outlined destroy of (key: String, value: StorableValue)(v47, v46);
    goto LABEL_26;
  }
  outlined init with take of PgQuery_OidList(v33, (uint64_t)v11, type metadata accessor for PgQuery_RoleSpec);
  v48 = *(_QWORD *)v11;
  if (v11[8] == 1)
    __asm { BR              X11 }
  v35 = v57;
  if (*(_QWORD *)v18 != v48
    || (*((_QWORD *)v18 + 2) != *((_QWORD *)v11 + 2) || *((_QWORD *)v18 + 3) != *((_QWORD *)v11 + 3))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || *((_DWORD *)v18 + 8) != *((_DWORD *)v11 + 8))
  {
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_RoleSpec);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RoleSpec);
    v47 = (uint64_t)v14;
    v46 = &demangling cache variable for type metadata for PgQuery_RoleSpec?;
    goto LABEL_25;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v49 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_RoleSpec);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RoleSpec);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if ((v49 & 1) == 0)
    goto LABEL_26;
LABEL_7:
  if (v35[2] == v58[2] && v35[3] == v58[3] || (v28 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v36 = v58;
    if ((specialized static Array<A>.== infix(_:_:)(v35[4], v58[4]) & 1) != 0)
    {
      v37 = v52;
      v38 = (char *)v35 + *(int *)(v52 + 28);
      v40 = v55;
      v39 = v56;
      v41 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
      v42 = v53;
      v41(v53, v38, v56);
      v43 = (char *)v36 + *(int *)(v37 + 28);
      v44 = v54;
      v41(v54, v43, v39);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v28 = dispatch thunk of static Equatable.== infix(_:_:)();
      v45 = *(void (**)(char *, uint64_t))(v40 + 8);
      v45(v44, v39);
      v45(v42, v39);
      return v28 & 1;
    }
LABEL_26:
    v28 = 0;
  }
  return v28 & 1;
}

uint64_t specialized static PgQuery_CreateConversionStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  uint64_t ConversionStmt;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & 1) == 0)
  {
LABEL_12:
    v12 = 0;
    return v12 & 1;
  }
  v11 = *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8) && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24) && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32)
      || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40)) & 1) != 0
        && *(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
      {
        ConversionStmt = type metadata accessor for PgQuery_CreateConversionStmt(0);
        v15 = a1 + *(int *)(ConversionStmt + 36);
        v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v16(v10, v15, v4);
        v16(v8, a2 + *(int *)(ConversionStmt + 36), v4);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v12 = dispatch thunk of static Equatable.== infix(_:_:)();
        v17 = *(void (**)(char *, uint64_t))(v5 + 8);
        v17(v8, v4);
        v17(v10, v4);
        return v12 & 1;
      }
      goto LABEL_12;
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_AlterUserMappingStmt.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t RoleSpec;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t AlterUserMappingStmt;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  char *v30;
  _QWORD *v31;
  char v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  char *v38;
  void (*v39)(char *, uint64_t);
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;

  v4 = type metadata accessor for UnknownStorage();
  v49 = *(_QWORD *)(v4 - 8);
  v50 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v48 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v47 = (char *)&v46 - v7;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v9 = *(_QWORD *)(RoleSpec - 8);
  MEMORY[0x1E0C80A78](RoleSpec);
  v51 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v46 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v46 - v21;
  AlterUserMappingStmt = type metadata accessor for PgQuery_AlterUserMappingStmt(0);
  v24 = *(int *)(AlterUserMappingStmt + 28);
  v52 = a1;
  v25 = (uint64_t)a1 + v24;
  v26 = AlterUserMappingStmt;
  outlined init with copy of PgQuery_Alias?(v25, (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v27 = *(int *)(v26 + 28);
  v53 = a2;
  outlined init with copy of PgQuery_Alias?((uint64_t)&a2[v27], (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v28, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, RoleSpec) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    if (v29(v28, 1, RoleSpec) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      goto LABEL_4;
    }
    goto LABEL_11;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if (v29(v28, 1, RoleSpec) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RoleSpec);
LABEL_11:
    v40 = &demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?);
    v41 = (uint64_t)v13;
LABEL_22:
    outlined destroy of (key: String, value: StorableValue)(v41, v40);
    goto LABEL_23;
  }
  v42 = v51;
  outlined init with take of PgQuery_OidList(v28, v51, type metadata accessor for PgQuery_RoleSpec);
  v43 = *(_QWORD *)v42;
  if (*(_BYTE *)(v42 + 8) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)v17 != v43
    || (*((_QWORD *)v17 + 2) != *(_QWORD *)(v42 + 16) || *((_QWORD *)v17 + 3) != *(_QWORD *)(v42 + 24))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || *((_DWORD *)v17 + 8) != *(_DWORD *)(v42 + 32))
  {
    outlined destroy of PgQuery_Alias(v42, type metadata accessor for PgQuery_RoleSpec);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RoleSpec);
    v41 = (uint64_t)v13;
    v40 = &demangling cache variable for type metadata for PgQuery_RoleSpec?;
    goto LABEL_22;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v44 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v42, type metadata accessor for PgQuery_RoleSpec);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RoleSpec);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if ((v44 & 1) == 0)
    goto LABEL_23;
LABEL_4:
  v31 = v52;
  v30 = v53;
  if (*v52 == *(_QWORD *)v53 && v52[1] == *((_QWORD *)v53 + 1)
    || (v32 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(v31[2], *((_QWORD *)v30 + 2)) & 1) != 0)
    {
      v33 = (char *)v31 + *(int *)(v26 + 24);
      v35 = v49;
      v34 = v50;
      v36 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
      v37 = v47;
      v36(v47, v33, v50);
      v38 = v48;
      v36(v48, &v30[*(int *)(v26 + 24)], v34);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v32 = dispatch thunk of static Equatable.== infix(_:_:)();
      v39 = *(void (**)(char *, uint64_t))(v35 + 8);
      v39(v38, v34);
      v39(v37, v34);
      return v32 & 1;
    }
LABEL_23:
    v32 = 0;
  }
  return v32 & 1;
}

uint64_t specialized static PgQuery_AlterPublicationStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  uint64_t v14;
  uint64_t AlterPublicationStmt;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  void (*v18)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16)) & 1) == 0
      || (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24)) & 1) == 0
      || *(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32))
    {
      goto LABEL_9;
    }
    v14 = *(_QWORD *)(a2 + 40);
    if (*(_BYTE *)(a2 + 48) == 1)
      __asm { BR              X11 }
    if (*(_QWORD *)(a1 + 40) == v14)
    {
      AlterPublicationStmt = type metadata accessor for PgQuery_AlterPublicationStmt(0);
      v16 = a1 + *(int *)(AlterPublicationStmt + 36);
      v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v17(v10, v16, v4);
      v17(v8, a2 + *(int *)(AlterPublicationStmt + 36), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      v18 = *(void (**)(char *, uint64_t))(v5 + 8);
      v18(v8, v4);
      v18(v10, v4);
    }
    else
    {
LABEL_9:
      v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_AlterDatabaseSetStmt.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t VariableSetStmt;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t AlterDatabaseSetStmt;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  void (*v36)(char *, uint64_t);
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;

  v4 = type metadata accessor for UnknownStorage();
  v46 = *(_QWORD *)(v4 - 8);
  v47 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v45 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v44 = (char *)&v42 - v7;
  VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  v9 = *(_QWORD *)(VariableSetStmt - 8);
  MEMORY[0x1E0C80A78](VariableSetStmt);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_VariableSetStmt?, PgQuery_VariableSetStmt?));
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v42 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v42 - v22;
  v24 = *(_QWORD *)a1;
  v25 = *((_QWORD *)a1 + 1);
  v48 = a1;
  v49 = a2;
  if (v24 == *(_QWORD *)a2 && v25 == *((_QWORD *)a2 + 1)
    || (v26 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    AlterDatabaseSetStmt = type metadata accessor for PgQuery_AlterDatabaseSetStmt(0);
    outlined init with copy of PgQuery_Alias?((uint64_t)&v48[*(int *)(AlterDatabaseSetStmt + 24)], (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    v43 = AlterDatabaseSetStmt;
    outlined init with copy of PgQuery_Alias?((uint64_t)&v49[*(int *)(AlterDatabaseSetStmt + 24)], (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    v28 = (uint64_t)&v14[*(int *)(v12 + 48)];
    outlined init with copy of PgQuery_Alias?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    outlined init with copy of PgQuery_Alias?((uint64_t)v21, v28, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v29((uint64_t)v14, 1, VariableSetStmt) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      if (v29(v28, 1, VariableSetStmt) == 1)
      {
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
        v30 = v47;
LABEL_7:
        v31 = v43;
        v32 = v44;
        v33 = v46;
        v34 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
        v34(v44, &v48[*(int *)(v43 + 20)], v30);
        v35 = v45;
        v34(v45, &v49[*(int *)(v31 + 20)], v30);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v26 = dispatch thunk of static Equatable.== infix(_:_:)();
        v36 = *(void (**)(char *, uint64_t))(v33 + 8);
        v36(v35, v30);
        v36(v32, v30);
        return v26 & 1;
      }
    }
    else
    {
      outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      if (v29(v28, 1, VariableSetStmt) != 1)
      {
        outlined init with take of PgQuery_OidList(v28, (uint64_t)v11, type metadata accessor for PgQuery_VariableSetStmt);
        v39 = *(_QWORD *)v11;
        if (v11[8] == 1)
          __asm { BR              X11 }
        if (*(_QWORD *)v18 == v39
          && (*((_QWORD *)v18 + 2) == *((_QWORD *)v11 + 2) && *((_QWORD *)v18 + 3) == *((_QWORD *)v11 + 3)
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          && (specialized static Array<A>.== infix(_:_:)(*((_QWORD *)v18 + 4), *((_QWORD *)v11 + 4)) & 1) != 0
          && v18[40] == v11[40])
        {
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v30 = v47;
          v40 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_VariableSetStmt);
          outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
          outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
          outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_VariableSetStmt);
          outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
          if ((v40 & 1) != 0)
            goto LABEL_7;
LABEL_23:
          v26 = 0;
          return v26 & 1;
        }
        outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_VariableSetStmt);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
        outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_VariableSetStmt);
        v38 = (uint64_t)v14;
        v37 = &demangling cache variable for type metadata for PgQuery_VariableSetStmt?;
LABEL_22:
        outlined destroy of (key: String, value: StorableValue)(v38, v37);
        goto LABEL_23;
      }
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_VariableSetStmt);
    }
    v37 = &demangling cache variable for type metadata for (PgQuery_VariableSetStmt?, PgQuery_VariableSetStmt?);
    v38 = (uint64_t)v14;
    goto LABEL_22;
  }
  return v26 & 1;
}

uint64_t specialized static PgQuery_PartitionRangeDatum.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t Node;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t PartitionRangeDatum;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t);
  int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  char v39;
  int v40;
  int v41;
  BOOL v42;
  void (*v43)(char *, uint64_t, uint64_t);
  char *v44;
  char v45;
  void (*v46)(char *, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v54 = (char *)&v48 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v11 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v18 = MEMORY[0x1E0C80A78](v17);
  v52 = (uint64_t)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v55 = (uint64_t)&v48 - v20;
  PartitionRangeDatum = type metadata accessor for PgQuery_PartitionRangeDatum(0);
  v22 = a1;
  v23 = *(int *)(PartitionRangeDatum + 20);
  v24 = *(_QWORD *)(a1 + v23);
  v53 = a2;
  v25 = *(_QWORD *)(a2 + v23);
  if (v24 == v25)
    goto LABEL_16;
  v26 = *(_QWORD *)(v25 + 16);
  if (*(_BYTE *)(v25 + 24) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)(v24 + 16) != v26)
    goto LABEL_21;
  v48 = v13;
  v49 = v22;
  v50 = v5;
  v51 = v8;
  v27 = v24
      + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_PartitionRangeDatumP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__value;
  v28 = v55;
  outlined init with copy of PgQuery_Alias?(v25+ OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_PartitionRangeDatumP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__value, v55, &demangling cache variable for type metadata for PgQuery_Node?);
  v29 = (uint64_t)&v16[*(int *)(v14 + 48)];
  outlined init with copy of PgQuery_Alias?(v27, (uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v28, v29, &demangling cache variable for type metadata for PgQuery_Node?);
  v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v30((uint64_t)v16, 1, Node) == 1)
  {
    v31 = v30(v29, 1, Node);
    swift_retain();
    swift_retain();
    v8 = v51;
    if (v31 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)(v55, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_14;
    }
    v33 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_19;
  }
  v32 = v52;
  outlined init with copy of PgQuery_Alias?((uint64_t)v16, v52, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v30(v29, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    v33 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_18:
    outlined destroy of PgQuery_Alias(v32, type metadata accessor for PgQuery_Node);
LABEL_19:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v16, v33);
    outlined destroy of (key: String, value: StorableValue)(v55, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_20;
  }
  v34 = (uint64_t)v48;
  outlined init with take of PgQuery_OidList(v29, (uint64_t)v48, type metadata accessor for PgQuery_Node);
  v35 = *(int *)(Node + 20);
  v36 = *(_QWORD *)(v32 + v35);
  v37 = *(_QWORD *)(v34 + v35);
  swift_retain();
  swift_retain();
  if (v36 != v37)
  {
    swift_retain();
    swift_retain();
    v38 = closure #1 in static PgQuery_Node.== infix(_:_:)(v36, v37);
    swift_release();
    swift_release();
    if (!v38)
    {
      outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
      v33 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_18;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v39 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v32, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v55, &demangling cache variable for type metadata for PgQuery_Node?);
  v8 = v51;
  if ((v39 & 1) == 0)
  {
LABEL_20:
    swift_release();
    swift_release();
LABEL_21:
    v45 = 0;
    return v45 & 1;
  }
LABEL_14:
  v40 = *(_DWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_PartitionRangeDatumP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  v41 = *(_DWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_PartitionRangeDatumP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  v42 = v40 == v41;
  v22 = v49;
  v5 = v50;
  if (!v42)
    goto LABEL_21;
LABEL_16:
  v43 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v44 = v54;
  v43(v54, v22, v4);
  v43(v8, v53, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v45 = dispatch thunk of static Equatable.== infix(_:_:)();
  v46 = *(void (**)(char *, uint64_t))(v5 + 8);
  v46(v8, v4);
  v46(v44, v4);
  return v45 & 1;
}

uint64_t specialized static PgQuery_DropUserMappingStmt.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t RoleSpec;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t DropUserMappingStmt;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  char *v30;
  _QWORD *v31;
  char v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  char *v38;
  void (*v39)(char *, uint64_t);
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;

  v4 = type metadata accessor for UnknownStorage();
  v49 = *(_QWORD *)(v4 - 8);
  v50 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v48 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v47 = (char *)&v46 - v7;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v9 = *(_QWORD *)(RoleSpec - 8);
  MEMORY[0x1E0C80A78](RoleSpec);
  v51 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v46 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v46 - v21;
  DropUserMappingStmt = type metadata accessor for PgQuery_DropUserMappingStmt(0);
  v24 = *(int *)(DropUserMappingStmt + 28);
  v52 = a1;
  v25 = (uint64_t)a1 + v24;
  v26 = DropUserMappingStmt;
  outlined init with copy of PgQuery_Alias?(v25, (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v27 = *(int *)(v26 + 28);
  v53 = a2;
  outlined init with copy of PgQuery_Alias?((uint64_t)&a2[v27], (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v28, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, RoleSpec) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    if (v29(v28, 1, RoleSpec) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      goto LABEL_4;
    }
    goto LABEL_11;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if (v29(v28, 1, RoleSpec) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RoleSpec);
LABEL_11:
    v40 = &demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?);
    v41 = (uint64_t)v13;
LABEL_22:
    outlined destroy of (key: String, value: StorableValue)(v41, v40);
    goto LABEL_23;
  }
  v42 = v51;
  outlined init with take of PgQuery_OidList(v28, v51, type metadata accessor for PgQuery_RoleSpec);
  v43 = *(_QWORD *)v42;
  if (*(_BYTE *)(v42 + 8) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)v17 != v43
    || (*((_QWORD *)v17 + 2) != *(_QWORD *)(v42 + 16) || *((_QWORD *)v17 + 3) != *(_QWORD *)(v42 + 24))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || *((_DWORD *)v17 + 8) != *(_DWORD *)(v42 + 32))
  {
    outlined destroy of PgQuery_Alias(v42, type metadata accessor for PgQuery_RoleSpec);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RoleSpec);
    v41 = (uint64_t)v13;
    v40 = &demangling cache variable for type metadata for PgQuery_RoleSpec?;
    goto LABEL_22;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v44 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v42, type metadata accessor for PgQuery_RoleSpec);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RoleSpec);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if ((v44 & 1) == 0)
    goto LABEL_23;
LABEL_4:
  v31 = v52;
  v30 = v53;
  if (*v52 == *(_QWORD *)v53 && v52[1] == *((_QWORD *)v53 + 1)
    || (v32 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*((unsigned __int8 *)v31 + 16) == v30[16])
    {
      v33 = (char *)v31 + *(int *)(v26 + 24);
      v35 = v49;
      v34 = v50;
      v36 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
      v37 = v47;
      v36(v47, v33, v50);
      v38 = v48;
      v36(v48, &v30[*(int *)(v26 + 24)], v34);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v32 = dispatch thunk of static Equatable.== infix(_:_:)();
      v39 = *(void (**)(char *, uint64_t))(v35 + 8);
      v39(v38, v34);
      v39(v37, v34);
      return v32 & 1;
    }
LABEL_23:
    v32 = 0;
  }
  return v32 & 1;
}

uint64_t specialized static PgQuery_CreateTransformStmt.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t TypeName;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t TransformStmt;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  int v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  char v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  unsigned __int8 *v62;
  uint64_t v63;
  void (*v64)(char *, unsigned __int8 *, uint64_t);
  char *v65;
  uint64_t v66;
  char *v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  int v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  int *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t ObjectWithArgs;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;

  v4 = type metadata accessor for UnknownStorage();
  v95 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v94 = (char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v93 = (char *)&v86 - v7;
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  v101 = *(_QWORD *)(ObjectWithArgs - 8);
  v8 = MEMORY[0x1E0C80A78](ObjectWithArgs);
  v92 = (uint64_t)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v97 = (uint64_t)&v86 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_ObjectWithArgs?, PgQuery_ObjectWithArgs?));
  v12 = MEMORY[0x1E0C80A78](v11);
  v98 = (uint64_t)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v102 = (uint64_t)&v86 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  v16 = MEMORY[0x1E0C80A78](v15);
  v96 = (uint64_t)&v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v108 = (char *)&v86 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v99 = (uint64_t)&v86 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v100 = (uint64_t)&v86 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v106 = (uint64_t)&v86 - v25;
  MEMORY[0x1E0C80A78](v24);
  v104 = (uint64_t)&v86 - v26;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v28 = *(_QWORD *)(TypeName - 8);
  MEMORY[0x1E0C80A78](TypeName);
  v105 = (uint64_t)&v86 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
  MEMORY[0x1E0C80A78](v30);
  v32 = (char *)&v86 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  v34 = MEMORY[0x1E0C80A78](v33);
  v107 = (uint64_t)&v86 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = MEMORY[0x1E0C80A78](v34);
  v38 = (char *)&v86 - v37;
  MEMORY[0x1E0C80A78](v36);
  v40 = (char *)&v86 - v39;
  if (*a1 != *a2)
    goto LABEL_41;
  v88 = v11;
  v87 = v4;
  TransformStmt = type metadata accessor for PgQuery_CreateTransformStmt(0);
  v42 = *(int *)(TransformStmt + 28);
  v89 = a1;
  outlined init with copy of PgQuery_Alias?((uint64_t)&a1[v42], (uint64_t)v40, &demangling cache variable for type metadata for PgQuery_TypeName?);
  v90 = a2;
  v91 = (int *)TransformStmt;
  outlined init with copy of PgQuery_Alias?((uint64_t)&a2[*(int *)(TransformStmt + 28)], (uint64_t)v38, &demangling cache variable for type metadata for PgQuery_TypeName?);
  v43 = (uint64_t)&v32[*(int *)(v30 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v40, (uint64_t)v32, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v38, v43, &demangling cache variable for type metadata for PgQuery_TypeName?);
  v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  if (v44((uint64_t)v32, 1, TypeName) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v38, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v40, &demangling cache variable for type metadata for PgQuery_TypeName?);
    v45 = v44(v43, 1, TypeName);
    v46 = (uint64_t)v108;
    if (v45 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v32, &demangling cache variable for type metadata for PgQuery_TypeName?);
      goto LABEL_5;
    }
LABEL_17:
    v71 = &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?);
    v72 = (uint64_t)v32;
LABEL_40:
    outlined destroy of (key: String, value: StorableValue)(v72, v71);
    goto LABEL_41;
  }
  v69 = v107;
  outlined init with copy of PgQuery_Alias?((uint64_t)v32, v107, &demangling cache variable for type metadata for PgQuery_TypeName?);
  v70 = v44(v43, 1, TypeName);
  v46 = (uint64_t)v108;
  if (v70 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v38, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v40, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined destroy of PgQuery_Alias(v69, type metadata accessor for PgQuery_TypeName);
    goto LABEL_17;
  }
  v73 = v105;
  outlined init with take of PgQuery_OidList(v43, v105, type metadata accessor for PgQuery_TypeName);
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)v69, *(_QWORD *)v73) & 1) == 0
    || *(_DWORD *)(v69 + 8) != *(_DWORD *)(v73 + 8)
    || *(unsigned __int8 *)(v69 + 12) != *(unsigned __int8 *)(v73 + 12)
    || *(unsigned __int8 *)(v69 + 13) != *(unsigned __int8 *)(v73 + 13)
    || (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v69 + 16), *(_QWORD *)(v73 + 16)) & 1) == 0
    || *(_DWORD *)(v69 + 24) != *(_DWORD *)(v73 + 24)
    || (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v69 + 32), *(_QWORD *)(v73 + 32)) & 1) == 0
    || *(_DWORD *)(v69 + 40) != *(_DWORD *)(v73 + 40))
  {
    outlined destroy of PgQuery_Alias(v73, type metadata accessor for PgQuery_TypeName);
    v75 = &demangling cache variable for type metadata for PgQuery_TypeName?;
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v38, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v40, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined destroy of PgQuery_Alias(v69, type metadata accessor for PgQuery_TypeName);
    v72 = (uint64_t)v32;
LABEL_29:
    v71 = v75;
    goto LABEL_40;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v74 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v73, type metadata accessor for PgQuery_TypeName);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v38, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v40, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined destroy of PgQuery_Alias(v69, type metadata accessor for PgQuery_TypeName);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v32, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((v74 & 1) == 0)
    goto LABEL_41;
LABEL_5:
  v48 = v89;
  v47 = v90;
  if (*((_QWORD *)v89 + 1) == *((_QWORD *)v90 + 1) && *((_QWORD *)v89 + 2) == *((_QWORD *)v90 + 2)
    || (v49 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v50 = v91;
    v51 = v104;
    outlined init with copy of PgQuery_Alias?((uint64_t)&v48[v91[8]], v104, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    v52 = v106;
    outlined init with copy of PgQuery_Alias?((uint64_t)&v47[v50[8]], v106, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    v53 = v102;
    v54 = v102 + *(int *)(v88 + 48);
    outlined init with copy of PgQuery_Alias?(v51, v102, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined init with copy of PgQuery_Alias?(v52, v54, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    v55 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v101 + 48);
    v56 = ObjectWithArgs;
    if (v55(v53, 1, ObjectWithArgs) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v52, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      outlined destroy of (key: String, value: StorableValue)(v51, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      if (v55(v54, 1, v56) == 1)
      {
        outlined destroy of (key: String, value: StorableValue)(v53, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
LABEL_11:
        v57 = v91;
        v58 = v99;
        outlined init with copy of PgQuery_Alias?((uint64_t)&v48[v91[9]], v99, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        outlined init with copy of PgQuery_Alias?((uint64_t)&v47[v57[9]], v46, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        v59 = v98;
        v60 = v98 + *(int *)(v88 + 48);
        outlined init with copy of PgQuery_Alias?(v58, v98, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        outlined init with copy of PgQuery_Alias?(v46, v60, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        if (v55(v59, 1, v56) == 1)
        {
          outlined destroy of (key: String, value: StorableValue)(v46, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          outlined destroy of (key: String, value: StorableValue)(v58, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          if (v55(v60, 1, v56) == 1)
          {
            outlined destroy of (key: String, value: StorableValue)(v59, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
LABEL_14:
            v61 = v91;
            v62 = &v48[v91[6]];
            v63 = v95;
            v64 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v95 + 16);
            v65 = v93;
            v66 = v87;
            v64(v93, v62, v87);
            v67 = v94;
            v64(v94, &v47[v61[6]], v66);
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
            v49 = dispatch thunk of static Equatable.== infix(_:_:)();
            v68 = *(void (**)(char *, uint64_t))(v63 + 8);
            v68(v67, v66);
            v68(v65, v66);
            return v49 & 1;
          }
          goto LABEL_39;
        }
        v78 = v96;
        outlined init with copy of PgQuery_Alias?(v59, v96, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        if (v55(v60, 1, v56) == 1)
        {
          outlined destroy of (key: String, value: StorableValue)(v46, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          outlined destroy of (key: String, value: StorableValue)(v99, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          outlined destroy of PgQuery_Alias(v78, type metadata accessor for PgQuery_ObjectWithArgs);
LABEL_39:
          v71 = &demangling cache variable for type metadata for (PgQuery_ObjectWithArgs?, PgQuery_ObjectWithArgs?);
          v72 = v59;
          goto LABEL_40;
        }
        v80 = v92;
        outlined init with take of PgQuery_OidList(v60, v92, type metadata accessor for PgQuery_ObjectWithArgs);
        v81 = specialized static Array<A>.== infix(_:_:)(*(_QWORD *)v78, *(_QWORD *)v80);
        v82 = v99;
        if ((v81 & 1) != 0
          && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v78 + 8), *(_QWORD *)(v80 + 8)) & 1) != 0
          && *(unsigned __int8 *)(v78 + 16) == *(unsigned __int8 *)(v80 + 16))
        {
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v85 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of PgQuery_Alias(v80, type metadata accessor for PgQuery_ObjectWithArgs);
          outlined destroy of (key: String, value: StorableValue)(v46, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          outlined destroy of (key: String, value: StorableValue)(v82, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          outlined destroy of PgQuery_Alias(v78, type metadata accessor for PgQuery_ObjectWithArgs);
          outlined destroy of (key: String, value: StorableValue)(v59, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          if ((v85 & 1) != 0)
            goto LABEL_14;
LABEL_41:
          v49 = 0;
          return v49 & 1;
        }
        outlined destroy of PgQuery_Alias(v80, type metadata accessor for PgQuery_ObjectWithArgs);
        v83 = v78;
        v75 = &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?;
        outlined destroy of (key: String, value: StorableValue)(v46, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        outlined destroy of (key: String, value: StorableValue)(v82, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        outlined destroy of PgQuery_Alias(v83, type metadata accessor for PgQuery_ObjectWithArgs);
        v72 = v59;
        goto LABEL_29;
      }
    }
    else
    {
      v76 = v100;
      outlined init with copy of PgQuery_Alias?(v53, v100, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      if (v55(v54, 1, v56) != 1)
      {
        v77 = v97;
        outlined init with take of PgQuery_OidList(v54, v97, type metadata accessor for PgQuery_ObjectWithArgs);
        if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)v76, *(_QWORD *)v77) & 1) == 0
          || (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v76 + 8), *(_QWORD *)(v77 + 8)) & 1) == 0
          || *(unsigned __int8 *)(v76 + 16) != *(unsigned __int8 *)(v77 + 16))
        {
          outlined destroy of PgQuery_Alias(v77, type metadata accessor for PgQuery_ObjectWithArgs);
          outlined destroy of (key: String, value: StorableValue)(v106, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          outlined destroy of (key: String, value: StorableValue)(v104, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          outlined destroy of PgQuery_Alias(v76, type metadata accessor for PgQuery_ObjectWithArgs);
          v72 = v53;
          v71 = &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?;
          goto LABEL_40;
        }
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v84 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v77, type metadata accessor for PgQuery_ObjectWithArgs);
        outlined destroy of (key: String, value: StorableValue)(v106, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        outlined destroy of (key: String, value: StorableValue)(v104, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        outlined destroy of PgQuery_Alias(v76, type metadata accessor for PgQuery_ObjectWithArgs);
        outlined destroy of (key: String, value: StorableValue)(v53, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        if ((v84 & 1) == 0)
          goto LABEL_41;
        goto LABEL_11;
      }
      outlined destroy of (key: String, value: StorableValue)(v106, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      outlined destroy of (key: String, value: StorableValue)(v51, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      outlined destroy of PgQuery_Alias(v76, type metadata accessor for PgQuery_ObjectWithArgs);
    }
    v71 = &demangling cache variable for type metadata for (PgQuery_ObjectWithArgs?, PgQuery_ObjectWithArgs?);
    v72 = v53;
    goto LABEL_40;
  }
  return v49 & 1;
}

uint64_t specialized static PgQuery_CreateSubscriptionStmt.== infix(_:_:)(_QWORD *a1, char *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, char *, uint64_t);
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v21 - v11;
  v13 = *a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1);
  if (v13 || (v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v15 = a1[2] == *((_QWORD *)a2 + 2) && a1[3] == *((_QWORD *)a2 + 3);
    if (v15 || (v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if ((specialized static Array<A>.== infix(_:_:)(a1[4], *((_QWORD *)a2 + 4)) & 1) != 0
        && (specialized static Array<A>.== infix(_:_:)(a1[5], *((_QWORD *)a2 + 5)) & 1) != 0)
      {
        v16 = a3(0);
        v17 = (char *)a1 + *(int *)(v16 + 32);
        v18 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
        v18(v12, v17, v6);
        v18(v10, &a2[*(int *)(v16 + 32)], v6);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v14 = dispatch thunk of static Equatable.== infix(_:_:)();
        v19 = *(void (**)(char *, uint64_t))(v7 + 8);
        v19(v10, v6);
        v19(v12, v6);
      }
      else
      {
        v14 = 0;
      }
    }
  }
  return v14 & 1;
}

uint64_t specialized static PgQuery_RefreshMatViewStmt.== infix(_:_:)(unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t RangeVar;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  char *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t RefreshMatViewStmt;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, unsigned __int8 *, uint64_t);
  uint64_t v35;
  char *v36;
  char *v37;
  char v38;
  void (*v39)(char *, uint64_t);
  char *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;

  v2 = type metadata accessor for UnknownStorage();
  v48 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x1E0C80A78](v2);
  v47 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v46 = (char *)&v41 - v5;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v7 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v41 - v18;
  MEMORY[0x1E0C80A78](v17);
  v22 = (char *)&v41 - v21;
  if (*a1 != *v20 || a1[1] != v20[1])
    goto LABEL_11;
  v41 = v9;
  v45 = v2;
  v23 = a1;
  v24 = v20;
  RefreshMatViewStmt = type metadata accessor for PgQuery_RefreshMatViewStmt(0);
  v26 = *(int *)(RefreshMatViewStmt + 28);
  v43 = v23;
  outlined init with copy of PgQuery_Alias?((uint64_t)&v23[v26], (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v42 = RefreshMatViewStmt;
  v27 = *(int *)(RefreshMatViewStmt + 28);
  v44 = v24;
  outlined init with copy of PgQuery_Alias?((uint64_t)&v24[v27], (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v28 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v22, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v19, v28, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (v29((uint64_t)v12, 1, RangeVar) != 1)
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if (v29(v28, 1, RangeVar) != 1)
    {
      v30 = (uint64_t)v41;
      outlined init with take of PgQuery_OidList(v28, (uint64_t)v41, type metadata accessor for PgQuery_RangeVar);
      v31 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v16, v30);
      outlined destroy of PgQuery_Alias(v30, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      if ((v31 & 1) != 0)
        goto LABEL_10;
LABEL_11:
      v38 = 0;
      return v38 & 1;
    }
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_RangeVar);
LABEL_8:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    goto LABEL_11;
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v29(v28, 1, RangeVar) != 1)
    goto LABEL_8;
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_RangeVar?);
LABEL_10:
  v32 = v42;
  v33 = v48;
  v34 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v48 + 16);
  v35 = v45;
  v36 = v46;
  v34(v46, &v43[*(int *)(v42 + 24)], v45);
  v37 = v47;
  v34(v47, &v44[*(int *)(v32 + 24)], v35);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v38 = dispatch thunk of static Equatable.== infix(_:_:)();
  v39 = *(void (**)(char *, uint64_t))(v33 + 8);
  v39(v37, v35);
  v39(v36, v35);
  return v38 & 1;
}

uint64_t specialized static PgQuery_DropTableSpaceStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  uint64_t DropTableSpaceStmt;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  v11 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16))
    {
      DropTableSpaceStmt = type metadata accessor for PgQuery_DropTableSpaceStmt(0);
      v14 = a1 + *(int *)(DropTableSpaceStmt + 24);
      v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v15(v10, v14, v4);
      v15(v8, a2 + *(int *)(DropTableSpaceStmt + 24), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
    }
    else
    {
      v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_CreateOpFamilyStmt.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  uint64_t OpFamilyStmt;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0)
  {
    v11 = a1[1] == a2[1] && a1[2] == a2[2];
    if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      OpFamilyStmt = type metadata accessor for PgQuery_CreateOpFamilyStmt(0);
      v14 = (char *)a1 + *(int *)(OpFamilyStmt + 24);
      v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v15(v10, v14, v4);
      v15(v8, (char *)a2 + *(int *)(OpFamilyStmt + 24), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
    }
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_CreateFunctionStmt.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TypeName;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t FunctionStmt;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, unsigned __int8 *, uint64_t);
  char *v35;
  unsigned __int8 *v36;
  char *v37;
  char v38;
  void (*v39)(char *, uint64_t);
  uint64_t *v40;
  uint64_t v41;
  char v42;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;

  v4 = type metadata accessor for UnknownStorage();
  v48 = *(_QWORD *)(v4 - 8);
  v49 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v47 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v46 = (char *)&v44 - v7;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v9 = *(_QWORD *)(TypeName - 8);
  MEMORY[0x1E0C80A78](TypeName);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v44 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v44 - v22;
  if (*a1 != *a2
    || a1[1] != a2[1]
    || (specialized static Array<A>.== infix(_:_:)(*((_QWORD *)a1 + 1), *((_QWORD *)a2 + 1)) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(*((_QWORD *)a1 + 2), *((_QWORD *)a2 + 2)) & 1) == 0)
  {
    goto LABEL_25;
  }
  FunctionStmt = type metadata accessor for PgQuery_CreateFunctionStmt(0);
  v45 = v14;
  v25 = FunctionStmt;
  outlined init with copy of PgQuery_Alias?((uint64_t)&a1[*(int *)(FunctionStmt + 40)], (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TypeName?);
  v44 = v25;
  v26 = *(int *)(v25 + 40);
  v27 = (uint64_t)v45;
  outlined init with copy of PgQuery_Alias?((uint64_t)&a2[v26], (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_TypeName?);
  v28 = v27 + *(int *)(v12 + 48);
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v27, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, v28, &demangling cache variable for type metadata for PgQuery_TypeName?);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29(v27, 1, TypeName) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TypeName?);
    if (v29(v28, 1, TypeName) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v27, &demangling cache variable for type metadata for PgQuery_TypeName?);
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  outlined init with copy of PgQuery_Alias?(v27, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if (v29(v28, 1, TypeName) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_TypeName);
LABEL_12:
    v40 = &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?);
    v41 = v27;
LABEL_24:
    outlined destroy of (key: String, value: StorableValue)(v41, v40);
    goto LABEL_25;
  }
  outlined init with take of PgQuery_OidList(v28, (uint64_t)v11, type metadata accessor for PgQuery_TypeName);
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)v18, *(_QWORD *)v11) & 1) == 0
    || *((_DWORD *)v18 + 2) != *((_DWORD *)v11 + 2)
    || v18[12] != v11[12]
    || v18[13] != v11[13]
    || (specialized static Array<A>.== infix(_:_:)(*((_QWORD *)v18 + 2), *((_QWORD *)v11 + 2)) & 1) == 0
    || *((_DWORD *)v18 + 6) != *((_DWORD *)v11 + 6)
    || (specialized static Array<A>.== infix(_:_:)(*((_QWORD *)v18 + 4), *((_QWORD *)v11 + 4)) & 1) == 0
    || *((_DWORD *)v18 + 10) != *((_DWORD *)v11 + 10))
  {
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_TypeName);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_TypeName);
    v41 = v27;
    v40 = &demangling cache variable for type metadata for PgQuery_TypeName?;
    goto LABEL_24;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v42 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_TypeName);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_TypeName);
  outlined destroy of (key: String, value: StorableValue)(v27, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((v42 & 1) == 0)
    goto LABEL_25;
LABEL_8:
  if ((specialized static Array<A>.== infix(_:_:)(*((_QWORD *)a1 + 3), *((_QWORD *)a2 + 3)) & 1) == 0)
  {
LABEL_25:
    v38 = 0;
    return v38 & 1;
  }
  v30 = v44;
  v31 = &a1[*(int *)(v44 + 36)];
  v33 = v48;
  v32 = v49;
  v34 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v48 + 16);
  v35 = v46;
  v34(v46, v31, v49);
  v36 = &a2[*(int *)(v30 + 36)];
  v37 = v47;
  v34(v47, v36, v32);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v38 = dispatch thunk of static Equatable.== infix(_:_:)();
  v39 = *(void (**)(char *, uint64_t))(v33 + 8);
  v39(v37, v32);
  v39(v35, v32);
  return v38 & 1;
}

uint64_t specialized static PgQuery_ConvertRowtypeExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t Node;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t ConvertRowtypeExpr;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  char v64;
  uint64_t v65;
  char v66;
  int v67;
  int v68;
  BOOL v69;
  void (*v70)(char *, uint64_t, uint64_t);
  char *v71;
  void (*v72)(char *, uint64_t);
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v86 = a1;
  v3 = type metadata accessor for UnknownStorage();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v74 - v8;
  Node = type metadata accessor for PgQuery_Node(0);
  v11 = *(_QWORD *)(Node - 8);
  v12 = MEMORY[0x1E0C80A78](Node);
  v80 = (uint64_t)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v82 = (uint64_t)&v74 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v16 = MEMORY[0x1E0C80A78](v15);
  v84 = (uint64_t)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v74 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v81 = (uint64_t)&v74 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v83 = (uint64_t)&v74 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v85 = (uint64_t)&v74 - v26;
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v74 - v27;
  ConvertRowtypeExpr = type metadata accessor for PgQuery_ConvertRowtypeExpr(0);
  v30 = v86;
  v31 = *(int *)(ConvertRowtypeExpr + 20);
  v32 = *(_QWORD *)(a2 + v31);
  v87 = *(_QWORD *)(v86 + v31);
  if (v87 == v32)
    goto LABEL_34;
  v74 = v9;
  v75 = a2;
  v76 = v7;
  v77 = v4;
  v79 = v3;
  v33 = v87
      + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  v34 = v32;
  outlined init with copy of PgQuery_Alias?(v32+ OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  v78 = v15;
  v35 = (uint64_t)&v19[*(int *)(v15 + 48)];
  outlined init with copy of PgQuery_Alias?(v33, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, v35, &demangling cache variable for type metadata for PgQuery_Node?);
  v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v36((uint64_t)v19, 1, Node) == 1)
  {
    v37 = v36(v35, 1, Node);
    swift_retain();
    v38 = v34;
    swift_retain();
    if (v37 == 1)
    {
      v39 = Node;
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
      v40 = v79;
      v41 = v38;
      goto LABEL_11;
    }
    v44 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_25:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, v44);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_31;
  }
  v42 = v34;
  v43 = v85;
  outlined init with copy of PgQuery_Alias?((uint64_t)v19, v85, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v36(v35, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    v44 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_24:
    outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_Node);
    goto LABEL_25;
  }
  v45 = v82;
  outlined init with take of PgQuery_OidList(v35, v82, type metadata accessor for PgQuery_Node);
  v39 = Node;
  v46 = *(int *)(Node + 20);
  v47 = *(_QWORD *)(v43 + v46);
  v48 = *(_QWORD *)(v45 + v46);
  swift_retain();
  swift_retain();
  if (v47 != v48)
  {
    swift_retain();
    swift_retain();
    v49 = closure #1 in static PgQuery_Node.== infix(_:_:)(v47, v48);
    swift_release();
    swift_release();
    if (!v49)
    {
      outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_Node);
      v44 = &demangling cache variable for type metadata for PgQuery_Node?;
      v43 = v85;
      goto LABEL_24;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v50 = v85;
  v40 = v79;
  v51 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v50, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  v41 = v42;
  if ((v51 & 1) == 0)
    goto LABEL_31;
LABEL_11:
  v52 = v87
      + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  v85 = v41;
  v53 = v83;
  outlined init with copy of PgQuery_Alias?(v41+ OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v83, &demangling cache variable for type metadata for PgQuery_Node?);
  v54 = v84;
  v55 = v84 + *(int *)(v78 + 48);
  outlined init with copy of PgQuery_Alias?(v52, v84, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v53, v55, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v36(v54, 1, v39) != 1)
  {
    v57 = v81;
    outlined init with copy of PgQuery_Alias?(v54, v81, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v36(v55, 1, v39) == 1)
    {
      v58 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v59 = v80;
      outlined init with take of PgQuery_OidList(v55, v80, type metadata accessor for PgQuery_Node);
      v60 = *(int *)(v39 + 20);
      v61 = *(_QWORD *)(v57 + v60);
      v62 = *(_QWORD *)(v59 + v60);
      if (v61 == v62
        || (swift_retain(),
            swift_retain(),
            v63 = closure #1 in static PgQuery_Node.== infix(_:_:)(v61, v62),
            swift_release(),
            swift_release(),
            v63))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v64 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v59, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v57, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)(v54, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v53, &demangling cache variable for type metadata for PgQuery_Node?);
        v56 = v85;
        if ((v64 & 1) == 0)
          goto LABEL_31;
        goto LABEL_20;
      }
      outlined destroy of PgQuery_Alias(v59, type metadata accessor for PgQuery_Node);
      v58 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v57, type metadata accessor for PgQuery_Node);
LABEL_30:
    outlined destroy of (key: String, value: StorableValue)(v54, v58);
    outlined destroy of (key: String, value: StorableValue)(v53, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_31;
  }
  if (v36(v55, 1, v39) != 1)
  {
    v58 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_30;
  }
  outlined destroy of (key: String, value: StorableValue)(v54, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v53, &demangling cache variable for type metadata for PgQuery_Node?);
  v56 = v85;
LABEL_20:
  if (*(_DWORD *)(v87
                 + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) == *(_DWORD *)(v56 + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype))
  {
    v65 = *(_QWORD *)(v56
                    + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__convertformat);
    if (*(_BYTE *)(v56
                  + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__convertformat
                  + 8) == 1)
      __asm { BR              X11 }
    v4 = v77;
    if (*(_QWORD *)(v87
                   + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__convertformat) == v65)
    {
      v67 = *(_DWORD *)(v87
                      + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      v68 = *(_DWORD *)(v56
                      + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      swift_release();
      swift_release();
      v69 = v67 == v68;
      a2 = v75;
      v7 = v76;
      v9 = v74;
      v30 = v86;
      v3 = v40;
      if (!v69)
      {
        v66 = 0;
        return v66 & 1;
      }
LABEL_34:
      v70 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
      v70(v9, v30, v3);
      v70(v7, a2, v3);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v71 = v7;
      v66 = dispatch thunk of static Equatable.== infix(_:_:)();
      v72 = *(void (**)(char *, uint64_t))(v4 + 8);
      v72(v71, v3);
      v72(v9, v3);
      return v66 & 1;
    }
  }
LABEL_31:
  swift_release();
  swift_release();
  v66 = 0;
  return v66 & 1;
}

uint64_t specialized static PgQuery_TriggerTransition.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  uint64_t TriggerTransition;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  v11 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
      && *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a2 + 17))
    {
      TriggerTransition = type metadata accessor for PgQuery_TriggerTransition(0);
      v14 = a1 + *(int *)(TriggerTransition + 28);
      v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v15(v10, v14, v4);
      v15(v8, a2 + *(int *)(TriggerTransition + 28), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
    }
    else
    {
      v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_ScalarArrayOpExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t ScalarArrayOpExpr;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  int v45;
  int v46;
  BOOL v47;
  void (*v48)(char *, uint64_t, uint64_t);
  char v49;
  void (*v50)(char *, uint64_t);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v52 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v60 = *(_QWORD *)(Node - 8);
  v61 = Node;
  MEMORY[0x1E0C80A78](Node);
  v58 = (uint64_t)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v59 = (uint64_t)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v52 - v19;
  ScalarArrayOpExpr = type metadata accessor for PgQuery_ScalarArrayOpExpr(0);
  v22 = a1;
  v23 = *(int *)(ScalarArrayOpExpr + 20);
  v24 = *(_QWORD *)(a1 + v23);
  v25 = *(_QWORD *)(a2 + v23);
  if (v24 == v25)
    goto LABEL_18;
  v54 = a2;
  v55 = v22;
  v53 = v10;
  v56 = v5;
  v57 = v4;
  v26 = v24
      + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v25+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  v28 = (uint64_t)v20;
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v27, &demangling cache variable for type metadata for PgQuery_Node?);
  v29 = v61;
  v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48);
  if (v30((uint64_t)v15, 1, v61) != 1)
  {
    v32 = v25;
    v33 = v59;
    outlined init with copy of PgQuery_Alias?((uint64_t)v15, v59, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v30(v27, 1, v29) == 1)
    {
      swift_retain();
      swift_retain();
      v34 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v35 = v58;
      outlined init with take of PgQuery_OidList(v27, v58, type metadata accessor for PgQuery_Node);
      v36 = *(int *)(v29 + 20);
      v37 = *(_QWORD *)(v33 + v36);
      v38 = *(_QWORD *)(v35 + v36);
      swift_retain();
      swift_retain();
      if (v37 == v38
        || (swift_retain(),
            swift_retain(),
            v39 = closure #1 in static PgQuery_Node.== infix(_:_:)(v37, v38),
            swift_release(),
            swift_release(),
            v39))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v40 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v28, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v40 & 1) != 0)
          goto LABEL_11;
LABEL_22:
        swift_release();
        swift_release();
LABEL_23:
        v49 = 0;
        return v49 & 1;
      }
      outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
      v34 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
LABEL_21:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, v34);
    outlined destroy of (key: String, value: StorableValue)(v28, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_22;
  }
  v31 = v30(v27, 1, v29);
  swift_retain();
  v32 = v25;
  swift_retain();
  if (v31 != 1)
  {
    v34 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_21;
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  if (*(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno))
    goto LABEL_22;
  if (*(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid))
    goto LABEL_22;
  if (*(unsigned __int8 *)(v24
                          + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useOr) != *(unsigned __int8 *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useOr))
    goto LABEL_22;
  if (*(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
    goto LABEL_22;
  v41 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  v42 = *(_QWORD *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  v43 = v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v44 = specialized static Array<A>.== infix(_:_:)(v41, v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v44 & 1) == 0)
    goto LABEL_22;
  v45 = *(_DWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  v46 = *(_DWORD *)(v43
                  + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  v47 = v45 == v46;
  v5 = v56;
  v4 = v57;
  v10 = v53;
  a2 = v54;
  v22 = v55;
  if (!v47)
    goto LABEL_23;
LABEL_18:
  v48 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v48(v10, v22, v4);
  v48(v8, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v49 = dispatch thunk of static Equatable.== infix(_:_:)();
  v50 = *(void (**)(char *, uint64_t))(v5 + 8);
  v50(v8, v4);
  v50(v10, v4);
  return v49 & 1;
}

uint64_t specialized static PgQuery_ReassignOwnedStmt.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t RoleSpec;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t ReassignOwnedStmt;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  char *v35;
  char *v36;
  char v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;

  v4 = type metadata accessor for UnknownStorage();
  v55 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v54 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v53 = (char *)&v46 - v7;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v9 = *(_QWORD *)(RoleSpec - 8);
  MEMORY[0x1E0C80A78](RoleSpec);
  v52 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v46 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v46 - v21;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0)
    goto LABEL_20;
  v51 = v17;
  v48 = v4;
  ReassignOwnedStmt = type metadata accessor for PgQuery_ReassignOwnedStmt(0);
  v24 = *(int *)(ReassignOwnedStmt + 24);
  v49 = a1;
  outlined init with copy of PgQuery_Alias?((uint64_t)a1 + v24, (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v47 = ReassignOwnedStmt;
  v25 = *(int *)(ReassignOwnedStmt + 24);
  v50 = a2;
  outlined init with copy of PgQuery_Alias?((uint64_t)a2 + v25, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v26 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v26, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v27((uint64_t)v13, 1, RoleSpec) != 1)
  {
    v39 = (uint64_t)v51;
    outlined init with copy of PgQuery_Alias?((uint64_t)v13, (uint64_t)v51, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    if (v27(v26, 1, RoleSpec) != 1)
    {
      v42 = v52;
      outlined init with take of PgQuery_OidList(v26, v52, type metadata accessor for PgQuery_RoleSpec);
      v43 = *(_QWORD *)v42;
      if (*(_BYTE *)(v42 + 8) == 1)
        __asm { BR              X11 }
      v29 = v49;
      v28 = v50;
      if (*(_QWORD *)v39 == v43
        && (*(_QWORD *)(v39 + 16) == *(_QWORD *)(v42 + 16) && *(_QWORD *)(v39 + 24) == *(_QWORD *)(v42 + 24)
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        && *(_DWORD *)(v39 + 32) == *(_DWORD *)(v42 + 32))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v44 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v42, type metadata accessor for PgQuery_RoleSpec);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
        outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_RoleSpec);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
        if ((v44 & 1) != 0)
          goto LABEL_5;
LABEL_20:
        v37 = 0;
        return v37 & 1;
      }
      outlined destroy of PgQuery_Alias(v42, type metadata accessor for PgQuery_RoleSpec);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_RoleSpec);
      v41 = (uint64_t)v13;
      v40 = &demangling cache variable for type metadata for PgQuery_RoleSpec?;
LABEL_19:
      outlined destroy of (key: String, value: StorableValue)(v41, v40);
      goto LABEL_20;
    }
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_RoleSpec);
LABEL_8:
    v40 = &demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?);
    v41 = (uint64_t)v13;
    goto LABEL_19;
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if (v27(v26, 1, RoleSpec) != 1)
    goto LABEL_8;
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v29 = v49;
  v28 = v50;
LABEL_5:
  v30 = v47;
  v31 = v48;
  v32 = v55;
  v33 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
  v34 = v53;
  v33(v53, (char *)v29 + *(int *)(v47 + 20), v48);
  v35 = (char *)v28 + *(int *)(v30 + 20);
  v36 = v54;
  v33(v54, v35, v31);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v37 = dispatch thunk of static Equatable.== infix(_:_:)();
  v38 = *(void (**)(char *, uint64_t))(v32 + 8);
  v38(v36, v31);
  v38(v34, v31);
  return v37 & 1;
}

uint64_t specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v23 - v13;
  v15 = *(int *)(a3(0) + 20);
  v16 = *(_QWORD *)(a1 + v15);
  v17 = *(_QWORD *)(a2 + v15);
  if (v16 == v17
    || (swift_retain(), swift_retain(), v18 = a4(v16, v17), swift_release(), swift_release(), (v18 & 1) != 0))
  {
    v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v19(v14, a1, v8);
    v19(v12, a2, v8);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v20 = dispatch thunk of static Equatable.== infix(_:_:)();
    v21 = *(void (**)(char *, uint64_t))(v9 + 8);
    v21(v12, v8);
    v21(v14, v8);
  }
  else
  {
    v20 = 0;
  }
  return v20 & 1;
}

uint64_t specialized static PgQuery_FunctionParameter.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t FunctionParameter;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  char v65;
  void (*v66)(char *, uint64_t, uint64_t);
  char v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t TypeName;
  uint64_t v86;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v71 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v79 = *(_QWORD *)(Node - 8);
  v80 = Node;
  MEMORY[0x1E0C80A78](Node);
  v76 = (uint64_t)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v78);
  v83 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v77 = (uint64_t)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v81 = (uint64_t)&v71 - v17;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v18 = *(_QWORD *)(TypeName - 8);
  MEMORY[0x1E0C80A78](TypeName);
  v82 = (uint64_t)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  v24 = MEMORY[0x1E0C80A78](v23);
  v84 = (uint64_t)&v71 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v86 = (uint64_t)&v71 - v26;
  FunctionParameter = type metadata accessor for PgQuery_FunctionParameter(0);
  v28 = a1;
  v29 = *(int *)(FunctionParameter + 20);
  v30 = *(_QWORD *)(a1 + v29);
  v31 = *(_QWORD *)(a2 + v29);
  if (v30 == v31)
    goto LABEL_38;
  v73 = v10;
  v74 = v28;
  v75 = v5;
  if (*(_QWORD *)(v30 + 16) == *(_QWORD *)(v31 + 16) && *(_QWORD *)(v30 + 24) == *(_QWORD *)(v31 + 24)
    || (v32 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v72 = v4;
    v33 = v30
        + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argType;
    v34 = v86;
    outlined init with copy of PgQuery_Alias?(v31+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argType, v86, &demangling cache variable for type metadata for PgQuery_TypeName?);
    v35 = (uint64_t)&v22[*(int *)(v20 + 48)];
    outlined init with copy of PgQuery_Alias?(v33, (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined init with copy of PgQuery_Alias?(v34, v35, &demangling cache variable for type metadata for PgQuery_TypeName?);
    v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
    v37 = TypeName;
    if (v36((uint64_t)v22, 1, TypeName) == 1)
    {
      v38 = v36(v35, 1, v37);
      v39 = v30;
      swift_retain();
      v40 = v31;
      swift_retain();
      if (v38 == 1)
      {
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_TypeName?);
        outlined destroy of (key: String, value: StorableValue)(v86, &demangling cache variable for type metadata for PgQuery_TypeName?);
LABEL_8:
        v41 = *(_QWORD *)(v40
                        + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__mode);
        if (*(_BYTE *)(v40
                      + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__mode
                      + 8) == 1)
          __asm { BR              X11 }
        v48 = (uint64_t)v83;
        if (*(_QWORD *)(v39
                       + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__mode) == v41)
        {
          v49 = v39
              + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defexpr;
          v50 = v40
              + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defexpr;
          v51 = v81;
          outlined init with copy of PgQuery_Alias?(v50, v81, &demangling cache variable for type metadata for PgQuery_Node?);
          v52 = v48 + *(int *)(v78 + 48);
          outlined init with copy of PgQuery_Alias?(v49, v48, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined init with copy of PgQuery_Alias?(v51, v52, &demangling cache variable for type metadata for PgQuery_Node?);
          v53 = v80;
          v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48);
          if (v54(v48, 1, v80) == 1)
          {
            if (v54(v52, 1, v53) == 1)
            {
              outlined destroy of (key: String, value: StorableValue)(v48, &demangling cache variable for type metadata for PgQuery_Node?);
              outlined destroy of (key: String, value: StorableValue)(v81, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_37:
              swift_release();
              swift_release();
              v4 = v72;
              v10 = v73;
              v28 = v74;
              v5 = v75;
LABEL_38:
              v66 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
              v66(v10, v28, v4);
              v66(v8, a2, v4);
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
              v67 = dispatch thunk of static Equatable.== infix(_:_:)();
              v68 = v5;
              v32 = v67;
              v69 = *(void (**)(char *, uint64_t))(v68 + 8);
              v69(v8, v4);
              v69(v10, v4);
              return v32 & 1;
            }
            v56 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
          }
          else
          {
            v55 = v77;
            outlined init with copy of PgQuery_Alias?(v48, v77, &demangling cache variable for type metadata for PgQuery_Node?);
            if (v54(v52, 1, v53) == 1)
            {
              v56 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
            }
            else
            {
              v57 = v52;
              v58 = v53;
              v59 = v76;
              outlined init with take of PgQuery_OidList(v57, v76, type metadata accessor for PgQuery_Node);
              v60 = *(int *)(v58 + 20);
              v61 = *(_QWORD *)(v55 + v60);
              v62 = *(_QWORD *)(v59 + v60);
              if (v61 == v62
                || (swift_retain(),
                    swift_retain(),
                    v63 = closure #1 in static PgQuery_Node.== infix(_:_:)(v61, v62),
                    swift_release(),
                    swift_release(),
                    v63))
              {
                lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
                v64 = v77;
                v65 = dispatch thunk of static Equatable.== infix(_:_:)();
                outlined destroy of PgQuery_Alias(v59, type metadata accessor for PgQuery_Node);
                outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_Node);
                outlined destroy of (key: String, value: StorableValue)(v48, &demangling cache variable for type metadata for PgQuery_Node?);
                outlined destroy of (key: String, value: StorableValue)(v81, &demangling cache variable for type metadata for PgQuery_Node?);
                if ((v65 & 1) != 0)
                  goto LABEL_37;
                goto LABEL_26;
              }
              outlined destroy of PgQuery_Alias(v59, type metadata accessor for PgQuery_Node);
              v56 = &demangling cache variable for type metadata for PgQuery_Node?;
              v55 = v77;
            }
            outlined destroy of PgQuery_Alias(v55, type metadata accessor for PgQuery_Node);
          }
          outlined destroy of (key: String, value: StorableValue)(v48, v56);
          outlined destroy of (key: String, value: StorableValue)(v81, &demangling cache variable for type metadata for PgQuery_Node?);
        }
LABEL_26:
        swift_release();
        swift_release();
        v32 = 0;
        return v32 & 1;
      }
      v43 = &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?);
    }
    else
    {
      v40 = v31;
      v39 = v30;
      v42 = v84;
      outlined init with copy of PgQuery_Alias?((uint64_t)v22, v84, &demangling cache variable for type metadata for PgQuery_TypeName?);
      if (v36(v35, 1, v37) == 1)
      {
        swift_retain();
        swift_retain();
        v43 = &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?);
      }
      else
      {
        v44 = v82;
        outlined init with take of PgQuery_OidList(v35, v82, type metadata accessor for PgQuery_TypeName);
        v45 = *(_QWORD *)v42;
        v46 = *(_QWORD *)v44;
        swift_retain();
        swift_retain();
        if ((specialized static Array<A>.== infix(_:_:)(v45, v46) & 1) != 0
          && *(_DWORD *)(v42 + 8) == *(_DWORD *)(v44 + 8)
          && *(unsigned __int8 *)(v42 + 12) == *(unsigned __int8 *)(v44 + 12)
          && *(unsigned __int8 *)(v42 + 13) == *(unsigned __int8 *)(v44 + 13)
          && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v42 + 16), *(_QWORD *)(v44 + 16)) & 1) != 0
          && *(_DWORD *)(v42 + 24) == *(_DWORD *)(v44 + 24)
          && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v42 + 32), *(_QWORD *)(v44 + 32)) & 1) != 0
          && *(_DWORD *)(v42 + 40) == *(_DWORD *)(v44 + 40))
        {
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v47 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of PgQuery_Alias(v44, type metadata accessor for PgQuery_TypeName);
          outlined destroy of PgQuery_Alias(v42, type metadata accessor for PgQuery_TypeName);
          outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_TypeName?);
          outlined destroy of (key: String, value: StorableValue)(v86, &demangling cache variable for type metadata for PgQuery_TypeName?);
          if ((v47 & 1) == 0)
            goto LABEL_26;
          goto LABEL_8;
        }
        outlined destroy of PgQuery_Alias(v44, type metadata accessor for PgQuery_TypeName);
        v43 = &demangling cache variable for type metadata for PgQuery_TypeName?;
      }
      outlined destroy of PgQuery_Alias(v42, type metadata accessor for PgQuery_TypeName);
    }
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, v43);
    outlined destroy of (key: String, value: StorableValue)(v86, &demangling cache variable for type metadata for PgQuery_TypeName?);
    goto LABEL_26;
  }
  return v32 & 1;
}

uint64_t specialized static PgQuery_CreateTableAsStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t RangeVar;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t IntoClause;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t Node;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t TableAsStmt;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t, uint64_t);
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  BOOL v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t, uint64_t);
  uint64_t v81;
  char *v82;
  char v83;
  void (*v84)(char *, uint64_t);
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(uint64_t, uint64_t, uint64_t);
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int (*v121)(uint64_t, uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  BOOL v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  int v133;
  int v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t (*v159)(uint64_t, uint64_t, uint64_t);
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;

  v4 = type metadata accessor for UnknownStorage();
  v163 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v136 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v136 - v8;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v151 = *(_QWORD *)(RangeVar - 8);
  v152 = RangeVar;
  MEMORY[0x1E0C80A78](RangeVar);
  v148 = (uint64_t)&v136 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1E0C80A78](v150);
  v153 = (uint64_t)&v136 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v149 = (uint64_t)&v136 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v154 = (uint64_t)&v136 - v16;
  IntoClause = type metadata accessor for PgQuery_IntoClause(0);
  v159 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(IntoClause - 8);
  v160 = IntoClause;
  MEMORY[0x1E0C80A78](IntoClause);
  v155 = (uint64_t)&v136 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_IntoClause?, PgQuery_IntoClause?));
  MEMORY[0x1E0C80A78](v158);
  v161 = (uint64_t)&v136 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_IntoClause?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v156 = (uint64_t)&v136 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v162 = (uint64_t)&v136 - v23;
  Node = type metadata accessor for PgQuery_Node(0);
  v25 = *(_QWORD *)(Node - 8);
  v26 = MEMORY[0x1E0C80A78](Node);
  v144 = (uint64_t)&v136 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v157 = (uint64_t)&v136 - v28;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v30 = MEMORY[0x1E0C80A78](v29);
  v146 = (uint64_t)&v136 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30);
  v33 = (char *)&v136 - v32;
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v35 = MEMORY[0x1E0C80A78](v34);
  v145 = (uint64_t)&v136 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = MEMORY[0x1E0C80A78](v35);
  v147 = (uint64_t)&v136 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  v164 = (uint64_t)&v136 - v40;
  MEMORY[0x1E0C80A78](v39);
  v42 = (char *)&v136 - v41;
  TableAsStmt = type metadata accessor for PgQuery_CreateTableAsStmt(0);
  v44 = a1;
  v45 = *(int *)(TableAsStmt + 20);
  v46 = *(_QWORD *)(a1 + v45);
  v47 = a2;
  v48 = *(_QWORD *)(a2 + v45);
  v49 = v47;
  if (v46 == v48)
    goto LABEL_18;
  v139 = v44;
  v140 = v47;
  v141 = v9;
  v142 = v7;
  v143 = v4;
  v50 = v46
      + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query;
  outlined init with copy of PgQuery_Alias?(v48+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, (uint64_t)v42, &demangling cache variable for type metadata for PgQuery_Node?);
  v138 = v29;
  v51 = (uint64_t)&v33[*(int *)(v29 + 48)];
  outlined init with copy of PgQuery_Alias?(v50, (uint64_t)v33, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v42, v51, &demangling cache variable for type metadata for PgQuery_Node?);
  v52 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  if (v52((uint64_t)v33, 1, Node) == 1)
  {
    v53 = v52(v51, 1, Node);
    swift_retain();
    swift_retain();
    v54 = v46;
    if (v53 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v33, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v42, &demangling cache variable for type metadata for PgQuery_Node?);
      v4 = v143;
      goto LABEL_11;
    }
    v56 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_28:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v33, v56);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v42, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_46;
  }
  v55 = v164;
  outlined init with copy of PgQuery_Alias?((uint64_t)v33, v164, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v52(v51, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    v56 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_27:
    outlined destroy of PgQuery_Alias(v55, type metadata accessor for PgQuery_Node);
    goto LABEL_28;
  }
  v57 = v157;
  outlined init with take of PgQuery_OidList(v51, v157, type metadata accessor for PgQuery_Node);
  v58 = *(int *)(Node + 20);
  v59 = *(_QWORD *)(v55 + v58);
  v60 = *(_QWORD *)(v57 + v58);
  v137 = v46;
  swift_retain();
  swift_retain();
  if (v59 != v60)
  {
    swift_retain();
    swift_retain();
    v61 = closure #1 in static PgQuery_Node.== infix(_:_:)(v59, v60);
    swift_release();
    swift_release();
    if (!v61)
    {
      outlined destroy of PgQuery_Alias(v57, type metadata accessor for PgQuery_Node);
      v56 = &demangling cache variable for type metadata for PgQuery_Node?;
      v55 = v164;
      goto LABEL_27;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v62 = v164;
  v63 = v143;
  v64 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v57, type metadata accessor for PgQuery_Node);
  v65 = v62;
  v4 = v63;
  outlined destroy of PgQuery_Alias(v65, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v33, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v42, &demangling cache variable for type metadata for PgQuery_Node?);
  v54 = v137;
  if ((v64 & 1) == 0)
    goto LABEL_46;
LABEL_11:
  v66 = v54;
  v67 = v54
      + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__into;
  v68 = v162;
  outlined init with copy of PgQuery_Alias?(v48+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__into, v162, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  v69 = v161;
  v70 = v161 + *(int *)(v158 + 48);
  outlined init with copy of PgQuery_Alias?(v67, v161, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  outlined init with copy of PgQuery_Alias?(v68, v70, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  v71 = v160;
  v72 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v159 + 6);
  if (v72(v69, 1, v160) != 1)
  {
    v164 = Node;
    v85 = v156;
    outlined init with copy of PgQuery_Alias?(v69, v156, &demangling cache variable for type metadata for PgQuery_IntoClause?);
    if (v72(v70, 1, v71) == 1)
    {
      v86 = &demangling cache variable for type metadata for (PgQuery_IntoClause?, PgQuery_IntoClause?);
LABEL_44:
      outlined destroy of PgQuery_Alias(v85, type metadata accessor for PgQuery_IntoClause);
      goto LABEL_45;
    }
    v159 = v52;
    v87 = v70;
    v88 = v71;
    v89 = v155;
    outlined init with take of PgQuery_OidList(v87, v155, type metadata accessor for PgQuery_IntoClause);
    v90 = *(int *)(v88 + 20);
    v91 = *(_QWORD *)(v85 + v90);
    v92 = *(_QWORD *)(v89 + v90);
    if (v91 == v92)
    {
LABEL_64:
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v135 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of PgQuery_Alias(v89, type metadata accessor for PgQuery_IntoClause);
      outlined destroy of PgQuery_Alias(v85, type metadata accessor for PgQuery_IntoClause);
      outlined destroy of (key: String, value: StorableValue)(v69, &demangling cache variable for type metadata for PgQuery_IntoClause?);
      outlined destroy of (key: String, value: StorableValue)(v162, &demangling cache variable for type metadata for PgQuery_IntoClause?);
      if ((v135 & 1) != 0)
        goto LABEL_14;
LABEL_46:
      swift_release();
      swift_release();
LABEL_47:
      v83 = 0;
      return v83 & 1;
    }
    v93 = v91
        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rel;
    v94 = v154;
    outlined init with copy of PgQuery_Alias?(v92+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rel, v154, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    v95 = v153;
    v96 = v153 + *(int *)(v150 + 48);
    outlined init with copy of PgQuery_Alias?(v93, v153, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined init with copy of PgQuery_Alias?(v94, v96, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    v97 = v152;
    v98 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v151 + 48);
    if (v98(v95, 1, v152) == 1)
    {
      v99 = v98(v96, 1, v97);
      swift_retain();
      swift_retain();
      v100 = v91;
      v85 = v156;
      if (v99 == 1)
      {
        outlined destroy of (key: String, value: StorableValue)(v153, &demangling cache variable for type metadata for PgQuery_RangeVar?);
        outlined destroy of (key: String, value: StorableValue)(v154, &demangling cache variable for type metadata for PgQuery_RangeVar?);
LABEL_35:
        v105 = *(_QWORD *)(v100
                         + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colNames);
        v106 = *(_QWORD *)(v92
                         + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colNames);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v107 = v100;
        v108 = specialized static Array<A>.== infix(_:_:)(v105, v106);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v108 & 1) == 0
          || (*(_QWORD *)(v107
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod) != *(_QWORD *)(v92 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod)
           || *(_QWORD *)(v107
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                        + 8) != *(_QWORD *)(v92
                                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                                          + 8))
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          goto LABEL_42;
        }
        v109 = *(_QWORD *)(v107
                         + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
        v110 = *(_QWORD *)(v92
                         + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v111 = specialized static Array<A>.== infix(_:_:)(v109, v110);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v111 & 1) == 0)
          goto LABEL_42;
        v112 = *(_QWORD *)(v107
                         + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onCommit);
        v160 = v92;
        v113 = *(_QWORD *)(v92
                         + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onCommit);
        if (*(_BYTE *)(v92
                      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onCommit
                      + 8) == 1)
          __asm { BR              X11 }
        v89 = v155;
        v4 = v143;
        if (v112 != v113
          || (*(_QWORD *)(v107
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpaceName) != *(_QWORD *)(v160 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpaceName)
           || *(_QWORD *)(v107
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpaceName
                        + 8) != *(_QWORD *)(v160
                                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpaceName
                                          + 8))
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          swift_release();
          swift_release();
          goto LABEL_43;
        }
        v158 = v107;
        v115 = v107
             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__viewQuery;
        v116 = v147;
        outlined init with copy of PgQuery_Alias?(v160+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__viewQuery, v147, &demangling cache variable for type metadata for PgQuery_Node?);
        v117 = v146 + *(int *)(v138 + 48);
        v118 = v115;
        v119 = v146;
        outlined init with copy of PgQuery_Alias?(v118, v146, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined init with copy of PgQuery_Alias?(v116, v117, &demangling cache variable for type metadata for PgQuery_Node?);
        v120 = v164;
        v121 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v159;
        if (v159(v119, 1, v164) == 1)
        {
          if (v121(v117, 1, v120) == 1)
          {
            outlined destroy of (key: String, value: StorableValue)(v119, &demangling cache variable for type metadata for PgQuery_Node?);
            outlined destroy of (key: String, value: StorableValue)(v147, &demangling cache variable for type metadata for PgQuery_Node?);
            v122 = v158;
            goto LABEL_63;
          }
          v124 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
          goto LABEL_68;
        }
        v123 = v145;
        outlined init with copy of PgQuery_Alias?(v119, v145, &demangling cache variable for type metadata for PgQuery_Node?);
        if (v121(v117, 1, v120) == 1)
        {
          v124 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_67:
          outlined destroy of PgQuery_Alias(v123, type metadata accessor for PgQuery_Node);
LABEL_68:
          outlined destroy of (key: String, value: StorableValue)(v119, v124);
          outlined destroy of (key: String, value: StorableValue)(v147, &demangling cache variable for type metadata for PgQuery_Node?);
          goto LABEL_42;
        }
        v125 = v144;
        outlined init with take of PgQuery_OidList(v117, v144, type metadata accessor for PgQuery_Node);
        v126 = *(int *)(v120 + 20);
        v127 = *(_QWORD *)(v123 + v126);
        v128 = *(_QWORD *)(v125 + v126);
        if (v127 != v128)
        {
          swift_retain();
          swift_retain();
          v129 = closure #1 in static PgQuery_Node.== infix(_:_:)(v127, v128);
          swift_release();
          swift_release();
          if (!v129)
          {
            outlined destroy of PgQuery_Alias(v144, type metadata accessor for PgQuery_Node);
            v124 = &demangling cache variable for type metadata for PgQuery_Node?;
            v123 = v145;
            v119 = v146;
            goto LABEL_67;
          }
        }
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v131 = v144;
        v130 = v145;
        v132 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v131, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v130, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)(v146, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v147, &demangling cache variable for type metadata for PgQuery_Node?);
        v122 = v158;
        if ((v132 & 1) != 0)
        {
LABEL_63:
          v133 = *(unsigned __int8 *)(v122
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__skipData);
          v134 = *(unsigned __int8 *)(v160
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__skipData);
          swift_release();
          swift_release();
          v89 = v155;
          if (v133 == v134)
            goto LABEL_64;
LABEL_43:
          outlined destroy of PgQuery_Alias(v89, type metadata accessor for PgQuery_IntoClause);
          v86 = &demangling cache variable for type metadata for PgQuery_IntoClause?;
          v68 = v162;
          goto LABEL_44;
        }
LABEL_42:
        swift_release();
        swift_release();
        v89 = v155;
        goto LABEL_43;
      }
    }
    else
    {
      v101 = v149;
      outlined init with copy of PgQuery_Alias?(v95, v149, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      if (v98(v96, 1, v97) != 1)
      {
        v102 = v95;
        v103 = v148;
        outlined init with take of PgQuery_OidList(v96, v148, type metadata accessor for PgQuery_RangeVar);
        v100 = v91;
        swift_retain();
        swift_retain();
        v104 = specialized static PgQuery_RangeVar.== infix(_:_:)(v101, v103);
        outlined destroy of PgQuery_Alias(v103, type metadata accessor for PgQuery_RangeVar);
        outlined destroy of PgQuery_Alias(v101, type metadata accessor for PgQuery_RangeVar);
        outlined destroy of (key: String, value: StorableValue)(v102, &demangling cache variable for type metadata for PgQuery_RangeVar?);
        outlined destroy of (key: String, value: StorableValue)(v154, &demangling cache variable for type metadata for PgQuery_RangeVar?);
        v85 = v156;
        if ((v104 & 1) == 0)
          goto LABEL_42;
        goto LABEL_35;
      }
      swift_retain();
      swift_retain();
      outlined destroy of PgQuery_Alias(v101, type metadata accessor for PgQuery_RangeVar);
      v85 = v156;
    }
    outlined destroy of (key: String, value: StorableValue)(v153, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    outlined destroy of (key: String, value: StorableValue)(v154, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    goto LABEL_42;
  }
  if (v72(v70, 1, v71) != 1)
  {
    v86 = &demangling cache variable for type metadata for (PgQuery_IntoClause?, PgQuery_IntoClause?);
LABEL_45:
    outlined destroy of (key: String, value: StorableValue)(v69, v86);
    outlined destroy of (key: String, value: StorableValue)(v68, &demangling cache variable for type metadata for PgQuery_IntoClause?);
    goto LABEL_46;
  }
  outlined destroy of (key: String, value: StorableValue)(v69, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  outlined destroy of (key: String, value: StorableValue)(v68, &demangling cache variable for type metadata for PgQuery_IntoClause?);
LABEL_14:
  v73 = *(_QWORD *)(v48
                  + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relkind);
  v74 = *(unsigned __int8 *)(v48
                           + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relkind
                           + 8);
  v75 = destructiveProjectEnumData for StorableValue(*(_QWORD *)(v66+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relkind), *(unsigned __int8 *)(v66+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relkind+ 8));
  if (v75 != destructiveProjectEnumData for StorableValue(v73, v74)
    || *(unsigned __int8 *)(v66
                          + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isSelectInto) != *(unsigned __int8 *)(v48 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isSelectInto))
  {
    goto LABEL_46;
  }
  v76 = *(unsigned __int8 *)(v66
                           + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists);
  v77 = *(unsigned __int8 *)(v48
                           + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists);
  swift_release();
  swift_release();
  v78 = v76 == v77;
  v7 = v142;
  v9 = v141;
  v49 = v140;
  v44 = v139;
  if (!v78)
    goto LABEL_47;
LABEL_18:
  v79 = v163;
  v80 = *(void (**)(char *, uint64_t, uint64_t))(v163 + 16);
  v81 = v49;
  v80(v9, v44, v4);
  v80(v7, v81, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v82 = v7;
  v83 = dispatch thunk of static Equatable.== infix(_:_:)();
  v84 = *(void (**)(char *, uint64_t))(v79 + 8);
  v84(v82, v4);
  v84(v9, v4);
  return v83 & 1;
}

uint64_t specialized static PgQuery_CreateOpClassStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TypeName;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char v23;
  uint64_t OpClassStmt;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  char *v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;

  v4 = type metadata accessor for UnknownStorage();
  v48 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v47 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v46 = (char *)&v42 - v7;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v9 = *(_QWORD *)(TypeName - 8);
  MEMORY[0x1E0C80A78](TypeName);
  v49 = (uint64_t)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v42 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v42 - v21;
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8)) & 1) == 0)
  {
    goto LABEL_27;
  }
  v44 = v4;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)
    || (v23 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v45 = v17;
    OpClassStmt = type metadata accessor for PgQuery_CreateOpClassStmt(0);
    outlined init with copy of PgQuery_Alias?(a1 + *(int *)(OpClassStmt + 40), (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_TypeName?);
    v43 = OpClassStmt;
    outlined init with copy of PgQuery_Alias?(a2 + *(int *)(OpClassStmt + 40), (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_TypeName?);
    v25 = (uint64_t)&v13[*(int *)(v11 + 48)];
    outlined init with copy of PgQuery_Alias?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined init with copy of PgQuery_Alias?((uint64_t)v20, v25, &demangling cache variable for type metadata for PgQuery_TypeName?);
    v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v26((uint64_t)v13, 1, TypeName) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_TypeName?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_TypeName?);
      if (v26(v25, 1, TypeName) == 1)
      {
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_TypeName?);
LABEL_9:
        if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32)) & 1) != 0
          && *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40))
        {
          v28 = v43;
          v27 = v44;
          v29 = a1 + *(int *)(v43 + 36);
          v30 = v48;
          v31 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 16);
          v32 = v46;
          v31(v46, v29, v44);
          v33 = a2 + *(int *)(v28 + 36);
          v34 = v47;
          v31(v47, v33, v27);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          v35 = *(void (**)(char *, uint64_t))(v30 + 8);
          v35(v34, v27);
          v35(v32, v27);
          return v23 & 1;
        }
LABEL_27:
        v23 = 0;
        return v23 & 1;
      }
    }
    else
    {
      v36 = (uint64_t)v45;
      outlined init with copy of PgQuery_Alias?((uint64_t)v13, (uint64_t)v45, &demangling cache variable for type metadata for PgQuery_TypeName?);
      if (v26(v25, 1, TypeName) != 1)
      {
        v39 = v49;
        outlined init with take of PgQuery_OidList(v25, v49, type metadata accessor for PgQuery_TypeName);
        if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)v36, *(_QWORD *)v39) & 1) != 0
          && *(_DWORD *)(v36 + 8) == *(_DWORD *)(v39 + 8)
          && *(unsigned __int8 *)(v36 + 12) == *(unsigned __int8 *)(v39 + 12)
          && *(unsigned __int8 *)(v36 + 13) == *(unsigned __int8 *)(v39 + 13)
          && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v36 + 16), *(_QWORD *)(v39 + 16)) & 1) != 0
          && *(_DWORD *)(v36 + 24) == *(_DWORD *)(v39 + 24)
          && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v36 + 32), *(_QWORD *)(v39 + 32)) & 1) != 0
          && *(_DWORD *)(v36 + 40) == *(_DWORD *)(v39 + 40))
        {
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v40 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_TypeName);
          outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_TypeName?);
          outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_TypeName?);
          outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_TypeName);
          outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_TypeName?);
          if ((v40 & 1) == 0)
            goto LABEL_27;
          goto LABEL_9;
        }
        outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_TypeName);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_TypeName?);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_TypeName?);
        outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_TypeName);
        v38 = (uint64_t)v13;
        v37 = &demangling cache variable for type metadata for PgQuery_TypeName?;
LABEL_26:
        outlined destroy of (key: String, value: StorableValue)(v38, v37);
        goto LABEL_27;
      }
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_TypeName?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_TypeName?);
      outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_TypeName);
    }
    v37 = &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?);
    v38 = (uint64_t)v13;
    goto LABEL_26;
  }
  return v23 & 1;
}

uint64_t specialized static PgQuery_CreateOpClassItem.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectWithArgs;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t OpClassItem;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  _DWORD *v38;
  _DWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  char *v52;
  uint64_t v53;
  char *v54;
  char v55;
  void (*v56)(char *, uint64_t);
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  char v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  _DWORD *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t TypeName;
  uint64_t v79;
  uint64_t v80;
  int *v81;

  v4 = type metadata accessor for UnknownStorage();
  v73 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v72 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v71 = (char *)&v66 - v7;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v76 = *(_QWORD *)(TypeName - 8);
  MEMORY[0x1E0C80A78](TypeName);
  v70 = (uint64_t)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
  MEMORY[0x1E0C80A78](v75);
  v79 = (uint64_t)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v74 = (uint64_t)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v80 = (uint64_t)&v66 - v14;
  MEMORY[0x1E0C80A78](v13);
  v77 = (uint64_t)&v66 - v15;
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  v17 = *(_QWORD *)(ObjectWithArgs - 8);
  MEMORY[0x1E0C80A78](ObjectWithArgs);
  v81 = (int *)((char *)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_ObjectWithArgs?, PgQuery_ObjectWithArgs?));
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v66 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v23);
  v28 = (char *)&v66 - v27;
  MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v66 - v29;
  if (*a1 != *a2)
    goto LABEL_21;
  v67 = v4;
  OpClassItem = type metadata accessor for PgQuery_CreateOpClassItem(0);
  v32 = *(int *)(OpClassItem + 36);
  v68 = a1;
  v33 = (uint64_t)a1 + v32;
  v34 = (int *)OpClassItem;
  outlined init with copy of PgQuery_Alias?(v33, (uint64_t)v30, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  v35 = v34[9];
  v69 = a2;
  outlined init with copy of PgQuery_Alias?((uint64_t)a2 + v35, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  v36 = (uint64_t)&v21[*(int *)(v19 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v30, (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, v36, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v37((uint64_t)v21, 1, ObjectWithArgs) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v30, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    if (v37(v36, 1, ObjectWithArgs) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      goto LABEL_5;
    }
LABEL_14:
    v57 = &demangling cache variable for type metadata for (PgQuery_ObjectWithArgs?, PgQuery_ObjectWithArgs?);
    v58 = (uint64_t)v21;
LABEL_20:
    outlined destroy of (key: String, value: StorableValue)(v58, v57);
    goto LABEL_21;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, (uint64_t)v25, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  if (v37(v36, 1, ObjectWithArgs) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v30, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined destroy of PgQuery_Alias((uint64_t)v25, type metadata accessor for PgQuery_ObjectWithArgs);
    goto LABEL_14;
  }
  v59 = (uint64_t)v81;
  outlined init with take of PgQuery_OidList(v36, (uint64_t)v81, type metadata accessor for PgQuery_ObjectWithArgs);
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)v25, *(_QWORD *)v59) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(*((_QWORD *)v25 + 1), *(_QWORD *)(v59 + 8)) & 1) == 0
    || v25[16] != *(_BYTE *)(v59 + 16))
  {
    outlined destroy of PgQuery_Alias(v59, type metadata accessor for PgQuery_ObjectWithArgs);
    v40 = &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?;
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v30, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined destroy of PgQuery_Alias((uint64_t)v25, type metadata accessor for PgQuery_ObjectWithArgs);
    v58 = (uint64_t)v21;
LABEL_19:
    v57 = v40;
    goto LABEL_20;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v61 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v59, type metadata accessor for PgQuery_ObjectWithArgs);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v30, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  outlined destroy of PgQuery_Alias((uint64_t)v25, type metadata accessor for PgQuery_ObjectWithArgs);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  if ((v61 & 1) == 0)
    goto LABEL_21;
LABEL_5:
  v39 = v68;
  v38 = v69;
  if (v68[1] != v69[1]
    || (specialized static Array<A>.== infix(_:_:)(*((_QWORD *)v68 + 1), *((_QWORD *)v69 + 1)) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(*((_QWORD *)v39 + 2), *((_QWORD *)v38 + 2)) & 1) == 0)
  {
    goto LABEL_21;
  }
  v40 = &demangling cache variable for type metadata for PgQuery_TypeName?;
  v41 = v77;
  outlined init with copy of PgQuery_Alias?((uint64_t)v39 + v34[10], v77, &demangling cache variable for type metadata for PgQuery_TypeName?);
  v42 = v80;
  outlined init with copy of PgQuery_Alias?((uint64_t)v38 + v34[10], v80, &demangling cache variable for type metadata for PgQuery_TypeName?);
  v43 = v79;
  v44 = v79 + *(int *)(v75 + 48);
  outlined init with copy of PgQuery_Alias?(v41, v79, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined init with copy of PgQuery_Alias?(v42, v44, &demangling cache variable for type metadata for PgQuery_TypeName?);
  v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 48);
  v46 = TypeName;
  if (v45(v43, 1, TypeName) != 1)
  {
    v81 = v34;
    v62 = v74;
    outlined init with copy of PgQuery_Alias?(v43, v74, &demangling cache variable for type metadata for PgQuery_TypeName?);
    v63 = v45(v44, 1, v46);
    v48 = v67;
    if (v63 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v80, &demangling cache variable for type metadata for PgQuery_TypeName?);
      outlined destroy of (key: String, value: StorableValue)(v41, &demangling cache variable for type metadata for PgQuery_TypeName?);
      outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_TypeName);
      goto LABEL_27;
    }
    v64 = v70;
    outlined init with take of PgQuery_OidList(v44, v70, type metadata accessor for PgQuery_TypeName);
    if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)v62, *(_QWORD *)v64) & 1) != 0
      && *(_DWORD *)(v62 + 8) == *(_DWORD *)(v64 + 8)
      && *(unsigned __int8 *)(v62 + 12) == *(unsigned __int8 *)(v64 + 12)
      && *(unsigned __int8 *)(v62 + 13) == *(unsigned __int8 *)(v64 + 13)
      && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v62 + 16), *(_QWORD *)(v64 + 16)) & 1) != 0
      && *(_DWORD *)(v62 + 24) == *(_DWORD *)(v64 + 24)
      && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v62 + 32), *(_QWORD *)(v64 + 32)) & 1) != 0
      && *(_DWORD *)(v62 + 40) == *(_DWORD *)(v64 + 40))
    {
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v65 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_TypeName);
      outlined destroy of (key: String, value: StorableValue)(v80, &demangling cache variable for type metadata for PgQuery_TypeName?);
      outlined destroy of (key: String, value: StorableValue)(v41, &demangling cache variable for type metadata for PgQuery_TypeName?);
      outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_TypeName);
      outlined destroy of (key: String, value: StorableValue)(v43, &demangling cache variable for type metadata for PgQuery_TypeName?);
      v34 = v81;
      if ((v65 & 1) != 0)
        goto LABEL_11;
LABEL_21:
      v55 = 0;
      return v55 & 1;
    }
    outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_TypeName);
    outlined destroy of (key: String, value: StorableValue)(v80, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined destroy of (key: String, value: StorableValue)(v41, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_TypeName);
    v58 = v43;
    goto LABEL_19;
  }
  outlined destroy of (key: String, value: StorableValue)(v42, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined destroy of (key: String, value: StorableValue)(v41, &demangling cache variable for type metadata for PgQuery_TypeName?);
  v47 = v45(v44, 1, v46);
  v48 = v67;
  if (v47 != 1)
  {
LABEL_27:
    v57 = &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?);
    v58 = v43;
    goto LABEL_20;
  }
  outlined destroy of (key: String, value: StorableValue)(v43, &demangling cache variable for type metadata for PgQuery_TypeName?);
LABEL_11:
  v49 = (uint64_t)v39 + v34[8];
  v50 = v73;
  v51 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 16);
  v52 = v71;
  v51(v71, v49, v48);
  v53 = (uint64_t)v38 + v34[8];
  v54 = v72;
  v51(v72, v53, v48);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v55 = dispatch thunk of static Equatable.== infix(_:_:)();
  v56 = *(void (**)(char *, uint64_t))(v50 + 8);
  v56(v54, v48);
  v56(v52, v48);
  return v55 & 1;
}

uint64_t specialized static PgQuery_CompositeTypeStmt.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t RangeVar;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t CompositeTypeStmt;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  char *v39;
  char v40;
  void (*v41)(char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;

  v4 = type metadata accessor for UnknownStorage();
  v46 = *(_QWORD *)(v4 - 8);
  v47 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v45 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v44 = (char *)&v43 - v7;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v9 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v48 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v43 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v43 - v21;
  CompositeTypeStmt = type metadata accessor for PgQuery_CompositeTypeStmt(0);
  v24 = *(int *)(CompositeTypeStmt + 24);
  v49 = a1;
  v25 = (uint64_t)a1 + v24;
  v26 = CompositeTypeStmt;
  outlined init with copy of PgQuery_Alias?(v25, (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v27 = *(int *)(v26 + 24);
  v50 = a2;
  outlined init with copy of PgQuery_Alias?((uint64_t)a2 + v27, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v28, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, RangeVar) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if (v29(v28, 1, RangeVar) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v29(v28, 1, RangeVar) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RangeVar);
LABEL_6:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
LABEL_10:
    v40 = 0;
    return v40 & 1;
  }
  v30 = v48;
  outlined init with take of PgQuery_OidList(v28, v48, type metadata accessor for PgQuery_RangeVar);
  v31 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v17, v30);
  outlined destroy of PgQuery_Alias(v30, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v31 & 1) == 0)
    goto LABEL_10;
LABEL_8:
  v32 = v49;
  v33 = v50;
  if ((specialized static Array<A>.== infix(_:_:)(*v49, *v50) & 1) == 0)
    goto LABEL_10;
  v34 = (char *)v32 + *(int *)(v26 + 20);
  v36 = v46;
  v35 = v47;
  v37 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  v38 = v44;
  v37(v44, v34, v47);
  v39 = v45;
  v37(v45, (char *)v33 + *(int *)(v26 + 20), v35);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v40 = dispatch thunk of static Equatable.== infix(_:_:)();
  v41 = *(void (**)(char *, uint64_t))(v36 + 8);
  v41(v39, v35);
  v41(v38, v35);
  return v40 & 1;
}

uint64_t specialized static PgQuery_AlterOperatorStmt.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectWithArgs;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t AlterOperatorStmt;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t *v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  char *v37;
  char v38;
  void (*v39)(char *, uint64_t);
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  char v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;

  v4 = type metadata accessor for UnknownStorage();
  v48 = *(_QWORD *)(v4 - 8);
  v49 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v47 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v46 = (char *)&v45 - v7;
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  v9 = *(_QWORD *)(ObjectWithArgs - 8);
  MEMORY[0x1E0C80A78](ObjectWithArgs);
  v50 = (uint64_t)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_ObjectWithArgs?, PgQuery_ObjectWithArgs?));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v45 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v45 - v21;
  AlterOperatorStmt = type metadata accessor for PgQuery_AlterOperatorStmt(0);
  v24 = *(int *)(AlterOperatorStmt + 24);
  v51 = a1;
  v25 = (uint64_t)a1 + v24;
  v26 = AlterOperatorStmt;
  outlined init with copy of PgQuery_Alias?(v25, (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  v27 = *(int *)(v26 + 24);
  v52 = a2;
  outlined init with copy of PgQuery_Alias?((uint64_t)a2 + v27, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v28, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, ObjectWithArgs) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    if (v29(v28, 1, ObjectWithArgs) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  if (v29(v28, 1, ObjectWithArgs) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_ObjectWithArgs);
LABEL_8:
    v40 = &demangling cache variable for type metadata for (PgQuery_ObjectWithArgs?, PgQuery_ObjectWithArgs?);
    v41 = (uint64_t)v13;
LABEL_13:
    outlined destroy of (key: String, value: StorableValue)(v41, v40);
    goto LABEL_14;
  }
  v42 = v50;
  outlined init with take of PgQuery_OidList(v28, v50, type metadata accessor for PgQuery_ObjectWithArgs);
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)v17, *(_QWORD *)v42) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(*((_QWORD *)v17 + 1), *(_QWORD *)(v42 + 8)) & 1) == 0
    || v17[16] != *(_BYTE *)(v42 + 16))
  {
    outlined destroy of PgQuery_Alias(v42, type metadata accessor for PgQuery_ObjectWithArgs);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_ObjectWithArgs);
    v41 = (uint64_t)v13;
    v40 = &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?;
    goto LABEL_13;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v44 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v42, type metadata accessor for PgQuery_ObjectWithArgs);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_ObjectWithArgs);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  if ((v44 & 1) == 0)
    goto LABEL_14;
LABEL_4:
  v30 = v51;
  v31 = v52;
  if ((specialized static Array<A>.== infix(_:_:)(*v51, *v52) & 1) == 0)
  {
LABEL_14:
    v38 = 0;
    return v38 & 1;
  }
  v32 = (char *)v30 + *(int *)(v26 + 20);
  v34 = v48;
  v33 = v49;
  v35 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
  v36 = v46;
  v35(v46, v32, v49);
  v37 = v47;
  v35(v47, (char *)v31 + *(int *)(v26 + 20), v33);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v38 = dispatch thunk of static Equatable.== infix(_:_:)();
  v39 = *(void (**)(char *, uint64_t))(v34 + 8);
  v39(v37, v33);
  v39(v36, v33);
  return v38 & 1;
}

uint64_t specialized static PgQuery_AlterOpFamilyStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  uint64_t AlterOpFamilyStmt;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & 1) == 0)
    goto LABEL_10;
  v11 = *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8) && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24)
      && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32)) & 1) != 0)
    {
      AlterOpFamilyStmt = type metadata accessor for PgQuery_AlterOpFamilyStmt(0);
      v14 = a1 + *(int *)(AlterOpFamilyStmt + 32);
      v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v15(v10, v14, v4);
      v15(v8, a2 + *(int *)(AlterOpFamilyStmt + 32), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
      return v12 & 1;
    }
LABEL_10:
    v12 = 0;
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_AlterFunctionStmt.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectWithArgs;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t AlterFunctionStmt;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  char *v42;
  char v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char v50;
  uint64_t v51;
  char *v52;
  uint64_t *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;

  v57 = type metadata accessor for UnknownStorage();
  v54 = *(_QWORD *)(v57 - 8);
  v4 = MEMORY[0x1E0C80A78](v57);
  v56 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v55 = (char *)&v51 - v6;
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  v59 = *(char **)(ObjectWithArgs - 8);
  v60 = ObjectWithArgs;
  MEMORY[0x1E0C80A78](ObjectWithArgs);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_ObjectWithArgs?, PgQuery_ObjectWithArgs?));
  MEMORY[0x1E0C80A78](v58);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v51 - v17;
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v51 - v19;
  v21 = *a1;
  v22 = a1;
  v23 = *((unsigned __int8 *)a1 + 8);
  v24 = *a2;
  v25 = a2;
  v26 = *((unsigned __int8 *)a2 + 8);
  v27 = destructiveProjectEnumData for StorableValue(v21, v23);
  if (v27 != destructiveProjectEnumData for StorableValue(v24, v26))
    goto LABEL_15;
  v52 = v9;
  v28 = (uint64_t)v15;
  AlterFunctionStmt = type metadata accessor for PgQuery_AlterFunctionStmt(0);
  outlined init with copy of PgQuery_Alias?((uint64_t)v22 + *(int *)(AlterFunctionStmt + 28), (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  v30 = v25;
  outlined init with copy of PgQuery_Alias?((uint64_t)v25 + *(int *)(AlterFunctionStmt + 28), (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  v31 = (uint64_t)&v11[*(int *)(v58 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v18, v31, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  v32 = v60;
  v33 = (uint64_t (*)(char *, uint64_t, uint64_t))*((_QWORD *)v59 + 6);
  v34 = v33(v11, 1, v60);
  v53 = v22;
  if (v34 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    if (v33((char *)v31, 1, v32) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      v35 = v57;
      goto LABEL_5;
    }
    goto LABEL_9;
  }
  v59 = v20;
  v45 = v28;
  outlined init with copy of PgQuery_Alias?((uint64_t)v11, v28, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  if (v33((char *)v31, 1, v32) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v59, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined destroy of PgQuery_Alias(v28, type metadata accessor for PgQuery_ObjectWithArgs);
LABEL_9:
    v46 = &demangling cache variable for type metadata for (PgQuery_ObjectWithArgs?, PgQuery_ObjectWithArgs?);
    v47 = (uint64_t)v11;
LABEL_14:
    outlined destroy of (key: String, value: StorableValue)(v47, v46);
    goto LABEL_15;
  }
  v48 = (uint64_t)v52;
  outlined init with take of PgQuery_OidList(v31, (uint64_t)v52, type metadata accessor for PgQuery_ObjectWithArgs);
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)v45, *(_QWORD *)v48) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v45 + 8), *(_QWORD *)(v48 + 8)) & 1) == 0
    || *(unsigned __int8 *)(v45 + 16) != *(unsigned __int8 *)(v48 + 16))
  {
    outlined destroy of PgQuery_Alias(v48, type metadata accessor for PgQuery_ObjectWithArgs);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v59, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_ObjectWithArgs);
    v47 = (uint64_t)v11;
    v46 = &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?;
    goto LABEL_14;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v35 = v57;
  v50 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v48, type metadata accessor for PgQuery_ObjectWithArgs);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v59, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_ObjectWithArgs);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  if ((v50 & 1) == 0)
    goto LABEL_15;
LABEL_5:
  v36 = v53;
  if ((specialized static Array<A>.== infix(_:_:)(v53[2], v30[2]) & 1) == 0)
  {
LABEL_15:
    v43 = 0;
    return v43 & 1;
  }
  v37 = (uint64_t)v36 + *(int *)(AlterFunctionStmt + 24);
  v39 = v54;
  v38 = v55;
  v40 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 16);
  v40(v55, v37, v35);
  v41 = (uint64_t)v30 + *(int *)(AlterFunctionStmt + 24);
  v42 = v56;
  v40(v56, v41, v35);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v43 = dispatch thunk of static Equatable.== infix(_:_:)();
  v44 = *(void (**)(char *, uint64_t))(v39 + 8);
  v44(v42, v35);
  v44(v38, v35);
  return v43 & 1;
}

uint64_t specialized static PgQuery_SetOperationStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t SetOperationStmt;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  void (*v82)(char *, uint64_t, uint64_t);
  char v83;
  void (*v84)(char *, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t Node;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v86 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v11 = *(_QWORD *)(Node - 8);
  v12 = MEMORY[0x1E0C80A78](Node);
  v93 = (uint64_t)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v95 = (uint64_t)&v86 - v14;
  v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v15 = MEMORY[0x1E0C80A78](v98);
  v97 = (uint64_t)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v86 - v17;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v20 = MEMORY[0x1E0C80A78](v19);
  v94 = (uint64_t)&v86 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v96 = (uint64_t)&v86 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v86 - v25;
  MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v86 - v27;
  SetOperationStmt = type metadata accessor for PgQuery_SetOperationStmt(0);
  v30 = a1;
  v31 = *(int *)(SetOperationStmt + 20);
  v32 = *(_QWORD *)(a1 + v31);
  v33 = *(_QWORD *)(a2 + v31);
  if (v32 == v33)
    goto LABEL_28;
  v91 = v10;
  v92 = v8;
  v34 = *(_QWORD *)(v33 + 16);
  if (*(_BYTE *)(v33 + 24) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)(v32 + 16) != v34 || *(unsigned __int8 *)(v32 + 25) != *(unsigned __int8 *)(v33 + 25))
  {
LABEL_37:
    v83 = 0;
    return v83 & 1;
  }
  v87 = a2;
  v88 = v30;
  v89 = v5;
  v90 = v4;
  v35 = v32
      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg;
  v36 = v33;
  outlined init with copy of PgQuery_Alias?(v33+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  v37 = (uint64_t)&v18[*(int *)(v98 + 48)];
  outlined init with copy of PgQuery_Alias?(v35, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, v37, &demangling cache variable for type metadata for PgQuery_Node?);
  v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  v39 = Node;
  if (v38((uint64_t)v18, 1, Node) == 1)
  {
    v40 = v38(v37, 1, v39);
    v41 = v32;
    v42 = v40;
    v43 = v41;
    swift_retain();
    swift_retain();
    if (v42 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
      v32 = v43;
      v44 = v36;
      goto LABEL_15;
    }
    v46 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_31:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v18, v46);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_36;
  }
  v45 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v18, (uint64_t)v26, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v38(v37, 1, v39) == 1)
  {
    swift_retain();
    swift_retain();
    v46 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_30:
    outlined destroy of PgQuery_Alias((uint64_t)v26, type metadata accessor for PgQuery_Node);
    goto LABEL_31;
  }
  v47 = v37;
  v48 = v95;
  outlined init with take of PgQuery_OidList(v47, v95, type metadata accessor for PgQuery_Node);
  v49 = *(int *)(v39 + 20);
  v50 = *(_QWORD *)&v26[v49];
  v51 = *(_QWORD *)(v48 + v49);
  swift_retain();
  swift_retain();
  if (v50 != v51)
  {
    swift_retain();
    swift_retain();
    v52 = closure #1 in static PgQuery_Node.== infix(_:_:)(v50, v51);
    swift_release();
    swift_release();
    if (!v52)
    {
      outlined destroy of PgQuery_Alias(v48, type metadata accessor for PgQuery_Node);
      v46 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_30;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v53 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v48, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v26, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  v44 = v45;
  if ((v53 & 1) == 0)
    goto LABEL_36;
LABEL_15:
  v54 = v32;
  v55 = v32
      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg;
  v56 = v44;
  v57 = v96;
  outlined init with copy of PgQuery_Alias?(v44+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, v96, &demangling cache variable for type metadata for PgQuery_Node?);
  v58 = v97;
  v59 = v97 + *(int *)(v98 + 48);
  outlined init with copy of PgQuery_Alias?(v55, v97, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v57, v59, &demangling cache variable for type metadata for PgQuery_Node?);
  v60 = Node;
  if (v38(v58, 1, Node) != 1)
  {
    v61 = v94;
    outlined init with copy of PgQuery_Alias?(v58, v94, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v38(v59, 1, v60) == 1)
    {
      v62 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v63 = v93;
      outlined init with take of PgQuery_OidList(v59, v93, type metadata accessor for PgQuery_Node);
      v64 = *(int *)(v60 + 20);
      v65 = *(_QWORD *)(v61 + v64);
      v66 = *(_QWORD *)(v63 + v64);
      if (v65 == v66
        || (swift_retain(),
            swift_retain(),
            v67 = closure #1 in static PgQuery_Node.== infix(_:_:)(v65, v66),
            swift_release(),
            swift_release(),
            v67))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v68 = v61;
        v4 = v90;
        v69 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v68, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)(v58, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v57, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v69 & 1) != 0)
          goto LABEL_24;
LABEL_36:
        swift_release();
        swift_release();
        goto LABEL_37;
      }
      outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
      v62 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v61, type metadata accessor for PgQuery_Node);
LABEL_35:
    outlined destroy of (key: String, value: StorableValue)(v58, v62);
    outlined destroy of (key: String, value: StorableValue)(v57, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_36;
  }
  if (v38(v59, 1, v60) != 1)
  {
    v62 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_35;
  }
  outlined destroy of (key: String, value: StorableValue)(v58, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v57, &demangling cache variable for type metadata for PgQuery_Node?);
  v4 = v90;
LABEL_24:
  v70 = *(_QWORD *)(v54
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colTypes);
  v71 = *(_QWORD *)(v56
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colTypes);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v72 = specialized static Array<A>.== infix(_:_:)(v70, v71);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v72 & 1) == 0)
    goto LABEL_36;
  v73 = *(_QWORD *)(v54
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colTypmods);
  v74 = *(_QWORD *)(v56
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colTypmods);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v75 = specialized static Array<A>.== infix(_:_:)(v73, v74);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v75 & 1) == 0)
    goto LABEL_36;
  v76 = *(_QWORD *)(v54
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colCollations);
  v77 = *(_QWORD *)(v56
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colCollations);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v78 = specialized static Array<A>.== infix(_:_:)(v76, v77);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v78 & 1) == 0)
    goto LABEL_36;
  v79 = *(_QWORD *)(v54
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClauses);
  v80 = *(_QWORD *)(v56
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClauses);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v81 = specialized static Array<A>.== infix(_:_:)(v79, v80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v30 = v88;
  v5 = v89;
  v10 = v91;
  v8 = v92;
  a2 = v87;
  if ((v81 & 1) == 0)
    goto LABEL_37;
LABEL_28:
  v82 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v82(v10, v30, v4);
  v82(v8, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v83 = dispatch thunk of static Equatable.== infix(_:_:)();
  v84 = *(void (**)(char *, uint64_t))(v5 + 8);
  v84(v8, v4);
  v84(v10, v4);
  return v83 & 1;
}

uint64_t specialized static PgQuery_SQLValueFunction.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t SQLValueFunction;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  int v41;
  int v42;
  BOOL v43;
  void (*v44)(char *, uint64_t, uint64_t);
  char v45;
  void (*v46)(char *, uint64_t);
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v48 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v56 = *(_QWORD *)(Node - 8);
  v57 = Node;
  MEMORY[0x1E0C80A78](Node);
  v54 = (uint64_t)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v55 = (uint64_t)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v48 - v19;
  SQLValueFunction = type metadata accessor for PgQuery_SQLValueFunction(0);
  v22 = a1;
  v23 = *(int *)(SQLValueFunction + 20);
  v24 = *(_QWORD *)(a1 + v23);
  v25 = *(_QWORD *)(a2 + v23);
  if (v24 == v25)
    goto LABEL_16;
  v50 = a2;
  v51 = v22;
  v49 = v10;
  v52 = v5;
  v53 = v4;
  v26 = v24
      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v25+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v27, &demangling cache variable for type metadata for PgQuery_Node?);
  v28 = v57;
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48);
  if (v29((uint64_t)v15, 1, v57) != 1)
  {
    v31 = v55;
    outlined init with copy of PgQuery_Alias?((uint64_t)v15, v55, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v29(v27, 1, v28) == 1)
    {
      swift_retain();
      swift_retain();
      v32 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v33 = v54;
      outlined init with take of PgQuery_OidList(v27, v54, type metadata accessor for PgQuery_Node);
      v34 = *(int *)(v28 + 20);
      v35 = *(_QWORD *)(v31 + v34);
      v36 = *(_QWORD *)(v33 + v34);
      swift_retain();
      swift_retain();
      if (v35 == v36
        || (swift_retain(),
            swift_retain(),
            v37 = closure #1 in static PgQuery_Node.== infix(_:_:)(v35, v36),
            swift_release(),
            swift_release(),
            v37))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v4 = v53;
        v38 = v54;
        v39 = (uint64_t)v20;
        v40 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v38, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v31, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v39, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v40 & 1) != 0)
          goto LABEL_11;
LABEL_20:
        swift_release();
        swift_release();
LABEL_21:
        v45 = 0;
        return v45 & 1;
      }
      outlined destroy of PgQuery_Alias(v54, type metadata accessor for PgQuery_Node);
      v32 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v31, type metadata accessor for PgQuery_Node);
LABEL_19:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, v32);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_20;
  }
  v30 = v29(v27, 1, v28);
  swift_retain();
  swift_retain();
  if (v30 != 1)
  {
    v32 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_19;
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  v4 = v53;
LABEL_11:
  if ((specialized == infix<A>(_:_:)(*(_QWORD *)(v24+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op), *(unsigned __int8 *)(v24+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op+ 8), *(_QWORD *)(v25+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op), *(unsigned __int8 *)(v25+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op+ 8)) & 1) == 0|| *(_DWORD *)(v24+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__type) != *(_DWORD *)(v25 + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__type)|| *(_DWORD *)(v24+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typmod) != *(_DWORD *)(v25 + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typmod))
  {
    goto LABEL_20;
  }
  v41 = *(_DWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  v42 = *(_DWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  v43 = v41 == v42;
  v22 = v51;
  v5 = v52;
  v10 = v49;
  a2 = v50;
  if (!v43)
    goto LABEL_21;
LABEL_16:
  v44 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v44(v10, v22, v4);
  v44(v8, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v45 = dispatch thunk of static Equatable.== infix(_:_:)();
  v46 = *(void (**)(char *, uint64_t))(v5 + 8);
  v46(v8, v4);
  v46(v10, v4);
  return v45 & 1;
}

uint64_t specialized static PgQuery_RangeTblFunction.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t RangeTblFunction;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  BOOL v54;
  void (*v55)(char *, uint64_t, uint64_t);
  char v56;
  void (*v57)(char *, uint64_t);
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v59 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v67 = *(_QWORD *)(Node - 8);
  v68 = Node;
  MEMORY[0x1E0C80A78](Node);
  v65 = (uint64_t)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v66 = (uint64_t)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v59 - v19;
  RangeTblFunction = type metadata accessor for PgQuery_RangeTblFunction(0);
  v22 = a1;
  v23 = *(int *)(RangeTblFunction + 20);
  v24 = *(_QWORD *)(a1 + v23);
  v25 = *(_QWORD *)(a2 + v23);
  if (v24 == v25)
    goto LABEL_17;
  v61 = a2;
  v62 = v22;
  v60 = v10;
  v63 = v5;
  v64 = v4;
  v26 = v24
      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcexpr;
  outlined init with copy of PgQuery_Alias?(v25+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcexpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v27, &demangling cache variable for type metadata for PgQuery_Node?);
  v28 = v68;
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
  if (v29((uint64_t)v15, 1, v68) != 1)
  {
    v31 = v66;
    outlined init with copy of PgQuery_Alias?((uint64_t)v15, v66, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v29(v27, 1, v28) == 1)
    {
      swift_retain();
      swift_retain();
      v32 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v33 = (uint64_t)v20;
      v34 = v65;
      outlined init with take of PgQuery_OidList(v27, v65, type metadata accessor for PgQuery_Node);
      v35 = *(int *)(v28 + 20);
      v36 = *(_QWORD *)(v31 + v35);
      v37 = *(_QWORD *)(v34 + v35);
      swift_retain();
      swift_retain();
      if (v36 == v37
        || (swift_retain(),
            swift_retain(),
            v38 = closure #1 in static PgQuery_Node.== infix(_:_:)(v36, v37),
            swift_release(),
            swift_release(),
            v38))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v39 = v65;
        v40 = v66;
        v41 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v41 & 1) != 0)
          goto LABEL_11;
LABEL_21:
        swift_release();
        swift_release();
        goto LABEL_22;
      }
      outlined destroy of PgQuery_Alias(v65, type metadata accessor for PgQuery_Node);
      v32 = &demangling cache variable for type metadata for PgQuery_Node?;
      v31 = v66;
    }
    outlined destroy of PgQuery_Alias(v31, type metadata accessor for PgQuery_Node);
LABEL_20:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, v32);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_21;
  }
  v30 = v29(v27, 1, v28);
  swift_retain();
  swift_retain();
  if (v30 != 1)
  {
    v32 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_20;
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  if (*(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolcount) != *(_DWORD *)(v25 + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolcount))
    goto LABEL_21;
  v42 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolnames);
  v43 = *(_QWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolnames);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v44 = specialized static Array<A>.== infix(_:_:)(v42, v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v44 & 1) == 0)
    goto LABEL_21;
  v45 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccoltypes);
  v46 = *(_QWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccoltypes);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v47 = specialized static Array<A>.== infix(_:_:)(v45, v46);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v47 & 1) == 0)
    goto LABEL_21;
  v48 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccoltypmods);
  v49 = *(_QWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccoltypmods);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v50 = specialized static Array<A>.== infix(_:_:)(v48, v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v50 & 1) == 0)
    goto LABEL_21;
  v51 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolcollations);
  v52 = *(_QWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolcollations);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v53 = specialized static Array<A>.== infix(_:_:)(v51, v52);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v53 & 1) == 0)
    goto LABEL_21;
  v54 = specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(v24+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcparams), *(_QWORD **)(v25+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcparams));
  swift_release();
  swift_release();
  v5 = v63;
  v4 = v64;
  v10 = v60;
  a2 = v61;
  v22 = v62;
  if (!v54)
  {
LABEL_22:
    v56 = 0;
    return v56 & 1;
  }
LABEL_17:
  v55 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v55(v10, v22, v4);
  v55(v8, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v56 = dispatch thunk of static Equatable.== infix(_:_:)();
  v57 = *(void (**)(char *, uint64_t))(v5 + 8);
  v57(v8, v4);
  v57(v10, v4);
  return v56 & 1;
}

uint64_t specialized static PgQuery_RangeTableSample.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t Node;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t RangeTableSample;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  char v73;
  int v74;
  int v75;
  BOOL v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t, uint64_t);
  char *v79;
  void (*v80)(char *, uint64_t);
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v4 = type metadata accessor for UnknownStorage();
  v93 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v82 - v8;
  Node = type metadata accessor for PgQuery_Node(0);
  v95 = *(_QWORD *)(Node - 8);
  v11 = MEMORY[0x1E0C80A78](Node);
  v87 = (uint64_t)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v91 = (uint64_t)&v82 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v15 = MEMORY[0x1E0C80A78](v14);
  v90 = (uint64_t)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v82 - v17;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v20 = MEMORY[0x1E0C80A78](v19);
  v88 = (uint64_t)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v89 = (uint64_t)&v82 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v94 = (uint64_t)&v82 - v25;
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v82 - v26;
  RangeTableSample = type metadata accessor for PgQuery_RangeTableSample(0);
  v29 = a1;
  v30 = *(int *)(RangeTableSample + 20);
  v31 = *(_QWORD *)(a1 + v30);
  v32 = *(_QWORD *)(a2 + v30);
  if (v31 == v32)
    goto LABEL_28;
  v83 = a2;
  v84 = v29;
  v82 = v9;
  v85 = v7;
  v86 = v4;
  v33 = v31
      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  outlined init with copy of PgQuery_Alias?(v32+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v27, &demangling cache variable for type metadata for PgQuery_Node?);
  v34 = (uint64_t)&v18[*(int *)(v14 + 48)];
  outlined init with copy of PgQuery_Alias?(v33, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  v92 = v27;
  outlined init with copy of PgQuery_Alias?((uint64_t)v27, v34, &demangling cache variable for type metadata for PgQuery_Node?);
  v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v95 + 48);
  v36 = (uint64_t)v18;
  if (v35((uint64_t)v18, 1, Node) != 1)
  {
    v38 = v32;
    v41 = v94;
    outlined init with copy of PgQuery_Alias?((uint64_t)v18, v94, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v35(v34, 1, Node) == 1)
    {
      swift_retain();
      swift_retain();
      v42 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
      v43 = (uint64_t)v92;
    }
    else
    {
      v44 = v41;
      v45 = (uint64_t)v18;
      v46 = v91;
      outlined init with take of PgQuery_OidList(v34, v91, type metadata accessor for PgQuery_Node);
      v40 = Node;
      v47 = *(int *)(Node + 20);
      v48 = *(_QWORD *)(v44 + v47);
      v49 = *(_QWORD *)(v46 + v47);
      swift_retain();
      swift_retain();
      if (v48 == v49
        || (swift_retain(),
            swift_retain(),
            v50 = closure #1 in static PgQuery_Node.== infix(_:_:)(v48, v49),
            swift_release(),
            swift_release(),
            v50))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v51 = v94;
        v52 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v46, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v51, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)(v45, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v92, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v52 & 1) == 0)
          goto LABEL_19;
        goto LABEL_11;
      }
      outlined destroy of PgQuery_Alias(v46, type metadata accessor for PgQuery_Node);
      v42 = &demangling cache variable for type metadata for PgQuery_Node?;
      v36 = v45;
      v43 = (uint64_t)v92;
      v41 = v94;
    }
    outlined destroy of PgQuery_Alias(v41, type metadata accessor for PgQuery_Node);
LABEL_18:
    outlined destroy of (key: String, value: StorableValue)(v36, v42);
    outlined destroy of (key: String, value: StorableValue)(v43, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_19;
  }
  v37 = v35(v34, 1, Node);
  swift_retain();
  v38 = v32;
  swift_retain();
  if (v37 != 1)
  {
    v42 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    v43 = (uint64_t)v92;
    goto LABEL_18;
  }
  v39 = v36;
  v40 = Node;
  outlined destroy of (key: String, value: StorableValue)(v39, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v92, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  v53 = *(_QWORD *)(v31
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__method);
  v54 = *(_QWORD *)(v38
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__method);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v55 = specialized static Array<A>.== infix(_:_:)(v53, v54);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v55 & 1) == 0)
    goto LABEL_19;
  v56 = *(_QWORD *)(v31
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  v57 = *(_QWORD *)(v38
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v58 = specialized static Array<A>.== infix(_:_:)(v56, v57);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v58 & 1) == 0)
    goto LABEL_19;
  v59 = v31
      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__repeatable;
  v60 = v38;
  v61 = v38
      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__repeatable;
  v62 = v89;
  outlined init with copy of PgQuery_Alias?(v61, v89, &demangling cache variable for type metadata for PgQuery_Node?);
  v63 = v90;
  v64 = v90 + *(int *)(v14 + 48);
  outlined init with copy of PgQuery_Alias?(v59, v90, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v62, v64, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v35(v63, 1, v40) == 1)
  {
    if (v35(v64, 1, v40) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v63, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)(v62, &demangling cache variable for type metadata for PgQuery_Node?);
      v4 = v86;
      goto LABEL_26;
    }
    v67 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_32;
  }
  v66 = v88;
  outlined init with copy of PgQuery_Alias?(v63, v88, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v35(v64, 1, v40) == 1)
  {
    v67 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_31:
    outlined destroy of PgQuery_Alias(v66, type metadata accessor for PgQuery_Node);
LABEL_32:
    outlined destroy of (key: String, value: StorableValue)(v63, v67);
    outlined destroy of (key: String, value: StorableValue)(v62, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_19;
  }
  v68 = v87;
  outlined init with take of PgQuery_OidList(v64, v87, type metadata accessor for PgQuery_Node);
  v69 = *(int *)(v40 + 20);
  v70 = *(_QWORD *)(v66 + v69);
  v71 = *(_QWORD *)(v68 + v69);
  if (v70 != v71)
  {
    swift_retain();
    swift_retain();
    v72 = closure #1 in static PgQuery_Node.== infix(_:_:)(v70, v71);
    swift_release();
    swift_release();
    if (!v72)
    {
      outlined destroy of PgQuery_Alias(v68, type metadata accessor for PgQuery_Node);
      v67 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_31;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v4 = v86;
  v73 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v68, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v66, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v63, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v62, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v73 & 1) != 0)
  {
LABEL_26:
    v74 = *(_DWORD *)(v31
                    + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    v75 = *(_DWORD *)(v60
                    + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    swift_release();
    v76 = v74 == v75;
    v29 = v84;
    v7 = v85;
    v9 = v82;
    a2 = v83;
    if (!v76)
    {
      v65 = 0;
      return v65 & 1;
    }
LABEL_28:
    v77 = v93;
    v78 = *(void (**)(char *, uint64_t, uint64_t))(v93 + 16);
    v78(v9, v29, v4);
    v78(v7, a2, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v79 = v7;
    v65 = dispatch thunk of static Equatable.== infix(_:_:)();
    v80 = *(void (**)(char *, uint64_t))(v77 + 8);
    v80(v79, v4);
    v80(v9, v4);
    return v65 & 1;
  }
LABEL_19:
  swift_release();
  swift_release();
  v65 = 0;
  return v65 & 1;
}

uint64_t specialized static PgQuery_OnConflictClause.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t InferClause;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t, uint64_t);
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  char v90;
  int v91;
  int v92;
  BOOL v93;
  void (*v94)(char *, uint64_t, uint64_t);
  uint64_t v95;
  char v96;
  void (*v97)(char *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  char v104;
  int v105;
  int v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v108 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v108 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v124 = *(_QWORD *)(Node - 8);
  v125 = Node;
  v12 = MEMORY[0x1E0C80A78](Node);
  v116 = (uint64_t)&v108 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v115 = (uint64_t)&v108 - v14;
  v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v15 = MEMORY[0x1E0C80A78](v123);
  v121 = (uint64_t)&v108 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v119 = (uint64_t)&v108 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v19 = MEMORY[0x1E0C80A78](v18);
  v118 = (uint64_t)&v108 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v120 = (uint64_t)&v108 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v117 = (uint64_t)&v108 - v24;
  MEMORY[0x1E0C80A78](v23);
  v122 = (uint64_t)&v108 - v25;
  InferClause = type metadata accessor for PgQuery_InferClause(0);
  v27 = *(_QWORD *)(InferClause - 8);
  MEMORY[0x1E0C80A78](InferClause);
  v126 = (uint64_t)&v108 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_InferClause?, PgQuery_InferClause?));
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v108 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_InferClause?);
  v33 = MEMORY[0x1E0C80A78](v32);
  v127 = (uint64_t)&v108 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33);
  v128 = (uint64_t)&v108 - v35;
  v36 = type metadata accessor for PgQuery_OnConflictClause(0);
  v37 = a1;
  v38 = a2;
  v39 = *(int *)(v36 + 20);
  v40 = *(_QWORD *)(a1 + v39);
  v41 = *(_QWORD *)(a2 + v39);
  if (v40 == v41)
    goto LABEL_33;
  v42 = v4;
  v114 = v10;
  v43 = *(_QWORD *)(v41 + 16);
  if (*(_BYTE *)(v41 + 24) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)(v40 + 16) != v43)
    goto LABEL_55;
  v110 = v37;
  v111 = v38;
  v112 = v8;
  v113 = v5;
  v44 = v40
      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__infer;
  v45 = v40;
  v46 = v128;
  outlined init with copy of PgQuery_Alias?(v41+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__infer, v128, &demangling cache variable for type metadata for PgQuery_InferClause?);
  v47 = (uint64_t)&v31[*(int *)(v29 + 48)];
  outlined init with copy of PgQuery_Alias?(v44, (uint64_t)v31, &demangling cache variable for type metadata for PgQuery_InferClause?);
  outlined init with copy of PgQuery_Alias?(v46, v47, &demangling cache variable for type metadata for PgQuery_InferClause?);
  v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  if (v48((uint64_t)v31, 1, InferClause) == 1)
  {
    v49 = v48(v47, 1, InferClause);
    v50 = v45;
    swift_retain();
    swift_retain();
    if (v49 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v31, &demangling cache variable for type metadata for PgQuery_InferClause?);
      outlined destroy of (key: String, value: StorableValue)(v128, &demangling cache variable for type metadata for PgQuery_InferClause?);
      v4 = v42;
      goto LABEL_8;
    }
    v62 = &demangling cache variable for type metadata for (PgQuery_InferClause?, PgQuery_InferClause?);
LABEL_53:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v31, v62);
    outlined destroy of (key: String, value: StorableValue)(v128, &demangling cache variable for type metadata for PgQuery_InferClause?);
    goto LABEL_54;
  }
  v50 = v45;
  v61 = v127;
  outlined init with copy of PgQuery_Alias?((uint64_t)v31, v127, &demangling cache variable for type metadata for PgQuery_InferClause?);
  if (v48(v47, 1, InferClause) == 1)
  {
    swift_retain();
    swift_retain();
    v62 = &demangling cache variable for type metadata for (PgQuery_InferClause?, PgQuery_InferClause?);
LABEL_52:
    outlined destroy of PgQuery_Alias(v61, type metadata accessor for PgQuery_InferClause);
    goto LABEL_53;
  }
  v63 = v126;
  outlined init with take of PgQuery_OidList(v47, v126, type metadata accessor for PgQuery_InferClause);
  v64 = *(int *)(InferClause + 20);
  v65 = *(_QWORD *)(v61 + v64);
  v66 = *(_QWORD *)(v63 + v64);
  if (v65 == v66)
  {
    swift_retain();
    swift_retain();
    goto LABEL_21;
  }
  v67 = *(_QWORD *)(v65 + 16);
  v68 = *(_QWORD *)(v66 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v69 = specialized static Array<A>.== infix(_:_:)(v67, v68);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v69 & 1) == 0)
    goto LABEL_50;
  v108 = v65;
  v109 = v66;
  v70 = v65
      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  v71 = v122;
  outlined init with copy of PgQuery_Alias?(v66+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v122, &demangling cache variable for type metadata for PgQuery_Node?);
  v72 = v119;
  v73 = v119 + *(int *)(v123 + 48);
  outlined init with copy of PgQuery_Alias?(v70, v119, &demangling cache variable for type metadata for PgQuery_Node?);
  v74 = v72;
  outlined init with copy of PgQuery_Alias?(v71, v73, &demangling cache variable for type metadata for PgQuery_Node?);
  v75 = v125;
  v76 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v124 + 48);
  if (v76(v74, 1, v125) == 1)
  {
    if (v76(v73, 1, v75) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v74, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)(v122, &demangling cache variable for type metadata for PgQuery_Node?);
      v61 = v127;
      v77 = v108;
      v78 = v109;
      goto LABEL_38;
    }
    v84 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_49;
  }
  v83 = v117;
  outlined init with copy of PgQuery_Alias?(v74, v117, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v76(v73, 1, v75) == 1)
  {
    v84 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_48:
    outlined destroy of PgQuery_Alias(v83, type metadata accessor for PgQuery_Node);
LABEL_49:
    outlined destroy of (key: String, value: StorableValue)(v74, v84);
    outlined destroy of (key: String, value: StorableValue)(v122, &demangling cache variable for type metadata for PgQuery_Node?);
    v61 = v127;
    goto LABEL_50;
  }
  v98 = v115;
  outlined init with take of PgQuery_OidList(v73, v115, type metadata accessor for PgQuery_Node);
  v99 = *(int *)(v75 + 20);
  v100 = *(_QWORD *)(v83 + v99);
  v101 = *(_QWORD *)(v98 + v99);
  if (v100 != v101)
  {
    swift_retain();
    swift_retain();
    v102 = closure #1 in static PgQuery_Node.== infix(_:_:)(v100, v101);
    swift_release();
    swift_release();
    if (!v102)
    {
      outlined destroy of PgQuery_Alias(v98, type metadata accessor for PgQuery_Node);
      v84 = &demangling cache variable for type metadata for PgQuery_Node?;
      v83 = v117;
      goto LABEL_48;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v103 = v117;
  v104 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v98, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v103, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v74, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v122, &demangling cache variable for type metadata for PgQuery_Node?);
  v61 = v127;
  v77 = v108;
  v78 = v109;
  if ((v104 & 1) == 0)
  {
LABEL_50:
    swift_release();
    swift_release();
    v63 = v126;
LABEL_51:
    outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_InferClause);
    v62 = &demangling cache variable for type metadata for PgQuery_InferClause?;
    goto LABEL_52;
  }
LABEL_38:
  if ((*(_QWORD *)(v77
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__conname) != *(_QWORD *)(v78 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__conname)
     || *(_QWORD *)(v77
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__conname
                  + 8) != *(_QWORD *)(v78
                                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__conname
                                    + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_50;
  }
  v105 = *(_DWORD *)(v77
                   + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  v106 = *(_DWORD *)(v78
                   + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  v93 = v105 == v106;
  v63 = v126;
  if (!v93)
    goto LABEL_51;
LABEL_21:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v79 = v61;
  v4 = v42;
  v80 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_InferClause);
  outlined destroy of PgQuery_Alias(v79, type metadata accessor for PgQuery_InferClause);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v31, &demangling cache variable for type metadata for PgQuery_InferClause?);
  outlined destroy of (key: String, value: StorableValue)(v128, &demangling cache variable for type metadata for PgQuery_InferClause?);
  if ((v80 & 1) == 0)
    goto LABEL_54;
LABEL_8:
  v51 = *(_QWORD *)(v50
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList);
  v52 = *(_QWORD *)(v41
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v53 = specialized static Array<A>.== infix(_:_:)(v51, v52);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v53 & 1) == 0)
    goto LABEL_54;
  v54 = v50;
  v55 = v50
      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  v56 = v120;
  outlined init with copy of PgQuery_Alias?(v41+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v120, &demangling cache variable for type metadata for PgQuery_Node?);
  v57 = v121;
  v58 = v121 + *(int *)(v123 + 48);
  outlined init with copy of PgQuery_Alias?(v55, v121, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v56, v58, &demangling cache variable for type metadata for PgQuery_Node?);
  v59 = v125;
  v60 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v124 + 48);
  if (v60(v57, 1, v125) == 1)
  {
    if (v60(v58, 1, v59) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v57, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)(v56, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_31;
    }
    v82 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_45;
  }
  v81 = v118;
  outlined init with copy of PgQuery_Alias?(v57, v118, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v60(v58, 1, v59) == 1)
  {
    v82 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_44:
    outlined destroy of PgQuery_Alias(v81, type metadata accessor for PgQuery_Node);
LABEL_45:
    outlined destroy of (key: String, value: StorableValue)(v57, v82);
    outlined destroy of (key: String, value: StorableValue)(v56, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_54;
  }
  v85 = v116;
  outlined init with take of PgQuery_OidList(v58, v116, type metadata accessor for PgQuery_Node);
  v86 = *(int *)(v59 + 20);
  v87 = *(_QWORD *)(v81 + v86);
  v88 = *(_QWORD *)(v85 + v86);
  if (v87 != v88)
  {
    swift_retain();
    swift_retain();
    v89 = closure #1 in static PgQuery_Node.== infix(_:_:)(v87, v88);
    swift_release();
    swift_release();
    if (!v89)
    {
      outlined destroy of PgQuery_Alias(v85, type metadata accessor for PgQuery_Node);
      v82 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_44;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v90 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v85, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v81, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v57, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v56, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v90 & 1) == 0)
  {
LABEL_54:
    swift_release();
    swift_release();
LABEL_55:
    v96 = 0;
    return v96 & 1;
  }
LABEL_31:
  v91 = *(_DWORD *)(v54
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  v92 = *(_DWORD *)(v41
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  v93 = v91 == v92;
  v8 = v112;
  v5 = v113;
  v10 = v114;
  v37 = v110;
  v38 = v111;
  if (!v93)
    goto LABEL_55;
LABEL_33:
  v94 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v95 = v38;
  v94(v10, v37, v4);
  v94(v8, v95, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v96 = dispatch thunk of static Equatable.== infix(_:_:)();
  v97 = *(void (**)(char *, uint64_t))(v5 + 8);
  v97(v8, v4);
  v97(v10, v4);
  return v96 & 1;
}

uint64_t specialized static PgQuery_CreateSchemaStmt.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t RoleSpec;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t SchemaStmt;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;

  v4 = type metadata accessor for UnknownStorage();
  v50 = *(_QWORD *)(v4 - 8);
  v51 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v49 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v48 = (char *)&v46 - v7;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v9 = *(_QWORD *)(RoleSpec - 8);
  MEMORY[0x1E0C80A78](RoleSpec);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?));
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v46 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v46 - v22;
  v24 = *a1;
  v25 = a1[1];
  v52 = a1;
  v53 = a2;
  if (v24 == *a2 && v25 == a2[1] || (v26 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    SchemaStmt = type metadata accessor for PgQuery_CreateSchemaStmt(0);
    outlined init with copy of PgQuery_Alias?((uint64_t)v52 + *(int *)(SchemaStmt + 32), (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    v47 = SchemaStmt;
    outlined init with copy of PgQuery_Alias?((uint64_t)v53 + *(int *)(SchemaStmt + 32), (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    v28 = (uint64_t)&v14[*(int *)(v12 + 48)];
    outlined init with copy of PgQuery_Alias?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined init with copy of PgQuery_Alias?((uint64_t)v21, v28, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v29((uint64_t)v14, 1, RoleSpec) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      if (v29(v28, 1, RoleSpec) == 1)
      {
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
LABEL_7:
        v30 = v52;
        v31 = v53;
        if ((specialized static Array<A>.== infix(_:_:)(v52[2], v53[2]) & 1) != 0
          && *((unsigned __int8 *)v30 + 24) == *((unsigned __int8 *)v31 + 24))
        {
          v32 = v47;
          v33 = v48;
          v34 = (uint64_t)v30 + *(int *)(v47 + 28);
          v36 = v50;
          v35 = v51;
          v37 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
          v37(v48, v34, v51);
          v38 = (uint64_t)v31 + *(int *)(v32 + 28);
          v39 = v49;
          v37(v49, v38, v35);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v26 = dispatch thunk of static Equatable.== infix(_:_:)();
          v40 = *(void (**)(char *, uint64_t))(v36 + 8);
          v40(v39, v35);
          v40(v33, v35);
          return v26 & 1;
        }
LABEL_24:
        v26 = 0;
        return v26 & 1;
      }
    }
    else
    {
      outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      if (v29(v28, 1, RoleSpec) != 1)
      {
        outlined init with take of PgQuery_OidList(v28, (uint64_t)v11, type metadata accessor for PgQuery_RoleSpec);
        v43 = *(_QWORD *)v11;
        if (v11[8] == 1)
          __asm { BR              X11 }
        if (*(_QWORD *)v18 == v43
          && (*((_QWORD *)v18 + 2) == *((_QWORD *)v11 + 2) && *((_QWORD *)v18 + 3) == *((_QWORD *)v11 + 3)
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          && *((_DWORD *)v18 + 8) == *((_DWORD *)v11 + 8))
        {
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v44 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_RoleSpec);
          outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
          outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
          outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RoleSpec);
          outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
          if ((v44 & 1) == 0)
            goto LABEL_24;
          goto LABEL_7;
        }
        outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_RoleSpec);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
        outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RoleSpec);
        v42 = (uint64_t)v14;
        v41 = &demangling cache variable for type metadata for PgQuery_RoleSpec?;
LABEL_23:
        outlined destroy of (key: String, value: StorableValue)(v42, v41);
        goto LABEL_24;
      }
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RoleSpec);
    }
    v41 = &demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?);
    v42 = (uint64_t)v14;
    goto LABEL_23;
  }
  return v26 & 1;
}

uint64_t specialized static PgQuery_CreatePolicyStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t RangeVar;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t PolicyStmt;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t, uint64_t);
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  char v94;
  void (*v95)(char *, uint64_t, uint64_t);
  uint64_t v96;
  char v97;
  uint64_t v98;
  void (*v99)(char *, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t Node;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  v122 = a1;
  v3 = type metadata accessor for UnknownStorage();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v102 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v102 - v8;
  Node = type metadata accessor for PgQuery_Node(0);
  v114 = *(_QWORD *)(Node - 8);
  v10 = MEMORY[0x1E0C80A78](Node);
  v108 = (uint64_t)&v102 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v110 = (uint64_t)&v102 - v12;
  v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v13 = MEMORY[0x1E0C80A78](v117);
  v111 = (uint64_t)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v116 = (uint64_t)&v102 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v109 = (uint64_t)&v102 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v112 = (uint64_t)&v102 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v113 = (uint64_t)&v102 - v22;
  MEMORY[0x1E0C80A78](v21);
  v115 = (uint64_t)&v102 - v23;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v25 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v119 = (uint64_t)&v102 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1E0C80A78](v27);
  v29 = (char *)&v102 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v31 = MEMORY[0x1E0C80A78](v30);
  v120 = (uint64_t)&v102 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31);
  v34 = (char *)&v102 - v33;
  PolicyStmt = type metadata accessor for PgQuery_CreatePolicyStmt(0);
  v36 = v122;
  v37 = *(int *)(PolicyStmt + 20);
  v38 = *(_QWORD *)(v122 + v37);
  v39 = *(_QWORD *)(a2 + v37);
  v40 = a2;
  if (v38 == v39)
    goto LABEL_38;
  v105 = a2;
  v106 = v9;
  v104 = v7;
  v107 = v4;
  v41 = *(_QWORD *)(v38 + 16);
  v42 = *(_QWORD *)(v38 + 24);
  v43 = *(_QWORD *)(v39 + 16);
  v44 = *(_QWORD *)(v39 + 24);
  v45 = v38;
  v121 = v39;
  if (v41 == v43 && v42 == v44
    || (v46 = _stringCompareWithSmolCheck(_:_:expecting:)(), v39 = v121, v47 = 0, (v46 & 1) != 0))
  {
    v103 = v3;
    v48 = v45
        + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__table;
    outlined init with copy of PgQuery_Alias?(v39+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__table, (uint64_t)v34, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    v49 = (uint64_t)&v29[*(int *)(v27 + 48)];
    outlined init with copy of PgQuery_Alias?(v48, (uint64_t)v29, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined init with copy of PgQuery_Alias?((uint64_t)v34, v49, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    v50 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
    if (v50((uint64_t)v29, 1, RangeVar) == 1)
    {
      v51 = v50(v49, 1, RangeVar);
      swift_retain();
      swift_retain();
      if (v51 == 1)
      {
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v29, &demangling cache variable for type metadata for PgQuery_RangeVar?);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v34, &demangling cache variable for type metadata for PgQuery_RangeVar?);
        v52 = v121;
LABEL_12:
        if (*(_QWORD *)(v45
                       + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cmdName) != *(_QWORD *)(v52 + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cmdName)
          || *(_QWORD *)(v45
                       + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cmdName
                       + 8) != *(_QWORD *)(v52
                                         + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cmdName
                                         + 8))
        {
          v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v52 = v121;
          if ((v56 & 1) == 0)
            goto LABEL_16;
        }
        if (*(unsigned __int8 *)(v45
                                + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__permissive) != *(unsigned __int8 *)(v52 + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__permissive))
          goto LABEL_16;
        v57 = *(_QWORD *)(v45
                        + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__roles);
        v58 = *(_QWORD *)(v52
                        + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__roles);
        v59 = v52;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v60 = v45;
        v61 = specialized static Array<A>.== infix(_:_:)(v57, v58);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v61 & 1) == 0)
          goto LABEL_16;
        v62 = v60;
        v63 = v60
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual;
        v64 = v115;
        outlined init with copy of PgQuery_Alias?(v59+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual, v115, &demangling cache variable for type metadata for PgQuery_Node?);
        v66 = v116;
        v65 = v117;
        v67 = v116 + *(int *)(v117 + 48);
        outlined init with copy of PgQuery_Alias?(v63, v116, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined init with copy of PgQuery_Alias?(v64, v67, &demangling cache variable for type metadata for PgQuery_Node?);
        v68 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v114 + 48);
        v69 = Node;
        if (v68(v66, 1, Node) == 1)
        {
          if (v68(v67, 1, v69) == 1)
          {
            outlined destroy of (key: String, value: StorableValue)(v66, &demangling cache variable for type metadata for PgQuery_Node?);
            outlined destroy of (key: String, value: StorableValue)(v64, &demangling cache variable for type metadata for PgQuery_Node?);
            v70 = v62;
LABEL_28:
            v80 = v70
                + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck;
            v81 = v112;
            outlined init with copy of PgQuery_Alias?(v121+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck, v112, &demangling cache variable for type metadata for PgQuery_Node?);
            v82 = *(int *)(v65 + 48);
            v83 = v111;
            v84 = v111 + v82;
            outlined init with copy of PgQuery_Alias?(v80, v111, &demangling cache variable for type metadata for PgQuery_Node?);
            v85 = v83;
            outlined init with copy of PgQuery_Alias?(v81, v84, &demangling cache variable for type metadata for PgQuery_Node?);
            if (v68(v83, 1, v69) == 1)
            {
              if (v68(v84, 1, v69) == 1)
              {
                outlined destroy of (key: String, value: StorableValue)(v83, &demangling cache variable for type metadata for PgQuery_Node?);
                outlined destroy of (key: String, value: StorableValue)(v112, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_37:
                swift_release();
                swift_release();
                v3 = v103;
                v7 = v104;
                v40 = v105;
                v9 = v106;
                v36 = v122;
                v4 = v107;
LABEL_38:
                v95 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
                v96 = v40;
                v95(v9, v36, v3);
                v95(v7, v96, v3);
                lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
                v97 = dispatch thunk of static Equatable.== infix(_:_:)();
                v98 = v4;
                v47 = v97;
                v99 = *(void (**)(char *, uint64_t))(v98 + 8);
                v99(v7, v3);
                v99(v9, v3);
                return v47 & 1;
              }
              v88 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
            }
            else
            {
              v86 = v83;
              v87 = v109;
              outlined init with copy of PgQuery_Alias?(v86, v109, &demangling cache variable for type metadata for PgQuery_Node?);
              if (v68(v84, 1, v69) == 1)
              {
                v88 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
              }
              else
              {
                v89 = v108;
                outlined init with take of PgQuery_OidList(v84, v108, type metadata accessor for PgQuery_Node);
                v90 = *(int *)(v69 + 20);
                v91 = *(_QWORD *)(v87 + v90);
                v92 = *(_QWORD *)(v89 + v90);
                if (v91 == v92
                  || (swift_retain(),
                      swift_retain(),
                      v93 = closure #1 in static PgQuery_Node.== infix(_:_:)(v91, v92),
                      swift_release(),
                      swift_release(),
                      v93))
                {
                  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
                  v94 = dispatch thunk of static Equatable.== infix(_:_:)();
                  outlined destroy of PgQuery_Alias(v89, type metadata accessor for PgQuery_Node);
                  outlined destroy of PgQuery_Alias(v87, type metadata accessor for PgQuery_Node);
                  outlined destroy of (key: String, value: StorableValue)(v111, &demangling cache variable for type metadata for PgQuery_Node?);
                  outlined destroy of (key: String, value: StorableValue)(v112, &demangling cache variable for type metadata for PgQuery_Node?);
                  if ((v94 & 1) != 0)
                    goto LABEL_37;
                  goto LABEL_16;
                }
                outlined destroy of PgQuery_Alias(v89, type metadata accessor for PgQuery_Node);
                v88 = &demangling cache variable for type metadata for PgQuery_Node?;
                v85 = v111;
              }
              outlined destroy of PgQuery_Alias(v87, type metadata accessor for PgQuery_Node);
            }
            outlined destroy of (key: String, value: StorableValue)(v85, v88);
            v101 = v112;
            goto LABEL_46;
          }
          v72 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_42:
          outlined destroy of (key: String, value: StorableValue)(v66, v72);
          v101 = v64;
LABEL_46:
          outlined destroy of (key: String, value: StorableValue)(v101, &demangling cache variable for type metadata for PgQuery_Node?);
          goto LABEL_16;
        }
        v71 = v113;
        outlined init with copy of PgQuery_Alias?(v66, v113, &demangling cache variable for type metadata for PgQuery_Node?);
        if (v68(v67, 1, v69) == 1)
        {
          v72 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_41:
          outlined destroy of PgQuery_Alias(v71, type metadata accessor for PgQuery_Node);
          goto LABEL_42;
        }
        v73 = v110;
        outlined init with take of PgQuery_OidList(v67, v110, type metadata accessor for PgQuery_Node);
        v74 = *(int *)(v69 + 20);
        v75 = *(_QWORD *)(v71 + v74);
        v76 = *(_QWORD *)(v73 + v74);
        if (v75 != v76)
        {
          swift_retain();
          swift_retain();
          v77 = closure #1 in static PgQuery_Node.== infix(_:_:)(v75, v76);
          swift_release();
          swift_release();
          if (!v77)
          {
            outlined destroy of PgQuery_Alias(v73, type metadata accessor for PgQuery_Node);
            v72 = &demangling cache variable for type metadata for PgQuery_Node?;
            v71 = v113;
            goto LABEL_41;
          }
        }
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v78 = v113;
        v79 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v73, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v78, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)(v66, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v64, &demangling cache variable for type metadata for PgQuery_Node?);
        v70 = v62;
        if ((v79 & 1) != 0)
          goto LABEL_28;
LABEL_16:
        swift_release();
        swift_release();
        v47 = 0;
        return v47 & 1;
      }
    }
    else
    {
      v53 = v120;
      outlined init with copy of PgQuery_Alias?((uint64_t)v29, v120, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      if (v50(v49, 1, RangeVar) != 1)
      {
        v54 = v119;
        outlined init with take of PgQuery_OidList(v49, v119, type metadata accessor for PgQuery_RangeVar);
        swift_retain();
        v52 = v121;
        swift_retain();
        v55 = specialized static PgQuery_RangeVar.== infix(_:_:)(v53, v54);
        outlined destroy of PgQuery_Alias(v54, type metadata accessor for PgQuery_RangeVar);
        outlined destroy of PgQuery_Alias(v53, type metadata accessor for PgQuery_RangeVar);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v29, &demangling cache variable for type metadata for PgQuery_RangeVar?);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v34, &demangling cache variable for type metadata for PgQuery_RangeVar?);
        if ((v55 & 1) == 0)
          goto LABEL_16;
        goto LABEL_12;
      }
      swift_retain();
      swift_retain();
      outlined destroy of PgQuery_Alias(v53, type metadata accessor for PgQuery_RangeVar);
    }
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v29, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v34, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    goto LABEL_16;
  }
  return v47 & 1;
}

uint64_t specialized static PgQuery_CreateDomainStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t CollateClause;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t DomainStmt;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  char v56;
  void (*v57)(char *, uint64_t, uint64_t);
  char v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t *v65;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t, uint64_t, uint64_t);
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t TypeName;
  uint64_t v124;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v100 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v110 = *(_QWORD *)(Node - 8);
  v111 = Node;
  MEMORY[0x1E0C80A78](Node);
  v107 = (uint64_t)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v109);
  v112 = (uint64_t)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v108 = (uint64_t)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v113 = (uint64_t)&v100 - v17;
  CollateClause = type metadata accessor for PgQuery_CollateClause(0);
  v118 = *(_QWORD *)(CollateClause - 8);
  v119 = CollateClause;
  MEMORY[0x1E0C80A78](CollateClause);
  v114 = (uint64_t)&v100 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_CollateClause?, PgQuery_CollateClause?));
  MEMORY[0x1E0C80A78](v117);
  v121 = (uint64_t)&v100 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CollateClause?);
  v22 = MEMORY[0x1E0C80A78](v21);
  v115 = (uint64_t)&v100 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v120 = (char *)&v100 - v24;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v25 = *(_QWORD *)(TypeName - 8);
  MEMORY[0x1E0C80A78](TypeName);
  v116 = (uint64_t)&v100 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
  MEMORY[0x1E0C80A78](v27);
  v124 = (uint64_t)&v100 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  v30 = MEMORY[0x1E0C80A78](v29);
  v122 = (uint64_t)&v100 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30);
  v33 = (char *)&v100 - v32;
  DomainStmt = type metadata accessor for PgQuery_CreateDomainStmt(0);
  v35 = a1;
  v36 = *(int *)(DomainStmt + 20);
  v37 = *(_QWORD *)(a1 + v36);
  v38 = *(_QWORD *)(a2 + v36);
  if (v37 == v38)
    goto LABEL_10;
  v101 = v35;
  v102 = a2;
  v103 = v10;
  v104 = v8;
  v105 = v5;
  v106 = v4;
  v39 = *(_QWORD *)(v37 + 16);
  v40 = *(_QWORD *)(v38 + 16);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v41 = specialized static Array<A>.== infix(_:_:)(v39, v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v41 & 1) == 0)
    goto LABEL_29;
  v42 = v37
      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName;
  v43 = v38;
  outlined init with copy of PgQuery_Alias?(v38+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, (uint64_t)v33, &demangling cache variable for type metadata for PgQuery_TypeName?);
  v44 = v124;
  v45 = v124 + *(int *)(v27 + 48);
  outlined init with copy of PgQuery_Alias?(v42, v124, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v33, v45, &demangling cache variable for type metadata for PgQuery_TypeName?);
  v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  v47 = TypeName;
  if (v46(v44, 1, TypeName) == 1)
  {
    v48 = v37;
    if (v46(v45, 1, v47) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v44, &demangling cache variable for type metadata for PgQuery_TypeName?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v33, &demangling cache variable for type metadata for PgQuery_TypeName?);
      v4 = v106;
      goto LABEL_6;
    }
    v61 = &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?);
LABEL_27:
    outlined destroy of (key: String, value: StorableValue)(v44, v61);
    v65 = &demangling cache variable for type metadata for PgQuery_TypeName?;
LABEL_28:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v33, v65);
LABEL_29:
    swift_release();
    swift_release();
    goto LABEL_30;
  }
  v60 = v122;
  outlined init with copy of PgQuery_Alias?(v44, v122, &demangling cache variable for type metadata for PgQuery_TypeName?);
  v48 = v37;
  if (v46(v45, 1, v47) == 1)
  {
    v61 = &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?);
LABEL_26:
    outlined destroy of PgQuery_Alias(v60, type metadata accessor for PgQuery_TypeName);
    goto LABEL_27;
  }
  v62 = v116;
  outlined init with take of PgQuery_OidList(v45, v116, type metadata accessor for PgQuery_TypeName);
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)v60, *(_QWORD *)v62) & 1) == 0
    || *(_DWORD *)(v60 + 8) != *(_DWORD *)(v62 + 8)
    || *(unsigned __int8 *)(v60 + 12) != *(unsigned __int8 *)(v62 + 12)
    || *(unsigned __int8 *)(v60 + 13) != *(unsigned __int8 *)(v62 + 13)
    || (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v60 + 16), *(_QWORD *)(v62 + 16)) & 1) == 0
    || *(_DWORD *)(v60 + 24) != *(_DWORD *)(v62 + 24)
    || (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v60 + 32), *(_QWORD *)(v62 + 32)) & 1) == 0
    || *(_DWORD *)(v60 + 40) != *(_DWORD *)(v62 + 40))
  {
    outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_TypeName);
    v61 = &demangling cache variable for type metadata for PgQuery_TypeName?;
    goto LABEL_26;
  }
  v63 = v60;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v4 = v106;
  v64 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_TypeName);
  outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_TypeName);
  outlined destroy of (key: String, value: StorableValue)(v44, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v33, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((v64 & 1) == 0)
    goto LABEL_29;
LABEL_6:
  v49 = v48
      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collClause;
  v33 = v120;
  outlined init with copy of PgQuery_Alias?(v38+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collClause, (uint64_t)v120, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  v50 = v121;
  v51 = v121 + *(int *)(v117 + 48);
  outlined init with copy of PgQuery_Alias?(v49, v121, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v33, v51, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  v52 = v119;
  v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v118 + 48);
  if (v53(v50, 1, v119) == 1)
  {
    if (v53(v51, 1, v52) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v50, &demangling cache variable for type metadata for PgQuery_CollateClause?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v33, &demangling cache variable for type metadata for PgQuery_CollateClause?);
      goto LABEL_9;
    }
    v68 = &demangling cache variable for type metadata for (PgQuery_CollateClause?, PgQuery_CollateClause?);
    goto LABEL_55;
  }
  v67 = v115;
  outlined init with copy of PgQuery_Alias?(v50, v115, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  if (v53(v51, 1, v52) == 1)
  {
    v68 = &demangling cache variable for type metadata for (PgQuery_CollateClause?, PgQuery_CollateClause?);
LABEL_54:
    outlined destroy of PgQuery_Alias(v67, type metadata accessor for PgQuery_CollateClause);
LABEL_55:
    outlined destroy of (key: String, value: StorableValue)(v50, v68);
    v65 = &demangling cache variable for type metadata for PgQuery_CollateClause?;
    goto LABEL_28;
  }
  v69 = v51;
  v70 = v114;
  outlined init with take of PgQuery_OidList(v69, v114, type metadata accessor for PgQuery_CollateClause);
  v71 = *(int *)(v52 + 20);
  v72 = *(_QWORD *)(v67 + v71);
  v73 = *(_QWORD *)(v70 + v71);
  if (v72 != v73)
  {
    v74 = v72
        + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
    v124 = *(_QWORD *)(v70 + v71);
    v75 = v113;
    outlined init with copy of PgQuery_Alias?(v73+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v113, &demangling cache variable for type metadata for PgQuery_Node?);
    v76 = v112;
    v77 = v112 + *(int *)(v109 + 48);
    outlined init with copy of PgQuery_Alias?(v74, v112, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined init with copy of PgQuery_Alias?(v75, v77, &demangling cache variable for type metadata for PgQuery_Node?);
    v78 = v111;
    v79 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v110 + 48);
    if (v79(v76, 1, v111) == 1)
    {
      v80 = v79(v77, 1, v78);
      swift_retain();
      v81 = v124;
      swift_retain();
      if (v80 == 1)
      {
        outlined destroy of (key: String, value: StorableValue)(v76, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v113, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_45:
        v92 = *(_QWORD *)(v72
                        + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collname);
        v93 = *(_QWORD *)(v81
                        + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collname);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v94 = specialized static Array<A>.== infix(_:_:)(v92, v93);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v94 & 1) != 0)
        {
          v95 = *(_DWORD *)(v72
                          + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
          v96 = *(_DWORD *)(v81
                          + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
          swift_release();
          swift_release();
          if (v95 == v96)
            goto LABEL_47;
LABEL_53:
          outlined destroy of PgQuery_Alias(v114, type metadata accessor for PgQuery_CollateClause);
          v68 = &demangling cache variable for type metadata for PgQuery_CollateClause?;
          v67 = v115;
          goto LABEL_54;
        }
LABEL_52:
        swift_release();
        swift_release();
        goto LABEL_53;
      }
      v83 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      TypeName = v72;
      v82 = v108;
      outlined init with copy of PgQuery_Alias?(v76, v108, &demangling cache variable for type metadata for PgQuery_Node?);
      if (v79(v77, 1, v78) == 1)
      {
        swift_retain();
        swift_retain();
        v83 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
      }
      else
      {
        v84 = v77;
        v85 = v78;
        v86 = v107;
        outlined init with take of PgQuery_OidList(v84, v107, type metadata accessor for PgQuery_Node);
        v87 = *(int *)(v85 + 20);
        v88 = *(_QWORD *)(v82 + v87);
        v89 = *(_QWORD *)(v86 + v87);
        swift_retain();
        swift_retain();
        if (v88 == v89
          || (swift_retain(),
              swift_retain(),
              v90 = closure #1 in static PgQuery_Node.== infix(_:_:)(v88, v89),
              swift_release(),
              swift_release(),
              v90))
        {
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v91 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of PgQuery_Alias(v86, type metadata accessor for PgQuery_Node);
          outlined destroy of PgQuery_Alias(v82, type metadata accessor for PgQuery_Node);
          outlined destroy of (key: String, value: StorableValue)(v112, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined destroy of (key: String, value: StorableValue)(v113, &demangling cache variable for type metadata for PgQuery_Node?);
          v72 = TypeName;
          v81 = v124;
          if ((v91 & 1) == 0)
            goto LABEL_52;
          goto LABEL_45;
        }
        outlined destroy of PgQuery_Alias(v86, type metadata accessor for PgQuery_Node);
        v83 = &demangling cache variable for type metadata for PgQuery_Node?;
        v76 = v112;
      }
      outlined destroy of PgQuery_Alias(v82, type metadata accessor for PgQuery_Node);
    }
    outlined destroy of (key: String, value: StorableValue)(v76, v83);
    outlined destroy of (key: String, value: StorableValue)(v113, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_52;
  }
LABEL_47:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v97 = v114;
  v98 = v115;
  v4 = v106;
  v99 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v97, type metadata accessor for PgQuery_CollateClause);
  outlined destroy of PgQuery_Alias(v98, type metadata accessor for PgQuery_CollateClause);
  outlined destroy of (key: String, value: StorableValue)(v50, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v33, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  if ((v99 & 1) == 0)
    goto LABEL_29;
LABEL_9:
  v54 = *(_QWORD *)(v48
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints);
  v55 = *(_QWORD *)(v43
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v56 = specialized static Array<A>.== infix(_:_:)(v54, v55);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v10 = v103;
  a2 = v102;
  v35 = v101;
  v8 = v104;
  v5 = v105;
  if ((v56 & 1) == 0)
  {
LABEL_30:
    v58 = 0;
    return v58 & 1;
  }
LABEL_10:
  v57 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v57(v10, v35, v4);
  v57(v8, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v58 = dispatch thunk of static Equatable.== infix(_:_:)();
  v59 = *(void (**)(char *, uint64_t))(v5 + 8);
  v59(v8, v4);
  v59(v10, v4);
  return v58 & 1;
}

uint64_t specialized static PgQuery_AlterRoleSetStmt.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t RoleSpec;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t AlterRoleSetStmt;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  _QWORD *v33;
  _QWORD *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t *v61;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t VariableSetStmt;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;

  v78 = a2;
  v68 = type metadata accessor for UnknownStorage();
  v66 = *(_QWORD *)(v68 - 8);
  v3 = MEMORY[0x1E0C80A78](v68);
  v65 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v64 = (char *)&v63 - v5;
  VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  v70 = *(_QWORD *)(VariableSetStmt - 8);
  MEMORY[0x1E0C80A78](VariableSetStmt);
  v63 = (uint64_t)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_VariableSetStmt?, PgQuery_VariableSetStmt?));
  MEMORY[0x1E0C80A78](v69);
  v73 = (uint64_t)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v67 = (uint64_t)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v77 = (uint64_t)&v63 - v12;
  MEMORY[0x1E0C80A78](v11);
  v71 = (uint64_t)&v63 - v13;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v15 = *(_QWORD *)(RoleSpec - 8);
  MEMORY[0x1E0C80A78](RoleSpec);
  v74 = (uint64_t)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?));
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v63 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v21);
  v26 = (char *)&v63 - v25;
  MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v63 - v27;
  AlterRoleSetStmt = type metadata accessor for PgQuery_AlterRoleSetStmt(0);
  v30 = *(int *)(AlterRoleSetStmt + 24);
  v76 = a1;
  outlined init with copy of PgQuery_Alias?((uint64_t)a1 + v30, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v75 = AlterRoleSetStmt;
  outlined init with copy of PgQuery_Alias?((uint64_t)v78 + *(int *)(AlterRoleSetStmt + 24), (uint64_t)v26, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v31 = (uint64_t)&v19[*(int *)(v17 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v26, v31, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v19, 1, RoleSpec) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v26, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    if (v32(v31, 1, RoleSpec) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      goto LABEL_4;
    }
LABEL_13:
    v52 = &demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?);
    v53 = (uint64_t)v19;
LABEL_38:
    outlined destroy of (key: String, value: StorableValue)(v53, v52);
    goto LABEL_39;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v19, (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if (v32(v31, 1, RoleSpec) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v26, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of PgQuery_Alias((uint64_t)v23, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_13;
  }
  v54 = v74;
  outlined init with take of PgQuery_OidList(v31, v74, type metadata accessor for PgQuery_RoleSpec);
  v55 = *(_QWORD *)v54;
  if (*(_BYTE *)(v54 + 8) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)v23 != v55
    || (*((_QWORD *)v23 + 2) != *(_QWORD *)(v54 + 16) || *((_QWORD *)v23 + 3) != *(_QWORD *)(v54 + 24))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || *((_DWORD *)v23 + 8) != *(_DWORD *)(v54 + 32))
  {
    outlined destroy of PgQuery_Alias(v54, type metadata accessor for PgQuery_RoleSpec);
    v61 = &demangling cache variable for type metadata for PgQuery_RoleSpec?;
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v26, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of PgQuery_Alias((uint64_t)v23, type metadata accessor for PgQuery_RoleSpec);
    v53 = (uint64_t)v19;
    goto LABEL_37;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v56 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v54, type metadata accessor for PgQuery_RoleSpec);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v26, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of PgQuery_Alias((uint64_t)v23, type metadata accessor for PgQuery_RoleSpec);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if ((v56 & 1) == 0)
    goto LABEL_39;
LABEL_4:
  v33 = v76;
  v34 = v78;
  if (*v76 == *v78 && v76[1] == v78[1] || (v35 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v36 = v75;
    v37 = v71;
    outlined init with copy of PgQuery_Alias?((uint64_t)v33 + *(int *)(v75 + 28), v71, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    v38 = v77;
    outlined init with copy of PgQuery_Alias?((uint64_t)v34 + *(int *)(v36 + 28), v77, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    v39 = v73;
    v40 = v73 + *(int *)(v69 + 48);
    outlined init with copy of PgQuery_Alias?(v37, v73, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    outlined init with copy of PgQuery_Alias?(v38, v40, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48);
    v42 = VariableSetStmt;
    if (v41(v39, 1, VariableSetStmt) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v38, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      outlined destroy of (key: String, value: StorableValue)(v37, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      if (v41(v40, 1, v42) == 1)
      {
        outlined destroy of (key: String, value: StorableValue)(v39, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
LABEL_10:
        v43 = v75;
        v44 = (char *)v33 + *(int *)(v75 + 20);
        v45 = v66;
        v46 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
        v47 = v64;
        v48 = v68;
        v46(v64, v44, v68);
        v49 = (char *)v34 + *(int *)(v43 + 20);
        v50 = v65;
        v46(v65, v49, v48);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v35 = dispatch thunk of static Equatable.== infix(_:_:)();
        v51 = *(void (**)(char *, uint64_t))(v45 + 8);
        v51(v50, v48);
        v51(v47, v48);
        return v35 & 1;
      }
      goto LABEL_25;
    }
    v57 = v67;
    outlined init with copy of PgQuery_Alias?(v39, v67, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    if (v41(v40, 1, v42) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v77, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      outlined destroy of (key: String, value: StorableValue)(v37, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      outlined destroy of PgQuery_Alias(v57, type metadata accessor for PgQuery_VariableSetStmt);
LABEL_25:
      v52 = &demangling cache variable for type metadata for (PgQuery_VariableSetStmt?, PgQuery_VariableSetStmt?);
      v53 = v39;
      goto LABEL_38;
    }
    v58 = v63;
    outlined init with take of PgQuery_OidList(v40, v63, type metadata accessor for PgQuery_VariableSetStmt);
    v59 = *(_QWORD *)v58;
    if (*(_BYTE *)(v58 + 8) == 1)
      __asm { BR              X11 }
    if (*(_QWORD *)v57 == v59
      && (*(_QWORD *)(v57 + 16) == *(_QWORD *)(v58 + 16) && *(_QWORD *)(v57 + 24) == *(_QWORD *)(v58 + 24)
       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v57 + 32), *(_QWORD *)(v58 + 32)) & 1) != 0
      && *(unsigned __int8 *)(v57 + 40) == *(unsigned __int8 *)(v58 + 40))
    {
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v60 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of PgQuery_Alias(v58, type metadata accessor for PgQuery_VariableSetStmt);
      outlined destroy of (key: String, value: StorableValue)(v77, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      outlined destroy of (key: String, value: StorableValue)(v37, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      outlined destroy of PgQuery_Alias(v57, type metadata accessor for PgQuery_VariableSetStmt);
      outlined destroy of (key: String, value: StorableValue)(v39, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      if ((v60 & 1) != 0)
        goto LABEL_10;
LABEL_39:
      v35 = 0;
      return v35 & 1;
    }
    outlined destroy of PgQuery_Alias(v58, type metadata accessor for PgQuery_VariableSetStmt);
    v61 = &demangling cache variable for type metadata for PgQuery_VariableSetStmt?;
    outlined destroy of (key: String, value: StorableValue)(v77, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    outlined destroy of (key: String, value: StorableValue)(v37, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    outlined destroy of PgQuery_Alias(v57, type metadata accessor for PgQuery_VariableSetStmt);
    v53 = v39;
LABEL_37:
    v52 = v61;
    goto LABEL_38;
  }
  return v35 & 1;
}

uint64_t specialized static PgQuery_WithCheckOption.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  char v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  char v45;
  int v46;
  int v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  char v51;
  char *v52;
  void (*v53)(char *, uint64_t);
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v55 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v12 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v60 = (uint64_t)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v18 = MEMORY[0x1E0C80A78](v17);
  v61 = (uint64_t)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v62 = (uint64_t)&v55 - v20;
  v21 = type metadata accessor for PgQuery_WithCheckOption(0);
  v22 = a1;
  v23 = a2;
  v24 = *(int *)(v21 + 20);
  v25 = *(_QWORD **)(a1 + v24);
  v26 = *(_QWORD *)(v23 + v24);
  if (v25 == (_QWORD *)v26)
  {
LABEL_26:
    v48 = v5;
    v49 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v50 = v23;
    v49(v10, v22, v4);
    v49(v8, v50, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v51 = dispatch thunk of static Equatable.== infix(_:_:)();
    v52 = v8;
    v29 = v51;
    v53 = *(void (**)(char *, uint64_t))(v48 + 8);
    v53(v52, v4);
    v53(v10, v4);
    return v29 & 1;
  }
  v27 = *(_QWORD *)(v26 + 16);
  if (*(_BYTE *)(v26 + 24) == 1)
    __asm { BR              X11 }
  if (v25[2] != v27)
    goto LABEL_31;
  v57 = v22;
  v58 = v23;
  v59 = v8;
  v28 = v25[4] == *(_QWORD *)(v26 + 32) && v25[5] == *(_QWORD *)(v26 + 40);
  if (v28 || (v29 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v30 = v25[6] == *(_QWORD *)(v26 + 48) && v25[7] == *(_QWORD *)(v26 + 56);
    if (v30 || (v29 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      v55 = v5;
      v56 = v10;
      v31 = (uint64_t)v25
          + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_WithCheckOptionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual;
      v32 = v62;
      outlined init with copy of PgQuery_Alias?(v26+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_WithCheckOptionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual, v62, &demangling cache variable for type metadata for PgQuery_Node?);
      v33 = (uint64_t)&v16[*(int *)(v14 + 48)];
      outlined init with copy of PgQuery_Alias?(v31, (uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined init with copy of PgQuery_Alias?(v32, v33, &demangling cache variable for type metadata for PgQuery_Node?);
      v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
      if (v34((uint64_t)v16, 1, Node) == 1)
      {
        v35 = v34(v33, 1, Node);
        swift_retain();
        swift_retain();
        v10 = v56;
        if (v35 == 1)
        {
          outlined destroy of (key: String, value: StorableValue)((uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined destroy of (key: String, value: StorableValue)(v62, &demangling cache variable for type metadata for PgQuery_Node?);
          goto LABEL_24;
        }
        v38 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
      }
      else
      {
        v36 = v61;
        outlined init with copy of PgQuery_Alias?((uint64_t)v16, v61, &demangling cache variable for type metadata for PgQuery_Node?);
        v37 = v34(v33, 1, Node);
        v10 = v56;
        if (v37 == 1)
        {
          swift_retain();
          swift_retain();
          v38 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
        }
        else
        {
          v39 = v60;
          outlined init with take of PgQuery_OidList(v33, v60, type metadata accessor for PgQuery_Node);
          v40 = *(int *)(Node + 20);
          v41 = *(_QWORD *)(v36 + v40);
          v42 = *(_QWORD *)(v39 + v40);
          swift_retain();
          swift_retain();
          if (v41 == v42
            || (swift_retain(),
                swift_retain(),
                v43 = closure #1 in static PgQuery_Node.== infix(_:_:)(v41, v42),
                swift_release(),
                swift_release(),
                v43))
          {
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
            v44 = v61;
            v45 = dispatch thunk of static Equatable.== infix(_:_:)();
            outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_Node);
            outlined destroy of PgQuery_Alias(v44, type metadata accessor for PgQuery_Node);
            outlined destroy of (key: String, value: StorableValue)((uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
            outlined destroy of (key: String, value: StorableValue)(v62, &demangling cache variable for type metadata for PgQuery_Node?);
            if ((v45 & 1) != 0)
            {
LABEL_24:
              v46 = *((unsigned __int8 *)v25
                    + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_WithCheckOptionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cascaded);
              v47 = *(unsigned __int8 *)(v26
                                       + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_WithCheckOptionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cascaded);
              swift_release();
              swift_release();
              v28 = v46 == v47;
              v5 = v55;
              v23 = v58;
              v8 = v59;
              v22 = v57;
              if (!v28)
                goto LABEL_31;
              goto LABEL_26;
            }
LABEL_30:
            swift_release();
            swift_release();
LABEL_31:
            v29 = 0;
            return v29 & 1;
          }
          outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_Node);
          v38 = &demangling cache variable for type metadata for PgQuery_Node?;
          v36 = v61;
        }
        outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
      }
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v16, v38);
      outlined destroy of (key: String, value: StorableValue)(v62, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_30;
    }
  }
  return v29 & 1;
}

uint64_t specialized static PgQuery_TransactionStmt.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  uint64_t TransactionStmt;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  v11 = *a2;
  if (*((_BYTE *)a2 + 8) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)a1 != v11 || (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 16), a2[2]) & 1) == 0)
    goto LABEL_13;
  if (*(_QWORD *)(a1 + 24) == a2[3] && *(_QWORD *)(a1 + 32) == a2[4]
    || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(_QWORD *)(a1 + 40) == a2[5] && *(_QWORD *)(a1 + 48) == a2[6]
      || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (*(unsigned __int8 *)(a1 + 56) == *((unsigned __int8 *)a2 + 56))
      {
        TransactionStmt = type metadata accessor for PgQuery_TransactionStmt(0);
        v14 = a1 + *(int *)(TransactionStmt + 36);
        v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v15(v10, v14, v4);
        v15(v8, (uint64_t)a2 + *(int *)(TransactionStmt + 36), v4);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v12 = dispatch thunk of static Equatable.== infix(_:_:)();
        v16 = *(void (**)(char *, uint64_t))(v5 + 8);
        v16(v8, v4);
        v16(v10, v4);
        return v12 & 1;
      }
LABEL_13:
      v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_TableLikeClause.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t RangeVar;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t TableLikeClause;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  char *v37;
  char v38;
  void (*v39)(char *, uint64_t);
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;

  v4 = type metadata accessor for UnknownStorage();
  v44 = *(_QWORD *)(v4 - 8);
  v45 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v43 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v42 = (char *)&v41 - v7;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v9 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v48 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v41 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v41 - v21;
  TableLikeClause = type metadata accessor for PgQuery_TableLikeClause(0);
  v24 = *(int *)(TableLikeClause + 28);
  v46 = a1;
  v25 = (uint64_t)&a1[v24];
  v26 = TableLikeClause;
  outlined init with copy of PgQuery_Alias?(v25, (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v27 = *(int *)(v26 + 28);
  v47 = a2;
  outlined init with copy of PgQuery_Alias?((uint64_t)&a2[v27], (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v28, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, RangeVar) != 1)
  {
    v30 = (uint64_t)v48;
    outlined init with copy of PgQuery_Alias?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if (v29(v28, 1, RangeVar) != 1)
    {
      outlined init with take of PgQuery_OidList(v28, v30, type metadata accessor for PgQuery_RangeVar);
      v31 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v17, v30);
      outlined destroy of PgQuery_Alias(v30, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      if ((v31 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      v38 = 0;
      return v38 & 1;
    }
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RangeVar);
LABEL_6:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    goto LABEL_11;
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v29(v28, 1, RangeVar) != 1)
    goto LABEL_6;
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
LABEL_8:
  v32 = v47;
  if (*(_DWORD *)v46 != *(_DWORD *)v47 || *((_DWORD *)v46 + 1) != *((_DWORD *)v47 + 1))
    goto LABEL_11;
  v34 = v44;
  v33 = v45;
  v35 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
  v36 = v42;
  v35(v42, &v46[*(int *)(v26 + 24)], v45);
  v37 = v43;
  v35(v43, &v32[*(int *)(v26 + 24)], v33);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v38 = dispatch thunk of static Equatable.== infix(_:_:)();
  v39 = *(void (**)(char *, uint64_t))(v34 + 8);
  v39(v37, v33);
  v39(v36, v33);
  return v38 & 1;
}

uint64_t specialized static PgQuery_SubscriptingRef.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t SubscriptingRef;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(uint64_t, uint64_t, uint64_t);
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  char v58;
  unsigned int (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  char v95;
  void (*v96)(char *, uint64_t, uint64_t);
  uint64_t v97;
  void (*v98)(char *, uint64_t);
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v101 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v118 = *(_QWORD *)(Node - 8);
  v12 = MEMORY[0x1E0C80A78](Node);
  v108 = (uint64_t)&v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v110 = (uint64_t)&v101 - v15;
  MEMORY[0x1E0C80A78](v14);
  v116 = (uint64_t)&v101 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v18 = MEMORY[0x1E0C80A78](v17);
  v111 = (uint64_t)&v101 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v114 = (uint64_t)&v101 - v21;
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v101 - v22;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v25 = MEMORY[0x1E0C80A78](v24);
  v109 = (uint64_t)&v101 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v112 = (uint64_t)&v101 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v113 = (uint64_t)&v101 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v115 = (uint64_t)&v101 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v117 = (uint64_t)&v101 - v34;
  MEMORY[0x1E0C80A78](v33);
  v36 = (char *)&v101 - v35;
  SubscriptingRef = type metadata accessor for PgQuery_SubscriptingRef(0);
  v38 = a1;
  v39 = *(int *)(SubscriptingRef + 20);
  v40 = *(_QWORD *)(a1 + v39);
  v41 = *(_QWORD *)(a2 + v39);
  v42 = a2;
  if (v40 == v41)
    goto LABEL_40;
  v102 = a2;
  v103 = v38;
  v104 = v10;
  v105 = v5;
  v101 = v8;
  v107 = v4;
  v43 = v40
      + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  v44 = v41;
  outlined init with copy of PgQuery_Alias?(v41+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v36, &demangling cache variable for type metadata for PgQuery_Node?);
  v106 = v17;
  v45 = (uint64_t)&v23[*(int *)(v17 + 48)];
  outlined init with copy of PgQuery_Alias?(v43, (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v36, v45, &demangling cache variable for type metadata for PgQuery_Node?);
  v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v118 + 48);
  if (v46((uint64_t)v23, 1, Node) == 1)
  {
    v47 = v46(v45, 1, Node);
    swift_retain();
    v48 = v44;
    swift_retain();
    v49 = v40;
    if (v47 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v36, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_11;
    }
    v51 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_22:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, v51);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v36, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_23;
  }
  v48 = v44;
  v50 = v117;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v117, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v46(v45, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    v51 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_21:
    outlined destroy of PgQuery_Alias(v50, type metadata accessor for PgQuery_Node);
    goto LABEL_22;
  }
  v52 = v116;
  outlined init with take of PgQuery_OidList(v45, v116, type metadata accessor for PgQuery_Node);
  v53 = *(int *)(Node + 20);
  v54 = *(_QWORD *)(v50 + v53);
  v55 = *(_QWORD *)(v52 + v53);
  swift_retain();
  swift_retain();
  if (v54 != v55)
  {
    swift_retain();
    swift_retain();
    v56 = closure #1 in static PgQuery_Node.== infix(_:_:)(v54, v55);
    swift_release();
    swift_release();
    if (!v56)
    {
      outlined destroy of PgQuery_Alias(v52, type metadata accessor for PgQuery_Node);
      v51 = &demangling cache variable for type metadata for PgQuery_Node?;
      v50 = v117;
      goto LABEL_21;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v57 = v117;
  v58 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v52, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v57, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v36, &demangling cache variable for type metadata for PgQuery_Node?);
  v49 = v40;
  if ((v58 & 1) == 0)
    goto LABEL_23;
LABEL_11:
  if (*(_DWORD *)(v49
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refcontainertype) != *(_DWORD *)(v48 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refcontainertype))
    goto LABEL_23;
  if (*(_DWORD *)(v49
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refelemtype) != *(_DWORD *)(v48 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refelemtype))
    goto LABEL_23;
  if (*(_DWORD *)(v49
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__reftypmod) != *(_DWORD *)(v48 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__reftypmod))
    goto LABEL_23;
  if (*(_DWORD *)(v49
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refcollid) != *(_DWORD *)(v48 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refcollid))
    goto LABEL_23;
  v59 = v46;
  v60 = Node;
  v61 = *(_QWORD *)(v49
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refupperindexpr);
  v62 = *(_QWORD *)(v48
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refupperindexpr);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v63 = specialized static Array<A>.== infix(_:_:)(v61, v62);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v63 & 1) == 0)
    goto LABEL_23;
  v64 = *(_QWORD *)(v49
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__reflowerindexpr);
  v65 = *(_QWORD *)(v48
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__reflowerindexpr);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v66 = specialized static Array<A>.== infix(_:_:)(v64, v65);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v66 & 1) == 0)
    goto LABEL_23;
  v67 = v49
      + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refexpr;
  v118 = v48;
  v68 = v115;
  outlined init with copy of PgQuery_Alias?(v48+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refexpr, v115, &demangling cache variable for type metadata for PgQuery_Node?);
  v69 = v106;
  v70 = v114;
  v71 = v114 + *(int *)(v106 + 48);
  outlined init with copy of PgQuery_Alias?(v67, v114, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v68, v71, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v59(v70, 1, Node) != 1)
  {
    v73 = v113;
    outlined init with copy of PgQuery_Alias?(v70, v113, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v59(v71, 1, Node) == 1)
    {
      v74 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v75 = v110;
      outlined init with take of PgQuery_OidList(v71, v110, type metadata accessor for PgQuery_Node);
      v76 = *(int *)(Node + 20);
      v77 = *(_QWORD *)(v73 + v76);
      v78 = *(_QWORD *)(v75 + v76);
      if (v77 == v78
        || (swift_retain(),
            swift_retain(),
            v79 = closure #1 in static PgQuery_Node.== infix(_:_:)(v77, v78),
            swift_release(),
            swift_release(),
            v79))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v80 = v113;
        v81 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v75, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v80, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)(v70, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v115, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v81 & 1) == 0)
          goto LABEL_23;
        goto LABEL_30;
      }
      outlined destroy of PgQuery_Alias(v75, type metadata accessor for PgQuery_Node);
      v74 = &demangling cache variable for type metadata for PgQuery_Node?;
      v68 = v115;
      v73 = v113;
    }
    outlined destroy of PgQuery_Alias(v73, type metadata accessor for PgQuery_Node);
LABEL_44:
    outlined destroy of (key: String, value: StorableValue)(v70, v74);
    v100 = v68;
LABEL_48:
    outlined destroy of (key: String, value: StorableValue)(v100, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_23;
  }
  if (v59(v71, 1, Node) != 1)
  {
    v74 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_44;
  }
  outlined destroy of (key: String, value: StorableValue)(v70, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v68, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_30:
  v82 = v49
      + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refassgnexpr;
  v83 = v112;
  outlined init with copy of PgQuery_Alias?(v118+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refassgnexpr, v112, &demangling cache variable for type metadata for PgQuery_Node?);
  v84 = v111;
  v85 = v111 + *(int *)(v69 + 48);
  outlined init with copy of PgQuery_Alias?(v82, v111, &demangling cache variable for type metadata for PgQuery_Node?);
  v86 = v84;
  outlined init with copy of PgQuery_Alias?(v83, v85, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v59(v84, 1, v60) == 1)
  {
    if (v59(v85, 1, v60) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v84, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)(v112, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_39:
      swift_release();
      swift_release();
      v4 = v107;
      v8 = v101;
      v42 = v102;
      v38 = v103;
      v10 = v104;
      v5 = v105;
LABEL_40:
      v96 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v97 = v42;
      v96(v10, v38, v4);
      v96(v8, v97, v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v72 = dispatch thunk of static Equatable.== infix(_:_:)();
      v98 = *(void (**)(char *, uint64_t))(v5 + 8);
      v98(v8, v4);
      v98(v10, v4);
      return v72 & 1;
    }
    v88 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_47;
  }
  v87 = v109;
  outlined init with copy of PgQuery_Alias?(v84, v109, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v59(v85, 1, v60) == 1)
  {
    v88 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_46:
    outlined destroy of PgQuery_Alias(v87, type metadata accessor for PgQuery_Node);
LABEL_47:
    outlined destroy of (key: String, value: StorableValue)(v86, v88);
    v100 = v112;
    goto LABEL_48;
  }
  v89 = v108;
  outlined init with take of PgQuery_OidList(v85, v108, type metadata accessor for PgQuery_Node);
  v90 = *(int *)(v60 + 20);
  v91 = *(_QWORD *)(v87 + v90);
  v92 = *(_QWORD *)(v89 + v90);
  if (v91 != v92)
  {
    swift_retain();
    swift_retain();
    v93 = closure #1 in static PgQuery_Node.== infix(_:_:)(v91, v92);
    swift_release();
    swift_release();
    if (!v93)
    {
      outlined destroy of PgQuery_Alias(v89, type metadata accessor for PgQuery_Node);
      v88 = &demangling cache variable for type metadata for PgQuery_Node?;
      v86 = v111;
      v87 = v109;
      goto LABEL_46;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v94 = v109;
  v95 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v89, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v94, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v111, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v112, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v95 & 1) != 0)
    goto LABEL_39;
LABEL_23:
  swift_release();
  swift_release();
  v72 = 0;
  return v72 & 1;
}

uint64_t specialized static PgQuery_SortGroupClause.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t SortGroupClause;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v17 - v9;
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
    && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int8 *)(a1 + 12) == *(unsigned __int8 *)(a2 + 12)
    && *(unsigned __int8 *)(a1 + 13) == *(unsigned __int8 *)(a2 + 13))
  {
    SortGroupClause = type metadata accessor for PgQuery_SortGroupClause(0);
    v14 = a1 + *(int *)(SortGroupClause + 36);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, v14, v4);
    v15(v8, a2 + *(int *)(SortGroupClause + 36), v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v11 = dispatch thunk of static Equatable.== infix(_:_:)();
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
    v11 = 0;
  }
  return v11 & 1;
}

uint64_t specialized static PgQuery_InlineCodeBlock.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  uint64_t InlineCodeBlock;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  v11 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(unsigned __int8 *)(a1 + 20) == *(unsigned __int8 *)(a2 + 20)
      && *(unsigned __int8 *)(a1 + 21) == *(unsigned __int8 *)(a2 + 21))
    {
      InlineCodeBlock = type metadata accessor for PgQuery_InlineCodeBlock(0);
      v15 = a1 + *(int *)(InlineCodeBlock + 32);
      v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v16(v10, v15, v4);
      v16(v8, a2 + *(int *)(InlineCodeBlock + 32), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      v17 = *(void (**)(char *, uint64_t))(v5 + 8);
      v17(v8, v4);
      v17(v10, v4);
    }
    else
    {
      v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_CreateStatsStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t StatsStmt;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v17 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8)) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16)) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24)) & 1) == 0)
  {
LABEL_9:
    v11 = 0;
    return v11 & 1;
  }
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32) && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40)
    || (v11 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
    {
      StatsStmt = type metadata accessor for PgQuery_CreateStatsStmt(0);
      v14 = a1 + *(int *)(StatsStmt + 40);
      v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v15(v10, v14, v4);
      v15(v8, a2 + *(int *)(StatsStmt + 40), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v11 = dispatch thunk of static Equatable.== infix(_:_:)();
      v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
      return v11 & 1;
    }
    goto LABEL_9;
  }
  return v11 & 1;
}

uint64_t specialized static PgQuery_CreatePLangStmt.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  uint64_t PLangStmt;
  unsigned __int8 *v15;
  void (*v16)(char *, unsigned __int8 *, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  if (*a1 != *a2)
  {
LABEL_11:
    v12 = 0;
    return v12 & 1;
  }
  v11 = *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1) && *((_QWORD *)a1 + 2) == *((_QWORD *)a2 + 2);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(*((_QWORD *)a1 + 3), *((_QWORD *)a2 + 3)) & 1) != 0
      && (specialized static Array<A>.== infix(_:_:)(*((_QWORD *)a1 + 4), *((_QWORD *)a2 + 4)) & 1) != 0
      && (specialized static Array<A>.== infix(_:_:)(*((_QWORD *)a1 + 5), *((_QWORD *)a2 + 5)) & 1) != 0
      && a1[48] == a2[48])
    {
      PLangStmt = type metadata accessor for PgQuery_CreatePLangStmt(0);
      v15 = &a1[*(int *)(PLangStmt + 40)];
      v16 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 16);
      v16(v10, v15, v4);
      v16(v8, &a2[*(int *)(PLangStmt + 40)], v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      v17 = *(void (**)(char *, uint64_t))(v5 + 8);
      v17(v8, v4);
      v17(v10, v4);
      return v12 & 1;
    }
    goto LABEL_11;
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_CommonTableExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t CommonTableExpr;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t);
  int v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  void (*v61)(char *, uint64_t, uint64_t);
  char v62;
  void (*v63)(char *, uint64_t);
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v65 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v12 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v69 = (uint64_t)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v14);
  v71 = (uint64_t)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v70 = (uint64_t)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v72 = (uint64_t)&v65 - v19;
  CommonTableExpr = type metadata accessor for PgQuery_CommonTableExpr(0);
  v21 = a1;
  v22 = *(int *)(CommonTableExpr + 20);
  v23 = *(_QWORD **)(a1 + v22);
  v24 = *(_QWORD *)(a2 + v22);
  if (v23 == (_QWORD *)v24)
    goto LABEL_28;
  v67 = v21;
  v68 = a2;
  v25 = v23[2] == *(_QWORD *)(v24 + 16) && v23[3] == *(_QWORD *)(v24 + 24);
  if (!v25 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    swift_retain();
    swift_retain();
    goto LABEL_32;
  }
  v26 = v10;
  v65 = v5;
  v66 = v8;
  v27 = v23[4];
  v28 = *(_QWORD *)(v24 + 32);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v29 = specialized static Array<A>.== infix(_:_:)(v27, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v29 & 1) == 0)
    goto LABEL_32;
  v30 = *(_QWORD *)(v24 + 40);
  if (*(_BYTE *)(v24 + 48) == 1)
    __asm { BR              X11 }
  v10 = v26;
  if (v23[5] != v30)
    goto LABEL_32;
  v31 = (uint64_t)v23
      + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctequery;
  v32 = v72;
  outlined init with copy of PgQuery_Alias?(v24+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctequery, v72, &demangling cache variable for type metadata for PgQuery_Node?);
  v33 = v71;
  v34 = v71 + *(int *)(v14 + 48);
  outlined init with copy of PgQuery_Alias?(v31, v71, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v32, v34, &demangling cache variable for type metadata for PgQuery_Node?);
  v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v35(v33, 1, Node) != 1)
  {
    v37 = v70;
    outlined init with copy of PgQuery_Alias?(v33, v70, &demangling cache variable for type metadata for PgQuery_Node?);
    v38 = v35(v34, 1, Node);
    v8 = v66;
    if (v38 == 1)
    {
      v39 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_30:
      outlined destroy of PgQuery_Alias(v37, type metadata accessor for PgQuery_Node);
      goto LABEL_31;
    }
    v40 = v34;
    v41 = v37;
    v42 = v69;
    outlined init with take of PgQuery_OidList(v40, v69, type metadata accessor for PgQuery_Node);
    v43 = *(int *)(Node + 20);
    v44 = *(_QWORD *)(v41 + v43);
    v45 = *(_QWORD *)(v42 + v43);
    if (v44 != v45)
    {
      swift_retain();
      swift_retain();
      v46 = closure #1 in static PgQuery_Node.== infix(_:_:)(v44, v45);
      swift_release();
      swift_release();
      if (!v46)
      {
        outlined destroy of PgQuery_Alias(v42, type metadata accessor for PgQuery_Node);
        v39 = &demangling cache variable for type metadata for PgQuery_Node?;
        v37 = v70;
        goto LABEL_30;
      }
    }
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v47 = v70;
    v48 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of PgQuery_Alias(v42, type metadata accessor for PgQuery_Node);
    outlined destroy of PgQuery_Alias(v47, type metadata accessor for PgQuery_Node);
    outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined destroy of (key: String, value: StorableValue)(v72, &demangling cache variable for type metadata for PgQuery_Node?);
    if ((v48 & 1) != 0)
      goto LABEL_21;
LABEL_32:
    swift_release();
    swift_release();
    goto LABEL_33;
  }
  v36 = v35(v34, 1, Node);
  v8 = v66;
  if (v36 != 1)
  {
    v39 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_31:
    outlined destroy of (key: String, value: StorableValue)(v33, v39);
    outlined destroy of (key: String, value: StorableValue)(v72, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_32;
  }
  outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v72, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_21:
  if (*(_DWORD *)((char *)v23
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) != *(_DWORD *)(v24 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
    goto LABEL_32;
  if (*((unsigned __int8 *)v23
       + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cterecursive) != *(unsigned __int8 *)(v24 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cterecursive))
    goto LABEL_32;
  if (*(_DWORD *)((char *)v23
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cterefcount) != *(_DWORD *)(v24 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cterefcount))
    goto LABEL_32;
  v49 = *(_QWORD *)((char *)v23
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecolnames);
  v50 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecolnames);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v51 = specialized static Array<A>.== infix(_:_:)(v49, v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v51 & 1) == 0)
    goto LABEL_32;
  v52 = *(_QWORD *)((char *)v23
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecoltypes);
  v53 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecoltypes);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v54 = specialized static Array<A>.== infix(_:_:)(v52, v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v54 & 1) == 0)
    goto LABEL_32;
  v55 = *(_QWORD *)((char *)v23
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecoltypmods);
  v56 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecoltypmods);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v57 = specialized static Array<A>.== infix(_:_:)(v55, v56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v57 & 1) == 0)
    goto LABEL_32;
  v58 = *(_QWORD *)((char *)v23
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecolcollations);
  v59 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecolcollations);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v60 = specialized static Array<A>.== infix(_:_:)(v58, v59);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v5 = v65;
  v21 = v67;
  a2 = v68;
  if ((v60 & 1) == 0)
  {
LABEL_33:
    v62 = 0;
    return v62 & 1;
  }
LABEL_28:
  v61 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v61(v10, v21, v4);
  v61(v8, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v62 = dispatch thunk of static Equatable.== infix(_:_:)();
  v63 = *(void (**)(char *, uint64_t))(v5 + 8);
  v63(v8, v4);
  v63(v10, v4);
  return v62 & 1;
}

uint64_t specialized static PgQuery_ArrayCoerceExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t Node;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t ArrayCoerceExpr;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  char v88;
  int v89;
  int v90;
  BOOL v91;
  uint64_t v92;
  void (*v93)(char *, uint64_t, uint64_t);
  char *v94;
  void (*v95)(char *, uint64_t);
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;

  v4 = type metadata accessor for UnknownStorage();
  v111 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v97 - v8;
  Node = type metadata accessor for PgQuery_Node(0);
  v114 = *(char **)(Node - 8);
  v11 = MEMORY[0x1E0C80A78](Node);
  v103 = (uint64_t)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v104 = (uint64_t)&v97 - v14;
  MEMORY[0x1E0C80A78](v13);
  v108 = (uint64_t)&v97 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v17 = MEMORY[0x1E0C80A78](v16);
  v106 = (uint64_t)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v110 = (uint64_t)&v97 - v20;
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v97 - v21;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v24 = MEMORY[0x1E0C80A78](v23);
  v105 = (uint64_t)&v97 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24);
  v107 = (uint64_t)&v97 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v109 = (uint64_t)&v97 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v112 = (uint64_t)&v97 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v113 = (uint64_t)&v97 - v33;
  MEMORY[0x1E0C80A78](v32);
  v35 = (char *)&v97 - v34;
  ArrayCoerceExpr = type metadata accessor for PgQuery_ArrayCoerceExpr(0);
  v37 = a1;
  v38 = *(int *)(ArrayCoerceExpr + 20);
  v39 = *(_QWORD *)(a1 + v38);
  v40 = *(_QWORD *)(a2 + v38);
  if (v39 == v40)
    goto LABEL_48;
  v99 = a2;
  v100 = v37;
  v98 = v9;
  v101 = v7;
  v102 = v4;
  v41 = v39
      + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v35, &demangling cache variable for type metadata for PgQuery_Node?);
  v42 = (uint64_t)&v22[*(int *)(v16 + 48)];
  outlined init with copy of PgQuery_Alias?(v41, (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v35, v42, &demangling cache variable for type metadata for PgQuery_Node?);
  v43 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v114 + 6);
  v44 = v16;
  if (v43((uint64_t)v22, 1, Node) == 1)
  {
    v45 = v43(v42, 1, Node);
    swift_retain();
    swift_retain();
    if (v45 == 1)
    {
      v46 = Node;
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v35, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_11;
    }
    v48 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_25:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, v48);
    v77 = (uint64_t)v35;
LABEL_43:
    outlined destroy of (key: String, value: StorableValue)(v77, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_44;
  }
  v47 = v113;
  outlined init with copy of PgQuery_Alias?((uint64_t)v22, v113, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v43(v42, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    v48 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_24:
    outlined destroy of PgQuery_Alias(v47, type metadata accessor for PgQuery_Node);
    goto LABEL_25;
  }
  v114 = v35;
  v49 = v108;
  outlined init with take of PgQuery_OidList(v42, v108, type metadata accessor for PgQuery_Node);
  v50 = v47;
  v46 = Node;
  v51 = *(int *)(Node + 20);
  v52 = *(_QWORD *)(v50 + v51);
  v53 = *(_QWORD *)(v49 + v51);
  swift_retain();
  swift_retain();
  if (v52 != v53)
  {
    swift_retain();
    swift_retain();
    v54 = closure #1 in static PgQuery_Node.== infix(_:_:)(v52, v53);
    swift_release();
    swift_release();
    if (!v54)
    {
      outlined destroy of PgQuery_Alias(v49, type metadata accessor for PgQuery_Node);
      v48 = &demangling cache variable for type metadata for PgQuery_Node?;
      v47 = v113;
      v35 = v114;
      goto LABEL_24;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v55 = v113;
  v56 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v49, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v55, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v114, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v56 & 1) == 0)
    goto LABEL_44;
LABEL_11:
  v57 = v39
      + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  v58 = v112;
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v112, &demangling cache variable for type metadata for PgQuery_Node?);
  v59 = v110;
  v60 = v110 + *(int *)(v44 + 48);
  outlined init with copy of PgQuery_Alias?(v57, v110, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v58, v60, &demangling cache variable for type metadata for PgQuery_Node?);
  v61 = v46;
  if (v43(v59, 1, v46) == 1)
  {
    if (v43(v60, 1, v46) == 1)
    {
      v62 = v46;
      outlined destroy of (key: String, value: StorableValue)(v59, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)(v112, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_20;
    }
    v64 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_39;
  }
  v63 = v109;
  outlined init with copy of PgQuery_Alias?(v59, v109, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v43(v60, 1, v46) == 1)
  {
    v64 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_38:
    outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
LABEL_39:
    outlined destroy of (key: String, value: StorableValue)(v59, v64);
    v77 = v112;
    goto LABEL_43;
  }
  v65 = v104;
  outlined init with take of PgQuery_OidList(v60, v104, type metadata accessor for PgQuery_Node);
  v62 = v61;
  v66 = *(int *)(v61 + 20);
  v67 = *(_QWORD *)(v63 + v66);
  v68 = *(_QWORD *)(v65 + v66);
  if (v67 != v68)
  {
    swift_retain();
    swift_retain();
    v69 = closure #1 in static PgQuery_Node.== infix(_:_:)(v67, v68);
    swift_release();
    swift_release();
    if (!v69)
    {
      outlined destroy of PgQuery_Alias(v65, type metadata accessor for PgQuery_Node);
      v64 = &demangling cache variable for type metadata for PgQuery_Node?;
      v63 = v109;
      goto LABEL_38;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v70 = v109;
  v71 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v65, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v70, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v59, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v112, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v71 & 1) == 0)
    goto LABEL_44;
LABEL_20:
  v72 = v39
      + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elemexpr;
  v73 = v107;
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elemexpr, v107, &demangling cache variable for type metadata for PgQuery_Node?);
  v74 = v106 + *(int *)(v44 + 48);
  v75 = v72;
  v76 = v106;
  outlined init with copy of PgQuery_Alias?(v75, v106, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v73, v74, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v43(v76, 1, v62) != 1)
  {
    v78 = v105;
    outlined init with copy of PgQuery_Alias?(v76, v105, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v43(v74, 1, v62) == 1)
    {
      v79 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v80 = v103;
      outlined init with take of PgQuery_OidList(v74, v103, type metadata accessor for PgQuery_Node);
      v81 = *(int *)(v62 + 20);
      v82 = *(_QWORD *)(v78 + v81);
      v83 = *(_QWORD *)(v80 + v81);
      if (v82 == v83
        || (swift_retain(),
            swift_retain(),
            v84 = closure #1 in static PgQuery_Node.== infix(_:_:)(v82, v83),
            swift_release(),
            swift_release(),
            v84))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v85 = v105;
        v4 = v102;
        v86 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v80, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v85, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)(v106, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v107, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v86 & 1) == 0)
          goto LABEL_44;
        goto LABEL_32;
      }
      outlined destroy of PgQuery_Alias(v80, type metadata accessor for PgQuery_Node);
      v79 = &demangling cache variable for type metadata for PgQuery_Node?;
      v78 = v105;
      v76 = v106;
    }
    outlined destroy of PgQuery_Alias(v78, type metadata accessor for PgQuery_Node);
    goto LABEL_42;
  }
  if (v43(v74, 1, v62) != 1)
  {
    v79 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_42:
    outlined destroy of (key: String, value: StorableValue)(v76, v79);
    v77 = v107;
    goto LABEL_43;
  }
  outlined destroy of (key: String, value: StorableValue)(v76, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v107, &demangling cache variable for type metadata for PgQuery_Node?);
  v4 = v102;
LABEL_32:
  if (*(_DWORD *)(v39
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) == *(_DWORD *)(v40 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype)
    && *(_DWORD *)(v39
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod) == *(_DWORD *)(v40 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod)
    && *(_DWORD *)(v39
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid) == *(_DWORD *)(v40 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid))
  {
    v87 = *(_QWORD *)(v40
                    + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat);
    if (*(_BYTE *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat
                  + 8) == 1)
      __asm { BR              X11 }
    if (*(_QWORD *)(v39
                   + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat) == v87)
    {
      v89 = *(_DWORD *)(v39
                      + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      v90 = *(_DWORD *)(v40
                      + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      swift_release();
      swift_release();
      v91 = v89 == v90;
      v37 = v100;
      v7 = v101;
      v9 = v98;
      a2 = v99;
      if (!v91)
      {
        v88 = 0;
        return v88 & 1;
      }
LABEL_48:
      v92 = v111;
      v93 = *(void (**)(char *, uint64_t, uint64_t))(v111 + 16);
      v93(v9, v37, v4);
      v93(v7, a2, v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v94 = v7;
      v88 = dispatch thunk of static Equatable.== infix(_:_:)();
      v95 = *(void (**)(char *, uint64_t))(v92 + 8);
      v95(v94, v4);
      v95(v9, v4);
      return v88 & 1;
    }
  }
LABEL_44:
  swift_release();
  swift_release();
  v88 = 0;
  return v88 & 1;
}

uint64_t specialized static PgQuery_VariableSetStmt.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  uint64_t VariableSetStmt;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - v9;
  v11 = *a2;
  if (*((_BYTE *)a2 + 8) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)a1 != v11)
    goto LABEL_12;
  v12 = *(_QWORD *)(a1 + 16) == a2[2] && *(_QWORD *)(a1 + 24) == a2[3];
  if (v12 || (v13 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 32), a2[4]) & 1) != 0
      && *(unsigned __int8 *)(a1 + 40) == *((unsigned __int8 *)a2 + 40))
    {
      VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
      v15 = a1 + *(int *)(VariableSetStmt + 32);
      v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v16(v10, v15, v4);
      v16(v8, (uint64_t)a2 + *(int *)(VariableSetStmt + 32), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v13 = dispatch thunk of static Equatable.== infix(_:_:)();
      v17 = *(void (**)(char *, uint64_t))(v5 + 8);
      v17(v8, v4);
      v17(v10, v4);
      return v13 & 1;
    }
LABEL_12:
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static PgQuery_AlterSystemStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t VariableSetStmt;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t AlterSystemStmt;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char v35;
  void (*v36)(char *, uint64_t);
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = type metadata accessor for UnknownStorage();
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v42 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v41 = (char *)&v38 - v7;
  VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  v9 = *(_QWORD *)(VariableSetStmt - 8);
  MEMORY[0x1E0C80A78](VariableSetStmt);
  v38 = (uint64_t *)((char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_VariableSetStmt?, PgQuery_VariableSetStmt?));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v45 = (uint64_t)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v38 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v38 - v20;
  AlterSystemStmt = type metadata accessor for PgQuery_AlterSystemStmt(0);
  v23 = *(int *)(AlterSystemStmt + 20);
  v39 = a1;
  outlined init with copy of PgQuery_Alias?(a1 + v23, (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  v24 = *(int *)(AlterSystemStmt + 20);
  v40 = a2;
  outlined init with copy of PgQuery_Alias?(a2 + v24, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  v25 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v19, v25, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v26((uint64_t)v13, 1, VariableSetStmt) != 1)
  {
    v27 = v45;
    outlined init with copy of PgQuery_Alias?((uint64_t)v13, v45, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    if (v26(v25, 1, VariableSetStmt) != 1)
    {
      v28 = v38;
      outlined init with take of PgQuery_OidList(v25, (uint64_t)v38, type metadata accessor for PgQuery_VariableSetStmt);
      v29 = specialized static PgQuery_VariableSetStmt.== infix(_:_:)(v27, v28);
      outlined destroy of PgQuery_Alias((uint64_t)v28, type metadata accessor for PgQuery_VariableSetStmt);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      outlined destroy of PgQuery_Alias(v27, type metadata accessor for PgQuery_VariableSetStmt);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      if ((v29 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v35 = 0;
      return v35 & 1;
    }
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    outlined destroy of PgQuery_Alias(v27, type metadata accessor for PgQuery_VariableSetStmt);
LABEL_6:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for (PgQuery_VariableSetStmt?, PgQuery_VariableSetStmt?));
    goto LABEL_9;
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  if (v26(v25, 1, VariableSetStmt) != 1)
    goto LABEL_6;
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
LABEL_8:
  v31 = v43;
  v30 = v44;
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  v33 = v41;
  v32(v41, v39, v44);
  v34 = v42;
  v32(v42, v40, v30);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v35 = dispatch thunk of static Equatable.== infix(_:_:)();
  v36 = *(void (**)(char *, uint64_t))(v31 + 8);
  v36(v34, v30);
  v36(v33, v30);
  return v35 & 1;
}

uint64_t specialized static PgQuery_AlterPolicyStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t RangeVar;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t AlterPolicyStmt;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t, uint64_t);
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  char v96;
  void (*v97)(char *, uint64_t, uint64_t);
  char v98;
  uint64_t v99;
  void (*v100)(char *, uint64_t);
  uint64_t v101;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t Node;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v123 = a1;
  v3 = type metadata accessor for UnknownStorage();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v103 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v103 - v8;
  Node = type metadata accessor for PgQuery_Node(0);
  v115 = *(_QWORD *)(Node - 8);
  v10 = MEMORY[0x1E0C80A78](Node);
  v109 = (uint64_t)&v103 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v112 = (uint64_t)&v103 - v12;
  v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v13 = MEMORY[0x1E0C80A78](v118);
  v111 = (uint64_t)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v117 = (uint64_t)&v103 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v110 = (uint64_t)&v103 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v113 = (uint64_t)&v103 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v114 = (uint64_t)&v103 - v22;
  MEMORY[0x1E0C80A78](v21);
  v116 = (uint64_t)&v103 - v23;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v25 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v120 = (uint64_t)&v103 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1E0C80A78](v27);
  v29 = (char *)&v103 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v31 = MEMORY[0x1E0C80A78](v30);
  v121 = (uint64_t)&v103 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31);
  v34 = (char *)&v103 - v33;
  AlterPolicyStmt = type metadata accessor for PgQuery_AlterPolicyStmt(0);
  v36 = v123;
  v37 = *(int *)(AlterPolicyStmt + 20);
  v38 = *(_QWORD *)(v123 + v37);
  v39 = *(_QWORD *)(a2 + v37);
  if (v38 == v39)
    goto LABEL_33;
  v106 = a2;
  v107 = v9;
  v105 = v7;
  v108 = v4;
  v40 = *(_QWORD *)(v38 + 16);
  v41 = *(_QWORD *)(v38 + 24);
  v42 = *(_QWORD *)(v39 + 16);
  v43 = *(_QWORD *)(v39 + 24);
  v44 = v38;
  v122 = v39;
  if (v40 == v42 && v41 == v43
    || (v45 = _stringCompareWithSmolCheck(_:_:expecting:)(), v39 = v122, v46 = 0, (v45 & 1) != 0))
  {
    v104 = v3;
    v47 = v44
        + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__table;
    outlined init with copy of PgQuery_Alias?(v39+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__table, (uint64_t)v34, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    v48 = (uint64_t)&v29[*(int *)(v27 + 48)];
    outlined init with copy of PgQuery_Alias?(v47, (uint64_t)v29, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined init with copy of PgQuery_Alias?((uint64_t)v34, v48, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
    if (v49((uint64_t)v29, 1, RangeVar) == 1)
    {
      v50 = v49(v48, 1, RangeVar);
      swift_retain();
      swift_retain();
      if (v50 == 1)
      {
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v29, &demangling cache variable for type metadata for PgQuery_RangeVar?);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v34, &demangling cache variable for type metadata for PgQuery_RangeVar?);
        v51 = v122;
        goto LABEL_12;
      }
    }
    else
    {
      v52 = v121;
      outlined init with copy of PgQuery_Alias?((uint64_t)v29, v121, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      if (v49(v48, 1, RangeVar) != 1)
      {
        v53 = v120;
        outlined init with take of PgQuery_OidList(v48, v120, type metadata accessor for PgQuery_RangeVar);
        swift_retain();
        v51 = v122;
        swift_retain();
        v54 = specialized static PgQuery_RangeVar.== infix(_:_:)(v52, v53);
        outlined destroy of PgQuery_Alias(v53, type metadata accessor for PgQuery_RangeVar);
        outlined destroy of PgQuery_Alias(v52, type metadata accessor for PgQuery_RangeVar);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v29, &demangling cache variable for type metadata for PgQuery_RangeVar?);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v34, &demangling cache variable for type metadata for PgQuery_RangeVar?);
        if ((v54 & 1) == 0)
          goto LABEL_41;
LABEL_12:
        v55 = *(_QWORD *)(v44
                        + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__roles);
        v56 = *(_QWORD *)(v51
                        + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__roles);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v57 = v44;
        v58 = specialized static Array<A>.== infix(_:_:)(v55, v56);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v58 & 1) == 0)
          goto LABEL_41;
        v121 = v57;
        v59 = v57
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual;
        v60 = v116;
        outlined init with copy of PgQuery_Alias?(v51+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual, v116, &demangling cache variable for type metadata for PgQuery_Node?);
        v62 = v117;
        v61 = v118;
        v63 = v117 + *(int *)(v118 + 48);
        outlined init with copy of PgQuery_Alias?(v59, v117, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined init with copy of PgQuery_Alias?(v60, v63, &demangling cache variable for type metadata for PgQuery_Node?);
        v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v115 + 48);
        v65 = Node;
        if (v64(v62, 1, Node) == 1)
        {
          v66 = v64(v63, 1, v65);
          v67 = v108;
          if (v66 == 1)
          {
            outlined destroy of (key: String, value: StorableValue)(v62, &demangling cache variable for type metadata for PgQuery_Node?);
            outlined destroy of (key: String, value: StorableValue)(v60, &demangling cache variable for type metadata for PgQuery_Node?);
            v68 = v121;
LABEL_23:
            v82 = v68
                + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck;
            v83 = v113;
            outlined init with copy of PgQuery_Alias?(v122+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck, v113, &demangling cache variable for type metadata for PgQuery_Node?);
            v84 = *(int *)(v61 + 48);
            v85 = v111;
            v86 = v111 + v84;
            outlined init with copy of PgQuery_Alias?(v82, v111, &demangling cache variable for type metadata for PgQuery_Node?);
            v87 = v85;
            outlined init with copy of PgQuery_Alias?(v83, v86, &demangling cache variable for type metadata for PgQuery_Node?);
            if (v64(v85, 1, v65) == 1)
            {
              if (v64(v86, 1, v65) == 1)
              {
                outlined destroy of (key: String, value: StorableValue)(v85, &demangling cache variable for type metadata for PgQuery_Node?);
                outlined destroy of (key: String, value: StorableValue)(v113, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_32:
                swift_release();
                swift_release();
                v3 = v104;
                v7 = v105;
                a2 = v106;
                v9 = v107;
                v36 = v123;
                v4 = v67;
LABEL_33:
                v97 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
                v97(v9, v36, v3);
                v97(v7, a2, v3);
                lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
                v98 = dispatch thunk of static Equatable.== infix(_:_:)();
                v99 = v4;
                v46 = v98;
                v100 = *(void (**)(char *, uint64_t))(v99 + 8);
                v100(v7, v3);
                v100(v9, v3);
                return v46 & 1;
              }
              v90 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
              goto LABEL_39;
            }
            v88 = v85;
            v89 = v110;
            outlined init with copy of PgQuery_Alias?(v88, v110, &demangling cache variable for type metadata for PgQuery_Node?);
            if (v64(v86, 1, v65) == 1)
            {
              v90 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_38:
              outlined destroy of PgQuery_Alias(v89, type metadata accessor for PgQuery_Node);
LABEL_39:
              outlined destroy of (key: String, value: StorableValue)(v87, v90);
              v101 = v113;
              goto LABEL_40;
            }
            v91 = v109;
            outlined init with take of PgQuery_OidList(v86, v109, type metadata accessor for PgQuery_Node);
            v92 = *(int *)(v65 + 20);
            v93 = *(_QWORD *)(v89 + v92);
            v94 = *(_QWORD *)(v91 + v92);
            if (v93 != v94)
            {
              swift_retain();
              swift_retain();
              v95 = closure #1 in static PgQuery_Node.== infix(_:_:)(v93, v94);
              swift_release();
              swift_release();
              if (!v95)
              {
                outlined destroy of PgQuery_Alias(v91, type metadata accessor for PgQuery_Node);
                v90 = &demangling cache variable for type metadata for PgQuery_Node?;
                v87 = v111;
                goto LABEL_38;
              }
            }
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
            v96 = dispatch thunk of static Equatable.== infix(_:_:)();
            outlined destroy of PgQuery_Alias(v91, type metadata accessor for PgQuery_Node);
            outlined destroy of PgQuery_Alias(v89, type metadata accessor for PgQuery_Node);
            outlined destroy of (key: String, value: StorableValue)(v111, &demangling cache variable for type metadata for PgQuery_Node?);
            outlined destroy of (key: String, value: StorableValue)(v113, &demangling cache variable for type metadata for PgQuery_Node?);
            if ((v96 & 1) != 0)
              goto LABEL_32;
LABEL_41:
            swift_release();
            swift_release();
            v46 = 0;
            return v46 & 1;
          }
          v72 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
        }
        else
        {
          v69 = v114;
          outlined init with copy of PgQuery_Alias?(v62, v114, &demangling cache variable for type metadata for PgQuery_Node?);
          v70 = v64(v63, 1, v65);
          v71 = v108;
          if (v70 == 1)
          {
            v72 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
          }
          else
          {
            v73 = v112;
            outlined init with take of PgQuery_OidList(v63, v112, type metadata accessor for PgQuery_Node);
            v74 = *(int *)(v65 + 20);
            v75 = *(_QWORD *)(v69 + v74);
            v76 = *(_QWORD *)(v73 + v74);
            if (v75 == v76
              || (swift_retain(),
                  swift_retain(),
                  v77 = closure #1 in static PgQuery_Node.== infix(_:_:)(v75, v76),
                  swift_release(),
                  swift_release(),
                  v77))
            {
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
              v78 = v114;
              v79 = v112;
              v80 = dispatch thunk of static Equatable.== infix(_:_:)();
              outlined destroy of PgQuery_Alias(v79, type metadata accessor for PgQuery_Node);
              v81 = v78;
              v67 = v71;
              outlined destroy of PgQuery_Alias(v81, type metadata accessor for PgQuery_Node);
              outlined destroy of (key: String, value: StorableValue)(v62, &demangling cache variable for type metadata for PgQuery_Node?);
              outlined destroy of (key: String, value: StorableValue)(v60, &demangling cache variable for type metadata for PgQuery_Node?);
              v68 = v121;
              if ((v80 & 1) == 0)
                goto LABEL_41;
              goto LABEL_23;
            }
            outlined destroy of PgQuery_Alias(v112, type metadata accessor for PgQuery_Node);
            v72 = &demangling cache variable for type metadata for PgQuery_Node?;
            v69 = v114;
          }
          outlined destroy of PgQuery_Alias(v69, type metadata accessor for PgQuery_Node);
        }
        outlined destroy of (key: String, value: StorableValue)(v62, v72);
        v101 = v60;
LABEL_40:
        outlined destroy of (key: String, value: StorableValue)(v101, &demangling cache variable for type metadata for PgQuery_Node?);
        goto LABEL_41;
      }
      swift_retain();
      swift_retain();
      outlined destroy of PgQuery_Alias(v52, type metadata accessor for PgQuery_RangeVar);
    }
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v29, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v34, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    goto LABEL_41;
  }
  return v46 & 1;
}

uint64_t specialized static PgQuery_AlterDomainStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AlterDomainStmt;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  void (*v53)(char *, uint64_t, uint64_t);
  char *v54;
  void (*v55)(char *, uint64_t);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v57 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v12 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v63 = (uint64_t)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v14);
  v65 = (uint64_t)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v64 = (uint64_t)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v66 = (uint64_t)&v57 - v19;
  AlterDomainStmt = type metadata accessor for PgQuery_AlterDomainStmt(0);
  v21 = a1;
  v22 = *(int *)(AlterDomainStmt + 20);
  v23 = *(_QWORD **)(a1 + v22);
  v24 = *(_QWORD **)(a2 + v22);
  if (v23 == v24)
    goto LABEL_36;
  v60 = a2;
  v61 = v21;
  v62 = v10;
  v25 = v23[2] == v24[2] && v23[3] == v24[3];
  if (v25 || (v26 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v58 = v8;
    v59 = v5;
    v27 = v23[4];
    v28 = v24[4];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29 = specialized static Array<A>.== infix(_:_:)(v27, v28);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v29 & 1) == 0
      || (v23[5] != v24[5] || v23[6] != v24[6]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      goto LABEL_30;
    }
    v30 = (uint64_t)v23
        + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__def;
    v31 = v66;
    outlined init with copy of PgQuery_Alias?((uint64_t)v24+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__def, v66, &demangling cache variable for type metadata for PgQuery_Node?);
    v32 = v65;
    v33 = v65 + *(int *)(v14 + 48);
    outlined init with copy of PgQuery_Alias?(v30, v65, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined init with copy of PgQuery_Alias?(v31, v33, &demangling cache variable for type metadata for PgQuery_Node?);
    v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    v35 = v32;
    if (v34(v32, 1, Node) == 1)
    {
      v36 = v34(v33, 1, Node);
      v8 = v58;
      v5 = v59;
      if (v36 == 1)
      {
        outlined destroy of (key: String, value: StorableValue)(v35, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v66, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_20:
        v49 = *(_QWORD *)((char *)v23
                        + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior);
        v50 = *(_QWORD *)((char *)v24
                        + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior);
        if (*((_BYTE *)v24
             + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior
             + 8) == 1)
        {
          if (v50)
          {
            if (v50 == 1)
            {
              if (v49 == 1)
                goto LABEL_34;
            }
            else if (v49 == 2)
            {
              goto LABEL_34;
            }
            goto LABEL_30;
          }
          if (!v49)
          {
LABEL_34:
            v51 = *((unsigned __int8 *)v23
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk);
            v52 = *((unsigned __int8 *)v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk);
            swift_release();
            swift_release();
            v25 = v51 == v52;
            v21 = v61;
            v10 = v62;
            a2 = v60;
            if (!v25)
            {
              v26 = 0;
              return v26 & 1;
            }
LABEL_36:
            v53 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
            v53(v10, v21, v4);
            v53(v8, a2, v4);
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
            v54 = v10;
            v26 = dispatch thunk of static Equatable.== infix(_:_:)();
            v55 = *(void (**)(char *, uint64_t))(v5 + 8);
            v55(v8, v4);
            v55(v54, v4);
            return v26 & 1;
          }
        }
        else if (v49 == v50)
        {
          goto LABEL_34;
        }
LABEL_30:
        swift_release();
        swift_release();
        v26 = 0;
        return v26 & 1;
      }
      v39 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v37 = v64;
      outlined init with copy of PgQuery_Alias?(v32, v64, &demangling cache variable for type metadata for PgQuery_Node?);
      v38 = v34(v33, 1, Node);
      v8 = v58;
      v5 = v59;
      if (v38 == 1)
      {
        v39 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
      }
      else
      {
        v40 = v33;
        v41 = v37;
        v42 = v63;
        outlined init with take of PgQuery_OidList(v40, v63, type metadata accessor for PgQuery_Node);
        v43 = *(int *)(Node + 20);
        v44 = *(_QWORD *)(v41 + v43);
        v45 = *(_QWORD *)(v42 + v43);
        if (v44 == v45
          || (swift_retain(),
              swift_retain(),
              v46 = closure #1 in static PgQuery_Node.== infix(_:_:)(v44, v45),
              swift_release(),
              swift_release(),
              v46))
        {
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v47 = v64;
          v48 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of PgQuery_Alias(v42, type metadata accessor for PgQuery_Node);
          outlined destroy of PgQuery_Alias(v47, type metadata accessor for PgQuery_Node);
          outlined destroy of (key: String, value: StorableValue)(v35, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined destroy of (key: String, value: StorableValue)(v66, &demangling cache variable for type metadata for PgQuery_Node?);
          if ((v48 & 1) == 0)
            goto LABEL_30;
          goto LABEL_20;
        }
        outlined destroy of PgQuery_Alias(v42, type metadata accessor for PgQuery_Node);
        v39 = &demangling cache variable for type metadata for PgQuery_Node?;
        v37 = v64;
      }
      outlined destroy of PgQuery_Alias(v37, type metadata accessor for PgQuery_Node);
    }
    outlined destroy of (key: String, value: StorableValue)(v35, v39);
    outlined destroy of (key: String, value: StorableValue)(v66, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_30;
  }
  return v26 & 1;
}

uint64_t specialized static PgQuery_VacuumRelation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t RangeVar;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t VacuumRelation;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  char *v38;
  char *v39;
  char v40;
  void (*v41)(char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;

  v4 = type metadata accessor for UnknownStorage();
  v46 = *(_QWORD *)(v4 - 8);
  v47 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v45 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v44 = (char *)&v43 - v7;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v9 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v50 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v43 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v43 - v21;
  VacuumRelation = type metadata accessor for PgQuery_VacuumRelation(0);
  v24 = *(int *)(VacuumRelation + 28);
  v48 = a1;
  v25 = a1 + v24;
  v26 = VacuumRelation;
  outlined init with copy of PgQuery_Alias?(v25, (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v27 = *(int *)(v26 + 28);
  v49 = a2;
  outlined init with copy of PgQuery_Alias?(a2 + v27, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v28, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, RangeVar) != 1)
  {
    v30 = (uint64_t)v50;
    outlined init with copy of PgQuery_Alias?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if (v29(v28, 1, RangeVar) != 1)
    {
      outlined init with take of PgQuery_OidList(v28, v30, type metadata accessor for PgQuery_RangeVar);
      v31 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v17, v30);
      outlined destroy of PgQuery_Alias(v30, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      if ((v31 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      v40 = 0;
      return v40 & 1;
    }
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RangeVar);
LABEL_6:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    goto LABEL_11;
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v29(v28, 1, RangeVar) != 1)
    goto LABEL_6;
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
LABEL_8:
  v32 = v48;
  v33 = v49;
  if (*(_DWORD *)v48 != *(_DWORD *)v49
    || (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v48 + 8), *(_QWORD *)(v49 + 8)) & 1) == 0)
  {
    goto LABEL_11;
  }
  v34 = v32 + *(int *)(v26 + 24);
  v36 = v46;
  v35 = v47;
  v37 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
  v38 = v44;
  v37(v44, v34, v47);
  v39 = v45;
  v37(v45, v33 + *(int *)(v26 + 24), v35);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v40 = dispatch thunk of static Equatable.== infix(_:_:)();
  v41 = *(void (**)(char *, uint64_t))(v36 + 8);
  v41(v39, v35);
  v41(v38, v35);
  return v40 & 1;
}

uint64_t specialized static PgQuery_RowCompareExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t RowCompareExpr;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  void (*v58)(char *, uint64_t, uint64_t);
  uint64_t v59;
  char v60;
  void (*v61)(char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v63 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v69 = *(_QWORD *)(Node - 8);
  v70 = Node;
  MEMORY[0x1E0C80A78](Node);
  v67 = (uint64_t)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v68 = (uint64_t)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v63 - v19;
  RowCompareExpr = type metadata accessor for PgQuery_RowCompareExpr(0);
  v22 = a1;
  v23 = *(int *)(RowCompareExpr + 20);
  v24 = *(_QWORD *)(a1 + v23);
  v25 = *(_QWORD *)(a2 + v23);
  if (v24 == v25)
    goto LABEL_19;
  v63 = v22;
  v64 = a2;
  v65 = v5;
  v66 = v4;
  v26 = v24
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v25+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v27, &demangling cache variable for type metadata for PgQuery_Node?);
  v28 = v70;
  v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v69 + 48);
  if (v29((uint64_t)v15, 1, v70) == 1)
  {
    v30 = v29(v27, 1, v28);
    swift_retain();
    swift_retain();
    if (v30 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_11;
    }
    v32 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_22;
  }
  v31 = v68;
  outlined init with copy of PgQuery_Alias?((uint64_t)v15, v68, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v29(v27, 1, v28) == 1)
  {
    swift_retain();
    swift_retain();
    v32 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_21:
    outlined destroy of PgQuery_Alias(v31, type metadata accessor for PgQuery_Node);
LABEL_22:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, v32);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_23;
  }
  v33 = v27;
  v34 = v28;
  v35 = v67;
  outlined init with take of PgQuery_OidList(v33, v67, type metadata accessor for PgQuery_Node);
  v36 = *(int *)(v34 + 20);
  v37 = *(_QWORD *)(v31 + v36);
  v38 = *(_QWORD *)(v35 + v36);
  swift_retain();
  swift_retain();
  if (v37 != v38)
  {
    swift_retain();
    swift_retain();
    v39 = closure #1 in static PgQuery_Node.== infix(_:_:)(v37, v38);
    swift_release();
    swift_release();
    if (!v39)
    {
      outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
      v32 = &demangling cache variable for type metadata for PgQuery_Node?;
      v31 = v68;
      goto LABEL_21;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v40 = v68;
  v41 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v41 & 1) == 0)
  {
LABEL_23:
    swift_release();
    swift_release();
    goto LABEL_24;
  }
LABEL_11:
  v42 = *(_QWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rctype);
  if (*(_BYTE *)(v25
                + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rctype
                + 8) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rctype) != v42)
    goto LABEL_23;
  v43 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opnos);
  v44 = *(_QWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opnos);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v45 = specialized static Array<A>.== infix(_:_:)(v43, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v45 & 1) == 0)
    goto LABEL_23;
  v46 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfamilies);
  v47 = *(_QWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfamilies);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v48 = specialized static Array<A>.== infix(_:_:)(v46, v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v48 & 1) == 0)
    goto LABEL_23;
  v49 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollids);
  v50 = *(_QWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollids);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v51 = specialized static Array<A>.== infix(_:_:)(v49, v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v51 & 1) == 0)
    goto LABEL_23;
  v52 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__largs);
  v53 = *(_QWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__largs);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v54 = specialized static Array<A>.== infix(_:_:)(v52, v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v54 & 1) == 0)
    goto LABEL_23;
  v55 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rargs);
  v56 = *(_QWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rargs);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v57 = specialized static Array<A>.== infix(_:_:)(v55, v56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v5 = v65;
  v4 = v66;
  v22 = v63;
  a2 = v64;
  if ((v57 & 1) == 0)
  {
LABEL_24:
    v60 = 0;
    return v60 & 1;
  }
LABEL_19:
  v58 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v58(v10, v22, v4);
  v58(v8, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v59 = v4;
  v60 = dispatch thunk of static Equatable.== infix(_:_:)();
  v61 = *(void (**)(char *, uint64_t))(v5 + 8);
  v61(v8, v59);
  v61(v10, v59);
  return v60 & 1;
}

uint64_t specialized static PgQuery_RangeTableFunc.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Alias;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t RangeTableFunc;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  int v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int (*v81)(uint64_t, uint64_t, uint64_t);
  int v82;
  int v83;
  BOOL v84;
  void (*v85)(char *, uint64_t, uint64_t);
  uint64_t v86;
  char *v87;
  char v88;
  void (*v89)(char *, uint64_t);
  uint64_t *v90;
  _QWORD *v92;
  uint64_t *v93;
  _QWORD *v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t Node;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v97 - v9;
  Alias = type metadata accessor for PgQuery_Alias(0);
  v107 = *(_QWORD *)(Alias - 8);
  v108 = Alias;
  MEMORY[0x1E0C80A78](Alias);
  v104 = (uint64_t *)((char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?));
  MEMORY[0x1E0C80A78](v106);
  v110 = (uint64_t)&v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v105 = (uint64_t *)((char *)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v15);
  v109 = (uint64_t)&v97 - v17;
  Node = type metadata accessor for PgQuery_Node(0);
  v18 = *(_QWORD *)(Node - 8);
  v19 = MEMORY[0x1E0C80A78](Node);
  v111 = (uint64_t)&v97 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v113 = (uint64_t)&v97 - v21;
  v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v22 = MEMORY[0x1E0C80A78](v116);
  v115 = (uint64_t)&v97 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v97 - v24;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v27 = MEMORY[0x1E0C80A78](v26);
  v112 = (uint64_t)&v97 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v27);
  v114 = (uint64_t)&v97 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v33 = (char *)&v97 - v32;
  MEMORY[0x1E0C80A78](v31);
  v35 = (char *)&v97 - v34;
  RangeTableFunc = type metadata accessor for PgQuery_RangeTableFunc(0);
  v37 = a1;
  v38 = a2;
  v39 = *(int *)(RangeTableFunc + 20);
  v40 = *(_QWORD *)(a1 + v39);
  v41 = *(_QWORD *)(v38 + v39);
  if (v40 == v41)
    goto LABEL_28;
  v103 = v10;
  if (*(unsigned __int8 *)(v40 + 16) != *(unsigned __int8 *)(v41 + 16))
  {
LABEL_39:
    v88 = 0;
    return v88 & 1;
  }
  v98 = v37;
  v99 = v38;
  v100 = v8;
  v101 = v5;
  v102 = v4;
  v42 = v40
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__docexpr;
  v43 = v41;
  outlined init with copy of PgQuery_Alias?(v41+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__docexpr, (uint64_t)v35, &demangling cache variable for type metadata for PgQuery_Node?);
  v44 = (uint64_t)&v25[*(int *)(v116 + 48)];
  outlined init with copy of PgQuery_Alias?(v42, (uint64_t)v25, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v35, v44, &demangling cache variable for type metadata for PgQuery_Node?);
  v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  v46 = Node;
  if (v45((uint64_t)v25, 1, Node) == 1)
  {
    v47 = v45(v44, 1, v46);
    swift_retain();
    swift_retain();
    if (v47 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v25, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v35, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_12;
    }
    v48 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_32:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v25, v48);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v35, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_38;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v25, (uint64_t)v33, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v45(v44, 1, v46) == 1)
  {
    swift_retain();
    swift_retain();
    v48 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_31:
    outlined destroy of PgQuery_Alias((uint64_t)v33, type metadata accessor for PgQuery_Node);
    goto LABEL_32;
  }
  v49 = v113;
  outlined init with take of PgQuery_OidList(v44, v113, type metadata accessor for PgQuery_Node);
  v50 = *(int *)(v46 + 20);
  v51 = *(_QWORD *)&v33[v50];
  v52 = *(_QWORD *)(v49 + v50);
  swift_retain();
  swift_retain();
  if (v51 != v52)
  {
    swift_retain();
    swift_retain();
    v53 = closure #1 in static PgQuery_Node.== infix(_:_:)(v51, v52);
    swift_release();
    swift_release();
    if (!v53)
    {
      outlined destroy of PgQuery_Alias(v49, type metadata accessor for PgQuery_Node);
      v48 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_31;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v54 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v49, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v33, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v25, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v35, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v54 & 1) == 0)
    goto LABEL_38;
LABEL_12:
  v55 = v40;
  v56 = v40
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowexpr;
  v57 = v114;
  outlined init with copy of PgQuery_Alias?(v43+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowexpr, v114, &demangling cache variable for type metadata for PgQuery_Node?);
  v58 = v115;
  v59 = v115 + *(int *)(v116 + 48);
  outlined init with copy of PgQuery_Alias?(v56, v115, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v57, v59, &demangling cache variable for type metadata for PgQuery_Node?);
  v60 = Node;
  if (v45(v58, 1, Node) == 1)
  {
    if (v45(v59, 1, v60) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v58, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)(v57, &demangling cache variable for type metadata for PgQuery_Node?);
      v61 = v102;
      goto LABEL_21;
    }
    v63 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_36:
    outlined destroy of (key: String, value: StorableValue)(v58, v63);
    v90 = &demangling cache variable for type metadata for PgQuery_Node?;
LABEL_37:
    outlined destroy of (key: String, value: StorableValue)(v57, v90);
    goto LABEL_38;
  }
  v62 = v112;
  outlined init with copy of PgQuery_Alias?(v58, v112, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v45(v59, 1, v60) == 1)
  {
    v63 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_35:
    outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_Node);
    goto LABEL_36;
  }
  v64 = v111;
  outlined init with take of PgQuery_OidList(v59, v111, type metadata accessor for PgQuery_Node);
  v65 = *(int *)(v60 + 20);
  v66 = *(_QWORD *)(v62 + v65);
  v67 = *(_QWORD *)(v64 + v65);
  if (v66 != v67)
  {
    swift_retain();
    swift_retain();
    v68 = closure #1 in static PgQuery_Node.== infix(_:_:)(v66, v67);
    swift_release();
    swift_release();
    if (!v68)
    {
      outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_Node);
      v63 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_35;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v69 = v62;
  v61 = v102;
  v70 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v69, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v58, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v57, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v70 & 1) == 0)
  {
LABEL_38:
    swift_release();
    swift_release();
    goto LABEL_39;
  }
LABEL_21:
  v71 = *(_QWORD *)(v55
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__namespaces);
  v72 = *(_QWORD *)(v43
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__namespaces);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v73 = specialized static Array<A>.== infix(_:_:)(v71, v72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v73 & 1) == 0)
    goto LABEL_38;
  v74 = *(_QWORD *)(v55
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__columns);
  v75 = *(_QWORD *)(v43
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__columns);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v76 = specialized static Array<A>.== infix(_:_:)(v74, v75);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v76 & 1) == 0)
    goto LABEL_38;
  v77 = v55
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias;
  v57 = v109;
  outlined init with copy of PgQuery_Alias?(v43+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias, v109, &demangling cache variable for type metadata for PgQuery_Alias?);
  v78 = v110;
  v79 = v110 + *(int *)(v106 + 48);
  outlined init with copy of PgQuery_Alias?(v77, v110, &demangling cache variable for type metadata for PgQuery_Alias?);
  outlined init with copy of PgQuery_Alias?(v57, v79, &demangling cache variable for type metadata for PgQuery_Alias?);
  v80 = v108;
  v81 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v107 + 48);
  if (v81(v78, 1, v108) == 1)
  {
    if (v81(v79, 1, v80) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v78, &demangling cache variable for type metadata for PgQuery_Alias?);
      outlined destroy of (key: String, value: StorableValue)(v57, &demangling cache variable for type metadata for PgQuery_Alias?);
      goto LABEL_26;
    }
    v93 = &demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?);
    goto LABEL_52;
  }
  v92 = v105;
  outlined init with copy of PgQuery_Alias?(v78, (uint64_t)v105, &demangling cache variable for type metadata for PgQuery_Alias?);
  if (v81(v79, 1, v80) == 1)
  {
    v93 = &demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?);
LABEL_51:
    outlined destroy of PgQuery_Alias((uint64_t)v92, type metadata accessor for PgQuery_Alias);
LABEL_52:
    outlined destroy of (key: String, value: StorableValue)(v78, v93);
    v90 = &demangling cache variable for type metadata for PgQuery_Alias?;
    goto LABEL_37;
  }
  v94 = v104;
  outlined init with take of PgQuery_OidList(v79, (uint64_t)v104, type metadata accessor for PgQuery_Alias);
  if ((*v92 != *v94 || v92[1] != v94[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(v92[2], v94[2]) & 1) == 0)
  {
    outlined destroy of PgQuery_Alias((uint64_t)v94, type metadata accessor for PgQuery_Alias);
    v93 = &demangling cache variable for type metadata for PgQuery_Alias?;
    goto LABEL_51;
  }
  v95 = (uint64_t)v92;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v61 = v102;
  v96 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias((uint64_t)v94, type metadata accessor for PgQuery_Alias);
  outlined destroy of PgQuery_Alias(v95, type metadata accessor for PgQuery_Alias);
  outlined destroy of (key: String, value: StorableValue)(v78, &demangling cache variable for type metadata for PgQuery_Alias?);
  outlined destroy of (key: String, value: StorableValue)(v57, &demangling cache variable for type metadata for PgQuery_Alias?);
  if ((v96 & 1) == 0)
    goto LABEL_38;
LABEL_26:
  v82 = *(_DWORD *)(v55
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  v83 = *(_DWORD *)(v43
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  v84 = v82 == v83;
  v8 = v100;
  v5 = v101;
  v10 = v103;
  v37 = v98;
  v38 = v99;
  v4 = v61;
  if (!v84)
    goto LABEL_39;
LABEL_28:
  v85 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v86 = v38;
  v85(v10, v37, v4);
  v85(v8, v86, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v87 = v8;
  v88 = dispatch thunk of static Equatable.== infix(_:_:)();
  v89 = *(void (**)(char *, uint64_t))(v5 + 8);
  v89(v87, v4);
  v89(v10, v4);
  return v88 & 1;
}

uint64_t specialized static PgQuery_OnConflictExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t *v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  void (*v73)(_BYTE *, uint64_t, uint64_t);
  uint64_t v74;
  char v75;
  void (*v76)(_BYTE *, uint64_t);
  _BYTE v78[4];
  _BOOL4 v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  _BYTE *v87;
  _BYTE *v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t Node;
  uint64_t v92;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = &v78[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v6);
  v10 = &v78[-v9];
  Node = type metadata accessor for PgQuery_Node(0);
  v11 = *(_QWORD *)(Node - 8);
  v12 = MEMORY[0x1E0C80A78](Node);
  v86 = &v78[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v12);
  v90 = &v78[-v14];
  v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v15 = MEMORY[0x1E0C80A78](v92);
  v89 = &v78[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v18 = &v78[-v17];
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v20 = MEMORY[0x1E0C80A78](v19);
  v87 = &v78[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = MEMORY[0x1E0C80A78](v20);
  v88 = &v78[-v23];
  v24 = MEMORY[0x1E0C80A78](v22);
  v26 = &v78[-v25];
  MEMORY[0x1E0C80A78](v24);
  v28 = &v78[-v27];
  v29 = type metadata accessor for PgQuery_OnConflictExpr(0);
  v30 = a1;
  v31 = a2;
  v32 = *(int *)(v29 + 20);
  v33 = *(_QWORD *)(a1 + v32);
  v34 = *(_QWORD *)(a2 + v32);
  if (v33 == v34)
    goto LABEL_34;
  v35 = v4;
  v36 = *(_QWORD *)(v34 + 16);
  if (*(_BYTE *)(v34 + 24) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)(v33 + 16) != v36)
  {
LABEL_36:
    v75 = 0;
    return v75 & 1;
  }
  v80 = v30;
  v81 = v31;
  v82 = v10;
  v83 = v8;
  v84 = v5;
  v37 = *(_QWORD *)(v33 + 32);
  v38 = *(_QWORD *)(v34 + 32);
  v39 = v33;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v40 = specialized static Array<A>.== infix(_:_:)(v37, v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v40 & 1) == 0)
  {
LABEL_35:
    swift_release();
    swift_release();
    goto LABEL_36;
  }
  v85 = v39;
  v41 = v39
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arbiterWhere;
  outlined init with copy of PgQuery_Alias?(v34+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arbiterWhere, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  v42 = (uint64_t)&v18[*(int *)(v92 + 48)];
  outlined init with copy of PgQuery_Alias?(v41, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, v42, &demangling cache variable for type metadata for PgQuery_Node?);
  v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  v44 = Node;
  if (v43((uint64_t)v18, 1, Node) == 1)
  {
    if (v43(v42, 1, v44) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_16;
    }
    v45 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_23:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v18, v45);
    v61 = (uint64_t)v28;
LABEL_24:
    outlined destroy of (key: String, value: StorableValue)(v61, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_35;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v18, (uint64_t)v26, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v43(v42, 1, v44) == 1)
  {
    v45 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_22:
    outlined destroy of PgQuery_Alias((uint64_t)v26, type metadata accessor for PgQuery_Node);
    goto LABEL_23;
  }
  v46 = v90;
  outlined init with take of PgQuery_OidList(v42, (uint64_t)v90, type metadata accessor for PgQuery_Node);
  v47 = *(int *)(v44 + 20);
  v48 = *(_QWORD *)&v26[v47];
  v49 = *(_QWORD *)&v46[v47];
  if (v48 != v49)
  {
    swift_retain();
    swift_retain();
    v79 = closure #1 in static PgQuery_Node.== infix(_:_:)(v48, v49);
    swift_release();
    swift_release();
    if (!v79)
    {
      outlined destroy of PgQuery_Alias((uint64_t)v46, type metadata accessor for PgQuery_Node);
      v45 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_22;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v50 = (uint64_t)v46;
  v51 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v50, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v26, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v51 & 1) == 0)
    goto LABEL_35;
LABEL_16:
  v52 = v85;
  if (*(_DWORD *)(v85
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraint) != *(_DWORD *)(v34 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraint))
    goto LABEL_35;
  v53 = *(_QWORD *)(v85
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictSet);
  v54 = *(_QWORD *)(v34
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictSet);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v55 = specialized static Array<A>.== infix(_:_:)(v53, v54);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v55 & 1) == 0)
    goto LABEL_35;
  v56 = v52
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictWhere;
  v57 = v44;
  v58 = v88;
  outlined init with copy of PgQuery_Alias?(v34+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictWhere, (uint64_t)v88, &demangling cache variable for type metadata for PgQuery_Node?);
  v59 = v89;
  v60 = (uint64_t)&v89[*(int *)(v92 + 48)];
  outlined init with copy of PgQuery_Alias?(v56, (uint64_t)v89, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v58, v60, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v43((uint64_t)v59, 1, v57) == 1)
  {
    if (v43(v60, 1, v57) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v59, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v58, &demangling cache variable for type metadata for PgQuery_Node?);
      v4 = v35;
      goto LABEL_32;
    }
    v63 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_40;
  }
  v62 = v87;
  outlined init with copy of PgQuery_Alias?((uint64_t)v59, (uint64_t)v87, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v43(v60, 1, v57) == 1)
  {
    v63 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_39:
    outlined destroy of PgQuery_Alias((uint64_t)v62, type metadata accessor for PgQuery_Node);
LABEL_40:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v59, v63);
    v61 = (uint64_t)v58;
    goto LABEL_24;
  }
  v64 = v86;
  outlined init with take of PgQuery_OidList(v60, (uint64_t)v86, type metadata accessor for PgQuery_Node);
  v65 = *(int *)(v57 + 20);
  v66 = *(_QWORD *)&v62[v65];
  v67 = *(_QWORD *)&v64[v65];
  if (v66 != v67)
  {
    swift_retain();
    swift_retain();
    v68 = closure #1 in static PgQuery_Node.== infix(_:_:)(v66, v67);
    swift_release();
    swift_release();
    if (!v68)
    {
      outlined destroy of PgQuery_Alias((uint64_t)v64, type metadata accessor for PgQuery_Node);
      v63 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_39;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v4 = v35;
  v69 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias((uint64_t)v64, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v62, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v59, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v58, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v69 & 1) == 0)
    goto LABEL_35;
LABEL_32:
  if (*(_DWORD *)(v85
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclRelIndex) != *(_DWORD *)(v34 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclRelIndex))
    goto LABEL_35;
  v70 = *(_QWORD *)(v85
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclRelTlist);
  v71 = *(_QWORD *)(v34
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclRelTlist);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v72 = specialized static Array<A>.== infix(_:_:)(v70, v71);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v8 = v83;
  v5 = v84;
  v31 = v81;
  v10 = v82;
  v30 = v80;
  if ((v72 & 1) == 0)
    goto LABEL_36;
LABEL_34:
  v73 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v74 = v31;
  v73(v10, v30, v4);
  v73(v8, v74, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v75 = dispatch thunk of static Equatable.== infix(_:_:)();
  v76 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v76(v8, v4);
  v76(v10, v4);
  return v75 & 1;
}

uint64_t specialized static PgQuery_CreateTrigStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t TrigStmt;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  void (*v83)(char *, uint64_t, uint64_t);
  void (*v84)(char *, uint64_t);
  uint64_t v86;
  unsigned int (*v87)(uint64_t, uint64_t, uint64_t);
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t RangeVar;
  uint64_t v106;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v86 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v100 = *(_QWORD *)(Node - 8);
  v101 = Node;
  MEMORY[0x1E0C80A78](Node);
  v97 = (uint64_t)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v99);
  v103 = (uint64_t)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v98 = (uint64_t)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v102 = (uint64_t)&v86 - v17;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v18 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v104 = (uint64_t)&v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  v20 = MEMORY[0x1E0C80A78](v106);
  v96 = (uint64_t)&v86 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v86 - v22;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v25 = MEMORY[0x1E0C80A78](v24);
  v94 = (uint64_t)&v86 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v95 = (uint64_t)&v86 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v31 = (char *)&v86 - v30;
  MEMORY[0x1E0C80A78](v29);
  v33 = (char *)&v86 - v32;
  TrigStmt = type metadata accessor for PgQuery_CreateTrigStmt(0);
  v35 = a1;
  v36 = *(int *)(TrigStmt + 20);
  v37 = *(_QWORD *)(a1 + v36);
  v38 = *(_QWORD *)(a2 + v36);
  if (v37 == v38)
    goto LABEL_45;
  v91 = v35;
  v92 = a2;
  v93 = v4;
  v39 = v37;
  if ((*(_QWORD *)(v37 + 16) != *(_QWORD *)(v38 + 16) || *(_QWORD *)(v37 + 24) != *(_QWORD *)(v38 + 24))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    swift_retain();
    swift_retain();
    goto LABEL_33;
  }
  v88 = v10;
  v89 = v8;
  v90 = v5;
  v40 = v39
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  outlined init with copy of PgQuery_Alias?(v38+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v33, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v41 = (uint64_t)&v23[*(int *)(v106 + 48)];
  outlined init with copy of PgQuery_Alias?(v40, (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v33, v41, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  v43 = RangeVar;
  if (v42((uint64_t)v23, 1, RangeVar) == 1)
  {
    v44 = v42(v41, 1, v43);
    swift_retain();
    swift_retain();
    if (v44 == 1)
    {
      v87 = v42;
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v33, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_14;
    }
LABEL_10:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    v45 = &demangling cache variable for type metadata for PgQuery_RangeVar?;
    v46 = (uint64_t)v33;
LABEL_11:
    outlined destroy of (key: String, value: StorableValue)(v46, v45);
    goto LABEL_33;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, (uint64_t)v31, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v42(v41, 1, v43) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v31, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_10;
  }
  v87 = v42;
  v47 = v104;
  outlined init with take of PgQuery_OidList(v41, v104, type metadata accessor for PgQuery_RangeVar);
  swift_retain();
  swift_retain();
  v48 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v31, v47);
  outlined destroy of PgQuery_Alias(v47, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias((uint64_t)v31, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v33, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v48 & 1) == 0)
    goto LABEL_33;
LABEL_14:
  v49 = *(_QWORD *)(v39
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcname);
  v50 = *(_QWORD *)(v38
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcname);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v51 = specialized static Array<A>.== infix(_:_:)(v49, v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v51 & 1) == 0)
    goto LABEL_33;
  v52 = *(_QWORD *)(v39
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  v53 = *(_QWORD *)(v38
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v54 = specialized static Array<A>.== infix(_:_:)(v52, v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v54 & 1) == 0)
    goto LABEL_33;
  if (*(unsigned __int8 *)(v39
                          + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__row) != *(unsigned __int8 *)(v38 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__row))
    goto LABEL_33;
  if (*(_DWORD *)(v39
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__timing) != *(_DWORD *)(v38 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__timing))
    goto LABEL_33;
  if (*(_DWORD *)(v39
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__events) != *(_DWORD *)(v38 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__events))
    goto LABEL_33;
  v55 = *(_QWORD *)(v39
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__columns);
  v56 = *(_QWORD *)(v38
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__columns);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v57 = specialized static Array<A>.== infix(_:_:)(v55, v56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v57 & 1) == 0)
    goto LABEL_33;
  v58 = v39
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whenClause;
  v59 = v102;
  outlined init with copy of PgQuery_Alias?(v38+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whenClause, v102, &demangling cache variable for type metadata for PgQuery_Node?);
  v60 = v103;
  v61 = v103 + *(int *)(v99 + 48);
  outlined init with copy of PgQuery_Alias?(v58, v103, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v59, v61, &demangling cache variable for type metadata for PgQuery_Node?);
  v62 = v101;
  v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v100 + 48);
  if (v63(v60, 1, v101) != 1)
  {
    v64 = v98;
    outlined init with copy of PgQuery_Alias?(v60, v98, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v63(v61, 1, v62) == 1)
    {
      v65 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v66 = v97;
      outlined init with take of PgQuery_OidList(v61, v97, type metadata accessor for PgQuery_Node);
      v67 = *(int *)(v62 + 20);
      v68 = *(_QWORD *)(v64 + v67);
      v69 = *(_QWORD *)(v66 + v67);
      if (v68 == v69
        || (swift_retain(),
            swift_retain(),
            v70 = closure #1 in static PgQuery_Node.== infix(_:_:)(v68, v69),
            swift_release(),
            swift_release(),
            v70))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v71 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v66, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)(v60, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v59, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v71 & 1) == 0)
          goto LABEL_33;
        goto LABEL_29;
      }
      outlined destroy of PgQuery_Alias(v66, type metadata accessor for PgQuery_Node);
      v65 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_Node);
    goto LABEL_36;
  }
  if (v63(v61, 1, v62) != 1)
  {
    v65 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_36:
    outlined destroy of (key: String, value: StorableValue)(v60, v65);
    v45 = &demangling cache variable for type metadata for PgQuery_Node?;
    v46 = v59;
    goto LABEL_11;
  }
  outlined destroy of (key: String, value: StorableValue)(v60, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v59, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_29:
  if (*(unsigned __int8 *)(v39
                          + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isconstraint) != *(unsigned __int8 *)(v38 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isconstraint))
    goto LABEL_33;
  v72 = *(_QWORD *)(v39
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__transitionRels);
  v73 = *(_QWORD *)(v38
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__transitionRels);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v74 = specialized static Array<A>.== infix(_:_:)(v72, v73);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v74 & 1) == 0
    || *(unsigned __int8 *)(v39
                          + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__deferrable) != *(unsigned __int8 *)(v38 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__deferrable)
    || *(unsigned __int8 *)(v39
                          + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initdeferred) != *(unsigned __int8 *)(v38 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initdeferred))
  {
    goto LABEL_33;
  }
  v76 = v39
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constrrel;
  v77 = v95;
  outlined init with copy of PgQuery_Alias?(v38+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constrrel, v95, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v78 = v96;
  v79 = v96 + *(int *)(v106 + 48);
  outlined init with copy of PgQuery_Alias?(v76, v96, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?(v77, v79, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v87(v78, 1, v43) == 1)
  {
    if (v87(v79, 1, RangeVar) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v96, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of (key: String, value: StorableValue)(v95, &demangling cache variable for type metadata for PgQuery_RangeVar?);
LABEL_44:
      swift_release();
      swift_release();
      v8 = v89;
      v5 = v90;
      v10 = v88;
      a2 = v92;
      v4 = v93;
      v35 = v91;
LABEL_45:
      v83 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v83(v10, v35, v4);
      v83(v8, a2, v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v75 = dispatch thunk of static Equatable.== infix(_:_:)();
      v84 = *(void (**)(char *, uint64_t))(v5 + 8);
      v84(v8, v4);
      v84(v10, v4);
      return v75 & 1;
    }
    goto LABEL_42;
  }
  outlined init with copy of PgQuery_Alias?(v96, v94, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v87(v79, 1, RangeVar) == 1)
  {
    outlined destroy of PgQuery_Alias(v94, type metadata accessor for PgQuery_RangeVar);
LABEL_42:
    outlined destroy of (key: String, value: StorableValue)(v96, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    outlined destroy of (key: String, value: StorableValue)(v95, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    goto LABEL_33;
  }
  v80 = v104;
  outlined init with take of PgQuery_OidList(v79, v104, type metadata accessor for PgQuery_RangeVar);
  v81 = v94;
  v82 = specialized static PgQuery_RangeVar.== infix(_:_:)(v94, v80);
  outlined destroy of PgQuery_Alias(v80, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias(v81, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of (key: String, value: StorableValue)(v96, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of (key: String, value: StorableValue)(v95, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v82 & 1) != 0)
    goto LABEL_44;
LABEL_33:
  swift_release();
  swift_release();
  v75 = 0;
  return v75 & 1;
}

uint64_t specialized static PgQuery_CreateRoleStmt.== infix(_:_:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  uint64_t RoleStmt;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - v9;
  v11 = *a2;
  if (*((_BYTE *)a2 + 8) == 1)
    __asm { BR              X11 }
  if (*a1 != v11)
    goto LABEL_11;
  v12 = a1[2] == a2[2] && a1[3] == a2[3];
  if (v12 || (v13 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(a1[4], a2[4]) & 1) != 0)
    {
      RoleStmt = type metadata accessor for PgQuery_CreateRoleStmt(0);
      v15 = (char *)a1 + *(int *)(RoleStmt + 28);
      v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v16(v10, v15, v4);
      v16(v8, (char *)a2 + *(int *)(RoleStmt + 28), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v13 = dispatch thunk of static Equatable.== infix(_:_:)();
      v17 = *(void (**)(char *, uint64_t))(v5 + 8);
      v17(v8, v4);
      v17(v10, v4);
      return v13 & 1;
    }
LABEL_11:
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static PgQuery_CreateCastStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t ObjectWithArgs;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t TypeName;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t CastStmt;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  int v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  char v74;
  uint64_t *v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  int v81;
  int v82;
  BOOL v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t, uint64_t);
  uint64_t v86;
  char *v87;
  void (*v88)(char *, uint64_t);
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;

  v4 = type metadata accessor for UnknownStorage();
  v108 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v90 - v8;
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  v99 = *(_QWORD *)(ObjectWithArgs - 8);
  v100 = ObjectWithArgs;
  MEMORY[0x1E0C80A78](ObjectWithArgs);
  v96 = (uint64_t)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_ObjectWithArgs?, PgQuery_ObjectWithArgs?));
  MEMORY[0x1E0C80A78](v98);
  v102 = (uint64_t)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v110 = (char *)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v101 = (uint64_t)&v90 - v16;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v18 = *(_QWORD *)(TypeName - 8);
  v19 = MEMORY[0x1E0C80A78](TypeName);
  v97 = (uint64_t)&v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v104 = (uint64_t)&v90 - v21;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
  v23 = MEMORY[0x1E0C80A78](v22);
  v105 = (uint64_t)&v90 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v90 - v25;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  v28 = MEMORY[0x1E0C80A78](v27);
  v103 = (uint64_t)&v90 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A78](v28);
  v107 = (uint64_t)&v90 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v109 = (uint64_t)&v90 - v33;
  MEMORY[0x1E0C80A78](v32);
  v35 = (char *)&v90 - v34;
  CastStmt = type metadata accessor for PgQuery_CreateCastStmt(0);
  v37 = a1;
  v38 = *(int *)(CastStmt + 20);
  v39 = *(char **)(a1 + v38);
  v40 = a2;
  v41 = *(char **)(a2 + v38);
  v42 = v40;
  if (v39 == v41)
    goto LABEL_55;
  v92 = v37;
  v93 = v40;
  v91 = v9;
  v94 = v7;
  v95 = v4;
  v43 = (uint64_t)&v39[OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sourcetype];
  outlined init with copy of PgQuery_Alias?((uint64_t)&v41[OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sourcetype], (uint64_t)v35, &demangling cache variable for type metadata for PgQuery_TypeName?);
  v44 = (uint64_t)&v26[*(int *)(v22 + 48)];
  outlined init with copy of PgQuery_Alias?(v43, (uint64_t)v26, &demangling cache variable for type metadata for PgQuery_TypeName?);
  v106 = v35;
  outlined init with copy of PgQuery_Alias?((uint64_t)v35, v44, &demangling cache variable for type metadata for PgQuery_TypeName?);
  v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  v46 = v22;
  v47 = (uint64_t)v26;
  if (v45((uint64_t)v26, 1, TypeName) == 1)
  {
    v48 = v45(v44, 1, TypeName);
    swift_retain();
    swift_retain();
    v49 = (uint64_t)v110;
    if (v48 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v47, &demangling cache variable for type metadata for PgQuery_TypeName?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v106, &demangling cache variable for type metadata for PgQuery_TypeName?);
      goto LABEL_5;
    }
    v64 = &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?);
LABEL_26:
    v70 = (uint64_t)v106;
    outlined destroy of (key: String, value: StorableValue)(v47, v64);
    outlined destroy of (key: String, value: StorableValue)(v70, &demangling cache variable for type metadata for PgQuery_TypeName?);
    goto LABEL_44;
  }
  v62 = v109;
  outlined init with copy of PgQuery_Alias?((uint64_t)v26, v109, &demangling cache variable for type metadata for PgQuery_TypeName?);
  v63 = v45(v44, 1, TypeName);
  v49 = (uint64_t)v110;
  if (v63 == 1)
  {
    swift_retain();
    swift_retain();
    v64 = &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?);
LABEL_25:
    outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_TypeName);
    goto LABEL_26;
  }
  v65 = v104;
  outlined init with take of PgQuery_OidList(v44, v104, type metadata accessor for PgQuery_TypeName);
  v66 = *(_QWORD *)v62;
  v67 = *(_QWORD *)v65;
  swift_retain();
  swift_retain();
  v68 = v67;
  v62 = v109;
  if ((specialized static Array<A>.== infix(_:_:)(v66, v68) & 1) == 0
    || *(_DWORD *)(v62 + 8) != *(_DWORD *)(v65 + 8)
    || *(unsigned __int8 *)(v62 + 12) != *(unsigned __int8 *)(v65 + 12)
    || *(unsigned __int8 *)(v62 + 13) != *(unsigned __int8 *)(v65 + 13)
    || (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v62 + 16), *(_QWORD *)(v65 + 16)) & 1) == 0
    || *(_DWORD *)(v62 + 24) != *(_DWORD *)(v65 + 24)
    || (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v62 + 32), *(_QWORD *)(v65 + 32)) & 1) == 0
    || *(_DWORD *)(v62 + 40) != *(_DWORD *)(v65 + 40))
  {
    outlined destroy of PgQuery_Alias(v65, type metadata accessor for PgQuery_TypeName);
    v64 = &demangling cache variable for type metadata for PgQuery_TypeName?;
    goto LABEL_25;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v69 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v65, type metadata accessor for PgQuery_TypeName);
  outlined destroy of PgQuery_Alias(v109, type metadata accessor for PgQuery_TypeName);
  outlined destroy of (key: String, value: StorableValue)(v47, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v106, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((v69 & 1) == 0)
    goto LABEL_44;
LABEL_5:
  v110 = v39;
  v50 = (uint64_t)&v39[OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targettype];
  v51 = v107;
  outlined init with copy of PgQuery_Alias?((uint64_t)&v41[OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targettype], v107, &demangling cache variable for type metadata for PgQuery_TypeName?);
  v52 = v105;
  v53 = v105 + *(int *)(v46 + 48);
  outlined init with copy of PgQuery_Alias?(v50, v105, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined init with copy of PgQuery_Alias?(v51, v53, &demangling cache variable for type metadata for PgQuery_TypeName?);
  v54 = TypeName;
  if (v45(v52, 1, TypeName) == 1)
  {
    if (v45(v53, 1, TypeName) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v52, &demangling cache variable for type metadata for PgQuery_TypeName?);
      outlined destroy of (key: String, value: StorableValue)(v107, &demangling cache variable for type metadata for PgQuery_TypeName?);
      v55 = v95;
      goto LABEL_8;
    }
    v72 = &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?);
LABEL_42:
    outlined destroy of (key: String, value: StorableValue)(v52, v72);
    v75 = &demangling cache variable for type metadata for PgQuery_TypeName?;
    v76 = v107;
LABEL_43:
    outlined destroy of (key: String, value: StorableValue)(v76, v75);
    goto LABEL_44;
  }
  v71 = v103;
  outlined init with copy of PgQuery_Alias?(v52, v103, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if (v45(v53, 1, v54) == 1)
  {
    v72 = &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?);
LABEL_41:
    outlined destroy of PgQuery_Alias(v71, type metadata accessor for PgQuery_TypeName);
    goto LABEL_42;
  }
  v73 = v97;
  outlined init with take of PgQuery_OidList(v53, v97, type metadata accessor for PgQuery_TypeName);
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)v71, *(_QWORD *)v73) & 1) == 0
    || *(_DWORD *)(v71 + 8) != *(_DWORD *)(v73 + 8)
    || *(unsigned __int8 *)(v71 + 12) != *(unsigned __int8 *)(v73 + 12)
    || *(unsigned __int8 *)(v71 + 13) != *(unsigned __int8 *)(v73 + 13)
    || (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v71 + 16), *(_QWORD *)(v73 + 16)) & 1) == 0
    || *(_DWORD *)(v71 + 24) != *(_DWORD *)(v73 + 24)
    || (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v71 + 32), *(_QWORD *)(v73 + 32)) & 1) == 0
    || *(_DWORD *)(v71 + 40) != *(_DWORD *)(v73 + 40))
  {
    outlined destroy of PgQuery_Alias(v73, type metadata accessor for PgQuery_TypeName);
    v72 = &demangling cache variable for type metadata for PgQuery_TypeName?;
    goto LABEL_41;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v55 = v95;
  v74 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v73, type metadata accessor for PgQuery_TypeName);
  outlined destroy of PgQuery_Alias(v71, type metadata accessor for PgQuery_TypeName);
  outlined destroy of (key: String, value: StorableValue)(v52, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined destroy of (key: String, value: StorableValue)(v107, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((v74 & 1) == 0)
    goto LABEL_44;
LABEL_8:
  v56 = (uint64_t)&v110[OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__func];
  v57 = v101;
  outlined init with copy of PgQuery_Alias?((uint64_t)&v41[OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__func], v101, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  v58 = v102;
  v59 = v102 + *(int *)(v98 + 48);
  outlined init with copy of PgQuery_Alias?(v56, v102, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  outlined init with copy of PgQuery_Alias?(v57, v59, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  v60 = v100;
  v61 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v99 + 48);
  if (v61(v58, 1, v100) != 1)
  {
    outlined init with copy of PgQuery_Alias?(v58, v49, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    if (v61(v59, 1, v60) != 1)
    {
      v78 = v96;
      outlined init with take of PgQuery_OidList(v59, v96, type metadata accessor for PgQuery_ObjectWithArgs);
      v79 = specialized static PgQuery_ObjectWithArgs.== infix(_:_:)(v49, v78, type metadata accessor for PgQuery_ObjectWithArgs);
      outlined destroy of PgQuery_Alias(v78, type metadata accessor for PgQuery_ObjectWithArgs);
      outlined destroy of PgQuery_Alias(v49, type metadata accessor for PgQuery_ObjectWithArgs);
      outlined destroy of (key: String, value: StorableValue)(v58, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      outlined destroy of (key: String, value: StorableValue)(v57, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      if ((v79 & 1) == 0)
        goto LABEL_44;
      goto LABEL_49;
    }
    outlined destroy of PgQuery_Alias(v49, type metadata accessor for PgQuery_ObjectWithArgs);
    goto LABEL_47;
  }
  if (v61(v59, 1, v60) != 1)
  {
LABEL_47:
    outlined destroy of (key: String, value: StorableValue)(v58, &demangling cache variable for type metadata for (PgQuery_ObjectWithArgs?, PgQuery_ObjectWithArgs?));
    v75 = &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?;
    v76 = v57;
    goto LABEL_43;
  }
  outlined destroy of (key: String, value: StorableValue)(v58, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  outlined destroy of (key: String, value: StorableValue)(v57, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
LABEL_49:
  v4 = v55;
  v80 = *(_QWORD *)&v41[OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__context];
  if (v41[OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__context
         + 8] == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)&v110[OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__context] == v80)
  {
    v81 = v110[OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inout];
    v82 = v41[OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inout];
    swift_release();
    swift_release();
    v83 = v81 == v82;
    v42 = v93;
    v7 = v94;
    v9 = v91;
    v37 = v92;
    if (!v83)
    {
      v77 = 0;
      return v77 & 1;
    }
LABEL_55:
    v84 = v108;
    v85 = *(void (**)(char *, uint64_t, uint64_t))(v108 + 16);
    v86 = v42;
    v85(v9, v37, v4);
    v85(v7, v86, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v87 = v7;
    v77 = dispatch thunk of static Equatable.== infix(_:_:)();
    v88 = *(void (**)(char *, uint64_t))(v84 + 8);
    v88(v87, v4);
    v88(v9, v4);
    return v77 & 1;
  }
LABEL_44:
  swift_release();
  swift_release();
  v77 = 0;
  return v77 & 1;
}

uint64_t specialized static PgQuery_CoerceToDomain.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  int v68;
  int v69;
  BOOL v70;
  void (*v71)(char *, uint64_t, uint64_t);
  char *v72;
  void (*v73)(char *, uint64_t);
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v75 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v88 = *(_QWORD *)(Node - 8);
  v12 = MEMORY[0x1E0C80A78](Node);
  v82 = (uint64_t)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v86 = (uint64_t)&v75 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v16 = MEMORY[0x1E0C80A78](v15);
  v85 = (uint64_t)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v75 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v83 = (uint64_t)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v84 = (uint64_t)&v75 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v87 = (uint64_t)&v75 - v26;
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v75 - v27;
  v29 = *(int *)(type metadata accessor for PgQuery_CoerceToDomain(0) + 20);
  v30 = *(_QWORD *)(a1 + v29);
  v31 = *(_QWORD *)(a2 + v29);
  if (v30 == v31)
    goto LABEL_36;
  v77 = a2;
  v78 = a1;
  v76 = v10;
  v79 = v8;
  v80 = v4;
  v81 = v5;
  v32 = v30;
  v33 = v31;
  v34 = v30
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v31+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  v35 = (uint64_t)&v19[*(int *)(v15 + 48)];
  outlined init with copy of PgQuery_Alias?(v34, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, v35, &demangling cache variable for type metadata for PgQuery_Node?);
  v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
  if (v36((uint64_t)v19, 1, Node) == 1)
  {
    v88 = Node;
    v37 = v36(v35, 1, Node);
    swift_retain();
    swift_retain();
    v38 = v32;
    v39 = v33;
    if (v37 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_11;
    }
    v41 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_27:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, v41);
    v66 = (uint64_t)v28;
LABEL_31:
    outlined destroy of (key: String, value: StorableValue)(v66, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_32;
  }
  v40 = v87;
  outlined init with copy of PgQuery_Alias?((uint64_t)v19, v87, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v36(v35, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    v41 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_26:
    outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_Node);
    goto LABEL_27;
  }
  v75 = v28;
  v42 = v86;
  outlined init with take of PgQuery_OidList(v35, v86, type metadata accessor for PgQuery_Node);
  v88 = Node;
  v43 = *(int *)(Node + 20);
  v44 = *(_QWORD *)(v40 + v43);
  v45 = *(_QWORD *)(v42 + v43);
  swift_retain();
  swift_retain();
  if (v44 != v45)
  {
    swift_retain();
    swift_retain();
    v46 = closure #1 in static PgQuery_Node.== infix(_:_:)(v44, v45);
    swift_release();
    swift_release();
    if (!v46)
    {
      outlined destroy of PgQuery_Alias(v86, type metadata accessor for PgQuery_Node);
      v41 = &demangling cache variable for type metadata for PgQuery_Node?;
      v28 = v75;
      v40 = v87;
      goto LABEL_26;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v48 = v86;
  v47 = v87;
  v49 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v48, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v47, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v75, &demangling cache variable for type metadata for PgQuery_Node?);
  v38 = v32;
  v39 = v33;
  if ((v49 & 1) == 0)
    goto LABEL_32;
LABEL_11:
  v50 = v38
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  v51 = v84;
  outlined init with copy of PgQuery_Alias?(v39+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v84, &demangling cache variable for type metadata for PgQuery_Node?);
  v52 = v85;
  v53 = v85 + *(int *)(v15 + 48);
  outlined init with copy of PgQuery_Alias?(v50, v85, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v51, v53, &demangling cache variable for type metadata for PgQuery_Node?);
  v54 = v88;
  if (v36(v52, 1, v88) != 1)
  {
    v56 = v83;
    outlined init with copy of PgQuery_Alias?(v52, v83, &demangling cache variable for type metadata for PgQuery_Node?);
    v57 = v36(v53, 1, v54);
    v5 = v81;
    if (v57 == 1)
    {
      v58 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v59 = v82;
      outlined init with take of PgQuery_OidList(v53, v82, type metadata accessor for PgQuery_Node);
      v60 = *(int *)(v54 + 20);
      v61 = *(_QWORD *)(v56 + v60);
      v62 = *(_QWORD *)(v59 + v60);
      if (v61 == v62
        || (swift_retain(),
            swift_retain(),
            v63 = closure #1 in static PgQuery_Node.== infix(_:_:)(v61, v62),
            swift_release(),
            swift_release(),
            v63))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v64 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v59, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v56, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)(v52, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v51, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v64 & 1) == 0)
          goto LABEL_32;
        goto LABEL_20;
      }
      outlined destroy of PgQuery_Alias(v59, type metadata accessor for PgQuery_Node);
      v58 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v56, type metadata accessor for PgQuery_Node);
    goto LABEL_30;
  }
  v55 = v36(v53, 1, v54);
  v5 = v81;
  if (v55 != 1)
  {
    v58 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_30:
    outlined destroy of (key: String, value: StorableValue)(v52, v58);
    v66 = v51;
    goto LABEL_31;
  }
  outlined destroy of (key: String, value: StorableValue)(v52, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v51, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_20:
  if (*(_DWORD *)(v38
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) == *(_DWORD *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype)
    && *(_DWORD *)(v38
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod) == *(_DWORD *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod)
    && *(_DWORD *)(v38
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid) == *(_DWORD *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid))
  {
    v65 = *(_QWORD *)(v39
                    + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coercionformat);
    if (*(_BYTE *)(v39
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coercionformat
                  + 8) == 1)
      __asm { BR              X11 }
    if (*(_QWORD *)(v38
                   + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coercionformat) == v65)
    {
      v68 = *(_DWORD *)(v38
                      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      v69 = *(_DWORD *)(v39
                      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      swift_release();
      swift_release();
      v70 = v68 == v69;
      a1 = v78;
      v8 = v79;
      v10 = v76;
      a2 = v77;
      v4 = v80;
      if (!v70)
      {
        v67 = 0;
        return v67 & 1;
      }
LABEL_36:
      v71 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v71(v10, a1, v4);
      v71(v8, a2, v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v72 = v8;
      v67 = dispatch thunk of static Equatable.== infix(_:_:)();
      v73 = *(void (**)(char *, uint64_t))(v5 + 8);
      v73(v72, v4);
      v73(v10, v4);
      return v67 & 1;
    }
  }
LABEL_32:
  swift_release();
  swift_release();
  v67 = 0;
  return v67 & 1;
}

uint64_t specialized static PgQuery_AlterTableStmt.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t RangeVar;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t AlterTableStmt;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  char v30;
  uint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  char *v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;

  v4 = type metadata accessor for UnknownStorage();
  v50 = *(_QWORD *)(v4 - 8);
  v51 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v49 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v48 = (char *)&v47 - v7;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v9 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v52 = (uint64_t)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v47 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v47 - v21;
  AlterTableStmt = type metadata accessor for PgQuery_AlterTableStmt(0);
  v24 = *(int *)(AlterTableStmt + 32);
  v53 = a1;
  v25 = (uint64_t)a1 + v24;
  v26 = AlterTableStmt;
  outlined init with copy of PgQuery_Alias?(v25, (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v27 = *(int *)(v26 + 32);
  v54 = a2;
  outlined init with copy of PgQuery_Alias?((uint64_t)a2 + v27, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v28, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, RangeVar) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if (v29(v28, 1, RangeVar) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_8;
    }
  }
  else
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if (v29(v28, 1, RangeVar) != 1)
    {
      v31 = v52;
      outlined init with take of PgQuery_OidList(v28, v52, type metadata accessor for PgQuery_RangeVar);
      v32 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v17, v31);
      outlined destroy of PgQuery_Alias(v31, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      if ((v32 & 1) == 0)
      {
LABEL_11:
        v30 = 0;
        return v30 & 1;
      }
LABEL_8:
      v33 = v53;
      v34 = v54;
      if ((specialized static Array<A>.== infix(_:_:)(*v53, *v54) & 1) != 0)
      {
        v35 = v34[1];
        v36 = *((unsigned __int8 *)v34 + 16);
        v37 = destructiveProjectEnumData for StorableValue(v33[1], *((unsigned __int8 *)v33 + 16));
        if (v37 == destructiveProjectEnumData for StorableValue(v35, v36)
          && *((unsigned __int8 *)v33 + 17) == *((unsigned __int8 *)v34 + 17))
        {
          v39 = (char *)v33 + *(int *)(v26 + 28);
          v41 = v50;
          v40 = v51;
          v42 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
          v43 = v48;
          v42(v48, v39, v51);
          v44 = (char *)v34 + *(int *)(v26 + 28);
          v45 = v49;
          v42(v49, v44, v40);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v30 = dispatch thunk of static Equatable.== infix(_:_:)();
          v46 = *(void (**)(char *, uint64_t))(v41 + 8);
          v46(v45, v40);
          v46(v43, v40);
          return v30 & 1;
        }
      }
      goto LABEL_11;
    }
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RangeVar);
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  v30 = 0;
  return v30 & 1;
}

uint64_t specialized static PgQuery_AlterOwnerStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t RoleSpec;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t Node;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t RangeVar;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t AlterOwnerStmt;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t, uint64_t);
  int v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  int v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int (*v80)(uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  void (*v82)(char *, uint64_t, uint64_t);
  uint64_t v83;
  char v84;
  void (*v85)(char *, uint64_t);
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  v4 = type metadata accessor for UnknownStorage();
  v113 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v92 - v8;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v101 = *(_QWORD *)(RoleSpec - 8);
  v102 = RoleSpec;
  MEMORY[0x1E0C80A78](RoleSpec);
  v98 = (uint64_t)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?));
  MEMORY[0x1E0C80A78](v100);
  v103 = (uint64_t)&v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v99 = (uint64_t)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v106 = (uint64_t)&v92 - v16;
  Node = type metadata accessor for PgQuery_Node(0);
  v109 = *(_QWORD *)(Node - 8);
  v110 = Node;
  MEMORY[0x1E0C80A78](Node);
  v104 = (uint64_t)&v92 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v108);
  v112 = (uint64_t)&v92 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v107 = (uint64_t)&v92 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v111 = (uint64_t)&v92 - v23;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v25 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v105 = (uint64_t)&v92 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1E0C80A78](v27);
  v29 = (char *)&v92 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v31 = MEMORY[0x1E0C80A78](v30);
  v33 = (char *)&v92 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31);
  v114 = (uint64_t)&v92 - v34;
  AlterOwnerStmt = type metadata accessor for PgQuery_AlterOwnerStmt(0);
  v36 = a1;
  v37 = *(int *)(AlterOwnerStmt + 20);
  v38 = *(_QWORD *)(a1 + v37);
  v39 = a2;
  v40 = *(_QWORD *)(a2 + v37);
  v41 = v39;
  if (v38 == v40)
    goto LABEL_23;
  v93 = v36;
  v94 = v39;
  v95 = v9;
  v96 = v4;
  v97 = v7;
  v42 = *(_QWORD *)(v40 + 16);
  v43 = *(unsigned __int8 *)(v40 + 24);
  v44 = destructiveProjectEnumData for StorableValue(*(_QWORD *)(v38 + 16), *(unsigned __int8 *)(v38 + 24));
  if (v44 != destructiveProjectEnumData for StorableValue(v42, v43))
  {
LABEL_34:
    v84 = 0;
    return v84 & 1;
  }
  v45 = v38
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  v46 = v114;
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, v114, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v47 = (uint64_t)&v29[*(int *)(v27 + 48)];
  outlined init with copy of PgQuery_Alias?(v45, (uint64_t)v29, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?(v46, v47, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  if (v48((uint64_t)v29, 1, RangeVar) == 1)
  {
    v49 = v48(v47, 1, RangeVar);
    v50 = v38;
    swift_retain();
    v51 = v40;
    swift_retain();
    v52 = v97;
    if (v49 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v29, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of (key: String, value: StorableValue)(v114, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_10;
    }
LABEL_8:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v29, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    v54 = &demangling cache variable for type metadata for PgQuery_RangeVar?;
    v55 = v114;
LABEL_32:
    outlined destroy of (key: String, value: StorableValue)(v55, v54);
    goto LABEL_33;
  }
  v51 = v40;
  v50 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v29, (uint64_t)v33, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v53 = v48(v47, 1, RangeVar);
  v52 = v97;
  if (v53 == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v33, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_8;
  }
  v56 = v105;
  outlined init with take of PgQuery_OidList(v47, v105, type metadata accessor for PgQuery_RangeVar);
  swift_retain();
  swift_retain();
  v57 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v33, v56);
  outlined destroy of PgQuery_Alias(v56, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias((uint64_t)v33, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v29, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of (key: String, value: StorableValue)(v114, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v57 & 1) == 0)
    goto LABEL_33;
LABEL_10:
  v58 = v50
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  v59 = v111;
  outlined init with copy of PgQuery_Alias?(v51+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, v111, &demangling cache variable for type metadata for PgQuery_Node?);
  v60 = v112;
  v61 = v112 + *(int *)(v108 + 48);
  outlined init with copy of PgQuery_Alias?(v58, v112, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v59, v61, &demangling cache variable for type metadata for PgQuery_Node?);
  v62 = v110;
  v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v109 + 48);
  if (v63(v60, 1, v110) == 1)
  {
    if (v63(v61, 1, v62) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v60, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)(v59, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_19;
    }
    v65 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_31;
  }
  v64 = v107;
  outlined init with copy of PgQuery_Alias?(v60, v107, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v63(v61, 1, v62) == 1)
  {
    v65 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_30:
    outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_Node);
LABEL_31:
    outlined destroy of (key: String, value: StorableValue)(v60, v65);
    v54 = &demangling cache variable for type metadata for PgQuery_Node?;
    v55 = v59;
    goto LABEL_32;
  }
  v66 = v104;
  outlined init with take of PgQuery_OidList(v61, v104, type metadata accessor for PgQuery_Node);
  v67 = *(int *)(v62 + 20);
  v68 = *(_QWORD *)(v64 + v67);
  v69 = *(_QWORD *)(v66 + v67);
  if (v68 != v69)
  {
    swift_retain();
    swift_retain();
    v70 = closure #1 in static PgQuery_Node.== infix(_:_:)(v68, v69);
    swift_release();
    swift_release();
    if (!v70)
    {
      outlined destroy of PgQuery_Alias(v104, type metadata accessor for PgQuery_Node);
      v65 = &demangling cache variable for type metadata for PgQuery_Node?;
      v64 = v107;
      goto LABEL_30;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v71 = v107;
  v72 = v104;
  v73 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v72, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v71, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v60, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v59, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v73 & 1) == 0)
  {
LABEL_33:
    swift_release();
    swift_release();
    goto LABEL_34;
  }
LABEL_19:
  v74 = v50
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newowner;
  v75 = v106;
  outlined init with copy of PgQuery_Alias?(v51+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newowner, v106, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v76 = v103;
  v77 = v103 + *(int *)(v100 + 48);
  outlined init with copy of PgQuery_Alias?(v74, v103, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v78 = v76;
  outlined init with copy of PgQuery_Alias?(v75, v77, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v79 = v102;
  v80 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v101 + 48);
  if (v80(v76, 1, v102) != 1)
  {
    v86 = v99;
    outlined init with copy of PgQuery_Alias?(v76, v99, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    if (v80(v77, 1, v79) == 1)
    {
      v87 = &demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?);
    }
    else
    {
      v88 = v98;
      outlined init with take of PgQuery_OidList(v77, v98, type metadata accessor for PgQuery_RoleSpec);
      v89 = *(_QWORD *)v88;
      if (*(_BYTE *)(v88 + 8) == 1)
        __asm { BR              X11 }
      if (*(_QWORD *)v86 == v89
        && (*(_QWORD *)(v86 + 16) == *(_QWORD *)(v88 + 16) && *(_QWORD *)(v86 + 24) == *(_QWORD *)(v88 + 24)
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        && *(_DWORD *)(v86 + 32) == *(_DWORD *)(v88 + 32))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v91 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v88, type metadata accessor for PgQuery_RoleSpec);
        outlined destroy of PgQuery_Alias(v86, type metadata accessor for PgQuery_RoleSpec);
        outlined destroy of (key: String, value: StorableValue)(v78, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
        outlined destroy of (key: String, value: StorableValue)(v106, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
        if ((v91 & 1) != 0)
          goto LABEL_22;
        goto LABEL_33;
      }
      outlined destroy of PgQuery_Alias(v88, type metadata accessor for PgQuery_RoleSpec);
      v87 = &demangling cache variable for type metadata for PgQuery_RoleSpec?;
    }
    outlined destroy of PgQuery_Alias(v86, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_45;
  }
  if (v80(v77, 1, v79) != 1)
  {
    v87 = &demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?);
LABEL_45:
    outlined destroy of (key: String, value: StorableValue)(v78, v87);
    outlined destroy of (key: String, value: StorableValue)(v106, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    goto LABEL_33;
  }
  outlined destroy of (key: String, value: StorableValue)(v76, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of (key: String, value: StorableValue)(v106, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
LABEL_22:
  swift_release();
  swift_release();
  v41 = v94;
  v9 = v95;
  v7 = v52;
  v36 = v93;
  v4 = v96;
LABEL_23:
  v81 = v113;
  v82 = *(void (**)(char *, uint64_t, uint64_t))(v113 + 16);
  v83 = v41;
  v82(v9, v36, v4);
  v82(v7, v83, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v84 = dispatch thunk of static Equatable.== infix(_:_:)();
  v85 = *(void (**)(char *, uint64_t))(v81 + 8);
  v85(v7, v4);
  v85(v9, v4);
  return v84 & 1;
}

uint64_t specialized static PgQuery_RowMarkClause.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t RowMarkClause;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  void (*v18)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - v9;
  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    goto LABEL_9;
  v11 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(a2 + 16) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)(a1 + 8) != v11)
    goto LABEL_9;
  v12 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(a2 + 32) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)(a1 + 24) == v12 && *(unsigned __int8 *)(a1 + 33) == *(unsigned __int8 *)(a2 + 33))
  {
    RowMarkClause = type metadata accessor for PgQuery_RowMarkClause(0);
    v16 = a1 + *(int *)(RowMarkClause + 32);
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v17(v10, v16, v4);
    v17(v8, a2 + *(int *)(RowMarkClause + 32), v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v10, v4);
  }
  else
  {
LABEL_9:
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static PgQuery_TableSampleClause.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t TableSampleClause;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  int v34;
  uint64_t v35;
  int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  char v43;
  char *v44;
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  char v47;
  void (*v48)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v50 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v12 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v55 = (uint64_t)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v18 = MEMORY[0x1E0C80A78](v17);
  v56 = (uint64_t)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v57 = (uint64_t)&v50 - v20;
  TableSampleClause = type metadata accessor for PgQuery_TableSampleClause(0);
  v22 = a1;
  v23 = a2;
  v24 = *(int *)(TableSampleClause + 20);
  v25 = *(_QWORD *)(a1 + v24);
  v26 = *(_QWORD *)(v23 + v24);
  if (v25 == v26)
    goto LABEL_14;
  if (*(_DWORD *)(v25 + 16) != *(_DWORD *)(v26 + 16))
  {
LABEL_19:
    v47 = 0;
    return v47 & 1;
  }
  v50 = v22;
  v51 = v23;
  v52 = v10;
  v53 = v5;
  v54 = v8;
  v27 = *(_QWORD *)(v25 + 24);
  v28 = *(_QWORD *)(v26 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v29 = specialized static Array<A>.== infix(_:_:)(v27, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v29 & 1) == 0)
  {
LABEL_18:
    swift_release();
    swift_release();
    goto LABEL_19;
  }
  v30 = v25
      + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_TableSampleClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__repeatable;
  v31 = v57;
  outlined init with copy of PgQuery_Alias?(v26+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_TableSampleClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__repeatable, v57, &demangling cache variable for type metadata for PgQuery_Node?);
  v32 = (uint64_t)&v16[*(int *)(v14 + 48)];
  outlined init with copy of PgQuery_Alias?(v30, (uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v31, v32, &demangling cache variable for type metadata for PgQuery_Node?);
  v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v33((uint64_t)v16, 1, Node) != 1)
  {
    v35 = v56;
    outlined init with copy of PgQuery_Alias?((uint64_t)v16, v56, &demangling cache variable for type metadata for PgQuery_Node?);
    v36 = v33(v32, 1, Node);
    v8 = v54;
    if (v36 == 1)
    {
      v37 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v38 = v55;
      outlined init with take of PgQuery_OidList(v32, v55, type metadata accessor for PgQuery_Node);
      v39 = *(int *)(Node + 20);
      v40 = *(_QWORD *)(v35 + v39);
      v41 = *(_QWORD *)(v38 + v39);
      if (v40 == v41
        || (swift_retain(),
            swift_retain(),
            v42 = closure #1 in static PgQuery_Node.== infix(_:_:)(v40, v41),
            swift_release(),
            swift_release(),
            v42))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v43 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v38, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v57, &demangling cache variable for type metadata for PgQuery_Node?);
        v5 = v53;
        if ((v43 & 1) != 0)
          goto LABEL_13;
        goto LABEL_18;
      }
      outlined destroy of PgQuery_Alias(v38, type metadata accessor for PgQuery_Node);
      v37 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
    goto LABEL_17;
  }
  v34 = v33(v32, 1, Node);
  v5 = v53;
  v8 = v54;
  if (v34 != 1)
  {
    v37 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_17:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v16, v37);
    outlined destroy of (key: String, value: StorableValue)(v57, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_18;
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v57, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_13:
  swift_release();
  swift_release();
  v23 = v51;
  v10 = v52;
  v22 = v50;
LABEL_14:
  v44 = v10;
  v45 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v46 = v23;
  v45(v44, v22, v4);
  v45(v8, v46, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v47 = dispatch thunk of static Equatable.== infix(_:_:)();
  v48 = *(void (**)(char *, uint64_t))(v5 + 8);
  v48(v8, v4);
  v48(v44, v4);
  return v47 & 1;
}

uint64_t specialized static PgQuery_RangeFunction.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Alias;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t RangeFunction;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, unsigned __int8 *, uint64_t);
  char *v35;
  unsigned __int8 *v36;
  char *v37;
  char v38;
  void (*v39)(char *, uint64_t);
  uint64_t *v40;
  uint64_t v41;
  char v42;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;

  v4 = type metadata accessor for UnknownStorage();
  v48 = *(_QWORD *)(v4 - 8);
  v49 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v47 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v46 = (char *)&v44 - v7;
  Alias = type metadata accessor for PgQuery_Alias(0);
  v9 = *(_QWORD *)(Alias - 8);
  MEMORY[0x1E0C80A78](Alias);
  v11 = (uint64_t *)((char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?));
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (uint64_t *)((char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v44 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v44 - v22;
  if (*a1 != *a2
    || a1[1] != a2[1]
    || a1[2] != a2[2]
    || (specialized static Array<A>.== infix(_:_:)(*((_QWORD *)a1 + 1), *((_QWORD *)a2 + 1)) & 1) == 0)
  {
    goto LABEL_21;
  }
  RangeFunction = type metadata accessor for PgQuery_RangeFunction(0);
  v45 = v14;
  v25 = RangeFunction;
  outlined init with copy of PgQuery_Alias?((uint64_t)&a1[*(int *)(RangeFunction + 40)], (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Alias?);
  v44 = v25;
  v26 = *(int *)(v25 + 40);
  v27 = (uint64_t)v45;
  outlined init with copy of PgQuery_Alias?((uint64_t)&a2[v26], (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_Alias?);
  v28 = v27 + *(int *)(v12 + 48);
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v27, &demangling cache variable for type metadata for PgQuery_Alias?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, v28, &demangling cache variable for type metadata for PgQuery_Alias?);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29(v27, 1, Alias) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_Alias?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Alias?);
    if (v29(v28, 1, Alias) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v27, &demangling cache variable for type metadata for PgQuery_Alias?);
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  outlined init with copy of PgQuery_Alias?(v27, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Alias?);
  if (v29(v28, 1, Alias) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_Alias?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Alias?);
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_Alias);
LABEL_12:
    v40 = &demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?);
    v41 = v27;
LABEL_20:
    outlined destroy of (key: String, value: StorableValue)(v41, v40);
    goto LABEL_21;
  }
  outlined init with take of PgQuery_OidList(v28, (uint64_t)v11, type metadata accessor for PgQuery_Alias);
  if ((*v18 != *v11 || v18[1] != v11[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(v18[2], v11[2]) & 1) == 0)
  {
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Alias);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_Alias?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Alias?);
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_Alias);
    v41 = v27;
    v40 = &demangling cache variable for type metadata for PgQuery_Alias?;
    goto LABEL_20;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v42 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Alias);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_Alias?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Alias?);
  outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_Alias);
  outlined destroy of (key: String, value: StorableValue)(v27, &demangling cache variable for type metadata for PgQuery_Alias?);
  if ((v42 & 1) == 0)
    goto LABEL_21;
LABEL_8:
  if ((specialized static Array<A>.== infix(_:_:)(*((_QWORD *)a1 + 2), *((_QWORD *)a2 + 2)) & 1) == 0)
  {
LABEL_21:
    v38 = 0;
    return v38 & 1;
  }
  v30 = v44;
  v31 = &a1[*(int *)(v44 + 36)];
  v33 = v48;
  v32 = v49;
  v34 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v48 + 16);
  v35 = v46;
  v34(v46, v31, v49);
  v36 = &a2[*(int *)(v30 + 36)];
  v37 = v47;
  v34(v47, v36, v32);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v38 = dispatch thunk of static Equatable.== infix(_:_:)();
  v39 = *(void (**)(char *, uint64_t))(v33 + 8);
  v39(v37, v32);
  v39(v35, v32);
  return v38 & 1;
}

uint64_t specialized static PgQuery_PartitionSpec.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  uint64_t PartitionSpec;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  v11 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16)) & 1) != 0
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24))
    {
      PartitionSpec = type metadata accessor for PgQuery_PartitionSpec(0);
      v14 = a1 + *(int *)(PartitionSpec + 28);
      v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v15(v10, v14, v4);
      v15(v8, a2 + *(int *)(PartitionSpec + 28), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
    }
    else
    {
      v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_PartitionElem.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t PartitionElem;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  int v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  int v50;
  int v51;
  void (*v52)(char *, uint64_t, uint64_t);
  char v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v57 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v12 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v62 = (uint64_t)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v18 = MEMORY[0x1E0C80A78](v17);
  v63 = (uint64_t)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v64 = (uint64_t)&v57 - v20;
  PartitionElem = type metadata accessor for PgQuery_PartitionElem(0);
  v22 = a1;
  v23 = *(int *)(PartitionElem + 20);
  v24 = *(_QWORD *)(a1 + v23);
  v25 = *(_QWORD *)(a2 + v23);
  if (v24 == v25)
    goto LABEL_19;
  v57 = a2;
  v58 = v22;
  v59 = v8;
  v60 = v5;
  v26 = *(_QWORD *)(v24 + 16) == *(_QWORD *)(v25 + 16) && *(_QWORD *)(v24 + 24) == *(_QWORD *)(v25 + 24);
  v27 = v24;
  if (v26 || (v28 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v61 = v4;
    v29 = v27
        + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr;
    v30 = v64;
    outlined init with copy of PgQuery_Alias?(v25+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, v64, &demangling cache variable for type metadata for PgQuery_Node?);
    v31 = (uint64_t)&v16[*(int *)(v14 + 48)];
    outlined init with copy of PgQuery_Alias?(v29, (uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined init with copy of PgQuery_Alias?(v30, v31, &demangling cache variable for type metadata for PgQuery_Node?);
    v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    if (v32((uint64_t)v16, 1, Node) == 1)
    {
      v33 = v32(v31, 1, Node);
      swift_retain();
      swift_retain();
      v4 = v61;
      if (v33 == 1)
      {
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v64, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_16:
        v44 = *(_QWORD *)(v27
                        + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation);
        v45 = *(_QWORD *)(v25
                        + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v46 = specialized static Array<A>.== infix(_:_:)(v44, v45);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v46 & 1) != 0)
        {
          v47 = *(_QWORD *)(v27
                          + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opclass);
          v48 = *(_QWORD *)(v25
                          + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opclass);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v49 = specialized static Array<A>.== infix(_:_:)(v47, v48);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v49 & 1) != 0)
          {
            v50 = *(_DWORD *)(v27
                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
            v51 = *(_DWORD *)(v25
                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
            swift_release();
            swift_release();
            v8 = v59;
            v5 = v60;
            a2 = v57;
            v22 = v58;
            if (v50 == v51)
            {
LABEL_19:
              v52 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
              v52(v10, v22, v4);
              v52(v8, a2, v4);
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
              v53 = dispatch thunk of static Equatable.== infix(_:_:)();
              v54 = v5;
              v28 = v53;
              v55 = *(void (**)(char *, uint64_t))(v54 + 8);
              v55(v8, v4);
              v55(v10, v4);
              return v28 & 1;
            }
LABEL_24:
            v28 = 0;
            return v28 & 1;
          }
        }
LABEL_23:
        swift_release();
        swift_release();
        goto LABEL_24;
      }
      v36 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v34 = v63;
      outlined init with copy of PgQuery_Alias?((uint64_t)v16, v63, &demangling cache variable for type metadata for PgQuery_Node?);
      v35 = v32(v31, 1, Node);
      v4 = v61;
      if (v35 == 1)
      {
        swift_retain();
        swift_retain();
        v36 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
      }
      else
      {
        v37 = v62;
        outlined init with take of PgQuery_OidList(v31, v62, type metadata accessor for PgQuery_Node);
        v38 = *(int *)(Node + 20);
        v39 = *(_QWORD *)(v34 + v38);
        v40 = *(_QWORD *)(v37 + v38);
        swift_retain();
        swift_retain();
        if (v39 == v40
          || (swift_retain(),
              swift_retain(),
              v41 = closure #1 in static PgQuery_Node.== infix(_:_:)(v39, v40),
              swift_release(),
              swift_release(),
              v41))
        {
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v42 = v63;
          v43 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of PgQuery_Alias(v37, type metadata accessor for PgQuery_Node);
          outlined destroy of PgQuery_Alias(v42, type metadata accessor for PgQuery_Node);
          outlined destroy of (key: String, value: StorableValue)((uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined destroy of (key: String, value: StorableValue)(v64, &demangling cache variable for type metadata for PgQuery_Node?);
          if ((v43 & 1) == 0)
            goto LABEL_23;
          goto LABEL_16;
        }
        outlined destroy of PgQuery_Alias(v37, type metadata accessor for PgQuery_Node);
        v36 = &demangling cache variable for type metadata for PgQuery_Node?;
        v34 = v63;
      }
      outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
    }
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v16, v36);
    outlined destroy of (key: String, value: StorableValue)(v64, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_23;
  }
  return v28 & 1;
}

uint64_t specialized static PgQuery_LockingClause.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t LockingClause;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *(_QWORD *)a2) & 1) == 0)
    goto LABEL_9;
  v11 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(a2 + 16) == 1)
    __asm { BR              X11 }
  if (a1[1] != v11)
    goto LABEL_9;
  v12 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(a2 + 32) == 1)
    __asm { BR              X11 }
  if (a1[3] == v12)
  {
    LockingClause = type metadata accessor for PgQuery_LockingClause(0);
    v15 = (char *)a1 + *(int *)(LockingClause + 28);
    v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v16(v10, v15, v4);
    v16(v8, (char *)(a2 + *(int *)(LockingClause + 28)), v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v10, v4);
  }
  else
  {
LABEL_9:
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t specialized static PgQuery_GrantRoleStmt.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t RoleSpec;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t GrantRoleStmt;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  char v50;
  void (*v51)(char *, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;

  v64 = a2;
  v3 = type metadata accessor for UnknownStorage();
  v62 = *(_QWORD *)(v3 - 8);
  v63 = v3;
  v4 = MEMORY[0x1E0C80A78](v3);
  v61 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v60 = (char *)&v53 - v6;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v8 = *(_QWORD *)(RoleSpec - 8);
  MEMORY[0x1E0C80A78](RoleSpec);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v53 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v53 - v21;
  v23 = a1;
  v24 = *a1;
  v25 = v64;
  if ((specialized static Array<A>.== infix(_:_:)(v24, *v64) & 1) == 0)
    goto LABEL_33;
  v55 = v17;
  v56 = v11;
  v58 = v20;
  v59 = v22;
  v54 = v10;
  v57 = v13;
  v26 = v63;
  if ((specialized static Array<A>.== infix(_:_:)(v23[1], v25[1]) & 1) == 0)
    goto LABEL_33;
  v27 = v25;
  if (*((unsigned __int8 *)v23 + 16) != *((unsigned __int8 *)v25 + 16)
    || *((unsigned __int8 *)v23 + 17) != *((unsigned __int8 *)v25 + 17))
  {
    goto LABEL_33;
  }
  GrantRoleStmt = type metadata accessor for PgQuery_GrantRoleStmt(0);
  v29 = (uint64_t)v59;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23 + *(int *)(GrantRoleStmt + 40), (uint64_t)v59, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v53 = GrantRoleStmt;
  v30 = (uint64_t)v58;
  outlined init with copy of PgQuery_Alias?((uint64_t)v25 + *(int *)(GrantRoleStmt + 40), (uint64_t)v58, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v31 = (uint64_t)v57;
  v32 = (uint64_t)&v57[*(int *)(v56 + 48)];
  outlined init with copy of PgQuery_Alias?(v29, (uint64_t)v57, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined init with copy of PgQuery_Alias?(v30, v32, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v33(v31, 1, RoleSpec) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v30, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    if (v33(v32, 1, RoleSpec) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v31, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      goto LABEL_8;
    }
    goto LABEL_15;
  }
  v41 = (uint64_t)v55;
  outlined init with copy of PgQuery_Alias?(v31, (uint64_t)v55, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if (v33(v32, 1, RoleSpec) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v58, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v59, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of PgQuery_Alias(v41, type metadata accessor for PgQuery_RoleSpec);
LABEL_15:
    v42 = &demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?);
    v43 = v31;
LABEL_32:
    outlined destroy of (key: String, value: StorableValue)(v43, v42);
    goto LABEL_33;
  }
  v44 = v32;
  v45 = (uint64_t)v54;
  outlined init with take of PgQuery_OidList(v44, (uint64_t)v54, type metadata accessor for PgQuery_RoleSpec);
  v46 = *(_QWORD *)v45;
  if (*(_BYTE *)(v45 + 8) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)v41 != v46
    || (*(_QWORD *)(v41 + 16) != *(_QWORD *)(v45 + 16) || *(_QWORD *)(v41 + 24) != *(_QWORD *)(v45 + 24))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || *(_DWORD *)(v41 + 32) != *(_DWORD *)(v45 + 32))
  {
    outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_RoleSpec);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v58, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v59, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of PgQuery_Alias(v41, type metadata accessor for PgQuery_RoleSpec);
    v43 = v31;
    v42 = &demangling cache variable for type metadata for PgQuery_RoleSpec?;
    goto LABEL_32;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v47 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_RoleSpec);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v58, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v59, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of PgQuery_Alias(v41, type metadata accessor for PgQuery_RoleSpec);
  outlined destroy of (key: String, value: StorableValue)(v31, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if ((v47 & 1) == 0)
    goto LABEL_33;
LABEL_8:
  v34 = v23;
  v35 = v23[3];
  v36 = v27[3];
  if (*((_BYTE *)v27 + 32) != 1)
  {
    v37 = v26;
    v39 = v61;
    v40 = v62;
    v38 = v60;
    if (v35 != v36)
      goto LABEL_33;
    goto LABEL_30;
  }
  v37 = v26;
  v38 = v60;
  v39 = v61;
  if (!v36)
  {
    v40 = v62;
    if (!v35)
      goto LABEL_30;
    goto LABEL_33;
  }
  v40 = v62;
  if (v36 != 1)
  {
    if (v35 == 2)
      goto LABEL_30;
LABEL_33:
    v50 = 0;
    return v50 & 1;
  }
  if (v35 != 1)
    goto LABEL_33;
LABEL_30:
  v48 = v53;
  v49 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
  v49(v38, (char *)v34 + *(int *)(v53 + 36), v37);
  v49(v39, (char *)v27 + *(int *)(v48 + 36), v37);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v50 = dispatch thunk of static Equatable.== infix(_:_:)();
  v51 = *(void (**)(char *, uint64_t))(v40 + 8);
  v51(v39, v37);
  v51(v38, v37);
  return v50 & 1;
}

uint64_t specialized static PgQuery_DropOwnedStmt.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t DropOwnedStmt;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *(_QWORD *)a2) & 1) == 0)
    goto LABEL_10;
  v11 = a1[1];
  v12 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(a2 + 16) != 1)
  {
    if (v11 == v12)
      goto LABEL_8;
LABEL_10:
    v16 = 0;
    return v16 & 1;
  }
  if (!v12)
  {
    if (!v11)
      goto LABEL_8;
    goto LABEL_10;
  }
  if (v12 != 1)
  {
    if (v11 == 2)
      goto LABEL_8;
    goto LABEL_10;
  }
  if (v11 != 1)
    goto LABEL_10;
LABEL_8:
  DropOwnedStmt = type metadata accessor for PgQuery_DropOwnedStmt(0);
  v14 = (char *)a1 + *(int *)(DropOwnedStmt + 24);
  v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v15(v10, v14, v4);
  v15(v8, (char *)(a2 + *(int *)(DropOwnedStmt + 24)), v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v16 = dispatch thunk of static Equatable.== infix(_:_:)();
  v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17(v8, v4);
  v17(v10, v4);
  return v16 & 1;
}

uint64_t specialized static PgQuery_CreateSeqStmt.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t RangeVar;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t SeqStmt;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char v31;
  char v32;
  uint64_t *v33;
  uint64_t *v34;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  char *v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  char *v50;

  v4 = type metadata accessor for UnknownStorage();
  v46 = *(_QWORD *)(v4 - 8);
  v47 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v45 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v44 = (char *)&v43 - v7;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v9 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v50 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v43 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v43 - v21;
  SeqStmt = type metadata accessor for PgQuery_CreateSeqStmt(0);
  v24 = *(int *)(SeqStmt + 36);
  v48 = a1;
  v25 = (uint64_t)a1 + v24;
  v26 = SeqStmt;
  outlined init with copy of PgQuery_Alias?(v25, (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v27 = *(int *)(v26 + 36);
  v49 = a2;
  outlined init with copy of PgQuery_Alias?((uint64_t)a2 + v27, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v28, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, RangeVar) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if (v29(v28, 1, RangeVar) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_8;
    }
  }
  else
  {
    v30 = (uint64_t)v50;
    outlined init with copy of PgQuery_Alias?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if (v29(v28, 1, RangeVar) != 1)
    {
      outlined init with take of PgQuery_OidList(v28, v30, type metadata accessor for PgQuery_RangeVar);
      v32 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v17, v30);
      outlined destroy of PgQuery_Alias(v30, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      if ((v32 & 1) == 0)
      {
LABEL_12:
        v31 = 0;
        return v31 & 1;
      }
LABEL_8:
      v33 = v48;
      v34 = v49;
      if ((specialized static Array<A>.== infix(_:_:)(*v48, *v49) & 1) != 0
        && *((_DWORD *)v33 + 2) == *((_DWORD *)v34 + 2)
        && *((unsigned __int8 *)v33 + 12) == *((unsigned __int8 *)v34 + 12)
        && *((unsigned __int8 *)v33 + 13) == *((unsigned __int8 *)v34 + 13))
      {
        v36 = (char *)v33 + *(int *)(v26 + 32);
        v38 = v46;
        v37 = v47;
        v39 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
        v40 = v44;
        v39(v44, v36, v47);
        v41 = v45;
        v39(v45, (char *)v34 + *(int *)(v26 + 32), v37);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v31 = dispatch thunk of static Equatable.== infix(_:_:)();
        v42 = *(void (**)(char *, uint64_t))(v38 + 8);
        v42(v41, v37);
        v42(v40, v37);
        return v31 & 1;
      }
      goto LABEL_12;
    }
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RangeVar);
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  v31 = 0;
  return v31 & 1;
}

uint64_t specialized static PgQuery_AlterTSDictionaryStmt.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v19 - v11;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(a1[1], a2[1]) & 1) != 0)
  {
    v13 = a3(0);
    v14 = (char *)a1 + *(int *)(v13 + 24);
    v15 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v15(v12, v14, v6);
    v15(v10, (char *)a2 + *(int *)(v13 + 24), v6);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v7 + 8);
    v17(v10, v6);
    v17(v12, v6);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static PgQuery_AlterTableCmd.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t RoleSpec;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t AlterTableCmd;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t);
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int v72;
  int v73;
  BOOL v74;
  void (*v75)(char *, uint64_t, uint64_t);
  char v76;
  char *v77;
  void (*v78)(char *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v80 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v89 = *(_QWORD *)(Node - 8);
  v90 = Node;
  MEMORY[0x1E0C80A78](Node);
  v85 = (uint64_t)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v88);
  v91 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v86 = (uint64_t)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v92 = (uint64_t)&v80 - v17;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v19 = *(_QWORD *)(RoleSpec - 8);
  MEMORY[0x1E0C80A78](RoleSpec);
  v87 = (uint64_t)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?));
  MEMORY[0x1E0C80A78](v21);
  v94 = (uint64_t)&v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v24 = MEMORY[0x1E0C80A78](v23);
  v93 = (uint64_t)&v80 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v95 = (uint64_t)&v80 - v26;
  AlterTableCmd = type metadata accessor for PgQuery_AlterTableCmd(0);
  v28 = a1;
  v29 = *(int *)(AlterTableCmd + 20);
  v30 = *(_QWORD *)(a1 + v29);
  v31 = *(_QWORD *)(a2 + v29);
  if (v30 == v31)
    goto LABEL_51;
  v80 = a2;
  v81 = v28;
  v82 = v5;
  v83 = v8;
  v84 = v4;
  v32 = *(_QWORD *)(v31 + 16);
  v33 = *(unsigned __int8 *)(v31 + 24);
  v34 = destructiveProjectEnumData for StorableValue(*(_QWORD *)(v30 + 16), *(unsigned __int8 *)(v30 + 24));
  if (v34 != destructiveProjectEnumData for StorableValue(v32, v33))
    goto LABEL_50;
  if (*(_QWORD *)(v30 + 32) == *(_QWORD *)(v31 + 32) && *(_QWORD *)(v30 + 40) == *(_QWORD *)(v31 + 40)
    || (v35 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(_DWORD *)(v30 + 48) == *(_DWORD *)(v31 + 48))
    {
      v36 = v30
          + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newowner;
      v37 = v95;
      outlined init with copy of PgQuery_Alias?(v31+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newowner, v95, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      v38 = *(int *)(v21 + 48);
      v39 = v94;
      v40 = v94 + v38;
      outlined init with copy of PgQuery_Alias?(v36, v94, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      outlined init with copy of PgQuery_Alias?(v37, v40, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
      if (v41(v39, 1, RoleSpec) == 1)
      {
        v42 = v41(v40, 1, RoleSpec);
        swift_retain();
        swift_retain();
        if (v42 == 1)
        {
          outlined destroy of (key: String, value: StorableValue)(v39, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
          outlined destroy of (key: String, value: StorableValue)(v95, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
          v8 = v83;
          v4 = v84;
          v43 = (uint64_t)v91;
LABEL_10:
          v44 = v30
              + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__def;
          v45 = v92;
          outlined init with copy of PgQuery_Alias?(v31+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__def, v92, &demangling cache variable for type metadata for PgQuery_Node?);
          v46 = v43 + *(int *)(v88 + 48);
          outlined init with copy of PgQuery_Alias?(v44, v43, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined init with copy of PgQuery_Alias?(v45, v46, &demangling cache variable for type metadata for PgQuery_Node?);
          v47 = v90;
          v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48);
          if (v48(v43, 1, v90) == 1)
          {
            if (v48(v46, 1, v47) == 1)
            {
              outlined destroy of (key: String, value: StorableValue)(v43, &demangling cache variable for type metadata for PgQuery_Node?);
              outlined destroy of (key: String, value: StorableValue)(v92, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_31:
              v68 = *(_QWORD *)(v30
                              + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior);
              v69 = *(_QWORD *)(v31
                              + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior);
              if (*(_BYTE *)(v31
                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior
                            + 8) == 1)
              {
                if (v69)
                {
                  if (v69 == 1)
                  {
                    if (v68 == 1)
                      goto LABEL_49;
                  }
                  else if (v68 == 2)
                  {
                    goto LABEL_49;
                  }
                  goto LABEL_42;
                }
                if (!v68)
                {
LABEL_49:
                  v72 = *(unsigned __int8 *)(v30
                                           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk);
                  v73 = *(unsigned __int8 *)(v31
                                           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk);
                  swift_release();
                  swift_release();
                  v74 = v72 == v73;
                  v28 = v81;
                  v5 = v82;
                  a2 = v80;
                  if (!v74)
                    goto LABEL_50;
LABEL_51:
                  v75 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
                  v75(v10, v28, v4);
                  v75(v8, a2, v4);
                  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
                  v76 = dispatch thunk of static Equatable.== infix(_:_:)();
                  v77 = v8;
                  v35 = v76;
                  v78 = *(void (**)(char *, uint64_t))(v5 + 8);
                  v78(v77, v4);
                  v78(v10, v4);
                  return v35 & 1;
                }
              }
              else if (v68 == v69)
              {
                goto LABEL_49;
              }
LABEL_42:
              swift_release();
              swift_release();
              v35 = 0;
              return v35 & 1;
            }
            v55 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
          }
          else
          {
            v54 = v86;
            outlined init with copy of PgQuery_Alias?(v43, v86, &demangling cache variable for type metadata for PgQuery_Node?);
            if (v48(v46, 1, v47) == 1)
            {
              v55 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
            }
            else
            {
              v59 = v46;
              v60 = v47;
              v61 = v85;
              outlined init with take of PgQuery_OidList(v59, v85, type metadata accessor for PgQuery_Node);
              v62 = *(int *)(v60 + 20);
              v63 = *(_QWORD *)(v54 + v62);
              v64 = *(_QWORD *)(v61 + v62);
              if (v63 == v64
                || (swift_retain(),
                    swift_retain(),
                    v65 = closure #1 in static PgQuery_Node.== infix(_:_:)(v63, v64),
                    swift_release(),
                    swift_release(),
                    v65))
              {
                lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
                v66 = v86;
                v67 = dispatch thunk of static Equatable.== infix(_:_:)();
                outlined destroy of PgQuery_Alias(v61, type metadata accessor for PgQuery_Node);
                outlined destroy of PgQuery_Alias(v66, type metadata accessor for PgQuery_Node);
                outlined destroy of (key: String, value: StorableValue)(v43, &demangling cache variable for type metadata for PgQuery_Node?);
                outlined destroy of (key: String, value: StorableValue)(v92, &demangling cache variable for type metadata for PgQuery_Node?);
                if ((v67 & 1) == 0)
                  goto LABEL_42;
                goto LABEL_31;
              }
              outlined destroy of PgQuery_Alias(v61, type metadata accessor for PgQuery_Node);
              v55 = &demangling cache variable for type metadata for PgQuery_Node?;
              v54 = v86;
            }
            outlined destroy of PgQuery_Alias(v54, type metadata accessor for PgQuery_Node);
          }
          outlined destroy of (key: String, value: StorableValue)(v43, v55);
          v70 = &demangling cache variable for type metadata for PgQuery_Node?;
          v71 = v92;
LABEL_41:
          outlined destroy of (key: String, value: StorableValue)(v71, v70);
          goto LABEL_42;
        }
        v50 = &demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?);
      }
      else
      {
        v49 = (uint64_t *)v93;
        outlined init with copy of PgQuery_Alias?(v39, v93, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
        if (v41(v40, 1, RoleSpec) == 1)
        {
          swift_retain();
          swift_retain();
          v50 = &demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?);
        }
        else
        {
          v51 = v87;
          outlined init with take of PgQuery_OidList(v40, v87, type metadata accessor for PgQuery_RoleSpec);
          v52 = *v49;
          v53 = *(_QWORD *)v51;
          if (*(_BYTE *)(v51 + 8) == 1)
            __asm { BR              X11 }
          v8 = v83;
          v4 = v84;
          v43 = (uint64_t)v91;
          if (v52 == v53
            && (*(_QWORD *)(v93 + 16) == *(_QWORD *)(v51 + 16) && *(_QWORD *)(v93 + 24) == *(_QWORD *)(v51 + 24)
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            && *(_DWORD *)(v93 + 32) == *(_DWORD *)(v51 + 32))
          {
            v56 = *(int *)(RoleSpec + 28);
            v57 = v93;
            v91 = (char *)(v93 + v56);
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
            swift_retain();
            swift_retain();
            v58 = dispatch thunk of static Equatable.== infix(_:_:)();
            outlined destroy of PgQuery_Alias(v51, type metadata accessor for PgQuery_RoleSpec);
            outlined destroy of PgQuery_Alias(v57, type metadata accessor for PgQuery_RoleSpec);
            outlined destroy of (key: String, value: StorableValue)(v94, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
            outlined destroy of (key: String, value: StorableValue)(v95, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
            if ((v58 & 1) == 0)
              goto LABEL_42;
            goto LABEL_10;
          }
          swift_retain();
          swift_retain();
          outlined destroy of PgQuery_Alias(v51, type metadata accessor for PgQuery_RoleSpec);
          v50 = &demangling cache variable for type metadata for PgQuery_RoleSpec?;
          v49 = (uint64_t *)v93;
          v39 = v94;
        }
        outlined destroy of PgQuery_Alias((uint64_t)v49, type metadata accessor for PgQuery_RoleSpec);
      }
      outlined destroy of (key: String, value: StorableValue)(v39, v50);
      v70 = &demangling cache variable for type metadata for PgQuery_RoleSpec?;
      v71 = v95;
      goto LABEL_41;
    }
LABEL_50:
    v35 = 0;
  }
  return v35 & 1;
}

uint64_t specialized static PgQuery_AlterRoleStmt.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t RoleSpec;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t AlterRoleStmt;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t *v26;
  uint64_t *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  char *v33;
  char v34;
  void (*v35)(char *, uint64_t);
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;

  v49 = a2;
  v3 = type metadata accessor for UnknownStorage();
  v45 = *(_QWORD *)(v3 - 8);
  v46 = v3;
  v4 = MEMORY[0x1E0C80A78](v3);
  v44 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v43 = (char *)&v42 - v6;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  v8 = *(_QWORD *)(RoleSpec - 8);
  MEMORY[0x1E0C80A78](RoleSpec);
  v47 = (uint64_t)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?));
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v42 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v42 - v20;
  AlterRoleStmt = type metadata accessor for PgQuery_AlterRoleStmt(0);
  v23 = *(int *)(AlterRoleStmt + 28);
  v48 = a1;
  outlined init with copy of PgQuery_Alias?((uint64_t)a1 + v23, (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v49 + *(int *)(AlterRoleStmt + 28), (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v24 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v19, v24, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v25((uint64_t)v12, 1, RoleSpec) != 1)
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    if (v25(v24, 1, RoleSpec) != 1)
    {
      v38 = v47;
      outlined init with take of PgQuery_OidList(v24, v47, type metadata accessor for PgQuery_RoleSpec);
      v39 = *(_QWORD *)v38;
      if (*(_BYTE *)(v38 + 8) == 1)
        __asm { BR              X11 }
      if (*(_QWORD *)v16 == v39
        && (*((_QWORD *)v16 + 2) == *(_QWORD *)(v38 + 16) && *((_QWORD *)v16 + 3) == *(_QWORD *)(v38 + 24)
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        && *((_DWORD *)v16 + 8) == *(_DWORD *)(v38 + 32))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v40 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v38, type metadata accessor for PgQuery_RoleSpec);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
        outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_RoleSpec);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
        if ((v40 & 1) != 0)
          goto LABEL_4;
LABEL_21:
        v34 = 0;
        return v34 & 1;
      }
      outlined destroy of PgQuery_Alias(v38, type metadata accessor for PgQuery_RoleSpec);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_RoleSpec);
      v37 = (uint64_t)v12;
      v36 = &demangling cache variable for type metadata for PgQuery_RoleSpec?;
LABEL_20:
      outlined destroy of (key: String, value: StorableValue)(v37, v36);
      goto LABEL_21;
    }
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_RoleSpec);
LABEL_9:
    v36 = &demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?);
    v37 = (uint64_t)v12;
    goto LABEL_20;
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if (v25(v24, 1, RoleSpec) != 1)
    goto LABEL_9;
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
LABEL_4:
  v26 = v48;
  v27 = v49;
  if ((specialized static Array<A>.== infix(_:_:)(*v48, *v49) & 1) == 0 || *((_DWORD *)v26 + 2) != *((_DWORD *)v27 + 2))
    goto LABEL_21;
  v28 = (char *)v26 + *(int *)(AlterRoleStmt + 24);
  v30 = v45;
  v29 = v46;
  v31 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
  v32 = v43;
  v31(v43, v28, v46);
  v33 = v44;
  v31(v44, (char *)v27 + *(int *)(AlterRoleStmt + 24), v29);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  v35 = *(void (**)(char *, uint64_t))(v30 + 8);
  v35(v33, v29);
  v35(v32, v29);
  return v34 & 1;
}

uint64_t specialized static PgQuery_AlterEnumStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  uint64_t AlterEnumStmt;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & 1) == 0)
  {
LABEL_15:
    v12 = 0;
    return v12 & 1;
  }
  v11 = *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8) && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24) && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32)
      || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40) && *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48)
        || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if (*(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56)
          && *(unsigned __int8 *)(a1 + 57) == *(unsigned __int8 *)(a2 + 57))
        {
          AlterEnumStmt = type metadata accessor for PgQuery_AlterEnumStmt(0);
          v15 = a1 + *(int *)(AlterEnumStmt + 40);
          v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
          v16(v10, v15, v4);
          v16(v8, a2 + *(int *)(AlterEnumStmt + 40), v4);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v12 = dispatch thunk of static Equatable.== infix(_:_:)();
          v17 = *(void (**)(char *, uint64_t))(v5 + 8);
          v17(v8, v4);
          v17(v10, v4);
          return v12 & 1;
        }
        goto LABEL_15;
      }
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_XmlSerialize.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t TypeName;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t Node;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t);
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  void (*v62)(char *, uint64_t, uint64_t);
  char v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  int v66;
  uint64_t *v67;
  uint64_t v68;
  char v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v73 - v9;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v83 = *(_QWORD *)(TypeName - 8);
  v84 = TypeName;
  MEMORY[0x1E0C80A78](TypeName);
  v79 = (uint64_t)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
  MEMORY[0x1E0C80A78](v82);
  v86 = (uint64_t)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v80 = (uint64_t)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v85 = (uint64_t)&v73 - v17;
  Node = type metadata accessor for PgQuery_Node(0);
  v19 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v81 = (uint64_t)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v21);
  v88 = (uint64_t)&v73 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v24 = MEMORY[0x1E0C80A78](v23);
  v87 = (uint64_t)&v73 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v73 - v26;
  v28 = *(int *)(type metadata accessor for PgQuery_XmlSerialize(0) + 20);
  v29 = *(_QWORD *)(a1 + v28);
  v30 = *(_QWORD *)(a2 + v28);
  if (v29 == v30)
    goto LABEL_25;
  v77 = v8;
  v78 = v10;
  v31 = *(_QWORD *)(v29 + 16);
  v32 = *(_QWORD *)(v30 + 16);
  if (*(_BYTE *)(v30 + 24) != 1)
  {
    if (v31 != v32)
      goto LABEL_47;
    goto LABEL_12;
  }
  if (!v32)
  {
    if (!v31)
      goto LABEL_12;
LABEL_47:
    v63 = 0;
    return v63 & 1;
  }
  if (v32 != 1)
  {
    if (v31 == 2)
      goto LABEL_12;
    goto LABEL_47;
  }
  if (v31 != 1)
    goto LABEL_47;
LABEL_12:
  v73 = a1;
  v74 = a2;
  v75 = v4;
  v76 = v5;
  v33 = v29
      + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr;
  v34 = v30;
  v35 = v29;
  v36 = (uint64_t)v27;
  outlined init with copy of PgQuery_Alias?(v30+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, (uint64_t)v27, &demangling cache variable for type metadata for PgQuery_Node?);
  v37 = v88;
  v38 = v88 + *(int *)(v21 + 48);
  outlined init with copy of PgQuery_Alias?(v33, v88, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v27, v38, &demangling cache variable for type metadata for PgQuery_Node?);
  v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  if (v39(v37, 1, Node) == 1)
  {
    v40 = v39(v38, 1, Node);
    swift_retain();
    v41 = v34;
    swift_retain();
    v42 = v35;
    if (v40 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v37, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v27, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_21;
    }
    v45 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_44:
    outlined destroy of (key: String, value: StorableValue)(v37, v45);
    v70 = &demangling cache variable for type metadata for PgQuery_Node?;
    v71 = v36;
    goto LABEL_45;
  }
  v41 = v34;
  v43 = v35;
  v44 = v87;
  outlined init with copy of PgQuery_Alias?(v37, v87, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v39(v38, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    v45 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_43:
    outlined destroy of PgQuery_Alias(v44, type metadata accessor for PgQuery_Node);
    goto LABEL_44;
  }
  v46 = v81;
  outlined init with take of PgQuery_OidList(v38, v81, type metadata accessor for PgQuery_Node);
  v47 = *(int *)(Node + 20);
  v48 = *(_QWORD *)(v44 + v47);
  v49 = *(_QWORD *)(v46 + v47);
  swift_retain();
  swift_retain();
  if (v48 != v49)
  {
    swift_retain();
    swift_retain();
    v50 = closure #1 in static PgQuery_Node.== infix(_:_:)(v48, v49);
    swift_release();
    swift_release();
    if (!v50)
    {
      outlined destroy of PgQuery_Alias(v46, type metadata accessor for PgQuery_Node);
      v45 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_43;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v51 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v46, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v44, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v37, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v36, &demangling cache variable for type metadata for PgQuery_Node?);
  v42 = v43;
  if ((v51 & 1) == 0)
  {
LABEL_46:
    swift_release();
    swift_release();
    goto LABEL_47;
  }
LABEL_21:
  v52 = v42
      + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName;
  v53 = v85;
  outlined init with copy of PgQuery_Alias?(v41+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, v85, &demangling cache variable for type metadata for PgQuery_TypeName?);
  v54 = v86;
  v55 = v86 + *(int *)(v82 + 48);
  outlined init with copy of PgQuery_Alias?(v52, v86, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined init with copy of PgQuery_Alias?(v53, v55, &demangling cache variable for type metadata for PgQuery_TypeName?);
  v56 = v84;
  v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 48);
  if (v57(v54, 1, v84) == 1)
  {
    v58 = v57(v55, 1, v56);
    v59 = v76;
    if (v58 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v54, &demangling cache variable for type metadata for PgQuery_TypeName?);
      outlined destroy of (key: String, value: StorableValue)(v53, &demangling cache variable for type metadata for PgQuery_TypeName?);
      goto LABEL_24;
    }
    v67 = &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?);
    goto LABEL_41;
  }
  v65 = v80;
  outlined init with copy of PgQuery_Alias?(v54, v80, &demangling cache variable for type metadata for PgQuery_TypeName?);
  v66 = v57(v55, 1, v56);
  v59 = v76;
  if (v66 == 1)
  {
    v67 = &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?);
LABEL_40:
    outlined destroy of PgQuery_Alias(v65, type metadata accessor for PgQuery_TypeName);
LABEL_41:
    outlined destroy of (key: String, value: StorableValue)(v54, v67);
    v70 = &demangling cache variable for type metadata for PgQuery_TypeName?;
    v71 = v53;
LABEL_45:
    outlined destroy of (key: String, value: StorableValue)(v71, v70);
    goto LABEL_46;
  }
  v68 = v79;
  outlined init with take of PgQuery_OidList(v55, v79, type metadata accessor for PgQuery_TypeName);
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)v65, *(_QWORD *)v68) & 1) == 0
    || *(_DWORD *)(v65 + 8) != *(_DWORD *)(v68 + 8)
    || *(unsigned __int8 *)(v65 + 12) != *(unsigned __int8 *)(v68 + 12)
    || *(unsigned __int8 *)(v65 + 13) != *(unsigned __int8 *)(v68 + 13)
    || (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v65 + 16), *(_QWORD *)(v68 + 16)) & 1) == 0
    || *(_DWORD *)(v65 + 24) != *(_DWORD *)(v68 + 24)
    || (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v65 + 32), *(_QWORD *)(v68 + 32)) & 1) == 0
    || *(_DWORD *)(v65 + 40) != *(_DWORD *)(v68 + 40))
  {
    outlined destroy of PgQuery_Alias(v68, type metadata accessor for PgQuery_TypeName);
    v67 = &demangling cache variable for type metadata for PgQuery_TypeName?;
    goto LABEL_40;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v69 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v68, type metadata accessor for PgQuery_TypeName);
  outlined destroy of PgQuery_Alias(v65, type metadata accessor for PgQuery_TypeName);
  outlined destroy of (key: String, value: StorableValue)(v54, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined destroy of (key: String, value: StorableValue)(v53, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((v69 & 1) == 0)
    goto LABEL_46;
LABEL_24:
  v60 = *(_DWORD *)(v42
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  v61 = *(_DWORD *)(v41
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  v8 = v77;
  v10 = v78;
  a1 = v73;
  a2 = v74;
  v4 = v75;
  v5 = v59;
  if (v60 != v61)
    goto LABEL_47;
LABEL_25:
  v62 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v62(v10, a1, v4);
  v62(v8, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v63 = dispatch thunk of static Equatable.== infix(_:_:)();
  v64 = *(void (**)(char *, uint64_t))(v5 + 8);
  v64(v8, v4);
  v64(v10, v4);
  return v63 & 1;
}

uint64_t specialized static PgQuery_WindowClause.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t WindowClause;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  unsigned int (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  char v69;
  int v70;
  int v71;
  void (*v72)(char *, uint64_t, uint64_t);
  char *v73;
  void (*v74)(char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  unsigned int (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t Node;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v77 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v11 = *(_QWORD *)(Node - 8);
  v12 = MEMORY[0x1E0C80A78](Node);
  v85 = (uint64_t)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v86 = (uint64_t)&v77 - v14;
  v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v15 = MEMORY[0x1E0C80A78](v91);
  v89 = (uint64_t)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v90 = (uint64_t)&v77 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v19 = MEMORY[0x1E0C80A78](v18);
  v87 = (uint64_t)&v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v88 = (char *)&v77 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v77 - v24;
  MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v77 - v26;
  WindowClause = type metadata accessor for PgQuery_WindowClause(0);
  v29 = a1;
  v30 = *(int *)(WindowClause + 20);
  v31 = *(_QWORD *)(a1 + v30);
  v32 = *(_QWORD *)(a2 + v30);
  if (v31 == v32)
    goto LABEL_41;
  v83 = a2;
  v84 = v29;
  v33 = *(_QWORD *)(v31 + 16) == *(_QWORD *)(v32 + 16) && *(_QWORD *)(v31 + 24) == *(_QWORD *)(v32 + 24);
  if (!v33 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    swift_retain();
    swift_retain();
    goto LABEL_17;
  }
  v82 = v10;
  if (*(_QWORD *)(v31 + 32) == *(_QWORD *)(v32 + 32) && *(_QWORD *)(v31 + 40) == *(_QWORD *)(v32 + 40)
    || (v34 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v80 = v8;
    v81 = v5;
    v35 = *(_QWORD *)(v31 + 48);
    v36 = *(_QWORD *)(v32 + 48);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v37 = specialized static Array<A>.== infix(_:_:)(v35, v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v37 & 1) == 0)
      goto LABEL_17;
    v38 = *(_QWORD *)(v31 + 56);
    v39 = *(_QWORD *)(v32 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v40 = specialized static Array<A>.== infix(_:_:)(v38, v39);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v40 & 1) == 0 || *(_DWORD *)(v31 + 64) != *(_DWORD *)(v32 + 64))
      goto LABEL_17;
    v41 = v31
        + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startOffset;
    outlined init with copy of PgQuery_Alias?(v32+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startOffset, (uint64_t)v27, &demangling cache variable for type metadata for PgQuery_Node?);
    v42 = v90;
    v43 = v90 + *(int *)(v91 + 48);
    outlined init with copy of PgQuery_Alias?(v41, v90, &demangling cache variable for type metadata for PgQuery_Node?);
    v79 = v43;
    outlined init with copy of PgQuery_Alias?((uint64_t)v27, v43, &demangling cache variable for type metadata for PgQuery_Node?);
    v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
    v45 = v42;
    v46 = v44;
    v47 = Node;
    if (v44(v45, 1, Node) == 1)
    {
      if (v46(v79, 1, v47) == 1)
      {
        outlined destroy of (key: String, value: StorableValue)(v45, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v27, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_24:
        v57 = v31
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__endOffset;
        v27 = v88;
        outlined init with copy of PgQuery_Alias?(v32+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__endOffset, (uint64_t)v88, &demangling cache variable for type metadata for PgQuery_Node?);
        v58 = v89;
        v59 = v89 + *(int *)(v91 + 48);
        outlined init with copy of PgQuery_Alias?(v57, v89, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined init with copy of PgQuery_Alias?((uint64_t)v27, v59, &demangling cache variable for type metadata for PgQuery_Node?);
        v60 = Node;
        if (v46(v58, 1, Node) == 1)
        {
          if (v46(v59, 1, v60) == 1)
          {
            outlined destroy of (key: String, value: StorableValue)(v58, &demangling cache variable for type metadata for PgQuery_Node?);
            outlined destroy of (key: String, value: StorableValue)((uint64_t)v27, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_33:
            if (*(_DWORD *)(v31
                           + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startInRangeFunc) == *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startInRangeFunc)
              && *(_DWORD *)(v31
                           + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__endInRangeFunc) == *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__endInRangeFunc)
              && *(_DWORD *)(v31
                           + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inRangeColl) == *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inRangeColl)
              && *(unsigned __int8 *)(v31
                                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inRangeAsc) == *(unsigned __int8 *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inRangeAsc)
              && *(unsigned __int8 *)(v31
                                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inRangeNullsFirst) == *(unsigned __int8 *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inRangeNullsFirst)
              && *(_DWORD *)(v31
                           + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winref) == *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winref))
            {
              v70 = *(unsigned __int8 *)(v31
                                       + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__copiedOrder);
              v71 = *(unsigned __int8 *)(v32
                                       + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__copiedOrder);
              swift_release();
              swift_release();
              v33 = v70 == v71;
              v8 = v80;
              v5 = v81;
              v10 = v82;
              a2 = v83;
              v29 = v84;
              if (!v33)
              {
                v34 = 0;
                return v34 & 1;
              }
LABEL_41:
              v72 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
              v72(v10, v29, v4);
              v72(v8, a2, v4);
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
              v73 = v10;
              v34 = dispatch thunk of static Equatable.== infix(_:_:)();
              v74 = *(void (**)(char *, uint64_t))(v5 + 8);
              v74(v8, v4);
              v74(v73, v4);
              return v34 & 1;
            }
            goto LABEL_17;
          }
          v62 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
          goto LABEL_46;
        }
        v61 = v87;
        outlined init with copy of PgQuery_Alias?(v58, v87, &demangling cache variable for type metadata for PgQuery_Node?);
        if (v46(v59, 1, v60) == 1)
        {
          v62 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_45:
          outlined destroy of PgQuery_Alias(v61, type metadata accessor for PgQuery_Node);
LABEL_46:
          v50 = v58;
          v49 = v62;
          goto LABEL_47;
        }
        v63 = v85;
        outlined init with take of PgQuery_OidList(v59, v85, type metadata accessor for PgQuery_Node);
        v64 = *(int *)(v60 + 20);
        v65 = *(_QWORD *)(v61 + v64);
        v66 = *(_QWORD *)(v63 + v64);
        if (v65 != v66)
        {
          swift_retain();
          swift_retain();
          v67 = closure #1 in static PgQuery_Node.== infix(_:_:)(v65, v66);
          swift_release();
          swift_release();
          if (!v67)
          {
            outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
            v62 = &demangling cache variable for type metadata for PgQuery_Node?;
            v61 = v87;
            goto LABEL_45;
          }
        }
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v68 = v87;
        v69 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v68, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)(v58, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v27, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v69 & 1) != 0)
          goto LABEL_33;
LABEL_17:
        swift_release();
        swift_release();
        v34 = 0;
        return v34 & 1;
      }
    }
    else
    {
      outlined init with copy of PgQuery_Alias?(v45, (uint64_t)v25, &demangling cache variable for type metadata for PgQuery_Node?);
      v48 = v79;
      if (v46(v79, 1, v47) != 1)
      {
        v78 = v46;
        v51 = v86;
        outlined init with take of PgQuery_OidList(v48, v86, type metadata accessor for PgQuery_Node);
        v52 = *(int *)(v47 + 20);
        v53 = *(_QWORD *)&v25[v52];
        v54 = *(_QWORD *)(v51 + v52);
        if (v53 != v54)
        {
          swift_retain();
          swift_retain();
          v55 = closure #1 in static PgQuery_Node.== infix(_:_:)(v53, v54);
          swift_release();
          swift_release();
          if (!v55)
          {
            outlined destroy of PgQuery_Alias(v51, type metadata accessor for PgQuery_Node);
            outlined destroy of PgQuery_Alias((uint64_t)v25, type metadata accessor for PgQuery_Node);
            outlined destroy of (key: String, value: StorableValue)(v45, &demangling cache variable for type metadata for PgQuery_Node?);
            v76 = (uint64_t)v27;
LABEL_48:
            outlined destroy of (key: String, value: StorableValue)(v76, &demangling cache variable for type metadata for PgQuery_Node?);
            goto LABEL_17;
          }
        }
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v56 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v51, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias((uint64_t)v25, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)(v45, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v27, &demangling cache variable for type metadata for PgQuery_Node?);
        v46 = v78;
        if ((v56 & 1) == 0)
          goto LABEL_17;
        goto LABEL_24;
      }
      outlined destroy of PgQuery_Alias((uint64_t)v25, type metadata accessor for PgQuery_Node);
    }
    v49 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    v50 = v45;
LABEL_47:
    outlined destroy of (key: String, value: StorableValue)(v50, v49);
    v76 = (uint64_t)v27;
    goto LABEL_48;
  }
  return v34 & 1;
}

uint64_t specialized static PgQuery_TruncateStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t TruncateStmt;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & 1) == 0
    || *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8))
  {
    goto LABEL_11;
  }
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 24) == 1)
  {
    if (v12)
    {
      if (v12 == 1)
      {
        if (v11 == 1)
          goto LABEL_9;
      }
      else if (v11 == 2)
      {
        goto LABEL_9;
      }
LABEL_11:
      v16 = 0;
      return v16 & 1;
    }
    if (v11)
      goto LABEL_11;
  }
  else if (v11 != v12)
  {
    goto LABEL_11;
  }
LABEL_9:
  TruncateStmt = type metadata accessor for PgQuery_TruncateStmt(0);
  v14 = a1 + *(int *)(TruncateStmt + 28);
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v15(v10, v14, v4);
  v15(v8, a2 + *(int *)(TruncateStmt + 28), v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v16 = dispatch thunk of static Equatable.== infix(_:_:)();
  v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17(v8, v4);
  v17(v10, v4);
  return v16 & 1;
}

uint64_t specialized static PgQuery_SecLabelStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t SecLabelStmt;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  char v42;
  void (*v43)(char *, uint64_t, uint64_t);
  char v44;
  void (*v45)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t Node;
  uint64_t v56;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v47 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v11 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v53 = (uint64_t)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v13);
  v56 = (uint64_t)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v16 = MEMORY[0x1E0C80A78](v15);
  v54 = (uint64_t)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v47 - v18;
  SecLabelStmt = type metadata accessor for PgQuery_SecLabelStmt(0);
  v21 = a1;
  v22 = *(int *)(SecLabelStmt + 20);
  v23 = *(_QWORD *)(a1 + v22);
  v24 = *(_QWORD *)(a2 + v22);
  if (v23 == v24)
    goto LABEL_19;
  v48 = v21;
  v49 = a2;
  v50 = v10;
  v51 = v8;
  v52 = v5;
  v25 = *(_QWORD *)(v24 + 16);
  v26 = *(unsigned __int8 *)(v24 + 24);
  v27 = destructiveProjectEnumData for StorableValue(*(_QWORD *)(v23 + 16), *(unsigned __int8 *)(v23 + 24));
  if (v27 != destructiveProjectEnumData for StorableValue(v25, v26))
  {
LABEL_24:
    v44 = 0;
    return v44 & 1;
  }
  v28 = v23
      + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  v29 = (uint64_t)v19;
  outlined init with copy of PgQuery_Alias?(v24+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  v30 = v56;
  v31 = v56 + *(int *)(v13 + 48);
  outlined init with copy of PgQuery_Alias?(v28, v56, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v19, v31, &demangling cache variable for type metadata for PgQuery_Node?);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  v33 = Node;
  if (v32(v30, 1, Node) != 1)
  {
    v35 = v54;
    outlined init with copy of PgQuery_Alias?(v30, v54, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v32(v31, 1, v33) == 1)
    {
      swift_retain();
      swift_retain();
      v36 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v37 = v53;
      outlined init with take of PgQuery_OidList(v31, v53, type metadata accessor for PgQuery_Node);
      v38 = *(int *)(v33 + 20);
      v39 = *(_QWORD *)(v35 + v38);
      v40 = *(_QWORD *)(v37 + v38);
      swift_retain();
      swift_retain();
      if (v39 == v40
        || (swift_retain(),
            swift_retain(),
            v41 = closure #1 in static PgQuery_Node.== infix(_:_:)(v39, v40),
            swift_release(),
            swift_release(),
            v41))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v42 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v37, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)(v30, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v42 & 1) != 0)
          goto LABEL_12;
LABEL_23:
        swift_release();
        swift_release();
        goto LABEL_24;
      }
      outlined destroy of PgQuery_Alias(v37, type metadata accessor for PgQuery_Node);
      v36 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
LABEL_22:
    outlined destroy of (key: String, value: StorableValue)(v30, v36);
    outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_23;
  }
  v34 = v32(v31, 1, v33);
  swift_retain();
  swift_retain();
  if (v34 != 1)
  {
    v36 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_22;
  }
  outlined destroy of (key: String, value: StorableValue)(v30, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_12:
  if ((*(_QWORD *)(v23
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__provider) != *(_QWORD *)(v24 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__provider)
     || *(_QWORD *)(v23
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__provider
                  + 8) != *(_QWORD *)(v24
                                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__provider
                                    + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || (*(_QWORD *)(v23
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__label) != *(_QWORD *)(v24 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__label)
     || *(_QWORD *)(v23
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__label
                  + 8) != *(_QWORD *)(v24
                                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__label
                                    + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_23;
  }
  swift_release();
  swift_release();
  v8 = v51;
  v5 = v52;
  a2 = v49;
  v10 = v50;
  v21 = v48;
LABEL_19:
  v43 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v43(v10, v21, v4);
  v43(v8, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v44 = dispatch thunk of static Equatable.== infix(_:_:)();
  v45 = *(void (**)(char *, uint64_t))(v5 + 8);
  v45(v8, v4);
  v45(v10, v4);
  return v44 & 1;
}

uint64_t specialized static PgQuery_PartitionCmd.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t RangeVar;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t PartitionCmd;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  char *v52;
  char *v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t PartitionBoundSpec;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v67 = a1;
  v68 = a2;
  v2 = type metadata accessor for UnknownStorage();
  v58 = *(_QWORD *)(v2 - 8);
  v59 = v2;
  v3 = MEMORY[0x1E0C80A78](v2);
  v57 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v56 = (char *)&v55 - v5;
  PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  v62 = *(_QWORD *)(PartitionBoundSpec - 8);
  MEMORY[0x1E0C80A78](PartitionBoundSpec);
  v55 = (uint64_t)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_PartitionBoundSpec?, PgQuery_PartitionBoundSpec?));
  MEMORY[0x1E0C80A78](v61);
  v66 = (uint64_t)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v60 = (uint64_t)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v63 = (uint64_t)&v55 - v12;
  MEMORY[0x1E0C80A78](v11);
  v64 = (uint64_t)&v55 - v13;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v15 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v55 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v22);
  v27 = (char *)&v55 - v26;
  MEMORY[0x1E0C80A78](v25);
  v29 = (char *)&v55 - v28;
  PartitionCmd = type metadata accessor for PgQuery_PartitionCmd(0);
  outlined init with copy of PgQuery_Alias?(v67 + *(int *)(PartitionCmd + 20), (uint64_t)v29, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?(v68 + *(int *)(PartitionCmd + 20), (uint64_t)v27, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v29, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v27, v31, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, RangeVar) != 1)
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v20, (uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if (v32(v31, 1, RangeVar) != 1)
    {
      outlined init with take of PgQuery_OidList(v31, (uint64_t)v17, type metadata accessor for PgQuery_RangeVar);
      v35 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v24, (uint64_t)v17);
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v27, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v29, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of PgQuery_Alias((uint64_t)v24, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      if ((v35 & 1) == 0)
        goto LABEL_15;
      goto LABEL_8;
    }
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v27, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v29, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of PgQuery_Alias((uint64_t)v24, type metadata accessor for PgQuery_RangeVar);
LABEL_6:
    v33 = &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?);
    v34 = (uint64_t)v20;
LABEL_14:
    outlined destroy of (key: String, value: StorableValue)(v34, v33);
    goto LABEL_15;
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v27, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v29, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v32(v31, 1, RangeVar) != 1)
    goto LABEL_6;
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
LABEL_8:
  v36 = v67;
  v37 = v64;
  outlined init with copy of PgQuery_Alias?(v67 + *(int *)(PartitionCmd + 24), v64, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  v38 = v68;
  v39 = v63;
  outlined init with copy of PgQuery_Alias?(v68 + *(int *)(PartitionCmd + 24), v63, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  v40 = v66;
  v41 = v66 + *(int *)(v61 + 48);
  outlined init with copy of PgQuery_Alias?(v37, v66, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  outlined init with copy of PgQuery_Alias?(v39, v41, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48);
  v43 = PartitionBoundSpec;
  if (v42(v40, 1, PartitionBoundSpec) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v39, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
    outlined destroy of (key: String, value: StorableValue)(v37, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
    if (v42(v41, 1, v43) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v40, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
LABEL_18:
      v50 = v58;
      v49 = v59;
      v51 = *(void (**)(char *, uint64_t, uint64_t))(v58 + 16);
      v52 = v56;
      v51(v56, v36, v59);
      v53 = v57;
      v51(v57, v38, v49);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v45 = dispatch thunk of static Equatable.== infix(_:_:)();
      v54 = *(void (**)(char *, uint64_t))(v50 + 8);
      v54(v53, v49);
      v54(v52, v49);
      return v45 & 1;
    }
    goto LABEL_13;
  }
  v44 = v60;
  outlined init with copy of PgQuery_Alias?(v40, v60, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  if (v42(v41, 1, v43) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v39, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
    outlined destroy of (key: String, value: StorableValue)(v37, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
    outlined destroy of PgQuery_Alias(v44, type metadata accessor for PgQuery_PartitionBoundSpec);
LABEL_13:
    v33 = &demangling cache variable for type metadata for (PgQuery_PartitionBoundSpec?, PgQuery_PartitionBoundSpec?);
    v34 = v40;
    goto LABEL_14;
  }
  v47 = v55;
  outlined init with take of PgQuery_OidList(v41, v55, type metadata accessor for PgQuery_PartitionBoundSpec);
  v48 = specialized static PgQuery_PartitionBoundSpec.== infix(_:_:)(v44, v47);
  outlined destroy of PgQuery_Alias(v47, type metadata accessor for PgQuery_PartitionBoundSpec);
  outlined destroy of (key: String, value: StorableValue)(v39, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  outlined destroy of (key: String, value: StorableValue)(v37, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  outlined destroy of PgQuery_Alias(v44, type metadata accessor for PgQuery_PartitionBoundSpec);
  outlined destroy of (key: String, value: StorableValue)(v40, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  if ((v48 & 1) != 0)
    goto LABEL_18;
LABEL_15:
  v45 = 0;
  return v45 & 1;
}

uint64_t specialized static PgQuery_GroupingFunc.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t GroupingFunc;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  int v51;
  int v52;
  BOOL v53;
  void (*v54)(char *, uint64_t, uint64_t);
  char v55;
  void (*v56)(char *, uint64_t);
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v58 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v66 = *(_QWORD *)(Node - 8);
  v67 = Node;
  MEMORY[0x1E0C80A78](Node);
  v64 = (uint64_t)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v65 = (uint64_t)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v58 - v19;
  GroupingFunc = type metadata accessor for PgQuery_GroupingFunc(0);
  v22 = a1;
  v23 = *(int *)(GroupingFunc + 20);
  v24 = *(_QWORD *)(a1 + v23);
  v25 = *(_QWORD *)(a2 + v23);
  if (v24 == v25)
    goto LABEL_17;
  v60 = a2;
  v61 = v22;
  v59 = v10;
  v62 = v5;
  v63 = v4;
  v26 = v24
      + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v25+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v27, &demangling cache variable for type metadata for PgQuery_Node?);
  v28 = v67;
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48);
  if (v29((uint64_t)v15, 1, v67) != 1)
  {
    v31 = v65;
    outlined init with copy of PgQuery_Alias?((uint64_t)v15, v65, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v29(v27, 1, v28) == 1)
    {
      swift_retain();
      swift_retain();
      v32 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v33 = (uint64_t)v20;
      v34 = v64;
      outlined init with take of PgQuery_OidList(v27, v64, type metadata accessor for PgQuery_Node);
      v35 = *(int *)(v28 + 20);
      v36 = *(_QWORD *)(v31 + v35);
      v37 = *(_QWORD *)(v34 + v35);
      swift_retain();
      swift_retain();
      if (v36 == v37
        || (swift_retain(),
            swift_retain(),
            v38 = closure #1 in static PgQuery_Node.== infix(_:_:)(v36, v37),
            swift_release(),
            swift_release(),
            v38))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v39 = v64;
        v40 = v65;
        v41 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v41 & 1) != 0)
          goto LABEL_11;
LABEL_21:
        swift_release();
        swift_release();
LABEL_22:
        v55 = 0;
        return v55 & 1;
      }
      outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_Node);
      v32 = &demangling cache variable for type metadata for PgQuery_Node?;
      v31 = v65;
    }
    outlined destroy of PgQuery_Alias(v31, type metadata accessor for PgQuery_Node);
LABEL_20:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, v32);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_21;
  }
  v30 = v29(v27, 1, v28);
  swift_retain();
  swift_retain();
  if (v30 != 1)
  {
    v32 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_20;
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  v42 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  v43 = *(_QWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v44 = specialized static Array<A>.== infix(_:_:)(v42, v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v44 & 1) == 0)
    goto LABEL_21;
  v45 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refs);
  v46 = *(_QWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refs);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v47 = specialized static Array<A>.== infix(_:_:)(v45, v46);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v47 & 1) == 0)
    goto LABEL_21;
  v48 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cols);
  v49 = *(_QWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cols);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v50 = specialized static Array<A>.== infix(_:_:)(v48, v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v50 & 1) == 0
    || *(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__agglevelsup) != *(_DWORD *)(v25 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__agglevelsup))
  {
    goto LABEL_21;
  }
  v51 = *(_DWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  v52 = *(_DWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  v53 = v51 == v52;
  v5 = v62;
  v4 = v63;
  v10 = v59;
  a2 = v60;
  v22 = v61;
  if (!v53)
    goto LABEL_22;
LABEL_17:
  v54 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v54(v10, v22, v4);
  v54(v8, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v55 = dispatch thunk of static Equatable.== infix(_:_:)();
  v56 = *(void (**)(char *, uint64_t))(v5 + 8);
  v56(v8, v4);
  v56(v10, v4);
  return v55 & 1;
}

uint64_t specialized static PgQuery_ConstraintsSetStmt.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v19 - v11;
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & 1) != 0
    && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8))
  {
    v14 = a3(0);
    v15 = a1 + *(int *)(v14 + 24);
    v16 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v16(v12, v15, v6);
    v16(v10, a2 + *(int *)(v14 + 24), v6);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v7 + 8);
    v17(v10, v6);
    v17(v12, v6);
  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static PgQuery_DistinctExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t DistinctExpr;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  int v45;
  int v46;
  BOOL v47;
  void (*v48)(char *, uint64_t, uint64_t);
  char v49;
  void (*v50)(char *, uint64_t);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v52 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v60 = *(_QWORD *)(Node - 8);
  v61 = Node;
  MEMORY[0x1E0C80A78](Node);
  v58 = (uint64_t)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v59 = (uint64_t)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v52 - v19;
  DistinctExpr = type metadata accessor for PgQuery_DistinctExpr(0);
  v22 = a1;
  v23 = *(int *)(DistinctExpr + 20);
  v24 = *(_QWORD *)(a1 + v23);
  v25 = *(_QWORD *)(a2 + v23);
  if (v24 == v25)
    goto LABEL_20;
  v54 = a2;
  v55 = v22;
  v53 = v10;
  v56 = v5;
  v57 = v4;
  v26 = v24
      + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v25+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  v28 = (uint64_t)v20;
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v27, &demangling cache variable for type metadata for PgQuery_Node?);
  v29 = v61;
  v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48);
  if (v30((uint64_t)v15, 1, v61) != 1)
  {
    v32 = v25;
    v33 = v59;
    outlined init with copy of PgQuery_Alias?((uint64_t)v15, v59, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v30(v27, 1, v29) == 1)
    {
      swift_retain();
      swift_retain();
      v34 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v35 = v58;
      outlined init with take of PgQuery_OidList(v27, v58, type metadata accessor for PgQuery_Node);
      v36 = *(int *)(v29 + 20);
      v37 = *(_QWORD *)(v33 + v36);
      v38 = *(_QWORD *)(v35 + v36);
      swift_retain();
      swift_retain();
      if (v37 == v38
        || (swift_retain(),
            swift_retain(),
            v39 = closure #1 in static PgQuery_Node.== infix(_:_:)(v37, v38),
            swift_release(),
            swift_release(),
            v39))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v40 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v28, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v40 & 1) != 0)
          goto LABEL_11;
LABEL_24:
        swift_release();
        swift_release();
LABEL_25:
        v49 = 0;
        return v49 & 1;
      }
      outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
      v34 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
LABEL_23:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, v34);
    outlined destroy of (key: String, value: StorableValue)(v28, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_24;
  }
  v31 = v30(v27, 1, v29);
  swift_retain();
  v32 = v25;
  swift_retain();
  if (v31 != 1)
  {
    v34 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_23;
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  if (*(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno))
    goto LABEL_24;
  if (*(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid))
    goto LABEL_24;
  if (*(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype))
    goto LABEL_24;
  if (*(unsigned __int8 *)(v24
                          + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset) != *(unsigned __int8 *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset))
    goto LABEL_24;
  if (*(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid))
    goto LABEL_24;
  if (*(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
    goto LABEL_24;
  v41 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  v42 = *(_QWORD *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  v43 = v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v44 = specialized static Array<A>.== infix(_:_:)(v41, v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v44 & 1) == 0)
    goto LABEL_24;
  v45 = *(_DWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  v46 = *(_DWORD *)(v43
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  v47 = v45 == v46;
  v5 = v56;
  v4 = v57;
  v10 = v53;
  a2 = v54;
  v22 = v55;
  if (!v47)
    goto LABEL_25;
LABEL_20:
  v48 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v48(v10, v22, v4);
  v48(v8, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v49 = dispatch thunk of static Equatable.== infix(_:_:)();
  v50 = *(void (**)(char *, uint64_t))(v5 + 8);
  v50(v8, v4);
  v50(v10, v4);
  return v49 & 1;
}

uint64_t specialized static PgQuery_CreateAmStmt.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  uint64_t AmStmt;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  v11 = *a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(a1[2], *((_QWORD *)a2 + 2)) & 1) != 0)
    {
      if (a1[3] == *((_QWORD *)a2 + 3) && a1[4] == *((_QWORD *)a2 + 4)
        || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        AmStmt = type metadata accessor for PgQuery_CreateAmStmt(0);
        v14 = (char *)a1 + *(int *)(AmStmt + 28);
        v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
        v15(v10, v14, v4);
        v15(v8, &a2[*(int *)(AmStmt + 28)], v4);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v12 = dispatch thunk of static Equatable.== infix(_:_:)();
        v16 = *(void (**)(char *, uint64_t))(v5 + 8);
        v16(v8, v4);
        v16(v10, v4);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_CoalesceExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t CoalesceExpr;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  int v45;
  int v46;
  BOOL v47;
  void (*v48)(char *, uint64_t, uint64_t);
  char v49;
  void (*v50)(char *, uint64_t);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v52 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v60 = *(_QWORD *)(Node - 8);
  v61 = Node;
  MEMORY[0x1E0C80A78](Node);
  v58 = (uint64_t)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v59 = (uint64_t)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v52 - v19;
  CoalesceExpr = type metadata accessor for PgQuery_CoalesceExpr(0);
  v22 = a1;
  v23 = *(int *)(CoalesceExpr + 20);
  v24 = *(_QWORD *)(a1 + v23);
  v25 = *(_QWORD *)(a2 + v23);
  if (v24 == v25)
    goto LABEL_16;
  v54 = a2;
  v55 = v22;
  v53 = v10;
  v56 = v5;
  v57 = v4;
  v26 = v24
      + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v25+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  v28 = (uint64_t)v20;
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v27, &demangling cache variable for type metadata for PgQuery_Node?);
  v29 = v61;
  v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48);
  if (v30((uint64_t)v15, 1, v61) != 1)
  {
    v32 = v25;
    v33 = v59;
    outlined init with copy of PgQuery_Alias?((uint64_t)v15, v59, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v30(v27, 1, v29) == 1)
    {
      swift_retain();
      swift_retain();
      v34 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v35 = v58;
      outlined init with take of PgQuery_OidList(v27, v58, type metadata accessor for PgQuery_Node);
      v36 = *(int *)(v29 + 20);
      v37 = *(_QWORD *)(v33 + v36);
      v38 = *(_QWORD *)(v35 + v36);
      swift_retain();
      swift_retain();
      if (v37 == v38
        || (swift_retain(),
            swift_retain(),
            v39 = closure #1 in static PgQuery_Node.== infix(_:_:)(v37, v38),
            swift_release(),
            swift_release(),
            v39))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v40 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v28, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v40 & 1) != 0)
          goto LABEL_11;
LABEL_20:
        swift_release();
        swift_release();
LABEL_21:
        v49 = 0;
        return v49 & 1;
      }
      outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
      v34 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
LABEL_19:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, v34);
    outlined destroy of (key: String, value: StorableValue)(v28, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_20;
  }
  v31 = v30(v27, 1, v29);
  swift_retain();
  v32 = v25;
  swift_retain();
  if (v31 != 1)
  {
    v34 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_19;
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  if (*(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coalescetype) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coalescetype))
    goto LABEL_20;
  if (*(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coalescecollid) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coalescecollid))
    goto LABEL_20;
  v41 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  v42 = *(_QWORD *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  v43 = v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v44 = specialized static Array<A>.== infix(_:_:)(v41, v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v44 & 1) == 0)
    goto LABEL_20;
  v45 = *(_DWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  v46 = *(_DWORD *)(v43
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  v47 = v45 == v46;
  v5 = v56;
  v4 = v57;
  v10 = v53;
  a2 = v54;
  v22 = v55;
  if (!v47)
    goto LABEL_21;
LABEL_16:
  v48 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v48(v10, v22, v4);
  v48(v8, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v49 = dispatch thunk of static Equatable.== infix(_:_:)();
  v50 = *(void (**)(char *, uint64_t))(v5 + 8);
  v50(v8, v4);
  v50(v10, v4);
  return v49 & 1;
}

uint64_t specialized static PgQuery_AlterSeqStmt.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t RangeVar;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t AlterSeqStmt;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  char v30;
  uint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t *v34;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  char *v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;

  v4 = type metadata accessor for UnknownStorage();
  v46 = *(_QWORD *)(v4 - 8);
  v47 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v45 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v44 = (char *)&v43 - v7;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v9 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v48 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v43 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v43 - v21;
  AlterSeqStmt = type metadata accessor for PgQuery_AlterSeqStmt(0);
  v24 = *(int *)(AlterSeqStmt + 32);
  v49 = a1;
  v25 = (uint64_t)a1 + v24;
  v26 = AlterSeqStmt;
  outlined init with copy of PgQuery_Alias?(v25, (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v27 = *(int *)(v26 + 32);
  v50 = a2;
  outlined init with copy of PgQuery_Alias?((uint64_t)a2 + v27, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v28, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, RangeVar) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if (v29(v28, 1, RangeVar) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_8;
    }
  }
  else
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if (v29(v28, 1, RangeVar) != 1)
    {
      v31 = v48;
      outlined init with take of PgQuery_OidList(v28, v48, type metadata accessor for PgQuery_RangeVar);
      v32 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v17, v31);
      outlined destroy of PgQuery_Alias(v31, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      if ((v32 & 1) == 0)
      {
LABEL_11:
        v30 = 0;
        return v30 & 1;
      }
LABEL_8:
      v33 = v49;
      v34 = v50;
      if ((specialized static Array<A>.== infix(_:_:)(*v49, *v50) & 1) != 0
        && *((unsigned __int8 *)v33 + 8) == *((unsigned __int8 *)v34 + 8)
        && *((unsigned __int8 *)v33 + 9) == *((unsigned __int8 *)v34 + 9))
      {
        v36 = (char *)v33 + *(int *)(v26 + 28);
        v38 = v46;
        v37 = v47;
        v39 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
        v40 = v44;
        v39(v44, v36, v47);
        v41 = v45;
        v39(v45, (char *)v34 + *(int *)(v26 + 28), v37);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v30 = dispatch thunk of static Equatable.== infix(_:_:)();
        v42 = *(void (**)(char *, uint64_t))(v38 + 8);
        v42(v41, v37);
        v42(v40, v37);
        return v30 & 1;
      }
      goto LABEL_11;
    }
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RangeVar);
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  v30 = 0;
  return v30 & 1;
}

uint64_t specialized static PgQuery_CreateFdwStmt.== infix(_:_:)(_QWORD *a1, char *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v20 - v11;
  v13 = *a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1);
  if (v13 || (v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(a1[2], *((_QWORD *)a2 + 2)) & 1) != 0
      && (specialized static Array<A>.== infix(_:_:)(a1[3], *((_QWORD *)a2 + 3)) & 1) != 0)
    {
      v15 = a3(0);
      v16 = (char *)a1 + *(int *)(v15 + 28);
      v17 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      v17(v12, v16, v6);
      v17(v10, &a2[*(int *)(v15 + 28)], v6);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      v18 = *(void (**)(char *, uint64_t))(v7 + 8);
      v18(v10, v6);
      v18(v12, v6);
    }
    else
    {
      v14 = 0;
    }
  }
  return v14 & 1;
}

uint64_t specialized static PgQuery_RelabelType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  int v68;
  int v69;
  BOOL v70;
  void (*v71)(char *, uint64_t, uint64_t);
  char *v72;
  void (*v73)(char *, uint64_t);
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v75 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v88 = *(_QWORD *)(Node - 8);
  v12 = MEMORY[0x1E0C80A78](Node);
  v82 = (uint64_t)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v86 = (uint64_t)&v75 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v16 = MEMORY[0x1E0C80A78](v15);
  v85 = (uint64_t)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v75 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v83 = (uint64_t)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v84 = (uint64_t)&v75 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v87 = (uint64_t)&v75 - v26;
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v75 - v27;
  v29 = *(int *)(type metadata accessor for PgQuery_RelabelType(0) + 20);
  v30 = *(_QWORD *)(a1 + v29);
  v31 = *(_QWORD *)(a2 + v29);
  if (v30 == v31)
    goto LABEL_36;
  v77 = a2;
  v78 = a1;
  v76 = v10;
  v79 = v8;
  v80 = v4;
  v81 = v5;
  v32 = v30;
  v33 = v31;
  v34 = v30
      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v31 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  v35 = (uint64_t)&v19[*(int *)(v15 + 48)];
  outlined init with copy of PgQuery_Alias?(v34, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, v35, &demangling cache variable for type metadata for PgQuery_Node?);
  v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
  if (v36((uint64_t)v19, 1, Node) == 1)
  {
    v88 = Node;
    v37 = v36(v35, 1, Node);
    swift_retain();
    swift_retain();
    v38 = v32;
    v39 = v33;
    if (v37 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_11;
    }
    v41 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_27:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, v41);
    v66 = (uint64_t)v28;
LABEL_31:
    outlined destroy of (key: String, value: StorableValue)(v66, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_32;
  }
  v40 = v87;
  outlined init with copy of PgQuery_Alias?((uint64_t)v19, v87, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v36(v35, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    v41 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_26:
    outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_Node);
    goto LABEL_27;
  }
  v75 = v28;
  v42 = v86;
  outlined init with take of PgQuery_OidList(v35, v86, type metadata accessor for PgQuery_Node);
  v88 = Node;
  v43 = *(int *)(Node + 20);
  v44 = *(_QWORD *)(v40 + v43);
  v45 = *(_QWORD *)(v42 + v43);
  swift_retain();
  swift_retain();
  if (v44 != v45)
  {
    swift_retain();
    swift_retain();
    v46 = closure #1 in static PgQuery_Node.== infix(_:_:)(v44, v45);
    swift_release();
    swift_release();
    if (!v46)
    {
      outlined destroy of PgQuery_Alias(v86, type metadata accessor for PgQuery_Node);
      v41 = &demangling cache variable for type metadata for PgQuery_Node?;
      v28 = v75;
      v40 = v87;
      goto LABEL_26;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v48 = v86;
  v47 = v87;
  v49 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v48, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v47, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v75, &demangling cache variable for type metadata for PgQuery_Node?);
  v38 = v32;
  v39 = v33;
  if ((v49 & 1) == 0)
    goto LABEL_32;
LABEL_11:
  v50 = v38
      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  v51 = v84;
  outlined init with copy of PgQuery_Alias?(v39 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v84, &demangling cache variable for type metadata for PgQuery_Node?);
  v52 = v85;
  v53 = v85 + *(int *)(v15 + 48);
  outlined init with copy of PgQuery_Alias?(v50, v85, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v51, v53, &demangling cache variable for type metadata for PgQuery_Node?);
  v54 = v88;
  if (v36(v52, 1, v88) != 1)
  {
    v56 = v83;
    outlined init with copy of PgQuery_Alias?(v52, v83, &demangling cache variable for type metadata for PgQuery_Node?);
    v57 = v36(v53, 1, v54);
    v5 = v81;
    if (v57 == 1)
    {
      v58 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v59 = v82;
      outlined init with take of PgQuery_OidList(v53, v82, type metadata accessor for PgQuery_Node);
      v60 = *(int *)(v54 + 20);
      v61 = *(_QWORD *)(v56 + v60);
      v62 = *(_QWORD *)(v59 + v60);
      if (v61 == v62
        || (swift_retain(),
            swift_retain(),
            v63 = closure #1 in static PgQuery_Node.== infix(_:_:)(v61, v62),
            swift_release(),
            swift_release(),
            v63))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v64 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v59, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v56, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)(v52, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v51, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v64 & 1) == 0)
          goto LABEL_32;
        goto LABEL_20;
      }
      outlined destroy of PgQuery_Alias(v59, type metadata accessor for PgQuery_Node);
      v58 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v56, type metadata accessor for PgQuery_Node);
    goto LABEL_30;
  }
  v55 = v36(v53, 1, v54);
  v5 = v81;
  if (v55 != 1)
  {
    v58 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_30:
    outlined destroy of (key: String, value: StorableValue)(v52, v58);
    v66 = v51;
    goto LABEL_31;
  }
  outlined destroy of (key: String, value: StorableValue)(v52, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v51, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_20:
  if (*(_DWORD *)(v38
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) == *(_DWORD *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype)
    && *(_DWORD *)(v38
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod) == *(_DWORD *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod)
    && *(_DWORD *)(v38
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid) == *(_DWORD *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid))
  {
    v65 = *(_QWORD *)(v39
                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relabelformat);
    if (*(_BYTE *)(v39
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relabelformat
                  + 8) == 1)
      __asm { BR              X11 }
    if (*(_QWORD *)(v38
                   + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relabelformat) == v65)
    {
      v68 = *(_DWORD *)(v38
                      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      v69 = *(_DWORD *)(v39
                      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      swift_release();
      swift_release();
      v70 = v68 == v69;
      a1 = v78;
      v8 = v79;
      v10 = v76;
      a2 = v77;
      v4 = v80;
      if (!v70)
      {
        v67 = 0;
        return v67 & 1;
      }
LABEL_36:
      v71 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v71(v10, a1, v4);
      v71(v8, a2, v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v72 = v8;
      v67 = dispatch thunk of static Equatable.== infix(_:_:)();
      v73 = *(void (**)(char *, uint64_t))(v5 + 8);
      v73(v72, v4);
      v73(v10, v4);
      return v67 & 1;
    }
  }
LABEL_32:
  swift_release();
  swift_release();
  v67 = 0;
  return v67 & 1;
}

uint64_t specialized static PgQuery_ReindexStmt.== infix(_:_:)(char *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t RangeVar;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t ReindexStmt;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  char v28;
  char *v29;
  char v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  void (*v37)(char *, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;

  v4 = type metadata accessor for UnknownStorage();
  v42 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v41 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v40 = (char *)&v39 - v7;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v9 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v43 = (uint64_t)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v39 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v39 - v21;
  v44 = a1;
  v23 = *a2;
  if (*((_BYTE *)a2 + 8) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)a1 != v23)
    goto LABEL_17;
  v39 = v4;
  ReindexStmt = type metadata accessor for PgQuery_ReindexStmt(0);
  outlined init with copy of PgQuery_Alias?((uint64_t)&v44[*(int *)(ReindexStmt + 36)], (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)a2 + *(int *)(ReindexStmt + 36), (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v25 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v25, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v26((uint64_t)v13, 1, RangeVar) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if (v26(v25, 1, RangeVar) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_11;
    }
LABEL_9:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    goto LABEL_17;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v26(v25, 1, RangeVar) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_9;
  }
  v27 = v43;
  outlined init with take of PgQuery_OidList(v25, v43, type metadata accessor for PgQuery_RangeVar);
  v28 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v17, v27);
  outlined destroy of PgQuery_Alias(v27, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v28 & 1) == 0)
    goto LABEL_17;
LABEL_11:
  v29 = v44;
  if (*((_QWORD *)v44 + 2) == a2[2] && *((_QWORD *)v44 + 3) == a2[3]
    || (v30 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*((_DWORD *)v29 + 8) == *((_DWORD *)a2 + 8) && v29[36] == *((_BYTE *)a2 + 36))
    {
      v31 = v42;
      v32 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
      v33 = v39;
      v34 = v40;
      v32(v40, &v29[*(int *)(ReindexStmt + 32)], v39);
      v35 = (char *)a2 + *(int *)(ReindexStmt + 32);
      v36 = v41;
      v32(v41, v35, v33);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v30 = dispatch thunk of static Equatable.== infix(_:_:)();
      v37 = *(void (**)(char *, uint64_t))(v31 + 8);
      v37(v36, v33);
      v37(v34, v33);
      return v30 & 1;
    }
LABEL_17:
    v30 = 0;
  }
  return v30 & 1;
}

uint64_t specialized static PgQuery_PrepareStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t PrepareStmt;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  char v46;
  void (*v47)(char *, uint64_t, uint64_t);
  void (*v48)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t Node;
  uint64_t v58;
  uint64_t v59;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v50 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v11 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v55 = (uint64_t)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v13);
  v58 = (uint64_t)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v16 = MEMORY[0x1E0C80A78](v15);
  v56 = (uint64_t)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v59 = (uint64_t)&v50 - v18;
  PrepareStmt = type metadata accessor for PgQuery_PrepareStmt(0);
  v20 = a1;
  v21 = *(int *)(PrepareStmt + 20);
  v22 = *(_QWORD **)(a1 + v21);
  v23 = *(_QWORD **)(a2 + v21);
  if (v22 == v23)
    goto LABEL_18;
  v53 = a1;
  v54 = a2;
  v24 = v22[2] == v23[2] && v22[3] == v23[3];
  if (v24 || (v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v51 = v5;
    v52 = v8;
    v26 = v22[4];
    v27 = v23[4];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v28 = specialized static Array<A>.== infix(_:_:)(v26, v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v28 & 1) != 0)
    {
      v29 = (uint64_t)v22
          + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_PrepareStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query;
      v30 = v59;
      outlined init with copy of PgQuery_Alias?((uint64_t)v23+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_PrepareStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, v59, &demangling cache variable for type metadata for PgQuery_Node?);
      v31 = v58;
      v32 = v58 + *(int *)(v13 + 48);
      outlined init with copy of PgQuery_Alias?(v29, v58, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined init with copy of PgQuery_Alias?(v30, v32, &demangling cache variable for type metadata for PgQuery_Node?);
      v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
      v34 = Node;
      if (v33(v31, 1, Node) == 1)
      {
        v35 = v33(v32, 1, v34);
        v5 = v51;
        v8 = v52;
        if (v35 == 1)
        {
          outlined destroy of (key: String, value: StorableValue)(v31, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined destroy of (key: String, value: StorableValue)(v59, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_17:
          swift_release();
          swift_release();
          v20 = v53;
          a2 = v54;
LABEL_18:
          v47 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
          v47(v10, v20, v4);
          v47(v8, a2, v4);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v25 = dispatch thunk of static Equatable.== infix(_:_:)();
          v48 = *(void (**)(char *, uint64_t))(v5 + 8);
          v48(v8, v4);
          v48(v10, v4);
          return v25 & 1;
        }
        v38 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
        goto LABEL_21;
      }
      v36 = v56;
      outlined init with copy of PgQuery_Alias?(v31, v56, &demangling cache variable for type metadata for PgQuery_Node?);
      v37 = v33(v32, 1, v34);
      v8 = v52;
      if (v37 == 1)
      {
        v38 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_20:
        outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
LABEL_21:
        outlined destroy of (key: String, value: StorableValue)(v31, v38);
        outlined destroy of (key: String, value: StorableValue)(v59, &demangling cache variable for type metadata for PgQuery_Node?);
        goto LABEL_22;
      }
      v39 = v34;
      v40 = v55;
      outlined init with take of PgQuery_OidList(v32, v55, type metadata accessor for PgQuery_Node);
      v41 = *(int *)(v39 + 20);
      v42 = *(_QWORD *)(v36 + v41);
      v43 = *(_QWORD *)(v40 + v41);
      if (v42 != v43)
      {
        swift_retain();
        swift_retain();
        v44 = closure #1 in static PgQuery_Node.== infix(_:_:)(v42, v43);
        swift_release();
        swift_release();
        if (!v44)
        {
          outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_Node);
          v38 = &demangling cache variable for type metadata for PgQuery_Node?;
          v31 = v58;
          v36 = v56;
          goto LABEL_20;
        }
      }
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v45 = v56;
      v46 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_Node);
      outlined destroy of (key: String, value: StorableValue)(v58, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)(v59, &demangling cache variable for type metadata for PgQuery_Node?);
      v5 = v51;
      if ((v46 & 1) != 0)
        goto LABEL_17;
    }
LABEL_22:
    swift_release();
    swift_release();
    v25 = 0;
  }
  return v25 & 1;
}

uint64_t specialized static PgQuery_InferClause.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t InferClause;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  int v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  char v45;
  int v46;
  int v47;
  BOOL v48;
  void (*v49)(char *, uint64_t, uint64_t);
  char v50;
  void (*v51)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v53 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v12 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v59 = (uint64_t)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v14);
  v61 = (uint64_t)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v60 = (uint64_t)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v62 = (uint64_t)&v53 - v19;
  InferClause = type metadata accessor for PgQuery_InferClause(0);
  v21 = a1;
  v22 = *(int *)(InferClause + 20);
  v23 = *(_QWORD *)(a1 + v22);
  v24 = *(_QWORD *)(a2 + v22);
  if (v23 == v24)
    goto LABEL_17;
  v54 = v21;
  v55 = a2;
  v57 = v10;
  v58 = v8;
  v56 = v5;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = *(_QWORD *)(v24 + 16);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27 = specialized static Array<A>.== infix(_:_:)(v25, v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v27 & 1) == 0)
    goto LABEL_21;
  v28 = v23
      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  v29 = v62;
  outlined init with copy of PgQuery_Alias?(v24+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v62, &demangling cache variable for type metadata for PgQuery_Node?);
  v30 = v61;
  v31 = v61 + *(int *)(v14 + 48);
  outlined init with copy of PgQuery_Alias?(v28, v61, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v29, v31, &demangling cache variable for type metadata for PgQuery_Node?);
  v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v32(v30, 1, Node) == 1)
  {
    v33 = v32(v31, 1, Node);
    v10 = v57;
    v8 = v58;
    if (v33 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v30, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)(v62, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_12;
    }
    v36 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_20;
  }
  v34 = v60;
  outlined init with copy of PgQuery_Alias?(v30, v60, &demangling cache variable for type metadata for PgQuery_Node?);
  v35 = v32(v31, 1, Node);
  v10 = v57;
  v8 = v58;
  if (v35 == 1)
  {
    v36 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_19:
    outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
LABEL_20:
    outlined destroy of (key: String, value: StorableValue)(v30, v36);
    outlined destroy of (key: String, value: StorableValue)(v62, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_21;
  }
  v37 = v31;
  v38 = v34;
  v39 = v59;
  outlined init with take of PgQuery_OidList(v37, v59, type metadata accessor for PgQuery_Node);
  v40 = *(int *)(Node + 20);
  v41 = *(_QWORD *)(v38 + v40);
  v42 = *(_QWORD *)(v39 + v40);
  if (v41 != v42)
  {
    swift_retain();
    swift_retain();
    v43 = closure #1 in static PgQuery_Node.== infix(_:_:)(v41, v42);
    swift_release();
    swift_release();
    if (!v43)
    {
      outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_Node);
      v36 = &demangling cache variable for type metadata for PgQuery_Node?;
      v34 = v60;
      goto LABEL_19;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v44 = v60;
  v45 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v44, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v30, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v62, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v45 & 1) == 0)
  {
LABEL_21:
    swift_release();
    swift_release();
LABEL_22:
    v50 = 0;
    return v50 & 1;
  }
LABEL_12:
  if ((*(_QWORD *)(v23
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__conname) != *(_QWORD *)(v24 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__conname)
     || *(_QWORD *)(v23
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__conname
                  + 8) != *(_QWORD *)(v24
                                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__conname
                                    + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_21;
  }
  v46 = *(_DWORD *)(v23
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  v47 = *(_DWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  v48 = v46 == v47;
  a2 = v55;
  v5 = v56;
  v21 = v54;
  if (!v48)
    goto LABEL_22;
LABEL_17:
  v49 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v49(v10, v21, v4);
  v49(v8, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v50 = dispatch thunk of static Equatable.== infix(_:_:)();
  v51 = *(void (**)(char *, uint64_t))(v5 + 8);
  v51(v8, v4);
  v51(v10, v4);
  return v50 & 1;
}

uint64_t specialized static PgQuery_GroupingSet.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t GroupingSet;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  v11 = *a2;
  if (*((_BYTE *)a2 + 8) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)a1 == v11
    && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 16), a2[2]) & 1) != 0
    && *(_DWORD *)(a1 + 24) == *((_DWORD *)a2 + 6))
  {
    GroupingSet = type metadata accessor for PgQuery_GroupingSet(0);
    v13 = a1 + *(int *)(GroupingSet + 28);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v14(v10, v13, v4);
    v14(v8, (uint64_t)a2 + *(int *)(GroupingSet + 28), v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t specialized static PgQuery_AlternativeSubPlan.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), _QWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Node;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  void (*v43)(char *, uint64_t, uint64_t);
  char *v44;
  char *v45;
  char v46;
  void (*v47)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  _QWORD *v58;

  v52 = a5;
  v58 = a4;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v57 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v56 = (char *)&v49 - v12;
  Node = type metadata accessor for PgQuery_Node(0);
  v14 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v51 = (uint64_t)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v20 = MEMORY[0x1E0C80A78](v19);
  v53 = (uint64_t)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v49 - v22;
  v24 = *(int *)(a3(0) + 20);
  v54 = a1;
  v55 = a2;
  v25 = *(_QWORD *)(a1 + v24);
  v26 = *(_QWORD *)(a2 + v24);
  if (v25 == v26)
    goto LABEL_12;
  v49 = v9;
  v50 = v8;
  v27 = v25 + *v58;
  outlined init with copy of PgQuery_Alias?(v26 + *v58, (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
  v28 = (uint64_t)&v18[*(int *)(v16 + 48)];
  outlined init with copy of PgQuery_Alias?(v27, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v28, &demangling cache variable for type metadata for PgQuery_Node?);
  v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (v29((uint64_t)v18, 1, Node) == 1)
  {
    v30 = v29(v28, 1, Node);
    swift_retain();
    swift_retain();
    if (v30 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
      v8 = v50;
      goto LABEL_11;
    }
    v32 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_15;
  }
  v31 = v53;
  outlined init with copy of PgQuery_Alias?((uint64_t)v18, v53, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v29(v28, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    v32 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_14:
    outlined destroy of PgQuery_Alias(v31, type metadata accessor for PgQuery_Node);
LABEL_15:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v18, v32);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_16;
  }
  v33 = v51;
  outlined init with take of PgQuery_OidList(v28, v51, type metadata accessor for PgQuery_Node);
  v34 = *(int *)(Node + 20);
  v35 = *(_QWORD *)(v31 + v34);
  v36 = *(_QWORD *)(v33 + v34);
  swift_retain();
  swift_retain();
  if (v35 != v36)
  {
    swift_retain();
    swift_retain();
    v37 = closure #1 in static PgQuery_Node.== infix(_:_:)(v35, v36);
    swift_release();
    swift_release();
    if (!v37)
    {
      outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
      v32 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_14;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v38 = v31;
  v8 = v50;
  v39 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v38, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v39 & 1) == 0)
  {
LABEL_16:
    swift_release();
    swift_release();
    goto LABEL_17;
  }
LABEL_11:
  v40 = *(_QWORD *)(v25 + *v52);
  v41 = *(_QWORD *)(v26 + *v52);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v42 = specialized static Array<A>.== infix(_:_:)(v40, v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v9 = v49;
  if ((v42 & 1) == 0)
  {
LABEL_17:
    v46 = 0;
    return v46 & 1;
  }
LABEL_12:
  v43 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v44 = v56;
  v43(v56, v54, v8);
  v45 = v57;
  v43(v57, v55, v8);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v46 = dispatch thunk of static Equatable.== infix(_:_:)();
  v47 = *(void (**)(char *, uint64_t))(v9 + 8);
  v47(v45, v8);
  v47(v44, v8);
  return v46 & 1;
}

uint64_t specialized static PgQuery_DiscardStmt.== infix(_:_:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  uint64_t DiscardStmt;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  v11 = *a2;
  if (*((_BYTE *)a2 + 8) == 1)
    __asm { BR              X11 }
  if (*a1 == v11)
  {
    DiscardStmt = type metadata accessor for PgQuery_DiscardStmt(0);
    v14 = (char *)a1 + *(int *)(DiscardStmt + 20);
    v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v10, v14, v4);
    v15(v8, (char *)a2 + *(int *)(DiscardStmt + 20), v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v12 = dispatch thunk of static Equatable.== infix(_:_:)();
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_CommentStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t CommentStmt;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  char v47;
  void (*v48)(char *, uint64_t, uint64_t);
  char v49;
  void (*v50)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v52 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v12 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v58 = (uint64_t)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v14);
  v60 = (uint64_t)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v59 = (uint64_t)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v61 = (uint64_t)&v52 - v19;
  CommentStmt = type metadata accessor for PgQuery_CommentStmt(0);
  v21 = a1;
  v22 = *(int *)(CommentStmt + 20);
  v23 = *(_QWORD *)(a1 + v22);
  v24 = *(_QWORD *)(a2 + v22);
  if (v23 == v24)
    goto LABEL_16;
  v53 = a2;
  v54 = v21;
  v56 = v10;
  v57 = v8;
  v55 = v5;
  v25 = *(_QWORD *)(v24 + 16);
  v26 = *(unsigned __int8 *)(v24 + 24);
  v27 = destructiveProjectEnumData for StorableValue(*(_QWORD *)(v23 + 16), *(unsigned __int8 *)(v23 + 24));
  if (v27 != destructiveProjectEnumData for StorableValue(v25, v26))
  {
LABEL_21:
    v49 = 0;
    return v49 & 1;
  }
  v28 = v23
      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CommentStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  v29 = v61;
  outlined init with copy of PgQuery_Alias?(v24+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CommentStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, v61, &demangling cache variable for type metadata for PgQuery_Node?);
  v30 = v60;
  v31 = v60 + *(int *)(v14 + 48);
  outlined init with copy of PgQuery_Alias?(v28, v60, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v29, v31, &demangling cache variable for type metadata for PgQuery_Node?);
  v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  v33 = v30;
  if (v32(v30, 1, Node) == 1)
  {
    v34 = v32(v31, 1, Node);
    v35 = v23;
    swift_retain();
    swift_retain();
    v10 = v56;
    v8 = v57;
    if (v34 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)(v61, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_12;
    }
    v38 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_19;
  }
  v35 = v23;
  v36 = v59;
  outlined init with copy of PgQuery_Alias?(v30, v59, &demangling cache variable for type metadata for PgQuery_Node?);
  v37 = v32(v31, 1, Node);
  v10 = v56;
  v8 = v57;
  if (v37 == 1)
  {
    swift_retain();
    swift_retain();
    v38 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_18:
    outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
LABEL_19:
    outlined destroy of (key: String, value: StorableValue)(v33, v38);
    outlined destroy of (key: String, value: StorableValue)(v61, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_20;
  }
  v39 = v31;
  v40 = v36;
  v41 = v58;
  outlined init with take of PgQuery_OidList(v39, v58, type metadata accessor for PgQuery_Node);
  v42 = *(int *)(Node + 20);
  v43 = *(_QWORD *)(v40 + v42);
  v44 = *(_QWORD *)(v41 + v42);
  swift_retain();
  swift_retain();
  if (v43 != v44)
  {
    swift_retain();
    swift_retain();
    v45 = closure #1 in static PgQuery_Node.== infix(_:_:)(v43, v44);
    swift_release();
    swift_release();
    if (!v45)
    {
      outlined destroy of PgQuery_Alias(v41, type metadata accessor for PgQuery_Node);
      v38 = &demangling cache variable for type metadata for PgQuery_Node?;
      v36 = v59;
      goto LABEL_18;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v46 = v59;
  v47 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v41, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v46, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v61, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v47 & 1) == 0)
  {
LABEL_20:
    swift_release();
    swift_release();
    goto LABEL_21;
  }
LABEL_12:
  if ((*(_QWORD *)(v35
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CommentStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__comment) != *(_QWORD *)(v24 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CommentStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__comment)
     || *(_QWORD *)(v35
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CommentStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__comment
                  + 8) != *(_QWORD *)(v24
                                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CommentStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__comment
                                    + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_20;
  }
  swift_release();
  swift_release();
  v21 = v54;
  v5 = v55;
  a2 = v53;
LABEL_16:
  v48 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v48(v10, v21, v4);
  v48(v8, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v49 = dispatch thunk of static Equatable.== infix(_:_:)();
  v50 = *(void (**)(char *, uint64_t))(v5 + 8);
  v50(v8, v4);
  v50(v10, v4);
  return v49 & 1;
}

uint64_t specialized static PgQuery_CoerceViaIO.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  int v68;
  int v69;
  BOOL v70;
  void (*v71)(char *, uint64_t, uint64_t);
  char *v72;
  void (*v73)(char *, uint64_t);
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v75 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v88 = *(_QWORD *)(Node - 8);
  v12 = MEMORY[0x1E0C80A78](Node);
  v82 = (uint64_t)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v86 = (uint64_t)&v75 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v16 = MEMORY[0x1E0C80A78](v15);
  v85 = (uint64_t)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v75 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v83 = (uint64_t)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v84 = (uint64_t)&v75 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v87 = (uint64_t)&v75 - v26;
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v75 - v27;
  v29 = *(int *)(type metadata accessor for PgQuery_CoerceViaIO(0) + 20);
  v30 = *(_QWORD *)(a1 + v29);
  v31 = *(_QWORD *)(a2 + v29);
  if (v30 == v31)
    goto LABEL_35;
  v77 = a2;
  v78 = a1;
  v76 = v10;
  v79 = v8;
  v80 = v4;
  v81 = v5;
  v32 = v30;
  v33 = v31;
  v34 = v30
      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v31 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  v35 = (uint64_t)&v19[*(int *)(v15 + 48)];
  outlined init with copy of PgQuery_Alias?(v34, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, v35, &demangling cache variable for type metadata for PgQuery_Node?);
  v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
  if (v36((uint64_t)v19, 1, Node) == 1)
  {
    v88 = Node;
    v37 = v36(v35, 1, Node);
    swift_retain();
    swift_retain();
    v38 = v32;
    v39 = v33;
    if (v37 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_11;
    }
    v41 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_26:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, v41);
    v66 = (uint64_t)v28;
LABEL_30:
    outlined destroy of (key: String, value: StorableValue)(v66, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_31;
  }
  v40 = v87;
  outlined init with copy of PgQuery_Alias?((uint64_t)v19, v87, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v36(v35, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    v41 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_25:
    outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_Node);
    goto LABEL_26;
  }
  v75 = v28;
  v42 = v86;
  outlined init with take of PgQuery_OidList(v35, v86, type metadata accessor for PgQuery_Node);
  v88 = Node;
  v43 = *(int *)(Node + 20);
  v44 = *(_QWORD *)(v40 + v43);
  v45 = *(_QWORD *)(v42 + v43);
  swift_retain();
  swift_retain();
  if (v44 != v45)
  {
    swift_retain();
    swift_retain();
    v46 = closure #1 in static PgQuery_Node.== infix(_:_:)(v44, v45);
    swift_release();
    swift_release();
    if (!v46)
    {
      outlined destroy of PgQuery_Alias(v86, type metadata accessor for PgQuery_Node);
      v41 = &demangling cache variable for type metadata for PgQuery_Node?;
      v28 = v75;
      v40 = v87;
      goto LABEL_25;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v48 = v86;
  v47 = v87;
  v49 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v48, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v47, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v75, &demangling cache variable for type metadata for PgQuery_Node?);
  v38 = v32;
  v39 = v33;
  if ((v49 & 1) == 0)
    goto LABEL_31;
LABEL_11:
  v50 = v38
      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  v51 = v84;
  outlined init with copy of PgQuery_Alias?(v39 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v84, &demangling cache variable for type metadata for PgQuery_Node?);
  v52 = v85;
  v53 = v85 + *(int *)(v15 + 48);
  outlined init with copy of PgQuery_Alias?(v50, v85, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v51, v53, &demangling cache variable for type metadata for PgQuery_Node?);
  v54 = v88;
  if (v36(v52, 1, v88) != 1)
  {
    v56 = v83;
    outlined init with copy of PgQuery_Alias?(v52, v83, &demangling cache variable for type metadata for PgQuery_Node?);
    v57 = v36(v53, 1, v54);
    v5 = v81;
    if (v57 == 1)
    {
      v58 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v59 = v82;
      outlined init with take of PgQuery_OidList(v53, v82, type metadata accessor for PgQuery_Node);
      v60 = *(int *)(v54 + 20);
      v61 = *(_QWORD *)(v56 + v60);
      v62 = *(_QWORD *)(v59 + v60);
      if (v61 == v62
        || (swift_retain(),
            swift_retain(),
            v63 = closure #1 in static PgQuery_Node.== infix(_:_:)(v61, v62),
            swift_release(),
            swift_release(),
            v63))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v64 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v59, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v56, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)(v52, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v51, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v64 & 1) == 0)
          goto LABEL_31;
        goto LABEL_20;
      }
      outlined destroy of PgQuery_Alias(v59, type metadata accessor for PgQuery_Node);
      v58 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v56, type metadata accessor for PgQuery_Node);
    goto LABEL_29;
  }
  v55 = v36(v53, 1, v54);
  v5 = v81;
  if (v55 != 1)
  {
    v58 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_29:
    outlined destroy of (key: String, value: StorableValue)(v52, v58);
    v66 = v51;
    goto LABEL_30;
  }
  outlined destroy of (key: String, value: StorableValue)(v52, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v51, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_20:
  if (*(_DWORD *)(v38
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) == *(_DWORD *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype)
    && *(_DWORD *)(v38
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid) == *(_DWORD *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid))
  {
    v65 = *(_QWORD *)(v39
                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat);
    if (*(_BYTE *)(v39
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat
                  + 8) == 1)
      __asm { BR              X11 }
    if (*(_QWORD *)(v38
                   + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat) == v65)
    {
      v68 = *(_DWORD *)(v38
                      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      v69 = *(_DWORD *)(v39
                      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      swift_release();
      swift_release();
      v70 = v68 == v69;
      a1 = v78;
      v8 = v79;
      v10 = v76;
      a2 = v77;
      v4 = v80;
      if (!v70)
      {
        v67 = 0;
        return v67 & 1;
      }
LABEL_35:
      v71 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v71(v10, a1, v4);
      v71(v8, a2, v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v72 = v8;
      v67 = dispatch thunk of static Equatable.== infix(_:_:)();
      v73 = *(void (**)(char *, uint64_t))(v5 + 8);
      v73(v72, v4);
      v73(v10, v4);
      return v67 & 1;
    }
  }
LABEL_31:
  swift_release();
  swift_release();
  v67 = 0;
  return v67 & 1;
}

uint64_t specialized static PgQuery_ClusterStmt.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t RangeVar;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t ClusterStmt;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char v31;
  char *v32;
  _QWORD *v33;
  char v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;

  v4 = type metadata accessor for UnknownStorage();
  v46 = *(_QWORD *)(v4 - 8);
  v47 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v45 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v44 = (char *)&v43 - v7;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v9 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v48 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v43 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v43 - v21;
  ClusterStmt = type metadata accessor for PgQuery_ClusterStmt(0);
  v24 = *(int *)(ClusterStmt + 28);
  v49 = a1;
  v25 = (uint64_t)a1 + v24;
  v26 = ClusterStmt;
  outlined init with copy of PgQuery_Alias?(v25, (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v27 = *(int *)(v26 + 28);
  v50 = a2;
  outlined init with copy of PgQuery_Alias?((uint64_t)&a2[v27], (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v28, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, RangeVar) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if (v29(v28, 1, RangeVar) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_8;
    }
LABEL_6:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    goto LABEL_13;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v29(v28, 1, RangeVar) == 1)
  {
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_6;
  }
  v30 = v48;
  outlined init with take of PgQuery_OidList(v28, v48, type metadata accessor for PgQuery_RangeVar);
  v31 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v17, v30);
  outlined destroy of PgQuery_Alias(v30, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v31 & 1) == 0)
    goto LABEL_13;
LABEL_8:
  v33 = v49;
  v32 = v50;
  if (*v49 == *(_QWORD *)v50 && v49[1] == *((_QWORD *)v50 + 1)
    || (v34 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*((_DWORD *)v33 + 4) == *((_DWORD *)v32 + 4))
    {
      v35 = (char *)v33 + *(int *)(v26 + 24);
      v37 = v46;
      v36 = v47;
      v38 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
      v39 = v44;
      v38(v44, v35, v47);
      v40 = v45;
      v38(v45, &v32[*(int *)(v26 + 24)], v36);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v34 = dispatch thunk of static Equatable.== infix(_:_:)();
      v41 = *(void (**)(char *, uint64_t))(v37 + 8);
      v41(v40, v36);
      v41(v39, v36);
      return v34 & 1;
    }
LABEL_13:
    v34 = 0;
  }
  return v34 & 1;
}

uint64_t specialized static PgQuery_CallContext.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  unsigned __int8 *v13;
  void (*v14)(char *, unsigned __int8 *, uint64_t);
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v17 - v9;
  if (*a1 == *a2)
  {
    v12 = type metadata accessor for PgQuery_CallContext(0);
    v13 = &a1[*(int *)(v12 + 20)];
    v14 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 16);
    v14(v10, v13, v4);
    v14(v8, &a2[*(int *)(v12 + 20)], v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v11 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v11 = 0;
  }
  return v11 & 1;
}

uint64_t specialized static PgQuery_BooleanTest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t Node;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t BooleanTest;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  char v63;
  uint64_t v64;
  int v65;
  int v66;
  BOOL v67;
  void (*v68)(char *, uint64_t, uint64_t);
  char *v69;
  char v70;
  void (*v71)(char *, uint64_t);
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v87 = a1;
  v3 = type metadata accessor for UnknownStorage();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v73 - v8;
  Node = type metadata accessor for PgQuery_Node(0);
  v11 = *(_QWORD *)(Node - 8);
  v12 = MEMORY[0x1E0C80A78](Node);
  v81 = (uint64_t)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v83 = (uint64_t)&v73 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v16 = MEMORY[0x1E0C80A78](v15);
  v85 = (uint64_t)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v73 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v82 = (uint64_t)&v73 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v84 = (uint64_t)&v73 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v86 = (uint64_t)&v73 - v26;
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v73 - v27;
  BooleanTest = type metadata accessor for PgQuery_BooleanTest(0);
  v30 = v87;
  v31 = *(int *)(BooleanTest + 20);
  v32 = *(_QWORD *)(a2 + v31);
  v88 = *(_QWORD *)(v87 + v31);
  if (v88 == v32)
    goto LABEL_28;
  v74 = v9;
  v75 = a2;
  v76 = v7;
  v78 = v4;
  v80 = v3;
  v33 = v88
      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  v34 = v32;
  outlined init with copy of PgQuery_Alias?(v32 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  v79 = v15;
  v35 = (uint64_t)&v19[*(int *)(v15 + 48)];
  outlined init with copy of PgQuery_Alias?(v33, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, v35, &demangling cache variable for type metadata for PgQuery_Node?);
  v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v36((uint64_t)v19, 1, Node) == 1)
  {
    v77 = Node;
    v37 = v36(v35, 1, Node);
    swift_retain();
    swift_retain();
    if (v37 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
      v38 = v80;
      v39 = v34;
      goto LABEL_11;
    }
    v42 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_24:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, v42);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_32;
  }
  v40 = v34;
  v41 = v86;
  outlined init with copy of PgQuery_Alias?((uint64_t)v19, v86, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v36(v35, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    v42 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_23:
    outlined destroy of PgQuery_Alias(v41, type metadata accessor for PgQuery_Node);
    goto LABEL_24;
  }
  v43 = v83;
  outlined init with take of PgQuery_OidList(v35, v83, type metadata accessor for PgQuery_Node);
  v77 = Node;
  v44 = *(int *)(Node + 20);
  v45 = *(_QWORD *)(v41 + v44);
  v46 = *(_QWORD *)(v43 + v44);
  swift_retain();
  swift_retain();
  if (v45 != v46)
  {
    swift_retain();
    swift_retain();
    v47 = closure #1 in static PgQuery_Node.== infix(_:_:)(v45, v46);
    swift_release();
    swift_release();
    if (!v47)
    {
      outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_Node);
      v42 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_23;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v38 = v80;
  v48 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v41, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  v39 = v40;
  if ((v48 & 1) == 0)
    goto LABEL_32;
LABEL_11:
  v49 = v88
      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  v50 = v39;
  v51 = v84;
  outlined init with copy of PgQuery_Alias?(v39 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v84, &demangling cache variable for type metadata for PgQuery_Node?);
  v52 = v85;
  v53 = v85 + *(int *)(v79 + 48);
  outlined init with copy of PgQuery_Alias?(v49, v85, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v51, v53, &demangling cache variable for type metadata for PgQuery_Node?);
  v54 = v77;
  if (v36(v52, 1, v77) == 1)
  {
    if (v36(v53, 1, v54) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v52, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)(v51, &demangling cache variable for type metadata for PgQuery_Node?);
      v55 = v50;
      goto LABEL_20;
    }
    v57 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_31;
  }
  v56 = v82;
  outlined init with copy of PgQuery_Alias?(v52, v82, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v36(v53, 1, v54) == 1)
  {
    v57 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_30:
    outlined destroy of PgQuery_Alias(v56, type metadata accessor for PgQuery_Node);
LABEL_31:
    outlined destroy of (key: String, value: StorableValue)(v52, v57);
    outlined destroy of (key: String, value: StorableValue)(v51, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_32;
  }
  v58 = v81;
  outlined init with take of PgQuery_OidList(v53, v81, type metadata accessor for PgQuery_Node);
  v59 = *(int *)(v54 + 20);
  v60 = *(_QWORD *)(v56 + v59);
  v61 = *(_QWORD *)(v58 + v59);
  if (v60 != v61)
  {
    swift_retain();
    swift_retain();
    v62 = closure #1 in static PgQuery_Node.== infix(_:_:)(v60, v61);
    swift_release();
    swift_release();
    if (!v62)
    {
      outlined destroy of PgQuery_Alias(v58, type metadata accessor for PgQuery_Node);
      v57 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_30;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v63 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v58, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v56, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v52, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v51, &demangling cache variable for type metadata for PgQuery_Node?);
  v55 = v50;
  if ((v63 & 1) == 0)
  {
LABEL_32:
    swift_release();
    swift_release();
LABEL_33:
    v70 = 0;
    return v70 & 1;
  }
LABEL_20:
  v64 = *(_QWORD *)(v55
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLtesttype);
  if (*(_BYTE *)(v55
                + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLtesttype
                + 8) == 1)
    __asm { BR              X11 }
  v4 = v78;
  if (*(_QWORD *)(v88
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLtesttype) != v64)
    goto LABEL_32;
  v65 = *(_DWORD *)(v88
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  v66 = *(_DWORD *)(v55
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  v67 = v65 == v66;
  a2 = v75;
  v7 = v76;
  v9 = v74;
  v30 = v87;
  v3 = v38;
  if (!v67)
    goto LABEL_33;
LABEL_28:
  v68 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v68(v9, v30, v3);
  v68(v7, a2, v3);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v69 = v7;
  v70 = dispatch thunk of static Equatable.== infix(_:_:)();
  v71 = *(void (**)(char *, uint64_t))(v4 + 8);
  v71(v69, v3);
  v71(v9, v3);
  return v70 & 1;
}

uint64_t specialized static PgQuery_WindowFunc.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t WindowFunc;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(uint64_t, uint64_t, uint64_t);
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  char v71;
  int v72;
  int v73;
  BOOL v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t, uint64_t);
  char *v77;
  void (*v78)(char *, uint64_t);
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v80 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v94 = *(_QWORD *)(Node - 8);
  v95 = Node;
  v12 = MEMORY[0x1E0C80A78](Node);
  v88 = (uint64_t)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v92 = (uint64_t)&v80 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v16 = MEMORY[0x1E0C80A78](v15);
  v90 = (uint64_t)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v80 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v89 = (uint64_t)&v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v91 = (uint64_t)&v80 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v93 = (uint64_t)&v80 - v26;
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v80 - v27;
  WindowFunc = type metadata accessor for PgQuery_WindowFunc(0);
  v30 = a1;
  v31 = *(int *)(WindowFunc + 20);
  v32 = *(_QWORD *)(a1 + v31);
  v33 = *(_QWORD *)(a2 + v31);
  if (v32 == v33)
    goto LABEL_34;
  v82 = a2;
  v83 = v30;
  v81 = v10;
  v84 = v8;
  v85 = v5;
  v87 = v4;
  v34 = v32
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v33 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  v86 = v15;
  v35 = (uint64_t)&v19[*(int *)(v15 + 48)];
  outlined init with copy of PgQuery_Alias?(v34, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  v36 = (uint64_t)v28;
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, v35, &demangling cache variable for type metadata for PgQuery_Node?);
  v37 = v95;
  v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48);
  if (v38((uint64_t)v19, 1, v95) == 1)
  {
    v39 = v38(v35, 1, v37);
    swift_retain();
    v40 = v33;
    swift_retain();
    if (v39 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)(v36, &demangling cache variable for type metadata for PgQuery_Node?);
      v41 = v87;
      goto LABEL_11;
    }
    v43 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    v44 = v36;
LABEL_21:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, v43);
    outlined destroy of (key: String, value: StorableValue)(v44, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_22;
  }
  v40 = v33;
  v42 = v93;
  outlined init with copy of PgQuery_Alias?((uint64_t)v19, v93, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v38(v35, 1, v37) == 1)
  {
    swift_retain();
    swift_retain();
    v43 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    v44 = v36;
LABEL_20:
    outlined destroy of PgQuery_Alias(v42, type metadata accessor for PgQuery_Node);
    goto LABEL_21;
  }
  v45 = v92;
  outlined init with take of PgQuery_OidList(v35, v92, type metadata accessor for PgQuery_Node);
  v46 = *(int *)(v37 + 20);
  v47 = *(_QWORD *)(v42 + v46);
  v48 = *(_QWORD *)(v45 + v46);
  swift_retain();
  swift_retain();
  v44 = v36;
  if (v47 != v48)
  {
    swift_retain();
    swift_retain();
    v49 = closure #1 in static PgQuery_Node.== infix(_:_:)(v47, v48);
    swift_release();
    swift_release();
    if (!v49)
    {
      outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_Node);
      v43 = &demangling cache variable for type metadata for PgQuery_Node?;
      v42 = v93;
      goto LABEL_20;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v50 = v93;
  v41 = v87;
  v51 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v50, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v44, &demangling cache variable for type metadata for PgQuery_Node?);
  v37 = v95;
  if ((v51 & 1) == 0)
    goto LABEL_22;
LABEL_11:
  if (*(_DWORD *)(v32
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winfnoid) != *(_DWORD *)(v40 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winfnoid))
    goto LABEL_22;
  if (*(_DWORD *)(v32
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__wintype) != *(_DWORD *)(v40 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__wintype))
    goto LABEL_22;
  if (*(_DWORD *)(v32
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__wincollid) != *(_DWORD *)(v40 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__wincollid))
    goto LABEL_22;
  if (*(_DWORD *)(v32
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) != *(_DWORD *)(v40 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
    goto LABEL_22;
  v52 = *(_QWORD *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  v53 = *(_QWORD *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v54 = specialized static Array<A>.== infix(_:_:)(v52, v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v54 & 1) == 0)
    goto LABEL_22;
  v55 = v32;
  v56 = v32
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfilter;
  v95 = v40;
  v57 = v38;
  v58 = v91;
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfilter, v91, &demangling cache variable for type metadata for PgQuery_Node?);
  v59 = v90;
  v60 = v90 + *(int *)(v86 + 48);
  outlined init with copy of PgQuery_Alias?(v56, v90, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v58, v60, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v57(v59, 1, v37) != 1)
  {
    v63 = v89;
    outlined init with copy of PgQuery_Alias?(v59, v89, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v57(v60, 1, v37) == 1)
    {
      v64 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v65 = v88;
      outlined init with take of PgQuery_OidList(v60, v88, type metadata accessor for PgQuery_Node);
      v66 = *(int *)(v37 + 20);
      v67 = *(_QWORD *)(v63 + v66);
      v68 = *(_QWORD *)(v65 + v66);
      if (v67 == v68
        || (swift_retain(),
            swift_retain(),
            v69 = closure #1 in static PgQuery_Node.== infix(_:_:)(v67, v68),
            swift_release(),
            swift_release(),
            v69))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v70 = v89;
        v71 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v65, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v70, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)(v59, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v91, &demangling cache variable for type metadata for PgQuery_Node?);
        v61 = v55;
        if ((v71 & 1) == 0)
          goto LABEL_22;
        goto LABEL_29;
      }
      outlined destroy of PgQuery_Alias(v65, type metadata accessor for PgQuery_Node);
      v64 = &demangling cache variable for type metadata for PgQuery_Node?;
      v63 = v89;
    }
    outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
LABEL_38:
    outlined destroy of (key: String, value: StorableValue)(v59, v64);
    outlined destroy of (key: String, value: StorableValue)(v91, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_22;
  }
  if (v57(v60, 1, v37) != 1)
  {
    v64 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_38;
  }
  outlined destroy of (key: String, value: StorableValue)(v59, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v91, &demangling cache variable for type metadata for PgQuery_Node?);
  v61 = v55;
LABEL_29:
  if (*(_DWORD *)(v61
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winref) == *(_DWORD *)(v95 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winref)
    && *(unsigned __int8 *)(v61
                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winstar) == *(unsigned __int8 *)(v95 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winstar)
    && *(unsigned __int8 *)(v61
                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winagg) == *(unsigned __int8 *)(v95 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winagg))
  {
    v72 = *(_DWORD *)(v61
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    v73 = *(_DWORD *)(v95
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    swift_release();
    v74 = v72 == v73;
    v8 = v84;
    v5 = v85;
    v10 = v81;
    a2 = v82;
    v30 = v83;
    v4 = v41;
    if (!v74)
    {
      v62 = 0;
      return v62 & 1;
    }
LABEL_34:
    v75 = v5;
    v76 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v76(v10, v30, v4);
    v76(v8, a2, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v77 = v8;
    v62 = dispatch thunk of static Equatable.== infix(_:_:)();
    v78 = *(void (**)(char *, uint64_t))(v75 + 8);
    v78(v77, v4);
    v78(v10, v4);
    return v62 & 1;
  }
LABEL_22:
  swift_release();
  swift_release();
  v62 = 0;
  return v62 & 1;
}

uint64_t specialized static PgQuery_ObjectWithArgs.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  void (*v18)(char *, uint64_t);
  uint64_t v19;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v19 - v11;
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8)) & 1) != 0
    && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    v15 = a3(0);
    v16 = a1 + *(int *)(v15 + 28);
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v17(v12, v16, v6);
    v17(v10, a2 + *(int *)(v15 + 28), v6);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18 = *(void (**)(char *, uint64_t))(v7 + 8);
    v18(v10, v6);
    v18(v12, v6);
  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static PgQuery_UpdateStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Node;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t RangeVar;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t UpdateStmt;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  int v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t, uint64_t);
  uint64_t v85;
  char *v86;
  void (*v87)(char *, uint64_t);
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;

  v4 = type metadata accessor for UnknownStorage();
  v109 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v108 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v89 - v7;
  v9 = type metadata accessor for PgQuery_WithClause(0);
  v96 = *(_QWORD *)(v9 - 8);
  v97 = v9;
  MEMORY[0x1E0C80A78](v9);
  v93 = (uint64_t)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_WithClause?, PgQuery_WithClause?));
  MEMORY[0x1E0C80A78](v95);
  v99 = (uint64_t)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WithClause?);
  v13 = MEMORY[0x1E0C80A78](v12);
  v94 = (uint64_t)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v98 = (uint64_t)&v89 - v15;
  Node = type metadata accessor for PgQuery_Node(0);
  v103 = *(_QWORD *)(Node - 8);
  v104 = Node;
  MEMORY[0x1E0C80A78](Node);
  v100 = (uint64_t)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v102);
  v106 = (uint64_t)&v89 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v20 = MEMORY[0x1E0C80A78](v19);
  v101 = (uint64_t)&v89 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v105 = (uint64_t)&v89 - v22;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v24 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v107 = (uint64_t)&v89 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v89 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v30 = MEMORY[0x1E0C80A78](v29);
  v32 = (char *)&v89 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30);
  v34 = (char *)&v89 - v33;
  UpdateStmt = type metadata accessor for PgQuery_UpdateStmt(0);
  v36 = a1;
  v37 = *(int *)(UpdateStmt + 20);
  v38 = *(_QWORD *)(a1 + v37);
  v39 = a2;
  v40 = *(_QWORD *)(a2 + v37);
  v41 = v39;
  if (v38 == v40)
    goto LABEL_36;
  v89 = v36;
  v90 = v39;
  v91 = v8;
  v92 = v4;
  v42 = v38
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v34, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v43 = (uint64_t)&v28[*(int *)(v26 + 48)];
  outlined init with copy of PgQuery_Alias?(v42, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v34, v43, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  if (v44((uint64_t)v28, 1, RangeVar) == 1)
  {
    v45 = v44(v43, 1, RangeVar);
    swift_retain();
    swift_retain();
    if (v45 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v34, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_9;
    }
LABEL_7:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v34, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    goto LABEL_13;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, (uint64_t)v32, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v44(v43, 1, RangeVar) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v32, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_7;
  }
  v46 = v107;
  outlined init with take of PgQuery_OidList(v43, v107, type metadata accessor for PgQuery_RangeVar);
  swift_retain();
  swift_retain();
  v47 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v32, v46);
  outlined destroy of PgQuery_Alias(v46, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias((uint64_t)v32, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v34, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v47 & 1) == 0)
    goto LABEL_13;
LABEL_9:
  v48 = *(_QWORD *)(v38
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList);
  v49 = *(_QWORD *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v50 = specialized static Array<A>.== infix(_:_:)(v48, v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v50 & 1) == 0)
    goto LABEL_13;
  v51 = v38;
  v52 = v38
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  v53 = v105;
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v105, &demangling cache variable for type metadata for PgQuery_Node?);
  v54 = v106;
  v55 = v106 + *(int *)(v102 + 48);
  outlined init with copy of PgQuery_Alias?(v52, v106, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v53, v55, &demangling cache variable for type metadata for PgQuery_Node?);
  v56 = v104;
  v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48);
  if (v57(v54, 1, v104) != 1)
  {
    v60 = v101;
    outlined init with copy of PgQuery_Alias?(v54, v101, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v57(v55, 1, v56) == 1)
    {
      v61 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v62 = v100;
      outlined init with take of PgQuery_OidList(v55, v100, type metadata accessor for PgQuery_Node);
      v63 = *(int *)(v56 + 20);
      v64 = *(_QWORD *)(v60 + v63);
      v65 = *(_QWORD *)(v62 + v63);
      if (v64 == v65
        || (swift_retain(),
            swift_retain(),
            v66 = closure #1 in static PgQuery_Node.== infix(_:_:)(v64, v65),
            swift_release(),
            swift_release(),
            v66))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v58 = v92;
        v67 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v60, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)(v54, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v53, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v67 & 1) == 0)
          goto LABEL_13;
        goto LABEL_20;
      }
      outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_Node);
      v61 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v60, type metadata accessor for PgQuery_Node);
LABEL_28:
    outlined destroy of (key: String, value: StorableValue)(v54, v61);
    v79 = &demangling cache variable for type metadata for PgQuery_Node?;
LABEL_29:
    outlined destroy of (key: String, value: StorableValue)(v53, v79);
    goto LABEL_13;
  }
  if (v57(v55, 1, v56) != 1)
  {
    v61 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_28;
  }
  outlined destroy of (key: String, value: StorableValue)(v54, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v53, &demangling cache variable for type metadata for PgQuery_Node?);
  v58 = v92;
LABEL_20:
  v68 = *(_QWORD *)(v51
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fromClause);
  v69 = *(_QWORD *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fromClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v70 = specialized static Array<A>.== infix(_:_:)(v68, v69);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v70 & 1) == 0)
    goto LABEL_13;
  v71 = *(_QWORD *)(v51
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList);
  v72 = *(_QWORD *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v73 = specialized static Array<A>.== infix(_:_:)(v71, v72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v73 & 1) == 0)
    goto LABEL_13;
  v74 = v51
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause;
  v53 = v98;
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, v98, &demangling cache variable for type metadata for PgQuery_WithClause?);
  v75 = v99;
  v76 = v99 + *(int *)(v95 + 48);
  outlined init with copy of PgQuery_Alias?(v74, v99, &demangling cache variable for type metadata for PgQuery_WithClause?);
  outlined init with copy of PgQuery_Alias?(v53, v76, &demangling cache variable for type metadata for PgQuery_WithClause?);
  v77 = v97;
  v78 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v96 + 48);
  if (v78(v75, 1, v97) == 1)
  {
    if (v78(v76, 1, v77) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v75, &demangling cache variable for type metadata for PgQuery_WithClause?);
      outlined destroy of (key: String, value: StorableValue)(v53, &demangling cache variable for type metadata for PgQuery_WithClause?);
LABEL_35:
      swift_release();
      swift_release();
      v4 = v58;
      v41 = v90;
      v8 = v91;
      v36 = v89;
LABEL_36:
      v83 = v109;
      v84 = *(void (**)(char *, uint64_t, uint64_t))(v109 + 16);
      v85 = v41;
      v84(v8, v36, v4);
      v86 = v108;
      v84(v108, v85, v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v59 = dispatch thunk of static Equatable.== infix(_:_:)();
      v87 = *(void (**)(char *, uint64_t))(v83 + 8);
      v87(v86, v4);
      v87(v8, v4);
      return v59 & 1;
    }
    goto LABEL_33;
  }
  v80 = v94;
  outlined init with copy of PgQuery_Alias?(v75, v94, &demangling cache variable for type metadata for PgQuery_WithClause?);
  if (v78(v76, 1, v77) == 1)
  {
    outlined destroy of PgQuery_Alias(v80, type metadata accessor for PgQuery_WithClause);
LABEL_33:
    outlined destroy of (key: String, value: StorableValue)(v75, &demangling cache variable for type metadata for (PgQuery_WithClause?, PgQuery_WithClause?));
    v79 = &demangling cache variable for type metadata for PgQuery_WithClause?;
    goto LABEL_29;
  }
  v81 = v93;
  outlined init with take of PgQuery_OidList(v76, v93, type metadata accessor for PgQuery_WithClause);
  v82 = specialized static PgQuery_WithClause.== infix(_:_:)(v80, v81);
  outlined destroy of PgQuery_Alias(v81, type metadata accessor for PgQuery_WithClause);
  outlined destroy of PgQuery_Alias(v80, type metadata accessor for PgQuery_WithClause);
  outlined destroy of (key: String, value: StorableValue)(v75, &demangling cache variable for type metadata for PgQuery_WithClause?);
  outlined destroy of (key: String, value: StorableValue)(v53, &demangling cache variable for type metadata for PgQuery_WithClause?);
  if ((v82 & 1) != 0)
    goto LABEL_35;
LABEL_13:
  swift_release();
  swift_release();
  v59 = 0;
  return v59 & 1;
}

uint64_t specialized static PgQuery_WithClause.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v17 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & 1) != 0
    && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12))
  {
    v11 = type metadata accessor for PgQuery_WithClause(0);
    v12 = a1 + *(int *)(v11 + 28);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, a2 + *(int *)(v11 + 28), v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static PgQuery_ParseResult.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD), uint64_t (*a4)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v21 - v13;
  if (*(_DWORD *)a1 == *(_DWORD *)a2 && (a3(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8)) & 1) != 0)
  {
    v15 = a4(0);
    v16 = a1 + *(int *)(v15 + 24);
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v17(v14, v16, v8);
    v17(v12, a2 + *(int *)(v15 + 24), v8);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    v19 = *(void (**)(char *, uint64_t))(v9 + 8);
    v19(v12, v8);
    v19(v14, v8);
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized static PgQuery_RenameStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t RenameStmt;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t);
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  char v71;
  char v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  int v77;
  int v78;
  BOOL v79;
  void (*v80)(char *, uint64_t, uint64_t);
  char *v81;
  void (*v82)(char *, uint64_t);
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t RangeVar;
  uint64_t v99;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v84 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v93 = *(_QWORD *)(Node - 8);
  v94 = Node;
  MEMORY[0x1E0C80A78](Node);
  v89 = (uint64_t)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v92);
  v96 = (uint64_t)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v91 = (uint64_t)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v95 = (uint64_t)&v84 - v17;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v18 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v90 = (uint64_t)&v84 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1E0C80A78](v20);
  v99 = (uint64_t)&v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v23 = MEMORY[0x1E0C80A78](v22);
  v97 = (uint64_t)&v84 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v84 - v25;
  RenameStmt = type metadata accessor for PgQuery_RenameStmt(0);
  v28 = a1;
  v29 = *(int *)(RenameStmt + 20);
  v30 = *(_QWORD *)(a1 + v29);
  v31 = *(_QWORD *)(a2 + v29);
  if (v30 == v31)
    goto LABEL_43;
  v84 = v28;
  v85 = v10;
  v86 = v8;
  v87 = v5;
  v88 = v4;
  v32 = *(_QWORD *)(v31 + 16);
  v33 = *(unsigned __int8 *)(v31 + 24);
  v34 = destructiveProjectEnumData for StorableValue(*(_QWORD *)(v30 + 16), *(unsigned __int8 *)(v30 + 24));
  if (v34 != destructiveProjectEnumData for StorableValue(v32, v33))
    goto LABEL_42;
  v35 = *(_QWORD *)(v31 + 32);
  v36 = *(unsigned __int8 *)(v31 + 40);
  v37 = destructiveProjectEnumData for StorableValue(*(_QWORD *)(v30 + 32), *(unsigned __int8 *)(v30 + 40));
  if (v37 != destructiveProjectEnumData for StorableValue(v35, v36))
    goto LABEL_42;
  v38 = v30
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  v39 = (uint64_t)v26;
  outlined init with copy of PgQuery_Alias?(v31+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v26, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v40 = v99;
  v41 = v99 + *(int *)(v20 + 48);
  outlined init with copy of PgQuery_Alias?(v38, v99, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v26, v41, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  v43 = RangeVar;
  if (v42(v40, 1, RangeVar) == 1)
  {
    v44 = v42(v41, 1, v43);
    swift_retain();
    v45 = v31;
    swift_retain();
    if (v44 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v40, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of (key: String, value: StorableValue)(v39, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_11;
    }
LABEL_9:
    outlined destroy of (key: String, value: StorableValue)(v40, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    outlined destroy of (key: String, value: StorableValue)(v39, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    goto LABEL_37;
  }
  v45 = v31;
  v46 = v97;
  outlined init with copy of PgQuery_Alias?(v40, v97, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v42(v41, 1, v43) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias(v46, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_9;
  }
  v47 = v41;
  v48 = v90;
  outlined init with take of PgQuery_OidList(v47, v90, type metadata accessor for PgQuery_RangeVar);
  swift_retain();
  swift_retain();
  v49 = specialized static PgQuery_RangeVar.== infix(_:_:)(v46, v48);
  outlined destroy of PgQuery_Alias(v48, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias(v46, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of (key: String, value: StorableValue)(v40, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of (key: String, value: StorableValue)(v39, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v49 & 1) == 0)
    goto LABEL_37;
LABEL_11:
  v50 = v30;
  v51 = v30
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  v52 = v45;
  v53 = v95;
  outlined init with copy of PgQuery_Alias?(v45+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, v95, &demangling cache variable for type metadata for PgQuery_Node?);
  v54 = v96;
  v55 = v96 + *(int *)(v92 + 48);
  outlined init with copy of PgQuery_Alias?(v51, v96, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v53, v55, &demangling cache variable for type metadata for PgQuery_Node?);
  v56 = v94;
  v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 48);
  if (v57(v54, 1, v94) == 1)
  {
    v58 = v57(v55, 1, v56);
    v4 = v88;
    if (v58 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v54, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)(v53, &demangling cache variable for type metadata for PgQuery_Node?);
      v59 = v52;
      goto LABEL_21;
    }
    v62 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_36:
    outlined destroy of (key: String, value: StorableValue)(v54, v62);
    outlined destroy of (key: String, value: StorableValue)(v53, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_37;
  }
  v60 = v91;
  outlined init with copy of PgQuery_Alias?(v54, v91, &demangling cache variable for type metadata for PgQuery_Node?);
  v61 = v57(v55, 1, v56);
  v4 = v88;
  if (v61 == 1)
  {
    v62 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_35:
    outlined destroy of PgQuery_Alias(v60, type metadata accessor for PgQuery_Node);
    goto LABEL_36;
  }
  v63 = v55;
  v64 = v56;
  v65 = v89;
  outlined init with take of PgQuery_OidList(v63, v89, type metadata accessor for PgQuery_Node);
  v66 = *(int *)(v64 + 20);
  v67 = *(_QWORD *)(v60 + v66);
  v68 = *(_QWORD *)(v65 + v66);
  if (v67 != v68)
  {
    swift_retain();
    swift_retain();
    v69 = closure #1 in static PgQuery_Node.== infix(_:_:)(v67, v68);
    swift_release();
    swift_release();
    if (!v69)
    {
      outlined destroy of PgQuery_Alias(v65, type metadata accessor for PgQuery_Node);
      v62 = &demangling cache variable for type metadata for PgQuery_Node?;
      v60 = v91;
      goto LABEL_35;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v70 = v91;
  v71 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v65, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v70, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v54, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v53, &demangling cache variable for type metadata for PgQuery_Node?);
  v59 = v52;
  if ((v71 & 1) == 0)
    goto LABEL_37;
LABEL_21:
  if (*(_QWORD *)(v50
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subname) != *(_QWORD *)(v59 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subname)
    || *(_QWORD *)(v50
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subname
                 + 8) != *(_QWORD *)(v59
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subname
                                   + 8))
  {
    v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v59 = v52;
    if ((v72 & 1) == 0)
      goto LABEL_37;
  }
  if (*(_QWORD *)(v50
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newname) != *(_QWORD *)(v59 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newname)
    || *(_QWORD *)(v50
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newname
                 + 8) != *(_QWORD *)(v59
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newname
                                   + 8))
  {
    v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v59 = v52;
    if ((v73 & 1) == 0)
      goto LABEL_37;
  }
  v74 = *(_QWORD *)(v50
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior);
  v75 = *(_QWORD *)(v59
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior);
  if (*(_BYTE *)(v59
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior
                + 8) != 1)
  {
    if (v74 != v75)
      goto LABEL_37;
LABEL_41:
    v77 = *(unsigned __int8 *)(v50
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk);
    v78 = *(unsigned __int8 *)(v59
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk);
    swift_release();
    swift_release();
    v79 = v77 == v78;
    v10 = v85;
    v8 = v86;
    v28 = v84;
    v5 = v87;
    if (!v79)
    {
LABEL_42:
      v76 = 0;
      return v76 & 1;
    }
LABEL_43:
    v80 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v80(v10, v28, v4);
    v80(v8, a2, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v81 = v8;
    v76 = dispatch thunk of static Equatable.== infix(_:_:)();
    v82 = *(void (**)(char *, uint64_t))(v5 + 8);
    v82(v81, v4);
    v82(v10, v4);
    return v76 & 1;
  }
  if (!v75)
  {
    if (v74)
      goto LABEL_37;
    goto LABEL_41;
  }
  if (v75 == 1)
  {
    if (v74 == 1)
      goto LABEL_41;
  }
  else if (v74 == 2)
  {
    goto LABEL_41;
  }
LABEL_37:
  swift_release();
  swift_release();
  v76 = 0;
  return v76 & 1;
}

uint64_t specialized static PgQuery_NullIfExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t NullIfExpr;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  int v45;
  int v46;
  BOOL v47;
  void (*v48)(char *, uint64_t, uint64_t);
  char v49;
  void (*v50)(char *, uint64_t);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v52 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v60 = *(_QWORD *)(Node - 8);
  v61 = Node;
  MEMORY[0x1E0C80A78](Node);
  v58 = (uint64_t)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v59 = (uint64_t)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v52 - v19;
  NullIfExpr = type metadata accessor for PgQuery_NullIfExpr(0);
  v22 = a1;
  v23 = *(int *)(NullIfExpr + 20);
  v24 = *(_QWORD *)(a1 + v23);
  v25 = *(_QWORD *)(a2 + v23);
  if (v24 == v25)
    goto LABEL_20;
  v54 = a2;
  v55 = v22;
  v53 = v10;
  v56 = v5;
  v57 = v4;
  v26 = v24
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v25 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  v28 = (uint64_t)v20;
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v27, &demangling cache variable for type metadata for PgQuery_Node?);
  v29 = v61;
  v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48);
  if (v30((uint64_t)v15, 1, v61) != 1)
  {
    v32 = v25;
    v33 = v59;
    outlined init with copy of PgQuery_Alias?((uint64_t)v15, v59, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v30(v27, 1, v29) == 1)
    {
      swift_retain();
      swift_retain();
      v34 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v35 = v58;
      outlined init with take of PgQuery_OidList(v27, v58, type metadata accessor for PgQuery_Node);
      v36 = *(int *)(v29 + 20);
      v37 = *(_QWORD *)(v33 + v36);
      v38 = *(_QWORD *)(v35 + v36);
      swift_retain();
      swift_retain();
      if (v37 == v38
        || (swift_retain(),
            swift_retain(),
            v39 = closure #1 in static PgQuery_Node.== infix(_:_:)(v37, v38),
            swift_release(),
            swift_release(),
            v39))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v40 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v28, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v40 & 1) != 0)
          goto LABEL_11;
LABEL_24:
        swift_release();
        swift_release();
LABEL_25:
        v49 = 0;
        return v49 & 1;
      }
      outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
      v34 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
LABEL_23:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, v34);
    outlined destroy of (key: String, value: StorableValue)(v28, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_24;
  }
  v31 = v30(v27, 1, v29);
  swift_retain();
  v32 = v25;
  swift_retain();
  if (v31 != 1)
  {
    v34 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_23;
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  if (*(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno))
    goto LABEL_24;
  if (*(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid))
    goto LABEL_24;
  if (*(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype))
    goto LABEL_24;
  if (*(unsigned __int8 *)(v24
                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset) != *(unsigned __int8 *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset))
    goto LABEL_24;
  if (*(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid))
    goto LABEL_24;
  if (*(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
    goto LABEL_24;
  v41 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  v42 = *(_QWORD *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  v43 = v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v44 = specialized static Array<A>.== infix(_:_:)(v41, v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v44 & 1) == 0)
    goto LABEL_24;
  v45 = *(_DWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  v46 = *(_DWORD *)(v43
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  v47 = v45 == v46;
  v5 = v56;
  v4 = v57;
  v10 = v53;
  a2 = v54;
  v22 = v55;
  if (!v47)
    goto LABEL_25;
LABEL_20:
  v48 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v48(v10, v22, v4);
  v48(v8, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v49 = dispatch thunk of static Equatable.== infix(_:_:)();
  v50 = *(void (**)(char *, uint64_t))(v5 + 8);
  v50(v8, v4);
  v50(v10, v4);
  return v49 & 1;
}

uint64_t specialized static PgQuery_ReplicaIdentityStmt.== infix(_:_:)(_QWORD *a1, char *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, char *, uint64_t);
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v21 - v11;
  v13 = *a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1);
  if (v13 || (v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v15 = a1[2] == *((_QWORD *)a2 + 2) && a1[3] == *((_QWORD *)a2 + 3);
    if (v15 || (v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      v16 = a3(0);
      v17 = (char *)a1 + *(int *)(v16 + 24);
      v18 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      v18(v12, v17, v6);
      v18(v10, &a2[*(int *)(v16 + 24)], v6);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      v19 = *(void (**)(char *, uint64_t))(v7 + 8);
      v19(v10, v6);
      v19(v12, v6);
    }
  }
  return v14 & 1;
}

uint64_t specialized static PgQuery_MinMaxExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t MinMaxExpr;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  int v48;
  int v49;
  BOOL v50;
  void (*v51)(char *, uint64_t, uint64_t);
  void (*v52)(char *, uint64_t);
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v54 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v62 = *(_QWORD *)(Node - 8);
  v63 = Node;
  MEMORY[0x1E0C80A78](Node);
  v60 = (uint64_t)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v61 = (uint64_t)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v54 - v19;
  MinMaxExpr = type metadata accessor for PgQuery_MinMaxExpr(0);
  v22 = a1;
  v23 = *(int *)(MinMaxExpr + 20);
  v24 = *(_QWORD *)(a1 + v23);
  v25 = *(_QWORD *)(a2 + v23);
  if (v24 == v25)
    goto LABEL_31;
  v56 = a2;
  v57 = v22;
  v55 = v10;
  v58 = v5;
  v59 = v4;
  v26 = v24
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v25 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  v28 = (uint64_t)v20;
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v27, &demangling cache variable for type metadata for PgQuery_Node?);
  v29 = v63;
  v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48);
  if (v30((uint64_t)v15, 1, v63) != 1)
  {
    v32 = v25;
    v33 = v61;
    outlined init with copy of PgQuery_Alias?((uint64_t)v15, v61, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v30(v27, 1, v29) == 1)
    {
      swift_retain();
      swift_retain();
      v34 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v35 = v60;
      outlined init with take of PgQuery_OidList(v27, v60, type metadata accessor for PgQuery_Node);
      v36 = *(int *)(v29 + 20);
      v37 = *(_QWORD *)(v33 + v36);
      v38 = *(_QWORD *)(v35 + v36);
      swift_retain();
      swift_retain();
      if (v37 == v38
        || (swift_retain(),
            swift_retain(),
            v39 = closure #1 in static PgQuery_Node.== infix(_:_:)(v37, v38),
            swift_release(),
            swift_release(),
            v39))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v40 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v28, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v40 & 1) == 0)
          goto LABEL_22;
        goto LABEL_11;
      }
      outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
      v34 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
LABEL_21:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, v34);
    outlined destroy of (key: String, value: StorableValue)(v28, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_22;
  }
  v31 = v30(v27, 1, v29);
  swift_retain();
  v32 = v25;
  swift_retain();
  if (v31 != 1)
  {
    v34 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_21;
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  if (*(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__minmaxtype) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__minmaxtype)
    || *(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__minmaxcollid) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__minmaxcollid)
    || *(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
  {
    goto LABEL_22;
  }
  v41 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op);
  v42 = *(_QWORD *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op);
  if (*(_BYTE *)(v32
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op
                + 8) == 1)
  {
    if (v42)
    {
      if (v42 == 1)
      {
        if (v41 != 1)
          goto LABEL_22;
      }
      else if (v41 != 2)
      {
        goto LABEL_22;
      }
    }
    else if (v41)
    {
      goto LABEL_22;
    }
  }
  else if (v41 != v42)
  {
    goto LABEL_22;
  }
  v44 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  v45 = *(_QWORD *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  v46 = v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v47 = specialized static Array<A>.== infix(_:_:)(v44, v45);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v47 & 1) != 0)
  {
    v48 = *(_DWORD *)(v24
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    v49 = *(_DWORD *)(v46
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    swift_release();
    v50 = v48 == v49;
    v5 = v58;
    v4 = v59;
    v10 = v55;
    a2 = v56;
    v22 = v57;
    if (!v50)
    {
      v43 = 0;
      return v43 & 1;
    }
LABEL_31:
    v51 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v51(v10, v22, v4);
    v51(v8, a2, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v43 = dispatch thunk of static Equatable.== infix(_:_:)();
    v52 = *(void (**)(char *, uint64_t))(v5 + 8);
    v52(v8, v4);
    v52(v10, v4);
    return v43 & 1;
  }
LABEL_22:
  swift_release();
  swift_release();
  v43 = 0;
  return v43 & 1;
}

uint64_t specialized static PgQuery_IntoClause.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Node;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t RangeVar;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t IntoClause;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t, uint64_t);
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  char v69;
  int v70;
  int v71;
  BOOL v72;
  char v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t, uint64_t);
  char *v76;
  void (*v77)(char *, uint64_t);
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;

  v4 = type metadata accessor for UnknownStorage();
  v94 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v93 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v79 - v7;
  Node = type metadata accessor for PgQuery_Node(0);
  v87 = *(_QWORD *)(Node - 8);
  v88 = Node;
  MEMORY[0x1E0C80A78](Node);
  v84 = (uint64_t)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v86);
  v89 = (uint64_t)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v13 = MEMORY[0x1E0C80A78](v12);
  v85 = (uint64_t)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v90 = (uint64_t)&v79 - v15;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v17 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v91 = (uint64_t)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v23 = MEMORY[0x1E0C80A78](v22);
  v92 = (uint64_t)&v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v79 - v25;
  IntoClause = type metadata accessor for PgQuery_IntoClause(0);
  v28 = a1;
  v29 = *(int *)(IntoClause + 20);
  v30 = *(_QWORD *)(a1 + v29);
  v31 = *(_QWORD *)(a2 + v29);
  if (v30 == v31)
    goto LABEL_33;
  v81 = v28;
  v82 = a2;
  v80 = v8;
  v83 = v4;
  v32 = v30
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rel;
  outlined init with copy of PgQuery_Alias?(v31 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rel, (uint64_t)v26, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v33 = (uint64_t)&v21[*(int *)(v19 + 48)];
  outlined init with copy of PgQuery_Alias?(v32, (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v26, v33, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v34((uint64_t)v21, 1, RangeVar) == 1)
  {
    v35 = v34(v33, 1, RangeVar);
    swift_retain();
    swift_retain();
    if (v35 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v26, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_10;
    }
LABEL_7:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    v37 = &demangling cache variable for type metadata for PgQuery_RangeVar?;
    v38 = (uint64_t)v26;
LABEL_8:
    outlined destroy of (key: String, value: StorableValue)(v38, v37);
LABEL_32:
    swift_release();
    swift_release();
    v73 = 0;
    return v73 & 1;
  }
  v36 = v92;
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, v92, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v34(v33, 1, RangeVar) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_7;
  }
  v39 = v91;
  outlined init with take of PgQuery_OidList(v33, v91, type metadata accessor for PgQuery_RangeVar);
  swift_retain();
  swift_retain();
  v40 = specialized static PgQuery_RangeVar.== infix(_:_:)(v36, v39);
  outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v26, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v40 & 1) == 0)
    goto LABEL_32;
LABEL_10:
  v41 = *(_QWORD *)(v30
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colNames);
  v42 = *(_QWORD *)(v31
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colNames);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v43 = specialized static Array<A>.== infix(_:_:)(v41, v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v43 & 1) == 0
    || (*(_QWORD *)(v30
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod) != *(_QWORD *)(v31 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod)
     || *(_QWORD *)(v30
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                  + 8) != *(_QWORD *)(v31
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                                    + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_32;
  }
  v44 = *(_QWORD *)(v30
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
  v45 = *(_QWORD *)(v31
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v46 = specialized static Array<A>.== infix(_:_:)(v44, v45);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v46 & 1) == 0)
    goto LABEL_32;
  v47 = *(_QWORD *)(v31
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onCommit);
  if (*(_BYTE *)(v31
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onCommit
                + 8) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)(v30
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onCommit) != v47
    || (*(_QWORD *)(v30
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpaceName) != *(_QWORD *)(v31 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpaceName)
     || *(_QWORD *)(v30
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpaceName
                  + 8) != *(_QWORD *)(v31
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpaceName
                                    + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_32;
  }
  v48 = v30
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__viewQuery;
  v49 = v90;
  outlined init with copy of PgQuery_Alias?(v31+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__viewQuery, v90, &demangling cache variable for type metadata for PgQuery_Node?);
  v50 = v89;
  v51 = v89 + *(int *)(v86 + 48);
  outlined init with copy of PgQuery_Alias?(v48, v89, &demangling cache variable for type metadata for PgQuery_Node?);
  v52 = v50;
  outlined init with copy of PgQuery_Alias?(v49, v51, &demangling cache variable for type metadata for PgQuery_Node?);
  v53 = v88;
  v54 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v87 + 48);
  if (v54(v50, 1, v88) == 1)
  {
    v55 = v54(v51, 1, v53);
    v56 = v83;
    if (v55 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v50, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)(v90, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_30;
    }
    v60 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_37;
  }
  v57 = v50;
  v58 = v85;
  outlined init with copy of PgQuery_Alias?(v57, v85, &demangling cache variable for type metadata for PgQuery_Node?);
  v59 = v54(v51, 1, v53);
  v56 = v83;
  if (v59 == 1)
  {
    v60 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_36:
    outlined destroy of PgQuery_Alias(v58, type metadata accessor for PgQuery_Node);
LABEL_37:
    outlined destroy of (key: String, value: StorableValue)(v52, v60);
    v37 = &demangling cache variable for type metadata for PgQuery_Node?;
    v38 = v90;
    goto LABEL_8;
  }
  v61 = v51;
  v62 = v53;
  v63 = v84;
  outlined init with take of PgQuery_OidList(v61, v84, type metadata accessor for PgQuery_Node);
  v64 = *(int *)(v62 + 20);
  v65 = *(_QWORD *)(v58 + v64);
  v66 = *(_QWORD *)(v63 + v64);
  if (v65 != v66)
  {
    swift_retain();
    swift_retain();
    v67 = closure #1 in static PgQuery_Node.== infix(_:_:)(v65, v66);
    swift_release();
    swift_release();
    if (!v67)
    {
      outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
      v60 = &demangling cache variable for type metadata for PgQuery_Node?;
      v58 = v85;
      goto LABEL_36;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v68 = v85;
  v69 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v68, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v52, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v90, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v69 & 1) == 0)
    goto LABEL_32;
LABEL_30:
  v70 = *(unsigned __int8 *)(v30
                           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__skipData);
  v71 = *(unsigned __int8 *)(v31
                           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__skipData);
  swift_release();
  swift_release();
  v72 = v70 == v71;
  v8 = v80;
  v28 = v81;
  a2 = v82;
  v4 = v56;
  if (v72)
  {
LABEL_33:
    v74 = v94;
    v75 = *(void (**)(char *, uint64_t, uint64_t))(v94 + 16);
    v75(v8, v28, v4);
    v76 = v93;
    v75(v93, a2, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v73 = dispatch thunk of static Equatable.== infix(_:_:)();
    v77 = *(void (**)(char *, uint64_t))(v74 + 8);
    v77(v76, v4);
    v77(v8, v4);
    return v73 & 1;
  }
  v73 = 0;
  return v73 & 1;
}

uint64_t specialized static PgQuery_InsertStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t Node;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t RangeVar;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t InsertStmt;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t, uint64_t);
  int v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t, uint64_t);
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int (*v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int (*v99)(uint64_t, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  void (*v108)(char *, uint64_t, uint64_t);
  uint64_t v109;
  char *v110;
  void (*v111)(char *, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;

  v4 = type metadata accessor for UnknownStorage();
  v141 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v140 = (char *)&v113 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v113 - v7;
  v9 = type metadata accessor for PgQuery_WithClause(0);
  v121 = *(_QWORD *)(v9 - 8);
  v122 = v9;
  MEMORY[0x1E0C80A78](v9);
  v118 = (uint64_t)&v113 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_WithClause?, PgQuery_WithClause?));
  MEMORY[0x1E0C80A78](v120);
  v123 = (uint64_t)&v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WithClause?);
  v13 = MEMORY[0x1E0C80A78](v12);
  v119 = (uint64_t)&v113 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v125 = (uint64_t)&v113 - v15;
  v16 = type metadata accessor for PgQuery_OnConflictClause(0);
  v128 = *(_QWORD *)(v16 - 8);
  v129 = v16;
  MEMORY[0x1E0C80A78](v16);
  v124 = (uint64_t)&v113 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_OnConflictClause?, PgQuery_OnConflictClause?));
  MEMORY[0x1E0C80A78](v127);
  v130 = (uint64_t)&v113 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  v20 = MEMORY[0x1E0C80A78](v19);
  v126 = (uint64_t)&v113 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v132 = (uint64_t)&v113 - v22;
  Node = type metadata accessor for PgQuery_Node(0);
  v135 = *(_QWORD *)(Node - 8);
  v136 = Node;
  MEMORY[0x1E0C80A78](Node);
  v131 = (uint64_t)&v113 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v134);
  v138 = (uint64_t)&v113 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v27 = MEMORY[0x1E0C80A78](v26);
  v133 = (uint64_t)&v113 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27);
  v137 = (uint64_t)&v113 - v29;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v31 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v139 = (uint64_t)&v113 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1E0C80A78](v33);
  v35 = (char *)&v113 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v37 = MEMORY[0x1E0C80A78](v36);
  v39 = (char *)&v113 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37);
  v41 = (char *)&v113 - v40;
  InsertStmt = type metadata accessor for PgQuery_InsertStmt(0);
  v43 = a1;
  v44 = *(int *)(InsertStmt + 20);
  v45 = *(_QWORD *)(a1 + v44);
  v46 = a2;
  v47 = *(_QWORD *)(a2 + v44);
  v48 = v46;
  if (v45 == v47)
    goto LABEL_43;
  v114 = v43;
  v115 = v46;
  v116 = v8;
  v117 = v4;
  v49 = v45
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  outlined init with copy of PgQuery_Alias?(v47+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v41, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v50 = (uint64_t)&v35[*(int *)(v33 + 48)];
  outlined init with copy of PgQuery_Alias?(v49, (uint64_t)v35, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v41, v50, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
  if (v51((uint64_t)v35, 1, RangeVar) == 1)
  {
    v52 = v51(v50, 1, RangeVar);
    swift_retain();
    swift_retain();
    if (v52 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v35, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v41, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_10;
    }
LABEL_7:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v35, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    v53 = &demangling cache variable for type metadata for PgQuery_RangeVar?;
    v54 = (uint64_t)v41;
LABEL_8:
    outlined destroy of (key: String, value: StorableValue)(v54, v53);
    goto LABEL_40;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v35, (uint64_t)v39, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v51(v50, 1, RangeVar) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v39, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_7;
  }
  v55 = v139;
  outlined init with take of PgQuery_OidList(v50, v139, type metadata accessor for PgQuery_RangeVar);
  swift_retain();
  swift_retain();
  v56 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v39, v55);
  outlined destroy of PgQuery_Alias(v55, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias((uint64_t)v39, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v35, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v41, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v56 & 1) == 0)
    goto LABEL_40;
LABEL_10:
  v57 = *(_QWORD *)(v45
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cols);
  v58 = *(_QWORD *)(v47
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cols);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v59 = specialized static Array<A>.== infix(_:_:)(v57, v58);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v59 & 1) == 0)
    goto LABEL_40;
  v60 = v45
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selectStmt;
  v61 = v137;
  outlined init with copy of PgQuery_Alias?(v47+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selectStmt, v137, &demangling cache variable for type metadata for PgQuery_Node?);
  v62 = v138;
  v63 = v138 + *(int *)(v134 + 48);
  outlined init with copy of PgQuery_Alias?(v60, v138, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v61, v63, &demangling cache variable for type metadata for PgQuery_Node?);
  v64 = v136;
  v65 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v135 + 48);
  if (v65(v62, 1, v136) == 1)
  {
    v66 = v65(v63, 1, v64);
    v67 = v117;
    if (v66 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v62, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)(v61, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_20;
    }
    v71 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_33:
    outlined destroy of (key: String, value: StorableValue)(v62, v71);
    v53 = &demangling cache variable for type metadata for PgQuery_Node?;
    v54 = v61;
    goto LABEL_8;
  }
  v68 = v133;
  outlined init with copy of PgQuery_Alias?(v62, v133, &demangling cache variable for type metadata for PgQuery_Node?);
  v69 = v65(v63, 1, v64);
  v70 = v64;
  v67 = v117;
  if (v69 == 1)
  {
    v71 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_32:
    outlined destroy of PgQuery_Alias(v68, type metadata accessor for PgQuery_Node);
    goto LABEL_33;
  }
  v72 = v131;
  outlined init with take of PgQuery_OidList(v63, v131, type metadata accessor for PgQuery_Node);
  v73 = *(int *)(v70 + 20);
  v74 = *(_QWORD *)(v68 + v73);
  v75 = *(_QWORD *)(v72 + v73);
  if (v74 != v75)
  {
    swift_retain();
    swift_retain();
    v76 = closure #1 in static PgQuery_Node.== infix(_:_:)(v74, v75);
    swift_release();
    swift_release();
    if (!v76)
    {
      outlined destroy of PgQuery_Alias(v131, type metadata accessor for PgQuery_Node);
      v71 = &demangling cache variable for type metadata for PgQuery_Node?;
      v68 = v133;
      goto LABEL_32;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v77 = v133;
  v78 = v131;
  v79 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v78, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v77, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v62, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v61, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v79 & 1) == 0)
    goto LABEL_40;
LABEL_20:
  v80 = v45
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictClause;
  v81 = v132;
  outlined init with copy of PgQuery_Alias?(v47+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictClause, v132, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  v82 = v130;
  v83 = v130 + *(int *)(v127 + 48);
  outlined init with copy of PgQuery_Alias?(v80, v130, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  v84 = v82;
  outlined init with copy of PgQuery_Alias?(v81, v83, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  v85 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v128 + 48);
  v86 = v82;
  v87 = v129;
  if (v85(v86, 1, v129) == 1)
  {
    if (v85(v83, 1, v87) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v84, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
      outlined destroy of (key: String, value: StorableValue)(v132, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  v88 = v126;
  outlined init with copy of PgQuery_Alias?(v84, v126, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  if (v85(v83, 1, v87) == 1)
  {
    outlined destroy of PgQuery_Alias(v88, type metadata accessor for PgQuery_OnConflictClause);
LABEL_25:
    outlined destroy of (key: String, value: StorableValue)(v84, &demangling cache variable for type metadata for (PgQuery_OnConflictClause?, PgQuery_OnConflictClause?));
    v53 = &demangling cache variable for type metadata for PgQuery_OnConflictClause?;
    v54 = v132;
    goto LABEL_8;
  }
  v89 = v124;
  outlined init with take of PgQuery_OidList(v83, v124, type metadata accessor for PgQuery_OnConflictClause);
  v90 = specialized static PgQuery_OnConflictClause.== infix(_:_:)(v88, v89);
  outlined destroy of PgQuery_Alias(v89, type metadata accessor for PgQuery_OnConflictClause);
  outlined destroy of PgQuery_Alias(v88, type metadata accessor for PgQuery_OnConflictClause);
  outlined destroy of (key: String, value: StorableValue)(v84, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  outlined destroy of (key: String, value: StorableValue)(v132, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  if ((v90 & 1) == 0)
    goto LABEL_40;
LABEL_27:
  v91 = *(_QWORD *)(v45
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList);
  v92 = *(_QWORD *)(v47
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v93 = specialized static Array<A>.== infix(_:_:)(v91, v92);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v93 & 1) == 0)
    goto LABEL_40;
  v94 = v45
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause;
  v95 = v125;
  outlined init with copy of PgQuery_Alias?(v47+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, v125, &demangling cache variable for type metadata for PgQuery_WithClause?);
  v96 = v123;
  v97 = v123 + *(int *)(v120 + 48);
  outlined init with copy of PgQuery_Alias?(v94, v123, &demangling cache variable for type metadata for PgQuery_WithClause?);
  v98 = v96;
  outlined init with copy of PgQuery_Alias?(v95, v97, &demangling cache variable for type metadata for PgQuery_WithClause?);
  v99 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v121 + 48);
  v100 = v96;
  v101 = v122;
  if (v99(v100, 1, v122) != 1)
  {
    v102 = v119;
    outlined init with copy of PgQuery_Alias?(v98, v119, &demangling cache variable for type metadata for PgQuery_WithClause?);
    if (v99(v97, 1, v101) != 1)
    {
      v103 = v118;
      outlined init with take of PgQuery_OidList(v97, v118, type metadata accessor for PgQuery_WithClause);
      v104 = specialized static PgQuery_WithClause.== infix(_:_:)(v102, v103);
      outlined destroy of PgQuery_Alias(v103, type metadata accessor for PgQuery_WithClause);
      outlined destroy of PgQuery_Alias(v102, type metadata accessor for PgQuery_WithClause);
      outlined destroy of (key: String, value: StorableValue)(v98, &demangling cache variable for type metadata for PgQuery_WithClause?);
      outlined destroy of (key: String, value: StorableValue)(v125, &demangling cache variable for type metadata for PgQuery_WithClause?);
      if ((v104 & 1) == 0)
        goto LABEL_40;
      goto LABEL_38;
    }
    outlined destroy of PgQuery_Alias(v102, type metadata accessor for PgQuery_WithClause);
    goto LABEL_36;
  }
  if (v99(v97, 1, v101) != 1)
  {
LABEL_36:
    outlined destroy of (key: String, value: StorableValue)(v98, &demangling cache variable for type metadata for (PgQuery_WithClause?, PgQuery_WithClause?));
    v53 = &demangling cache variable for type metadata for PgQuery_WithClause?;
    v54 = v125;
    goto LABEL_8;
  }
  outlined destroy of (key: String, value: StorableValue)(v98, &demangling cache variable for type metadata for PgQuery_WithClause?);
  outlined destroy of (key: String, value: StorableValue)(v125, &demangling cache variable for type metadata for PgQuery_WithClause?);
LABEL_38:
  v105 = *(_QWORD *)(v47
                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override);
  if (*(_BYTE *)(v47
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override
                + 8) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)(v45
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override) == v105)
  {
    swift_release();
    swift_release();
    v8 = v116;
    v48 = v115;
    v43 = v114;
    v4 = v67;
LABEL_43:
    v107 = v141;
    v108 = *(void (**)(char *, uint64_t, uint64_t))(v141 + 16);
    v109 = v48;
    v108(v8, v43, v4);
    v110 = v140;
    v108(v140, v109, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v106 = dispatch thunk of static Equatable.== infix(_:_:)();
    v111 = *(void (**)(char *, uint64_t))(v107 + 8);
    v111(v110, v4);
    v111(v8, v4);
    return v106 & 1;
  }
LABEL_40:
  swift_release();
  swift_release();
  v106 = 0;
  return v106 & 1;
}

uint64_t specialized static PgQuery_FieldStore.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t Node;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t FieldStore;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  int v73;
  int v74;
  BOOL v75;
  void (*v76)(char *, uint64_t, uint64_t);
  char *v77;
  char v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;

  v97 = a1;
  v3 = type metadata accessor for UnknownStorage();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v82 - v8;
  Node = type metadata accessor for PgQuery_Node(0);
  v11 = *(_QWORD *)(Node - 8);
  v12 = MEMORY[0x1E0C80A78](Node);
  v90 = (uint64_t)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v92 = (uint64_t)&v82 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v16 = MEMORY[0x1E0C80A78](v15);
  v94 = (uint64_t)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v82 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v91 = (uint64_t)&v82 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v93 = (uint64_t)&v82 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v96 = (uint64_t)&v82 - v26;
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v82 - v27;
  FieldStore = type metadata accessor for PgQuery_FieldStore(0);
  v30 = v97;
  v31 = *(int *)(FieldStore + 20);
  v32 = *(_QWORD *)(v97 + v31);
  v33 = *(_QWORD *)(a2 + v31);
  if (v32 == v33)
    goto LABEL_24;
  v85 = v9;
  v86 = a2;
  v87 = v7;
  v88 = v4;
  v89 = v3;
  v34 = v32;
  v35 = v33;
  v36 = v32
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v33 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  v37 = (uint64_t)&v19[*(int *)(v15 + 48)];
  outlined init with copy of PgQuery_Alias?(v36, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  v95 = v28;
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, v37, &demangling cache variable for type metadata for PgQuery_Node?);
  v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  v39 = v15;
  if (v38((uint64_t)v19, 1, Node) == 1)
  {
    v40 = Node;
    v41 = v38(v37, 1, Node);
    swift_retain();
    swift_retain();
    v42 = v34;
    v43 = v35;
    if (v41 == 1)
    {
      v84 = v40;
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v95, &demangling cache variable for type metadata for PgQuery_Node?);
      v3 = v89;
      goto LABEL_11;
    }
    v45 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    v46 = (uint64_t)v95;
LABEL_27:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, v45);
    v80 = v46;
LABEL_31:
    outlined destroy of (key: String, value: StorableValue)(v80, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_32;
  }
  v83 = v15;
  v44 = v96;
  outlined init with copy of PgQuery_Alias?((uint64_t)v19, v96, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v38(v37, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    v45 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_26:
    v46 = (uint64_t)v95;
    outlined destroy of PgQuery_Alias(v44, type metadata accessor for PgQuery_Node);
    goto LABEL_27;
  }
  v47 = v92;
  outlined init with take of PgQuery_OidList(v37, v92, type metadata accessor for PgQuery_Node);
  v84 = Node;
  v48 = *(int *)(Node + 20);
  v49 = *(_QWORD *)(v44 + v48);
  v50 = *(_QWORD *)(v47 + v48);
  swift_retain();
  swift_retain();
  if (v49 != v50)
  {
    swift_retain();
    swift_retain();
    v51 = closure #1 in static PgQuery_Node.== infix(_:_:)(v49, v50);
    swift_release();
    swift_release();
    if (!v51)
    {
      outlined destroy of PgQuery_Alias(v47, type metadata accessor for PgQuery_Node);
      v45 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_26;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v3 = v89;
  v52 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v47, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v44, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v95, &demangling cache variable for type metadata for PgQuery_Node?);
  v42 = v34;
  v43 = v35;
  v39 = v83;
  if ((v52 & 1) == 0)
    goto LABEL_32;
LABEL_11:
  v53 = v42
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  v54 = v39;
  v55 = v93;
  outlined init with copy of PgQuery_Alias?(v43 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v93, &demangling cache variable for type metadata for PgQuery_Node?);
  v56 = v94;
  v57 = v94 + *(int *)(v54 + 48);
  outlined init with copy of PgQuery_Alias?(v53, v94, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v55, v57, &demangling cache variable for type metadata for PgQuery_Node?);
  v58 = v84;
  if (v38(v56, 1, v84) != 1)
  {
    v59 = v91;
    outlined init with copy of PgQuery_Alias?(v56, v91, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v38(v57, 1, v58) == 1)
    {
      v60 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_29:
      outlined destroy of PgQuery_Alias(v59, type metadata accessor for PgQuery_Node);
      goto LABEL_30;
    }
    v61 = v90;
    outlined init with take of PgQuery_OidList(v57, v90, type metadata accessor for PgQuery_Node);
    v62 = *(int *)(v58 + 20);
    v63 = *(_QWORD *)(v59 + v62);
    v64 = *(_QWORD *)(v61 + v62);
    if (v63 != v64)
    {
      swift_retain();
      swift_retain();
      v65 = closure #1 in static PgQuery_Node.== infix(_:_:)(v63, v64);
      swift_release();
      swift_release();
      if (!v65)
      {
        outlined destroy of PgQuery_Alias(v61, type metadata accessor for PgQuery_Node);
        v60 = &demangling cache variable for type metadata for PgQuery_Node?;
        goto LABEL_29;
      }
    }
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v66 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of PgQuery_Alias(v61, type metadata accessor for PgQuery_Node);
    outlined destroy of PgQuery_Alias(v59, type metadata accessor for PgQuery_Node);
    outlined destroy of (key: String, value: StorableValue)(v56, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined destroy of (key: String, value: StorableValue)(v55, &demangling cache variable for type metadata for PgQuery_Node?);
    if ((v66 & 1) != 0)
      goto LABEL_20;
LABEL_32:
    swift_release();
    swift_release();
LABEL_33:
    v78 = 0;
    return v78 & 1;
  }
  if (v38(v57, 1, v58) != 1)
  {
    v60 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_30:
    outlined destroy of (key: String, value: StorableValue)(v56, v60);
    v80 = v55;
    goto LABEL_31;
  }
  outlined destroy of (key: String, value: StorableValue)(v56, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v55, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_20:
  v67 = *(_QWORD *)(v42
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newvals);
  v68 = *(_QWORD *)(v43
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newvals);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v69 = specialized static Array<A>.== infix(_:_:)(v67, v68);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v69 & 1) == 0)
    goto LABEL_32;
  v70 = *(_QWORD *)(v42
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fieldnums);
  v71 = *(_QWORD *)(v43
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fieldnums);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v72 = specialized static Array<A>.== infix(_:_:)(v70, v71);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v72 & 1) == 0)
    goto LABEL_32;
  v73 = *(_DWORD *)(v42
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype);
  v74 = *(_DWORD *)(v43
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype);
  swift_release();
  swift_release();
  v75 = v73 == v74;
  a2 = v86;
  v7 = v87;
  v9 = v85;
  v30 = v97;
  v4 = v88;
  if (!v75)
    goto LABEL_33;
LABEL_24:
  v76 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v76(v9, v30, v3);
  v76(v7, a2, v3);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v77 = v7;
  v78 = dispatch thunk of static Equatable.== infix(_:_:)();
  v79 = *(void (**)(char *, uint64_t))(v4 + 8);
  v79(v77, v3);
  v79(v9, v3);
  return v78 & 1;
}

uint64_t specialized static PgQuery_CreateExtensionStmt.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v20 - v11;
  v13 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v13 || (v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
      && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24)) & 1) != 0)
    {
      v15 = a3(0);
      v16 = a1 + *(int *)(v15 + 28);
      v17 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
      v17(v12, v16, v6);
      v17(v10, a2 + *(int *)(v15 + 28), v6);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      v18 = *(void (**)(char *, uint64_t))(v7 + 8);
      v18(v10, v6);
      v18(v12, v6);
    }
    else
    {
      v14 = 0;
    }
  }
  return v14 & 1;
}

uint64_t specialized static PgQuery_DeleteStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t Node;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t RangeVar;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t, uint64_t);
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int (*v81)(uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t, uint64_t);
  char *v88;
  uint64_t v89;
  char *v90;
  char v91;
  void (*v92)(char *, uint64_t);
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;

  v4 = type metadata accessor for UnknownStorage();
  v114 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v113 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v112 = (char *)&v94 - v7;
  v8 = type metadata accessor for PgQuery_WithClause(0);
  v100 = *(_QWORD *)(v8 - 8);
  v101 = v8;
  MEMORY[0x1E0C80A78](v8);
  v98 = (uint64_t)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_WithClause?, PgQuery_WithClause?));
  MEMORY[0x1E0C80A78](v99);
  v102 = (uint64_t)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WithClause?);
  v12 = MEMORY[0x1E0C80A78](v11);
  v109 = (char *)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v94 - v14;
  Node = type metadata accessor for PgQuery_Node(0);
  v106 = *(_QWORD *)(Node - 8);
  v107 = Node;
  MEMORY[0x1E0C80A78](Node);
  v103 = (uint64_t)&v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v105);
  v108 = (uint64_t)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v20 = MEMORY[0x1E0C80A78](v19);
  v104 = (uint64_t)&v94 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v111 = (uint64_t)&v94 - v22;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v24 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v110 = (uint64_t)&v94 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v94 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v30 = MEMORY[0x1E0C80A78](v29);
  v32 = (char *)&v94 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30);
  v34 = (char *)&v94 - v33;
  v35 = type metadata accessor for PgQuery_DeleteStmt(0);
  v36 = a1;
  v37 = *(int *)(v35 + 20);
  v38 = *(_QWORD *)(a1 + v37);
  v39 = a2;
  v40 = *(_QWORD *)(a2 + v37);
  v41 = v39;
  if (v38 == v40)
    goto LABEL_32;
  v95 = v39;
  v96 = v15;
  v94 = v36;
  v97 = v4;
  v42 = v38
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v34, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v43 = (uint64_t)&v28[*(int *)(v26 + 48)];
  outlined init with copy of PgQuery_Alias?(v42, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v34, v43, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  if (v44((uint64_t)v28, 1, RangeVar) == 1)
  {
    v45 = v44(v43, 1, RangeVar);
    swift_retain();
    swift_retain();
    if (v45 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v34, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_10;
    }
LABEL_7:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    v46 = &demangling cache variable for type metadata for PgQuery_RangeVar?;
    v47 = (uint64_t)v34;
LABEL_8:
    outlined destroy of (key: String, value: StorableValue)(v47, v46);
    goto LABEL_33;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, (uint64_t)v32, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v44(v43, 1, RangeVar) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v32, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_7;
  }
  v48 = v110;
  outlined init with take of PgQuery_OidList(v43, v110, type metadata accessor for PgQuery_RangeVar);
  swift_retain();
  swift_retain();
  v49 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v32, v48);
  outlined destroy of PgQuery_Alias(v48, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias((uint64_t)v32, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v34, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v49 & 1) == 0)
    goto LABEL_33;
LABEL_10:
  v50 = *(_QWORD *)(v38
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__usingClause);
  v51 = *(_QWORD *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__usingClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v52 = specialized static Array<A>.== infix(_:_:)(v50, v51);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v52 & 1) == 0)
    goto LABEL_33;
  v53 = v38
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  v54 = v111;
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v111, &demangling cache variable for type metadata for PgQuery_Node?);
  v55 = v108;
  v56 = v108 + *(int *)(v105 + 48);
  outlined init with copy of PgQuery_Alias?(v53, v108, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v54, v56, &demangling cache variable for type metadata for PgQuery_Node?);
  v57 = v107;
  v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v106 + 48);
  if (v58(v55, 1, v107) == 1)
  {
    v59 = v58(v56, 1, v57);
    v60 = (uint64_t)v96;
    v61 = v97;
    v62 = (uint64_t)v109;
    if (v59 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v55, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)(v111, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_20;
    }
    v65 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_29:
    outlined destroy of (key: String, value: StorableValue)(v55, v65);
    v46 = &demangling cache variable for type metadata for PgQuery_Node?;
    v47 = v111;
    goto LABEL_8;
  }
  v63 = v104;
  outlined init with copy of PgQuery_Alias?(v55, v104, &demangling cache variable for type metadata for PgQuery_Node?);
  v64 = v58(v56, 1, v57);
  v60 = (uint64_t)v96;
  v61 = v97;
  v62 = (uint64_t)v109;
  if (v64 == 1)
  {
    v65 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_28:
    outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
    goto LABEL_29;
  }
  v66 = v103;
  outlined init with take of PgQuery_OidList(v56, v103, type metadata accessor for PgQuery_Node);
  v67 = *(int *)(v57 + 20);
  v68 = *(_QWORD *)(v63 + v67);
  v69 = *(_QWORD *)(v66 + v67);
  if (v68 != v69)
  {
    swift_retain();
    swift_retain();
    v70 = closure #1 in static PgQuery_Node.== infix(_:_:)(v68, v69);
    swift_release();
    swift_release();
    if (!v70)
    {
      outlined destroy of PgQuery_Alias(v103, type metadata accessor for PgQuery_Node);
      v65 = &demangling cache variable for type metadata for PgQuery_Node?;
      v63 = v104;
      goto LABEL_28;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v71 = v103;
  v72 = v104;
  v73 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v71, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v72, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v55, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v111, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v73 & 1) == 0)
    goto LABEL_33;
LABEL_20:
  v74 = *(_QWORD *)(v38
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList);
  v75 = *(_QWORD *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v76 = specialized static Array<A>.== infix(_:_:)(v74, v75);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v76 & 1) == 0)
    goto LABEL_33;
  v77 = v38
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause;
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, v60, &demangling cache variable for type metadata for PgQuery_WithClause?);
  v78 = v102;
  v79 = v102 + *(int *)(v99 + 48);
  outlined init with copy of PgQuery_Alias?(v77, v102, &demangling cache variable for type metadata for PgQuery_WithClause?);
  v80 = v78;
  outlined init with copy of PgQuery_Alias?(v60, v79, &demangling cache variable for type metadata for PgQuery_WithClause?);
  v81 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v100 + 48);
  v82 = v78;
  v83 = v101;
  if (v81(v82, 1, v101) != 1)
  {
    outlined init with copy of PgQuery_Alias?(v80, v62, &demangling cache variable for type metadata for PgQuery_WithClause?);
    if (v81(v79, 1, v83) != 1)
    {
      v84 = v98;
      outlined init with take of PgQuery_OidList(v79, v98, type metadata accessor for PgQuery_WithClause);
      v85 = specialized static PgQuery_WithClause.== infix(_:_:)(v62, v84);
      outlined destroy of PgQuery_Alias(v84, type metadata accessor for PgQuery_WithClause);
      outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_WithClause);
      outlined destroy of (key: String, value: StorableValue)(v80, &demangling cache variable for type metadata for PgQuery_WithClause?);
      outlined destroy of (key: String, value: StorableValue)(v60, &demangling cache variable for type metadata for PgQuery_WithClause?);
      if ((v85 & 1) != 0)
        goto LABEL_31;
LABEL_33:
      swift_release();
      swift_release();
      v91 = 0;
      return v91 & 1;
    }
    outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_WithClause);
    goto LABEL_26;
  }
  if (v81(v79, 1, v83) != 1)
  {
LABEL_26:
    outlined destroy of (key: String, value: StorableValue)(v80, &demangling cache variable for type metadata for (PgQuery_WithClause?, PgQuery_WithClause?));
    v46 = &demangling cache variable for type metadata for PgQuery_WithClause?;
    v47 = v60;
    goto LABEL_8;
  }
  outlined destroy of (key: String, value: StorableValue)(v80, &demangling cache variable for type metadata for PgQuery_WithClause?);
  outlined destroy of (key: String, value: StorableValue)(v60, &demangling cache variable for type metadata for PgQuery_WithClause?);
LABEL_31:
  swift_release();
  swift_release();
  v36 = v94;
  v41 = v95;
  v4 = v61;
LABEL_32:
  v86 = v114;
  v87 = *(void (**)(char *, uint64_t, uint64_t))(v114 + 16);
  v88 = v112;
  v89 = v41;
  v87(v112, v36, v4);
  v90 = v113;
  v87(v113, v89, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v91 = dispatch thunk of static Equatable.== infix(_:_:)();
  v92 = *(void (**)(char *, uint64_t))(v86 + 8);
  v92(v90, v4);
  v92(v88, v4);
  return v91 & 1;
}

uint64_t specialized static PgQuery_DefineStmt.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t DefineStmt;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, uint64_t);
  uint64_t v20;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v20 - v9;
  v11 = *a2;
  v12 = *((unsigned __int8 *)a2 + 8);
  v13 = destructiveProjectEnumData for StorableValue(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
  if (v13 == destructiveProjectEnumData for StorableValue(v11, v12)
    && *(unsigned __int8 *)(a1 + 9) == *((unsigned __int8 *)a2 + 9)
    && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 16), a2[2]) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 24), a2[3]) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 32), a2[4]) & 1) != 0
    && *(unsigned __int8 *)(a1 + 40) == *((unsigned __int8 *)a2 + 40)
    && *(unsigned __int8 *)(a1 + 41) == *((unsigned __int8 *)a2 + 41))
  {
    DefineStmt = type metadata accessor for PgQuery_DefineStmt(0);
    v17 = a1 + *(int *)(DefineStmt + 44);
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v18(v10, v17, v4);
    v18(v8, (uint64_t)a2 + *(int *)(DefineStmt + 44), v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static PgQuery_PartitionBoundSpec.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  uint64_t PartitionBoundSpec;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  v11 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32)) & 1) != 0
      && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40)) & 1) != 0
      && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48)) & 1) != 0
      && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56))
    {
      PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
      v14 = a1 + *(int *)(PartitionBoundSpec + 48);
      v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v15(v10, v14, v4);
      v15(v8, a2 + *(int *)(PartitionBoundSpec + 48), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
    }
    else
    {
      v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_CreateStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TypeName;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t PartitionSpec;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t PartitionBoundSpec;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t RangeVar;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t Stmt;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t, uint64_t);
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int (*v80)(uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int (*v89)(uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  int v101;
  int v102;
  uint64_t v103;
  void (*v104)(char *, uint64_t, uint64_t);
  char *v105;
  uint64_t v106;
  char *v107;
  void (*v108)(char *, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;

  v4 = type metadata accessor for UnknownStorage();
  v138 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v137 = (char *)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v136 = (char *)&v110 - v7;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  v119 = *(_QWORD *)(TypeName - 8);
  v120 = TypeName;
  MEMORY[0x1E0C80A78](TypeName);
  v115 = (uint64_t)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
  MEMORY[0x1E0C80A78](v118);
  v11 = (char *)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  v13 = MEMORY[0x1E0C80A78](v12);
  v116 = (uint64_t)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v123 = (uint64_t)&v110 - v15;
  PartitionSpec = type metadata accessor for PgQuery_PartitionSpec(0);
  v125 = *(_QWORD *)(PartitionSpec - 8);
  v126 = PartitionSpec;
  MEMORY[0x1E0C80A78](PartitionSpec);
  v117 = (uint64_t)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_PartitionSpec?, PgQuery_PartitionSpec?));
  MEMORY[0x1E0C80A78](v124);
  v127 = (uint64_t)&v110 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  v20 = MEMORY[0x1E0C80A78](v19);
  v121 = (uint64_t)&v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v129 = (uint64_t)&v110 - v22;
  PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  v131 = *(_QWORD *)(PartitionBoundSpec - 8);
  v132 = PartitionBoundSpec;
  MEMORY[0x1E0C80A78](PartitionBoundSpec);
  v122 = (uint64_t)&v110 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_PartitionBoundSpec?, PgQuery_PartitionBoundSpec?));
  MEMORY[0x1E0C80A78](v130);
  v133 = (uint64_t)&v110 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  v27 = MEMORY[0x1E0C80A78](v26);
  v128 = (uint64_t)&v110 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27);
  v134 = (uint64_t)&v110 - v29;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v31 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v135 = (uint64_t)&v110 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1E0C80A78](v33);
  v35 = (char *)&v110 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v37 = MEMORY[0x1E0C80A78](v36);
  v39 = (char *)&v110 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37);
  v41 = (char *)&v110 - v40;
  Stmt = type metadata accessor for PgQuery_CreateStmt(0);
  v43 = a1;
  v44 = *(int *)(Stmt + 20);
  v45 = *(_QWORD *)(a1 + v44);
  v46 = a2;
  v47 = *(_QWORD *)(a2 + v44);
  v48 = v46;
  if (v45 == v47)
    goto LABEL_58;
  v113 = v11;
  v111 = v43;
  v112 = v46;
  v114 = v4;
  v49 = v45
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  outlined init with copy of PgQuery_Alias?(v47+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v41, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v50 = (uint64_t)&v35[*(int *)(v33 + 48)];
  outlined init with copy of PgQuery_Alias?(v49, (uint64_t)v35, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v41, v50, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
  if (v51((uint64_t)v35, 1, RangeVar) == 1)
  {
    v52 = v51(v50, 1, RangeVar);
    v53 = v45;
    swift_retain();
    swift_retain();
    if (v52 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v35, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v41, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      v54 = v114;
      goto LABEL_11;
    }
LABEL_7:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v35, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    v55 = &demangling cache variable for type metadata for PgQuery_RangeVar?;
    v56 = (uint64_t)v41;
    goto LABEL_8;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v35, (uint64_t)v39, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v51(v50, 1, RangeVar) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v39, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_7;
  }
  v58 = v135;
  outlined init with take of PgQuery_OidList(v50, v135, type metadata accessor for PgQuery_RangeVar);
  v53 = v45;
  swift_retain();
  swift_retain();
  v59 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v39, v58);
  outlined destroy of PgQuery_Alias(v58, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias((uint64_t)v39, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v35, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v41, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v54 = v114;
  if ((v59 & 1) == 0)
    goto LABEL_9;
LABEL_11:
  v60 = *(_QWORD *)(v53
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableElts);
  v61 = *(_QWORD *)(v47
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableElts);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v62 = specialized static Array<A>.== infix(_:_:)(v60, v61);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v62 & 1) == 0)
    goto LABEL_9;
  v63 = *(_QWORD *)(v53
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inhRelations);
  v64 = *(_QWORD *)(v47
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inhRelations);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v65 = specialized static Array<A>.== infix(_:_:)(v63, v64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v65 & 1) == 0)
    goto LABEL_9;
  v66 = v53
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partbound;
  v67 = v134;
  outlined init with copy of PgQuery_Alias?(v47+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partbound, v134, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  v68 = v133;
  v69 = v133 + *(int *)(v130 + 48);
  outlined init with copy of PgQuery_Alias?(v66, v133, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  outlined init with copy of PgQuery_Alias?(v67, v69, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  v70 = v132;
  v71 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v131 + 48);
  if (v71(v68, 1, v132) == 1)
  {
    if (v71(v69, 1, v70) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v68, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
      outlined destroy of (key: String, value: StorableValue)(v134, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
      goto LABEL_21;
    }
LABEL_19:
    outlined destroy of (key: String, value: StorableValue)(v68, &demangling cache variable for type metadata for (PgQuery_PartitionBoundSpec?, PgQuery_PartitionBoundSpec?));
    v55 = &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?;
    v56 = v134;
    goto LABEL_8;
  }
  v72 = v128;
  outlined init with copy of PgQuery_Alias?(v68, v128, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  if (v71(v69, 1, v70) == 1)
  {
    outlined destroy of PgQuery_Alias(v72, type metadata accessor for PgQuery_PartitionBoundSpec);
    goto LABEL_19;
  }
  v73 = v122;
  outlined init with take of PgQuery_OidList(v69, v122, type metadata accessor for PgQuery_PartitionBoundSpec);
  v74 = specialized static PgQuery_PartitionBoundSpec.== infix(_:_:)(v72, v73);
  outlined destroy of PgQuery_Alias(v73, type metadata accessor for PgQuery_PartitionBoundSpec);
  outlined destroy of PgQuery_Alias(v72, type metadata accessor for PgQuery_PartitionBoundSpec);
  outlined destroy of (key: String, value: StorableValue)(v68, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  outlined destroy of (key: String, value: StorableValue)(v134, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  if ((v74 & 1) == 0)
    goto LABEL_9;
LABEL_21:
  v75 = v53
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partspec;
  v76 = v129;
  outlined init with copy of PgQuery_Alias?(v47+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partspec, v129, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  v77 = v127;
  v78 = v127 + *(int *)(v124 + 48);
  outlined init with copy of PgQuery_Alias?(v75, v127, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  outlined init with copy of PgQuery_Alias?(v76, v78, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  v79 = v126;
  v80 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v125 + 48);
  if (v80(v77, 1, v126) == 1)
  {
    if (v80(v78, 1, v79) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v77, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
      outlined destroy of (key: String, value: StorableValue)(v129, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
      goto LABEL_28;
    }
LABEL_26:
    outlined destroy of (key: String, value: StorableValue)(v77, &demangling cache variable for type metadata for (PgQuery_PartitionSpec?, PgQuery_PartitionSpec?));
    v55 = &demangling cache variable for type metadata for PgQuery_PartitionSpec?;
    v56 = v129;
    goto LABEL_8;
  }
  v81 = v121;
  outlined init with copy of PgQuery_Alias?(v77, v121, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  if (v80(v78, 1, v79) == 1)
  {
    outlined destroy of PgQuery_Alias(v81, type metadata accessor for PgQuery_PartitionSpec);
    goto LABEL_26;
  }
  v82 = v117;
  outlined init with take of PgQuery_OidList(v78, v117, type metadata accessor for PgQuery_PartitionSpec);
  v83 = specialized static PgQuery_PartitionSpec.== infix(_:_:)(v81, v82);
  outlined destroy of PgQuery_Alias(v82, type metadata accessor for PgQuery_PartitionSpec);
  outlined destroy of PgQuery_Alias(v81, type metadata accessor for PgQuery_PartitionSpec);
  outlined destroy of (key: String, value: StorableValue)(v77, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  outlined destroy of (key: String, value: StorableValue)(v129, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  if ((v83 & 1) == 0)
    goto LABEL_9;
LABEL_28:
  v84 = v53
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ofTypename;
  v85 = v123;
  outlined init with copy of PgQuery_Alias?(v47+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ofTypename, v123, &demangling cache variable for type metadata for PgQuery_TypeName?);
  v86 = (uint64_t)v113;
  v87 = (uint64_t)&v113[*(int *)(v118 + 48)];
  outlined init with copy of PgQuery_Alias?(v84, (uint64_t)v113, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined init with copy of PgQuery_Alias?(v85, v87, &demangling cache variable for type metadata for PgQuery_TypeName?);
  v88 = v120;
  v89 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v119 + 48);
  if (v89(v86, 1, v120) != 1)
  {
    v97 = v86;
    v98 = v116;
    outlined init with copy of PgQuery_Alias?(v97, v116, &demangling cache variable for type metadata for PgQuery_TypeName?);
    if (v89(v87, 1, v88) == 1)
    {
      outlined destroy of PgQuery_Alias(v98, type metadata accessor for PgQuery_TypeName);
      goto LABEL_37;
    }
    v99 = v115;
    outlined init with take of PgQuery_OidList(v87, v115, type metadata accessor for PgQuery_TypeName);
    if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)v98, *(_QWORD *)v99) & 1) != 0
      && *(_DWORD *)(v98 + 8) == *(_DWORD *)(v99 + 8)
      && *(unsigned __int8 *)(v98 + 12) == *(unsigned __int8 *)(v99 + 12)
      && *(unsigned __int8 *)(v98 + 13) == *(unsigned __int8 *)(v99 + 13)
      && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v98 + 16), *(_QWORD *)(v99 + 16)) & 1) != 0
      && *(_DWORD *)(v98 + 24) == *(_DWORD *)(v99 + 24)
      && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v98 + 32), *(_QWORD *)(v99 + 32)) & 1) != 0
      && *(_DWORD *)(v98 + 40) == *(_DWORD *)(v99 + 40))
    {
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v100 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of PgQuery_Alias(v99, type metadata accessor for PgQuery_TypeName);
      outlined destroy of PgQuery_Alias(v98, type metadata accessor for PgQuery_TypeName);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v113, &demangling cache variable for type metadata for PgQuery_TypeName?);
      outlined destroy of (key: String, value: StorableValue)(v123, &demangling cache variable for type metadata for PgQuery_TypeName?);
      if ((v100 & 1) == 0)
        goto LABEL_9;
      goto LABEL_31;
    }
    outlined destroy of PgQuery_Alias(v99, type metadata accessor for PgQuery_TypeName);
    outlined destroy of PgQuery_Alias(v98, type metadata accessor for PgQuery_TypeName);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v113, &demangling cache variable for type metadata for PgQuery_TypeName?);
    v56 = v123;
    v55 = &demangling cache variable for type metadata for PgQuery_TypeName?;
LABEL_8:
    outlined destroy of (key: String, value: StorableValue)(v56, v55);
    goto LABEL_9;
  }
  if (v89(v87, 1, v88) != 1)
  {
LABEL_37:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v113, &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
    v55 = &demangling cache variable for type metadata for PgQuery_TypeName?;
    v56 = v123;
    goto LABEL_8;
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v113, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined destroy of (key: String, value: StorableValue)(v123, &demangling cache variable for type metadata for PgQuery_TypeName?);
LABEL_31:
  v90 = *(_QWORD *)(v53
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints);
  v91 = *(_QWORD *)(v47
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v92 = specialized static Array<A>.== infix(_:_:)(v90, v91);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v92 & 1) != 0)
  {
    v93 = *(_QWORD *)(v53
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
    v94 = *(_QWORD *)(v47
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v95 = specialized static Array<A>.== infix(_:_:)(v93, v94);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v95 & 1) != 0)
    {
      v96 = *(_QWORD *)(v47
                      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oncommit);
      if (*(_BYTE *)(v47
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oncommit
                    + 8) == 1)
        __asm { BR              X11 }
      if (*(_QWORD *)(v53
                     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oncommit) == v96
        && (*(_QWORD *)(v53
                      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablespacename) == *(_QWORD *)(v47 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablespacename)
         && *(_QWORD *)(v53
                      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablespacename
                      + 8) == *(_QWORD *)(v47
                                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablespacename
                                        + 8)
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        && (*(_QWORD *)(v53
                      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod) == *(_QWORD *)(v47 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod)
         && *(_QWORD *)(v53
                      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                      + 8) == *(_QWORD *)(v47
                                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                                        + 8)
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        v101 = *(unsigned __int8 *)(v53
                                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists);
        v102 = *(unsigned __int8 *)(v47
                                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists);
        swift_release();
        swift_release();
        v48 = v112;
        v43 = v111;
        v4 = v54;
        if (v101 != v102)
        {
          v57 = 0;
          return v57 & 1;
        }
LABEL_58:
        v103 = v138;
        v104 = *(void (**)(char *, uint64_t, uint64_t))(v138 + 16);
        v105 = v136;
        v106 = v48;
        v104(v136, v43, v4);
        v107 = v137;
        v104(v137, v106, v4);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v57 = dispatch thunk of static Equatable.== infix(_:_:)();
        v108 = *(void (**)(char *, uint64_t))(v103 + 8);
        v108(v107, v4);
        v108(v105, v4);
        return v57 & 1;
      }
    }
  }
LABEL_9:
  swift_release();
  swift_release();
  v57 = 0;
  return v57 & 1;
}

uint64_t specialized static PgQuery_WindowDef.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t WindowDef;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  int v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  char v69;
  int v70;
  int v71;
  void (*v72)(char *, uint64_t, uint64_t);
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t Node;
  uint64_t v89;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v76 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v11 = *(_QWORD *)(Node - 8);
  v12 = MEMORY[0x1E0C80A78](Node);
  v81 = (uint64_t)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v83 = (uint64_t)&v76 - v14;
  v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v15 = MEMORY[0x1E0C80A78](v87);
  v84 = (uint64_t)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v86 = (uint64_t)&v76 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v19 = MEMORY[0x1E0C80A78](v18);
  v82 = (uint64_t)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v85 = (uint64_t)&v76 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v76 - v24;
  MEMORY[0x1E0C80A78](v23);
  v89 = (uint64_t)&v76 - v26;
  WindowDef = type metadata accessor for PgQuery_WindowDef(0);
  v28 = a1;
  v29 = *(int *)(WindowDef + 20);
  v30 = *(_QWORD *)(a1 + v29);
  v31 = *(_QWORD *)(a2 + v29);
  if (v30 == v31)
  {
LABEL_33:
    v72 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v72(v10, v28, v4);
    v72(v8, a2, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v33 = dispatch thunk of static Equatable.== infix(_:_:)();
    v73 = *(void (**)(char *, uint64_t))(v5 + 8);
    v73(v8, v4);
    v73(v10, v4);
    return v33 & 1;
  }
  v79 = a2;
  v80 = a1;
  v78 = v10;
  v32 = *(_QWORD *)(v30 + 16) == *(_QWORD *)(v31 + 16) && *(_QWORD *)(v30 + 24) == *(_QWORD *)(v31 + 24);
  if (v32 || (v33 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(_QWORD *)(v30 + 32) == *(_QWORD *)(v31 + 32) && *(_QWORD *)(v30 + 40) == *(_QWORD *)(v31 + 40)
      || (v33 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      v76 = v5;
      v77 = v8;
      v34 = *(_QWORD *)(v30 + 48);
      v35 = *(_QWORD *)(v31 + 48);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v36 = specialized static Array<A>.== infix(_:_:)(v34, v35);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v36 & 1) == 0)
        goto LABEL_41;
      v37 = *(_QWORD *)(v30 + 56);
      v38 = *(_QWORD *)(v31 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v39 = specialized static Array<A>.== infix(_:_:)(v37, v38);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v39 & 1) == 0 || *(_DWORD *)(v30 + 64) != *(_DWORD *)(v31 + 64))
        goto LABEL_41;
      v40 = v30
          + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_WindowDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startOffset;
      v41 = v89;
      outlined init with copy of PgQuery_Alias?(v31+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_WindowDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startOffset, v89, &demangling cache variable for type metadata for PgQuery_Node?);
      v42 = v86;
      v43 = v86 + *(int *)(v87 + 48);
      outlined init with copy of PgQuery_Alias?(v40, v86, &demangling cache variable for type metadata for PgQuery_Node?);
      v44 = v42;
      outlined init with copy of PgQuery_Alias?(v41, v43, &demangling cache variable for type metadata for PgQuery_Node?);
      v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
      v46 = Node;
      if (v45(v42, 1, Node) == 1)
      {
        v47 = v45(v43, 1, v46);
        v8 = v77;
        if (v47 == 1)
        {
          outlined destroy of (key: String, value: StorableValue)(v44, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined destroy of (key: String, value: StorableValue)(v89, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_22:
          v56 = v30
              + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_WindowDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__endOffset;
          v57 = v85;
          outlined init with copy of PgQuery_Alias?(v31+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_WindowDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__endOffset, v85, &demangling cache variable for type metadata for PgQuery_Node?);
          v58 = v84;
          v59 = v84 + *(int *)(v87 + 48);
          outlined init with copy of PgQuery_Alias?(v56, v84, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined init with copy of PgQuery_Alias?(v57, v59, &demangling cache variable for type metadata for PgQuery_Node?);
          v60 = Node;
          if (v45(v58, 1, Node) == 1)
          {
            if (v45(v59, 1, v60) == 1)
            {
              outlined destroy of (key: String, value: StorableValue)(v58, &demangling cache variable for type metadata for PgQuery_Node?);
              outlined destroy of (key: String, value: StorableValue)(v85, &demangling cache variable for type metadata for PgQuery_Node?);
              goto LABEL_31;
            }
            v62 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
            goto LABEL_39;
          }
          v61 = v82;
          outlined init with copy of PgQuery_Alias?(v58, v82, &demangling cache variable for type metadata for PgQuery_Node?);
          if (v45(v59, 1, v60) == 1)
          {
            v62 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_38:
            outlined destroy of PgQuery_Alias(v61, type metadata accessor for PgQuery_Node);
LABEL_39:
            outlined destroy of (key: String, value: StorableValue)(v58, v62);
            v74 = v85;
            goto LABEL_40;
          }
          v63 = v81;
          outlined init with take of PgQuery_OidList(v59, v81, type metadata accessor for PgQuery_Node);
          v64 = *(int *)(v60 + 20);
          v65 = *(_QWORD *)(v61 + v64);
          v66 = *(_QWORD *)(v63 + v64);
          if (v65 != v66)
          {
            swift_retain();
            swift_retain();
            v67 = closure #1 in static PgQuery_Node.== infix(_:_:)(v65, v66);
            swift_release();
            swift_release();
            if (!v67)
            {
              outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
              v62 = &demangling cache variable for type metadata for PgQuery_Node?;
              v58 = v84;
              v61 = v82;
              goto LABEL_38;
            }
          }
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v68 = v82;
          v69 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
          outlined destroy of PgQuery_Alias(v68, type metadata accessor for PgQuery_Node);
          outlined destroy of (key: String, value: StorableValue)(v84, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined destroy of (key: String, value: StorableValue)(v85, &demangling cache variable for type metadata for PgQuery_Node?);
          if ((v69 & 1) != 0)
          {
LABEL_31:
            v70 = *(_DWORD *)(v30
                            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_WindowDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
            v71 = *(_DWORD *)(v31
                            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_WindowDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
            swift_release();
            swift_release();
            v32 = v70 == v71;
            v5 = v76;
            v10 = v78;
            a2 = v79;
            v28 = v80;
            if (!v32)
              goto LABEL_42;
            goto LABEL_33;
          }
LABEL_41:
          swift_release();
          swift_release();
LABEL_42:
          v33 = 0;
          return v33 & 1;
        }
        v49 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
      }
      else
      {
        outlined init with copy of PgQuery_Alias?(v42, (uint64_t)v25, &demangling cache variable for type metadata for PgQuery_Node?);
        v48 = v45(v43, 1, v46);
        v8 = v77;
        if (v48 == 1)
        {
          v49 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
        }
        else
        {
          v50 = v83;
          outlined init with take of PgQuery_OidList(v43, v83, type metadata accessor for PgQuery_Node);
          v51 = *(int *)(v46 + 20);
          v52 = *(_QWORD *)&v25[v51];
          v53 = *(_QWORD *)(v50 + v51);
          if (v52 == v53
            || (swift_retain(),
                swift_retain(),
                v54 = closure #1 in static PgQuery_Node.== infix(_:_:)(v52, v53),
                swift_release(),
                swift_release(),
                v54))
          {
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
            v55 = dispatch thunk of static Equatable.== infix(_:_:)();
            outlined destroy of PgQuery_Alias(v50, type metadata accessor for PgQuery_Node);
            outlined destroy of PgQuery_Alias((uint64_t)v25, type metadata accessor for PgQuery_Node);
            outlined destroy of (key: String, value: StorableValue)(v86, &demangling cache variable for type metadata for PgQuery_Node?);
            outlined destroy of (key: String, value: StorableValue)(v89, &demangling cache variable for type metadata for PgQuery_Node?);
            if ((v55 & 1) == 0)
              goto LABEL_41;
            goto LABEL_22;
          }
          outlined destroy of PgQuery_Alias(v50, type metadata accessor for PgQuery_Node);
          v49 = &demangling cache variable for type metadata for PgQuery_Node?;
          v44 = v86;
        }
        outlined destroy of PgQuery_Alias((uint64_t)v25, type metadata accessor for PgQuery_Node);
      }
      outlined destroy of (key: String, value: StorableValue)(v44, v49);
      v74 = v89;
LABEL_40:
      outlined destroy of (key: String, value: StorableValue)(v74, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_41;
    }
  }
  return v33 & 1;
}

uint64_t specialized static PgQuery_TableFunc.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t TableFunc;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  int v88;
  int v89;
  BOOL v90;
  void (*v91)(char *, uint64_t, uint64_t);
  char *v92;
  char v93;
  void (*v94)(char *, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t Node;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v96 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v11 = *(_QWORD *)(Node - 8);
  v12 = MEMORY[0x1E0C80A78](Node);
  v103 = (uint64_t)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v105 = (uint64_t)&v96 - v14;
  v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v15 = MEMORY[0x1E0C80A78](v108);
  v107 = (uint64_t)&v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v96 - v17;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v20 = MEMORY[0x1E0C80A78](v19);
  v104 = (uint64_t)&v96 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v106 = (char *)&v96 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v96 - v25;
  MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v96 - v27;
  TableFunc = type metadata accessor for PgQuery_TableFunc(0);
  v30 = a1;
  v31 = *(int *)(TableFunc + 20);
  v32 = *(_QWORD *)(a1 + v31);
  v33 = *(_QWORD *)(a2 + v31);
  if (v32 == v33)
    goto LABEL_33;
  v98 = a2;
  v99 = v30;
  v100 = v8;
  v101 = v5;
  v102 = v4;
  v34 = *(_QWORD *)(v32 + 16);
  v35 = *(_QWORD *)(v33 + 16);
  v36 = v32;
  v37 = v33;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v38 = specialized static Array<A>.== infix(_:_:)(v34, v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v38 & 1) == 0)
    goto LABEL_36;
  v39 = *(_QWORD *)(v36 + 24);
  v40 = *(_QWORD *)(v37 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v41 = specialized static Array<A>.== infix(_:_:)(v39, v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v41 & 1) == 0)
    goto LABEL_36;
  v96 = v37;
  v97 = v36;
  v42 = v36
      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__docexpr;
  outlined init with copy of PgQuery_Alias?(v37+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__docexpr, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  v43 = (uint64_t)&v18[*(int *)(v108 + 48)];
  outlined init with copy of PgQuery_Alias?(v42, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, v43, &demangling cache variable for type metadata for PgQuery_Node?);
  v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  v45 = Node;
  if (v44((uint64_t)v18, 1, Node) == 1)
  {
    if (v44(v43, 1, v45) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
      v46 = v96;
      v47 = v97;
      goto LABEL_13;
    }
LABEL_9:
    v48 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    v49 = (uint64_t)v18;
LABEL_35:
    outlined destroy of (key: String, value: StorableValue)(v49, v48);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_36;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v18, (uint64_t)v26, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v44(v43, 1, v45) == 1)
  {
    outlined destroy of PgQuery_Alias((uint64_t)v26, type metadata accessor for PgQuery_Node);
    goto LABEL_9;
  }
  v50 = v105;
  outlined init with take of PgQuery_OidList(v43, v105, type metadata accessor for PgQuery_Node);
  v51 = *(int *)(v45 + 20);
  v52 = *(_QWORD *)&v26[v51];
  v53 = *(_QWORD *)(v50 + v51);
  if (v52 != v53)
  {
    swift_retain();
    swift_retain();
    v54 = closure #1 in static PgQuery_Node.== infix(_:_:)(v52, v53);
    swift_release();
    swift_release();
    if (!v54)
    {
      outlined destroy of PgQuery_Alias(v50, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias((uint64_t)v26, type metadata accessor for PgQuery_Node);
      v48 = &demangling cache variable for type metadata for PgQuery_Node?;
      v49 = (uint64_t)v18;
      goto LABEL_35;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v55 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v50, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v26, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  v46 = v96;
  v47 = v97;
  if ((v55 & 1) == 0)
    goto LABEL_36;
LABEL_13:
  v56 = v47
      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowexpr;
  v28 = v106;
  outlined init with copy of PgQuery_Alias?(v46+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowexpr, (uint64_t)v106, &demangling cache variable for type metadata for PgQuery_Node?);
  v57 = v107;
  v58 = v107 + *(int *)(v108 + 48);
  outlined init with copy of PgQuery_Alias?(v56, v107, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, v58, &demangling cache variable for type metadata for PgQuery_Node?);
  v59 = Node;
  if (v44(v57, 1, Node) != 1)
  {
    v62 = v104;
    outlined init with copy of PgQuery_Alias?(v57, v104, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v44(v58, 1, v59) == 1)
    {
      outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_Node);
      goto LABEL_18;
    }
    v63 = v103;
    outlined init with take of PgQuery_OidList(v58, v103, type metadata accessor for PgQuery_Node);
    v64 = *(int *)(v59 + 20);
    v65 = *(_QWORD *)(v62 + v64);
    v66 = *(_QWORD *)(v63 + v64);
    if (v65 != v66)
    {
      swift_retain();
      swift_retain();
      v67 = closure #1 in static PgQuery_Node.== infix(_:_:)(v65, v66);
      swift_release();
      swift_release();
      if (!v67)
      {
        outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_Node);
        v48 = &demangling cache variable for type metadata for PgQuery_Node?;
        goto LABEL_19;
      }
    }
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v68 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
    outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_Node);
    outlined destroy of (key: String, value: StorableValue)(v57, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
    v60 = v96;
    v61 = v97;
    if ((v68 & 1) != 0)
      goto LABEL_23;
LABEL_36:
    swift_release();
    swift_release();
LABEL_37:
    v93 = 0;
    return v93 & 1;
  }
  if (v44(v58, 1, v59) != 1)
  {
LABEL_18:
    v48 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_19:
    v49 = v57;
    goto LABEL_35;
  }
  outlined destroy of (key: String, value: StorableValue)(v57, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  v60 = v96;
  v61 = v97;
LABEL_23:
  v69 = *(_QWORD *)(v61
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colnames);
  v70 = *(_QWORD *)(v60
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colnames);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v71 = specialized static Array<A>.== infix(_:_:)(v69, v70);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v71 & 1) == 0)
    goto LABEL_36;
  v72 = *(_QWORD *)(v61
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypes);
  v73 = *(_QWORD *)(v60
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypes);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v74 = specialized static Array<A>.== infix(_:_:)(v72, v73);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v74 & 1) == 0)
    goto LABEL_36;
  v75 = *(_QWORD *)(v61
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypmods);
  v76 = *(_QWORD *)(v60
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypmods);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v77 = specialized static Array<A>.== infix(_:_:)(v75, v76);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v77 & 1) == 0)
    goto LABEL_36;
  v78 = *(_QWORD *)(v61
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colcollations);
  v79 = *(_QWORD *)(v60
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colcollations);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v80 = specialized static Array<A>.== infix(_:_:)(v78, v79);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v80 & 1) == 0)
    goto LABEL_36;
  v81 = *(_QWORD *)(v61
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colexprs);
  v82 = *(_QWORD *)(v60
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colexprs);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v83 = specialized static Array<A>.== infix(_:_:)(v81, v82);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v83 & 1) == 0)
    goto LABEL_36;
  v84 = *(_QWORD *)(v61
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coldefexprs);
  v85 = *(_QWORD *)(v60
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coldefexprs);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v86 = specialized static Array<A>.== infix(_:_:)(v84, v85);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v86 & 1) == 0)
    goto LABEL_36;
  if (!specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(v61+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__notnulls), *(_QWORD **)(v60+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__notnulls)))goto LABEL_36;
  v87 = v60;
  if (*(_DWORD *)(v61
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ordinalitycol) != *(_DWORD *)(v60 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ordinalitycol))
    goto LABEL_36;
  v88 = *(_DWORD *)(v61
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  v89 = *(_DWORD *)(v87
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  v90 = v88 == v89;
  v5 = v101;
  v4 = v102;
  v30 = v99;
  v8 = v100;
  a2 = v98;
  if (!v90)
    goto LABEL_37;
LABEL_33:
  v91 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v91(v10, v30, v4);
  v91(v8, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v92 = v8;
  v93 = dispatch thunk of static Equatable.== infix(_:_:)();
  v94 = *(void (**)(char *, uint64_t))(v5 + 8);
  v94(v92, v4);
  v94(v10, v4);
  return v93 & 1;
}

uint64_t specialized static PgQuery_ScanToken.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t ScanToken;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  void (*v20)(char *, uint64_t);
  uint64_t v21;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v21 - v9;
  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    goto LABEL_6;
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    goto LABEL_6;
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(_BYTE *)(a2 + 16);
  v13 = PgQuery_Token.rawValue.getter(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  if (v13 != PgQuery_Token.rawValue.getter(v11, v12))
    goto LABEL_6;
  v14 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(a2 + 32) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)(a1 + 24) == v14)
  {
    ScanToken = type metadata accessor for PgQuery_ScanToken(0);
    v18 = a1 + *(int *)(ScanToken + 32);
    v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v19(v10, v18, v4);
    v19(v8, a2 + *(int *)(ScanToken + 32), v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    v20 = *(void (**)(char *, uint64_t))(v5 + 8);
    v20(v8, v4);
    v20(v10, v4);
  }
  else
  {
LABEL_6:
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t specialized static PgQuery_ResTarget.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ResTarget;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  char v46;
  int v47;
  int v48;
  void (*v49)(char *, uint64_t, uint64_t);
  void (*v50)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t Node;
  uint64_t v60;
  uint64_t v61;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v52 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v11 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v57 = (uint64_t)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v13);
  v60 = (uint64_t)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v16 = MEMORY[0x1E0C80A78](v15);
  v58 = (uint64_t)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v61 = (uint64_t)&v52 - v18;
  ResTarget = type metadata accessor for PgQuery_ResTarget(0);
  v20 = a1;
  v21 = *(int *)(ResTarget + 20);
  v22 = *(_QWORD **)(a1 + v21);
  v23 = *(_QWORD **)(a2 + v21);
  if (v22 == v23)
  {
LABEL_19:
    v49 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v49(v10, v20, v4);
    v49(v8, a2, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v25 = dispatch thunk of static Equatable.== infix(_:_:)();
    v50 = *(void (**)(char *, uint64_t))(v5 + 8);
    v50(v8, v4);
    v50(v10, v4);
    return v25 & 1;
  }
  v55 = a1;
  v56 = a2;
  v24 = v22[2] == v23[2] && v22[3] == v23[3];
  if (v24 || (v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v53 = v5;
    v54 = v8;
    v26 = v22[4];
    v27 = v23[4];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v28 = specialized static Array<A>.== infix(_:_:)(v26, v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v28 & 1) != 0)
    {
      v29 = (uint64_t)v22
          + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ResTargetP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__val;
      v30 = v61;
      outlined init with copy of PgQuery_Alias?((uint64_t)v23+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ResTargetP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__val, v61, &demangling cache variable for type metadata for PgQuery_Node?);
      v31 = v60;
      v32 = v60 + *(int *)(v13 + 48);
      outlined init with copy of PgQuery_Alias?(v29, v60, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined init with copy of PgQuery_Alias?(v30, v32, &demangling cache variable for type metadata for PgQuery_Node?);
      v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
      v34 = Node;
      if (v33(v31, 1, Node) == 1)
      {
        v35 = v33(v32, 1, v34);
        v8 = v54;
        if (v35 == 1)
        {
          outlined destroy of (key: String, value: StorableValue)(v31, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined destroy of (key: String, value: StorableValue)(v61, &demangling cache variable for type metadata for PgQuery_Node?);
          goto LABEL_17;
        }
        v38 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
        goto LABEL_22;
      }
      v36 = v58;
      outlined init with copy of PgQuery_Alias?(v31, v58, &demangling cache variable for type metadata for PgQuery_Node?);
      v37 = v33(v32, 1, v34);
      v8 = v54;
      if (v37 == 1)
      {
        v38 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_21:
        outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
LABEL_22:
        outlined destroy of (key: String, value: StorableValue)(v31, v38);
        outlined destroy of (key: String, value: StorableValue)(v61, &demangling cache variable for type metadata for PgQuery_Node?);
        goto LABEL_23;
      }
      v39 = v34;
      v40 = v57;
      outlined init with take of PgQuery_OidList(v32, v57, type metadata accessor for PgQuery_Node);
      v41 = *(int *)(v39 + 20);
      v42 = *(_QWORD *)(v36 + v41);
      v43 = *(_QWORD *)(v40 + v41);
      if (v42 != v43)
      {
        swift_retain();
        swift_retain();
        v44 = closure #1 in static PgQuery_Node.== infix(_:_:)(v42, v43);
        swift_release();
        swift_release();
        if (!v44)
        {
          outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_Node);
          v38 = &demangling cache variable for type metadata for PgQuery_Node?;
          v31 = v60;
          v36 = v58;
          goto LABEL_21;
        }
      }
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v45 = v58;
      v46 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_Node);
      outlined destroy of (key: String, value: StorableValue)(v60, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)(v61, &demangling cache variable for type metadata for PgQuery_Node?);
      if ((v46 & 1) != 0)
      {
LABEL_17:
        v47 = *(_DWORD *)((char *)v22
                        + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ResTargetP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
        v48 = *(_DWORD *)((char *)v23
                        + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ResTargetP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
        swift_release();
        swift_release();
        v24 = v47 == v48;
        v5 = v53;
        v20 = v55;
        a2 = v56;
        if (!v24)
          goto LABEL_24;
        goto LABEL_19;
      }
    }
LABEL_23:
    swift_release();
    swift_release();
LABEL_24:
    v25 = 0;
  }
  return v25 & 1;
}

uint64_t specialized static PgQuery_IndexStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t Node;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t RangeVar;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  int v72;
  int v73;
  BOOL v74;
  void (*v75)(char *);
  void (*v76)(char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v95 = a1;
  v3 = type metadata accessor for UnknownStorage();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v78 - v8;
  Node = type metadata accessor for PgQuery_Node(0);
  v87 = *(_QWORD *)(Node - 8);
  v88 = Node;
  MEMORY[0x1E0C80A78](Node);
  v84 = (uint64_t)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v86);
  v90 = (uint64_t)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v85 = (uint64_t)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v89 = (uint64_t)&v78 - v16;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v18 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v91 = (uint64_t)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v24 = MEMORY[0x1E0C80A78](v23);
  v92 = (uint64_t)&v78 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v78 - v26;
  v28 = *(int *)(type metadata accessor for PgQuery_IndexStmt(0) + 20);
  v29 = *(_QWORD *)(v95 + v28);
  v30 = *(_QWORD *)(a2 + v28);
  if (v29 == v30)
    goto LABEL_53;
  v82 = v9;
  v83 = a2;
  v81 = v7;
  v31 = *(_QWORD *)(v29 + 16);
  v32 = *(_QWORD *)(v29 + 24);
  v93 = v30;
  v94 = v29;
  if ((v31 != *(_QWORD *)(v30 + 16) || v32 != *(_QWORD *)(v30 + 24))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    swift_retain();
    swift_retain();
    goto LABEL_41;
  }
  v79 = v4;
  v80 = v3;
  v34 = v93;
  v33 = v94;
  v35 = v94
      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  outlined init with copy of PgQuery_Alias?(v93+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v27, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v36 = (uint64_t)&v22[*(int *)(v20 + 48)];
  outlined init with copy of PgQuery_Alias?(v35, (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v27, v36, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  if (v37((uint64_t)v22, 1, RangeVar) == 1)
  {
    v38 = v37(v36, 1, RangeVar);
    swift_retain();
    swift_retain();
    v39 = v33;
    v40 = v34;
    if (v38 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v27, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_14;
    }
LABEL_10:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    v42 = &demangling cache variable for type metadata for PgQuery_RangeVar?;
    v43 = (uint64_t)v27;
LABEL_11:
    outlined destroy of (key: String, value: StorableValue)(v43, v42);
    goto LABEL_41;
  }
  v41 = v92;
  outlined init with copy of PgQuery_Alias?((uint64_t)v22, v92, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v37(v36, 1, RangeVar) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias(v41, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_10;
  }
  v44 = v91;
  outlined init with take of PgQuery_OidList(v36, v91, type metadata accessor for PgQuery_RangeVar);
  v39 = v94;
  swift_retain();
  v40 = v93;
  swift_retain();
  v45 = specialized static PgQuery_RangeVar.== infix(_:_:)(v41, v44);
  outlined destroy of PgQuery_Alias(v44, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias(v41, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v27, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v45 & 1) == 0)
    goto LABEL_41;
LABEL_14:
  if ((*(_QWORD *)(v39
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod) != *(_QWORD *)(v40 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod)
     || *(_QWORD *)(v39
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                  + 8) != *(_QWORD *)(v40
                                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                                    + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_41;
  }
  if ((*(_QWORD *)(v39
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpace) != *(_QWORD *)(v40 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpace)
     || *(_QWORD *)(v39
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpace
                  + 8) != *(_QWORD *)(v40
                                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpace
                                    + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_41;
  }
  v46 = *(_QWORD *)(v39
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexParams);
  v47 = *(_QWORD *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexParams);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v48 = specialized static Array<A>.== infix(_:_:)(v46, v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v48 & 1) == 0)
    goto LABEL_41;
  v49 = *(_QWORD *)(v39
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexIncludingParams);
  v50 = *(_QWORD *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexIncludingParams);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v51 = specialized static Array<A>.== infix(_:_:)(v49, v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v51 & 1) == 0)
    goto LABEL_41;
  v52 = *(_QWORD *)(v39
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
  v53 = *(_QWORD *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v54 = specialized static Array<A>.== infix(_:_:)(v52, v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v54 & 1) == 0)
    goto LABEL_41;
  v55 = v39
      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  v56 = v89;
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v89, &demangling cache variable for type metadata for PgQuery_Node?);
  v57 = v90;
  v58 = v90 + *(int *)(v86 + 48);
  outlined init with copy of PgQuery_Alias?(v55, v90, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v56, v58, &demangling cache variable for type metadata for PgQuery_Node?);
  v59 = v88;
  v60 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v87 + 48);
  if (v60(v57, 1, v88) == 1)
  {
    if (v60(v58, 1, v59) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v57, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)(v56, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_32:
      v68 = *(_QWORD *)(v39
                      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__excludeOpNames);
      v69 = *(_QWORD *)(v40
                      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__excludeOpNames);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v70 = specialized static Array<A>.== infix(_:_:)(v68, v69);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v70 & 1) == 0
        || (*(_QWORD *)(v39
                      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__idxcomment) != *(_QWORD *)(v40 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__idxcomment)
         || *(_QWORD *)(v39
                      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__idxcomment
                      + 8) != *(_QWORD *)(v40
                                        + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__idxcomment
                                        + 8))
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
        || *(_DWORD *)(v39
                     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexOid) != *(_DWORD *)(v40 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexOid)
        || *(_DWORD *)(v39
                     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldNode) != *(_DWORD *)(v40 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldNode)
        || *(_DWORD *)(v39
                     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldCreateSubid) != *(_DWORD *)(v40 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldCreateSubid)
        || *(_DWORD *)(v39
                     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldFirstRelfilenodeSubid) != *(_DWORD *)(v40 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldFirstRelfilenodeSubid)
        || *(unsigned __int8 *)(v39
                              + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__unique) != *(unsigned __int8 *)(v40 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__unique)
        || *(unsigned __int8 *)(v39
                              + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__primary) != *(unsigned __int8 *)(v40 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__primary)
        || *(unsigned __int8 *)(v94
                              + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isconstraint) != *(unsigned __int8 *)(v93 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isconstraint)
        || *(unsigned __int8 *)(v94
                              + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__deferrable) != *(unsigned __int8 *)(v93 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__deferrable)
        || *(unsigned __int8 *)(v94
                              + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initdeferred) != *(unsigned __int8 *)(v93 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initdeferred)
        || *(unsigned __int8 *)(v94
                              + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__transformed) != *(unsigned __int8 *)(v93 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__transformed)
        || *(unsigned __int8 *)(v94
                              + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__concurrent) != *(unsigned __int8 *)(v93 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__concurrent)
        || *(unsigned __int8 *)(v94
                              + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists) != *(unsigned __int8 *)(v93 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists))
      {
        goto LABEL_41;
      }
      v72 = *(unsigned __int8 *)(v94
                               + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resetDefaultTblspc);
      v73 = *(unsigned __int8 *)(v93
                               + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resetDefaultTblspc);
      swift_release();
      swift_release();
      v74 = v72 == v73;
      v4 = v79;
      v3 = v80;
      v7 = v81;
      v9 = v82;
      a2 = v83;
      if (!v74)
      {
        v71 = 0;
        return v71 & 1;
      }
LABEL_53:
      v75 = *(void (**)(char *))(v4 + 16);
      v75(v9);
      ((void (*)(char *, uint64_t, uint64_t))v75)(v7, a2, v3);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v71 = dispatch thunk of static Equatable.== infix(_:_:)();
      v76 = *(void (**)(char *, uint64_t))(v4 + 8);
      v76(v7, v3);
      v76(v9, v3);
      return v71 & 1;
    }
    goto LABEL_28;
  }
  v61 = v85;
  outlined init with copy of PgQuery_Alias?(v57, v85, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v60(v58, 1, v59) == 1)
  {
    outlined destroy of PgQuery_Alias(v61, type metadata accessor for PgQuery_Node);
LABEL_28:
    outlined destroy of (key: String, value: StorableValue)(v57, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    v42 = &demangling cache variable for type metadata for PgQuery_Node?;
    v43 = v56;
    goto LABEL_11;
  }
  v62 = v84;
  outlined init with take of PgQuery_OidList(v58, v84, type metadata accessor for PgQuery_Node);
  v63 = *(int *)(v59 + 20);
  v64 = *(_QWORD *)(v61 + v63);
  v65 = *(_QWORD *)(v62 + v63);
  if (v64 != v65)
  {
    swift_retain();
    swift_retain();
    v66 = closure #1 in static PgQuery_Node.== infix(_:_:)(v64, v65);
    swift_release();
    swift_release();
    if (!v66)
    {
      outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias(v61, type metadata accessor for PgQuery_Node);
      outlined destroy of (key: String, value: StorableValue)(v57, &demangling cache variable for type metadata for PgQuery_Node?);
      v43 = v56;
      v42 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_11;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v67 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v61, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v57, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v56, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v67 & 1) != 0)
    goto LABEL_32;
LABEL_41:
  swift_release();
  swift_release();
  v71 = 0;
  return v71 & 1;
}

uint64_t specialized static PgQuery_IndexElem.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t IndexElem;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  char v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v63 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v12 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v69 = (uint64_t)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v18 = MEMORY[0x1E0C80A78](v17);
  v70 = (uint64_t)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v72 = (uint64_t)&v63 - v20;
  IndexElem = type metadata accessor for PgQuery_IndexElem(0);
  v22 = a1;
  v23 = *(int *)(IndexElem + 20);
  v24 = *(_QWORD *)(a1 + v23);
  v25 = *(_QWORD *)(a2 + v23);
  if (v24 == v25)
    goto LABEL_35;
  v66 = a2;
  v67 = v22;
  v64 = v8;
  v65 = v10;
  v68 = v5;
  v26 = *(_QWORD *)(v24 + 16) == *(_QWORD *)(v25 + 16) && *(_QWORD *)(v24 + 24) == *(_QWORD *)(v25 + 24);
  v71 = v24;
  v27 = v25;
  if (v26 || (v28 = _stringCompareWithSmolCheck(_:_:expecting:)(), v25 = v27, v24 = v71, v29 = 0, (v28 & 1) != 0))
  {
    v63 = v4;
    v30 = v24
        + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr;
    v31 = v72;
    outlined init with copy of PgQuery_Alias?(v25+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, v72, &demangling cache variable for type metadata for PgQuery_Node?);
    v32 = (uint64_t)&v16[*(int *)(v14 + 48)];
    outlined init with copy of PgQuery_Alias?(v30, (uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined init with copy of PgQuery_Alias?(v31, v32, &demangling cache variable for type metadata for PgQuery_Node?);
    v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    if (v33((uint64_t)v16, 1, Node) == 1)
    {
      v34 = v33(v32, 1, Node);
      swift_retain();
      swift_retain();
      if (v34 == 1)
      {
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v72, &demangling cache variable for type metadata for PgQuery_Node?);
        v35 = v27;
        goto LABEL_16;
      }
      v37 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v36 = v70;
      outlined init with copy of PgQuery_Alias?((uint64_t)v16, v70, &demangling cache variable for type metadata for PgQuery_Node?);
      if (v33(v32, 1, Node) == 1)
      {
        swift_retain();
        swift_retain();
        v37 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
      }
      else
      {
        v38 = v69;
        outlined init with take of PgQuery_OidList(v32, v69, type metadata accessor for PgQuery_Node);
        v39 = *(int *)(Node + 20);
        v40 = *(_QWORD *)(v36 + v39);
        v41 = *(_QWORD *)(v38 + v39);
        swift_retain();
        swift_retain();
        if (v40 == v41
          || (swift_retain(),
              swift_retain(),
              v42 = closure #1 in static PgQuery_Node.== infix(_:_:)(v40, v41),
              swift_release(),
              swift_release(),
              v42))
        {
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v43 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of PgQuery_Alias(v38, type metadata accessor for PgQuery_Node);
          outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
          outlined destroy of (key: String, value: StorableValue)((uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined destroy of (key: String, value: StorableValue)(v72, &demangling cache variable for type metadata for PgQuery_Node?);
          v35 = v27;
          if ((v43 & 1) != 0)
          {
LABEL_16:
            v44 = v71;
            if (*(_QWORD *)(v71
                           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexcolname) == *(_QWORD *)(v35 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexcolname)
              && *(_QWORD *)(v71
                           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexcolname
                           + 8) == *(_QWORD *)(v35
                                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexcolname
                                             + 8)
              || (v45 = _stringCompareWithSmolCheck(_:_:expecting:)(), v35 = v27, v44 = v71, (v45 & 1) != 0))
            {
              v46 = *(_QWORD *)(v44
                              + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation);
              v47 = *(_QWORD *)(v35
                              + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation);
              v48 = v35;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v49 = specialized static Array<A>.== infix(_:_:)(v46, v47);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v49 & 1) != 0)
              {
                v50 = *(_QWORD *)(v44
                                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opclass);
                v51 = *(_QWORD *)(v48
                                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opclass);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v52 = specialized static Array<A>.== infix(_:_:)(v50, v51);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v52 & 1) != 0)
                {
                  v53 = *(_QWORD *)(v44
                                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opclassopts);
                  v54 = *(_QWORD *)(v48
                                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opclassopts);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v55 = specialized static Array<A>.== infix(_:_:)(v53, v54);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v55 & 1) != 0)
                  {
                    v56 = *(_QWORD *)(v48
                                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ordering);
                    if (*(_BYTE *)(v48
                                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ordering
                                  + 8) == 1)
                      __asm { BR              X11 }
                    v4 = v63;
                    v5 = v68;
                    if (*(_QWORD *)(v44
                                   + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ordering) == v56)
                    {
                      v57 = *(_QWORD *)(v48
                                      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nullsOrdering);
                      if (*(_BYTE *)(v48
                                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nullsOrdering
                                    + 8) == 1)
                        __asm { BR              X11 }
                      if (*(_QWORD *)(v44
                                     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nullsOrdering) == v57)
                      {
                        swift_release();
                        swift_release();
                        v8 = v64;
                        v10 = v65;
                        a2 = v66;
                        v22 = v67;
LABEL_35:
                        v58 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
                        v58(v10, v22, v4);
                        v58(v8, a2, v4);
                        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
                        v59 = dispatch thunk of static Equatable.== infix(_:_:)();
                        v60 = v5;
                        v29 = v59;
                        v61 = *(void (**)(char *, uint64_t))(v60 + 8);
                        v61(v8, v4);
                        v61(v10, v4);
                        return v29 & 1;
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_28:
          swift_release();
          swift_release();
          v29 = 0;
          return v29 & 1;
        }
        outlined destroy of PgQuery_Alias(v38, type metadata accessor for PgQuery_Node);
        v37 = &demangling cache variable for type metadata for PgQuery_Node?;
      }
      outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
    }
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v16, v37);
    outlined destroy of (key: String, value: StorableValue)(v72, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_28;
  }
  return v29 & 1;
}

uint64_t specialized static PgQuery_GrantStmt.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t GrantStmt;
  unsigned __int8 *v20;
  void (*v21)(char *, unsigned __int8 *, uint64_t);
  void (*v22)(char *, uint64_t);
  uint64_t v23;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v23 - v9;
  if (*a1 == *a2)
  {
    v13 = *((_QWORD *)a2 + 1);
    if (a2[16] == 1)
      __asm { BR              X11 }
    if (*((_QWORD *)a1 + 1) == v13)
    {
      v14 = *((_QWORD *)a2 + 3);
      v15 = a2[32];
      v16 = destructiveProjectEnumData for StorableValue(*((_QWORD *)a1 + 3), a1[32]);
      if (v16 == destructiveProjectEnumData for StorableValue(v14, v15)
        && (specialized static Array<A>.== infix(_:_:)(*((_QWORD *)a1 + 5), *((_QWORD *)a2 + 5)) & 1) != 0
        && (specialized static Array<A>.== infix(_:_:)(*((_QWORD *)a1 + 6), *((_QWORD *)a2 + 6)) & 1) != 0
        && (specialized static Array<A>.== infix(_:_:)(*((_QWORD *)a1 + 7), *((_QWORD *)a2 + 7)) & 1) != 0
        && a1[64] == a2[64])
      {
        v17 = *((_QWORD *)a1 + 9);
        v18 = *((_QWORD *)a2 + 9);
        if (a2[80] == 1)
        {
          if (v18)
          {
            if (v18 == 1)
            {
              if (v17 == 1)
                goto LABEL_22;
            }
            else if (v17 == 2)
            {
LABEL_22:
              GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
              v20 = &a1[*(int *)(GrantStmt + 48)];
              v21 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 16);
              v21(v10, v20, v4);
              v21(v8, &a2[*(int *)(GrantStmt + 48)], v4);
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
              v11 = dispatch thunk of static Equatable.== infix(_:_:)();
              v22 = *(void (**)(char *, uint64_t))(v5 + 8);
              v22(v8, v4);
              v22(v10, v4);
              return v11 & 1;
            }
          }
          else if (!v17)
          {
            goto LABEL_22;
          }
        }
        else if (v17 == v18)
        {
          goto LABEL_22;
        }
      }
    }
  }
  v11 = 0;
  return v11 & 1;
}

uint64_t specialized static PgQuery_FetchStmt.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  uint64_t Stmt;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  v11 = *a2;
  if (*((_BYTE *)a2 + 8) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)a1 != v11 || *(_QWORD *)(a1 + 16) != a2[2])
    goto LABEL_10;
  if (*(_QWORD *)(a1 + 24) == a2[3] && *(_QWORD *)(a1 + 32) == a2[4]
    || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(unsigned __int8 *)(a1 + 40) == *((unsigned __int8 *)a2 + 40))
    {
      Stmt = type metadata accessor for PgQuery_FetchStmt(0);
      v14 = a1 + *(int *)(Stmt + 32);
      v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v15(v10, v14, v4);
      v15(v8, (uint64_t)a2 + *(int *)(Stmt + 32), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
      return v12 & 1;
    }
LABEL_10:
    v12 = 0;
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_A_ArrayExpr.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v19 - v11;
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & 1) != 0
    && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8))
  {
    v13 = a3(0);
    v14 = a1 + *(int *)(v13 + 24);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v15(v12, v14, v6);
    v15(v10, a2 + *(int *)(v13 + 24), v6);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v7 + 8);
    v17(v10, v6);
    v17(v12, v6);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static PgQuery_CollateClause.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Node;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t);
  int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  int v38;
  int v39;
  void (*v40)(char *, uint64_t, uint64_t);
  char *v41;
  char *v42;
  char v43;
  void (*v44)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v53 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v52 = (char *)&v46 - v8;
  Node = type metadata accessor for PgQuery_Node(0);
  v10 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v49 = (uint64_t)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v46 - v19;
  v21 = *(int *)(type metadata accessor for PgQuery_CollateClause(0) + 20);
  v50 = a1;
  v51 = a2;
  v22 = *(_QWORD *)(a1 + v21);
  v23 = *(_QWORD *)(a2 + v21);
  if (v22 == v23)
    goto LABEL_13;
  v47 = v5;
  v48 = v4;
  v24 = v22
      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  outlined init with copy of PgQuery_Alias?(v23+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  v25 = (uint64_t)&v14[*(int *)(v12 + 48)];
  outlined init with copy of PgQuery_Alias?(v24, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v25, &demangling cache variable for type metadata for PgQuery_Node?);
  v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v26((uint64_t)v14, 1, Node) == 1)
  {
    v27 = v26(v25, 1, Node);
    swift_retain();
    swift_retain();
    if (v27 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
      v4 = v48;
      goto LABEL_11;
    }
    v28 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_16:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, v28);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_17;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v26(v25, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    v28 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_15:
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_Node);
    goto LABEL_16;
  }
  v29 = v49;
  outlined init with take of PgQuery_OidList(v25, v49, type metadata accessor for PgQuery_Node);
  v30 = *(int *)(Node + 20);
  v31 = *(_QWORD *)&v18[v30];
  v32 = *(_QWORD *)(v29 + v30);
  swift_retain();
  swift_retain();
  if (v31 != v32)
  {
    swift_retain();
    swift_retain();
    v33 = closure #1 in static PgQuery_Node.== infix(_:_:)(v31, v32);
    swift_release();
    swift_release();
    if (!v33)
    {
      outlined destroy of PgQuery_Alias(v29, type metadata accessor for PgQuery_Node);
      v28 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_15;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v4 = v48;
  v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v29, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v34 & 1) == 0)
  {
LABEL_17:
    swift_release();
    swift_release();
    goto LABEL_18;
  }
LABEL_11:
  v35 = *(_QWORD *)(v22
                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collname);
  v36 = *(_QWORD *)(v23
                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collname);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v37 = specialized static Array<A>.== infix(_:_:)(v35, v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v37 & 1) == 0)
    goto LABEL_17;
  v38 = *(_DWORD *)(v22
                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  v39 = *(_DWORD *)(v23
                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  v5 = v47;
  if (v38 != v39)
  {
LABEL_18:
    v43 = 0;
    return v43 & 1;
  }
LABEL_13:
  v40 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v41 = v52;
  v40(v52, v50, v4);
  v42 = v53;
  v40(v53, v51, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v43 = dispatch thunk of static Equatable.== infix(_:_:)();
  v44 = *(void (**)(char *, uint64_t))(v5 + 8);
  v44(v42, v4);
  v44(v41, v4);
  return v43 & 1;
}

uint64_t specialized static PgQuery_ArrayExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t ArrayExpr;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t);
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  int v46;
  int v47;
  BOOL v48;
  void (*v49)(char *, uint64_t, uint64_t);
  void (*v50)(char *, uint64_t);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v52 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v60 = *(_QWORD *)(Node - 8);
  v61 = Node;
  MEMORY[0x1E0C80A78](Node);
  v58 = (uint64_t)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v59 = (uint64_t)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v52 - v19;
  ArrayExpr = type metadata accessor for PgQuery_ArrayExpr(0);
  v22 = a1;
  v23 = *(int *)(ArrayExpr + 20);
  v24 = *(_QWORD *)(a1 + v23);
  v25 = *(_QWORD *)(a2 + v23);
  if (v24 == v25)
    goto LABEL_23;
  v54 = a2;
  v55 = v22;
  v53 = v10;
  v56 = v5;
  v57 = v4;
  v26 = v24
      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v25 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  v28 = (uint64_t)v20;
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v27, &demangling cache variable for type metadata for PgQuery_Node?);
  v29 = v61;
  v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 48);
  if (v30((uint64_t)v15, 1, v61) == 1)
  {
    v31 = v30(v27, 1, v29);
    swift_retain();
    v32 = v25;
    swift_retain();
    if (v31 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_11;
    }
    v34 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_19;
  }
  v32 = v25;
  v33 = v59;
  outlined init with copy of PgQuery_Alias?((uint64_t)v15, v59, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v30(v27, 1, v29) == 1)
  {
    swift_retain();
    swift_retain();
    v34 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_18:
    outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
LABEL_19:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, v34);
    outlined destroy of (key: String, value: StorableValue)(v28, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_20;
  }
  v35 = v58;
  outlined init with take of PgQuery_OidList(v27, v58, type metadata accessor for PgQuery_Node);
  v36 = *(int *)(v29 + 20);
  v37 = *(_QWORD *)(v33 + v36);
  v38 = *(_QWORD *)(v35 + v36);
  swift_retain();
  swift_retain();
  if (v37 != v38)
  {
    swift_retain();
    swift_retain();
    v39 = closure #1 in static PgQuery_Node.== infix(_:_:)(v37, v38);
    swift_release();
    swift_release();
    if (!v39)
    {
      outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
      v34 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_18;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v40 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v28, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v40 & 1) != 0)
  {
LABEL_11:
    if (*(_DWORD *)(v24
                   + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arrayTypeid) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arrayTypeid))
      goto LABEL_20;
    if (*(_DWORD *)(v24
                   + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arrayCollid) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arrayCollid))
      goto LABEL_20;
    if (*(_DWORD *)(v24
                   + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elementTypeid) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elementTypeid))
      goto LABEL_20;
    v41 = *(_QWORD *)(v24
                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elements);
    v42 = *(_QWORD *)(v32
                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elements);
    v43 = v32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v44 = specialized static Array<A>.== infix(_:_:)(v41, v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v44 & 1) == 0
      || *(unsigned __int8 *)(v24
                            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__multidims) != *(unsigned __int8 *)(v43 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__multidims))
    {
      goto LABEL_20;
    }
    v46 = *(_DWORD *)(v24
                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    v47 = *(_DWORD *)(v43
                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    swift_release();
    v48 = v46 == v47;
    v5 = v56;
    v4 = v57;
    v10 = v53;
    a2 = v54;
    v22 = v55;
    if (!v48)
    {
      v45 = 0;
      return v45 & 1;
    }
LABEL_23:
    v49 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v49(v10, v22, v4);
    v49(v8, a2, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v45 = dispatch thunk of static Equatable.== infix(_:_:)();
    v50 = *(void (**)(char *, uint64_t))(v5 + 8);
    v50(v8, v4);
    v50(v10, v4);
    return v45 & 1;
  }
LABEL_20:
  swift_release();
  swift_release();
  v45 = 0;
  return v45 & 1;
}

uint64_t specialized static PgQuery_ViewStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Node;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t RangeVar;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t ViewStmt;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t, uint64_t);
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t, uint64_t);
  char *v74;
  char v75;
  void (*v76)(char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;

  v4 = type metadata accessor for UnknownStorage();
  v93 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v92 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v78 - v7;
  Node = type metadata accessor for PgQuery_Node(0);
  v86 = *(_QWORD *)(Node - 8);
  v87 = Node;
  MEMORY[0x1E0C80A78](Node);
  v83 = (uint64_t)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v85);
  v89 = (uint64_t)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v13 = MEMORY[0x1E0C80A78](v12);
  v84 = (uint64_t)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v88 = (uint64_t)&v78 - v15;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v17 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v90 = (uint64_t)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v78 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v23 = MEMORY[0x1E0C80A78](v22);
  v91 = (uint64_t)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v78 - v25;
  ViewStmt = type metadata accessor for PgQuery_ViewStmt(0);
  v28 = a1;
  v29 = *(int *)(ViewStmt + 20);
  v30 = *(_QWORD *)(a1 + v29);
  v31 = *(_QWORD *)(a2 + v29);
  if (v30 == v31)
    goto LABEL_30;
  v79 = v28;
  v80 = a2;
  v81 = v8;
  v82 = v4;
  v32 = v30
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__view;
  outlined init with copy of PgQuery_Alias?(v31 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__view, (uint64_t)v26, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v33 = (uint64_t)&v21[*(int *)(v19 + 48)];
  outlined init with copy of PgQuery_Alias?(v32, (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v26, v33, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v34((uint64_t)v21, 1, RangeVar) == 1)
  {
    v35 = v34(v33, 1, RangeVar);
    swift_retain();
    swift_retain();
    if (v35 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v26, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_11;
    }
LABEL_7:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    v37 = &demangling cache variable for type metadata for PgQuery_RangeVar?;
    v38 = (uint64_t)v26;
LABEL_8:
    outlined destroy of (key: String, value: StorableValue)(v38, v37);
    goto LABEL_31;
  }
  v36 = v91;
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, v91, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v34(v33, 1, RangeVar) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_7;
  }
  v39 = v33;
  v40 = v90;
  outlined init with take of PgQuery_OidList(v39, v90, type metadata accessor for PgQuery_RangeVar);
  swift_retain();
  swift_retain();
  v41 = specialized static PgQuery_RangeVar.== infix(_:_:)(v36, v40);
  outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v26, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v41 & 1) == 0)
    goto LABEL_31;
LABEL_11:
  v42 = *(_QWORD *)(v30
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aliases);
  v43 = *(_QWORD *)(v31
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aliases);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v44 = v30;
  v45 = specialized static Array<A>.== infix(_:_:)(v42, v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v45 & 1) == 0)
  {
LABEL_31:
    swift_release();
    swift_release();
    v75 = 0;
    return v75 & 1;
  }
  v46 = v44;
  v47 = v44
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query;
  v48 = v88;
  outlined init with copy of PgQuery_Alias?(v31 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, v88, &demangling cache variable for type metadata for PgQuery_Node?);
  v49 = v89;
  v50 = v89 + *(int *)(v85 + 48);
  outlined init with copy of PgQuery_Alias?(v47, v89, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v48, v50, &demangling cache variable for type metadata for PgQuery_Node?);
  v51 = v87;
  v52 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v86 + 48);
  if (v52(v49, 1, v87) == 1)
  {
    v53 = v52(v50, 1, v51);
    v4 = v82;
    if (v53 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v49, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)(v48, &demangling cache variable for type metadata for PgQuery_Node?);
      v54 = v46;
      goto LABEL_21;
    }
    v57 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_27;
  }
  v55 = v84;
  outlined init with copy of PgQuery_Alias?(v49, v84, &demangling cache variable for type metadata for PgQuery_Node?);
  v56 = v52(v50, 1, v51);
  v4 = v82;
  if (v56 == 1)
  {
    v57 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_26:
    outlined destroy of PgQuery_Alias(v55, type metadata accessor for PgQuery_Node);
LABEL_27:
    outlined destroy of (key: String, value: StorableValue)(v49, v57);
    v37 = &demangling cache variable for type metadata for PgQuery_Node?;
    v38 = v48;
    goto LABEL_8;
  }
  v58 = v50;
  v59 = v55;
  v60 = v83;
  outlined init with take of PgQuery_OidList(v58, v83, type metadata accessor for PgQuery_Node);
  v61 = *(int *)(v51 + 20);
  v62 = *(_QWORD *)(v59 + v61);
  v63 = *(_QWORD *)(v60 + v61);
  if (v62 != v63)
  {
    swift_retain();
    swift_retain();
    v64 = closure #1 in static PgQuery_Node.== infix(_:_:)(v62, v63);
    swift_release();
    swift_release();
    if (!v64)
    {
      outlined destroy of PgQuery_Alias(v60, type metadata accessor for PgQuery_Node);
      v57 = &demangling cache variable for type metadata for PgQuery_Node?;
      v55 = v84;
      goto LABEL_26;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v65 = v84;
  v66 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v60, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v65, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v49, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v48, &demangling cache variable for type metadata for PgQuery_Node?);
  v54 = v46;
  if ((v66 & 1) == 0)
    goto LABEL_31;
LABEL_21:
  if (*(unsigned __int8 *)(v54
                          + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__replace) != *(unsigned __int8 *)(v31 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__replace))
    goto LABEL_31;
  v67 = *(_QWORD *)(v54
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
  v68 = *(_QWORD *)(v31
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v69 = v54;
  v70 = specialized static Array<A>.== infix(_:_:)(v67, v68);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v70 & 1) == 0)
    goto LABEL_31;
  v71 = *(_QWORD *)(v31
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheckOption);
  if (*(_BYTE *)(v31
                + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheckOption
                + 8) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)(v69
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheckOption) != v71)
    goto LABEL_31;
  swift_release();
  swift_release();
  a2 = v80;
  v8 = v81;
  v28 = v79;
LABEL_30:
  v72 = v93;
  v73 = *(void (**)(char *, uint64_t, uint64_t))(v93 + 16);
  v73(v8, v28, v4);
  v74 = v92;
  v73(v92, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v75 = dispatch thunk of static Equatable.== infix(_:_:)();
  v76 = *(void (**)(char *, uint64_t))(v72 + 8);
  v76(v74, v4);
  v76(v8, v4);
  return v75 & 1;
}

uint64_t specialized static PgQuery_TypeName.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t TypeName;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v17 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & 1) != 0
    && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int8 *)(a1 + 12) == *(unsigned __int8 *)(a2 + 12)
    && *(unsigned __int8 *)(a1 + 13) == *(unsigned __int8 *)(a2 + 13)
    && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16)) & 1) != 0
    && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
    && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32)) & 1) != 0
    && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40))
  {
    TypeName = type metadata accessor for PgQuery_TypeName(0);
    v12 = a1 + *(int *)(TypeName + 48);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, a2 + *(int *)(TypeName + 48), v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static PgQuery_RuleStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Node;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t RangeVar;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t RuleStmt;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  int v59;
  int v60;
  BOOL v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t, uint64_t);
  char *v64;
  char v65;
  void (*v66)(char *, uint64_t);
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;

  v4 = type metadata accessor for UnknownStorage();
  v83 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v82 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v68 - v7;
  Node = type metadata accessor for PgQuery_Node(0);
  v77 = *(_QWORD *)(Node - 8);
  v78 = Node;
  MEMORY[0x1E0C80A78](Node);
  v73 = (uint64_t)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v76);
  v80 = (uint64_t)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v13 = MEMORY[0x1E0C80A78](v12);
  v74 = (uint64_t)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v79 = (char *)&v68 - v15;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v17 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v75 = (uint64_t)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v23 = MEMORY[0x1E0C80A78](v22);
  v81 = (uint64_t)&v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v68 - v25;
  RuleStmt = type metadata accessor for PgQuery_RuleStmt(0);
  v28 = a1;
  v29 = *(int *)(RuleStmt + 20);
  v30 = *(_QWORD *)(a1 + v29);
  v31 = *(_QWORD *)(a2 + v29);
  if (v30 == v31)
    goto LABEL_26;
  v70 = v28;
  v71 = a2;
  v69 = v8;
  v72 = v4;
  v32 = v30
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  outlined init with copy of PgQuery_Alias?(v31+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v26, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v33 = (uint64_t)&v21[*(int *)(v19 + 48)];
  outlined init with copy of PgQuery_Alias?(v32, (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v26, v33, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v34((uint64_t)v21, 1, RangeVar) == 1)
  {
    v35 = v34(v33, 1, RangeVar);
    swift_retain();
    swift_retain();
    if (v35 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v26, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_9;
    }
LABEL_7:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    v37 = &demangling cache variable for type metadata for PgQuery_RangeVar?;
LABEL_30:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v26, v37);
    goto LABEL_31;
  }
  v36 = v81;
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, v81, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v34(v33, 1, RangeVar) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_7;
  }
  v38 = v75;
  outlined init with take of PgQuery_OidList(v33, v75, type metadata accessor for PgQuery_RangeVar);
  swift_retain();
  swift_retain();
  v39 = specialized static PgQuery_RangeVar.== infix(_:_:)(v36, v38);
  outlined destroy of PgQuery_Alias(v38, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v26, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v39 & 1) == 0)
    goto LABEL_31;
LABEL_9:
  if ((*(_QWORD *)(v30
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rulename) != *(_QWORD *)(v31 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rulename)
     || *(_QWORD *)(v30
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rulename
                  + 8) != *(_QWORD *)(v31
                                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rulename
                                    + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_31;
  }
  v40 = v30
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  v26 = v79;
  outlined init with copy of PgQuery_Alias?(v31+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, (uint64_t)v79, &demangling cache variable for type metadata for PgQuery_Node?);
  v41 = v80;
  v42 = v80 + *(int *)(v76 + 48);
  outlined init with copy of PgQuery_Alias?(v40, v80, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v26, v42, &demangling cache variable for type metadata for PgQuery_Node?);
  v43 = v78;
  v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48);
  if (v44(v41, 1, v78) != 1)
  {
    v45 = v74;
    outlined init with copy of PgQuery_Alias?(v41, v74, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v44(v42, 1, v43) == 1)
    {
      v46 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_28:
      outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_Node);
      goto LABEL_29;
    }
    v47 = v42;
    v48 = v43;
    v49 = v73;
    outlined init with take of PgQuery_OidList(v47, v73, type metadata accessor for PgQuery_Node);
    v50 = *(int *)(v48 + 20);
    v51 = *(_QWORD *)(v45 + v50);
    v52 = *(_QWORD *)(v49 + v50);
    if (v51 != v52)
    {
      swift_retain();
      swift_retain();
      v53 = closure #1 in static PgQuery_Node.== infix(_:_:)(v51, v52);
      swift_release();
      swift_release();
      if (!v53)
      {
        outlined destroy of PgQuery_Alias(v49, type metadata accessor for PgQuery_Node);
        v46 = &demangling cache variable for type metadata for PgQuery_Node?;
        v45 = v74;
        goto LABEL_28;
      }
    }
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v54 = v74;
    v4 = v72;
    v55 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of PgQuery_Alias(v49, type metadata accessor for PgQuery_Node);
    outlined destroy of PgQuery_Alias(v54, type metadata accessor for PgQuery_Node);
    outlined destroy of (key: String, value: StorableValue)(v41, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v26, &demangling cache variable for type metadata for PgQuery_Node?);
    if ((v55 & 1) != 0)
      goto LABEL_21;
LABEL_31:
    swift_release();
    swift_release();
LABEL_32:
    v65 = 0;
    return v65 & 1;
  }
  if (v44(v42, 1, v43) != 1)
  {
    v46 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_29:
    outlined destroy of (key: String, value: StorableValue)(v41, v46);
    v37 = &demangling cache variable for type metadata for PgQuery_Node?;
    goto LABEL_30;
  }
  outlined destroy of (key: String, value: StorableValue)(v41, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v26, &demangling cache variable for type metadata for PgQuery_Node?);
  v4 = v72;
LABEL_21:
  if (!specialized == infix<A>(_:_:)(*(_QWORD *)(v30+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__event), *(unsigned __int8 *)(v30+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__event+ 8), *(_QWORD *)(v31+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__event)))goto LABEL_31;
  if (*(unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__instead) != *(unsigned __int8 *)(v31 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__instead))
    goto LABEL_31;
  v56 = *(_QWORD *)(v30
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__actions);
  v57 = *(_QWORD *)(v31
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__actions);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v58 = specialized static Array<A>.== infix(_:_:)(v56, v57);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v58 & 1) == 0)
    goto LABEL_31;
  v59 = *(unsigned __int8 *)(v30
                           + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__replace);
  v60 = *(unsigned __int8 *)(v31
                           + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__replace);
  swift_release();
  swift_release();
  v61 = v59 == v60;
  v8 = v69;
  v28 = v70;
  a2 = v71;
  if (!v61)
    goto LABEL_32;
LABEL_26:
  v62 = v83;
  v63 = *(void (**)(char *, uint64_t, uint64_t))(v83 + 16);
  v63(v8, v28, v4);
  v64 = v82;
  v63(v82, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v65 = dispatch thunk of static Equatable.== infix(_:_:)();
  v66 = *(void (**)(char *, uint64_t))(v62 + 8);
  v66(v64, v4);
  v66(v8, v4);
  return v65 & 1;
}

uint64_t specialized static PgQuery_RoleSpec.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  uint64_t RoleSpec;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - v9;
  v11 = *a2;
  if (*((_BYTE *)a2 + 8) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)a1 != v11)
    goto LABEL_11;
  v12 = *(_QWORD *)(a1 + 16) == a2[2] && *(_QWORD *)(a1 + 24) == a2[3];
  if (v12 || (v13 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(_DWORD *)(a1 + 32) == *((_DWORD *)a2 + 8))
    {
      RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
      v15 = a1 + *(int *)(RoleSpec + 28);
      v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v16(v10, v15, v4);
      v16(v8, (uint64_t)a2 + *(int *)(RoleSpec + 28), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v13 = dispatch thunk of static Equatable.== infix(_:_:)();
      v17 = *(void (**)(char *, uint64_t))(v5 + 8);
      v17(v8, v4);
      v17(v10, v4);
      return v13 & 1;
    }
LABEL_11:
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static PgQuery_ParamRef.== infix(_:_:)(_DWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t ParamRef;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v17 - v9;
  if (*a1 == *(_DWORD *)a2 && a1[1] == *((_DWORD *)a2 + 1))
  {
    ParamRef = type metadata accessor for PgQuery_ParamRef(0);
    v12 = (char *)a1 + *(int *)(ParamRef + 24);
    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, &a2[*(int *)(ParamRef + 24)], v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static PgQuery_NullTest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t Node;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t NullTest;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  int v72;
  int v73;
  BOOL v74;
  void (*v75)(char *, uint64_t, uint64_t);
  char *v76;
  void (*v77)(char *, uint64_t);
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v91 = a1;
  v3 = type metadata accessor for UnknownStorage();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v79 - v8;
  Node = type metadata accessor for PgQuery_Node(0);
  v11 = *(_QWORD *)(Node - 8);
  v12 = MEMORY[0x1E0C80A78](Node);
  v85 = (uint64_t)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v86 = (uint64_t)&v79 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v16 = MEMORY[0x1E0C80A78](v15);
  v89 = (uint64_t)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v79 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v87 = (uint64_t)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v88 = (uint64_t)&v79 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v90 = (uint64_t)&v79 - v26;
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v79 - v27;
  NullTest = type metadata accessor for PgQuery_NullTest(0);
  v30 = v91;
  v31 = *(int *)(NullTest + 20);
  v32 = *(_QWORD *)(a2 + v31);
  v92 = *(_QWORD *)(v91 + v31);
  if (v92 == v32)
    goto LABEL_41;
  v80 = v9;
  v81 = a2;
  v82 = v7;
  v83 = v4;
  v84 = v3;
  v33 = v92
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  v34 = v32;
  outlined init with copy of PgQuery_Alias?(v32 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  v35 = (uint64_t)&v19[*(int *)(v15 + 48)];
  outlined init with copy of PgQuery_Alias?(v33, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, v35, &demangling cache variable for type metadata for PgQuery_Node?);
  v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v37 = v36(v19, 1, Node);
  v38 = Node;
  v39 = v15;
  if (v37 == 1)
  {
    v40 = v36((char *)v35, 1, v38);
    swift_retain();
    v41 = v34;
    swift_retain();
    if (v40 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
      v3 = v84;
      goto LABEL_11;
    }
    v43 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_27:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, v43);
    v70 = (uint64_t)v28;
LABEL_33:
    outlined destroy of (key: String, value: StorableValue)(v70, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_34;
  }
  v41 = v34;
  v42 = v90;
  outlined init with copy of PgQuery_Alias?((uint64_t)v19, v90, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v36((char *)v35, 1, v38) == 1)
  {
    swift_retain();
    swift_retain();
    v43 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_26:
    outlined destroy of PgQuery_Alias(v42, type metadata accessor for PgQuery_Node);
    goto LABEL_27;
  }
  v44 = v42;
  v45 = v86;
  outlined init with take of PgQuery_OidList(v35, v86, type metadata accessor for PgQuery_Node);
  v79 = v38;
  v46 = *(int *)(v38 + 20);
  v47 = *(_QWORD *)(v44 + v46);
  v48 = *(_QWORD *)(v45 + v46);
  swift_retain();
  swift_retain();
  if (v47 != v48)
  {
    swift_retain();
    swift_retain();
    v49 = closure #1 in static PgQuery_Node.== infix(_:_:)(v47, v48);
    swift_release();
    swift_release();
    if (!v49)
    {
      outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_Node);
      v43 = &demangling cache variable for type metadata for PgQuery_Node?;
      v42 = v90;
      goto LABEL_26;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v50 = v90;
  v3 = v84;
  v51 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v50, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  v38 = v79;
  if ((v51 & 1) == 0)
    goto LABEL_34;
LABEL_11:
  v52 = v92
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  v53 = v88;
  outlined init with copy of PgQuery_Alias?(v41 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v88, &demangling cache variable for type metadata for PgQuery_Node?);
  v54 = v89;
  v55 = v89 + *(int *)(v39 + 48);
  outlined init with copy of PgQuery_Alias?(v52, v89, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v53, v55, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v36((char *)v54, 1, v38) != 1)
  {
    v57 = v87;
    outlined init with copy of PgQuery_Alias?(v54, v87, &demangling cache variable for type metadata for PgQuery_Node?);
    v58 = v36((char *)v55, 1, v38);
    v59 = v38;
    v4 = v83;
    if (v58 == 1)
    {
      v60 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v61 = v85;
      outlined init with take of PgQuery_OidList(v55, v85, type metadata accessor for PgQuery_Node);
      v62 = *(int *)(v59 + 20);
      v63 = *(_QWORD *)(v57 + v62);
      v64 = *(_QWORD *)(v61 + v62);
      if (v63 == v64
        || (swift_retain(),
            swift_retain(),
            v65 = closure #1 in static PgQuery_Node.== infix(_:_:)(v63, v64),
            swift_release(),
            swift_release(),
            v65))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v66 = v87;
        v67 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v61, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v66, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)(v54, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v53, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v67 & 1) == 0)
          goto LABEL_34;
        goto LABEL_20;
      }
      outlined destroy of PgQuery_Alias(v61, type metadata accessor for PgQuery_Node);
      v60 = &demangling cache variable for type metadata for PgQuery_Node?;
      v57 = v87;
    }
    outlined destroy of PgQuery_Alias(v57, type metadata accessor for PgQuery_Node);
    goto LABEL_32;
  }
  v56 = v36((char *)v55, 1, v38);
  v4 = v83;
  if (v56 != 1)
  {
    v60 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_32:
    outlined destroy of (key: String, value: StorableValue)(v54, v60);
    v70 = v53;
    goto LABEL_33;
  }
  outlined destroy of (key: String, value: StorableValue)(v54, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v53, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_20:
  v68 = *(_QWORD *)(v92
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nulltesttype);
  v69 = *(_QWORD *)(v41
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nulltesttype);
  if (*(_BYTE *)(v41
                + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nulltesttype
                + 8) == 1)
  {
    if (v69)
    {
      if (v69 == 1)
      {
        if (v68 != 1)
          goto LABEL_34;
      }
      else if (v68 != 2)
      {
        goto LABEL_34;
      }
    }
    else if (v68)
    {
      goto LABEL_34;
    }
  }
  else if (v68 != v69)
  {
    goto LABEL_34;
  }
  if (*(unsigned __int8 *)(v92
                          + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argisrow) == *(unsigned __int8 *)(v41 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argisrow))
  {
    v72 = *(_DWORD *)(v92
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    v73 = *(_DWORD *)(v41
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    swift_release();
    v74 = v72 == v73;
    a2 = v81;
    v7 = v82;
    v9 = v80;
    v30 = v91;
    if (!v74)
    {
      v71 = 0;
      return v71 & 1;
    }
LABEL_41:
    v75 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v75(v9, v30, v3);
    v75(v7, a2, v3);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v76 = v7;
    v71 = dispatch thunk of static Equatable.== infix(_:_:)();
    v77 = *(void (**)(char *, uint64_t))(v4 + 8);
    v77(v76, v3);
    v77(v9, v3);
    return v71 & 1;
  }
LABEL_34:
  swift_release();
  swift_release();
  v71 = 0;
  return v71 & 1;
}

uint64_t specialized static PgQuery_AlterStatsStmt.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  void (*v18)(char *, uint64_t);
  uint64_t v19;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v19 - v11;
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & 1) != 0
    && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int8 *)(a1 + 12) == *(unsigned __int8 *)(a2 + 12))
  {
    v15 = a3(0);
    v16 = a1 + *(int *)(v15 + 28);
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v17(v12, v16, v6);
    v17(v10, a2 + *(int *)(v15 + 28), v6);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18 = *(void (**)(char *, uint64_t))(v7 + 8);
    v18(v10, v6);
    v18(v12, v6);
  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static PgQuery_JoinExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t JoinExpr;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  int v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t (*v102)(uint64_t, uint64_t, uint64_t);
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  int v107;
  BOOL v108;
  void (*v109)(char *, uint64_t, uint64_t);
  uint64_t v110;
  char *v111;
  void (*v112)(char *, uint64_t);
  _QWORD *v114;
  int v115;
  uint64_t *v116;
  _QWORD *v117;
  char v118;
  uint64_t (*v119)(uint64_t, uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t Alias;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t Node;
  uint64_t v143;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v119 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v119 - v9;
  Alias = type metadata accessor for PgQuery_Alias(0);
  v130 = *(_QWORD *)(Alias - 8);
  MEMORY[0x1E0C80A78](Alias);
  v126 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))((char *)&v119 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?));
  MEMORY[0x1E0C80A78](v129);
  v132 = (uint64_t)&v119 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v128 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))((char *)&v119 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v14);
  v131 = (uint64_t)&v119 - v16;
  Node = type metadata accessor for PgQuery_Node(0);
  v17 = *(_QWORD *)(Node - 8);
  v18 = MEMORY[0x1E0C80A78](Node);
  v127 = (uint64_t)&v119 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v136 = (uint64_t)&v119 - v21;
  MEMORY[0x1E0C80A78](v20);
  v138 = (uint64_t)&v119 - v22;
  v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v23 = MEMORY[0x1E0C80A78](v143);
  v135 = (uint64_t)&v119 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v141 = (uint64_t)&v119 - v26;
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v119 - v27;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v30 = MEMORY[0x1E0C80A78](v29);
  v134 = (uint64_t)&v119 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = MEMORY[0x1E0C80A78](v30);
  v137 = (uint64_t)&v119 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v139 = (uint64_t)&v119 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v140 = (uint64_t)&v119 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v40 = (char *)&v119 - v39;
  MEMORY[0x1E0C80A78](v38);
  v42 = (char *)&v119 - v41;
  JoinExpr = type metadata accessor for PgQuery_JoinExpr(0);
  v44 = a1;
  v45 = a2;
  v46 = *(int *)(JoinExpr + 20);
  v47 = *(_QWORD *)(a1 + v46);
  v48 = *(_QWORD *)(a2 + v46);
  if (v47 == v48)
    goto LABEL_48;
  v125 = v10;
  v49 = *(_QWORD *)(v48 + 16);
  if (*(_BYTE *)(v48 + 24) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)(v47 + 16) != v49 || *(unsigned __int8 *)(v47 + 25) != *(unsigned __int8 *)(v48 + 25))
    goto LABEL_6;
  v120 = v44;
  v121 = v45;
  v122 = v8;
  v123 = v5;
  v124 = v4;
  v51 = v47
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg;
  outlined init with copy of PgQuery_Alias?(v48 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg, (uint64_t)v42, &demangling cache variable for type metadata for PgQuery_Node?);
  v52 = (uint64_t)&v28[*(int *)(v143 + 48)];
  outlined init with copy of PgQuery_Alias?(v51, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v42, v52, &demangling cache variable for type metadata for PgQuery_Node?);
  v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  v54 = Node;
  if (v53((uint64_t)v28, 1, Node) == 1)
  {
    v55 = v53(v52, 1, v54);
    swift_retain();
    swift_retain();
    if (v55 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v42, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_16;
    }
    v56 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_31:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, v56);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v42, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_38;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, (uint64_t)v40, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v53(v52, 1, v54) == 1)
  {
    swift_retain();
    swift_retain();
    v56 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_30:
    outlined destroy of PgQuery_Alias((uint64_t)v40, type metadata accessor for PgQuery_Node);
    goto LABEL_31;
  }
  v119 = v53;
  v57 = v138;
  outlined init with take of PgQuery_OidList(v52, v138, type metadata accessor for PgQuery_Node);
  v58 = *(int *)(v54 + 20);
  v59 = *(_QWORD *)&v40[v58];
  v60 = *(_QWORD *)(v57 + v58);
  swift_retain();
  swift_retain();
  if (v59 != v60)
  {
    swift_retain();
    swift_retain();
    v61 = closure #1 in static PgQuery_Node.== infix(_:_:)(v59, v60);
    swift_release();
    swift_release();
    if (!v61)
    {
      outlined destroy of PgQuery_Alias(v57, type metadata accessor for PgQuery_Node);
      v56 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_30;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v62 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v57, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v40, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v42, &demangling cache variable for type metadata for PgQuery_Node?);
  v53 = v119;
  if ((v62 & 1) == 0)
    goto LABEL_38;
LABEL_16:
  v63 = v47
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg;
  v64 = v140;
  outlined init with copy of PgQuery_Alias?(v48 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, v140, &demangling cache variable for type metadata for PgQuery_Node?);
  v65 = v141;
  v66 = v141 + *(int *)(v143 + 48);
  outlined init with copy of PgQuery_Alias?(v63, v141, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v64, v66, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v53(v65, 1, v54) == 1)
  {
    if (v53(v66, 1, v54) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v65, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)(v64, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_25;
    }
    v68 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_37;
  }
  v67 = v139;
  outlined init with copy of PgQuery_Alias?(v65, v139, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v53(v66, 1, v54) == 1)
  {
    v68 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_36:
    outlined destroy of PgQuery_Alias(v67, type metadata accessor for PgQuery_Node);
LABEL_37:
    outlined destroy of (key: String, value: StorableValue)(v65, v68);
    outlined destroy of (key: String, value: StorableValue)(v64, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_38;
  }
  v69 = v136;
  outlined init with take of PgQuery_OidList(v66, v136, type metadata accessor for PgQuery_Node);
  v70 = *(int *)(v54 + 20);
  v71 = *(_QWORD *)(v67 + v70);
  v72 = *(_QWORD *)(v69 + v70);
  if (v71 != v72)
  {
    swift_retain();
    swift_retain();
    v73 = closure #1 in static PgQuery_Node.== infix(_:_:)(v71, v72);
    swift_release();
    swift_release();
    if (!v73)
    {
      outlined destroy of PgQuery_Alias(v69, type metadata accessor for PgQuery_Node);
      v68 = &demangling cache variable for type metadata for PgQuery_Node?;
      v67 = v139;
      goto LABEL_36;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v74 = v139;
  v75 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v69, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v74, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v65, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v64, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v75 & 1) == 0)
  {
LABEL_38:
    swift_release();
    swift_release();
    v50 = 0;
    return v50 & 1;
  }
LABEL_25:
  v76 = v48;
  v77 = *(_QWORD *)(v47
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__usingClause);
  v78 = *(_QWORD *)(v76
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__usingClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v79 = v47;
  v80 = specialized static Array<A>.== infix(_:_:)(v77, v78);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v80 & 1) == 0)
    goto LABEL_38;
  v81 = v79;
  v82 = v79
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__quals;
  v83 = v76;
  v84 = v137;
  outlined init with copy of PgQuery_Alias?(v76 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__quals, v137, &demangling cache variable for type metadata for PgQuery_Node?);
  v85 = v135;
  v86 = v135 + *(int *)(v143 + 48);
  outlined init with copy of PgQuery_Alias?(v82, v135, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v84, v86, &demangling cache variable for type metadata for PgQuery_Node?);
  v87 = Node;
  if (v53(v85, 1, Node) == 1)
  {
    if (v53(v86, 1, v87) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v85, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)(v137, &demangling cache variable for type metadata for PgQuery_Node?);
      v4 = v124;
      v88 = v81;
      goto LABEL_43;
    }
    v90 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_61:
    outlined destroy of (key: String, value: StorableValue)(v85, v90);
    outlined destroy of (key: String, value: StorableValue)(v137, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_38;
  }
  v89 = v134;
  outlined init with copy of PgQuery_Alias?(v85, v134, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v53(v86, 1, v87) == 1)
  {
    v90 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_60:
    outlined destroy of PgQuery_Alias(v89, type metadata accessor for PgQuery_Node);
    goto LABEL_61;
  }
  v91 = v127;
  outlined init with take of PgQuery_OidList(v86, v127, type metadata accessor for PgQuery_Node);
  v92 = *(int *)(v87 + 20);
  v93 = *(_QWORD *)(v89 + v92);
  v94 = *(_QWORD *)(v91 + v92);
  if (v93 != v94)
  {
    swift_retain();
    swift_retain();
    v95 = closure #1 in static PgQuery_Node.== infix(_:_:)(v93, v94);
    swift_release();
    swift_release();
    if (!v95)
    {
      outlined destroy of PgQuery_Alias(v91, type metadata accessor for PgQuery_Node);
      v90 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_60;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v96 = v89;
  v4 = v124;
  v97 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v91, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v96, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v85, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v137, &demangling cache variable for type metadata for PgQuery_Node?);
  v88 = v81;
  if ((v97 & 1) == 0)
    goto LABEL_38;
LABEL_43:
  v98 = v88
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias;
  v99 = v131;
  outlined init with copy of PgQuery_Alias?(v83 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias, v131, &demangling cache variable for type metadata for PgQuery_Alias?);
  v100 = v132;
  v101 = v132 + *(int *)(v129 + 48);
  outlined init with copy of PgQuery_Alias?(v98, v132, &demangling cache variable for type metadata for PgQuery_Alias?);
  outlined init with copy of PgQuery_Alias?(v99, v101, &demangling cache variable for type metadata for PgQuery_Alias?);
  v102 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v130 + 48);
  v103 = Alias;
  if (v102(v100, 1, Alias) == 1)
  {
    v104 = v102(v101, 1, v103);
    v5 = v123;
    if (v104 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v100, &demangling cache variable for type metadata for PgQuery_Alias?);
      outlined destroy of (key: String, value: StorableValue)(v99, &demangling cache variable for type metadata for PgQuery_Alias?);
      v105 = v81;
      goto LABEL_46;
    }
    v116 = &demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?);
    goto LABEL_65;
  }
  v114 = v128;
  outlined init with copy of PgQuery_Alias?(v100, (uint64_t)v128, &demangling cache variable for type metadata for PgQuery_Alias?);
  v115 = v102(v101, 1, v103);
  v5 = v123;
  if (v115 == 1)
  {
    v116 = &demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?);
LABEL_64:
    outlined destroy of PgQuery_Alias((uint64_t)v128, type metadata accessor for PgQuery_Alias);
LABEL_65:
    outlined destroy of (key: String, value: StorableValue)(v100, v116);
    outlined destroy of (key: String, value: StorableValue)(v99, &demangling cache variable for type metadata for PgQuery_Alias?);
    goto LABEL_38;
  }
  v117 = v126;
  outlined init with take of PgQuery_OidList(v101, (uint64_t)v126, type metadata accessor for PgQuery_Alias);
  v105 = v81;
  if ((*v114 != *v117 || v114[1] != v117[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(v114[2], v117[2]) & 1) == 0)
  {
    outlined destroy of PgQuery_Alias((uint64_t)v117, type metadata accessor for PgQuery_Alias);
    v116 = &demangling cache variable for type metadata for PgQuery_Alias?;
    goto LABEL_64;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v118 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias((uint64_t)v117, type metadata accessor for PgQuery_Alias);
  outlined destroy of PgQuery_Alias((uint64_t)v114, type metadata accessor for PgQuery_Alias);
  outlined destroy of (key: String, value: StorableValue)(v100, &demangling cache variable for type metadata for PgQuery_Alias?);
  outlined destroy of (key: String, value: StorableValue)(v99, &demangling cache variable for type metadata for PgQuery_Alias?);
  if ((v118 & 1) == 0)
    goto LABEL_38;
LABEL_46:
  v106 = *(_DWORD *)(v105
                   + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rtindex);
  v107 = *(_DWORD *)(v83
                   + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rtindex);
  swift_release();
  swift_release();
  v108 = v106 == v107;
  v8 = v122;
  v10 = v125;
  v45 = v121;
  v44 = v120;
  if (v108)
  {
LABEL_48:
    v109 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v110 = v45;
    v109(v10, v44, v4);
    v109(v8, v110, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v111 = v8;
    v50 = dispatch thunk of static Equatable.== infix(_:_:)();
    v112 = *(void (**)(char *, uint64_t))(v5 + 8);
    v112(v111, v4);
    v112(v10, v4);
    return v50 & 1;
  }
LABEL_6:
  v50 = 0;
  return v50 & 1;
}

uint64_t specialized static PgQuery_FuncExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t FuncExpr;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  int v47;
  int v48;
  BOOL v49;
  void (*v50)(char *, uint64_t, uint64_t);
  void (*v51)(char *, uint64_t);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v53 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v61 = *(_QWORD *)(Node - 8);
  v62 = Node;
  MEMORY[0x1E0C80A78](Node);
  v59 = (uint64_t)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v60 = (uint64_t)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v53 - v19;
  FuncExpr = type metadata accessor for PgQuery_FuncExpr(0);
  v22 = a1;
  v23 = *(int *)(FuncExpr + 20);
  v24 = *(_QWORD *)(a1 + v23);
  v25 = *(_QWORD *)(a2 + v23);
  if (v24 == v25)
    goto LABEL_27;
  v55 = a2;
  v56 = v22;
  v54 = v10;
  v57 = v5;
  v58 = v4;
  v26 = v24
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v25 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  v28 = (uint64_t)v20;
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v27, &demangling cache variable for type metadata for PgQuery_Node?);
  v29 = v62;
  v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48);
  if (v30((uint64_t)v15, 1, v62) != 1)
  {
    v32 = v25;
    v33 = v60;
    outlined init with copy of PgQuery_Alias?((uint64_t)v15, v60, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v30(v27, 1, v29) == 1)
    {
      swift_retain();
      swift_retain();
      v34 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v35 = v59;
      outlined init with take of PgQuery_OidList(v27, v59, type metadata accessor for PgQuery_Node);
      v36 = *(int *)(v29 + 20);
      v37 = *(_QWORD *)(v33 + v36);
      v38 = *(_QWORD *)(v35 + v36);
      swift_retain();
      swift_retain();
      if (v37 == v38
        || (swift_retain(),
            swift_retain(),
            v39 = closure #1 in static PgQuery_Node.== infix(_:_:)(v37, v38),
            swift_release(),
            swift_release(),
            v39))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v40 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v28, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v40 & 1) == 0)
          goto LABEL_20;
        goto LABEL_11;
      }
      outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
      v34 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
LABEL_19:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, v34);
    outlined destroy of (key: String, value: StorableValue)(v28, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_20;
  }
  v31 = v30(v27, 1, v29);
  swift_retain();
  v32 = v25;
  swift_retain();
  if (v31 != 1)
  {
    v34 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_19;
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  if (*(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcid) == *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcid)
    && *(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcresulttype) == *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcresulttype)
    && *(unsigned __int8 *)(v24
                          + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcretset) == *(unsigned __int8 *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcretset)
    && *(unsigned __int8 *)(v24
                          + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcvariadic) == *(unsigned __int8 *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcvariadic))
  {
    v41 = *(_QWORD *)(v32
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcformat);
    if (*(_BYTE *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcformat
                  + 8) == 1)
      __asm { BR              X11 }
    if (*(_QWORD *)(v24
                   + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcformat) == v41
      && *(_DWORD *)(v24
                   + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccollid) == *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccollid)
      && *(_DWORD *)(v24
                   + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) == *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
    {
      v43 = *(_QWORD *)(v24
                      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
      v44 = *(_QWORD *)(v32
                      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
      v45 = v32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v46 = specialized static Array<A>.== infix(_:_:)(v43, v44);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v46 & 1) != 0)
      {
        v47 = *(_DWORD *)(v24
                        + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
        v48 = *(_DWORD *)(v45
                        + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
        swift_release();
        swift_release();
        v49 = v47 == v48;
        v5 = v57;
        v4 = v58;
        v10 = v54;
        a2 = v55;
        v22 = v56;
        if (!v49)
        {
          v42 = 0;
          return v42 & 1;
        }
LABEL_27:
        v50 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v50(v10, v22, v4);
        v50(v8, a2, v4);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v42 = dispatch thunk of static Equatable.== infix(_:_:)();
        v51 = *(void (**)(char *, uint64_t))(v5 + 8);
        v51(v8, v4);
        v51(v10, v4);
        return v42 & 1;
      }
    }
  }
LABEL_20:
  swift_release();
  swift_release();
  v42 = 0;
  return v42 & 1;
}

uint64_t specialized static PgQuery_FromExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  char v43;
  void (*v44)(char *, uint64_t, uint64_t);
  char v45;
  char *v46;
  char v47;
  void (*v48)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t Node;
  uint64_t v58;
  uint64_t v59;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v50 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v11 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v55 = (uint64_t)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v13);
  v58 = (uint64_t)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v16 = MEMORY[0x1E0C80A78](v15);
  v56 = (uint64_t)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v59 = (uint64_t)&v50 - v18;
  v19 = type metadata accessor for PgQuery_FromExpr(0);
  v20 = a1;
  v21 = *(int *)(v19 + 20);
  v22 = *(_QWORD *)(a1 + v21);
  v23 = *(_QWORD *)(a2 + v21);
  if (v22 == v23)
    goto LABEL_13;
  v50 = a1;
  v51 = a2;
  v53 = v4;
  v54 = v8;
  v52 = v5;
  v24 = *(_QWORD *)(v22 + 16);
  v25 = *(_QWORD *)(v23 + 16);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v26 = specialized static Array<A>.== infix(_:_:)(v24, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v26 & 1) == 0)
    goto LABEL_17;
  v27 = v22
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FromExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__quals;
  v28 = v59;
  outlined init with copy of PgQuery_Alias?(v23 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FromExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__quals, v59, &demangling cache variable for type metadata for PgQuery_Node?);
  v29 = v58;
  v30 = v58 + *(int *)(v13 + 48);
  outlined init with copy of PgQuery_Alias?(v27, v58, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v28, v30, &demangling cache variable for type metadata for PgQuery_Node?);
  v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  v32 = Node;
  if (v31(v29, 1, Node) != 1)
  {
    v34 = v56;
    outlined init with copy of PgQuery_Alias?(v29, v56, &demangling cache variable for type metadata for PgQuery_Node?);
    v35 = v31(v30, 1, v32);
    v8 = v54;
    if (v35 == 1)
    {
      v36 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_15:
      outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
      goto LABEL_16;
    }
    v37 = v32;
    v38 = v55;
    outlined init with take of PgQuery_OidList(v30, v55, type metadata accessor for PgQuery_Node);
    v39 = *(int *)(v37 + 20);
    v40 = *(_QWORD *)(v34 + v39);
    v41 = *(_QWORD *)(v38 + v39);
    if (v40 != v41)
    {
      swift_retain();
      swift_retain();
      v42 = closure #1 in static PgQuery_Node.== infix(_:_:)(v40, v41);
      swift_release();
      swift_release();
      if (!v42)
      {
        outlined destroy of PgQuery_Alias(v38, type metadata accessor for PgQuery_Node);
        v36 = &demangling cache variable for type metadata for PgQuery_Node?;
        v29 = v58;
        goto LABEL_15;
      }
    }
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v43 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of PgQuery_Alias(v38, type metadata accessor for PgQuery_Node);
    outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
    outlined destroy of (key: String, value: StorableValue)(v58, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined destroy of (key: String, value: StorableValue)(v59, &demangling cache variable for type metadata for PgQuery_Node?);
    v5 = v52;
    if ((v43 & 1) != 0)
      goto LABEL_12;
LABEL_17:
    swift_release();
    swift_release();
    v47 = 0;
    return v47 & 1;
  }
  v33 = v31(v30, 1, v32);
  v5 = v52;
  v8 = v54;
  if (v33 != 1)
  {
    v36 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_16:
    outlined destroy of (key: String, value: StorableValue)(v29, v36);
    outlined destroy of (key: String, value: StorableValue)(v59, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_17;
  }
  outlined destroy of (key: String, value: StorableValue)(v29, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v59, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_12:
  swift_release();
  swift_release();
  v20 = v50;
  a2 = v51;
  v4 = v53;
LABEL_13:
  v44 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v44(v10, v20, v4);
  v44(v8, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v45 = dispatch thunk of static Equatable.== infix(_:_:)();
  v46 = v8;
  v47 = v45;
  v48 = *(void (**)(char *, uint64_t))(v5 + 8);
  v48(v46, v4);
  v48(v10, v4);
  return v47 & 1;
}

uint64_t specialized static PgQuery_DropStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t DropStmt;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  void (*v21)(char *, uint64_t);
  uint64_t v22;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v22 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & 1) == 0)
    goto LABEL_15;
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(unsigned __int8 *)(a2 + 16);
  v13 = destructiveProjectEnumData for StorableValue(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
  if (v13 != destructiveProjectEnumData for StorableValue(v11, v12))
    goto LABEL_15;
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(a2 + 32) == 1)
  {
    if (v15)
    {
      if (v15 == 1)
      {
        if (v14 != 1)
          goto LABEL_15;
      }
      else if (v14 != 2)
      {
        goto LABEL_15;
      }
    }
    else if (v14)
    {
      goto LABEL_15;
    }
  }
  else if (v14 != v15)
  {
    goto LABEL_15;
  }
  if (*(unsigned __int8 *)(a1 + 33) == *(unsigned __int8 *)(a2 + 33)
    && *(unsigned __int8 *)(a1 + 34) == *(unsigned __int8 *)(a2 + 34))
  {
    DropStmt = type metadata accessor for PgQuery_DropStmt(0);
    v19 = a1 + *(int *)(DropStmt + 36);
    v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v20(v10, v19, v4);
    v20(v8, a2 + *(int *)(DropStmt + 36), v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v21 = *(void (**)(char *, uint64_t))(v5 + 8);
    v21(v8, v4);
    v21(v10, v4);
    return v16 & 1;
  }
LABEL_15:
  v16 = 0;
  return v16 & 1;
}

uint64_t specialized static PgQuery_RangeVar.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Alias;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char v23;
  uint64_t RangeVar;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  char *v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  _QWORD *v39;
  char v40;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;

  v4 = type metadata accessor for UnknownStorage();
  v47 = *(_QWORD *)(v4 - 8);
  v48 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v46 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v45 = (char *)&v42 - v7;
  Alias = type metadata accessor for PgQuery_Alias(0);
  v9 = *(_QWORD *)(Alias - 8);
  MEMORY[0x1E0C80A78](Alias);
  v49 = (uint64_t *)((char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v42 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v42 - v21;
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    || (v23 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)
      || (v23 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32) && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40)
        || (v23 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if (*(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48))
          goto LABEL_30;
        if (*(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56) && *(_QWORD *)(a1 + 64) == *(_QWORD *)(a2 + 64)
          || (v23 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          v44 = v17;
          RangeVar = type metadata accessor for PgQuery_RangeVar(0);
          outlined init with copy of PgQuery_Alias?(a1 + *(int *)(RangeVar + 44), (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_Alias?);
          v43 = RangeVar;
          outlined init with copy of PgQuery_Alias?(a2 + *(int *)(RangeVar + 44), (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Alias?);
          v25 = (uint64_t)&v13[*(int *)(v11 + 48)];
          outlined init with copy of PgQuery_Alias?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_Alias?);
          outlined init with copy of PgQuery_Alias?((uint64_t)v20, v25, &demangling cache variable for type metadata for PgQuery_Alias?);
          v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
          if (v26((uint64_t)v13, 1, Alias) == 1)
          {
            outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Alias?);
            outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_Alias?);
            if (v26(v25, 1, Alias) == 1)
            {
              outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_Alias?);
LABEL_17:
              if (*(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72))
              {
                v27 = v43;
                v28 = a1 + *(int *)(v43 + 40);
                v30 = v47;
                v29 = v48;
                v31 = *(void (**)(char *, uint64_t, uint64_t))(v47 + 16);
                v32 = v45;
                v31(v45, v28, v48);
                v33 = a2 + *(int *)(v27 + 40);
                v34 = v46;
                v31(v46, v33, v29);
                lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
                v23 = dispatch thunk of static Equatable.== infix(_:_:)();
                v35 = *(void (**)(char *, uint64_t))(v30 + 8);
                v35(v34, v29);
                v35(v32, v29);
                return v23 & 1;
              }
LABEL_30:
              v23 = 0;
              return v23 & 1;
            }
          }
          else
          {
            v36 = v44;
            outlined init with copy of PgQuery_Alias?((uint64_t)v13, (uint64_t)v44, &demangling cache variable for type metadata for PgQuery_Alias?);
            if (v26(v25, 1, Alias) != 1)
            {
              v39 = v49;
              outlined init with take of PgQuery_OidList(v25, (uint64_t)v49, type metadata accessor for PgQuery_Alias);
              if ((*v36 == *v39 && v36[1] == v39[1] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                && (specialized static Array<A>.== infix(_:_:)(v36[2], v39[2]) & 1) != 0)
              {
                lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
                v40 = dispatch thunk of static Equatable.== infix(_:_:)();
                outlined destroy of PgQuery_Alias((uint64_t)v39, type metadata accessor for PgQuery_Alias);
                outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Alias?);
                outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_Alias?);
                outlined destroy of PgQuery_Alias((uint64_t)v36, type metadata accessor for PgQuery_Alias);
                outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_Alias?);
                if ((v40 & 1) == 0)
                  goto LABEL_30;
                goto LABEL_17;
              }
              outlined destroy of PgQuery_Alias((uint64_t)v39, type metadata accessor for PgQuery_Alias);
              outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Alias?);
              outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_Alias?);
              outlined destroy of PgQuery_Alias((uint64_t)v36, type metadata accessor for PgQuery_Alias);
              v38 = (uint64_t)v13;
              v37 = &demangling cache variable for type metadata for PgQuery_Alias?;
LABEL_29:
              outlined destroy of (key: String, value: StorableValue)(v38, v37);
              goto LABEL_30;
            }
            outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Alias?);
            outlined destroy of (key: String, value: StorableValue)((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_Alias?);
            outlined destroy of PgQuery_Alias((uint64_t)v36, type metadata accessor for PgQuery_Alias);
          }
          v37 = &demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?);
          v38 = (uint64_t)v13;
          goto LABEL_29;
        }
      }
    }
  }
  return v23 & 1;
}

uint64_t specialized static PgQuery_CopyStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t RangeVar;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t CopyStmt;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t, uint64_t);
  char *v92;
  uint64_t v93;
  char *v94;
  void (*v95)(char *, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t Node;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v112 = (char *)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v113 = (char *)&v97 - v8;
  Node = type metadata accessor for PgQuery_Node(0);
  v108 = *(_QWORD *)(Node - 8);
  v9 = MEMORY[0x1E0C80A78](Node);
  v101 = (uint64_t)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v105 = (uint64_t)&v97 - v11;
  v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v12 = MEMORY[0x1E0C80A78](v109);
  v103 = (uint64_t)&v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v111 = (uint64_t)&v97 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v16 = MEMORY[0x1E0C80A78](v15);
  v102 = (uint64_t)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v104 = (uint64_t)&v97 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v107 = (uint64_t)&v97 - v21;
  MEMORY[0x1E0C80A78](v20);
  v114 = (uint64_t)&v97 - v22;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  v24 = *(_QWORD *)(RangeVar - 8);
  MEMORY[0x1E0C80A78](RangeVar);
  v106 = (uint64_t)&v97 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v97 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  v30 = MEMORY[0x1E0C80A78](v29);
  v32 = (char *)&v97 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30);
  v34 = (char *)&v97 - v33;
  CopyStmt = type metadata accessor for PgQuery_CopyStmt(0);
  v36 = a1;
  v37 = *(int *)(CopyStmt + 20);
  v38 = *(_QWORD *)(a1 + v37);
  v39 = a2;
  v40 = *(_QWORD *)(a2 + v37);
  v41 = v39;
  if (v38 == v40)
    goto LABEL_40;
  v97 = v36;
  v98 = v39;
  v99 = v5;
  v100 = v4;
  v42 = v38
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v34, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v43 = (uint64_t)&v28[*(int *)(v26 + 48)];
  outlined init with copy of PgQuery_Alias?(v42, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v34, v43, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  if (v44((uint64_t)v28, 1, RangeVar) == 1)
  {
    v45 = v44(v43, 1, RangeVar);
    swift_retain();
    swift_retain();
    if (v45 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v34, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_9;
    }
LABEL_7:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    v46 = &demangling cache variable for type metadata for PgQuery_RangeVar?;
    v47 = (uint64_t)v34;
LABEL_31:
    outlined destroy of (key: String, value: StorableValue)(v47, v46);
    goto LABEL_32;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, (uint64_t)v32, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v44(v43, 1, RangeVar) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v32, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_7;
  }
  v48 = v106;
  outlined init with take of PgQuery_OidList(v43, v106, type metadata accessor for PgQuery_RangeVar);
  swift_retain();
  swift_retain();
  v49 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v32, v48);
  outlined destroy of PgQuery_Alias(v48, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias((uint64_t)v32, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v34, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v49 & 1) == 0)
    goto LABEL_32;
LABEL_9:
  v50 = v38
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query;
  v51 = v114;
  outlined init with copy of PgQuery_Alias?(v40 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, v114, &demangling cache variable for type metadata for PgQuery_Node?);
  v52 = v109;
  v53 = v111;
  v54 = v111 + *(int *)(v109 + 48);
  outlined init with copy of PgQuery_Alias?(v50, v111, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v51, v54, &demangling cache variable for type metadata for PgQuery_Node?);
  v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v108 + 48);
  v56 = Node;
  if (v55(v53, 1, Node) != 1)
  {
    v59 = v107;
    outlined init with copy of PgQuery_Alias?(v53, v107, &demangling cache variable for type metadata for PgQuery_Node?);
    v60 = v55(v54, 1, v56);
    v58 = v100;
    if (v60 == 1)
    {
      v61 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v62 = v105;
      outlined init with take of PgQuery_OidList(v54, v105, type metadata accessor for PgQuery_Node);
      v63 = *(int *)(v56 + 20);
      v64 = *(_QWORD *)(v59 + v63);
      v65 = *(_QWORD *)(v62 + v63);
      if (v64 == v65
        || (swift_retain(),
            swift_retain(),
            v66 = closure #1 in static PgQuery_Node.== infix(_:_:)(v64, v65),
            swift_release(),
            swift_release(),
            v66))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v67 = v107;
        v68 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v67, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)(v111, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v114, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v68 & 1) == 0)
          goto LABEL_32;
        goto LABEL_18;
      }
      outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_Node);
      v61 = &demangling cache variable for type metadata for PgQuery_Node?;
      v53 = v111;
      v59 = v107;
    }
    outlined destroy of PgQuery_Alias(v59, type metadata accessor for PgQuery_Node);
    goto LABEL_30;
  }
  v57 = v55(v54, 1, v56);
  v58 = v100;
  if (v57 != 1)
  {
    v61 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_30:
    outlined destroy of (key: String, value: StorableValue)(v53, v61);
    v46 = &demangling cache variable for type metadata for PgQuery_Node?;
    v47 = v114;
    goto LABEL_31;
  }
  outlined destroy of (key: String, value: StorableValue)(v53, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v114, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_18:
  v69 = *(_QWORD *)(v38
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__attlist);
  v70 = *(_QWORD *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__attlist);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v71 = specialized static Array<A>.== infix(_:_:)(v69, v70);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v71 & 1) == 0
    || *(unsigned __int8 *)(v38
                          + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isFrom) != *(unsigned __int8 *)(v40 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isFrom)
    || *(unsigned __int8 *)(v38
                          + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isProgram) != *(unsigned __int8 *)(v40 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isProgram)
    || (*(_QWORD *)(v38
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__filename) != *(_QWORD *)(v40 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__filename)
     || *(_QWORD *)(v38
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__filename
                  + 8) != *(_QWORD *)(v40
                                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__filename
                                    + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_32;
  }
  v72 = *(_QWORD *)(v38
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
  v73 = *(_QWORD *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v74 = specialized static Array<A>.== infix(_:_:)(v72, v73);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v74 & 1) == 0)
    goto LABEL_32;
  v75 = v38
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  v76 = v104;
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v104, &demangling cache variable for type metadata for PgQuery_Node?);
  v77 = v103 + *(int *)(v52 + 48);
  v78 = v75;
  v79 = v103;
  outlined init with copy of PgQuery_Alias?(v78, v103, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v76, v77, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v55(v79, 1, v56) == 1)
  {
    if (v55(v77, 1, v56) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v79, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)(v104, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_39:
      swift_release();
      swift_release();
      v41 = v98;
      v5 = v99;
      v36 = v97;
      v4 = v58;
LABEL_40:
      v90 = v5;
      v91 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v92 = v113;
      v93 = v41;
      v91(v113, v36, v4);
      v94 = v112;
      v91(v112, v93, v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v80 = dispatch thunk of static Equatable.== infix(_:_:)();
      v95 = *(void (**)(char *, uint64_t))(v90 + 8);
      v95(v94, v4);
      v95(v92, v4);
      return v80 & 1;
    }
    v82 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_44;
  }
  v81 = v102;
  outlined init with copy of PgQuery_Alias?(v79, v102, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v55(v77, 1, v56) == 1)
  {
    v82 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_43:
    outlined destroy of PgQuery_Alias(v81, type metadata accessor for PgQuery_Node);
LABEL_44:
    outlined destroy of (key: String, value: StorableValue)(v79, v82);
    v46 = &demangling cache variable for type metadata for PgQuery_Node?;
    v47 = v104;
    goto LABEL_31;
  }
  v83 = v101;
  outlined init with take of PgQuery_OidList(v77, v101, type metadata accessor for PgQuery_Node);
  v84 = *(int *)(v56 + 20);
  v85 = *(_QWORD *)(v81 + v84);
  v86 = *(_QWORD *)(v83 + v84);
  if (v85 != v86)
  {
    swift_retain();
    swift_retain();
    v87 = closure #1 in static PgQuery_Node.== infix(_:_:)(v85, v86);
    swift_release();
    swift_release();
    if (!v87)
    {
      outlined destroy of PgQuery_Alias(v83, type metadata accessor for PgQuery_Node);
      v82 = &demangling cache variable for type metadata for PgQuery_Node?;
      v81 = v102;
      v79 = v103;
      goto LABEL_43;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v88 = v102;
  v89 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v83, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v88, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v103, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v104, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v89 & 1) != 0)
    goto LABEL_39;
LABEL_32:
  swift_release();
  swift_release();
  v80 = 0;
  return v80 & 1;
}

uint64_t specialized static PgQuery_CaseExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t CaseExpr;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  unsigned int (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  char v95;
  int v96;
  int v97;
  void (*v98)(char *, uint64_t, uint64_t);
  void (*v99)(char *, uint64_t);
  unsigned int (*v101)(uint64_t, uint64_t, uint64_t);
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t Node;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v101 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v11 = *(_QWORD *)(Node - 8);
  v12 = MEMORY[0x1E0C80A78](Node);
  v109 = (uint64_t)&v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v113 = (uint64_t)&v101 - v15;
  MEMORY[0x1E0C80A78](v14);
  v117 = (uint64_t)&v101 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v18 = MEMORY[0x1E0C80A78](v17);
  v112 = (uint64_t)&v101 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v115 = (uint64_t)&v101 - v21;
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v101 - v22;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v25 = MEMORY[0x1E0C80A78](v24);
  v110 = (uint64_t)&v101 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v111 = (uint64_t)&v101 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v114 = (uint64_t)&v101 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v116 = (uint64_t)&v101 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v118 = (uint64_t)&v101 - v34;
  MEMORY[0x1E0C80A78](v33);
  v36 = (char *)&v101 - v35;
  CaseExpr = type metadata accessor for PgQuery_CaseExpr(0);
  v38 = a1;
  v39 = *(int *)(CaseExpr + 20);
  v40 = *(_QWORD *)(a1 + v39);
  v41 = *(_QWORD *)(a2 + v39);
  if (v40 == v41)
  {
LABEL_43:
    v98 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v98(v10, v38, v4);
    v98(v8, a2, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v66 = dispatch thunk of static Equatable.== infix(_:_:)();
    v99 = *(void (**)(char *, uint64_t))(v5 + 8);
    v99(v8, v4);
    v99(v10, v4);
    return v66 & 1;
  }
  v104 = v38;
  v105 = a2;
  v102 = v8;
  v103 = v10;
  v106 = v5;
  v108 = v4;
  v42 = v40
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  v43 = v41;
  outlined init with copy of PgQuery_Alias?(v41 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v36, &demangling cache variable for type metadata for PgQuery_Node?);
  v107 = v17;
  v44 = (uint64_t)&v23[*(int *)(v17 + 48)];
  outlined init with copy of PgQuery_Alias?(v42, (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v36, v44, &demangling cache variable for type metadata for PgQuery_Node?);
  v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  v46 = Node;
  if (v45((uint64_t)v23, 1, Node) == 1)
  {
    v47 = v45(v44, 1, v46);
    v48 = v40;
    swift_retain();
    v49 = v43;
    swift_retain();
    if (v47 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v36, &demangling cache variable for type metadata for PgQuery_Node?);
      v4 = v108;
      goto LABEL_11;
    }
    v51 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_18:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, v51);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v36, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_19;
  }
  v49 = v43;
  v48 = v40;
  v50 = v118;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v118, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v45(v44, 1, v46) == 1)
  {
    swift_retain();
    swift_retain();
    v51 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_17:
    outlined destroy of PgQuery_Alias(v50, type metadata accessor for PgQuery_Node);
    goto LABEL_18;
  }
  v101 = v45;
  v52 = v117;
  outlined init with take of PgQuery_OidList(v44, v117, type metadata accessor for PgQuery_Node);
  v53 = *(int *)(v46 + 20);
  v54 = *(_QWORD *)(v50 + v53);
  v55 = *(_QWORD *)(v52 + v53);
  swift_retain();
  swift_retain();
  if (v54 != v55)
  {
    swift_retain();
    swift_retain();
    v56 = closure #1 in static PgQuery_Node.== infix(_:_:)(v54, v55);
    swift_release();
    swift_release();
    if (!v56)
    {
      outlined destroy of PgQuery_Alias(v52, type metadata accessor for PgQuery_Node);
      v51 = &demangling cache variable for type metadata for PgQuery_Node?;
      v50 = v118;
      goto LABEL_17;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v57 = v118;
  v58 = v52;
  v4 = v108;
  v59 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v58, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v57, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v36, &demangling cache variable for type metadata for PgQuery_Node?);
  v45 = v101;
  if ((v59 & 1) == 0)
    goto LABEL_19;
LABEL_11:
  if (*(_DWORD *)(v48
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__casetype) != *(_DWORD *)(v49 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__casetype)
    || *(_DWORD *)(v48
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__casecollid) != *(_DWORD *)(v49 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__casecollid))
  {
    goto LABEL_19;
  }
  v117 = v49;
  v118 = v48;
  v60 = v48
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  v61 = v45;
  v62 = v116;
  outlined init with copy of PgQuery_Alias?(v49 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v116, &demangling cache variable for type metadata for PgQuery_Node?);
  v63 = v107;
  v64 = v115;
  v65 = v115 + *(int *)(v107 + 48);
  outlined init with copy of PgQuery_Alias?(v60, v115, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v62, v65, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v61(v64, 1, v46) != 1)
  {
    v67 = v114;
    outlined init with copy of PgQuery_Alias?(v64, v114, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v61(v65, 1, v46) == 1)
    {
      v68 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v69 = v113;
      outlined init with take of PgQuery_OidList(v65, v113, type metadata accessor for PgQuery_Node);
      v70 = *(int *)(v46 + 20);
      v71 = *(_QWORD *)(v67 + v70);
      v72 = *(_QWORD *)(v69 + v70);
      if (v71 == v72
        || (swift_retain(),
            swift_retain(),
            v73 = closure #1 in static PgQuery_Node.== infix(_:_:)(v71, v72),
            swift_release(),
            swift_release(),
            v73))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v74 = v113;
        v75 = v114;
        v76 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v74, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v75, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)(v64, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v116, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v76 & 1) == 0)
          goto LABEL_19;
        goto LABEL_26;
      }
      outlined destroy of PgQuery_Alias(v113, type metadata accessor for PgQuery_Node);
      v68 = &demangling cache variable for type metadata for PgQuery_Node?;
      v67 = v114;
    }
    outlined destroy of PgQuery_Alias(v67, type metadata accessor for PgQuery_Node);
LABEL_35:
    outlined destroy of (key: String, value: StorableValue)(v64, v68);
    v89 = v116;
LABEL_36:
    outlined destroy of (key: String, value: StorableValue)(v89, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_19;
  }
  if (v61(v65, 1, v46) != 1)
  {
    v68 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_35;
  }
  outlined destroy of (key: String, value: StorableValue)(v64, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v116, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_26:
  v78 = v117;
  v77 = v118;
  v79 = *(_QWORD *)(v118
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  v80 = *(_QWORD *)(v117
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v81 = specialized static Array<A>.== infix(_:_:)(v79, v80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v81 & 1) != 0)
  {
    v82 = v77
        + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defresult;
    v83 = v63;
    v84 = v111;
    outlined init with copy of PgQuery_Alias?(v78+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defresult, v111, &demangling cache variable for type metadata for PgQuery_Node?);
    v85 = v112;
    v86 = v112 + *(int *)(v83 + 48);
    outlined init with copy of PgQuery_Alias?(v82, v112, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined init with copy of PgQuery_Alias?(v84, v86, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v61(v85, 1, v46) == 1)
    {
      if (v61(v86, 1, v46) == 1)
      {
        outlined destroy of (key: String, value: StorableValue)(v85, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v84, &demangling cache variable for type metadata for PgQuery_Node?);
        goto LABEL_42;
      }
      v88 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
      goto LABEL_48;
    }
    v87 = v110;
    outlined init with copy of PgQuery_Alias?(v85, v110, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v61(v86, 1, v46) == 1)
    {
      v88 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_47:
      outlined destroy of PgQuery_Alias(v87, type metadata accessor for PgQuery_Node);
LABEL_48:
      outlined destroy of (key: String, value: StorableValue)(v85, v88);
      v89 = v84;
      goto LABEL_36;
    }
    v90 = v109;
    outlined init with take of PgQuery_OidList(v86, v109, type metadata accessor for PgQuery_Node);
    v91 = *(int *)(v46 + 20);
    v92 = *(_QWORD *)(v87 + v91);
    v93 = *(_QWORD *)(v90 + v91);
    if (v92 != v93)
    {
      swift_retain();
      swift_retain();
      v94 = closure #1 in static PgQuery_Node.== infix(_:_:)(v92, v93);
      swift_release();
      swift_release();
      if (!v94)
      {
        outlined destroy of PgQuery_Alias(v90, type metadata accessor for PgQuery_Node);
        v88 = &demangling cache variable for type metadata for PgQuery_Node?;
        goto LABEL_47;
      }
    }
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v95 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of PgQuery_Alias(v90, type metadata accessor for PgQuery_Node);
    outlined destroy of PgQuery_Alias(v87, type metadata accessor for PgQuery_Node);
    outlined destroy of (key: String, value: StorableValue)(v85, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined destroy of (key: String, value: StorableValue)(v84, &demangling cache variable for type metadata for PgQuery_Node?);
    if ((v95 & 1) != 0)
    {
LABEL_42:
      v96 = *(_DWORD *)(v118
                      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      v97 = *(_DWORD *)(v117
                      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      swift_release();
      swift_release();
      a2 = v105;
      v5 = v106;
      v8 = v102;
      v10 = v103;
      v38 = v104;
      if (v96 != v97)
      {
        v66 = 0;
        return v66 & 1;
      }
      goto LABEL_43;
    }
  }
LABEL_19:
  swift_release();
  swift_release();
  v66 = 0;
  return v66 & 1;
}

uint64_t specialized static PgQuery_FuncCall.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t WindowDef;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t Node;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t, uint64_t);
  int v48;
  uint64_t v49;
  int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t);
  int v64;
  uint64_t *v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  BOOL v74;
  void (*v75)(char *, uint64_t, uint64_t);
  char *v76;
  void (*v77)(char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v79 - v9;
  WindowDef = type metadata accessor for PgQuery_WindowDef(0);
  v87 = *(_QWORD *)(WindowDef - 8);
  v88 = WindowDef;
  MEMORY[0x1E0C80A78](WindowDef);
  v84 = (uint64_t)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_WindowDef?, PgQuery_WindowDef?));
  MEMORY[0x1E0C80A78](v86);
  v90 = (uint64_t)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WindowDef?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v85 = (uint64_t)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v89 = (uint64_t)&v79 - v17;
  Node = type metadata accessor for PgQuery_Node(0);
  v19 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v91 = (uint64_t)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v21);
  v93 = (uint64_t)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v24 = MEMORY[0x1E0C80A78](v23);
  v92 = (uint64_t)&v79 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v94 = (uint64_t)&v79 - v26;
  v27 = type metadata accessor for PgQuery_FuncCall(0);
  v28 = a1;
  v29 = *(int *)(v27 + 20);
  v30 = *(_QWORD **)(a1 + v29);
  v31 = *(_QWORD **)(a2 + v29);
  if (v30 == v31)
    goto LABEL_32;
  v79 = a2;
  v80 = v28;
  v81 = v8;
  v82 = v5;
  v83 = v4;
  v32 = v30[2];
  v33 = v31[2];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v34 = specialized static Array<A>.== infix(_:_:)(v32, v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
    goto LABEL_25;
  v35 = v30[3];
  v36 = v31[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v37 = specialized static Array<A>.== infix(_:_:)(v35, v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v37 & 1) == 0)
    goto LABEL_25;
  v38 = v30[4];
  v39 = v31[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v40 = specialized static Array<A>.== infix(_:_:)(v38, v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v40 & 1) == 0)
    goto LABEL_25;
  v41 = (uint64_t)v30
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggFilter;
  v42 = v94;
  outlined init with copy of PgQuery_Alias?((uint64_t)v31+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggFilter, v94, &demangling cache variable for type metadata for PgQuery_Node?);
  v43 = v93;
  v44 = v93 + *(int *)(v21 + 48);
  outlined init with copy of PgQuery_Alias?(v41, v93, &demangling cache variable for type metadata for PgQuery_Node?);
  v45 = v42;
  v46 = v43;
  outlined init with copy of PgQuery_Alias?(v45, v44, &demangling cache variable for type metadata for PgQuery_Node?);
  v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  if (v47(v43, 1, Node) != 1)
  {
    v49 = v92;
    outlined init with copy of PgQuery_Alias?(v43, v92, &demangling cache variable for type metadata for PgQuery_Node?);
    v50 = v47(v44, 1, Node);
    v4 = v83;
    if (v50 == 1)
    {
      v51 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v52 = v91;
      outlined init with take of PgQuery_OidList(v44, v91, type metadata accessor for PgQuery_Node);
      v53 = *(int *)(Node + 20);
      v54 = *(_QWORD *)(v49 + v53);
      v55 = *(_QWORD *)(v52 + v53);
      if (v54 == v55
        || (swift_retain(),
            swift_retain(),
            v56 = closure #1 in static PgQuery_Node.== infix(_:_:)(v54, v55),
            swift_release(),
            swift_release(),
            v56))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v57 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v52, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v49, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)(v46, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v94, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v57 & 1) == 0)
          goto LABEL_25;
        goto LABEL_14;
      }
      outlined destroy of PgQuery_Alias(v52, type metadata accessor for PgQuery_Node);
      v51 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v49, type metadata accessor for PgQuery_Node);
LABEL_23:
    outlined destroy of (key: String, value: StorableValue)(v46, v51);
    v65 = &demangling cache variable for type metadata for PgQuery_Node?;
    v66 = v94;
LABEL_24:
    outlined destroy of (key: String, value: StorableValue)(v66, v65);
    goto LABEL_25;
  }
  v48 = v47(v44, 1, Node);
  v4 = v83;
  if (v48 != 1)
  {
    v51 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_23;
  }
  outlined destroy of (key: String, value: StorableValue)(v46, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v94, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_14:
  if (*((unsigned __int8 *)v30
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggWithinGroup) != *((unsigned __int8 *)v31 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggWithinGroup)
    || *((unsigned __int8 *)v30
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggStar) != *((unsigned __int8 *)v31 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggStar)
    || *((unsigned __int8 *)v30
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggDistinct) != *((unsigned __int8 *)v31 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggDistinct)
    || *((unsigned __int8 *)v30
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcVariadic) != *((unsigned __int8 *)v31 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcVariadic))
  {
    goto LABEL_25;
  }
  v58 = (uint64_t)v30
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__over;
  v59 = v89;
  outlined init with copy of PgQuery_Alias?((uint64_t)v31+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__over, v89, &demangling cache variable for type metadata for PgQuery_WindowDef?);
  v60 = v90;
  v61 = v90 + *(int *)(v86 + 48);
  outlined init with copy of PgQuery_Alias?(v58, v90, &demangling cache variable for type metadata for PgQuery_WindowDef?);
  outlined init with copy of PgQuery_Alias?(v59, v61, &demangling cache variable for type metadata for PgQuery_WindowDef?);
  v62 = v88;
  v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v87 + 48);
  if (v63(v60, 1, v88) == 1)
  {
    v64 = v63(v61, 1, v62);
    v5 = v82;
    if (v64 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v60, &demangling cache variable for type metadata for PgQuery_WindowDef?);
      outlined destroy of (key: String, value: StorableValue)(v59, &demangling cache variable for type metadata for PgQuery_WindowDef?);
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  v68 = v85;
  outlined init with copy of PgQuery_Alias?(v60, v85, &demangling cache variable for type metadata for PgQuery_WindowDef?);
  v69 = v63(v61, 1, v62);
  v5 = v82;
  if (v69 == 1)
  {
    outlined destroy of PgQuery_Alias(v68, type metadata accessor for PgQuery_WindowDef);
LABEL_28:
    outlined destroy of (key: String, value: StorableValue)(v60, &demangling cache variable for type metadata for (PgQuery_WindowDef?, PgQuery_WindowDef?));
    v65 = &demangling cache variable for type metadata for PgQuery_WindowDef?;
    v66 = v59;
    goto LABEL_24;
  }
  v70 = v61;
  v71 = v84;
  outlined init with take of PgQuery_OidList(v70, v84, type metadata accessor for PgQuery_WindowDef);
  LODWORD(v94) = specialized static PgQuery_WindowDef.== infix(_:_:)(v68, v71);
  outlined destroy of PgQuery_Alias(v71, type metadata accessor for PgQuery_WindowDef);
  outlined destroy of PgQuery_Alias(v68, type metadata accessor for PgQuery_WindowDef);
  outlined destroy of (key: String, value: StorableValue)(v60, &demangling cache variable for type metadata for PgQuery_WindowDef?);
  outlined destroy of (key: String, value: StorableValue)(v59, &demangling cache variable for type metadata for PgQuery_WindowDef?);
  if ((v94 & 1) != 0)
  {
LABEL_30:
    v72 = *(_DWORD *)((char *)v30
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    v73 = *(_DWORD *)((char *)v31
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    swift_release();
    v74 = v72 == v73;
    v28 = v80;
    v8 = v81;
    a2 = v79;
    if (!v74)
    {
      v67 = 0;
      return v67 & 1;
    }
LABEL_32:
    v75 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v75(v10, v28, v4);
    v75(v8, a2, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v76 = v8;
    v67 = dispatch thunk of static Equatable.== infix(_:_:)();
    v77 = *(void (**)(char *, uint64_t))(v5 + 8);
    v77(v76, v4);
    v77(v10, v4);
    return v67 & 1;
  }
LABEL_25:
  swift_release();
  swift_release();
  v67 = 0;
  return v67 & 1;
}

uint64_t specialized static PgQuery_BoolExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t BoolExpr;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  int v47;
  int v48;
  BOOL v49;
  void (*v50)(char *, uint64_t, uint64_t);
  void (*v51)(char *, uint64_t);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v53 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v61 = *(_QWORD *)(Node - 8);
  v62 = Node;
  MEMORY[0x1E0C80A78](Node);
  v59 = (uint64_t)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v60 = (uint64_t)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v53 - v19;
  BoolExpr = type metadata accessor for PgQuery_BoolExpr(0);
  v22 = a1;
  v23 = *(int *)(BoolExpr + 20);
  v24 = *(_QWORD *)(a1 + v23);
  v25 = *(_QWORD *)(a2 + v23);
  if (v24 == v25)
    goto LABEL_22;
  v55 = a2;
  v56 = v22;
  v54 = v10;
  v57 = v5;
  v58 = v4;
  v26 = v24
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v25 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  v28 = (uint64_t)v20;
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v27, &demangling cache variable for type metadata for PgQuery_Node?);
  v29 = v62;
  v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48);
  if (v30((uint64_t)v15, 1, v62) != 1)
  {
    v32 = v25;
    v33 = v60;
    outlined init with copy of PgQuery_Alias?((uint64_t)v15, v60, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v30(v27, 1, v29) == 1)
    {
      swift_retain();
      swift_retain();
      v34 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v35 = v59;
      outlined init with take of PgQuery_OidList(v27, v59, type metadata accessor for PgQuery_Node);
      v36 = *(int *)(v29 + 20);
      v37 = *(_QWORD *)(v33 + v36);
      v38 = *(_QWORD *)(v35 + v36);
      swift_retain();
      swift_retain();
      if (v37 == v38
        || (swift_retain(),
            swift_retain(),
            v39 = closure #1 in static PgQuery_Node.== infix(_:_:)(v37, v38),
            swift_release(),
            swift_release(),
            v39))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v40 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v28, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v40 & 1) == 0)
          goto LABEL_18;
        goto LABEL_11;
      }
      outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
      v34 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
LABEL_17:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, v34);
    outlined destroy of (key: String, value: StorableValue)(v28, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_18;
  }
  v31 = v30(v27, 1, v29);
  swift_retain();
  v32 = v25;
  swift_retain();
  if (v31 != 1)
  {
    v34 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_17;
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  v41 = *(_QWORD *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLop);
  if (*(_BYTE *)(v32
                + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLop
                + 8) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLop) == v41)
  {
    v43 = *(_QWORD *)(v24
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
    v44 = *(_QWORD *)(v32
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
    v45 = v32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v46 = specialized static Array<A>.== infix(_:_:)(v43, v44);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v46 & 1) != 0)
    {
      v47 = *(_DWORD *)(v24
                      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      v48 = *(_DWORD *)(v45
                      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      swift_release();
      swift_release();
      v49 = v47 == v48;
      v5 = v57;
      v4 = v58;
      v10 = v54;
      a2 = v55;
      v22 = v56;
      if (!v49)
      {
        v42 = 0;
        return v42 & 1;
      }
LABEL_22:
      v50 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v50(v10, v22, v4);
      v50(v8, a2, v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v42 = dispatch thunk of static Equatable.== infix(_:_:)();
      v51 = *(void (**)(char *, uint64_t))(v5 + 8);
      v51(v8, v4);
      v51(v10, v4);
      return v42 & 1;
    }
  }
LABEL_18:
  swift_release();
  swift_release();
  v42 = 0;
  return v42 & 1;
}

uint64_t specialized static PgQuery_XmlExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t XmlExpr;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  int v54;
  int v55;
  BOOL v56;
  void (*v57)(char *, uint64_t, uint64_t);
  void (*v58)(char *, uint64_t);
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v60 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v68 = *(_QWORD *)(Node - 8);
  v69 = Node;
  MEMORY[0x1E0C80A78](Node);
  v66 = (uint64_t)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v67 = (uint64_t)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v60 - v19;
  XmlExpr = type metadata accessor for PgQuery_XmlExpr(0);
  v22 = a1;
  v23 = *(int *)(XmlExpr + 20);
  v24 = *(_QWORD *)(a1 + v23);
  v25 = *(_QWORD *)(a2 + v23);
  if (v24 == v25)
    goto LABEL_36;
  v62 = a2;
  v63 = v22;
  v61 = v10;
  v64 = v5;
  v65 = v4;
  v26 = v24 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v25 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v27, &demangling cache variable for type metadata for PgQuery_Node?);
  v28 = v69;
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
  if (v29((uint64_t)v15, 1, v69) != 1)
  {
    v31 = v67;
    outlined init with copy of PgQuery_Alias?((uint64_t)v15, v67, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v29(v27, 1, v28) == 1)
    {
      swift_retain();
      swift_retain();
      v32 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v33 = (uint64_t)v20;
      v34 = v66;
      outlined init with take of PgQuery_OidList(v27, v66, type metadata accessor for PgQuery_Node);
      v35 = *(int *)(v28 + 20);
      v36 = *(_QWORD *)(v31 + v35);
      v37 = *(_QWORD *)(v34 + v35);
      swift_retain();
      swift_retain();
      if (v36 == v37
        || (swift_retain(),
            swift_retain(),
            v38 = closure #1 in static PgQuery_Node.== infix(_:_:)(v36, v37),
            swift_release(),
            swift_release(),
            v38))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v39 = v66;
        v40 = v67;
        v41 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v41 & 1) == 0)
          goto LABEL_26;
        goto LABEL_11;
      }
      outlined destroy of PgQuery_Alias(v66, type metadata accessor for PgQuery_Node);
      v32 = &demangling cache variable for type metadata for PgQuery_Node?;
      v31 = v67;
    }
    outlined destroy of PgQuery_Alias(v31, type metadata accessor for PgQuery_Node);
LABEL_25:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, v32);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_26;
  }
  v30 = v29(v27, 1, v28);
  swift_retain();
  swift_retain();
  if (v30 != 1)
  {
    v32 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_25;
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  if ((specialized == infix<A>(_:_:)(*(_QWORD *)(v24+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op), *(unsigned __int8 *)(v24+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op+ 8), *(_QWORD *)(v25+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op), *(unsigned __int8 *)(v25+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op+ 8)) & 1) == 0|| (*(_QWORD *)(v24+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name) != *(_QWORD *)(v25 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name)|| *(_QWORD *)(v24+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name+ 8) != *(_QWORD *)(v25+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name+ 8))&& (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_26;
  }
  v42 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__namedArgs);
  v43 = *(_QWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__namedArgs);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v44 = specialized static Array<A>.== infix(_:_:)(v42, v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v44 & 1) == 0)
    goto LABEL_26;
  v45 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argNames);
  v46 = *(_QWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argNames);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v47 = specialized static Array<A>.== infix(_:_:)(v45, v46);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v47 & 1) == 0)
    goto LABEL_26;
  v48 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  v49 = *(_QWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v50 = specialized static Array<A>.== infix(_:_:)(v48, v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v50 & 1) == 0)
    goto LABEL_26;
  v51 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xmloption);
  v52 = *(_QWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xmloption);
  if (*(_BYTE *)(v25
                + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xmloption
                + 8) == 1)
  {
    v4 = v65;
    if (v52)
    {
      if (v52 == 1)
      {
        if (v51 != 1)
          goto LABEL_26;
      }
      else if (v51 != 2)
      {
        goto LABEL_26;
      }
    }
    else if (v51)
    {
      goto LABEL_26;
    }
  }
  else
  {
    v4 = v65;
    if (v51 != v52)
      goto LABEL_26;
  }
  if (*(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__type) == *(_DWORD *)(v25 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__type)
    && *(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typmod) == *(_DWORD *)(v25 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typmod))
  {
    v54 = *(_DWORD *)(v24
                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    v55 = *(_DWORD *)(v25
                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    swift_release();
    v56 = v54 == v55;
    v22 = v63;
    v5 = v64;
    v10 = v61;
    a2 = v62;
    if (!v56)
    {
      v53 = 0;
      return v53 & 1;
    }
LABEL_36:
    v57 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v57(v10, v22, v4);
    v57(v8, a2, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v53 = dispatch thunk of static Equatable.== infix(_:_:)();
    v58 = *(void (**)(char *, uint64_t))(v5 + 8);
    v58(v8, v4);
    v58(v10, v4);
    return v53 & 1;
  }
LABEL_26:
  swift_release();
  swift_release();
  v53 = 0;
  return v53 & 1;
}

uint64_t specialized static PgQuery_SubPlan.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t SubPlan;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  double v85;
  double v86;
  void (*v87)(char *, uint64_t, uint64_t);
  char *v88;
  void (*v89)(char *, uint64_t);
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v91 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v103 = *(_QWORD *)(Node - 8);
  v12 = MEMORY[0x1E0C80A78](Node);
  v97 = (uint64_t)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v101 = (uint64_t)&v91 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v16 = MEMORY[0x1E0C80A78](v15);
  v100 = (uint64_t)&v91 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v91 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v98 = (uint64_t)&v91 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v99 = (uint64_t)&v91 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v102 = (uint64_t)&v91 - v26;
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v91 - v27;
  SubPlan = type metadata accessor for PgQuery_SubPlan(0);
  v30 = a1;
  v31 = *(int *)(SubPlan + 20);
  v32 = *(_QWORD *)(a1 + v31);
  v33 = *(_QWORD *)(a2 + v31);
  if (v32 == v33)
    goto LABEL_43;
  v92 = a2;
  v93 = v30;
  v91 = v10;
  v94 = v8;
  v95 = v5;
  v96 = v4;
  v34 = v32 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  v35 = v33;
  outlined init with copy of PgQuery_Alias?(v33 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  v36 = (uint64_t)&v19[*(int *)(v15 + 48)];
  outlined init with copy of PgQuery_Alias?(v34, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, v36, &demangling cache variable for type metadata for PgQuery_Node?);
  v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48);
  v38 = v37(v19, 1, Node) == 1;
  v39 = (uint64_t)v19;
  v104 = v35;
  if (!v38)
  {
    v43 = (uint64_t)v28;
    v44 = v39;
    v45 = v102;
    outlined init with copy of PgQuery_Alias?(v39, v102, &demangling cache variable for type metadata for PgQuery_Node?);
    v46 = v37((char *)v36, 1, Node);
    if (v46 == 1)
    {
      swift_retain();
      swift_retain();
      outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_Node);
      goto LABEL_8;
    }
    v40 = v15;
    v50 = v101;
    outlined init with take of PgQuery_OidList(v36, v101, type metadata accessor for PgQuery_Node);
    v103 = Node;
    v51 = *(int *)(Node + 20);
    v52 = *(_QWORD *)(v45 + v51);
    v53 = *(_QWORD *)(v50 + v51);
    swift_retain();
    swift_retain();
    if (v52 != v53)
    {
      swift_retain();
      swift_retain();
      v54 = closure #1 in static PgQuery_Node.== infix(_:_:)(v52, v53);
      swift_release();
      swift_release();
      if (!v54)
      {
        outlined destroy of PgQuery_Alias(v50, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v102, type metadata accessor for PgQuery_Node);
        v47 = &demangling cache variable for type metadata for PgQuery_Node?;
        goto LABEL_9;
      }
    }
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v55 = v102;
    v56 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of PgQuery_Alias(v50, type metadata accessor for PgQuery_Node);
    outlined destroy of PgQuery_Alias(v55, type metadata accessor for PgQuery_Node);
    outlined destroy of (key: String, value: StorableValue)(v44, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined destroy of (key: String, value: StorableValue)(v43, &demangling cache variable for type metadata for PgQuery_Node?);
    v42 = v104;
    if ((v56 & 1) == 0)
      goto LABEL_11;
LABEL_15:
    if ((specialized == infix<A>(_:_:)(*(_QWORD *)(v32+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType), *(unsigned __int8 *)(v32+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType+ 8), *(_QWORD *)(v42+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType), *(unsigned __int8 *)(v42+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType+ 8)) & 1) == 0)goto LABEL_11;
    v57 = v32
        + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__testexpr;
    v48 = v99;
    outlined init with copy of PgQuery_Alias?(v42+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__testexpr, v99, &demangling cache variable for type metadata for PgQuery_Node?);
    v58 = *(int *)(v40 + 48);
    v59 = v100;
    v60 = v100 + v58;
    outlined init with copy of PgQuery_Alias?(v57, v100, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined init with copy of PgQuery_Alias?(v48, v60, &demangling cache variable for type metadata for PgQuery_Node?);
    v61 = v103;
    if (v37((char *)v59, 1, v103) == 1)
    {
      if (v37((char *)v60, 1, v61) == 1)
      {
        outlined destroy of (key: String, value: StorableValue)(v59, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v48, &demangling cache variable for type metadata for PgQuery_Node?);
        v62 = v104;
LABEL_27:
        v71 = *(_QWORD *)(v32
                        + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramIds);
        v72 = *(_QWORD *)(v62
                        + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramIds);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v73 = specialized static Array<A>.== infix(_:_:)(v71, v72);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v74 = v104;
        if ((v73 & 1) == 0
          || *(_DWORD *)(v32
                       + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__planID) != *(_DWORD *)(v104 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__planID))
        {
          goto LABEL_11;
        }
        if (*(_QWORD *)(v32
                       + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__planName) != *(_QWORD *)(v104 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__planName)
          || *(_QWORD *)(v32
                       + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__planName
                       + 8) != *(_QWORD *)(v104
                                         + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__planName
                                         + 8))
        {
          v75 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v74 = v104;
          if ((v75 & 1) == 0)
            goto LABEL_11;
        }
        if (*(_DWORD *)(v32
                       + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColType) != *(_DWORD *)(v74 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColType))
          goto LABEL_11;
        if (*(_DWORD *)(v32
                       + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColTypmod) != *(_DWORD *)(v74 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColTypmod))
          goto LABEL_11;
        if (*(_DWORD *)(v32
                       + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColCollation) != *(_DWORD *)(v74 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColCollation))
          goto LABEL_11;
        if (*(unsigned __int8 *)(v32
                                + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useHashTable) != *(unsigned __int8 *)(v74 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useHashTable))
          goto LABEL_11;
        if (*(unsigned __int8 *)(v32
                                + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__unknownEqFalse) != *(unsigned __int8 *)(v74 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__unknownEqFalse))
          goto LABEL_11;
        if (*(unsigned __int8 *)(v32
                                + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__parallelSafe) != *(unsigned __int8 *)(v74 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__parallelSafe))
          goto LABEL_11;
        v76 = *(_QWORD *)(v32
                        + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__setParam);
        v77 = *(_QWORD *)(v74
                        + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__setParam);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v78 = specialized static Array<A>.== infix(_:_:)(v76, v77);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v78 & 1) == 0)
          goto LABEL_11;
        v79 = *(_QWORD *)(v32
                        + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__parParam);
        v80 = *(_QWORD *)(v74
                        + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__parParam);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v81 = specialized static Array<A>.== infix(_:_:)(v79, v80);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v81 & 1) == 0)
          goto LABEL_11;
        v82 = *(_QWORD *)(v32
                        + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
        v83 = *(_QWORD *)(v104
                        + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v84 = specialized static Array<A>.== infix(_:_:)(v82, v83);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v84 & 1) == 0
          || *(double *)(v32
                       + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startupCost) != *(double *)(v104 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startupCost))
        {
          goto LABEL_11;
        }
        v85 = *(double *)(v32
                        + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__perCallCost);
        v86 = *(double *)(v104
                        + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__perCallCost);
        swift_release();
        swift_release();
        v5 = v95;
        v4 = v96;
        v30 = v93;
        v8 = v94;
        v10 = v91;
        a2 = v92;
        if (v85 != v86)
        {
          v49 = 0;
          return v49 & 1;
        }
LABEL_43:
        v87 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v87(v10, v30, v4);
        v87(v8, a2, v4);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v88 = v8;
        v49 = dispatch thunk of static Equatable.== infix(_:_:)();
        v89 = *(void (**)(char *, uint64_t))(v5 + 8);
        v89(v88, v4);
        v89(v10, v4);
        return v49 & 1;
      }
    }
    else
    {
      v63 = v98;
      outlined init with copy of PgQuery_Alias?(v59, v98, &demangling cache variable for type metadata for PgQuery_Node?);
      if (v37((char *)v60, 1, v61) != 1)
      {
        v65 = v97;
        outlined init with take of PgQuery_OidList(v60, v97, type metadata accessor for PgQuery_Node);
        v66 = *(int *)(v61 + 20);
        v67 = *(_QWORD *)(v63 + v66);
        v68 = *(_QWORD *)(v65 + v66);
        if (v67 == v68
          || (swift_retain(),
              swift_retain(),
              v69 = closure #1 in static PgQuery_Node.== infix(_:_:)(v67, v68),
              swift_release(),
              swift_release(),
              v69))
        {
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v70 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of PgQuery_Alias(v65, type metadata accessor for PgQuery_Node);
          outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
          outlined destroy of (key: String, value: StorableValue)(v59, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined destroy of (key: String, value: StorableValue)(v48, &demangling cache variable for type metadata for PgQuery_Node?);
          v62 = v104;
          if ((v70 & 1) == 0)
            goto LABEL_11;
          goto LABEL_27;
        }
        outlined destroy of PgQuery_Alias(v65, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
        v64 = &demangling cache variable for type metadata for PgQuery_Node?;
LABEL_22:
        outlined destroy of (key: String, value: StorableValue)(v59, v64);
        goto LABEL_10;
      }
      outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
    }
    v64 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_22;
  }
  v44 = (uint64_t)v19;
  v43 = (uint64_t)v28;
  v40 = v15;
  v103 = Node;
  v41 = v37((char *)v36, 1, Node);
  swift_retain();
  swift_retain();
  if (v41 == 1)
  {
    outlined destroy of (key: String, value: StorableValue)(v44, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined destroy of (key: String, value: StorableValue)(v43, &demangling cache variable for type metadata for PgQuery_Node?);
    v42 = v104;
    goto LABEL_15;
  }
LABEL_8:
  v47 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_9:
  outlined destroy of (key: String, value: StorableValue)(v44, v47);
  v48 = v43;
LABEL_10:
  outlined destroy of (key: String, value: StorableValue)(v48, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  swift_release();
  swift_release();
  v49 = 0;
  return v49 & 1;
}

uint64_t specialized static PgQuery_SubLink.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t SubLink;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t);
  unsigned int v47;
  uint64_t (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  unsigned int (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  char v95;
  int v96;
  int v97;
  void (*v98)(char *, uint64_t, uint64_t);
  void (*v99)(char *, uint64_t);
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t (*v118)(uint64_t, uint64_t, uint64_t);
  uint64_t v119;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v101 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v118 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(Node - 8);
  v119 = Node;
  v12 = MEMORY[0x1E0C80A78](Node);
  v108 = (uint64_t)&v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v112 = (uint64_t)&v101 - v15;
  MEMORY[0x1E0C80A78](v14);
  v116 = (uint64_t)&v101 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v18 = MEMORY[0x1E0C80A78](v17);
  v111 = (uint64_t)&v101 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v114 = (uint64_t)&v101 - v21;
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v101 - v22;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v25 = MEMORY[0x1E0C80A78](v24);
  v109 = (uint64_t)&v101 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v110 = (uint64_t)&v101 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v113 = (uint64_t)&v101 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v115 = (uint64_t)&v101 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v117 = (uint64_t)&v101 - v34;
  MEMORY[0x1E0C80A78](v33);
  v36 = (char *)&v101 - v35;
  SubLink = type metadata accessor for PgQuery_SubLink(0);
  v38 = a1;
  v39 = *(int *)(SubLink + 20);
  v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + v39);
  v41 = *(_QWORD *)(a2 + v39);
  if (v40 == (uint64_t (*)(uint64_t, uint64_t, uint64_t))v41)
  {
LABEL_43:
    v98 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v98(v10, v38, v4);
    v98(v8, a2, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v66 = dispatch thunk of static Equatable.== infix(_:_:)();
    v99 = *(void (**)(char *, uint64_t))(v5 + 8);
    v99(v8, v4);
    v99(v10, v4);
    return v66 & 1;
  }
  v103 = v38;
  v104 = a2;
  v101 = v8;
  v102 = v10;
  v105 = v5;
  v107 = v4;
  v42 = (uint64_t)v40
      + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v41 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v36, &demangling cache variable for type metadata for PgQuery_Node?);
  v106 = v17;
  v43 = v41;
  v44 = (uint64_t)&v23[*(int *)(v17 + 48)];
  outlined init with copy of PgQuery_Alias?(v42, (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v36, v44, &demangling cache variable for type metadata for PgQuery_Node?);
  v45 = v119;
  v46 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v118 + 6);
  if (v46((uint64_t)v23, 1, v119) == 1)
  {
    v47 = v46(v44, 1, v45);
    v48 = v40;
    swift_retain();
    v49 = v43;
    swift_retain();
    if (v47 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v36, &demangling cache variable for type metadata for PgQuery_Node?);
      v4 = v107;
      goto LABEL_11;
    }
    v51 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_18:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, v51);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v36, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_19;
  }
  v49 = v43;
  v48 = v40;
  v50 = v117;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v117, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v46(v44, 1, v45) == 1)
  {
    swift_retain();
    swift_retain();
    v51 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_17:
    outlined destroy of PgQuery_Alias(v50, type metadata accessor for PgQuery_Node);
    goto LABEL_18;
  }
  v118 = v46;
  v52 = v116;
  outlined init with take of PgQuery_OidList(v44, v116, type metadata accessor for PgQuery_Node);
  v53 = *(int *)(v45 + 20);
  v54 = *(_QWORD *)(v50 + v53);
  v55 = *(_QWORD *)(v52 + v53);
  swift_retain();
  swift_retain();
  if (v54 != v55)
  {
    swift_retain();
    swift_retain();
    v56 = closure #1 in static PgQuery_Node.== infix(_:_:)(v54, v55);
    swift_release();
    swift_release();
    if (!v56)
    {
      outlined destroy of PgQuery_Alias(v52, type metadata accessor for PgQuery_Node);
      v51 = &demangling cache variable for type metadata for PgQuery_Node?;
      v50 = v117;
      goto LABEL_17;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v57 = v117;
  v58 = v52;
  v4 = v107;
  v59 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v58, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v57, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v36, &demangling cache variable for type metadata for PgQuery_Node?);
  v46 = v118;
  if ((v59 & 1) == 0)
    goto LABEL_19;
LABEL_11:
  if ((specialized == infix<A>(_:_:)(*(_QWORD *)((char *)v48+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType), *((unsigned __int8 *)v48+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType+ 8), *(_QWORD *)(v49+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType), *(unsigned __int8 *)(v49+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType+ 8)) & 1) == 0|| *(_DWORD *)((char *)v48+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkID) != *(_DWORD *)(v49 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkID))
  {
    goto LABEL_19;
  }
  v117 = v49;
  v118 = v48;
  v60 = (uint64_t)v48
      + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__testexpr;
  v61 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v46;
  v62 = v115;
  outlined init with copy of PgQuery_Alias?(v49+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__testexpr, v115, &demangling cache variable for type metadata for PgQuery_Node?);
  v63 = v106;
  v64 = v114;
  v65 = v114 + *(int *)(v106 + 48);
  outlined init with copy of PgQuery_Alias?(v60, v114, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v62, v65, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v61(v64, 1, v45) != 1)
  {
    v67 = v113;
    outlined init with copy of PgQuery_Alias?(v64, v113, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v61(v65, 1, v45) == 1)
    {
      v68 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v69 = v112;
      outlined init with take of PgQuery_OidList(v65, v112, type metadata accessor for PgQuery_Node);
      v70 = *(int *)(v45 + 20);
      v71 = *(_QWORD *)(v67 + v70);
      v72 = *(_QWORD *)(v69 + v70);
      if (v71 == v72
        || (swift_retain(),
            swift_retain(),
            v73 = closure #1 in static PgQuery_Node.== infix(_:_:)(v71, v72),
            swift_release(),
            swift_release(),
            v73))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v74 = v112;
        v75 = v113;
        v76 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v74, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v75, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)(v64, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v115, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v76 & 1) == 0)
          goto LABEL_19;
        goto LABEL_26;
      }
      outlined destroy of PgQuery_Alias(v112, type metadata accessor for PgQuery_Node);
      v68 = &demangling cache variable for type metadata for PgQuery_Node?;
      v67 = v113;
    }
    outlined destroy of PgQuery_Alias(v67, type metadata accessor for PgQuery_Node);
LABEL_35:
    outlined destroy of (key: String, value: StorableValue)(v64, v68);
    v89 = v115;
LABEL_36:
    outlined destroy of (key: String, value: StorableValue)(v89, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_19;
  }
  if (v61(v65, 1, v45) != 1)
  {
    v68 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_35;
  }
  outlined destroy of (key: String, value: StorableValue)(v64, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v115, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_26:
  v78 = v117;
  v77 = v118;
  v79 = *(_QWORD *)((char *)v118
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__operName);
  v80 = *(_QWORD *)(v117
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__operName);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v81 = specialized static Array<A>.== infix(_:_:)(v79, v80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v81 & 1) != 0)
  {
    v82 = (uint64_t)v77
        + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subselect;
    v83 = v63;
    v84 = v110;
    outlined init with copy of PgQuery_Alias?(v78+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subselect, v110, &demangling cache variable for type metadata for PgQuery_Node?);
    v85 = v111;
    v86 = v111 + *(int *)(v83 + 48);
    outlined init with copy of PgQuery_Alias?(v82, v111, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined init with copy of PgQuery_Alias?(v84, v86, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v61(v85, 1, v45) == 1)
    {
      if (v61(v86, 1, v45) == 1)
      {
        outlined destroy of (key: String, value: StorableValue)(v85, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v84, &demangling cache variable for type metadata for PgQuery_Node?);
        goto LABEL_42;
      }
      v88 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
      goto LABEL_48;
    }
    v87 = v109;
    outlined init with copy of PgQuery_Alias?(v85, v109, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v61(v86, 1, v45) == 1)
    {
      v88 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_47:
      outlined destroy of PgQuery_Alias(v87, type metadata accessor for PgQuery_Node);
LABEL_48:
      outlined destroy of (key: String, value: StorableValue)(v85, v88);
      v89 = v84;
      goto LABEL_36;
    }
    v90 = v108;
    outlined init with take of PgQuery_OidList(v86, v108, type metadata accessor for PgQuery_Node);
    v91 = *(int *)(v45 + 20);
    v92 = *(_QWORD *)(v87 + v91);
    v93 = *(_QWORD *)(v90 + v91);
    if (v92 != v93)
    {
      swift_retain();
      swift_retain();
      v94 = closure #1 in static PgQuery_Node.== infix(_:_:)(v92, v93);
      swift_release();
      swift_release();
      if (!v94)
      {
        outlined destroy of PgQuery_Alias(v90, type metadata accessor for PgQuery_Node);
        v88 = &demangling cache variable for type metadata for PgQuery_Node?;
        goto LABEL_47;
      }
    }
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v95 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of PgQuery_Alias(v90, type metadata accessor for PgQuery_Node);
    outlined destroy of PgQuery_Alias(v87, type metadata accessor for PgQuery_Node);
    outlined destroy of (key: String, value: StorableValue)(v85, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined destroy of (key: String, value: StorableValue)(v84, &demangling cache variable for type metadata for PgQuery_Node?);
    if ((v95 & 1) != 0)
    {
LABEL_42:
      v96 = *(_DWORD *)((char *)v118
                      + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      v97 = *(_DWORD *)(v117
                      + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      swift_release();
      swift_release();
      a2 = v104;
      v5 = v105;
      v8 = v101;
      v10 = v102;
      v38 = v103;
      if (v96 != v97)
      {
        v66 = 0;
        return v66 & 1;
      }
      goto LABEL_43;
    }
  }
LABEL_19:
  swift_release();
  swift_release();
  v66 = 0;
  return v66 & 1;
}

uint64_t specialized static PgQuery_RowExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t RowExpr;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  int v50;
  int v51;
  BOOL v52;
  void (*v53)(char *, uint64_t, uint64_t);
  void (*v54)(char *, uint64_t);
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v56 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v64 = *(_QWORD *)(Node - 8);
  v65 = Node;
  MEMORY[0x1E0C80A78](Node);
  v62 = (uint64_t)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v63 = (uint64_t)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v56 - v19;
  RowExpr = type metadata accessor for PgQuery_RowExpr(0);
  v22 = a1;
  v23 = *(int *)(RowExpr + 20);
  v24 = *(_QWORD *)(a1 + v23);
  v25 = *(_QWORD *)(a2 + v23);
  if (v24 == v25)
    goto LABEL_23;
  v58 = a2;
  v59 = v22;
  v57 = v10;
  v60 = v5;
  v61 = v4;
  v26 = v24 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v25 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v27, &demangling cache variable for type metadata for PgQuery_Node?);
  v28 = v65;
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48);
  if (v29((uint64_t)v15, 1, v65) != 1)
  {
    v31 = v63;
    outlined init with copy of PgQuery_Alias?((uint64_t)v15, v63, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v29(v27, 1, v28) == 1)
    {
      swift_retain();
      swift_retain();
      v32 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v33 = (uint64_t)v20;
      v34 = v62;
      outlined init with take of PgQuery_OidList(v27, v62, type metadata accessor for PgQuery_Node);
      v35 = *(int *)(v28 + 20);
      v36 = *(_QWORD *)(v31 + v35);
      v37 = *(_QWORD *)(v34 + v35);
      swift_retain();
      swift_retain();
      if (v36 == v37
        || (swift_retain(),
            swift_retain(),
            v38 = closure #1 in static PgQuery_Node.== infix(_:_:)(v36, v37),
            swift_release(),
            swift_release(),
            v38))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v39 = v62;
        v40 = v63;
        v41 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v33, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v41 & 1) == 0)
          goto LABEL_18;
        goto LABEL_11;
      }
      outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_Node);
      v32 = &demangling cache variable for type metadata for PgQuery_Node?;
      v31 = v63;
    }
    outlined destroy of PgQuery_Alias(v31, type metadata accessor for PgQuery_Node);
LABEL_17:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, v32);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_18;
  }
  v30 = v29(v27, 1, v28);
  swift_retain();
  swift_retain();
  if (v30 != 1)
  {
    v32 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_17;
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  v42 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  v43 = *(_QWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v44 = specialized static Array<A>.== infix(_:_:)(v42, v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v44 & 1) != 0
    && *(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowTypeid) == *(_DWORD *)(v25 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowTypeid))
  {
    v45 = *(_QWORD *)(v25
                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowFormat);
    if (*(_BYTE *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowFormat
                  + 8) == 1)
      __asm { BR              X11 }
    if (*(_QWORD *)(v24
                   + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowFormat) == v45)
    {
      v47 = *(_QWORD *)(v24
                      + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colnames);
      v48 = *(_QWORD *)(v25
                      + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colnames);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v49 = specialized static Array<A>.== infix(_:_:)(v47, v48);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v49 & 1) != 0)
      {
        v50 = *(_DWORD *)(v24
                        + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
        v51 = *(_DWORD *)(v25
                        + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
        swift_release();
        swift_release();
        v52 = v50 == v51;
        v5 = v60;
        v4 = v61;
        v10 = v57;
        a2 = v58;
        v22 = v59;
        if (!v52)
        {
          v46 = 0;
          return v46 & 1;
        }
LABEL_23:
        v53 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v53(v10, v22, v4);
        v53(v8, a2, v4);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v46 = dispatch thunk of static Equatable.== infix(_:_:)();
        v54 = *(void (**)(char *, uint64_t))(v5 + 8);
        v54(v8, v4);
        v54(v10, v4);
        return v46 & 1;
      }
    }
  }
LABEL_18:
  swift_release();
  swift_release();
  v46 = 0;
  return v46 & 1;
}

uint64_t specialized static PgQuery_RangeTblRef.== infix(_:_:)(_DWORD *a1, char *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v19 - v11;
  if (*a1 == *(_DWORD *)a2)
  {
    v13 = a3(0);
    v14 = (char *)a1 + *(int *)(v13 + 20);
    v15 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v15(v12, v14, v6);
    v15(v10, &a2[*(int *)(v13 + 20)], v6);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v7 + 8);
    v17(v10, v6);
    v17(v12, v6);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static PgQuery_DefElem.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t DefElem;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  char v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  char v41;
  uint64_t v42;
  int v43;
  int v44;
  void (*v45)(char *, uint64_t, uint64_t);
  char v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v50 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v12 = *(_QWORD *)(Node - 8);
  MEMORY[0x1E0C80A78](Node);
  v56 = (uint64_t)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v14);
  v58 = (uint64_t)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v57 = (uint64_t)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v59 = (uint64_t)&v50 - v19;
  DefElem = type metadata accessor for PgQuery_DefElem(0);
  v21 = a1;
  v22 = *(int *)(DefElem + 20);
  v23 = *(_QWORD **)(a1 + v22);
  v24 = *(_QWORD **)(a2 + v22);
  if (v23 == v24)
  {
LABEL_26:
    v45 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v45(v10, v21, v4);
    v45(v8, a2, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v46 = dispatch thunk of static Equatable.== infix(_:_:)();
    v47 = v8;
    v26 = v46;
    v48 = *(void (**)(char *, uint64_t))(v5 + 8);
    v48(v47, v4);
    v48(v10, v4);
    return v26 & 1;
  }
  v53 = v21;
  v54 = a2;
  v52 = v10;
  v55 = v8;
  v25 = v23[2] == v24[2] && v23[3] == v24[3];
  if (v25 || (v26 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v27 = v23[4] == v24[4] && v23[5] == v24[5];
    if (v27 || (v26 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      v51 = v5;
      v28 = (uint64_t)v23
          + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
      v29 = v59;
      outlined init with copy of PgQuery_Alias?((uint64_t)v24+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v59, &demangling cache variable for type metadata for PgQuery_Node?);
      v30 = v58;
      v31 = v58 + *(int *)(v14 + 48);
      outlined init with copy of PgQuery_Alias?(v28, v58, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined init with copy of PgQuery_Alias?(v29, v31, &demangling cache variable for type metadata for PgQuery_Node?);
      v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
      if (v32(v30, 1, Node) == 1)
      {
        v33 = v32(v31, 1, Node);
        swift_retain();
        swift_retain();
        if (v33 == 1)
        {
          outlined destroy of (key: String, value: StorableValue)(v30, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined destroy of (key: String, value: StorableValue)(v59, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_21:
          v42 = *(_QWORD *)((char *)v24
                          + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defaction);
          if (*((_BYTE *)v24
               + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defaction
               + 8) == 1)
            __asm { BR              X11 }
          v5 = v51;
          if (*(_QWORD *)((char *)v23
                         + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defaction) == v42)
          {
            v43 = *(_DWORD *)((char *)v23
                            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
            v44 = *(_DWORD *)((char *)v24
                            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
            swift_release();
            swift_release();
            v25 = v43 == v44;
            a2 = v54;
            v8 = v55;
            v10 = v52;
            v21 = v53;
            if (!v25)
              goto LABEL_31;
            goto LABEL_26;
          }
LABEL_30:
          swift_release();
          swift_release();
LABEL_31:
          v26 = 0;
          return v26 & 1;
        }
        v35 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
      }
      else
      {
        v34 = v57;
        outlined init with copy of PgQuery_Alias?(v30, v57, &demangling cache variable for type metadata for PgQuery_Node?);
        if (v32(v31, 1, Node) == 1)
        {
          swift_retain();
          swift_retain();
          v35 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
        }
        else
        {
          v36 = v56;
          outlined init with take of PgQuery_OidList(v31, v56, type metadata accessor for PgQuery_Node);
          v37 = *(int *)(Node + 20);
          v38 = *(_QWORD *)(v34 + v37);
          v39 = *(_QWORD *)(v36 + v37);
          swift_retain();
          swift_retain();
          if (v38 == v39
            || (swift_retain(),
                swift_retain(),
                v40 = closure #1 in static PgQuery_Node.== infix(_:_:)(v38, v39),
                swift_release(),
                swift_release(),
                v40))
          {
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
            v41 = dispatch thunk of static Equatable.== infix(_:_:)();
            outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
            outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
            outlined destroy of (key: String, value: StorableValue)(v30, &demangling cache variable for type metadata for PgQuery_Node?);
            outlined destroy of (key: String, value: StorableValue)(v59, &demangling cache variable for type metadata for PgQuery_Node?);
            if ((v41 & 1) == 0)
              goto LABEL_30;
            goto LABEL_21;
          }
          outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
          v35 = &demangling cache variable for type metadata for PgQuery_Node?;
        }
        outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
      }
      outlined destroy of (key: String, value: StorableValue)(v30, v35);
      outlined destroy of (key: String, value: StorableValue)(v59, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_30;
    }
  }
  return v26 & 1;
}

uint64_t specialized static PgQuery_SortBy.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t SortBy;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  int v48;
  int v49;
  BOOL v50;
  void (*v51)(char *, uint64_t, uint64_t);
  void (*v52)(char *, uint64_t);
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v54 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v62 = *(_QWORD *)(Node - 8);
  v63 = Node;
  MEMORY[0x1E0C80A78](Node);
  v60 = (uint64_t)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v61 = (uint64_t)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v54 - v19;
  SortBy = type metadata accessor for PgQuery_SortBy(0);
  v22 = a1;
  v23 = *(int *)(SortBy + 20);
  v24 = *(_QWORD *)(a1 + v23);
  v25 = *(_QWORD *)(a2 + v23);
  if (v24 == v25)
    goto LABEL_25;
  v56 = a2;
  v57 = v22;
  v55 = v10;
  v58 = v5;
  v59 = v4;
  v26 = v24 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v25 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  v28 = (uint64_t)v20;
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v27, &demangling cache variable for type metadata for PgQuery_Node?);
  v29 = v63;
  v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48);
  if (v30((uint64_t)v15, 1, v63) != 1)
  {
    v32 = v25;
    v33 = v61;
    outlined init with copy of PgQuery_Alias?((uint64_t)v15, v61, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v30(v27, 1, v29) == 1)
    {
      swift_retain();
      swift_retain();
      v34 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v35 = v60;
      outlined init with take of PgQuery_OidList(v27, v60, type metadata accessor for PgQuery_Node);
      v36 = *(int *)(v29 + 20);
      v37 = *(_QWORD *)(v33 + v36);
      v38 = *(_QWORD *)(v35 + v36);
      swift_retain();
      swift_retain();
      if (v37 == v38
        || (swift_retain(),
            swift_retain(),
            v39 = closure #1 in static PgQuery_Node.== infix(_:_:)(v37, v38),
            swift_release(),
            swift_release(),
            v39))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v40 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v28, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v40 & 1) == 0)
          goto LABEL_21;
        goto LABEL_11;
      }
      outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
      v34 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
LABEL_20:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, v34);
    outlined destroy of (key: String, value: StorableValue)(v28, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_21;
  }
  v31 = v30(v27, 1, v29);
  swift_retain();
  v32 = v25;
  swift_retain();
  if (v31 != 1)
  {
    v34 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_20;
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  v41 = *(_QWORD *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortbyDir);
  if (*(_BYTE *)(v32
                + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortbyDir
                + 8) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortbyDir) == v41)
  {
    v42 = *(_QWORD *)(v32
                    + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortbyNulls);
    if (*(_BYTE *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortbyNulls
                  + 8) == 1)
      __asm { BR              X11 }
    if (*(_QWORD *)(v24
                   + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortbyNulls) == v42)
    {
      v44 = *(_QWORD *)(v24
                      + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useOp);
      v45 = *(_QWORD *)(v32
                      + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useOp);
      v46 = v32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v47 = specialized static Array<A>.== infix(_:_:)(v44, v45);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v47 & 1) != 0)
      {
        v48 = *(_DWORD *)(v24
                        + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
        v49 = *(_DWORD *)(v46
                        + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
        swift_release();
        swift_release();
        v50 = v48 == v49;
        v5 = v58;
        v4 = v59;
        v10 = v55;
        a2 = v56;
        v22 = v57;
        if (!v50)
        {
          v43 = 0;
          return v43 & 1;
        }
LABEL_25:
        v51 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v51(v10, v22, v4);
        v51(v8, a2, v4);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v43 = dispatch thunk of static Equatable.== infix(_:_:)();
        v52 = *(void (**)(char *, uint64_t))(v5 + 8);
        v52(v8, v4);
        v52(v10, v4);
        return v43 & 1;
      }
    }
  }
LABEL_21:
  swift_release();
  swift_release();
  v43 = 0;
  return v43 & 1;
}

uint64_t specialized static PgQuery_OpExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t OpExpr;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  int v45;
  int v46;
  BOOL v47;
  void (*v48)(char *, uint64_t, uint64_t);
  char v49;
  void (*v50)(char *, uint64_t);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v52 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v60 = *(_QWORD *)(Node - 8);
  v61 = Node;
  MEMORY[0x1E0C80A78](Node);
  v58 = (uint64_t)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v59 = (uint64_t)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v52 - v19;
  OpExpr = type metadata accessor for PgQuery_OpExpr(0);
  v22 = a1;
  v23 = *(int *)(OpExpr + 20);
  v24 = *(_QWORD *)(a1 + v23);
  v25 = *(_QWORD *)(a2 + v23);
  if (v24 == v25)
    goto LABEL_20;
  v54 = a2;
  v55 = v22;
  v53 = v10;
  v56 = v5;
  v57 = v4;
  v26 = v24 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v25 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  v28 = (uint64_t)v20;
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v27, &demangling cache variable for type metadata for PgQuery_Node?);
  v29 = v61;
  v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48);
  if (v30((uint64_t)v15, 1, v61) != 1)
  {
    v32 = v25;
    v33 = v59;
    outlined init with copy of PgQuery_Alias?((uint64_t)v15, v59, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v30(v27, 1, v29) == 1)
    {
      swift_retain();
      swift_retain();
      v34 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v35 = v58;
      outlined init with take of PgQuery_OidList(v27, v58, type metadata accessor for PgQuery_Node);
      v36 = *(int *)(v29 + 20);
      v37 = *(_QWORD *)(v33 + v36);
      v38 = *(_QWORD *)(v35 + v36);
      swift_retain();
      swift_retain();
      if (v37 == v38
        || (swift_retain(),
            swift_retain(),
            v39 = closure #1 in static PgQuery_Node.== infix(_:_:)(v37, v38),
            swift_release(),
            swift_release(),
            v39))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v40 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v28, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v40 & 1) != 0)
          goto LABEL_11;
LABEL_24:
        swift_release();
        swift_release();
LABEL_25:
        v49 = 0;
        return v49 & 1;
      }
      outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
      v34 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
LABEL_23:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, v34);
    outlined destroy of (key: String, value: StorableValue)(v28, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_24;
  }
  v31 = v30(v27, 1, v29);
  swift_retain();
  v32 = v25;
  swift_retain();
  if (v31 != 1)
  {
    v34 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_23;
  }
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  if (*(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno))
    goto LABEL_24;
  if (*(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid))
    goto LABEL_24;
  if (*(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype))
    goto LABEL_24;
  if (*(unsigned __int8 *)(v24
                          + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset) != *(unsigned __int8 *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset))
    goto LABEL_24;
  if (*(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid))
    goto LABEL_24;
  if (*(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
    goto LABEL_24;
  v41 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  v42 = *(_QWORD *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  v43 = v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v44 = specialized static Array<A>.== infix(_:_:)(v41, v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v44 & 1) == 0)
    goto LABEL_24;
  v45 = *(_DWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  v46 = *(_DWORD *)(v43
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  v47 = v45 == v46;
  v5 = v56;
  v4 = v57;
  v10 = v53;
  a2 = v54;
  v22 = v55;
  if (!v47)
    goto LABEL_25;
LABEL_20:
  v48 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v48(v10, v22, v4);
  v48(v8, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v49 = dispatch thunk of static Equatable.== infix(_:_:)();
  v50 = *(void (**)(char *, uint64_t))(v5 + 8);
  v50(v8, v4);
  v50(v10, v4);
  return v49 & 1;
}

uint64_t specialized static PgQuery_Aggref.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t Aggref;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  int v86;
  int v87;
  BOOL v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t, uint64_t);
  char *v91;
  void (*v92)(char *, uint64_t);
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v94 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v108 = *(_QWORD *)(Node - 8);
  v109 = Node;
  v12 = MEMORY[0x1E0C80A78](Node);
  v102 = (uint64_t)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v106 = (uint64_t)&v94 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v16 = MEMORY[0x1E0C80A78](v15);
  v104 = (uint64_t)&v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v94 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v103 = (uint64_t)&v94 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v105 = (uint64_t)&v94 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v107 = (uint64_t)&v94 - v26;
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v94 - v27;
  Aggref = type metadata accessor for PgQuery_Aggref(0);
  v30 = a1;
  v31 = *(int *)(Aggref + 20);
  v32 = *(_QWORD *)(a1 + v31);
  v33 = *(_QWORD *)(a2 + v31);
  if (v32 == v33)
    goto LABEL_51;
  v96 = a2;
  v97 = v30;
  v95 = v10;
  v98 = v8;
  v99 = v5;
  v100 = v4;
  v34 = v32 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v33 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  v101 = v15;
  v35 = (uint64_t)&v19[*(int *)(v15 + 48)];
  outlined init with copy of PgQuery_Alias?(v34, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, v35, &demangling cache variable for type metadata for PgQuery_Node?);
  v36 = v109;
  v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v108 + 48);
  if (v37((uint64_t)v19, 1, v109) == 1)
  {
    v38 = v37(v35, 1, v36);
    swift_retain();
    v39 = v33;
    swift_retain();
    v40 = v32;
    if (v38 == 1)
    {
      v41 = v37;
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
      v42 = v101;
      goto LABEL_11;
    }
    v44 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_26:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, v44);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_27;
  }
  v39 = v33;
  v43 = v107;
  outlined init with copy of PgQuery_Alias?((uint64_t)v19, v107, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v37(v35, 1, v36) == 1)
  {
    swift_retain();
    swift_retain();
    v44 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_25:
    outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_Node);
    goto LABEL_26;
  }
  v45 = v106;
  outlined init with take of PgQuery_OidList(v35, v106, type metadata accessor for PgQuery_Node);
  v46 = *(int *)(v36 + 20);
  v47 = *(_QWORD *)(v43 + v46);
  v48 = *(_QWORD *)(v45 + v46);
  swift_retain();
  swift_retain();
  if (v47 != v48)
  {
    swift_retain();
    swift_retain();
    v49 = closure #1 in static PgQuery_Node.== infix(_:_:)(v47, v48);
    swift_release();
    swift_release();
    if (!v49)
    {
      outlined destroy of PgQuery_Alias(v106, type metadata accessor for PgQuery_Node);
      v44 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_25;
    }
  }
  v50 = v43;
  v41 = v37;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v51 = v106;
  v52 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v51, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v50, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  v40 = v32;
  v42 = v101;
  if ((v52 & 1) == 0)
    goto LABEL_27;
LABEL_11:
  if (*(_DWORD *)(v40
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfnoid) != *(_DWORD *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfnoid))
    goto LABEL_27;
  if (*(_DWORD *)(v40
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggtype) != *(_DWORD *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggtype))
    goto LABEL_27;
  if (*(_DWORD *)(v40
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggcollid) != *(_DWORD *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggcollid))
    goto LABEL_27;
  if (*(_DWORD *)(v40
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) != *(_DWORD *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
    goto LABEL_27;
  if (*(_DWORD *)(v40
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggtranstype) != *(_DWORD *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggtranstype))
    goto LABEL_27;
  v53 = *(_QWORD *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggargtypes);
  v54 = v40;
  v55 = *(_QWORD *)(v39
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggargtypes);
  v56 = v39;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v57 = specialized static Array<A>.== infix(_:_:)(v53, v55);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v57 & 1) == 0)
    goto LABEL_27;
  v58 = *(_QWORD *)(v54
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggdirectargs);
  v59 = *(_QWORD *)(v39
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggdirectargs);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v60 = specialized static Array<A>.== infix(_:_:)(v58, v59);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v60 & 1) == 0)
    goto LABEL_27;
  v61 = *(_QWORD *)(v54
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  v62 = *(_QWORD *)(v39
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v63 = specialized static Array<A>.== infix(_:_:)(v61, v62);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v63 & 1) == 0)
    goto LABEL_27;
  v64 = *(_QWORD *)(v54
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggorder);
  v65 = *(_QWORD *)(v39
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggorder);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v66 = specialized static Array<A>.== infix(_:_:)(v64, v65);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v66 & 1) == 0)
    goto LABEL_27;
  v67 = *(_QWORD *)(v54
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggdistinct);
  v68 = *(_QWORD *)(v39
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggdistinct);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v69 = specialized static Array<A>.== infix(_:_:)(v67, v68);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v69 & 1) == 0)
    goto LABEL_27;
  v70 = v54
      + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfilter;
  v71 = v105;
  outlined init with copy of PgQuery_Alias?(v39+ OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfilter, v105, &demangling cache variable for type metadata for PgQuery_Node?);
  v72 = v104;
  v73 = v104 + *(int *)(v42 + 48);
  outlined init with copy of PgQuery_Alias?(v70, v104, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v71, v73, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v41(v72, 1, v36) != 1)
  {
    outlined init with copy of PgQuery_Alias?(v72, v103, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v41(v73, 1, v36) == 1)
    {
      v76 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      v77 = v102;
      outlined init with take of PgQuery_OidList(v73, v102, type metadata accessor for PgQuery_Node);
      v78 = *(int *)(v36 + 20);
      v79 = *(_QWORD *)(v103 + v78);
      v80 = *(_QWORD *)(v77 + v78);
      if (v79 == v80
        || (swift_retain(),
            swift_retain(),
            v81 = closure #1 in static PgQuery_Node.== infix(_:_:)(v79, v80),
            swift_release(),
            swift_release(),
            v81))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v82 = v102;
        v83 = v103;
        v84 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v82, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v83, type metadata accessor for PgQuery_Node);
        outlined destroy of (key: String, value: StorableValue)(v104, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of (key: String, value: StorableValue)(v105, &demangling cache variable for type metadata for PgQuery_Node?);
        v74 = v54;
        if ((v84 & 1) == 0)
          goto LABEL_27;
        goto LABEL_35;
      }
      outlined destroy of PgQuery_Alias(v102, type metadata accessor for PgQuery_Node);
      v76 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v103, type metadata accessor for PgQuery_Node);
    v72 = v104;
LABEL_46:
    outlined destroy of (key: String, value: StorableValue)(v72, v76);
    outlined destroy of (key: String, value: StorableValue)(v105, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_27;
  }
  if (v41(v73, 1, v36) != 1)
  {
    v76 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_46;
  }
  outlined destroy of (key: String, value: StorableValue)(v72, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v105, &demangling cache variable for type metadata for PgQuery_Node?);
  v74 = v54;
LABEL_35:
  if (*(unsigned __int8 *)(v74
                          + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggstar) == *(unsigned __int8 *)(v56 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggstar)
    && *(unsigned __int8 *)(v74
                          + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggvariadic) == *(unsigned __int8 *)(v56 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggvariadic)
    && (*(_QWORD *)(v54
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggkind) == *(_QWORD *)(v56 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggkind)
     && *(_QWORD *)(v54
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggkind
                  + 8) == *(_QWORD *)(v56
                                    + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggkind
                                    + 8)
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    && *(_DWORD *)(v54
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__agglevelsup) == *(_DWORD *)(v56 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__agglevelsup))
  {
    v85 = *(_QWORD *)(v56
                    + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggsplit);
    if (*(_BYTE *)(v56
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggsplit
                  + 8) == 1)
      __asm { BR              X11 }
    if (*(_QWORD *)(v54
                   + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggsplit) == v85)
    {
      v86 = *(_DWORD *)(v54
                      + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      v87 = *(_DWORD *)(v56
                      + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      swift_release();
      swift_release();
      v88 = v86 == v87;
      v5 = v99;
      v4 = v100;
      v30 = v97;
      v8 = v98;
      v10 = v95;
      a2 = v96;
      if (!v88)
      {
        v75 = 0;
        return v75 & 1;
      }
LABEL_51:
      v89 = v5;
      v90 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v90(v10, v30, v4);
      v90(v8, a2, v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v91 = v8;
      v75 = dispatch thunk of static Equatable.== infix(_:_:)();
      v92 = *(void (**)(char *, uint64_t))(v89 + 8);
      v92(v91, v4);
      v92(v10, v4);
      return v75 & 1;
    }
  }
LABEL_27:
  swift_release();
  swift_release();
  v75 = 0;
  return v75 & 1;
}

uint64_t specialized static PgQuery_A_Expr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t A_Expr;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  char v64;
  int v65;
  int v66;
  BOOL v67;
  void (*v68)(char *, uint64_t, uint64_t);
  uint64_t v69;
  char v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  uint64_t *v73;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t Node;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v75 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v11 = *(_QWORD *)(Node - 8);
  v12 = MEMORY[0x1E0C80A78](Node);
  v80 = (uint64_t)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v84 = (uint64_t)&v75 - v14;
  v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  v15 = MEMORY[0x1E0C80A78](v85);
  v83 = (uint64_t)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v75 - v17;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v20 = MEMORY[0x1E0C80A78](v19);
  v81 = (uint64_t)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v82 = (char *)&v75 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v75 - v25;
  MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v75 - v27;
  A_Expr = type metadata accessor for PgQuery_A_Expr(0);
  v30 = a1;
  v31 = a2;
  v32 = *(int *)(A_Expr + 20);
  v33 = *(_QWORD *)(a1 + v32);
  v34 = *(_QWORD *)(v31 + v32);
  if (v33 == v34)
    goto LABEL_26;
  v35 = *(_QWORD *)(v34 + 16);
  if (*(_BYTE *)(v34 + 24) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)(v33 + 16) != v35)
    goto LABEL_35;
  v75 = v30;
  v76 = v31;
  v77 = v10;
  v78 = v8;
  v79 = v5;
  v36 = *(_QWORD *)(v33 + 32);
  v37 = *(_QWORD *)(v34 + 32);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v38 = specialized static Array<A>.== infix(_:_:)(v36, v37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v38 & 1) == 0)
    goto LABEL_34;
  v39 = v33
      + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_A_ExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lexpr;
  outlined init with copy of PgQuery_Alias?(v34 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_A_ExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lexpr, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  v40 = (uint64_t)&v18[*(int *)(v85 + 48)];
  outlined init with copy of PgQuery_Alias?(v39, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, v40, &demangling cache variable for type metadata for PgQuery_Node?);
  v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  v42 = Node;
  if (v41((uint64_t)v18, 1, Node) == 1)
  {
    if (v41(v40, 1, v42) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_15;
    }
    v43 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_29:
    v72 = (uint64_t)v18;
    v73 = v43;
LABEL_33:
    outlined destroy of (key: String, value: StorableValue)(v72, v73);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_34;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v18, (uint64_t)v26, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v41(v40, 1, v42) == 1)
  {
    v43 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_28:
    outlined destroy of PgQuery_Alias((uint64_t)v26, type metadata accessor for PgQuery_Node);
    goto LABEL_29;
  }
  v44 = v40;
  v45 = v84;
  outlined init with take of PgQuery_OidList(v44, v84, type metadata accessor for PgQuery_Node);
  v46 = *(int *)(v42 + 20);
  v47 = *(_QWORD *)&v26[v46];
  v48 = *(_QWORD *)(v45 + v46);
  if (v47 != v48)
  {
    swift_retain();
    swift_retain();
    v49 = closure #1 in static PgQuery_Node.== infix(_:_:)(v47, v48);
    swift_release();
    swift_release();
    if (!v49)
    {
      outlined destroy of PgQuery_Alias(v84, type metadata accessor for PgQuery_Node);
      v43 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_28;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v50 = v84;
  v51 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v50, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v26, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v51 & 1) == 0)
    goto LABEL_34;
LABEL_15:
  v52 = v33
      + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_A_ExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rexpr;
  v28 = v82;
  outlined init with copy of PgQuery_Alias?(v34 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_A_ExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rexpr, (uint64_t)v82, &demangling cache variable for type metadata for PgQuery_Node?);
  v53 = v83;
  v54 = v83 + *(int *)(v85 + 48);
  outlined init with copy of PgQuery_Alias?(v52, v83, &demangling cache variable for type metadata for PgQuery_Node?);
  v55 = Node;
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, v54, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v41(v53, 1, v55) == 1)
  {
    if (v41(v54, 1, v55) == 1)
    {
      outlined destroy of (key: String, value: StorableValue)(v53, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_24;
    }
    v57 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_32;
  }
  v56 = v81;
  outlined init with copy of PgQuery_Alias?(v53, v81, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v41(v54, 1, v55) == 1)
  {
    v57 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_31:
    outlined destroy of PgQuery_Alias(v56, type metadata accessor for PgQuery_Node);
LABEL_32:
    v72 = v53;
    v73 = v57;
    goto LABEL_33;
  }
  v58 = v80;
  outlined init with take of PgQuery_OidList(v54, v80, type metadata accessor for PgQuery_Node);
  v59 = *(int *)(v55 + 20);
  v60 = *(_QWORD *)(v56 + v59);
  v61 = *(_QWORD *)(v58 + v59);
  if (v60 != v61)
  {
    swift_retain();
    swift_retain();
    v62 = closure #1 in static PgQuery_Node.== infix(_:_:)(v60, v61);
    swift_release();
    swift_release();
    if (!v62)
    {
      outlined destroy of PgQuery_Alias(v58, type metadata accessor for PgQuery_Node);
      v57 = &demangling cache variable for type metadata for PgQuery_Node?;
      v56 = v81;
      goto LABEL_31;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v63 = v81;
  v64 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v58, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)(v53, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v64 & 1) == 0)
  {
LABEL_34:
    swift_release();
    swift_release();
LABEL_35:
    v70 = 0;
    return v70 & 1;
  }
LABEL_24:
  v65 = *(_DWORD *)(v33
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_A_ExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  v66 = *(_DWORD *)(v34
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_A_ExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  v67 = v65 == v66;
  v8 = v78;
  v5 = v79;
  v31 = v76;
  v10 = v77;
  v30 = v75;
  if (!v67)
    goto LABEL_35;
LABEL_26:
  v68 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v69 = v31;
  v68(v10, v30, v4);
  v68(v8, v69, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v70 = dispatch thunk of static Equatable.== infix(_:_:)();
  v71 = *(void (**)(char *, uint64_t))(v5 + 8);
  v71(v8, v4);
  v71(v10, v4);
  return v70 & 1;
}

uint64_t specialized static PgQuery_Param.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Node;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t Param;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  int v46;
  int v47;
  BOOL v48;
  void (*v49)(char *, uint64_t, uint64_t);
  char v50;
  void (*v51)(char *, uint64_t);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v53 - v9;
  Node = type metadata accessor for PgQuery_Node(0);
  v61 = *(_QWORD *)(Node - 8);
  v62 = Node;
  MEMORY[0x1E0C80A78](Node);
  v59 = (uint64_t)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v60 = (uint64_t)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v53 - v19;
  Param = type metadata accessor for PgQuery_Param(0);
  v22 = a1;
  v23 = *(int *)(Param + 20);
  v24 = *(_QWORD *)(a1 + v23);
  v25 = *(_QWORD *)(a2 + v23);
  if (v24 == v25)
    goto LABEL_20;
  v55 = a2;
  v56 = v22;
  v54 = v10;
  v57 = v5;
  v58 = v4;
  v26 = v24 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v25 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v27, &demangling cache variable for type metadata for PgQuery_Node?);
  v28 = v62;
  v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 48);
  if (v29((uint64_t)v15, 1, v62) == 1)
  {
    v30 = v29(v27, 1, v28);
    swift_retain();
    swift_retain();
    if (v30 == 1)
    {
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
      v31 = v58;
      v32 = v25;
      goto LABEL_11;
    }
    v35 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_23;
  }
  v33 = v25;
  v34 = v60;
  outlined init with copy of PgQuery_Alias?((uint64_t)v15, v60, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v29(v27, 1, v28) == 1)
  {
    swift_retain();
    swift_retain();
    v35 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_22:
    outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
LABEL_23:
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, v35);
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_24;
  }
  v36 = (uint64_t)v20;
  v37 = v59;
  outlined init with take of PgQuery_OidList(v27, v59, type metadata accessor for PgQuery_Node);
  v38 = *(int *)(v28 + 20);
  v39 = *(_QWORD *)(v34 + v38);
  v40 = *(_QWORD *)(v37 + v38);
  swift_retain();
  swift_retain();
  if (v39 != v40)
  {
    swift_retain();
    swift_retain();
    v41 = closure #1 in static PgQuery_Node.== infix(_:_:)(v39, v40);
    swift_release();
    swift_release();
    if (!v41)
    {
      outlined destroy of PgQuery_Alias(v59, type metadata accessor for PgQuery_Node);
      v35 = &demangling cache variable for type metadata for PgQuery_Node?;
      v20 = (char *)v36;
      goto LABEL_22;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v42 = v34;
  v43 = v59;
  v31 = v58;
  v44 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v42, type metadata accessor for PgQuery_Node);
  outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of (key: String, value: StorableValue)(v36, &demangling cache variable for type metadata for PgQuery_Node?);
  v32 = v33;
  if ((v44 & 1) == 0)
  {
LABEL_24:
    swift_release();
    swift_release();
LABEL_25:
    v50 = 0;
    return v50 & 1;
  }
LABEL_11:
  v45 = *(_QWORD *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramkind);
  if (*(_BYTE *)(v32
                + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramkind
                + 8) == 1)
    __asm { BR              X11 }
  v4 = v31;
  if (*(_QWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramkind) != v45
    || *(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramid) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramid)
    || *(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramtype) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramtype)
    || *(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramtypmod) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramtypmod)
    || *(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramcollid) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramcollid))
  {
    goto LABEL_24;
  }
  v46 = *(_DWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  v47 = *(_DWORD *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  v48 = v46 == v47;
  v22 = v56;
  v5 = v57;
  v10 = v54;
  a2 = v55;
  if (!v48)
    goto LABEL_25;
LABEL_20:
  v49 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v49(v10, v22, v4);
  v49(v8, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v50 = dispatch thunk of static Equatable.== infix(_:_:)();
  v51 = *(void (**)(char *, uint64_t))(v5 + 8);
  v51(v8, v4);
  v51(v10, v4);
  return v50 & 1;
}

uint64_t specialized static PgQuery_VariableShowStmt.== infix(_:_:)(_QWORD *a1, char *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v20 - v11;
  v13 = *a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1);
  if (v13 || (v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v15 = a3(0);
    v16 = (char *)a1 + *(int *)(v15 + 20);
    v17 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v17(v12, v16, v6);
    v17(v10, &a2[*(int *)(v15 + 20)], v6);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18 = *(void (**)(char *, uint64_t))(v7 + 8);
    v18(v10, v6);
    v18(v12, v6);
  }
  return v14 & 1;
}

uint64_t specialized static PgQuery_AlterCollationStmt.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v19 - v11;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0)
  {
    v13 = a3(0);
    v14 = (char *)a1 + *(int *)(v13 + 20);
    v15 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v15(v12, v14, v6);
    v15(v10, (char *)a2 + *(int *)(v13 + 20), v6);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v7 + 8);
    v17(v10, v6);
    v17(v12, v6);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static PgQuery_AlterExtensionStmt.== infix(_:_:)(_QWORD *a1, char *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v20 - v11;
  v13 = *a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1);
  if (v13 || (v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(a1[2], *((_QWORD *)a2 + 2)) & 1) != 0)
    {
      v15 = a3(0);
      v16 = (char *)a1 + *(int *)(v15 + 24);
      v17 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      v17(v12, v16, v6);
      v17(v10, &a2[*(int *)(v15 + 24)], v6);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      v18 = *(void (**)(char *, uint64_t))(v7 + 8);
      v18(v10, v6);
      v18(v12, v6);
    }
    else
    {
      v14 = 0;
    }
  }
  return v14 & 1;
}

void specialized static PgQuery_Node.OneOf_Node.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t OidList;
  uint64_t v3;
  uint64_t IntList;
  uint64_t v5;
  uint64_t List;
  uint64_t v7;
  uint64_t Null;
  uint64_t v9;
  uint64_t BitString;
  uint64_t v11;
  uint64_t String;
  uint64_t v13;
  uint64_t Float;
  uint64_t v15;
  uint64_t Integer;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t InlineCodeBlock;
  uint64_t v21;
  uint64_t VacuumRelation;
  uint64_t v23;
  uint64_t PartitionCmd;
  uint64_t v25;
  uint64_t PartitionRangeDatum;
  uint64_t v27;
  uint64_t PartitionBoundSpec;
  uint64_t v29;
  uint64_t PartitionSpec;
  uint64_t v31;
  uint64_t PartitionElem;
  uint64_t v33;
  uint64_t TriggerTransition;
  uint64_t v35;
  uint64_t RoleSpec;
  uint64_t v37;
  uint64_t CommonTableExpr;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t InferClause;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t XmlSerialize;
  uint64_t v47;
  uint64_t RowMarkClause;
  uint64_t v49;
  uint64_t LockingClause;
  uint64_t v51;
  uint64_t FunctionParameter;
  uint64_t v53;
  uint64_t TableLikeClause;
  uint64_t v55;
  uint64_t OpClassItem;
  uint64_t v57;
  uint64_t AccessPriv;
  uint64_t v59;
  uint64_t ObjectWithArgs;
  uint64_t v61;
  uint64_t WindowClause;
  uint64_t v63;
  uint64_t GroupingSet;
  uint64_t v65;
  uint64_t SortGroupClause;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t TableSampleClause;
  uint64_t v71;
  uint64_t RangeTblFunction;
  uint64_t v73;
  uint64_t RangeTblEntry;
  uint64_t v75;
  uint64_t DefElem;
  uint64_t v77;
  uint64_t Constraint;
  uint64_t v79;
  uint64_t IndexElem;
  uint64_t v81;
  uint64_t ColumnDef;
  uint64_t v83;
  uint64_t TypeName;
  uint64_t v85;
  uint64_t RangeTableFuncCol;
  uint64_t v87;
  uint64_t RangeTableFunc;
  uint64_t v89;
  uint64_t RangeTableSample;
  uint64_t v91;
  uint64_t RangeFunction;
  uint64_t v93;
  uint64_t RangeSubselect;
  uint64_t v95;
  uint64_t WindowDef;
  uint64_t v97;
  uint64_t SortBy;
  uint64_t v99;
  uint64_t CollateClause;
  uint64_t v101;
  uint64_t TypeCast;
  uint64_t v103;
  uint64_t MultiAssignRef;
  uint64_t v105;
  uint64_t ResTarget;
  uint64_t v107;
  uint64_t A_ArrayExpr;
  uint64_t v109;
  uint64_t A_Indirection;
  uint64_t v111;
  uint64_t A_Indices;
  uint64_t v113;
  uint64_t A_Star;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t A_Const;
  uint64_t v119;
  uint64_t ParamRef;
  uint64_t v121;
  uint64_t ColumnRef;
  uint64_t v123;
  uint64_t A_Expr;
  uint64_t v125;
  uint64_t AlterStatsStmt;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t AlterCollationStmt;
  uint64_t v131;
  uint64_t StatsStmt;
  uint64_t v133;
  uint64_t DropSubscriptionStmt;
  uint64_t v135;
  uint64_t AlterSubscriptionStmt;
  uint64_t v137;
  uint64_t SubscriptionStmt;
  uint64_t v139;
  uint64_t AlterPublicationStmt;
  uint64_t v141;
  uint64_t PublicationStmt;
  uint64_t v143;
  uint64_t AmStmt;
  uint64_t v145;
  uint64_t TransformStmt;
  uint64_t v147;
  uint64_t AlterPolicyStmt;
  uint64_t v149;
  uint64_t PolicyStmt;
  uint64_t v151;
  uint64_t AlterSystemStmt;
  uint64_t v153;
  uint64_t ReplicaIdentityStmt;
  uint64_t v155;
  uint64_t RefreshMatViewStmt;
  uint64_t v157;
  uint64_t AlterEventTrigStmt;
  uint64_t v159;
  uint64_t EventTrigStmt;
  uint64_t v161;
  uint64_t AlterExtensionContentsStmt;
  uint64_t v163;
  uint64_t AlterExtensionStmt;
  uint64_t v165;
  uint64_t ExtensionStmt;
  uint64_t v167;
  uint64_t ImportForeignSchemaStmt;
  uint64_t v169;
  uint64_t ForeignTableStmt;
  uint64_t v171;
  uint64_t SecLabelStmt;
  uint64_t v173;
  uint64_t AlterTableMoveAllStmt;
  uint64_t v175;
  uint64_t AlterTableSpaceOptionsStmt;
  uint64_t v177;
  uint64_t DropUserMappingStmt;
  uint64_t v179;
  uint64_t AlterUserMappingStmt;
  uint64_t v181;
  uint64_t UserMappingStmt;
  uint64_t v183;
  uint64_t AlterForeignServerStmt;
  uint64_t v185;
  uint64_t ForeignServerStmt;
  uint64_t v187;
  uint64_t AlterFdwStmt;
  uint64_t v189;
  uint64_t FdwStmt;
  uint64_t v191;
  uint64_t AlterTSConfigurationStmt;
  uint64_t v193;
  uint64_t AlterTSDictionaryStmt;
  uint64_t v195;
  uint64_t AlterEnumStmt;
  uint64_t v197;
  uint64_t RangeStmt;
  uint64_t v199;
  uint64_t EnumStmt;
  uint64_t v201;
  uint64_t CompositeTypeStmt;
  uint64_t v203;
  uint64_t ReassignOwnedStmt;
  uint64_t v205;
  uint64_t DropOwnedStmt;
  uint64_t v207;
  uint64_t AlterTypeStmt;
  uint64_t v209;
  uint64_t AlterOperatorStmt;
  uint64_t v211;
  uint64_t AlterOwnerStmt;
  uint64_t v213;
  uint64_t AlterObjectSchemaStmt;
  uint64_t v215;
  uint64_t AlterObjectDependsStmt;
  uint64_t v217;
  uint64_t DropTableSpaceStmt;
  uint64_t v219;
  uint64_t TableSpaceStmt;
  uint64_t v221;
  uint64_t DeclareCursorStmt;
  uint64_t v223;
  uint64_t DeallocateStmt;
  uint64_t v225;
  uint64_t ExecuteStmt;
  uint64_t v227;
  uint64_t PrepareStmt;
  uint64_t v229;
  uint64_t AlterOpFamilyStmt;
  uint64_t v231;
  uint64_t OpFamilyStmt;
  uint64_t v233;
  uint64_t OpClassStmt;
  uint64_t v235;
  uint64_t CastStmt;
  uint64_t v237;
  uint64_t ConversionStmt;
  uint64_t v239;
  uint64_t AlterRoleSetStmt;
  uint64_t v241;
  uint64_t AlterDatabaseSetStmt;
  uint64_t v243;
  uint64_t AlterDatabaseStmt;
  uint64_t v245;
  uint64_t SchemaStmt;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t ReindexStmt;
  uint64_t v251;
  uint64_t ConstraintsSetStmt;
  uint64_t v253;
  uint64_t LockStmt;
  uint64_t v255;
  uint64_t DropRoleStmt;
  uint64_t v257;
  uint64_t AlterRoleStmt;
  uint64_t v259;
  uint64_t RoleStmt;
  uint64_t v261;
  uint64_t PLangStmt;
  uint64_t v263;
  uint64_t TrigStmt;
  uint64_t v265;
  uint64_t DiscardStmt;
  uint64_t v267;
  uint64_t VariableShowStmt;
  uint64_t v269;
  uint64_t VariableSetStmt;
  uint64_t v271;
  uint64_t AlterSeqStmt;
  uint64_t v273;
  uint64_t SeqStmt;
  uint64_t v275;
  uint64_t TableAsStmt;
  uint64_t v277;
  uint64_t ExplainStmt;
  uint64_t v279;
  uint64_t VacuumStmt;
  uint64_t v281;
  uint64_t DropdbStmt;
  uint64_t v283;
  uint64_t CreatedbStmt;
  uint64_t v285;
  uint64_t DomainStmt;
  uint64_t v287;
  uint64_t LoadStmt;
  uint64_t v289;
  uint64_t ViewStmt;
  uint64_t v291;
  uint64_t TransactionStmt;
  uint64_t v293;
  uint64_t UnlistenStmt;
  uint64_t v295;
  uint64_t ListenStmt;
  uint64_t v297;
  uint64_t NotifyStmt;
  uint64_t v299;
  uint64_t RuleStmt;
  uint64_t v301;
  uint64_t RenameStmt;
  uint64_t v303;
  uint64_t DoStmt;
  uint64_t v305;
  uint64_t AlterFunctionStmt;
  uint64_t v307;
  uint64_t FunctionStmt;
  uint64_t v309;
  uint64_t IndexStmt;
  uint64_t v311;
  uint64_t Stmt;
  uint64_t v313;
  uint64_t CommentStmt;
  uint64_t v315;
  uint64_t TruncateStmt;
  uint64_t v317;
  uint64_t DropStmt;
  uint64_t v319;
  uint64_t DefineStmt;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t CopyStmt;
  uint64_t v325;
  uint64_t ClusterStmt;
  uint64_t v327;
  uint64_t ClosePortalStmt;
  uint64_t v329;
  uint64_t AlterDefaultPrivilegesStmt;
  uint64_t v331;
  uint64_t GrantRoleStmt;
  uint64_t v333;
  uint64_t GrantStmt;
  uint64_t v335;
  uint64_t SetOperationStmt;
  uint64_t v337;
  uint64_t AlterDomainStmt;
  uint64_t v339;
  uint64_t AlterTableCmd;
  uint64_t v341;
  uint64_t AlterTableStmt;
  uint64_t v343;
  uint64_t SelectStmt;
  uint64_t v345;
  uint64_t UpdateStmt;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t InsertStmt;
  uint64_t v351;
  uint64_t Query;
  uint64_t v353;
  uint64_t RawStmt;
  uint64_t v355;
  uint64_t IntoClause;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t JoinExpr;
  uint64_t v363;
  uint64_t RangeTblRef;
  uint64_t v365;
  uint64_t TargetEntry;
  uint64_t v367;
  uint64_t InferenceElem;
  uint64_t v369;
  uint64_t NextValueExpr;
  uint64_t v371;
  uint64_t CurrentOfExpr;
  uint64_t v373;
  uint64_t SetToDefault;
  uint64_t v375;
  uint64_t CoerceToDomainValue;
  uint64_t v377;
  uint64_t CoerceToDomain;
  uint64_t v379;
  uint64_t BooleanTest;
  uint64_t v381;
  uint64_t NullTest;
  uint64_t v383;
  uint64_t XmlExpr;
  uint64_t v385;
  uint64_t SQLValueFunction;
  uint64_t v387;
  uint64_t MinMaxExpr;
  uint64_t v389;
  uint64_t CoalesceExpr;
  uint64_t v391;
  uint64_t RowCompareExpr;
  uint64_t v393;
  uint64_t RowExpr;
  uint64_t v395;
  uint64_t ArrayExpr;
  uint64_t v397;
  uint64_t CaseTestExpr;
  uint64_t v399;
  uint64_t CaseWhen;
  uint64_t v401;
  uint64_t CaseExpr;
  uint64_t v403;
  uint64_t CollateExpr;
  uint64_t v405;
  uint64_t ConvertRowtypeExpr;
  uint64_t v407;
  uint64_t ArrayCoerceExpr;
  uint64_t v409;
  uint64_t CoerceViaIO;
  uint64_t v411;
  uint64_t RelabelType;
  uint64_t v413;
  uint64_t FieldStore;
  uint64_t v415;
  uint64_t FieldSelect;
  uint64_t v417;
  uint64_t AlternativeSubPlan;
  uint64_t v419;
  uint64_t SubPlan;
  uint64_t v421;
  uint64_t SubLink;
  uint64_t v423;
  uint64_t BoolExpr;
  uint64_t v425;
  uint64_t ScalarArrayOpExpr;
  uint64_t v427;
  uint64_t NullIfExpr;
  uint64_t v429;
  uint64_t DistinctExpr;
  uint64_t v431;
  uint64_t OpExpr;
  uint64_t v433;
  uint64_t NamedArgExpr;
  uint64_t v435;
  uint64_t FuncExpr;
  uint64_t v437;
  uint64_t SubscriptingRef;
  uint64_t v439;
  uint64_t WindowFunc;
  uint64_t v441;
  uint64_t GroupingFunc;
  uint64_t v443;
  uint64_t Aggref;
  uint64_t v445;
  uint64_t Param;
  uint64_t v447;
  uint64_t Var;
  uint64_t v449;
  uint64_t Expr;
  uint64_t v451;
  uint64_t TableFunc;
  uint64_t v453;
  uint64_t RangeVar;
  uint64_t v455;
  uint64_t Alias;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  char *v908;
  uint64_t v909;
  char *v910;
  _QWORD v911[448];
  uint64_t v912;
  uint64_t v913;
  char *v914;

  v913 = a1;
  v914 = (char *)a2;
  OidList = type metadata accessor for PgQuery_OidList(0);
  MEMORY[0x1E0C80A78](OidList);
  v911[227] = (char *)v911 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  IntList = type metadata accessor for PgQuery_IntList(0);
  MEMORY[0x1E0C80A78](IntList);
  v911[226] = (char *)v911 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  List = type metadata accessor for PgQuery_List(0);
  MEMORY[0x1E0C80A78](List);
  v911[224] = (char *)v911 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Null = type metadata accessor for PgQuery_Null(0);
  MEMORY[0x1E0C80A78](Null);
  v911[225] = (char *)v911 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  BitString = type metadata accessor for PgQuery_BitString(0);
  MEMORY[0x1E0C80A78](BitString);
  v911[223] = (char *)v911 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  String = type metadata accessor for PgQuery_String(0);
  MEMORY[0x1E0C80A78](String);
  v911[222] = (char *)v911 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Float = type metadata accessor for PgQuery_Float(0);
  MEMORY[0x1E0C80A78](Float);
  v911[221] = (char *)v911 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  Integer = type metadata accessor for PgQuery_Integer(0);
  MEMORY[0x1E0C80A78](Integer);
  v911[220] = (char *)v911 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for PgQuery_CallContext(0);
  MEMORY[0x1E0C80A78](v18);
  v911[219] = (char *)v911 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  InlineCodeBlock = type metadata accessor for PgQuery_InlineCodeBlock(0);
  MEMORY[0x1E0C80A78](InlineCodeBlock);
  v911[218] = (char *)v911 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  VacuumRelation = type metadata accessor for PgQuery_VacuumRelation(0);
  MEMORY[0x1E0C80A78](VacuumRelation);
  v911[217] = (char *)v911 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  PartitionCmd = type metadata accessor for PgQuery_PartitionCmd(0);
  MEMORY[0x1E0C80A78](PartitionCmd);
  v911[216] = (char *)v911 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  PartitionRangeDatum = type metadata accessor for PgQuery_PartitionRangeDatum(0);
  MEMORY[0x1E0C80A78](PartitionRangeDatum);
  v911[215] = (char *)v911 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  MEMORY[0x1E0C80A78](PartitionBoundSpec);
  v911[214] = (char *)v911 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  PartitionSpec = type metadata accessor for PgQuery_PartitionSpec(0);
  MEMORY[0x1E0C80A78](PartitionSpec);
  v911[213] = (char *)v911 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  PartitionElem = type metadata accessor for PgQuery_PartitionElem(0);
  MEMORY[0x1E0C80A78](PartitionElem);
  v911[212] = (char *)v911 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  TriggerTransition = type metadata accessor for PgQuery_TriggerTransition(0);
  MEMORY[0x1E0C80A78](TriggerTransition);
  v911[211] = (char *)v911 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  MEMORY[0x1E0C80A78](RoleSpec);
  v911[210] = (char *)v911 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  CommonTableExpr = type metadata accessor for PgQuery_CommonTableExpr(0);
  MEMORY[0x1E0C80A78](CommonTableExpr);
  v911[209] = (char *)v911 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for PgQuery_OnConflictClause(0);
  MEMORY[0x1E0C80A78](v40);
  v911[208] = (char *)v911 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  InferClause = type metadata accessor for PgQuery_InferClause(0);
  MEMORY[0x1E0C80A78](InferClause);
  v911[207] = (char *)v911 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for PgQuery_WithClause(0);
  MEMORY[0x1E0C80A78](v44);
  v911[206] = (char *)v911 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  XmlSerialize = type metadata accessor for PgQuery_XmlSerialize(0);
  MEMORY[0x1E0C80A78](XmlSerialize);
  v911[205] = (char *)v911 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  RowMarkClause = type metadata accessor for PgQuery_RowMarkClause(0);
  MEMORY[0x1E0C80A78](RowMarkClause);
  v911[204] = (char *)v911 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  LockingClause = type metadata accessor for PgQuery_LockingClause(0);
  MEMORY[0x1E0C80A78](LockingClause);
  v911[203] = (char *)v911 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  FunctionParameter = type metadata accessor for PgQuery_FunctionParameter(0);
  MEMORY[0x1E0C80A78](FunctionParameter);
  v911[202] = (char *)v911 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  TableLikeClause = type metadata accessor for PgQuery_TableLikeClause(0);
  MEMORY[0x1E0C80A78](TableLikeClause);
  v911[201] = (char *)v911 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  OpClassItem = type metadata accessor for PgQuery_CreateOpClassItem(0);
  MEMORY[0x1E0C80A78](OpClassItem);
  v911[200] = (char *)v911 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  AccessPriv = type metadata accessor for PgQuery_AccessPriv(0);
  MEMORY[0x1E0C80A78](AccessPriv);
  v911[199] = (char *)v911 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  MEMORY[0x1E0C80A78](ObjectWithArgs);
  v911[198] = (char *)v911 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  WindowClause = type metadata accessor for PgQuery_WindowClause(0);
  MEMORY[0x1E0C80A78](WindowClause);
  v911[197] = (char *)v911 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  GroupingSet = type metadata accessor for PgQuery_GroupingSet(0);
  MEMORY[0x1E0C80A78](GroupingSet);
  v911[196] = (char *)v911 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  SortGroupClause = type metadata accessor for PgQuery_SortGroupClause(0);
  MEMORY[0x1E0C80A78](SortGroupClause);
  v911[195] = (char *)v911 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for PgQuery_WithCheckOption(0);
  MEMORY[0x1E0C80A78](v68);
  v911[194] = (char *)v911 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  TableSampleClause = type metadata accessor for PgQuery_TableSampleClause(0);
  MEMORY[0x1E0C80A78](TableSampleClause);
  v911[193] = (char *)v911 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeTblFunction = type metadata accessor for PgQuery_RangeTblFunction(0);
  MEMORY[0x1E0C80A78](RangeTblFunction);
  v911[192] = (char *)v911 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeTblEntry = type metadata accessor for PgQuery_RangeTblEntry(0);
  MEMORY[0x1E0C80A78](RangeTblEntry);
  v911[191] = (char *)v911 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  DefElem = type metadata accessor for PgQuery_DefElem(0);
  MEMORY[0x1E0C80A78](DefElem);
  v911[190] = (char *)v911 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  Constraint = type metadata accessor for PgQuery_Constraint(0);
  MEMORY[0x1E0C80A78](Constraint);
  v911[189] = (char *)v911 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  IndexElem = type metadata accessor for PgQuery_IndexElem(0);
  MEMORY[0x1E0C80A78](IndexElem);
  v911[188] = (char *)v911 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  ColumnDef = type metadata accessor for PgQuery_ColumnDef(0);
  MEMORY[0x1E0C80A78](ColumnDef);
  v911[187] = (char *)v911 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  MEMORY[0x1E0C80A78](TypeName);
  v911[186] = (char *)v911 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeTableFuncCol = type metadata accessor for PgQuery_RangeTableFuncCol(0);
  MEMORY[0x1E0C80A78](RangeTableFuncCol);
  v911[185] = (char *)v911 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeTableFunc = type metadata accessor for PgQuery_RangeTableFunc(0);
  MEMORY[0x1E0C80A78](RangeTableFunc);
  v911[184] = (char *)v911 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeTableSample = type metadata accessor for PgQuery_RangeTableSample(0);
  MEMORY[0x1E0C80A78](RangeTableSample);
  v911[183] = (char *)v911 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeFunction = type metadata accessor for PgQuery_RangeFunction(0);
  MEMORY[0x1E0C80A78](RangeFunction);
  v911[182] = (char *)v911 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeSubselect = type metadata accessor for PgQuery_RangeSubselect(0);
  MEMORY[0x1E0C80A78](RangeSubselect);
  v911[181] = (char *)v911 - ((v95 + 15) & 0xFFFFFFFFFFFFFFF0);
  WindowDef = type metadata accessor for PgQuery_WindowDef(0);
  MEMORY[0x1E0C80A78](WindowDef);
  v911[180] = (char *)v911 - ((v97 + 15) & 0xFFFFFFFFFFFFFFF0);
  SortBy = type metadata accessor for PgQuery_SortBy(0);
  MEMORY[0x1E0C80A78](SortBy);
  v911[179] = (char *)v911 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0);
  CollateClause = type metadata accessor for PgQuery_CollateClause(0);
  MEMORY[0x1E0C80A78](CollateClause);
  v911[178] = (char *)v911 - ((v101 + 15) & 0xFFFFFFFFFFFFFFF0);
  TypeCast = type metadata accessor for PgQuery_TypeCast(0);
  MEMORY[0x1E0C80A78](TypeCast);
  v911[177] = (char *)v911 - ((v103 + 15) & 0xFFFFFFFFFFFFFFF0);
  MultiAssignRef = type metadata accessor for PgQuery_MultiAssignRef(0);
  MEMORY[0x1E0C80A78](MultiAssignRef);
  v911[176] = (char *)v911 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0);
  ResTarget = type metadata accessor for PgQuery_ResTarget(0);
  MEMORY[0x1E0C80A78](ResTarget);
  v911[175] = (char *)v911 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0);
  A_ArrayExpr = type metadata accessor for PgQuery_A_ArrayExpr(0);
  MEMORY[0x1E0C80A78](A_ArrayExpr);
  v911[174] = (char *)v911 - ((v109 + 15) & 0xFFFFFFFFFFFFFFF0);
  A_Indirection = type metadata accessor for PgQuery_A_Indirection(0);
  MEMORY[0x1E0C80A78](A_Indirection);
  v911[173] = (char *)v911 - ((v111 + 15) & 0xFFFFFFFFFFFFFFF0);
  A_Indices = type metadata accessor for PgQuery_A_Indices(0);
  MEMORY[0x1E0C80A78](A_Indices);
  v911[172] = (char *)v911 - ((v113 + 15) & 0xFFFFFFFFFFFFFFF0);
  A_Star = type metadata accessor for PgQuery_A_Star(0);
  MEMORY[0x1E0C80A78](A_Star);
  v911[171] = (char *)v911 - ((v115 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = type metadata accessor for PgQuery_FuncCall(0);
  MEMORY[0x1E0C80A78](v116);
  v911[170] = (char *)v911 - ((v117 + 15) & 0xFFFFFFFFFFFFFFF0);
  A_Const = type metadata accessor for PgQuery_A_Const(0);
  MEMORY[0x1E0C80A78](A_Const);
  v911[169] = (char *)v911 - ((v119 + 15) & 0xFFFFFFFFFFFFFFF0);
  ParamRef = type metadata accessor for PgQuery_ParamRef(0);
  MEMORY[0x1E0C80A78](ParamRef);
  v911[168] = (char *)v911 - ((v121 + 15) & 0xFFFFFFFFFFFFFFF0);
  ColumnRef = type metadata accessor for PgQuery_ColumnRef(0);
  MEMORY[0x1E0C80A78](ColumnRef);
  v911[167] = (char *)v911 - ((v123 + 15) & 0xFFFFFFFFFFFFFFF0);
  A_Expr = type metadata accessor for PgQuery_A_Expr(0);
  MEMORY[0x1E0C80A78](A_Expr);
  v911[166] = (char *)v911 - ((v125 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterStatsStmt = type metadata accessor for PgQuery_AlterStatsStmt(0);
  MEMORY[0x1E0C80A78](AlterStatsStmt);
  v911[165] = (char *)v911 - ((v127 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = type metadata accessor for PgQuery_CallStmt(0);
  MEMORY[0x1E0C80A78](v128);
  v911[164] = (char *)v911 - ((v129 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterCollationStmt = type metadata accessor for PgQuery_AlterCollationStmt(0);
  MEMORY[0x1E0C80A78](AlterCollationStmt);
  v911[163] = (char *)v911 - ((v131 + 15) & 0xFFFFFFFFFFFFFFF0);
  StatsStmt = type metadata accessor for PgQuery_CreateStatsStmt(0);
  MEMORY[0x1E0C80A78](StatsStmt);
  v911[162] = (char *)v911 - ((v133 + 15) & 0xFFFFFFFFFFFFFFF0);
  DropSubscriptionStmt = type metadata accessor for PgQuery_DropSubscriptionStmt(0);
  MEMORY[0x1E0C80A78](DropSubscriptionStmt);
  v911[161] = (char *)v911 - ((v135 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterSubscriptionStmt = type metadata accessor for PgQuery_AlterSubscriptionStmt(0);
  MEMORY[0x1E0C80A78](AlterSubscriptionStmt);
  v911[160] = (char *)v911 - ((v137 + 15) & 0xFFFFFFFFFFFFFFF0);
  SubscriptionStmt = type metadata accessor for PgQuery_CreateSubscriptionStmt(0);
  MEMORY[0x1E0C80A78](SubscriptionStmt);
  v911[159] = (char *)v911 - ((v139 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterPublicationStmt = type metadata accessor for PgQuery_AlterPublicationStmt(0);
  MEMORY[0x1E0C80A78](AlterPublicationStmt);
  v911[158] = (char *)v911 - ((v141 + 15) & 0xFFFFFFFFFFFFFFF0);
  PublicationStmt = type metadata accessor for PgQuery_CreatePublicationStmt(0);
  MEMORY[0x1E0C80A78](PublicationStmt);
  v911[157] = (char *)v911 - ((v143 + 15) & 0xFFFFFFFFFFFFFFF0);
  AmStmt = type metadata accessor for PgQuery_CreateAmStmt(0);
  MEMORY[0x1E0C80A78](AmStmt);
  v911[156] = (char *)v911 - ((v145 + 15) & 0xFFFFFFFFFFFFFFF0);
  TransformStmt = type metadata accessor for PgQuery_CreateTransformStmt(0);
  MEMORY[0x1E0C80A78](TransformStmt);
  v911[155] = (char *)v911 - ((v147 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterPolicyStmt = type metadata accessor for PgQuery_AlterPolicyStmt(0);
  MEMORY[0x1E0C80A78](AlterPolicyStmt);
  v911[154] = (char *)v911 - ((v149 + 15) & 0xFFFFFFFFFFFFFFF0);
  PolicyStmt = type metadata accessor for PgQuery_CreatePolicyStmt(0);
  MEMORY[0x1E0C80A78](PolicyStmt);
  v911[153] = (char *)v911 - ((v151 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterSystemStmt = type metadata accessor for PgQuery_AlterSystemStmt(0);
  MEMORY[0x1E0C80A78](AlterSystemStmt);
  v911[152] = (char *)v911 - ((v153 + 15) & 0xFFFFFFFFFFFFFFF0);
  ReplicaIdentityStmt = type metadata accessor for PgQuery_ReplicaIdentityStmt(0);
  MEMORY[0x1E0C80A78](ReplicaIdentityStmt);
  v911[151] = (char *)v911 - ((v155 + 15) & 0xFFFFFFFFFFFFFFF0);
  RefreshMatViewStmt = type metadata accessor for PgQuery_RefreshMatViewStmt(0);
  MEMORY[0x1E0C80A78](RefreshMatViewStmt);
  v911[150] = (char *)v911 - ((v157 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterEventTrigStmt = type metadata accessor for PgQuery_AlterEventTrigStmt(0);
  MEMORY[0x1E0C80A78](AlterEventTrigStmt);
  v911[149] = (char *)v911 - ((v159 + 15) & 0xFFFFFFFFFFFFFFF0);
  EventTrigStmt = type metadata accessor for PgQuery_CreateEventTrigStmt(0);
  MEMORY[0x1E0C80A78](EventTrigStmt);
  v911[148] = (char *)v911 - ((v161 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterExtensionContentsStmt = type metadata accessor for PgQuery_AlterExtensionContentsStmt(0);
  MEMORY[0x1E0C80A78](AlterExtensionContentsStmt);
  v911[147] = (char *)v911 - ((v163 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterExtensionStmt = type metadata accessor for PgQuery_AlterExtensionStmt(0);
  MEMORY[0x1E0C80A78](AlterExtensionStmt);
  v911[146] = (char *)v911 - ((v165 + 15) & 0xFFFFFFFFFFFFFFF0);
  ExtensionStmt = type metadata accessor for PgQuery_CreateExtensionStmt(0);
  MEMORY[0x1E0C80A78](ExtensionStmt);
  v911[145] = (char *)v911 - ((v167 + 15) & 0xFFFFFFFFFFFFFFF0);
  ImportForeignSchemaStmt = type metadata accessor for PgQuery_ImportForeignSchemaStmt(0);
  MEMORY[0x1E0C80A78](ImportForeignSchemaStmt);
  v911[144] = (char *)v911 - ((v169 + 15) & 0xFFFFFFFFFFFFFFF0);
  ForeignTableStmt = type metadata accessor for PgQuery_CreateForeignTableStmt(0);
  MEMORY[0x1E0C80A78](ForeignTableStmt);
  v911[143] = (char *)v911 - ((v171 + 15) & 0xFFFFFFFFFFFFFFF0);
  SecLabelStmt = type metadata accessor for PgQuery_SecLabelStmt(0);
  MEMORY[0x1E0C80A78](SecLabelStmt);
  v911[142] = (char *)v911 - ((v173 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterTableMoveAllStmt = type metadata accessor for PgQuery_AlterTableMoveAllStmt(0);
  MEMORY[0x1E0C80A78](AlterTableMoveAllStmt);
  v911[141] = (char *)v911 - ((v175 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterTableSpaceOptionsStmt = type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt(0);
  MEMORY[0x1E0C80A78](AlterTableSpaceOptionsStmt);
  v911[140] = (char *)v911 - ((v177 + 15) & 0xFFFFFFFFFFFFFFF0);
  DropUserMappingStmt = type metadata accessor for PgQuery_DropUserMappingStmt(0);
  MEMORY[0x1E0C80A78](DropUserMappingStmt);
  v911[139] = (char *)v911 - ((v179 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterUserMappingStmt = type metadata accessor for PgQuery_AlterUserMappingStmt(0);
  MEMORY[0x1E0C80A78](AlterUserMappingStmt);
  v911[138] = (char *)v911 - ((v181 + 15) & 0xFFFFFFFFFFFFFFF0);
  UserMappingStmt = type metadata accessor for PgQuery_CreateUserMappingStmt(0);
  MEMORY[0x1E0C80A78](UserMappingStmt);
  v911[137] = (char *)v911 - ((v183 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterForeignServerStmt = type metadata accessor for PgQuery_AlterForeignServerStmt(0);
  MEMORY[0x1E0C80A78](AlterForeignServerStmt);
  v911[136] = (char *)v911 - ((v185 + 15) & 0xFFFFFFFFFFFFFFF0);
  ForeignServerStmt = type metadata accessor for PgQuery_CreateForeignServerStmt(0);
  MEMORY[0x1E0C80A78](ForeignServerStmt);
  v911[135] = (char *)v911 - ((v187 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterFdwStmt = type metadata accessor for PgQuery_AlterFdwStmt(0);
  MEMORY[0x1E0C80A78](AlterFdwStmt);
  v911[134] = (char *)v911 - ((v189 + 15) & 0xFFFFFFFFFFFFFFF0);
  FdwStmt = type metadata accessor for PgQuery_CreateFdwStmt(0);
  MEMORY[0x1E0C80A78](FdwStmt);
  v911[133] = (char *)v911 - ((v191 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterTSConfigurationStmt = type metadata accessor for PgQuery_AlterTSConfigurationStmt(0);
  MEMORY[0x1E0C80A78](AlterTSConfigurationStmt);
  v911[132] = (char *)v911 - ((v193 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterTSDictionaryStmt = type metadata accessor for PgQuery_AlterTSDictionaryStmt(0);
  MEMORY[0x1E0C80A78](AlterTSDictionaryStmt);
  v911[131] = (char *)v911 - ((v195 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterEnumStmt = type metadata accessor for PgQuery_AlterEnumStmt(0);
  MEMORY[0x1E0C80A78](AlterEnumStmt);
  v911[130] = (char *)v911 - ((v197 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeStmt = type metadata accessor for PgQuery_CreateRangeStmt(0);
  MEMORY[0x1E0C80A78](RangeStmt);
  v911[129] = (char *)v911 - ((v199 + 15) & 0xFFFFFFFFFFFFFFF0);
  EnumStmt = type metadata accessor for PgQuery_CreateEnumStmt(0);
  MEMORY[0x1E0C80A78](EnumStmt);
  v911[128] = (char *)v911 - ((v201 + 15) & 0xFFFFFFFFFFFFFFF0);
  CompositeTypeStmt = type metadata accessor for PgQuery_CompositeTypeStmt(0);
  MEMORY[0x1E0C80A78](CompositeTypeStmt);
  v911[127] = (char *)v911 - ((v203 + 15) & 0xFFFFFFFFFFFFFFF0);
  ReassignOwnedStmt = type metadata accessor for PgQuery_ReassignOwnedStmt(0);
  MEMORY[0x1E0C80A78](ReassignOwnedStmt);
  v911[126] = (char *)v911 - ((v205 + 15) & 0xFFFFFFFFFFFFFFF0);
  DropOwnedStmt = type metadata accessor for PgQuery_DropOwnedStmt(0);
  MEMORY[0x1E0C80A78](DropOwnedStmt);
  v911[125] = (char *)v911 - ((v207 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterTypeStmt = type metadata accessor for PgQuery_AlterTypeStmt(0);
  MEMORY[0x1E0C80A78](AlterTypeStmt);
  v911[124] = (char *)v911 - ((v209 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterOperatorStmt = type metadata accessor for PgQuery_AlterOperatorStmt(0);
  MEMORY[0x1E0C80A78](AlterOperatorStmt);
  v911[123] = (char *)v911 - ((v211 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterOwnerStmt = type metadata accessor for PgQuery_AlterOwnerStmt(0);
  MEMORY[0x1E0C80A78](AlterOwnerStmt);
  v911[122] = (char *)v911 - ((v213 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterObjectSchemaStmt = type metadata accessor for PgQuery_AlterObjectSchemaStmt(0);
  MEMORY[0x1E0C80A78](AlterObjectSchemaStmt);
  v911[121] = (char *)v911 - ((v215 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterObjectDependsStmt = type metadata accessor for PgQuery_AlterObjectDependsStmt(0);
  MEMORY[0x1E0C80A78](AlterObjectDependsStmt);
  v911[120] = (char *)v911 - ((v217 + 15) & 0xFFFFFFFFFFFFFFF0);
  DropTableSpaceStmt = type metadata accessor for PgQuery_DropTableSpaceStmt(0);
  MEMORY[0x1E0C80A78](DropTableSpaceStmt);
  v911[119] = (char *)v911 - ((v219 + 15) & 0xFFFFFFFFFFFFFFF0);
  TableSpaceStmt = type metadata accessor for PgQuery_CreateTableSpaceStmt(0);
  MEMORY[0x1E0C80A78](TableSpaceStmt);
  v911[118] = (char *)v911 - ((v221 + 15) & 0xFFFFFFFFFFFFFFF0);
  DeclareCursorStmt = type metadata accessor for PgQuery_DeclareCursorStmt(0);
  MEMORY[0x1E0C80A78](DeclareCursorStmt);
  v911[117] = (char *)v911 - ((v223 + 15) & 0xFFFFFFFFFFFFFFF0);
  DeallocateStmt = type metadata accessor for PgQuery_DeallocateStmt(0);
  MEMORY[0x1E0C80A78](DeallocateStmt);
  v911[116] = (char *)v911 - ((v225 + 15) & 0xFFFFFFFFFFFFFFF0);
  ExecuteStmt = type metadata accessor for PgQuery_ExecuteStmt(0);
  MEMORY[0x1E0C80A78](ExecuteStmt);
  v911[115] = (char *)v911 - ((v227 + 15) & 0xFFFFFFFFFFFFFFF0);
  PrepareStmt = type metadata accessor for PgQuery_PrepareStmt(0);
  MEMORY[0x1E0C80A78](PrepareStmt);
  v911[114] = (char *)v911 - ((v229 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterOpFamilyStmt = type metadata accessor for PgQuery_AlterOpFamilyStmt(0);
  MEMORY[0x1E0C80A78](AlterOpFamilyStmt);
  v911[113] = (char *)v911 - ((v231 + 15) & 0xFFFFFFFFFFFFFFF0);
  OpFamilyStmt = type metadata accessor for PgQuery_CreateOpFamilyStmt(0);
  MEMORY[0x1E0C80A78](OpFamilyStmt);
  v911[112] = (char *)v911 - ((v233 + 15) & 0xFFFFFFFFFFFFFFF0);
  OpClassStmt = type metadata accessor for PgQuery_CreateOpClassStmt(0);
  MEMORY[0x1E0C80A78](OpClassStmt);
  v911[111] = (char *)v911 - ((v235 + 15) & 0xFFFFFFFFFFFFFFF0);
  CastStmt = type metadata accessor for PgQuery_CreateCastStmt(0);
  MEMORY[0x1E0C80A78](CastStmt);
  v911[110] = (char *)v911 - ((v237 + 15) & 0xFFFFFFFFFFFFFFF0);
  ConversionStmt = type metadata accessor for PgQuery_CreateConversionStmt(0);
  MEMORY[0x1E0C80A78](ConversionStmt);
  v911[109] = (char *)v911 - ((v239 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterRoleSetStmt = type metadata accessor for PgQuery_AlterRoleSetStmt(0);
  MEMORY[0x1E0C80A78](AlterRoleSetStmt);
  v911[108] = (char *)v911 - ((v241 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterDatabaseSetStmt = type metadata accessor for PgQuery_AlterDatabaseSetStmt(0);
  MEMORY[0x1E0C80A78](AlterDatabaseSetStmt);
  v911[107] = (char *)v911 - ((v243 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterDatabaseStmt = type metadata accessor for PgQuery_AlterDatabaseStmt(0);
  MEMORY[0x1E0C80A78](AlterDatabaseStmt);
  v911[106] = (char *)v911 - ((v245 + 15) & 0xFFFFFFFFFFFFFFF0);
  SchemaStmt = type metadata accessor for PgQuery_CreateSchemaStmt(0);
  MEMORY[0x1E0C80A78](SchemaStmt);
  v911[104] = (char *)v911 - ((v247 + 15) & 0xFFFFFFFFFFFFFFF0);
  v248 = type metadata accessor for PgQuery_CheckPointStmt(0);
  MEMORY[0x1E0C80A78](v248);
  v911[105] = (char *)v911 - ((v249 + 15) & 0xFFFFFFFFFFFFFFF0);
  ReindexStmt = type metadata accessor for PgQuery_ReindexStmt(0);
  MEMORY[0x1E0C80A78](ReindexStmt);
  v911[103] = (char *)v911 - ((v251 + 15) & 0xFFFFFFFFFFFFFFF0);
  ConstraintsSetStmt = type metadata accessor for PgQuery_ConstraintsSetStmt(0);
  MEMORY[0x1E0C80A78](ConstraintsSetStmt);
  v911[102] = (char *)v911 - ((v253 + 15) & 0xFFFFFFFFFFFFFFF0);
  LockStmt = type metadata accessor for PgQuery_LockStmt(0);
  MEMORY[0x1E0C80A78](LockStmt);
  v911[101] = (char *)v911 - ((v255 + 15) & 0xFFFFFFFFFFFFFFF0);
  DropRoleStmt = type metadata accessor for PgQuery_DropRoleStmt(0);
  MEMORY[0x1E0C80A78](DropRoleStmt);
  v911[100] = (char *)v911 - ((v257 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterRoleStmt = type metadata accessor for PgQuery_AlterRoleStmt(0);
  MEMORY[0x1E0C80A78](AlterRoleStmt);
  v911[99] = (char *)v911 - ((v259 + 15) & 0xFFFFFFFFFFFFFFF0);
  RoleStmt = type metadata accessor for PgQuery_CreateRoleStmt(0);
  MEMORY[0x1E0C80A78](RoleStmt);
  v911[98] = (char *)v911 - ((v261 + 15) & 0xFFFFFFFFFFFFFFF0);
  PLangStmt = type metadata accessor for PgQuery_CreatePLangStmt(0);
  MEMORY[0x1E0C80A78](PLangStmt);
  v911[97] = (char *)v911 - ((v263 + 15) & 0xFFFFFFFFFFFFFFF0);
  TrigStmt = type metadata accessor for PgQuery_CreateTrigStmt(0);
  MEMORY[0x1E0C80A78](TrigStmt);
  v911[96] = (char *)v911 - ((v265 + 15) & 0xFFFFFFFFFFFFFFF0);
  DiscardStmt = type metadata accessor for PgQuery_DiscardStmt(0);
  MEMORY[0x1E0C80A78](DiscardStmt);
  v911[95] = (char *)v911 - ((v267 + 15) & 0xFFFFFFFFFFFFFFF0);
  VariableShowStmt = type metadata accessor for PgQuery_VariableShowStmt(0);
  MEMORY[0x1E0C80A78](VariableShowStmt);
  v911[94] = (char *)v911 - ((v269 + 15) & 0xFFFFFFFFFFFFFFF0);
  VariableSetStmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  MEMORY[0x1E0C80A78](VariableSetStmt);
  v911[93] = (char *)v911 - ((v271 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterSeqStmt = type metadata accessor for PgQuery_AlterSeqStmt(0);
  MEMORY[0x1E0C80A78](AlterSeqStmt);
  v911[92] = (char *)v911 - ((v273 + 15) & 0xFFFFFFFFFFFFFFF0);
  SeqStmt = type metadata accessor for PgQuery_CreateSeqStmt(0);
  MEMORY[0x1E0C80A78](SeqStmt);
  v911[91] = (char *)v911 - ((v275 + 15) & 0xFFFFFFFFFFFFFFF0);
  TableAsStmt = type metadata accessor for PgQuery_CreateTableAsStmt(0);
  MEMORY[0x1E0C80A78](TableAsStmt);
  v911[90] = (char *)v911 - ((v277 + 15) & 0xFFFFFFFFFFFFFFF0);
  ExplainStmt = type metadata accessor for PgQuery_ExplainStmt(0);
  MEMORY[0x1E0C80A78](ExplainStmt);
  v911[89] = (char *)v911 - ((v279 + 15) & 0xFFFFFFFFFFFFFFF0);
  VacuumStmt = type metadata accessor for PgQuery_VacuumStmt(0);
  MEMORY[0x1E0C80A78](VacuumStmt);
  v911[88] = (char *)v911 - ((v281 + 15) & 0xFFFFFFFFFFFFFFF0);
  DropdbStmt = type metadata accessor for PgQuery_DropdbStmt(0);
  MEMORY[0x1E0C80A78](DropdbStmt);
  v911[87] = (char *)v911 - ((v283 + 15) & 0xFFFFFFFFFFFFFFF0);
  CreatedbStmt = type metadata accessor for PgQuery_CreatedbStmt(0);
  MEMORY[0x1E0C80A78](CreatedbStmt);
  v911[86] = (char *)v911 - ((v285 + 15) & 0xFFFFFFFFFFFFFFF0);
  DomainStmt = type metadata accessor for PgQuery_CreateDomainStmt(0);
  MEMORY[0x1E0C80A78](DomainStmt);
  v911[85] = (char *)v911 - ((v287 + 15) & 0xFFFFFFFFFFFFFFF0);
  LoadStmt = type metadata accessor for PgQuery_LoadStmt(0);
  MEMORY[0x1E0C80A78](LoadStmt);
  v911[84] = (char *)v911 - ((v289 + 15) & 0xFFFFFFFFFFFFFFF0);
  ViewStmt = type metadata accessor for PgQuery_ViewStmt(0);
  MEMORY[0x1E0C80A78](ViewStmt);
  v911[83] = (char *)v911 - ((v291 + 15) & 0xFFFFFFFFFFFFFFF0);
  TransactionStmt = type metadata accessor for PgQuery_TransactionStmt(0);
  MEMORY[0x1E0C80A78](TransactionStmt);
  v911[82] = (char *)v911 - ((v293 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnlistenStmt = type metadata accessor for PgQuery_UnlistenStmt(0);
  MEMORY[0x1E0C80A78](UnlistenStmt);
  v911[81] = (char *)v911 - ((v295 + 15) & 0xFFFFFFFFFFFFFFF0);
  ListenStmt = type metadata accessor for PgQuery_ListenStmt(0);
  MEMORY[0x1E0C80A78](ListenStmt);
  v911[80] = (char *)v911 - ((v297 + 15) & 0xFFFFFFFFFFFFFFF0);
  NotifyStmt = type metadata accessor for PgQuery_NotifyStmt(0);
  MEMORY[0x1E0C80A78](NotifyStmt);
  v911[79] = (char *)v911 - ((v299 + 15) & 0xFFFFFFFFFFFFFFF0);
  RuleStmt = type metadata accessor for PgQuery_RuleStmt(0);
  MEMORY[0x1E0C80A78](RuleStmt);
  v911[78] = (char *)v911 - ((v301 + 15) & 0xFFFFFFFFFFFFFFF0);
  RenameStmt = type metadata accessor for PgQuery_RenameStmt(0);
  MEMORY[0x1E0C80A78](RenameStmt);
  v911[77] = (char *)v911 - ((v303 + 15) & 0xFFFFFFFFFFFFFFF0);
  DoStmt = type metadata accessor for PgQuery_DoStmt(0);
  MEMORY[0x1E0C80A78](DoStmt);
  v911[76] = (char *)v911 - ((v305 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterFunctionStmt = type metadata accessor for PgQuery_AlterFunctionStmt(0);
  MEMORY[0x1E0C80A78](AlterFunctionStmt);
  v911[75] = (char *)v911 - ((v307 + 15) & 0xFFFFFFFFFFFFFFF0);
  FunctionStmt = type metadata accessor for PgQuery_CreateFunctionStmt(0);
  MEMORY[0x1E0C80A78](FunctionStmt);
  v911[74] = (char *)v911 - ((v309 + 15) & 0xFFFFFFFFFFFFFFF0);
  IndexStmt = type metadata accessor for PgQuery_IndexStmt(0);
  MEMORY[0x1E0C80A78](IndexStmt);
  v911[73] = (char *)v911 - ((v311 + 15) & 0xFFFFFFFFFFFFFFF0);
  Stmt = type metadata accessor for PgQuery_FetchStmt(0);
  MEMORY[0x1E0C80A78](Stmt);
  v911[72] = (char *)v911 - ((v313 + 15) & 0xFFFFFFFFFFFFFFF0);
  CommentStmt = type metadata accessor for PgQuery_CommentStmt(0);
  MEMORY[0x1E0C80A78](CommentStmt);
  v911[71] = (char *)v911 - ((v315 + 15) & 0xFFFFFFFFFFFFFFF0);
  TruncateStmt = type metadata accessor for PgQuery_TruncateStmt(0);
  MEMORY[0x1E0C80A78](TruncateStmt);
  v911[70] = (char *)v911 - ((v317 + 15) & 0xFFFFFFFFFFFFFFF0);
  DropStmt = type metadata accessor for PgQuery_DropStmt(0);
  MEMORY[0x1E0C80A78](DropStmt);
  v911[69] = (char *)v911 - ((v319 + 15) & 0xFFFFFFFFFFFFFFF0);
  DefineStmt = type metadata accessor for PgQuery_DefineStmt(0);
  MEMORY[0x1E0C80A78](DefineStmt);
  v911[68] = (char *)v911 - ((v321 + 15) & 0xFFFFFFFFFFFFFFF0);
  v322 = type metadata accessor for PgQuery_CreateStmt(0);
  MEMORY[0x1E0C80A78](v322);
  v911[67] = (char *)v911 - ((v323 + 15) & 0xFFFFFFFFFFFFFFF0);
  CopyStmt = type metadata accessor for PgQuery_CopyStmt(0);
  MEMORY[0x1E0C80A78](CopyStmt);
  v911[66] = (char *)v911 - ((v325 + 15) & 0xFFFFFFFFFFFFFFF0);
  ClusterStmt = type metadata accessor for PgQuery_ClusterStmt(0);
  MEMORY[0x1E0C80A78](ClusterStmt);
  v911[65] = (char *)v911 - ((v327 + 15) & 0xFFFFFFFFFFFFFFF0);
  ClosePortalStmt = type metadata accessor for PgQuery_ClosePortalStmt(0);
  MEMORY[0x1E0C80A78](ClosePortalStmt);
  v911[64] = (char *)v911 - ((v329 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterDefaultPrivilegesStmt = type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt(0);
  MEMORY[0x1E0C80A78](AlterDefaultPrivilegesStmt);
  v911[63] = (char *)v911 - ((v331 + 15) & 0xFFFFFFFFFFFFFFF0);
  GrantRoleStmt = type metadata accessor for PgQuery_GrantRoleStmt(0);
  MEMORY[0x1E0C80A78](GrantRoleStmt);
  v911[62] = (char *)v911 - ((v333 + 15) & 0xFFFFFFFFFFFFFFF0);
  GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
  MEMORY[0x1E0C80A78](GrantStmt);
  v911[61] = (char *)v911 - ((v335 + 15) & 0xFFFFFFFFFFFFFFF0);
  SetOperationStmt = type metadata accessor for PgQuery_SetOperationStmt(0);
  MEMORY[0x1E0C80A78](SetOperationStmt);
  v911[60] = (char *)v911 - ((v337 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterDomainStmt = type metadata accessor for PgQuery_AlterDomainStmt(0);
  MEMORY[0x1E0C80A78](AlterDomainStmt);
  v911[59] = (char *)v911 - ((v339 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterTableCmd = type metadata accessor for PgQuery_AlterTableCmd(0);
  MEMORY[0x1E0C80A78](AlterTableCmd);
  v911[58] = (char *)v911 - ((v341 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterTableStmt = type metadata accessor for PgQuery_AlterTableStmt(0);
  MEMORY[0x1E0C80A78](AlterTableStmt);
  v911[57] = (char *)v911 - ((v343 + 15) & 0xFFFFFFFFFFFFFFF0);
  SelectStmt = type metadata accessor for PgQuery_SelectStmt(0);
  MEMORY[0x1E0C80A78](SelectStmt);
  v911[56] = (char *)v911 - ((v345 + 15) & 0xFFFFFFFFFFFFFFF0);
  UpdateStmt = type metadata accessor for PgQuery_UpdateStmt(0);
  MEMORY[0x1E0C80A78](UpdateStmt);
  v911[55] = (char *)v911 - ((v347 + 15) & 0xFFFFFFFFFFFFFFF0);
  v348 = type metadata accessor for PgQuery_DeleteStmt(0);
  MEMORY[0x1E0C80A78](v348);
  v911[54] = (char *)v911 - ((v349 + 15) & 0xFFFFFFFFFFFFFFF0);
  InsertStmt = type metadata accessor for PgQuery_InsertStmt(0);
  MEMORY[0x1E0C80A78](InsertStmt);
  v911[53] = (char *)v911 - ((v351 + 15) & 0xFFFFFFFFFFFFFFF0);
  Query = type metadata accessor for PgQuery_Query(0);
  MEMORY[0x1E0C80A78](Query);
  v911[52] = (char *)v911 - ((v353 + 15) & 0xFFFFFFFFFFFFFFF0);
  RawStmt = type metadata accessor for PgQuery_RawStmt(0);
  MEMORY[0x1E0C80A78](RawStmt);
  v911[51] = (char *)v911 - ((v355 + 15) & 0xFFFFFFFFFFFFFFF0);
  IntoClause = type metadata accessor for PgQuery_IntoClause(0);
  MEMORY[0x1E0C80A78](IntoClause);
  v911[50] = (char *)v911 - ((v357 + 15) & 0xFFFFFFFFFFFFFFF0);
  v358 = type metadata accessor for PgQuery_OnConflictExpr(0);
  MEMORY[0x1E0C80A78](v358);
  v911[49] = (char *)v911 - ((v359 + 15) & 0xFFFFFFFFFFFFFFF0);
  v360 = type metadata accessor for PgQuery_FromExpr(0);
  MEMORY[0x1E0C80A78](v360);
  v911[48] = (char *)v911 - ((v361 + 15) & 0xFFFFFFFFFFFFFFF0);
  JoinExpr = type metadata accessor for PgQuery_JoinExpr(0);
  MEMORY[0x1E0C80A78](JoinExpr);
  v911[47] = (char *)v911 - ((v363 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeTblRef = type metadata accessor for PgQuery_RangeTblRef(0);
  MEMORY[0x1E0C80A78](RangeTblRef);
  v911[46] = (char *)v911 - ((v365 + 15) & 0xFFFFFFFFFFFFFFF0);
  TargetEntry = type metadata accessor for PgQuery_TargetEntry(0);
  MEMORY[0x1E0C80A78](TargetEntry);
  v911[45] = (char *)v911 - ((v367 + 15) & 0xFFFFFFFFFFFFFFF0);
  InferenceElem = type metadata accessor for PgQuery_InferenceElem(0);
  MEMORY[0x1E0C80A78](InferenceElem);
  v911[44] = (char *)v911 - ((v369 + 15) & 0xFFFFFFFFFFFFFFF0);
  NextValueExpr = type metadata accessor for PgQuery_NextValueExpr(0);
  MEMORY[0x1E0C80A78](NextValueExpr);
  v911[43] = (char *)v911 - ((v371 + 15) & 0xFFFFFFFFFFFFFFF0);
  CurrentOfExpr = type metadata accessor for PgQuery_CurrentOfExpr(0);
  MEMORY[0x1E0C80A78](CurrentOfExpr);
  v911[42] = (char *)v911 - ((v373 + 15) & 0xFFFFFFFFFFFFFFF0);
  SetToDefault = type metadata accessor for PgQuery_SetToDefault(0);
  MEMORY[0x1E0C80A78](SetToDefault);
  v911[41] = (char *)v911 - ((v375 + 15) & 0xFFFFFFFFFFFFFFF0);
  CoerceToDomainValue = type metadata accessor for PgQuery_CoerceToDomainValue(0);
  MEMORY[0x1E0C80A78](CoerceToDomainValue);
  v911[40] = (char *)v911 - ((v377 + 15) & 0xFFFFFFFFFFFFFFF0);
  CoerceToDomain = type metadata accessor for PgQuery_CoerceToDomain(0);
  MEMORY[0x1E0C80A78](CoerceToDomain);
  v911[39] = (char *)v911 - ((v379 + 15) & 0xFFFFFFFFFFFFFFF0);
  BooleanTest = type metadata accessor for PgQuery_BooleanTest(0);
  MEMORY[0x1E0C80A78](BooleanTest);
  v911[38] = (char *)v911 - ((v381 + 15) & 0xFFFFFFFFFFFFFFF0);
  NullTest = type metadata accessor for PgQuery_NullTest(0);
  MEMORY[0x1E0C80A78](NullTest);
  v911[37] = (char *)v911 - ((v383 + 15) & 0xFFFFFFFFFFFFFFF0);
  XmlExpr = type metadata accessor for PgQuery_XmlExpr(0);
  MEMORY[0x1E0C80A78](XmlExpr);
  v911[36] = (char *)v911 - ((v385 + 15) & 0xFFFFFFFFFFFFFFF0);
  SQLValueFunction = type metadata accessor for PgQuery_SQLValueFunction(0);
  MEMORY[0x1E0C80A78](SQLValueFunction);
  v911[35] = (char *)v911 - ((v387 + 15) & 0xFFFFFFFFFFFFFFF0);
  MinMaxExpr = type metadata accessor for PgQuery_MinMaxExpr(0);
  MEMORY[0x1E0C80A78](MinMaxExpr);
  v911[34] = (char *)v911 - ((v389 + 15) & 0xFFFFFFFFFFFFFFF0);
  CoalesceExpr = type metadata accessor for PgQuery_CoalesceExpr(0);
  MEMORY[0x1E0C80A78](CoalesceExpr);
  v911[33] = (char *)v911 - ((v391 + 15) & 0xFFFFFFFFFFFFFFF0);
  RowCompareExpr = type metadata accessor for PgQuery_RowCompareExpr(0);
  MEMORY[0x1E0C80A78](RowCompareExpr);
  v911[32] = (char *)v911 - ((v393 + 15) & 0xFFFFFFFFFFFFFFF0);
  RowExpr = type metadata accessor for PgQuery_RowExpr(0);
  MEMORY[0x1E0C80A78](RowExpr);
  v911[31] = (char *)v911 - ((v395 + 15) & 0xFFFFFFFFFFFFFFF0);
  ArrayExpr = type metadata accessor for PgQuery_ArrayExpr(0);
  MEMORY[0x1E0C80A78](ArrayExpr);
  v911[30] = (char *)v911 - ((v397 + 15) & 0xFFFFFFFFFFFFFFF0);
  CaseTestExpr = type metadata accessor for PgQuery_CaseTestExpr(0);
  MEMORY[0x1E0C80A78](CaseTestExpr);
  v911[29] = (char *)v911 - ((v399 + 15) & 0xFFFFFFFFFFFFFFF0);
  CaseWhen = type metadata accessor for PgQuery_CaseWhen(0);
  MEMORY[0x1E0C80A78](CaseWhen);
  v911[28] = (char *)v911 - ((v401 + 15) & 0xFFFFFFFFFFFFFFF0);
  CaseExpr = type metadata accessor for PgQuery_CaseExpr(0);
  MEMORY[0x1E0C80A78](CaseExpr);
  v911[27] = (char *)v911 - ((v403 + 15) & 0xFFFFFFFFFFFFFFF0);
  CollateExpr = type metadata accessor for PgQuery_CollateExpr(0);
  MEMORY[0x1E0C80A78](CollateExpr);
  v911[26] = (char *)v911 - ((v405 + 15) & 0xFFFFFFFFFFFFFFF0);
  ConvertRowtypeExpr = type metadata accessor for PgQuery_ConvertRowtypeExpr(0);
  MEMORY[0x1E0C80A78](ConvertRowtypeExpr);
  v911[25] = (char *)v911 - ((v407 + 15) & 0xFFFFFFFFFFFFFFF0);
  ArrayCoerceExpr = type metadata accessor for PgQuery_ArrayCoerceExpr(0);
  MEMORY[0x1E0C80A78](ArrayCoerceExpr);
  v911[24] = (char *)v911 - ((v409 + 15) & 0xFFFFFFFFFFFFFFF0);
  CoerceViaIO = type metadata accessor for PgQuery_CoerceViaIO(0);
  MEMORY[0x1E0C80A78](CoerceViaIO);
  v911[23] = (char *)v911 - ((v411 + 15) & 0xFFFFFFFFFFFFFFF0);
  RelabelType = type metadata accessor for PgQuery_RelabelType(0);
  MEMORY[0x1E0C80A78](RelabelType);
  v911[22] = (char *)v911 - ((v413 + 15) & 0xFFFFFFFFFFFFFFF0);
  FieldStore = type metadata accessor for PgQuery_FieldStore(0);
  MEMORY[0x1E0C80A78](FieldStore);
  v911[21] = (char *)v911 - ((v415 + 15) & 0xFFFFFFFFFFFFFFF0);
  FieldSelect = type metadata accessor for PgQuery_FieldSelect(0);
  MEMORY[0x1E0C80A78](FieldSelect);
  v911[20] = (char *)v911 - ((v417 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlternativeSubPlan = type metadata accessor for PgQuery_AlternativeSubPlan(0);
  MEMORY[0x1E0C80A78](AlternativeSubPlan);
  v911[19] = (char *)v911 - ((v419 + 15) & 0xFFFFFFFFFFFFFFF0);
  SubPlan = type metadata accessor for PgQuery_SubPlan(0);
  MEMORY[0x1E0C80A78](SubPlan);
  v911[18] = (char *)v911 - ((v421 + 15) & 0xFFFFFFFFFFFFFFF0);
  SubLink = type metadata accessor for PgQuery_SubLink(0);
  MEMORY[0x1E0C80A78](SubLink);
  v911[17] = (char *)v911 - ((v423 + 15) & 0xFFFFFFFFFFFFFFF0);
  BoolExpr = type metadata accessor for PgQuery_BoolExpr(0);
  MEMORY[0x1E0C80A78](BoolExpr);
  v911[16] = (char *)v911 - ((v425 + 15) & 0xFFFFFFFFFFFFFFF0);
  ScalarArrayOpExpr = type metadata accessor for PgQuery_ScalarArrayOpExpr(0);
  MEMORY[0x1E0C80A78](ScalarArrayOpExpr);
  v911[15] = (char *)v911 - ((v427 + 15) & 0xFFFFFFFFFFFFFFF0);
  NullIfExpr = type metadata accessor for PgQuery_NullIfExpr(0);
  MEMORY[0x1E0C80A78](NullIfExpr);
  v911[14] = (char *)v911 - ((v429 + 15) & 0xFFFFFFFFFFFFFFF0);
  DistinctExpr = type metadata accessor for PgQuery_DistinctExpr(0);
  MEMORY[0x1E0C80A78](DistinctExpr);
  v911[13] = (char *)v911 - ((v431 + 15) & 0xFFFFFFFFFFFFFFF0);
  OpExpr = type metadata accessor for PgQuery_OpExpr(0);
  MEMORY[0x1E0C80A78](OpExpr);
  v911[12] = (char *)v911 - ((v433 + 15) & 0xFFFFFFFFFFFFFFF0);
  NamedArgExpr = type metadata accessor for PgQuery_NamedArgExpr(0);
  MEMORY[0x1E0C80A78](NamedArgExpr);
  v911[11] = (char *)v911 - ((v435 + 15) & 0xFFFFFFFFFFFFFFF0);
  FuncExpr = type metadata accessor for PgQuery_FuncExpr(0);
  MEMORY[0x1E0C80A78](FuncExpr);
  v911[10] = (char *)v911 - ((v437 + 15) & 0xFFFFFFFFFFFFFFF0);
  SubscriptingRef = type metadata accessor for PgQuery_SubscriptingRef(0);
  MEMORY[0x1E0C80A78](SubscriptingRef);
  v911[9] = (char *)v911 - ((v439 + 15) & 0xFFFFFFFFFFFFFFF0);
  WindowFunc = type metadata accessor for PgQuery_WindowFunc(0);
  MEMORY[0x1E0C80A78](WindowFunc);
  v911[8] = (char *)v911 - ((v441 + 15) & 0xFFFFFFFFFFFFFFF0);
  GroupingFunc = type metadata accessor for PgQuery_GroupingFunc(0);
  MEMORY[0x1E0C80A78](GroupingFunc);
  v911[7] = (char *)v911 - ((v443 + 15) & 0xFFFFFFFFFFFFFFF0);
  Aggref = type metadata accessor for PgQuery_Aggref(0);
  MEMORY[0x1E0C80A78](Aggref);
  v911[6] = (char *)v911 - ((v445 + 15) & 0xFFFFFFFFFFFFFFF0);
  Param = type metadata accessor for PgQuery_Param(0);
  MEMORY[0x1E0C80A78](Param);
  v911[5] = (char *)v911 - ((v447 + 15) & 0xFFFFFFFFFFFFFFF0);
  Var = type metadata accessor for PgQuery_Var(0);
  MEMORY[0x1E0C80A78](Var);
  v911[4] = (char *)v911 - ((v449 + 15) & 0xFFFFFFFFFFFFFFF0);
  Expr = type metadata accessor for PgQuery_Expr(0);
  MEMORY[0x1E0C80A78](Expr);
  v911[3] = (char *)v911 - ((v451 + 15) & 0xFFFFFFFFFFFFFFF0);
  TableFunc = type metadata accessor for PgQuery_TableFunc(0);
  MEMORY[0x1E0C80A78](TableFunc);
  v911[2] = (char *)v911 - ((v453 + 15) & 0xFFFFFFFFFFFFFFF0);
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  MEMORY[0x1E0C80A78](RangeVar);
  v911[1] = (char *)v911 - ((v455 + 15) & 0xFFFFFFFFFFFFFFF0);
  Alias = type metadata accessor for PgQuery_Alias(0);
  MEMORY[0x1E0C80A78](Alias);
  v911[0] = (char *)v911 - ((v457 + 15) & 0xFFFFFFFFFFFFFFF0);
  v912 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v458 = MEMORY[0x1E0C80A78](v912);
  v911[447] = (char *)v911 - ((v459 + 15) & 0xFFFFFFFFFFFFFFF0);
  v460 = MEMORY[0x1E0C80A78](v458);
  v911[445] = (char *)v911 - v461;
  v462 = MEMORY[0x1E0C80A78](v460);
  v911[444] = (char *)v911 - v463;
  v464 = MEMORY[0x1E0C80A78](v462);
  v911[446] = (char *)v911 - v465;
  v466 = MEMORY[0x1E0C80A78](v464);
  v911[443] = (char *)v911 - v467;
  v468 = MEMORY[0x1E0C80A78](v466);
  v911[442] = (char *)v911 - v469;
  v470 = MEMORY[0x1E0C80A78](v468);
  v911[441] = (char *)v911 - v471;
  v472 = MEMORY[0x1E0C80A78](v470);
  v911[440] = (char *)v911 - v473;
  v474 = MEMORY[0x1E0C80A78](v472);
  v911[439] = (char *)v911 - v475;
  v476 = MEMORY[0x1E0C80A78](v474);
  v911[438] = (char *)v911 - v477;
  v478 = MEMORY[0x1E0C80A78](v476);
  v911[437] = (char *)v911 - v479;
  v480 = MEMORY[0x1E0C80A78](v478);
  v911[436] = (char *)v911 - v481;
  v482 = MEMORY[0x1E0C80A78](v480);
  v911[435] = (char *)v911 - v483;
  v484 = MEMORY[0x1E0C80A78](v482);
  v911[434] = (char *)v911 - v485;
  v486 = MEMORY[0x1E0C80A78](v484);
  v911[433] = (char *)v911 - v487;
  v488 = MEMORY[0x1E0C80A78](v486);
  v911[432] = (char *)v911 - v489;
  v490 = MEMORY[0x1E0C80A78](v488);
  v911[431] = (char *)v911 - v491;
  v492 = MEMORY[0x1E0C80A78](v490);
  v911[430] = (char *)v911 - v493;
  v494 = MEMORY[0x1E0C80A78](v492);
  v911[429] = (char *)v911 - v495;
  v496 = MEMORY[0x1E0C80A78](v494);
  v911[428] = (char *)v911 - v497;
  v498 = MEMORY[0x1E0C80A78](v496);
  v911[427] = (char *)v911 - v499;
  v500 = MEMORY[0x1E0C80A78](v498);
  v911[426] = (char *)v911 - v501;
  v502 = MEMORY[0x1E0C80A78](v500);
  v911[425] = (char *)v911 - v503;
  v504 = MEMORY[0x1E0C80A78](v502);
  v911[424] = (char *)v911 - v505;
  v506 = MEMORY[0x1E0C80A78](v504);
  v911[423] = (char *)v911 - v507;
  v508 = MEMORY[0x1E0C80A78](v506);
  v911[422] = (char *)v911 - v509;
  v510 = MEMORY[0x1E0C80A78](v508);
  v911[421] = (char *)v911 - v511;
  v512 = MEMORY[0x1E0C80A78](v510);
  v911[420] = (char *)v911 - v513;
  v514 = MEMORY[0x1E0C80A78](v512);
  v911[419] = (char *)v911 - v515;
  v516 = MEMORY[0x1E0C80A78](v514);
  v911[418] = (char *)v911 - v517;
  v518 = MEMORY[0x1E0C80A78](v516);
  v911[417] = (char *)v911 - v519;
  v520 = MEMORY[0x1E0C80A78](v518);
  v911[416] = (char *)v911 - v521;
  v522 = MEMORY[0x1E0C80A78](v520);
  v911[415] = (char *)v911 - v523;
  v524 = MEMORY[0x1E0C80A78](v522);
  v911[414] = (char *)v911 - v525;
  v526 = MEMORY[0x1E0C80A78](v524);
  v911[413] = (char *)v911 - v527;
  v528 = MEMORY[0x1E0C80A78](v526);
  v911[412] = (char *)v911 - v529;
  v530 = MEMORY[0x1E0C80A78](v528);
  v911[411] = (char *)v911 - v531;
  v532 = MEMORY[0x1E0C80A78](v530);
  v911[410] = (char *)v911 - v533;
  v534 = MEMORY[0x1E0C80A78](v532);
  v911[409] = (char *)v911 - v535;
  v536 = MEMORY[0x1E0C80A78](v534);
  v911[408] = (char *)v911 - v537;
  v538 = MEMORY[0x1E0C80A78](v536);
  v911[407] = (char *)v911 - v539;
  v540 = MEMORY[0x1E0C80A78](v538);
  v911[406] = (char *)v911 - v541;
  v542 = MEMORY[0x1E0C80A78](v540);
  v911[405] = (char *)v911 - v543;
  v544 = MEMORY[0x1E0C80A78](v542);
  v911[404] = (char *)v911 - v545;
  v546 = MEMORY[0x1E0C80A78](v544);
  v911[403] = (char *)v911 - v547;
  v548 = MEMORY[0x1E0C80A78](v546);
  v911[402] = (char *)v911 - v549;
  v550 = MEMORY[0x1E0C80A78](v548);
  v911[401] = (char *)v911 - v551;
  v552 = MEMORY[0x1E0C80A78](v550);
  v911[400] = (char *)v911 - v553;
  v554 = MEMORY[0x1E0C80A78](v552);
  v911[399] = (char *)v911 - v555;
  v556 = MEMORY[0x1E0C80A78](v554);
  v911[398] = (char *)v911 - v557;
  v558 = MEMORY[0x1E0C80A78](v556);
  v911[397] = (char *)v911 - v559;
  v560 = MEMORY[0x1E0C80A78](v558);
  v911[396] = (char *)v911 - v561;
  v562 = MEMORY[0x1E0C80A78](v560);
  v911[395] = (char *)v911 - v563;
  v564 = MEMORY[0x1E0C80A78](v562);
  v911[394] = (char *)v911 - v565;
  v566 = MEMORY[0x1E0C80A78](v564);
  v911[393] = (char *)v911 - v567;
  v568 = MEMORY[0x1E0C80A78](v566);
  v911[391] = (char *)v911 - v569;
  v570 = MEMORY[0x1E0C80A78](v568);
  v911[392] = (char *)v911 - v571;
  v572 = MEMORY[0x1E0C80A78](v570);
  v911[390] = (char *)v911 - v573;
  v574 = MEMORY[0x1E0C80A78](v572);
  v911[389] = (char *)v911 - v575;
  v576 = MEMORY[0x1E0C80A78](v574);
  v911[388] = (char *)v911 - v577;
  v578 = MEMORY[0x1E0C80A78](v576);
  v911[387] = (char *)v911 - v579;
  v580 = MEMORY[0x1E0C80A78](v578);
  v911[386] = (char *)v911 - v581;
  v582 = MEMORY[0x1E0C80A78](v580);
  v911[385] = (char *)v911 - v583;
  v584 = MEMORY[0x1E0C80A78](v582);
  v911[384] = (char *)v911 - v585;
  v586 = MEMORY[0x1E0C80A78](v584);
  v911[383] = (char *)v911 - v587;
  v588 = MEMORY[0x1E0C80A78](v586);
  v911[382] = (char *)v911 - v589;
  v590 = MEMORY[0x1E0C80A78](v588);
  v911[381] = (char *)v911 - v591;
  v592 = MEMORY[0x1E0C80A78](v590);
  v911[380] = (char *)v911 - v593;
  v594 = MEMORY[0x1E0C80A78](v592);
  v911[379] = (char *)v911 - v595;
  v596 = MEMORY[0x1E0C80A78](v594);
  v911[378] = (char *)v911 - v597;
  v598 = MEMORY[0x1E0C80A78](v596);
  v911[377] = (char *)v911 - v599;
  v600 = MEMORY[0x1E0C80A78](v598);
  v911[376] = (char *)v911 - v601;
  v602 = MEMORY[0x1E0C80A78](v600);
  v911[375] = (char *)v911 - v603;
  v604 = MEMORY[0x1E0C80A78](v602);
  v911[374] = (char *)v911 - v605;
  v606 = MEMORY[0x1E0C80A78](v604);
  v911[373] = (char *)v911 - v607;
  v608 = MEMORY[0x1E0C80A78](v606);
  v911[372] = (char *)v911 - v609;
  v610 = MEMORY[0x1E0C80A78](v608);
  v911[371] = (char *)v911 - v611;
  v612 = MEMORY[0x1E0C80A78](v610);
  v911[370] = (char *)v911 - v613;
  v614 = MEMORY[0x1E0C80A78](v612);
  v911[369] = (char *)v911 - v615;
  v616 = MEMORY[0x1E0C80A78](v614);
  v911[368] = (char *)v911 - v617;
  v618 = MEMORY[0x1E0C80A78](v616);
  v911[367] = (char *)v911 - v619;
  v620 = MEMORY[0x1E0C80A78](v618);
  v911[366] = (char *)v911 - v621;
  v622 = MEMORY[0x1E0C80A78](v620);
  v911[365] = (char *)v911 - v623;
  v624 = MEMORY[0x1E0C80A78](v622);
  v911[364] = (char *)v911 - v625;
  v626 = MEMORY[0x1E0C80A78](v624);
  v911[363] = (char *)v911 - v627;
  v628 = MEMORY[0x1E0C80A78](v626);
  v911[362] = (char *)v911 - v629;
  v630 = MEMORY[0x1E0C80A78](v628);
  v911[361] = (char *)v911 - v631;
  v632 = MEMORY[0x1E0C80A78](v630);
  v911[360] = (char *)v911 - v633;
  v634 = MEMORY[0x1E0C80A78](v632);
  v911[359] = (char *)v911 - v635;
  v636 = MEMORY[0x1E0C80A78](v634);
  v911[358] = (char *)v911 - v637;
  v638 = MEMORY[0x1E0C80A78](v636);
  v911[357] = (char *)v911 - v639;
  v640 = MEMORY[0x1E0C80A78](v638);
  v911[356] = (char *)v911 - v641;
  v642 = MEMORY[0x1E0C80A78](v640);
  v911[355] = (char *)v911 - v643;
  v644 = MEMORY[0x1E0C80A78](v642);
  v911[354] = (char *)v911 - v645;
  v646 = MEMORY[0x1E0C80A78](v644);
  v911[353] = (char *)v911 - v647;
  v648 = MEMORY[0x1E0C80A78](v646);
  v911[352] = (char *)v911 - v649;
  v650 = MEMORY[0x1E0C80A78](v648);
  v911[351] = (char *)v911 - v651;
  v652 = MEMORY[0x1E0C80A78](v650);
  v911[350] = (char *)v911 - v653;
  v654 = MEMORY[0x1E0C80A78](v652);
  v911[349] = (char *)v911 - v655;
  v656 = MEMORY[0x1E0C80A78](v654);
  v911[348] = (char *)v911 - v657;
  v658 = MEMORY[0x1E0C80A78](v656);
  v911[347] = (char *)v911 - v659;
  v660 = MEMORY[0x1E0C80A78](v658);
  v911[346] = (char *)v911 - v661;
  v662 = MEMORY[0x1E0C80A78](v660);
  v911[345] = (char *)v911 - v663;
  v664 = MEMORY[0x1E0C80A78](v662);
  v911[344] = (char *)v911 - v665;
  v666 = MEMORY[0x1E0C80A78](v664);
  v911[343] = (char *)v911 - v667;
  v668 = MEMORY[0x1E0C80A78](v666);
  v911[342] = (char *)v911 - v669;
  v670 = MEMORY[0x1E0C80A78](v668);
  v911[341] = (char *)v911 - v671;
  v672 = MEMORY[0x1E0C80A78](v670);
  v911[340] = (char *)v911 - v673;
  v674 = MEMORY[0x1E0C80A78](v672);
  v911[339] = (char *)v911 - v675;
  v676 = MEMORY[0x1E0C80A78](v674);
  v911[338] = (char *)v911 - v677;
  v678 = MEMORY[0x1E0C80A78](v676);
  v911[337] = (char *)v911 - v679;
  v680 = MEMORY[0x1E0C80A78](v678);
  v911[336] = (char *)v911 - v681;
  v682 = MEMORY[0x1E0C80A78](v680);
  v911[335] = (char *)v911 - v683;
  v684 = MEMORY[0x1E0C80A78](v682);
  v911[334] = (char *)v911 - v685;
  v686 = MEMORY[0x1E0C80A78](v684);
  v911[333] = (char *)v911 - v687;
  v688 = MEMORY[0x1E0C80A78](v686);
  v911[332] = (char *)v911 - v689;
  v690 = MEMORY[0x1E0C80A78](v688);
  v911[331] = (char *)v911 - v691;
  v692 = MEMORY[0x1E0C80A78](v690);
  v911[330] = (char *)v911 - v693;
  v694 = MEMORY[0x1E0C80A78](v692);
  v911[329] = (char *)v911 - v695;
  v696 = MEMORY[0x1E0C80A78](v694);
  v911[328] = (char *)v911 - v697;
  v698 = MEMORY[0x1E0C80A78](v696);
  v911[327] = (char *)v911 - v699;
  v700 = MEMORY[0x1E0C80A78](v698);
  v911[325] = (char *)v911 - v701;
  v702 = MEMORY[0x1E0C80A78](v700);
  v911[324] = (char *)v911 - v703;
  v704 = MEMORY[0x1E0C80A78](v702);
  v911[326] = (char *)v911 - v705;
  v706 = MEMORY[0x1E0C80A78](v704);
  v911[323] = (char *)v911 - v707;
  v708 = MEMORY[0x1E0C80A78](v706);
  v911[322] = (char *)v911 - v709;
  v710 = MEMORY[0x1E0C80A78](v708);
  v911[321] = (char *)v911 - v711;
  v712 = MEMORY[0x1E0C80A78](v710);
  v911[320] = (char *)v911 - v713;
  v714 = MEMORY[0x1E0C80A78](v712);
  v911[319] = (char *)v911 - v715;
  v716 = MEMORY[0x1E0C80A78](v714);
  v911[318] = (char *)v911 - v717;
  v718 = MEMORY[0x1E0C80A78](v716);
  v911[317] = (char *)v911 - v719;
  v720 = MEMORY[0x1E0C80A78](v718);
  v911[316] = (char *)v911 - v721;
  v722 = MEMORY[0x1E0C80A78](v720);
  v911[315] = (char *)v911 - v723;
  v724 = MEMORY[0x1E0C80A78](v722);
  v911[314] = (char *)v911 - v725;
  v726 = MEMORY[0x1E0C80A78](v724);
  v911[313] = (char *)v911 - v727;
  v728 = MEMORY[0x1E0C80A78](v726);
  v911[312] = (char *)v911 - v729;
  v730 = MEMORY[0x1E0C80A78](v728);
  v911[311] = (char *)v911 - v731;
  v732 = MEMORY[0x1E0C80A78](v730);
  v911[310] = (char *)v911 - v733;
  v734 = MEMORY[0x1E0C80A78](v732);
  v911[309] = (char *)v911 - v735;
  v736 = MEMORY[0x1E0C80A78](v734);
  v911[308] = (char *)v911 - v737;
  v738 = MEMORY[0x1E0C80A78](v736);
  v911[307] = (char *)v911 - v739;
  v740 = MEMORY[0x1E0C80A78](v738);
  v911[306] = (char *)v911 - v741;
  v742 = MEMORY[0x1E0C80A78](v740);
  v911[305] = (char *)v911 - v743;
  v744 = MEMORY[0x1E0C80A78](v742);
  v911[304] = (char *)v911 - v745;
  v746 = MEMORY[0x1E0C80A78](v744);
  v911[303] = (char *)v911 - v747;
  v748 = MEMORY[0x1E0C80A78](v746);
  v911[302] = (char *)v911 - v749;
  v750 = MEMORY[0x1E0C80A78](v748);
  v911[301] = (char *)v911 - v751;
  v752 = MEMORY[0x1E0C80A78](v750);
  v911[300] = (char *)v911 - v753;
  v754 = MEMORY[0x1E0C80A78](v752);
  v911[299] = (char *)v911 - v755;
  v756 = MEMORY[0x1E0C80A78](v754);
  v911[298] = (char *)v911 - v757;
  v758 = MEMORY[0x1E0C80A78](v756);
  v911[297] = (char *)v911 - v759;
  v760 = MEMORY[0x1E0C80A78](v758);
  v911[296] = (char *)v911 - v761;
  v762 = MEMORY[0x1E0C80A78](v760);
  v911[295] = (char *)v911 - v763;
  v764 = MEMORY[0x1E0C80A78](v762);
  v911[294] = (char *)v911 - v765;
  v766 = MEMORY[0x1E0C80A78](v764);
  v911[293] = (char *)v911 - v767;
  v768 = MEMORY[0x1E0C80A78](v766);
  v911[292] = (char *)v911 - v769;
  v770 = MEMORY[0x1E0C80A78](v768);
  v911[291] = (char *)v911 - v771;
  v772 = MEMORY[0x1E0C80A78](v770);
  v911[290] = (char *)v911 - v773;
  v774 = MEMORY[0x1E0C80A78](v772);
  v911[289] = (char *)v911 - v775;
  v776 = MEMORY[0x1E0C80A78](v774);
  v911[288] = (char *)v911 - v777;
  v778 = MEMORY[0x1E0C80A78](v776);
  v911[287] = (char *)v911 - v779;
  v780 = MEMORY[0x1E0C80A78](v778);
  v911[286] = (char *)v911 - v781;
  v782 = MEMORY[0x1E0C80A78](v780);
  v911[285] = (char *)v911 - v783;
  v784 = MEMORY[0x1E0C80A78](v782);
  v911[284] = (char *)v911 - v785;
  v786 = MEMORY[0x1E0C80A78](v784);
  v911[283] = (char *)v911 - v787;
  v788 = MEMORY[0x1E0C80A78](v786);
  v911[282] = (char *)v911 - v789;
  v790 = MEMORY[0x1E0C80A78](v788);
  v911[281] = (char *)v911 - v791;
  v792 = MEMORY[0x1E0C80A78](v790);
  v911[280] = (char *)v911 - v793;
  v794 = MEMORY[0x1E0C80A78](v792);
  v911[279] = (char *)v911 - v795;
  v796 = MEMORY[0x1E0C80A78](v794);
  v911[278] = (char *)v911 - v797;
  v798 = MEMORY[0x1E0C80A78](v796);
  v911[277] = (char *)v911 - v799;
  v800 = MEMORY[0x1E0C80A78](v798);
  v911[276] = (char *)v911 - v801;
  v802 = MEMORY[0x1E0C80A78](v800);
  v911[275] = (char *)v911 - v803;
  v804 = MEMORY[0x1E0C80A78](v802);
  v911[274] = (char *)v911 - v805;
  v806 = MEMORY[0x1E0C80A78](v804);
  v911[273] = (char *)v911 - v807;
  v808 = MEMORY[0x1E0C80A78](v806);
  v911[272] = (char *)v911 - v809;
  v810 = MEMORY[0x1E0C80A78](v808);
  v911[271] = (char *)v911 - v811;
  v812 = MEMORY[0x1E0C80A78](v810);
  v911[270] = (char *)v911 - v813;
  v814 = MEMORY[0x1E0C80A78](v812);
  v911[269] = (char *)v911 - v815;
  v816 = MEMORY[0x1E0C80A78](v814);
  v911[268] = (char *)v911 - v817;
  v818 = MEMORY[0x1E0C80A78](v816);
  v911[267] = (char *)v911 - v819;
  v820 = MEMORY[0x1E0C80A78](v818);
  v911[266] = (char *)v911 - v821;
  v822 = MEMORY[0x1E0C80A78](v820);
  v911[265] = (char *)v911 - v823;
  v824 = MEMORY[0x1E0C80A78](v822);
  v911[264] = (char *)v911 - v825;
  v826 = MEMORY[0x1E0C80A78](v824);
  v911[263] = (char *)v911 - v827;
  v828 = MEMORY[0x1E0C80A78](v826);
  v911[262] = (char *)v911 - v829;
  v830 = MEMORY[0x1E0C80A78](v828);
  v911[261] = (char *)v911 - v831;
  v832 = MEMORY[0x1E0C80A78](v830);
  v911[260] = (char *)v911 - v833;
  v834 = MEMORY[0x1E0C80A78](v832);
  v911[259] = (char *)v911 - v835;
  v836 = MEMORY[0x1E0C80A78](v834);
  v911[258] = (char *)v911 - v837;
  v838 = MEMORY[0x1E0C80A78](v836);
  v911[257] = (char *)v911 - v839;
  v840 = MEMORY[0x1E0C80A78](v838);
  v911[256] = (char *)v911 - v841;
  v842 = MEMORY[0x1E0C80A78](v840);
  v911[255] = (char *)v911 - v843;
  v844 = MEMORY[0x1E0C80A78](v842);
  v911[254] = (char *)v911 - v845;
  v846 = MEMORY[0x1E0C80A78](v844);
  v911[253] = (char *)v911 - v847;
  v848 = MEMORY[0x1E0C80A78](v846);
  v911[252] = (char *)v911 - v849;
  v850 = MEMORY[0x1E0C80A78](v848);
  v911[251] = (char *)v911 - v851;
  v852 = MEMORY[0x1E0C80A78](v850);
  v911[250] = (char *)v911 - v853;
  v854 = MEMORY[0x1E0C80A78](v852);
  v911[249] = (char *)v911 - v855;
  v856 = MEMORY[0x1E0C80A78](v854);
  v911[248] = (char *)v911 - v857;
  v858 = MEMORY[0x1E0C80A78](v856);
  v911[247] = (char *)v911 - v859;
  v860 = MEMORY[0x1E0C80A78](v858);
  v911[246] = (char *)v911 - v861;
  v862 = MEMORY[0x1E0C80A78](v860);
  v911[245] = (char *)v911 - v863;
  v864 = MEMORY[0x1E0C80A78](v862);
  v911[244] = (char *)v911 - v865;
  v866 = MEMORY[0x1E0C80A78](v864);
  v911[243] = (char *)v911 - v867;
  v868 = MEMORY[0x1E0C80A78](v866);
  v911[242] = (char *)v911 - v869;
  v870 = MEMORY[0x1E0C80A78](v868);
  v911[241] = (char *)v911 - v871;
  v872 = MEMORY[0x1E0C80A78](v870);
  v911[240] = (char *)v911 - v873;
  v874 = MEMORY[0x1E0C80A78](v872);
  v911[239] = (char *)v911 - v875;
  v876 = MEMORY[0x1E0C80A78](v874);
  v911[238] = (char *)v911 - v877;
  v878 = MEMORY[0x1E0C80A78](v876);
  v911[237] = (char *)v911 - v879;
  v880 = MEMORY[0x1E0C80A78](v878);
  v911[236] = (char *)v911 - v881;
  v882 = MEMORY[0x1E0C80A78](v880);
  v911[235] = (char *)v911 - v883;
  v884 = MEMORY[0x1E0C80A78](v882);
  v911[234] = (char *)v911 - v885;
  v886 = MEMORY[0x1E0C80A78](v884);
  v911[233] = (char *)v911 - v887;
  v888 = MEMORY[0x1E0C80A78](v886);
  v911[232] = (char *)v911 - v889;
  v890 = MEMORY[0x1E0C80A78](v888);
  v911[231] = (char *)v911 - v891;
  v892 = MEMORY[0x1E0C80A78](v890);
  v911[230] = (char *)v911 - v893;
  v894 = MEMORY[0x1E0C80A78](v892);
  v911[229] = (char *)v911 - v895;
  v896 = MEMORY[0x1E0C80A78](v894);
  v911[228] = (char *)v911 - v897;
  v898 = MEMORY[0x1E0C80A78](v896);
  v899 = MEMORY[0x1E0C80A78](v898);
  v900 = MEMORY[0x1E0C80A78](v899);
  v901 = MEMORY[0x1E0C80A78](v900);
  v902 = MEMORY[0x1E0C80A78](v901);
  v903 = MEMORY[0x1E0C80A78](v902);
  v904 = MEMORY[0x1E0C80A78](v903);
  MEMORY[0x1E0C80A78](v904);
  v905 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node.OneOf_Node, PgQuery_Node.OneOf_Node));
  v906 = MEMORY[0x1E0C80A78](v905);
  v908 = (char *)v911 - ((v907 + 15) & 0xFFFFFFFFFFFFFFF0);
  v909 = (uint64_t)&v908[*(int *)(v906 + 48)];
  outlined init with copy of PgQuery_Node.OneOf_Node(v913, (uint64_t)v908);
  v913 = v909;
  outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v914, v909);
  v914 = v908;
  v910 = (char *)sub_18DAD3154 + 4 * word_18DC0F36E[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_18DAD3154()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v6;
  char *v7;

  v2 = *(_QWORD *)(v1 - 96);
  outlined init with copy of PgQuery_Node.OneOf_Node(v2, (uint64_t)v0);
  v3 = *(_QWORD *)(v1 - 104);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of PgQuery_Alias((uint64_t)v0, type metadata accessor for PgQuery_Alias);
    outlined destroy of (key: String, value: StorableValue)(v2, &demangling cache variable for type metadata for (PgQuery_Node.OneOf_Node, PgQuery_Node.OneOf_Node));
    v4 = 0;
  }
  else
  {
    v6 = v3;
    v7 = *(char **)(v1 - 3696);
    outlined init with take of PgQuery_OidList(v6, (uint64_t)v7, type metadata accessor for PgQuery_Alias);
    v4 = specialized static PgQuery_AlterExtensionStmt.== infix(_:_:)(v0, v7, type metadata accessor for PgQuery_Alias);
    outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Alias);
    outlined destroy of PgQuery_Alias((uint64_t)v0, type metadata accessor for PgQuery_Alias);
    outlined destroy of PgQuery_Alias(v2, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  return v4 & 1;
}

uint64_t outlined init with copy of PgQuery_Node.OneOf_Node(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of PgQuery_OidList(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t specialized PgQuery_CollateExpr._uniqueStorage()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Node;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(int *)(type metadata accessor for PgQuery_CollateExpr(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + v1);
    type metadata accessor for PgQuery_CollateExpr._StorageClass(0);
    v3 = swift_allocObject();
    v4 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
    Node = type metadata accessor for PgQuery_Node(0);
    v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
    v6(v4, 1, 1, Node);
    v7 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
    v6(v3+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
    v8 = OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collOid;
    *(_DWORD *)(v3
              + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collOid) = 0;
    v9 = OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
    *(_DWORD *)(v3
              + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
    v10 = v2
        + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
    swift_retain();
    outlined assign with copy of PgQuery_Node?(v10, v4, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined assign with copy of PgQuery_Node?(v2+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v7, &demangling cache variable for type metadata for PgQuery_Node?);
    *(_DWORD *)(v3 + v8) = *(_DWORD *)(v2
                                     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collOid);
    LODWORD(v4) = *(_DWORD *)(v2
                            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    *(_DWORD *)(v3 + v9) = v4;
    *(_QWORD *)(v0 + v1) = v3;
    swift_release();
  }
  return *(_QWORD *)(v0 + v1);
}

uint64_t specialized PgQuery_CaseWhen._uniqueStorage()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Node;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(int *)(type metadata accessor for PgQuery_CaseWhen(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + v1);
    type metadata accessor for PgQuery_CaseWhen._StorageClass(0);
    v3 = swift_allocObject();
    v4 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
    Node = type metadata accessor for PgQuery_Node(0);
    v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
    v6(v4, 1, 1, Node);
    v7 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr;
    v6(v3 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, 1, 1, Node);
    v8 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__result;
    v6(v3+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__result, 1, 1, Node);
    v9 = OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
    *(_DWORD *)(v3
              + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
    v10 = v2
        + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
    swift_retain();
    outlined assign with copy of PgQuery_Node?(v10, v4, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined assign with copy of PgQuery_Node?(v2 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, v7, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined assign with copy of PgQuery_Node?(v2+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__result, v8, &demangling cache variable for type metadata for PgQuery_Node?);
    LODWORD(v4) = *(_DWORD *)(v2
                            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    *(_DWORD *)(v3 + v9) = v4;
    *(_QWORD *)(v0 + v1) = v3;
    swift_release();
  }
  return *(_QWORD *)(v0 + v1);
}

uint64_t specialized PgQuery_CaseTestExpr._uniqueStorage()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(int *)(type metadata accessor for PgQuery_CaseTestExpr(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + v1);
    type metadata accessor for PgQuery_CaseTestExpr._StorageClass(0);
    v3 = swift_allocObject();
    v4 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
    Node = type metadata accessor for PgQuery_Node(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v4, 1, 1, Node);
    v6 = OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID;
    *(_DWORD *)(v3
              + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID) = 0;
    v7 = OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod;
    *(_DWORD *)(v3
              + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod) = 0;
    v8 = OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation;
    *(_DWORD *)(v3
              + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation) = 0;
    v9 = v2
       + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
    swift_retain();
    outlined assign with copy of PgQuery_Node?(v9, v4, &demangling cache variable for type metadata for PgQuery_Node?);
    *(_DWORD *)(v3 + v6) = *(_DWORD *)(v2
                                     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID);
    *(_DWORD *)(v3 + v7) = *(_DWORD *)(v2
                                     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod);
    LODWORD(v4) = *(_DWORD *)(v2
                            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation);
    swift_release();
    *(_DWORD *)(v3 + v8) = v4;
    *(_QWORD *)(v0 + v1) = v3;
    swift_release();
  }
  return *(_QWORD *)(v0 + v1);
}

uint64_t specialized PgQuery_BooleanTest._uniqueStorage()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Node;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v1 = *(int *)(type metadata accessor for PgQuery_BooleanTest(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + v1);
    type metadata accessor for PgQuery_BooleanTest._StorageClass(0);
    v3 = swift_allocObject();
    v4 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
    Node = type metadata accessor for PgQuery_Node(0);
    v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
    v6(v4, 1, 1, Node);
    v7 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
    v6(v3+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
    v8 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLtesttype;
    *(_QWORD *)v8 = 0;
    *(_BYTE *)(v8 + 8) = 1;
    v9 = OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
    *(_DWORD *)(v3
              + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
    v10 = v2
        + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
    swift_retain();
    outlined assign with copy of PgQuery_Node?(v10, v4, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined assign with copy of PgQuery_Node?(v2+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v7, &demangling cache variable for type metadata for PgQuery_Node?);
    v11 = *(_BYTE *)(v2
                   + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLtesttype
                   + 8);
    *(_QWORD *)v8 = *(_QWORD *)(v2
                              + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLtesttype);
    *(_BYTE *)(v8 + 8) = v11;
    LODWORD(v4) = *(_DWORD *)(v2
                            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    *(_DWORD *)(v3 + v9) = v4;
    *(_QWORD *)(v0 + v1) = v3;
    swift_release();
  }
  return *(_QWORD *)(v0 + v1);
}

uint64_t specialized PgQuery_NextValueExpr._uniqueStorage()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(int *)(type metadata accessor for PgQuery_NextValueExpr(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + v1);
    type metadata accessor for PgQuery_NextValueExpr._StorageClass(0);
    v3 = swift_allocObject();
    v4 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
    Node = type metadata accessor for PgQuery_Node(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v4, 1, 1, Node);
    v6 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__seqid;
    *(_DWORD *)(v3
              + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__seqid) = 0;
    v7 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID;
    *(_DWORD *)(v3
              + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID) = 0;
    v8 = v2
       + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
    swift_retain();
    outlined assign with copy of PgQuery_Node?(v8, v4, &demangling cache variable for type metadata for PgQuery_Node?);
    *(_DWORD *)(v3 + v6) = *(_DWORD *)(v2
                                     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__seqid);
    LODWORD(v4) = *(_DWORD *)(v2
                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID);
    swift_release();
    *(_DWORD *)(v3 + v7) = v4;
    *(_QWORD *)(v0 + v1) = v3;
    swift_release();
  }
  return *(_QWORD *)(v0 + v1);
}

uint64_t specialized PgQuery_InferenceElem._uniqueStorage()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Node;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(int *)(type metadata accessor for PgQuery_InferenceElem(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + v1);
    type metadata accessor for PgQuery_InferenceElem._StorageClass(0);
    v3 = swift_allocObject();
    v4 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
    Node = type metadata accessor for PgQuery_Node(0);
    v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
    v6(v4, 1, 1, Node);
    v7 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr;
    v6(v3+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, 1, 1, Node);
    v8 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__infercollid;
    *(_DWORD *)(v3
              + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__infercollid) = 0;
    v9 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inferopclass;
    *(_DWORD *)(v3
              + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inferopclass) = 0;
    v10 = v2
        + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
    swift_retain();
    outlined assign with copy of PgQuery_Node?(v10, v4, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined assign with copy of PgQuery_Node?(v2+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, v7, &demangling cache variable for type metadata for PgQuery_Node?);
    *(_DWORD *)(v3 + v8) = *(_DWORD *)(v2
                                     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__infercollid);
    LODWORD(v4) = *(_DWORD *)(v2
                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inferopclass);
    swift_release();
    *(_DWORD *)(v3 + v9) = v4;
    *(_QWORD *)(v0 + v1) = v3;
    swift_release();
  }
  return *(_QWORD *)(v0 + v1);
}

uint64_t specialized PgQuery_FromExpr._uniqueStorage()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;

  v1 = *(int *)(type metadata accessor for PgQuery_FromExpr(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + v1);
    type metadata accessor for PgQuery_FromExpr._StorageClass(0);
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = MEMORY[0x1E0DEE9D8];
    v4 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FromExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__quals;
    Node = type metadata accessor for PgQuery_Node(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v4, 1, 1, Node);
    *(_QWORD *)(v3 + 16) = *(_QWORD *)(v2 + 16);
    v6 = v2
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FromExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__quals;
    swift_retain();
    swift_bridgeObjectRetain();
    outlined destroy of (key: String, value: StorableValue)(v4, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined init with copy of PgQuery_Alias?(v6, v4, &demangling cache variable for type metadata for PgQuery_Node?);
    swift_release();
    *(_QWORD *)(v0 + v1) = v3;
    swift_release();
  }
  return *(_QWORD *)(v0 + v1);
}

uint64_t specialized PgQuery_RawStmt._uniqueStorage()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(int *)(type metadata accessor for PgQuery_RawStmt(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + v1);
    type metadata accessor for PgQuery_RawStmt._StorageClass(0);
    v3 = swift_allocObject();
    v4 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmt;
    Node = type metadata accessor for PgQuery_Node(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v4, 1, 1, Node);
    v6 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLocation;
    *(_DWORD *)(v3
              + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLocation) = 0;
    v7 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLen;
    *(_DWORD *)(v3
              + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLen) = 0;
    v8 = v2
       + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmt;
    swift_retain();
    outlined assign with copy of PgQuery_Node?(v8, v4, &demangling cache variable for type metadata for PgQuery_Node?);
    *(_DWORD *)(v3 + v6) = *(_DWORD *)(v2
                                     + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLocation);
    LODWORD(v4) = *(_DWORD *)(v2
                            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLen);
    swift_release();
    *(_DWORD *)(v3 + v7) = v4;
    *(_QWORD *)(v0 + v1) = v3;
    swift_release();
  }
  return *(_QWORD *)(v0 + v1);
}

uint64_t specialized PgQuery_CommentStmt._uniqueStorage()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Node;
  _QWORD *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(int *)(type metadata accessor for PgQuery_CommentStmt(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + v1);
    type metadata accessor for PgQuery_CommentStmt._StorageClass(0);
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = 0;
    *(_BYTE *)(v3 + 24) = 1;
    v4 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CommentStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
    Node = type metadata accessor for PgQuery_Node(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v4, 1, 1, Node);
    v6 = (_QWORD *)(v3
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CommentStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__comment);
    *v6 = 0;
    v6[1] = 0xE000000000000000;
    v7 = *(_BYTE *)(v2 + 24);
    *(_QWORD *)(v3 + 16) = *(_QWORD *)(v2 + 16);
    *(_BYTE *)(v3 + 24) = v7;
    v8 = v2
       + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CommentStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
    swift_retain();
    outlined assign with copy of PgQuery_Node?(v8, v4, &demangling cache variable for type metadata for PgQuery_Node?);
    v10 = *(_QWORD *)(v2
                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CommentStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__comment);
    v9 = *(_QWORD *)(v2
                   + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CommentStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__comment
                   + 8);
    swift_bridgeObjectRetain();
    swift_release();
    swift_bridgeObjectRelease();
    *v6 = v10;
    v6[1] = v9;
    *(_QWORD *)(v0 + v1) = v3;
    swift_release();
  }
  return *(_QWORD *)(v0 + v1);
}

uint64_t specialized PgQuery_AlternativeSubPlan._uniqueStorage()(uint64_t (*a1)(_QWORD), void (*a2)(_QWORD), _QWORD *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Node;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v9 = *(_QWORD *)(v4 + v8);
    a2(0);
    v10 = swift_allocObject();
    v11 = v10 + *a3;
    Node = type metadata accessor for PgQuery_Node(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v11, 1, 1, Node);
    v13 = *a4;
    *(_QWORD *)(v10 + *a4) = MEMORY[0x1E0DEE9D8];
    v14 = v9 + *a3;
    swift_retain();
    outlined assign with copy of PgQuery_Node?(v14, v11, &demangling cache variable for type metadata for PgQuery_Node?);
    v15 = *(_QWORD *)(v9 + *a4);
    swift_bridgeObjectRetain();
    swift_release();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v10 + v13) = v15;
    *(_QWORD *)(v4 + v8) = v10;
    swift_release();
  }
  return *(_QWORD *)(v4 + v8);
}

uint64_t specialized PgQuery_A_Indices._uniqueStorage()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Node;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(int *)(type metadata accessor for PgQuery_A_Indices(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + v1);
    type metadata accessor for PgQuery_A_Indices._StorageClass(0);
    v3 = swift_allocObject();
    *(_BYTE *)(v3 + 16) = 0;
    v4 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_A_IndicesP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lidx;
    Node = type metadata accessor for PgQuery_Node(0);
    v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
    v6(v4, 1, 1, Node);
    v7 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_A_IndicesP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__uidx;
    v6(v3 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_A_IndicesP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__uidx, 1, 1, Node);
    *(_BYTE *)(v3 + 16) = *(_BYTE *)(v2 + 16);
    v8 = v2
       + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_A_IndicesP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lidx;
    swift_retain();
    outlined assign with copy of PgQuery_Node?(v8, v4, &demangling cache variable for type metadata for PgQuery_Node?);
    v9 = v2
       + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_A_IndicesP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__uidx;
    outlined destroy of (key: String, value: StorableValue)(v7, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined init with copy of PgQuery_Alias?(v9, v7, &demangling cache variable for type metadata for PgQuery_Node?);
    swift_release();
    *(_QWORD *)(v0 + v1) = v3;
    swift_release();
  }
  return *(_QWORD *)(v0 + v1);
}

uint64_t specialized PgQuery_MultiAssignRef._uniqueStorage()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(int *)(type metadata accessor for PgQuery_MultiAssignRef(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + v1);
    type metadata accessor for PgQuery_MultiAssignRef._StorageClass(0);
    v3 = swift_allocObject();
    v4 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__source;
    Node = type metadata accessor for PgQuery_Node(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v4, 1, 1, Node);
    v6 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colno;
    *(_DWORD *)(v3
              + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colno) = 0;
    v7 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ncolumns;
    *(_DWORD *)(v3
              + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ncolumns) = 0;
    v8 = v2
       + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__source;
    swift_retain();
    outlined assign with copy of PgQuery_Node?(v8, v4, &demangling cache variable for type metadata for PgQuery_Node?);
    *(_DWORD *)(v3 + v6) = *(_DWORD *)(v2
                                     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colno);
    LODWORD(v4) = *(_DWORD *)(v2
                            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ncolumns);
    swift_release();
    *(_DWORD *)(v3 + v7) = v4;
    *(_QWORD *)(v0 + v1) = v3;
    swift_release();
  }
  return *(_QWORD *)(v0 + v1);
}

uint64_t specialized PgQuery_TypeCast._uniqueStorage()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t TypeName;
  uint64_t v8;
  uint64_t v9;

  v1 = *(int *)(type metadata accessor for PgQuery_TypeCast(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + v1);
    type metadata accessor for PgQuery_TypeCast._StorageClass(0);
    v3 = swift_allocObject();
    v4 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
    Node = type metadata accessor for PgQuery_Node(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v4, 1, 1, Node);
    v6 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName;
    TypeName = type metadata accessor for PgQuery_TypeName(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TypeName - 8) + 56))(v6, 1, 1, TypeName);
    v8 = OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
    *(_DWORD *)(v3
              + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
    v9 = v2
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
    swift_retain();
    outlined assign with copy of PgQuery_Node?(v9, v4, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined assign with copy of PgQuery_Node?(v2+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, v6, &demangling cache variable for type metadata for PgQuery_TypeName?);
    LODWORD(v4) = *(_DWORD *)(v2
                            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    *(_DWORD *)(v3 + v8) = v4;
    *(_QWORD *)(v0 + v1) = v3;
    swift_release();
  }
  return *(_QWORD *)(v0 + v1);
}

uint64_t specialized PgQuery_CollateClause._uniqueStorage()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(int *)(type metadata accessor for PgQuery_CollateClause(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + v1);
    type metadata accessor for PgQuery_CollateClause._StorageClass(0);
    v3 = swift_allocObject();
    v4 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
    Node = type metadata accessor for PgQuery_Node(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v4, 1, 1, Node);
    v6 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collname;
    *(_QWORD *)(v3
              + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collname) = MEMORY[0x1E0DEE9D8];
    v7 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
    *(_DWORD *)(v3
              + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
    v8 = v2
       + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
    swift_retain();
    outlined assign with copy of PgQuery_Node?(v8, v4, &demangling cache variable for type metadata for PgQuery_Node?);
    *(_QWORD *)(v3 + v6) = *(_QWORD *)(v2
                                     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collname);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    LODWORD(v4) = *(_DWORD *)(v2
                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    *(_DWORD *)(v3 + v7) = v4;
    *(_QWORD *)(v0 + v1) = v3;
    swift_release();
  }
  return *(_QWORD *)(v0 + v1);
}

uint64_t specialized PgQuery_RangeSubselect._uniqueStorage()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t Alias;
  uint64_t v8;
  uint64_t v9;

  v1 = *(int *)(type metadata accessor for PgQuery_RangeSubselect(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + v1);
    type metadata accessor for PgQuery_RangeSubselect._StorageClass(0);
    v3 = swift_allocObject();
    *(_BYTE *)(v3 + 16) = 0;
    v4 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeSubselectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subquery;
    Node = type metadata accessor for PgQuery_Node(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v4, 1, 1, Node);
    v6 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeSubselectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias;
    Alias = type metadata accessor for PgQuery_Alias(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Alias - 8) + 56))(v6, 1, 1, Alias);
    *(_BYTE *)(v3 + 16) = *(_BYTE *)(v2 + 16);
    v8 = v2
       + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeSubselectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subquery;
    swift_retain();
    outlined assign with copy of PgQuery_Node?(v8, v4, &demangling cache variable for type metadata for PgQuery_Node?);
    v9 = v2
       + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeSubselectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias;
    outlined destroy of (key: String, value: StorableValue)(v6, &demangling cache variable for type metadata for PgQuery_Alias?);
    outlined init with copy of PgQuery_Alias?(v9, v6, &demangling cache variable for type metadata for PgQuery_Alias?);
    swift_release();
    *(_QWORD *)(v0 + v1) = v3;
    swift_release();
  }
  return *(_QWORD *)(v0 + v1);
}

uint64_t specialized PgQuery_XmlSerialize._uniqueStorage()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t TypeName;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v1 = *(int *)(type metadata accessor for PgQuery_XmlSerialize(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + v1);
    type metadata accessor for PgQuery_XmlSerialize._StorageClass(0);
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = 0;
    *(_BYTE *)(v3 + 24) = 1;
    v4 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr;
    Node = type metadata accessor for PgQuery_Node(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v4, 1, 1, Node);
    v6 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName;
    TypeName = type metadata accessor for PgQuery_TypeName(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TypeName - 8) + 56))(v6, 1, 1, TypeName);
    v8 = OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
    *(_DWORD *)(v3
              + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
    v9 = *(_BYTE *)(v2 + 24);
    *(_QWORD *)(v3 + 16) = *(_QWORD *)(v2 + 16);
    *(_BYTE *)(v3 + 24) = v9;
    v10 = v2
        + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr;
    swift_retain();
    outlined assign with copy of PgQuery_Node?(v10, v4, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined assign with copy of PgQuery_Node?(v2+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, v6, &demangling cache variable for type metadata for PgQuery_TypeName?);
    LODWORD(v4) = *(_DWORD *)(v2
                            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    *(_DWORD *)(v3 + v8) = v4;
    *(_QWORD *)(v0 + v1) = v3;
    swift_release();
  }
  return *(_QWORD *)(v0 + v1);
}

uint64_t specialized PgQuery_PartitionRangeDatum._uniqueStorage()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v1 = *(int *)(type metadata accessor for PgQuery_PartitionRangeDatum(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + v1);
    type metadata accessor for PgQuery_PartitionRangeDatum._StorageClass(0);
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = 0;
    *(_BYTE *)(v3 + 24) = 1;
    v4 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_PartitionRangeDatumP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__value;
    Node = type metadata accessor for PgQuery_Node(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v4, 1, 1, Node);
    v6 = OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_PartitionRangeDatumP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
    *(_DWORD *)(v3
              + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_PartitionRangeDatumP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
    v7 = *(_BYTE *)(v2 + 24);
    *(_QWORD *)(v3 + 16) = *(_QWORD *)(v2 + 16);
    *(_BYTE *)(v3 + 24) = v7;
    v8 = v2
       + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_PartitionRangeDatumP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__value;
    swift_retain();
    outlined assign with copy of PgQuery_Node?(v8, v4, &demangling cache variable for type metadata for PgQuery_Node?);
    LODWORD(v4) = *(_DWORD *)(v2
                            + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_PartitionRangeDatumP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    *(_DWORD *)(v3 + v6) = v4;
    *(_QWORD *)(v0 + v1) = v3;
    swift_release();
  }
  return *(_QWORD *)(v0 + v1);
}

uint64_t specialized PgQuery_TableFunc._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t Node;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1 + 24) = v3;
  v4 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__docexpr;
  v14 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__docexpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v6(v4, 1, 1, Node);
  v7 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowexpr;
  v6(v1+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowexpr, 1, 1, Node);
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colnames;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colnames) = v3;
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypes;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypes) = v3;
  v10 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypmods;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypmods) = v3;
  v11 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colcollations;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colcollations) = v3;
  v12 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colexprs;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colexprs) = v3;
  v15 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coldefexprs;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coldefexprs) = v3;
  v16 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__notnulls;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__notnulls) = v3;
  v18 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ordinalitycol;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ordinalitycol) = 0;
  v17 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__docexpr, v14, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowexpr, v7, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_QWORD *)(v1 + v8) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colnames);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v9) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypes);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v10) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypmods);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v11) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colcollations);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v12) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colexprs);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v15) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coldefexprs);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v16) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__notnulls);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + v18) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ordinalitycol);
  *(_DWORD *)(v1 + v17) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  return v1;
}

uint64_t specialized PgQuery_Var._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v3 = v1 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  v15 = v1 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v3, 1, 1, Node);
  v14 = OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varno;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varno) = 0;
  v5 = OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varattno;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varattno) = 0;
  v6 = OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__vartype;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__vartype) = 0;
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__vartypmod;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__vartypmod) = 0;
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varcollid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varcollid) = 0;
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varlevelsup;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varlevelsup) = 0;
  v10 = OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varnosyn;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varnosyn) = 0;
  v11 = OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varattnosyn;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varattnosyn) = 0;
  v12 = OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v15, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v14) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varno);
  *(_DWORD *)(v1 + v5) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varattno);
  *(_DWORD *)(v1 + v6) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__vartype);
  *(_DWORD *)(v1 + v7) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__vartypmod);
  *(_DWORD *)(v1 + v8) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varcollid);
  *(_DWORD *)(v1 + v9) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varlevelsup);
  *(_DWORD *)(v1 + v10) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varnosyn);
  *(_DWORD *)(v1 + v11) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varattnosyn);
  *(_DWORD *)(v1 + v12) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  return v1;
}

uint64_t specialized PgQuery_Param._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v3 = v1 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v3, 1, 1, Node);
  v5 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramkind;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramid) = 0;
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramtype;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramtype) = 0;
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramtypmod;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramtypmod) = 0;
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramcollid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramcollid) = 0;
  v10 = OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  v11 = *(_BYTE *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramkind
                 + 8);
  *(_QWORD *)v5 = *(_QWORD *)(a1
                            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramkind);
  *(_BYTE *)(v5 + 8) = v11;
  *(_DWORD *)(v1 + v6) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramid);
  *(_DWORD *)(v1 + v7) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramtype);
  *(_DWORD *)(v1 + v8) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramtypmod);
  *(_DWORD *)(v1 + v9) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramcollid);
  *(_DWORD *)(v1 + v10) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  return v1;
}

uint64_t specialized PgQuery_Aggref._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  void (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = v1 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  v22 = v1 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(void (**)(void))(*(_QWORD *)(Node - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5)(v3, 1, 1, Node);
  v21 = OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfnoid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfnoid) = 0;
  v6 = OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggtype;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggtype) = 0;
  v20 = OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggcollid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggcollid) = 0;
  v19 = OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) = 0;
  v18 = OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggtranstype;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggtranstype) = 0;
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggargtypes;
  v8 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggargtypes) = MEMORY[0x1E0DEE9D8];
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggdirectargs;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggdirectargs) = v8;
  v10 = OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = v8;
  v11 = OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggorder;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggorder) = v8;
  v23 = OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggdistinct;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggdistinct) = v8;
  v25 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfilter;
  v5();
  v24 = OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggstar;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggstar) = 0;
  v12 = OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggvariadic;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggvariadic) = 0;
  v13 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggkind);
  *v13 = 0;
  v13[1] = 0xE000000000000000;
  v26 = OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__agglevelsup;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__agglevelsup) = 0;
  v14 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggsplit;
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  v27 = OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v22, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v21) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfnoid);
  *(_DWORD *)(v1 + v6) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggtype);
  *(_DWORD *)(v1 + v20) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggcollid);
  *(_DWORD *)(v1 + v19) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid);
  *(_DWORD *)(v1 + v18) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggtranstype);
  *(_QWORD *)(v1 + v7) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggargtypes);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v9) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggdirectargs);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v10) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v11) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggorder);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v23) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggdistinct);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfilter, v25, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_BYTE *)(v1 + v24) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggstar);
  *(_BYTE *)(v1 + v12) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggvariadic);
  v15 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggkind
                  + 8);
  *v13 = *(_QWORD *)(a1
                   + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggkind);
  v13[1] = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + v26) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__agglevelsup);
  v16 = *(_BYTE *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggsplit
                 + 8);
  *(_QWORD *)v14 = *(_QWORD *)(a1
                             + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggsplit);
  *(_BYTE *)(v14 + 8) = v16;
  *(_DWORD *)(v1 + v27) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  return v1;
}

uint64_t specialized PgQuery_GroupingFunc._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v3, 1, 1, Node);
  v5 = OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args;
  v6 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E0DEE9D8];
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refs;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refs) = v6;
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cols;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cols) = v6;
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__agglevelsup;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__agglevelsup) = 0;
  v10 = OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_QWORD *)(v1 + v5) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v7) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refs);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v8) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cols);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + v9) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__agglevelsup);
  *(_DWORD *)(v1 + v10) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  return v1;
}

uint64_t specialized PgQuery_WindowFunc._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  void (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(void (**)(void))(*(_QWORD *)(Node - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5)(v3, 1, 1, Node);
  v6 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winfnoid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winfnoid) = 0;
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__wintype;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__wintype) = 0;
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__wincollid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__wincollid) = 0;
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) = 0;
  v10 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E0DEE9D8];
  v16 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfilter;
  v5();
  v11 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winref;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winref) = 0;
  v12 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winstar;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winstar) = 0;
  v14 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winagg;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winagg) = 0;
  v15 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v6) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winfnoid);
  *(_DWORD *)(v1 + v7) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__wintype);
  *(_DWORD *)(v1 + v8) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__wincollid);
  *(_DWORD *)(v1 + v9) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid);
  *(_QWORD *)(v1 + v10) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfilter, v16, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v11) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winref);
  *(_BYTE *)(v1 + v12) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winstar);
  *(_BYTE *)(v1 + v14) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winagg);
  *(_DWORD *)(v1 + v15) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  return v1;
}

uint64_t specialized PgQuery_FuncExpr._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  uint64_t v16;

  v3 = v1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  v15 = v1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v3, 1, 1, Node);
  v5 = OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcid) = 0;
  v6 = OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcresulttype;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcresulttype) = 0;
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcretset;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcretset) = 0;
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcvariadic;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcvariadic) = 0;
  v9 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcformat;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccollid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccollid) = 0;
  v11 = OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) = 0;
  v12 = OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E0DEE9D8];
  v16 = OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v15, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v5) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcid);
  *(_DWORD *)(v1 + v6) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcresulttype);
  *(_BYTE *)(v1 + v7) = *(_BYTE *)(a1
                                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcretset);
  *(_BYTE *)(v1 + v8) = *(_BYTE *)(a1
                                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcvariadic);
  v13 = *(_BYTE *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcformat
                 + 8);
  *(_QWORD *)v9 = *(_QWORD *)(a1
                            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcformat);
  *(_BYTE *)(v9 + 8) = v13;
  *(_DWORD *)(v1 + v10) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccollid);
  *(_DWORD *)(v1 + v11) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid);
  *(_QWORD *)(v1 + v12) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + v16) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  return v1;
}

uint64_t specialized PgQuery_NamedArgExpr._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v5(v3, 1, 1, Node);
  v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  v5(v1 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  v7 = (_QWORD *)(v1
                + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name);
  *v7 = 0;
  v7[1] = 0xE000000000000000;
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argnumber;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argnumber) = 0;
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v6, &demangling cache variable for type metadata for PgQuery_Node?);
  v10 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name
                  + 8);
  *v7 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name);
  v7[1] = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + v8) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argnumber);
  *(_DWORD *)(v1 + v9) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  return v1;
}

uint64_t specialized PgQuery_OpExpr._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = v1 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v3, 1, 1, Node);
  v5 = OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno) = 0;
  v6 = OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid) = 0;
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype) = 0;
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset) = 0;
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid) = 0;
  v10 = OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) = 0;
  v11 = OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E0DEE9D8];
  v13 = OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v5) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno);
  *(_DWORD *)(v1 + v6) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid);
  *(_DWORD *)(v1 + v7) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype);
  *(_BYTE *)(v1 + v8) = *(_BYTE *)(a1
                                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset);
  *(_DWORD *)(v1 + v9) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid);
  *(_DWORD *)(v1 + v10) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid);
  *(_QWORD *)(v1 + v11) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + v13) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  return v1;
}

uint64_t specialized PgQuery_DistinctExpr._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v3, 1, 1, Node);
  v5 = OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno) = 0;
  v6 = OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid) = 0;
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype) = 0;
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset) = 0;
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid) = 0;
  v10 = OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) = 0;
  v11 = OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E0DEE9D8];
  v13 = OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v5) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno);
  *(_DWORD *)(v1 + v6) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid);
  *(_DWORD *)(v1 + v7) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype);
  *(_BYTE *)(v1 + v8) = *(_BYTE *)(a1
                                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset);
  *(_DWORD *)(v1 + v9) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid);
  *(_DWORD *)(v1 + v10) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid);
  *(_QWORD *)(v1 + v11) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + v13) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  return v1;
}

uint64_t specialized PgQuery_NullIfExpr._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v3, 1, 1, Node);
  v5 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno) = 0;
  v6 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid) = 0;
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype) = 0;
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset) = 0;
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid) = 0;
  v10 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) = 0;
  v11 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E0DEE9D8];
  v13 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v5) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno);
  *(_DWORD *)(v1 + v6) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid);
  *(_DWORD *)(v1 + v7) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype);
  *(_BYTE *)(v1 + v8) = *(_BYTE *)(a1
                                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset);
  *(_DWORD *)(v1 + v9) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid);
  *(_DWORD *)(v1 + v10) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid);
  *(_QWORD *)(v1 + v11) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + v13) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  return v1;
}

uint64_t specialized PgQuery_ScalarArrayOpExpr._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v3, 1, 1, Node);
  v5 = OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno) = 0;
  v6 = OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid) = 0;
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useOr;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useOr) = 0;
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) = 0;
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E0DEE9D8];
  v10 = OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v5) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno);
  *(_DWORD *)(v1 + v6) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid);
  *(_BYTE *)(v1 + v7) = *(_BYTE *)(a1
                                 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useOr);
  *(_DWORD *)(v1 + v8) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid);
  *(_QWORD *)(v1 + v9) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + v10) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  return v1;
}

uint64_t specialized PgQuery_BoolExpr._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = v1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v3, 1, 1, Node);
  v5 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLop;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E0DEE9D8];
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  v8 = *(_BYTE *)(a1
                + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLop
                + 8);
  *(_QWORD *)v5 = *(_QWORD *)(a1
                            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLop);
  *(_BYTE *)(v5 + 8) = v8;
  *(_QWORD *)(v1 + v6) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + v7) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  return v1;
}

uint64_t specialized PgQuery_SubLink._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = v1 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v5(v3, 1, 1, Node);
  v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkID;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkID) = 0;
  v8 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__testexpr;
  v5(v1 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__testexpr, 1, 1, Node);
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__operName;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__operName) = MEMORY[0x1E0DEE9D8];
  v10 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subselect;
  v5(v1+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subselect, 1, 1, Node);
  v11 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  v12 = *(_BYTE *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType
                 + 8);
  *(_QWORD *)v6 = *(_QWORD *)(a1
                            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType);
  *(_BYTE *)(v6 + 8) = v12;
  *(_DWORD *)(v1 + v7) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkID);
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__testexpr, v8, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_QWORD *)(v1 + v9) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__operName);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subselect, v10, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v11) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  return v1;
}

uint64_t specialized PgQuery_SubPlan._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = v1 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  v17 = v1 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v5(v3, 1, 1, Node);
  v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__testexpr;
  v5(v1 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__testexpr, 1, 1, Node);
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramIds;
  v9 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramIds) = MEMORY[0x1E0DEE9D8];
  v18 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__planID;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__planID) = 0;
  v10 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__planName);
  *v10 = 0;
  v10[1] = 0xE000000000000000;
  v24 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColType;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColType) = 0;
  v23 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColTypmod;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColTypmod) = 0;
  v22 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColCollation;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColCollation) = 0;
  v21 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useHashTable;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useHashTable) = 0;
  v20 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__unknownEqFalse;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__unknownEqFalse) = 0;
  v19 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__parallelSafe;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__parallelSafe) = 0;
  v11 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__setParam;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__setParam) = v9;
  v12 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__parParam;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__parParam) = v9;
  v13 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = v9;
  v26 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startupCost;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startupCost) = 0;
  v25 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__perCallCost;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__perCallCost) = 0;
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v17, &demangling cache variable for type metadata for PgQuery_Node?);
  v14 = *(_BYTE *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType
                 + 8);
  *(_QWORD *)v6 = *(_QWORD *)(a1
                            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType);
  *(_BYTE *)(v6 + 8) = v14;
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__testexpr, v7, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_QWORD *)(v1 + v8) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramIds);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + v18) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__planID);
  v15 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__planName
                  + 8);
  *v10 = *(_QWORD *)(a1
                   + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__planName);
  v10[1] = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + v24) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColType);
  *(_DWORD *)(v1 + v23) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColTypmod);
  *(_DWORD *)(v1 + v22) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColCollation);
  *(_BYTE *)(v1 + v21) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useHashTable);
  *(_BYTE *)(v1 + v20) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__unknownEqFalse);
  *(_BYTE *)(v1 + v19) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__parallelSafe);
  *(_QWORD *)(v1 + v11) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__setParam);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v12) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__parParam);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v13) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v26) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startupCost);
  *(_QWORD *)(v1 + v25) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__perCallCost);
  return v1;
}

uint64_t specialized PgQuery_FieldSelect._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v5(v3, 1, 1, Node);
  v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  v5(v1 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fieldnum;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fieldnum) = 0;
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) = 0;
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod) = 0;
  v10 = OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid) = 0;
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v6, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v7) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fieldnum);
  *(_DWORD *)(v1 + v8) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype);
  *(_DWORD *)(v1 + v9) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod);
  *(_DWORD *)(v1 + v10) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid);
  return v1;
}

uint64_t specialized PgQuery_FieldStore._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v5(v3, 1, 1, Node);
  v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  v5(v1 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newvals;
  v8 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newvals) = MEMORY[0x1E0DEE9D8];
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fieldnums;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fieldnums) = v8;
  v10 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) = 0;
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v6, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_QWORD *)(v1 + v7) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newvals);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v9) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fieldnums);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + v10) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype);
  return v1;
}

uint64_t specialized PgQuery_RelabelType._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v5(v3, 1, 1, Node);
  v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  v5(v1 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) = 0;
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod) = 0;
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid) = 0;
  v10 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relabelformat;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v6, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v7) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype);
  *(_DWORD *)(v1 + v8) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod);
  *(_DWORD *)(v1 + v9) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid);
  v12 = *(_BYTE *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relabelformat
                 + 8);
  *(_QWORD *)v10 = *(_QWORD *)(a1
                             + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relabelformat);
  *(_BYTE *)(v10 + 8) = v12;
  *(_DWORD *)(v1 + v11) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  return v1;
}

uint64_t specialized PgQuery_CoerceViaIO._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v5(v3, 1, 1, Node);
  v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  v5(v1 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) = 0;
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid) = 0;
  v9 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v6, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v7) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype);
  *(_DWORD *)(v1 + v8) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid);
  v11 = *(_BYTE *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat
                 + 8);
  *(_QWORD *)v9 = *(_QWORD *)(a1
                            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat);
  *(_BYTE *)(v9 + 8) = v11;
  *(_DWORD *)(v1 + v10) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  return v1;
}

uint64_t specialized PgQuery_ArrayCoerceExpr._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;

  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  v15 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v5(v3, 1, 1, Node);
  v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  v5(v1+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  v7 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elemexpr;
  v5(v1+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elemexpr, 1, 1, Node);
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) = 0;
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod) = 0;
  v10 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid) = 0;
  v11 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat;
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v6, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elemexpr, v7, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v8) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype);
  *(_DWORD *)(v1 + v9) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod);
  *(_DWORD *)(v1 + v10) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid);
  v13 = *(_BYTE *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat
                 + 8);
  *(_QWORD *)v11 = *(_QWORD *)(a1
                             + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat);
  *(_BYTE *)(v11 + 8) = v13;
  *(_DWORD *)(v1 + v12) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  return v1;
}

uint64_t specialized PgQuery_ConvertRowtypeExpr._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v5(v3, 1, 1, Node);
  v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  v5(v1+ OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) = 0;
  v8 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__convertformat;
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v6, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v7) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype);
  v10 = *(_BYTE *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__convertformat
                 + 8);
  *(_QWORD *)v8 = *(_QWORD *)(a1
                            + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__convertformat);
  *(_BYTE *)(v8 + 8) = v10;
  *(_DWORD *)(v1 + v9) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  return v1;
}

uint64_t specialized PgQuery_CaseExpr._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = v1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v5(v3, 1, 1, Node);
  v6 = OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__casetype;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__casetype) = 0;
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__casecollid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__casecollid) = 0;
  v8 = v1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  v5(v1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E0DEE9D8];
  v10 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defresult;
  v5(v1+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defresult, 1, 1, Node);
  v11 = OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v6) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__casetype);
  *(_DWORD *)(v1 + v7) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__casecollid);
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v8, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_QWORD *)(v1 + v9) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defresult, v10, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v11) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  return v1;
}

uint64_t specialized PgQuery_ArrayExpr._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v1 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v3, 1, 1, Node);
  v5 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arrayTypeid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arrayTypeid) = 0;
  v6 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arrayCollid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arrayCollid) = 0;
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elementTypeid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elementTypeid) = 0;
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elements;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elements) = MEMORY[0x1E0DEE9D8];
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__multidims;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__multidims) = 0;
  v10 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v5) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arrayTypeid);
  *(_DWORD *)(v1 + v6) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arrayCollid);
  *(_DWORD *)(v1 + v7) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elementTypeid);
  *(_QWORD *)(v1 + v8) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elements);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v1 + v9) = *(_BYTE *)(a1
                                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__multidims);
  *(_DWORD *)(v1 + v10) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  return v1;
}

uint64_t specialized PgQuery_RowExpr._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v3 = v1 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v3, 1, 1, Node);
  v5 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args;
  v6 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E0DEE9D8];
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowTypeid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowTypeid) = 0;
  v8 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowFormat;
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colnames;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colnames) = v6;
  v10 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_QWORD *)(v1 + v5) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + v7) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowTypeid);
  v11 = *(_BYTE *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowFormat
                 + 8);
  *(_QWORD *)v8 = *(_QWORD *)(a1
                            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowFormat);
  *(_BYTE *)(v8 + 8) = v11;
  *(_QWORD *)(v1 + v9) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colnames);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + v10) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  return v1;
}

uint64_t specialized PgQuery_CoalesceExpr._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v3, 1, 1, Node);
  v5 = OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coalescetype;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coalescetype) = 0;
  v6 = OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coalescecollid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coalescecollid) = 0;
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E0DEE9D8];
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v5) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coalescetype);
  *(_DWORD *)(v1 + v6) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coalescecollid);
  *(_QWORD *)(v1 + v7) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + v8) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  return v1;
}

uint64_t specialized PgQuery_MinMaxExpr._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v3, 1, 1, Node);
  v5 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__minmaxtype;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__minmaxtype) = 0;
  v6 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__minmaxcollid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__minmaxcollid) = 0;
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) = 0;
  v8 = v1 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op;
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E0DEE9D8];
  v10 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v5) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__minmaxtype);
  *(_DWORD *)(v1 + v6) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__minmaxcollid);
  *(_DWORD *)(v1 + v7) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid);
  v11 = *(_BYTE *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op
                 + 8);
  *(_QWORD *)v8 = *(_QWORD *)(a1
                            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op);
  *(_BYTE *)(v8 + 8) = v11;
  *(_QWORD *)(v1 + v9) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + v10) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  return v1;
}

uint64_t specialized PgQuery_SQLValueFunction._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v3, 1, 1, Node);
  v5 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__type;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__type) = 0;
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typmod;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typmod) = 0;
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  v9 = *(_BYTE *)(a1
                + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op
                + 8);
  *(_QWORD *)v5 = *(_QWORD *)(a1
                            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op);
  *(_BYTE *)(v5 + 8) = v9;
  *(_DWORD *)(v1 + v6) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__type);
  *(_DWORD *)(v1 + v7) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typmod);
  *(_DWORD *)(v1 + v8) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  return v1;
}

uint64_t specialized PgQuery_XmlExpr._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v1 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v3, 1, 1, Node);
  v5 = v1 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = (_QWORD *)(v1
                + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name);
  *v6 = 0;
  v6[1] = 0xE000000000000000;
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__namedArgs;
  v8 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__namedArgs) = MEMORY[0x1E0DEE9D8];
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argNames;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argNames) = v8;
  v10 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = v8;
  v11 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xmloption;
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v18 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__type;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__type) = 0;
  v17 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typmod;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typmod) = 0;
  v12 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  v13 = *(_BYTE *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op
                 + 8);
  *(_QWORD *)v5 = *(_QWORD *)(a1
                            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op);
  *(_BYTE *)(v5 + 8) = v13;
  v14 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name
                  + 8);
  *v6 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name);
  v6[1] = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v7) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__namedArgs);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v9) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argNames);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v10) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = *(_BYTE *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xmloption
                 + 8);
  *(_QWORD *)v11 = *(_QWORD *)(a1
                             + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xmloption);
  *(_BYTE *)(v11 + 8) = v15;
  *(_DWORD *)(v1 + v18) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__type);
  *(_DWORD *)(v1 + v17) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typmod);
  *(_DWORD *)(v1 + v12) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  return v1;
}

uint64_t specialized PgQuery_NullTest._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = v1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v5(v3, 1, 1, Node);
  v6 = v1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  v5(v1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  v7 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nulltesttype;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argisrow;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argisrow) = 0;
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v6, &demangling cache variable for type metadata for PgQuery_Node?);
  v10 = *(_BYTE *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nulltesttype
                 + 8);
  *(_QWORD *)v7 = *(_QWORD *)(a1
                            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nulltesttype);
  *(_BYTE *)(v7 + 8) = v10;
  *(_BYTE *)(v1 + v8) = *(_BYTE *)(a1
                                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argisrow);
  *(_DWORD *)(v1 + v9) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  return v1;
}

uint64_t specialized PgQuery_CoerceToDomain._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v5(v3, 1, 1, Node);
  v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  v5(v1+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) = 0;
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod) = 0;
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid) = 0;
  v10 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coercionformat;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v6, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v7) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype);
  *(_DWORD *)(v1 + v8) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod);
  *(_DWORD *)(v1 + v9) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid);
  v12 = *(_BYTE *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coercionformat
                 + 8);
  *(_QWORD *)v10 = *(_QWORD *)(a1
                             + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coercionformat);
  *(_BYTE *)(v10 + 8) = v12;
  *(_DWORD *)(v1 + v11) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  return v1;
}

uint64_t specialized PgQuery_CoerceToDomainValue._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v3, 1, 1, Node);
  v5 = OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID) = 0;
  v6 = OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod) = 0;
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation) = 0;
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v5) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID);
  *(_DWORD *)(v1 + v6) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod);
  *(_DWORD *)(v1 + v7) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation);
  *(_DWORD *)(v1 + v8) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  return v1;
}

uint64_t specialized PgQuery_SetToDefault._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v3, 1, 1, Node);
  v5 = OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID) = 0;
  v6 = OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod) = 0;
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation) = 0;
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v5) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID);
  *(_DWORD *)(v1 + v6) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod);
  *(_DWORD *)(v1 + v7) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation);
  *(_DWORD *)(v1 + v8) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  return v1;
}

uint64_t specialized PgQuery_CurrentOfExpr._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v3, 1, 1, Node);
  v5 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cvarno;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cvarno) = 0;
  v6 = (_QWORD *)(v1
                + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cursorName);
  *v6 = 0;
  v6[1] = 0xE000000000000000;
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cursorParam;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cursorParam) = 0;
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v5) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cvarno);
  v8 = *(_QWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cursorName
                 + 8);
  *v6 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cursorName);
  v6[1] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + v7) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cursorParam);
  return v1;
}

uint64_t specialized PgQuery_TargetEntry._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v5(v3, 1, 1, Node);
  v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr;
  v5(v1 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, 1, 1, Node);
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resno;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resno) = 0;
  v8 = (_QWORD *)(v1
                + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resname);
  *v8 = 0;
  v8[1] = 0xE000000000000000;
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ressortgroupref;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ressortgroupref) = 0;
  v10 = OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resorigtbl;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resorigtbl) = 0;
  v11 = OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resorigcol;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resorigcol) = 0;
  v14 = OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resjunk;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resjunk) = 0;
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, v6, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v7) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resno);
  v12 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resname
                  + 8);
  *v8 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resname);
  v8[1] = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + v9) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ressortgroupref);
  *(_DWORD *)(v1 + v10) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resorigtbl);
  *(_DWORD *)(v1 + v11) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resorigcol);
  *(_BYTE *)(v1 + v14) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resjunk);
  return v1;
}

uint64_t specialized PgQuery_JoinExpr._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Alias;
  uint64_t v11;
  char v12;

  *(_QWORD *)(v1 + 16) = 0;
  *(_WORD *)(v1 + 24) = 1;
  v3 = v1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg;
  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56);
  v5(v3, 1, 1, Node);
  v6 = v1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg;
  v5(v1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, 1, 1, Node);
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__usingClause;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__usingClause) = MEMORY[0x1E0DEE9D8];
  v8 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__quals;
  v5(v1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__quals, 1, 1, Node);
  v9 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias;
  Alias = type metadata accessor for PgQuery_Alias(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Alias - 8) + 56))(v9, 1, 1, Alias);
  v11 = OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rtindex;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rtindex) = 0;
  v12 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v1 + 24) = v12;
  *(_BYTE *)(v1 + 25) = *(_BYTE *)(a1 + 25);
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, v6, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_QWORD *)(v1 + v7) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__usingClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__quals, v8, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias, v9, &demangling cache variable for type metadata for PgQuery_Alias?);
  *(_DWORD *)(v1 + v11) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rtindex);
  return v1;
}

uint64_t specialized PgQuery_IntoClause._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t RangeVar;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t Node;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rel;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v3, 1, 1, RangeVar);
  v5 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colNames;
  v6 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colNames) = MEMORY[0x1E0DEE9D8];
  v7 = (_QWORD *)(v1
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod);
  *v7 = 0;
  v7[1] = 0xE000000000000000;
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options) = v6;
  v9 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onCommit;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpaceName);
  *v10 = 0;
  v10[1] = 0xE000000000000000;
  v11 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__viewQuery;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v11, 1, 1, Node);
  v13 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__skipData;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__skipData) = 0;
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rel, v3, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  *(_QWORD *)(v1 + v5) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colNames);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                  + 8);
  *v7 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod);
  v7[1] = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v8) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = *(_BYTE *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onCommit
                 + 8);
  *(_QWORD *)v9 = *(_QWORD *)(a1
                            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onCommit);
  *(_BYTE *)(v9 + 8) = v15;
  v16 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpaceName
                  + 8);
  *v10 = *(_QWORD *)(a1
                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpaceName);
  v10[1] = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__viewQuery, v11, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_BYTE *)(v1 + v13) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__skipData);
  return v1;
}

uint64_t specialized PgQuery_Query._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Node;
  void (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  char v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 1;
  *(_QWORD *)(v1 + 32) = 0;
  *(_WORD *)(v1 + 40) = 1;
  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__utilityStmt;
  v33 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__utilityStmt;
  Node = type metadata accessor for PgQuery_Node(0);
  v5 = *(void (**)(void))(*(_QWORD *)(Node - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5)(v3, 1, 1, Node);
  v32 = OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultRelation;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultRelation) = 0;
  v31 = OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasAggs_p;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasAggs_p) = 0;
  v30 = OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasWindowFuncs_p;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasWindowFuncs_p) = 0;
  v29 = OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasTargetSrfs_p;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasTargetSrfs_p) = 0;
  v28 = OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasSubLinks_p;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasSubLinks_p) = 0;
  v27 = OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasDistinctOn_p;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasDistinctOn_p) = 0;
  v26 = OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasRecursive_p;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasRecursive_p) = 0;
  v25 = OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasModifyingCte_p;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasModifyingCte_p) = 0;
  v24 = OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasForUpdate_p;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasForUpdate_p) = 0;
  v23 = OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasRowSecurity_p;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasRowSecurity_p) = 0;
  v6 = OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cteList;
  v7 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cteList) = MEMORY[0x1E0DEE9D8];
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rtable;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rtable) = v7;
  v9 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointree;
  v35 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointree;
  v10 = type metadata accessor for PgQuery_FromExpr(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList) = v7;
  v12 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override;
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  v13 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflict;
  v36 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflict;
  v14 = type metadata accessor for PgQuery_OnConflictExpr(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v34 = OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList) = v7;
  v37 = OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClause;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClause) = v7;
  v38 = OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupingSets;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupingSets) = v7;
  v40 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__havingQual;
  v5();
  v39 = OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__windowClause;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__windowClause) = v7;
  v41 = OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__distinctClause;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__distinctClause) = v7;
  v42 = OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortClause;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortClause) = v7;
  v45 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOffset;
  v5();
  v44 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitCount;
  v5();
  v15 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption;
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  v43 = OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowMarks;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowMarks) = v7;
  v46 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__setOperations;
  v5();
  v16 = OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraintDeps;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraintDeps) = v7;
  v47 = OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheckOptions;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheckOptions) = v7;
  v17 = OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLocation;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLocation) = 0;
  v48 = OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLen;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLen) = 0;
  v18 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v1 + 24) = v18;
  v19 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(v1 + 32) = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v1 + 40) = v19;
  *(_BYTE *)(v1 + 41) = *(_BYTE *)(a1 + 41);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__utilityStmt, v33, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v32) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultRelation);
  *(_BYTE *)(v1 + v31) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasAggs_p);
  *(_BYTE *)(v1 + v30) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasWindowFuncs_p);
  *(_BYTE *)(v1 + v29) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasTargetSrfs_p);
  *(_BYTE *)(v1 + v28) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasSubLinks_p);
  *(_BYTE *)(v1 + v27) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasDistinctOn_p);
  *(_BYTE *)(v1 + v26) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasRecursive_p);
  *(_BYTE *)(v1 + v25) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasModifyingCte_p);
  *(_BYTE *)(v1 + v24) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasForUpdate_p);
  *(_BYTE *)(v1 + v23) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasRowSecurity_p);
  *(_QWORD *)(v1 + v6) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cteList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v8) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rtable);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointree, v35, &demangling cache variable for type metadata for PgQuery_FromExpr?);
  *(_QWORD *)(v1 + v11) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = *(_BYTE *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override
                 + 8);
  *(_QWORD *)v12 = *(_QWORD *)(a1
                             + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override);
  *(_BYTE *)(v12 + 8) = v20;
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflict, v36, &demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
  *(_QWORD *)(v1 + v34) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v37) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v38) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupingSets);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__havingQual, v40, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_QWORD *)(v1 + v39) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__windowClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v41) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__distinctClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v42) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOffset, v45, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitCount, v44, &demangling cache variable for type metadata for PgQuery_Node?);
  v21 = *(_BYTE *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption
                 + 8);
  *(_QWORD *)v15 = *(_QWORD *)(a1
                             + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption);
  *(_BYTE *)(v15 + 8) = v21;
  *(_QWORD *)(v1 + v43) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowMarks);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__setOperations, v46, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_QWORD *)(v1 + v16) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraintDeps);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v47) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheckOptions);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + v17) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLocation);
  *(_DWORD *)(v1 + v48) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLen);
  return v1;
}

uint64_t specialized PgQuery_InsertStmt._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t RangeVar;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Node;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v3, 1, 1, RangeVar);
  v5 = MEMORY[0x1E0DEE9D8];
  v6 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cols;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cols) = MEMORY[0x1E0DEE9D8];
  v7 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selectStmt;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v7, 1, 1, Node);
  v9 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictClause;
  v10 = type metadata accessor for PgQuery_OnConflictClause(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList) = v5;
  v12 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause;
  v13 = type metadata accessor for PgQuery_WithClause(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override;
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, v3, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  *(_QWORD *)(v1 + v6) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cols);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selectStmt, v7, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictClause, v9, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  *(_QWORD *)(v1 + v11) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, v12, &demangling cache variable for type metadata for PgQuery_WithClause?);
  v15 = *(_BYTE *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override
                 + 8);
  *(_QWORD *)v14 = *(_QWORD *)(a1
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override);
  *(_BYTE *)(v14 + 8) = v15;
  return v1;
}

uint64_t specialized PgQuery_AlterTableCmd._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t RoleSpec;
  uint64_t v5;
  uint64_t Node;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;

  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 1;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0xE000000000000000;
  *(_DWORD *)(v1 + 48) = 0;
  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newowner;
  RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RoleSpec - 8) + 56))(v3, 1, 1, RoleSpec);
  v5 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__def;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v5, 1, 1, Node);
  v7 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk) = 0;
  v9 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v1 + 24) = v9;
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v1 + 32) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v1 + 40) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + 48) = *(_DWORD *)(a1 + 48);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newowner, v3, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__def, v5, &demangling cache variable for type metadata for PgQuery_Node?);
  v11 = *(_BYTE *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior
                 + 8);
  *(_QWORD *)v7 = *(_QWORD *)(a1
                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior);
  *(_BYTE *)(v7 + 8) = v11;
  *(_BYTE *)(v1 + v8) = *(_BYTE *)(a1
                                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk);
  return v1;
}

_QWORD *specialized PgQuery_AlterDomainStmt._StorageClass.init(copying:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t Node;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1[2] = 0;
  v1[3] = 0xE000000000000000;
  v1[4] = MEMORY[0x1E0DEE9D8];
  v1[5] = 0;
  v1[6] = 0xE000000000000000;
  v3 = (uint64_t)v1
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__def;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v3, 1, 1, Node);
  v5 = (char *)v1
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior;
  *(_QWORD *)v5 = 0;
  v5[8] = 1;
  v6 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk;
  *((_BYTE *)v1
  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk) = 0;
  v7 = a1[3];
  v1[2] = a1[2];
  v1[3] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v1[4] = a1[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = a1[6];
  v1[5] = a1[5];
  v1[6] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?((uint64_t)a1+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__def, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  v9 = *((_BYTE *)a1
       + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior
       + 8);
  *(_QWORD *)v5 = *(_QWORD *)((char *)a1
                            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior);
  v5[8] = v9;
  *((_BYTE *)v1 + v6) = *((_BYTE *)a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk);
  return v1;
}

unint64_t lazy protocol witness table accessor for type PgQuery_GrantTargetType and conformance PgQuery_GrantTargetType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_GrantTargetType and conformance PgQuery_GrantTargetType;
  if (!lazy protocol witness table cache variable for type PgQuery_GrantTargetType and conformance PgQuery_GrantTargetType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_GrantTargetType, &type metadata for PgQuery_GrantTargetType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_GrantTargetType and conformance PgQuery_GrantTargetType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_GrantTargetType and conformance PgQuery_GrantTargetType;
  if (!lazy protocol witness table cache variable for type PgQuery_GrantTargetType and conformance PgQuery_GrantTargetType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_GrantTargetType, &type metadata for PgQuery_GrantTargetType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_GrantTargetType and conformance PgQuery_GrantTargetType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_GrantTargetType and conformance PgQuery_GrantTargetType;
  if (!lazy protocol witness table cache variable for type PgQuery_GrantTargetType and conformance PgQuery_GrantTargetType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_GrantTargetType, &type metadata for PgQuery_GrantTargetType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_GrantTargetType and conformance PgQuery_GrantTargetType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_GrantTargetType and conformance PgQuery_GrantTargetType;
  if (!lazy protocol witness table cache variable for type PgQuery_GrantTargetType and conformance PgQuery_GrantTargetType)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_GrantTargetType, &type metadata for PgQuery_GrantTargetType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_GrantTargetType and conformance PgQuery_GrantTargetType);
  }
  return result;
}

uint64_t specialized PgQuery_CreateStmt._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t RangeVar;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t PartitionBoundSpec;
  uint64_t v10;
  uint64_t PartitionSpec;
  uint64_t v12;
  uint64_t TypeName;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v3, 1, 1, RangeVar);
  v5 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableElts;
  v6 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableElts) = MEMORY[0x1E0DEE9D8];
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inhRelations;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inhRelations) = v6;
  v8 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partbound;
  v25 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partbound;
  PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(PartitionBoundSpec - 8) + 56))(v8, 1, 1, PartitionBoundSpec);
  v10 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partspec;
  v24 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partspec;
  PartitionSpec = type metadata accessor for PgQuery_PartitionSpec(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(PartitionSpec - 8) + 56))(v10, 1, 1, PartitionSpec);
  v12 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ofTypename;
  v23 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ofTypename;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TypeName - 8) + 56))(v12, 1, 1, TypeName);
  v14 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints) = v6;
  v15 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options) = v6;
  v16 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oncommit;
  *(_QWORD *)v16 = 0;
  *(_BYTE *)(v16 + 8) = 1;
  v17 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablespacename);
  *v17 = 0;
  v17[1] = 0xE000000000000000;
  v18 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod);
  *v18 = 0;
  v18[1] = 0xE000000000000000;
  v26 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists) = 0;
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, v3, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  *(_QWORD *)(v1 + v5) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableElts);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v7) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inhRelations);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partbound, v25, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partspec, v24, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ofTypename, v23, &demangling cache variable for type metadata for PgQuery_TypeName?);
  *(_QWORD *)(v1 + v14) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v15) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = *(_BYTE *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oncommit
                 + 8);
  *(_QWORD *)v16 = *(_QWORD *)(a1
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oncommit);
  *(_BYTE *)(v16 + 8) = v19;
  v20 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablespacename
                  + 8);
  *v17 = *(_QWORD *)(a1
                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablespacename);
  v17[1] = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                  + 8);
  *v18 = *(_QWORD *)(a1
                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod);
  v18[1] = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v1 + v26) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists);
  return v1;
}

unint64_t lazy protocol witness table accessor for type PgQuery_FetchDirection and conformance PgQuery_FetchDirection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_FetchDirection and conformance PgQuery_FetchDirection;
  if (!lazy protocol witness table cache variable for type PgQuery_FetchDirection and conformance PgQuery_FetchDirection)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_FetchDirection, &type metadata for PgQuery_FetchDirection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_FetchDirection and conformance PgQuery_FetchDirection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_FetchDirection and conformance PgQuery_FetchDirection;
  if (!lazy protocol witness table cache variable for type PgQuery_FetchDirection and conformance PgQuery_FetchDirection)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_FetchDirection, &type metadata for PgQuery_FetchDirection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_FetchDirection and conformance PgQuery_FetchDirection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_FetchDirection and conformance PgQuery_FetchDirection;
  if (!lazy protocol witness table cache variable for type PgQuery_FetchDirection and conformance PgQuery_FetchDirection)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_FetchDirection, &type metadata for PgQuery_FetchDirection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_FetchDirection and conformance PgQuery_FetchDirection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PgQuery_FetchDirection and conformance PgQuery_FetchDirection;
  if (!lazy protocol witness table cache variable for type PgQuery_FetchDirection and conformance PgQuery_FetchDirection)
  {
    result = MEMORY[0x193FED7A0](&protocol conformance descriptor for PgQuery_FetchDirection, &type metadata for PgQuery_FetchDirection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_FetchDirection and conformance PgQuery_FetchDirection);
  }
  return result;
}

uint64_t specialized PgQuery_IndexStmt._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t RangeVar;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Node;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0xE000000000000000;
  v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  v19 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RangeVar - 8) + 56))(v3, 1, 1, RangeVar);
  v5 = (_QWORD *)(v1
                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod);
  *v5 = 0;
  v5[1] = 0xE000000000000000;
  v6 = (_QWORD *)(v1
                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpace);
  *v6 = 0;
  v6[1] = 0xE000000000000000;
  v7 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexParams;
  v8 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexParams) = MEMORY[0x1E0DEE9D8];
  v9 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexIncludingParams;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexIncludingParams) = v8;
  v10 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options) = v8;
  v11 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  v21 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Node - 8) + 56))(v11, 1, 1, Node);
  v20 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__excludeOpNames;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__excludeOpNames) = v8;
  v13 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__idxcomment);
  *v13 = 0;
  v13[1] = 0xE000000000000000;
  v34 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexOid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexOid) = 0;
  v33 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldNode;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldNode) = 0;
  v32 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldCreateSubid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldCreateSubid) = 0;
  v31 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldFirstRelfilenodeSubid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldFirstRelfilenodeSubid) = 0;
  v30 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__unique;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__unique) = 0;
  v29 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__primary;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__primary) = 0;
  v28 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isconstraint;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isconstraint) = 0;
  v27 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__deferrable;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__deferrable) = 0;
  v26 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initdeferred;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initdeferred) = 0;
  v25 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__transformed;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__transformed) = 0;
  v24 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__concurrent;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__concurrent) = 0;
  v23 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists) = 0;
  v22 = OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resetDefaultTblspc;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resetDefaultTblspc) = 0;
  v14 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v1 + 24) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, v19, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  v15 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                  + 8);
  *v5 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod);
  v5[1] = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpace
                  + 8);
  *v6 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpace);
  v6[1] = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v7) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexParams);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v9) = *(_QWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexIncludingParams);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v10) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v21, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_QWORD *)(v1 + v20) = *(_QWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__excludeOpNames);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__idxcomment
                  + 8);
  *v13 = *(_QWORD *)(a1
                   + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__idxcomment);
  v13[1] = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + v34) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexOid);
  *(_DWORD *)(v1 + v33) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldNode);
  *(_DWORD *)(v1 + v32) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldCreateSubid);
  *(_DWORD *)(v1 + v31) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldFirstRelfilenodeSubid);
  *(_BYTE *)(v1 + v30) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__unique);
  *(_BYTE *)(v1 + v29) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__primary);
  *(_BYTE *)(v1 + v28) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isconstraint);
  *(_BYTE *)(v1 + v27) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__deferrable);
  *(_BYTE *)(v1 + v26) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initdeferred);
  *(_BYTE *)(v1 + v25) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__transformed);
  *(_BYTE *)(v1 + v24) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__concurrent);
  *(_BYTE *)(v1 + v23) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists);
  *(_BYTE *)(v1 + v22) = *(_BYTE *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resetDefaultTblspc);
  return v1;
}

