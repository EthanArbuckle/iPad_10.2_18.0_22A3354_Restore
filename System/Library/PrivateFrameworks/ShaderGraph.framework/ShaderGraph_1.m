void closure #6 in createGraph(_:nodeDefStore:)(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, _QWORD **a7)
{
  void *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  Swift::String v33;
  __int128 v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  BOOL v45;
  BOOL v46;
  char v47;
  uint64_t v48;
  id v49;
  id v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  id v57;
  unint64_t v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  Swift::String v80;
  Swift::String v81;
  uint64_t v82;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  char v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v95;
  _QWORD *v97;
  uint64_t v98;
  __int128 v99[12];
  _OWORD v100[12];
  __int128 v101;
  _OWORD v102[5];
  __int128 v103;
  _BYTE v104[32];
  __int128 v105;
  _OWORD v106[2];
  unint64_t v107[5];
  char v108;
  __int128 v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char v113;
  __int128 v114;
  _OWORD v115[2];
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  __int128 v119;
  _OWORD v120[2];
  uint64_t v121;
  uint64_t v122;
  unint64_t v123[3];
  unint64_t v124;

  v124 = a2;
  v11 = *a1;
  v10 = a1[1];
  ObjectType = swift_getObjectType();
  v13 = *(_QWORD *)(v10 + 8);
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 16);
  v95 = ObjectType;
  v15 = v14(ObjectType, v13);
  if (!v16)
  {
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi40_((uint64_t)v99);
    *(_QWORD *)&v100[0] = 0;
    *((_QWORD *)&v100[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    v33._object = (void *)0x8000000245FCAB40;
    v33._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v33);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XMLElement);
    _print_unlocked<A, B>(_:_:)();
    v34 = v100[0];
    outlined init with take of UserGraphError.ErrorType(v99, (uint64_t)v100);
    v101 = v34;
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    swift_allocError();
    *v35 = v100[0];
    v36 = v100[4];
    v38 = v100[1];
    v37 = v100[2];
    v35[3] = v100[3];
    v35[4] = v36;
    v35[1] = v38;
    v35[2] = v37;
    v39 = v100[8];
    v41 = v100[5];
    v40 = v100[6];
    v35[7] = v100[7];
    v35[8] = v39;
    v35[5] = v41;
    v35[6] = v40;
    v42 = v101;
    v44 = v100[9];
    v43 = v100[10];
    v35[11] = v100[11];
    v35[12] = v42;
    v35[9] = v44;
    v35[10] = v43;
    swift_willThrow();
    return;
  }
  v17 = v15;
  v18 = v16;
  v98 = v11;
  v92 = v10;
  v19 = v15 == 0x7061726765646F6ELL && v16 == 0xE900000000000068;
  if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    XMLNode.subscript.getter(0x66656465646F6ELL, 0xE700000000000000);
    v21 = v20;
    swift_bridgeObjectRelease();
    if (!v21)
    {
      createGraph(_:nodeDefStore:)(v102, v11, v10, v124, a3, a4);
      if (!v7)
      {
        v119 = v103;
        v120[0] = *(_OWORD *)v104;
        *(_OWORD *)((char *)v120 + 9) = *(_OWORD *)&v104[9];
        outlined init with take of NodePersonality(&v119, v123);
        v22 = *(_QWORD *)&v120[0];
        v121 = *(_QWORD *)&v120[0];
        v122 = *((_QWORD *)&v119 + 1);
        v114 = v105;
        v115[0] = v106[0];
        *(_OWORD *)((char *)v115 + 9) = *(_OWORD *)((char *)v106 + 9);
        outlined init with take of NodePersonality(&v114, &v118);
        v116 = *(_QWORD *)&v115[0];
        v117 = *((_QWORD *)&v114 + 1);
        v23 = *(_QWORD *)(v22 + 16);
        if (v23)
        {
          v24 = MEMORY[0x24BEE4AF8];
          outlined retain of NodePersonality(v123);
          outlined retain of [Input]((uint64_t)&v122);
          outlined retain of [Input]((uint64_t)&v121);
          outlined retain of NodePersonality(&v118);
          outlined retain of [Input]((uint64_t)&v117);
          outlined retain of [Input]((uint64_t)&v116);
          *(_QWORD *)&v100[0] = v24;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23, 0);
          v25 = v24;
          v26 = (uint64_t *)(v22 + 56);
          do
          {
            v28 = *(v26 - 2);
            v27 = *(v26 - 1);
            v29 = *v26;
            *(_QWORD *)&v100[0] = v25;
            v31 = *(_QWORD *)(v25 + 16);
            v30 = *(_QWORD *)(v25 + 24);
            swift_retain();
            swift_bridgeObjectRetain();
            if (v31 >= v30 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
              v25 = *(_QWORD *)&v100[0];
            }
            *(_QWORD *)(v25 + 16) = v31 + 1;
            v32 = (_QWORD *)(v25 + 24 * v31);
            v32[4] = v27;
            v32[5] = v29;
            v32[6] = v28;
            v26 += 7;
            --v23;
          }
          while (v23);
        }
        else
        {
          outlined retain of NodePersonality(v123);
          outlined retain of [Input]((uint64_t)&v122);
          outlined retain of [Input]((uint64_t)&v121);
          outlined retain of NodePersonality(&v118);
          outlined retain of [Input]((uint64_t)&v117);
          outlined retain of [Input]((uint64_t)&v116);
          v25 = MEMORY[0x24BEE4AF8];
        }
        v59 = v117;
        v60 = *(_QWORD *)(v117 + 16);
        v61 = MEMORY[0x24BEE4AF8];
        if (v60)
        {
          *(_QWORD *)&v100[0] = MEMORY[0x24BEE4AF8];
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v60, 0);
          v61 = *(_QWORD *)&v100[0];
          v62 = (uint64_t *)(v59 + 56);
          do
          {
            v64 = *(v62 - 2);
            v63 = *(v62 - 1);
            v65 = *v62;
            *(_QWORD *)&v100[0] = v61;
            v67 = *(_QWORD *)(v61 + 16);
            v66 = *(_QWORD *)(v61 + 24);
            swift_retain();
            swift_bridgeObjectRetain();
            if (v67 >= v66 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1);
              v61 = *(_QWORD *)&v100[0];
            }
            *(_QWORD *)(v61 + 16) = v67 + 1;
            v68 = (_QWORD *)(v61 + 24 * v67);
            v68[4] = v63;
            v68[5] = v65;
            v68[6] = v64;
            v62 += 7;
            --v60;
          }
          while (v60);
          outlined release of [Input]((uint64_t)&v117);
        }
        v69 = swift_allocObject();
        v70 = v106[0];
        *(_OWORD *)(v69 + 144) = v105;
        *(_OWORD *)(v69 + 160) = v70;
        *(_OWORD *)(v69 + 169) = *(_OWORD *)((char *)v106 + 9);
        v71 = v103;
        *(_OWORD *)(v69 + 80) = v102[4];
        *(_OWORD *)(v69 + 96) = v71;
        v72 = *(_OWORD *)&v104[16];
        *(_OWORD *)(v69 + 112) = *(_OWORD *)v104;
        *(_OWORD *)(v69 + 128) = v72;
        v73 = v102[1];
        *(_OWORD *)(v69 + 16) = v102[0];
        *(_OWORD *)(v69 + 32) = v73;
        v74 = v102[3];
        *(_OWORD *)(v69 + 48) = v102[2];
        *(_OWORD *)(v69 + 64) = v74;
        v75 = v69 | 0xC000000000000000;
        v76 = *(_QWORD *)(a5 + 40);
        outlined retain of Graph((uint64_t)v102);
        specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v76, v25, v61, v75, a5 + 64, a5, v107);
        v77 = v107[0];
        v78 = v107[1];
        v79 = v107[2];
        v124 = v107[3];
        v91 = v107[4];
        v90 = v108;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        outlined release of NodePersonality(&v118);
        outlined release of [Input]((uint64_t)&v117);
        outlined release of [Input]((uint64_t)&v116);
        outlined release of NodePersonality(v123);
        outlined release of [Input]((uint64_t)&v122);
        outlined release of [Input]((uint64_t)&v121);
        outlined release of Graph((uint64_t)v102);
        goto LABEL_43;
      }
    }
  }
  else
  {
    v45 = v17 == 0x7475706E69 && v18 == 0xE500000000000000;
    if (v45
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || (v17 == 0x74757074756FLL ? (v46 = v18 == 0xE600000000000000) : (v46 = 0), v46))
    {
LABEL_49:
      swift_bridgeObjectRelease();
      return;
    }
    v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v47 & 1) != 0)
      return;
    specialized NodeDefStore.createNode(for:in:)(v10, a5, &v109);
    if (!v7)
    {
      v78 = *((_QWORD *)&v109 + 1);
      v77 = v109;
      v79 = v110;
      v124 = v111;
      v91 = v112;
      v90 = v113;
LABEL_43:
      outlined copy of NodePersonality(v77);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v80._countAndFlagsBits = 1701667182;
      v80._object = (void *)0xE400000000000000;
      v81 = XMLElement.getRequiredAttribute(_:)(v80);
      if (v82)
      {
        outlined consume of ShaderGraphNode?(v77, v78);
        swift_unexpectedError();
        __break(1u);
        return;
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v100[0] = *a6;
      *a6 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v124, v81._countAndFlagsBits, (uint64_t)v81._object, isUniquelyReferenced_nonNull_native);
      *a6 = *(_QWORD *)&v100[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v84 = *a7;
      swift_unknownObjectRetain();
      outlined copy of NodePersonality(v77);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v85 = swift_isUniquelyReferenced_nonNull_native();
      *a7 = v84;
      if ((v85 & 1) == 0)
      {
        v84 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v84[2] + 1, 1, v84);
        *a7 = v84;
      }
      v87 = v84[2];
      v86 = v84[3];
      if (v87 >= v86 >> 1)
      {
        v84 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v86 > 1), v87 + 1, 1, v84);
        *a7 = v84;
      }
      v84[2] = v87 + 1;
      v88 = &v84[8 * v87];
      v88[4] = v98;
      v88[5] = v92;
      v88[6] = v77;
      v88[7] = v78;
      v89 = v124;
      v88[8] = v79;
      v88[9] = v89;
      v88[10] = v91;
      *((_BYTE *)v88 + 88) = v90;
      outlined consume of ShaderGraphNode?(v77, v78);
      outlined consume of NodePersonality(v77);
      swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    if (one-time initialization token for logger != -1)
      swift_once();
    v48 = type metadata accessor for Logger();
    __swift_project_value_buffer(v48, (uint64_t)logger);
    swift_unknownObjectRetain();
    v49 = v7;
    swift_unknownObjectRetain();
    v50 = v7;
    v51 = Logger.logObject.getter();
    v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = swift_slowAlloc();
      v97 = (_QWORD *)swift_slowAlloc();
      v124 = swift_slowAlloc();
      *(_QWORD *)&v100[0] = v124;
      *(_DWORD *)v53 = 136315394;
      v54 = v14(v95, v13);
      if (v55)
      {
        v56 = v55;
      }
      else
      {
        v54 = 0x64656D616E6E753CLL;
        v56 = 0xE90000000000003ELL;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v56, (uint64_t *)v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v53 + 12) = 2112;
      v57 = v7;
      *(_QWORD *)&v99[0] = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v97 = *(_QWORD *)&v99[0];

      _os_log_impl(&dword_245E46000, v51, v52, "Could not create node for element '%s'. (%@)", (uint8_t *)v53, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v97, -1, -1);
      v58 = v124;
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v58, -1, -1);
      MEMORY[0x24954C33C](v53, -1, -1);

    }
    else
    {

      swift_unknownObjectRelease_n();
    }
  }
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLElement.getRequiredAttribute(_:)(Swift::String a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  Swift::String result;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  if (!(*(uint64_t (**)(void))(v1 + 16))()
    || (v7 = v6,
        ObjectType = swift_getObjectType(),
        v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 32))(ObjectType, v7),
        v3 = v9,
        swift_unknownObjectRelease(),
        !v3))
  {
    lazy protocol witness table accessor for type XMLElementErrors and conformance XMLElementErrors();
    swift_allocError();
    *v10 = countAndFlagsBits;
    v10[1] = (uint64_t)object;
    swift_bridgeObjectRetain();
    swift_willThrow();
  }
  v11 = v2;
  v12 = v3;
  result._object = v12;
  result._countAndFlagsBits = v11;
  return result;
}

void closure #1 in closure #7 in createGraph(_:nodeDefStore:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t countAndFlagsBits;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  _OWORD *v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  Swift::String v127;
  Swift::String v128;
  uint64_t v129;
  Swift::String *v130;
  uint64_t v131;
  NSObject *v132;
  os_log_type_t v133;
  uint64_t v134;
  uint64_t v135;
  _OWORD *v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  _QWORD *v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v174;
  char v175;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  uint64_t v189;
  unint64_t object;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  unint64_t v204[10];
  unint64_t v205[2];
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void *v217;
  uint64_t v218;
  char v219;
  uint64_t v220;
  _QWORD v221[5];
  char v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char v229;
  uint64_t v230;
  _QWORD v231[5];
  char v232;
  uint64_t v233;
  uint64_t v234;

  v5 = a2[1];
  v177 = *a2;
  v7 = a2[2];
  v6 = a2[3];
  v8 = a2[4];
  v9 = *((_BYTE *)a2 + 40);
  v10 = *(_QWORD *)(a1 + 8);
  swift_getObjectType();
  v11._countAndFlagsBits = 1701667182;
  v11._object = (void *)0xE400000000000000;
  v12 = XMLElement.getRequiredAttribute(_:)(v11);
  if (v13)
    return;
  countAndFlagsBits = v12._countAndFlagsBits;
  v162 = v7;
  v165 = a2;
  v167 = v8;
  v163 = v6;
  v164 = v9;
  v234 = v5;
  v169 = v5;
  v15 = *(_QWORD *)(v5 + 16);
  if (!v15)
  {
LABEL_10:
    v24 = countAndFlagsBits;
    outlined init with take of NodePersonality(v165, &v208);
    v207 = v165[2];
    *(_QWORD *)&v184 = v177;
    *((_QWORD *)&v184 + 1) = v169;
    v185 = v162;
    v186 = v163;
    v187 = v167;
    v188 = v164 & 1;
    v189 = v24;
    object = (unint64_t)v12._object;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v184);
    outlined init with take of UserGraphError.ErrorType(&v184, (uint64_t)&v191);
    v203 = 0uLL;
    outlined retain of [Input]((uint64_t)&v234);
    outlined retain of NodePersonality(&v208);
    outlined retain of [Input]((uint64_t)&v207);
    swift_bridgeObjectRetain();
    outlined release of UserGraphError((unint64_t *)&v191);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    swift_allocError();
    *v25 = v191;
    v26 = v195;
    v28 = v192;
    v27 = v193;
    v25[3] = v194;
    v25[4] = v26;
    v25[1] = v28;
    v25[2] = v27;
    v29 = v199;
    v31 = v196;
    v30 = v197;
    v25[7] = v198;
    v25[8] = v29;
    v25[5] = v31;
    v25[6] = v30;
    v32 = v203;
    v34 = v200;
    v33 = v201;
    v25[11] = v202;
    v25[12] = v32;
    v25[9] = v34;
    v25[10] = v33;
    outlined retain of [Input]((uint64_t)&v234);
    outlined retain of NodePersonality(&v208);
    outlined retain of [Input]((uint64_t)&v207);
    swift_willThrow();
    return;
  }
  v16 = (_QWORD *)(v5 + 80);
  v181 = v12._countAndFlagsBits;
  while (1)
  {
    v17 = *(v16 - 6);
    v183 = *(v16 - 5);
    v18 = *(v16 - 4);
    v19 = (void *)*(v16 - 3);
    v20 = *(v16 - 2);
    v21 = *((_BYTE *)v16 - 8);
    v22 = *v16;
    if (v18 == countAndFlagsBits && v19 == v12._object)
      break;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_12;
    v16 += 7;
    --v15;
    countAndFlagsBits = v12._countAndFlagsBits;
    if (!v15)
      goto LABEL_10;
  }
  v18 = countAndFlagsBits;
  v19 = v12._object;
LABEL_12:
  v221[0] = v17;
  v221[1] = v183;
  v221[2] = v18;
  v221[3] = v19;
  v221[4] = v20;
  v222 = v21;
  v223 = v22;
  swift_retain();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String?>);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_245FC1530;
  v36 = XMLNode.subscript.getter(0x6361667265746E69, 0xED0000656D616E65);
  v38 = v37;
  *(_QWORD *)(v35 + 32) = v36;
  *(_QWORD *)(v35 + 40) = v37;
  v156 = XMLNode.subscript.getter(0x656D616E65646F6ELL, 0xE800000000000000);
  *(_QWORD *)(v35 + 48) = v156;
  *(_QWORD *)(v35 + 56) = v39;
  v40 = v39;
  v158 = XMLNode.subscript.getter(0x65756C6176, 0xE500000000000000);
  *(_QWORD *)(v35 + 64) = v158;
  *(_QWORD *)(v35 + 72) = v41;
  v42 = v41;
  if (!v38)
  {
    v43 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (!v40)
      goto LABEL_23;
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v45 = v43[2];
  v44 = v43[3];
  v46 = v45 + 1;
  if (v45 >= v44 >> 1)
  {
    v155 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v44 > 1), v45 + 1, 1, v43);
    v46 = v45 + 1;
    v43 = v155;
  }
  v43[2] = v46;
  v47 = &v43[2 * v45];
  v47[4] = v36;
  v47[5] = v38;
  v41 = v42;
  if (v40)
  {
LABEL_18:
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43[2] + 1, 1, v43);
    v49 = v43[2];
    v48 = v43[3];
    if (v49 >= v48 >> 1)
      v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v48 > 1), v49 + 1, 1, v43);
    v43[2] = v49 + 1;
    v50 = &v43[2 * v49];
    v50[4] = v156;
    v50[5] = v40;
    v41 = v42;
  }
LABEL_23:
  if (v41)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43[2] + 1, 1, v43);
    v52 = v43[2];
    v51 = v43[3];
    if (v52 >= v51 >> 1)
      v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v51 > 1), v52 + 1, 1, v43);
    v43[2] = v52 + 1;
    v53 = &v43[2 * v52];
    v53[4] = v158;
    v53[5] = v42;
  }
  swift_release();
  v54 = v43[2];
  swift_bridgeObjectRelease();
  if (v54 != 1)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v55 = type metadata accessor for Logger();
    __swift_project_value_buffer(v55, (uint64_t)logger);
    swift_bridgeObjectRetain_n();
    v56 = Logger.logObject.getter();
    v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc();
      v59 = swift_slowAlloc();
      *(_QWORD *)&v191 = v59;
      *(_DWORD *)v58 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v184 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12._countAndFlagsBits, (unint64_t)v12._object, (uint64_t *)&v191);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_245E46000, v56, v57, "Input %s should only have 1 of (interfacename, nodename, value)", v58, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v59, -1, -1);
      MEMORY[0x24954C33C](v58, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  v60 = XMLNode.subscript.getter(0x6361667265746E69, 0xED0000656D616E65);
  if (v61)
  {
    v179 = v60;
    v182 = v61;
    swift_bridgeObjectRelease();
    v63 = *(_QWORD *)(a3 + 80);
    v62 = *(_QWORD *)(a3 + 88);
    v64 = *(_QWORD *)(a3 + 96);
    v65 = *(_QWORD *)(a3 + 104);
    v66 = *(_QWORD *)(a3 + 112);
    v67 = *(_BYTE *)(a3 + 120);
    v68 = *(_QWORD *)(v64 + 16);
    if (v68)
    {
      v166 = *(_BYTE *)(a3 + 120);
      v168 = *(_QWORD *)(a3 + 112);
      v170 = *(_QWORD *)(a3 + 104);
      v171 = *(_QWORD *)(a3 + 80);
      v178 = *(_QWORD *)(a3 + 88);
      swift_bridgeObjectRetain();
      v174 = v64;
      v69 = (_QWORD *)(v64 + 80);
      while (1)
      {
        v70 = *(v69 - 6);
        v71 = *(v69 - 5);
        v72 = *(v69 - 4);
        v73 = (void *)*(v69 - 3);
        v74 = *(v69 - 2);
        v75 = *((_BYTE *)v69 - 8);
        v76 = *v69;
        v77 = v179;
        if (v72 == v179 && v182 == v73)
          break;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          v77 = v72;
          break;
        }
        v69 += 7;
        if (!--v68)
        {
          v214 = v70;
          v215 = v71;
          v216 = v72;
          v217 = v73;
          v218 = v74;
          v219 = v75;
          v220 = v76;
          v62 = v178;
          v63 = v171;
          v64 = v174;
          v66 = v168;
          v65 = v170;
          v67 = v166;
          goto LABEL_67;
        }
      }
      v214 = v70;
      v215 = v71;
      v216 = v77;
      v217 = v73;
      v218 = v74;
      v219 = v75;
      v220 = v76;
      swift_bridgeObjectRetain();
      outlined copy of NodePersonality(v171);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      Graph.connect(_:to:)((uint64_t)&v214, (unint64_t)v221);
      outlined consume of NodePersonality(v171);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRetain();
LABEL_67:
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v63);
    *(_QWORD *)&v184 = v63;
    *((_QWORD *)&v184 + 1) = v62;
    v185 = v64;
    v186 = v65;
    v187 = v66;
    v188 = v67;
    v189 = v179;
    object = (unint64_t)v182;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_((uint64_t)&v184);
    outlined init with take of UserGraphError.ErrorType(&v184, (uint64_t)&v191);
    v203 = 0uLL;
    swift_bridgeObjectRetain();
    outlined release of UserGraphError((unint64_t *)&v191);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_68:
    swift_release();
    return;
  }
  v79 = XMLNode.subscript.getter(0x656D616E65646F6ELL, 0xE800000000000000);
  if (!v80)
  {
    v112 = XMLNode.subscript.getter(0x65756C6176, 0xE500000000000000);
    if (v113)
    {
      v114 = v112;
      v115 = v113;
      swift_bridgeObjectRelease();
      v116 = swift_unknownObjectRetain();
      v130 = specialized MaterialXDataType.__allocating_init(xmlElement:)(v116, v10);
      swift_unknownObjectRelease();
      swift_retain();
      specialized SGDataTypeStorage.init(materialXValue:type:)(v114, v115, (uint64_t)v130, v204);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
      v146 = swift_allocObject();
      *(_OWORD *)(v146 + 16) = xmmword_245FBECD0;
      *(_QWORD *)(v146 + 32) = 7632239;
      *(_QWORD *)(v146 + 40) = 0xE300000000000000;
      *(_QWORD *)(v146 + 48) = v130;
      v147 = swift_allocObject();
      outlined init with take of SGDataTypeStorage((uint64_t)v204, v147 + 16);
      *(_QWORD *)(v147 + 88) = v130;
      v148 = *(_QWORD *)(a3 + 40);
      swift_retain_n();
      outlined retain of SGDataTypeStorage((uint64_t)v204, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of SGDataTypeStorage);
      specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v148, MEMORY[0x24BEE4AF8], v146, v147, a3 + 64, a3, v205);
      swift_release();
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      v213 = v206;
      if (*(_QWORD *)(v206 + 16))
      {
        v149 = *(_QWORD *)(v206 + 40);
        v150 = *(_QWORD *)(v206 + 48);
        v151 = *(_QWORD *)(v206 + 56);
        v152 = *(_QWORD *)(v206 + 64);
        v153 = *(_BYTE *)(v206 + 72);
        v154 = *(_QWORD *)(v206 + 80);
        v231[0] = *(_QWORD *)(v206 + 32);
        v231[1] = v149;
        v231[2] = v150;
        v231[3] = v151;
        v231[4] = v152;
        v232 = v153;
        v233 = v154;
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.connect(_:to:)((uint64_t)v231, (unint64_t)v221);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        outlined retain of SGDataTypeStorage((uint64_t)v204, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of SGDataTypeStorage);
        outlined init with take of NodePersonality(v205, &v212);
        outlined release of NodePersonality(&v212);
        v211 = v205[1];
        outlined release of [Input]((uint64_t)&v211);
        outlined release of [Input]((uint64_t)&v213);
        swift_bridgeObjectRelease();
        swift_release();
      }
      else
      {
        __break(1u);
      }
      return;
    }
    swift_getObjectType();
    v127._countAndFlagsBits = 1701667182;
    v127._object = (void *)0xE400000000000000;
    v128 = XMLElement.getRequiredAttribute(_:)(v127);
    if (v129)
    {
      swift_bridgeObjectRelease();
LABEL_84:
      swift_bridgeObjectRelease();
      swift_release();
      return;
    }
    v92 = (_QWORD *)v128._countAndFlagsBits;
    v86 = (unint64_t)v128._object;
    if (one-time initialization token for logger == -1)
    {
LABEL_78:
      v131 = type metadata accessor for Logger();
      __swift_project_value_buffer(v131, (uint64_t)logger);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v132 = Logger.logObject.getter();
      v133 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v132, v133))
      {
        v134 = swift_slowAlloc();
        v135 = swift_slowAlloc();
        *(_QWORD *)&v191 = v135;
        *(_DWORD *)v134 = 136315394;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v181, (unint64_t)v12._object, (uint64_t *)&v191);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v134 + 12) = 2080;
        swift_bridgeObjectRetain();
        *(_QWORD *)&v184 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v92, v86, (uint64_t *)&v191);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_arrayDestroy();
        MEMORY[0x24954C33C](v135, -1, -1);
        MEMORY[0x24954C33C](v134, -1, -1);
        swift_bridgeObjectRelease();
        swift_release();

        return;
      }

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      goto LABEL_68;
    }
LABEL_94:
    swift_once();
    goto LABEL_78;
  }
  v81 = v79;
  v82 = v80;
  swift_bridgeObjectRelease();
  v83 = *a4;
  if (!*(_QWORD *)(*a4 + 16))
  {
LABEL_74:
    *(_QWORD *)&v184 = v81;
    *((_QWORD *)&v184 + 1) = v82;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi4_((uint64_t)&v184);
    outlined init with take of UserGraphError.ErrorType(&v184, (uint64_t)&v191);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v203 = 0uLL;
    swift_allocError();
    *v117 = v191;
    v118 = v195;
    v120 = v192;
    v119 = v193;
    v117[3] = v194;
    v117[4] = v118;
    v117[1] = v120;
    v117[2] = v119;
    v121 = v199;
    v123 = v196;
    v122 = v197;
    v117[7] = v198;
    v117[8] = v121;
    v117[5] = v123;
    v117[6] = v122;
    v124 = v203;
    v126 = v200;
    v125 = v201;
    v117[11] = v202;
    v117[12] = v124;
    v117[9] = v126;
    v117[10] = v125;
LABEL_83:
    swift_willThrow();
    goto LABEL_84;
  }
  swift_bridgeObjectRetain();
  v84 = specialized __RawDictionaryStorage.find<A>(_:)(v81, v82);
  if ((v85 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_74;
  }
  v86 = *(_QWORD *)(*(_QWORD *)(v83 + 56) + 8 * v84);
  swift_bridgeObjectRelease_n();
  v87 = XMLNode.subscript.getter(0x74757074756FLL, 0xE600000000000000);
  if (v88)
    v89 = v87;
  else
    v89 = 7632239;
  if (v88)
    v90 = v88;
  else
    v90 = 0xE300000000000000;
  v92 = v165;
  v91 = v167;
  v93 = v177;
  if (v86 == -7)
  {
LABEL_82:
    outlined init with take of NodePersonality(v92, &v210);
    v209 = v92[2];
    *(_QWORD *)&v184 = v93;
    *((_QWORD *)&v184 + 1) = v169;
    v185 = v162;
    v186 = v163;
    v187 = v91;
    v188 = v164 & 1;
    v189 = v89;
    object = v90;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_((uint64_t)&v184);
    outlined init with take of UserGraphError.ErrorType(&v184, (uint64_t)&v191);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v203 = 0uLL;
    swift_allocError();
    *v136 = v191;
    v137 = v195;
    v139 = v192;
    v138 = v193;
    v136[3] = v194;
    v136[4] = v137;
    v136[1] = v139;
    v136[2] = v138;
    v140 = v199;
    v142 = v196;
    v141 = v197;
    v136[7] = v198;
    v136[8] = v140;
    v136[5] = v142;
    v136[6] = v141;
    v143 = v203;
    v145 = v200;
    v144 = v201;
    v136[11] = v202;
    v136[12] = v143;
    v136[9] = v145;
    v136[10] = v144;
    outlined retain of [Input]((uint64_t)&v234);
    outlined retain of NodePersonality(&v210);
    outlined retain of [Input]((uint64_t)&v209);
    goto LABEL_83;
  }
  v180 = v89;
  v181 = v90;
  if ((v86 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_93;
  }
  v94 = *(_QWORD *)(a3 + 64);
  if (v86 >= *(_QWORD *)(v94 + 16))
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  v95 = v94 + 48 * v86;
  v96 = *(_QWORD *)(v95 + 32);
  v97 = *(_QWORD *)(v95 + 40);
  v98 = *(_QWORD *)(v95 + 48);
  v99 = *(_QWORD *)(v95 + 56);
  v100 = *(_QWORD *)(v95 + 64);
  v175 = *(_BYTE *)(v95 + 72);
  v101 = *(_QWORD *)(v98 + 16);
  if (!v101)
  {
    swift_bridgeObjectRetain();
LABEL_81:
    outlined copy of NodePersonality(v96);
    swift_bridgeObjectRetain();
    *(_QWORD *)&v184 = v96;
    *((_QWORD *)&v184 + 1) = v97;
    v185 = v98;
    v186 = v99;
    v187 = v100;
    v188 = v175;
    v89 = v180;
    v90 = v181;
    v189 = v180;
    object = v181;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_((uint64_t)&v184);
    outlined init with take of UserGraphError.ErrorType(&v184, (uint64_t)&v191);
    v203 = 0uLL;
    swift_bridgeObjectRetain();
    outlined release of UserGraphError((unint64_t *)&v191);
    goto LABEL_82;
  }
  v157 = *(_QWORD *)(v95 + 64);
  v159 = *(_QWORD *)(v95 + 56);
  v160 = *(_QWORD *)(v95 + 40);
  v161 = *(_QWORD *)(v95 + 32);
  swift_bridgeObjectRetain();
  v172 = v98;
  v102 = (_QWORD *)(v98 + 80);
  while (1)
  {
    v103 = *(v102 - 6);
    v104 = *(v102 - 5);
    v105 = *(v102 - 4);
    v106 = *(v102 - 3);
    v107 = *(v102 - 2);
    v108 = *((_BYTE *)v102 - 8);
    v109 = *v102;
    v110 = v180;
    if (v105 == v180 && v106 == v181)
    {
      v106 = v181;
      goto LABEL_91;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      break;
    v102 += 7;
    if (!--v101)
    {
      v224 = v103;
      v225 = v104;
      v226 = v105;
      v227 = v106;
      v228 = v107;
      v229 = v108;
      v230 = v109;
      v92 = v165;
      v91 = v167;
      v93 = v177;
      v98 = v172;
      v96 = v161;
      v97 = v160;
      v100 = v157;
      v99 = v159;
      goto LABEL_81;
    }
  }
  v110 = v105;
LABEL_91:
  v224 = v103;
  v225 = v104;
  v226 = v110;
  v227 = v106;
  v228 = v107;
  v229 = v108;
  v230 = v109;
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  swift_bridgeObjectRetain();
  Graph.connect(_:to:)((uint64_t)&v224, (unint64_t)v221);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
}

double Graph.appendSwizzleNode(to:resultType:channels:nodeDefStore:)@<D0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v6;
  double result;
  __int128 v9;
  __int128 v10;
  _OWORD v11[2];

  specialized Graph.appendSwizzleNode(to:resultType:channels:nodeDefStore:)(a1, a2, a3, a4, a5, &v10);
  if (!v6)
  {
    v9 = v11[0];
    *a6 = v10;
    a6[1] = v9;
    result = *(double *)((char *)v11 + 9);
    *(_OWORD *)((char *)a6 + 25) = *(_OWORD *)((char *)v11 + 9);
  }
  return result;
}

uint64_t static MaterialXDataType.Kind.== infix(_:_:)(unint64_t a1, unint64_t a2)
{
  if (a1 && a2)
    return specialized static Array<A>.== infix(_:_:)((_QWORD *)a1, (_QWORD *)a2);
  else
    return (a1 | a2) == 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MaterialXDataType.Kind.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MaterialXDataType.Kind.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 7628147;
  else
    return 0x64656D616ELL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance MaterialXDataType.Kind.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized MaterialXDataType.Kind.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MaterialXDataType.Kind.CodingKeys()
{
  lazy protocol witness table accessor for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MaterialXDataType.Kind.CodingKeys()
{
  lazy protocol witness table accessor for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MaterialXDataType.Kind.NamedCodingKeys()
{
  return 0;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance MaterialXDataType.Kind.NamedCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance MaterialXDataType.Kind.NamedCodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MaterialXDataType.Kind.NamedCodingKeys()
{
  lazy protocol witness table accessor for type MaterialXDataType.Kind.NamedCodingKeys and conformance MaterialXDataType.Kind.NamedCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MaterialXDataType.Kind.NamedCodingKeys()
{
  lazy protocol witness table accessor for type MaterialXDataType.Kind.NamedCodingKeys and conformance MaterialXDataType.Kind.NamedCodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MaterialXDataType.Kind.SetCodingKeys()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance MaterialXDataType.Kind.SetCodingKeys()
{
  Hasher._combine(_:)(0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MaterialXDataType.Kind.SetCodingKeys()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MaterialXDataType.Kind.SetCodingKeys()
{
  return 12383;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance MaterialXDataType.Kind.SetCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MaterialXDataType.Kind.SetCodingKeys()
{
  lazy protocol witness table accessor for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MaterialXDataType.Kind.SetCodingKeys()
{
  lazy protocol witness table accessor for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t MaterialXDataType.Kind.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;

  v18 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MaterialXDataType.Kind.SetCodingKeys>);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MaterialXDataType.Kind.NamedCodingKeys>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MaterialXDataType.Kind.CodingKeys>);
  v19 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys();
  v13 = v18;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v13)
  {
    v22 = 1;
    lazy protocol witness table accessor for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v20 = v13;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A], MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
    v14 = v17;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v14);
  }
  else
  {
    v21 = 0;
    lazy protocol witness table accessor for type MaterialXDataType.Kind.NamedCodingKeys and conformance MaterialXDataType.Kind.NamedCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v12, v10);
}

_QWORD *MaterialXDataType.Kind.init(from:)(_QWORD *a1)
{
  return specialized MaterialXDataType.Kind.init(from:)(a1);
}

_QWORD *protocol witness for Decodable.init(from:) in conformance MaterialXDataType.Kind@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = specialized MaterialXDataType.Kind.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MaterialXDataType.Kind(_QWORD *a1)
{
  uint64_t *v1;

  return MaterialXDataType.Kind.encode(to:)(a1, *v1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MaterialXDataType.Kind(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;

  v2 = *a1;
  v3 = *a2;
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return (v2 | v3) == 0;
  else
    return specialized static Array<A>.== infix(_:_:)((_QWORD *)v2, (_QWORD *)v3);
}

uint64_t MaterialXDataType.kind.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MaterialXDataType.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

_QWORD *MaterialXDataType.init(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2[4] = a1;
  v2[5] = a2;
  v2[2] = MEMORY[0x24BEE4AF8];
  v2[3] = 0;
  return v2;
}

_QWORD *MaterialXDataType.init(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[4] = a1;
  v3[5] = a2;
  v3[2] = MEMORY[0x24BEE4AF8];
  v3[3] = a3;
  return v3;
}

uint64_t MaterialXDataType.isEqual(to:)()
{
  _QWORD *v0;
  uint64_t result;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  result = swift_dynamicCastClass();
  if (!result)
    return result;
  v2 = (_QWORD *)result;
  v3 = (_QWORD *)v0[3];
  v4 = (_QWORD *)v2[3];
  if (!v3)
  {
    if (!v4)
      goto LABEL_5;
    return 0;
  }
  if (!v4 || (specialized static Array<A>.== infix(_:_:)(v3, v4) & 1) == 0)
    return 0;
LABEL_5:
  if (v0[4] == v2[4] && v0[5] == v2[5])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t MaterialXDataType.description.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v7;

  if (v0[3])
    v1 = 0x7465733A786C746DLL;
  else
    v1 = 0x6D616E3A786C746DLL;
  v7 = v1;
  v2 = v0[4];
  v3 = (void *)v0[5];
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return v7;
}

uint64_t MaterialXDataType.debugDescription.getter()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  Swift::String v9;
  unint64_t v10;
  uint64_t v12;

  if (v0[3])
  {
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    v12 = 0x7465733A786C746DLL;
    v2 = v0[4];
    v1 = (void *)v0[5];
    swift_bridgeObjectRetain();
    v3._countAndFlagsBits = v2;
    v3._object = v1;
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._countAndFlagsBits = 23337;
    v4._object = (void *)0xE200000000000000;
    String.append(_:)(v4);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], MEMORY[0x24BEE12B0]);
    v5._countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6 = 93;
  }
  else
  {
    v12 = 0x6D616E3A786C746DLL;
    v8 = v0[4];
    v7 = (void *)v0[5];
    swift_bridgeObjectRetain();
    v9._countAndFlagsBits = v8;
    v9._object = v7;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v6 = 41;
  }
  v10 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&v6);
  return v12;
}

BOOL MaterialXDataType.isMaterialXEnum.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24) != 0;
}

uint64_t MaterialXDataType.asMetalDataType.getter()
{
  if (one-time initialization token for integer != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for int32 == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for integer2 != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
    goto LABEL_9;
  if (one-time initialization token for integer3 != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
LABEL_14:
    if (one-time initialization token for int3 == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for integer4 != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for int4 == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for BOOLean != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for BOOL == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for float != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for float == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for float2 != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
    goto LABEL_34;
  if (one-time initialization token for float3 != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
LABEL_39:
    if (one-time initialization token for float3 == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for float4 != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
    goto LABEL_44;
  if (one-time initialization token for half != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for half == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for half2 != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for half2 == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for half3 != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for half3 == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for half4 != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for half4 == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for color3 != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for color3 == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for color4 != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for color4 == -1)
      return swift_retain();
LABEL_318:
    swift_once();
    return swift_retain();
  }
  if (one-time initialization token for vector2 != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
LABEL_34:
    if (one-time initialization token for float2 == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for vector3 != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
    goto LABEL_39;
  if (one-time initialization token for vector4 != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
LABEL_44:
    if (one-time initialization token for float4 == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for matrix22 != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for float2x2 == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for matrix33 != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for float3x3 == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for matrix44 != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for float4x4 == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for uAddressMode != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
LABEL_113:
    if (one-time initialization token for s_address == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for vAddressMode != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
    goto LABEL_119;
  if (one-time initialization token for wrapS != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
    goto LABEL_113;
  if (one-time initialization token for wrapT != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
    goto LABEL_119;
  if (one-time initialization token for filterType != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
    goto LABEL_131;
  if (one-time initialization token for blurFilterType != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
    return 0;
  if (one-time initialization token for frameEndAction != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
    return 0;
  if (one-time initialization token for space != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
    goto LABEL_149;
  if (one-time initialization token for normalMapSpace != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
LABEL_149:
    if (one-time initialization token for space == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for lumacoeffs != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
    return 0;
  if (one-time initialization token for addressMode != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
    goto LABEL_161;
  if (one-time initialization token for pixelAddressMode != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
LABEL_161:
    if (one-time initialization token for address == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for sAddressMode != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
    goto LABEL_113;
  if (one-time initialization token for tAddressMode != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
    goto LABEL_119;
  if (one-time initialization token for rAddressMode != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
LABEL_175:
    if (one-time initialization token for r_address == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for u_wrap_mode != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
    goto LABEL_113;
  if (one-time initialization token for v_wrap_mode != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
    goto LABEL_119;
  if (one-time initialization token for w_wrap_mode != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
    goto LABEL_175;
  if (one-time initialization token for u_pixel_wrap_mode != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
    goto LABEL_113;
  if (one-time initialization token for v_pixel_wrap_mode != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
LABEL_119:
    if (one-time initialization token for t_address == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for w_pixel_wrap_mode != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
    goto LABEL_175;
  if (one-time initialization token for filter != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
    goto LABEL_131;
  if (one-time initialization token for magFilter != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for mag_filter == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for minFilter != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for min_filter == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for cubeimageFilterType != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
LABEL_131:
    if (one-time initialization token for filter == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for coord != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for coord == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for borderColor != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for border_color == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for mipFilter != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for mip_filter == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for texture2dhalf != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for texture2d_half == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for texture2dfloat != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for texture2d_float == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for texture2dint != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for texture2d_int == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for texture2darrayhalf != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for texture2darray_half == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for texture2darrayfloat != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for texture2darray_float == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for texture2darrayint != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for texture2darray_int == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for texture3dhalf != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for texture3d_half == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for texture3dfloat != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for texture3d_float == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for texture3dint != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for texture3d_int == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for texturecubehalf != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for texturecube_half == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for texturecubefloat != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for texturecube_float == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for sampler != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for sampler == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for bias != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for bias != -1)
      swift_once();
    return swift_retain();
  }
  if (one-time initialization token for max_anisotropy != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for max_anisotropy != -1)
      swift_once();
    return swift_retain();
  }
  if (one-time initialization token for level != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for level != -1)
      swift_once();
    return swift_retain();
  }
  if (one-time initialization token for min_lod_clamp != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for min_lod_clamp != -1)
      swift_once();
    return swift_retain();
  }
  if (one-time initialization token for offset != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
LABEL_9:
    if (one-time initialization token for int2 == -1)
      return swift_retain();
    goto LABEL_318;
  }
  if (one-time initialization token for offset3 != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
    goto LABEL_14;
  if (one-time initialization token for lod_clamp != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for lod_clamp != -1)
      swift_once();
    return swift_retain();
  }
  if (one-time initialization token for gradient2d != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for gradient2d != -1)
      swift_once();
    return swift_retain();
  }
  if (one-time initialization token for gradient3d != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for gradient3d != -1)
      swift_once();
    return swift_retain();
  }
  if (one-time initialization token for gradientcube != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for gradientcube != -1)
      swift_once();
    return swift_retain();
  }
  if (one-time initialization token for realityKitHoverData != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    if (one-time initialization token for HoverData != -1)
      swift_once();
    return swift_retain();
  }
  return 0;
}

uint64_t *MaterialXDataType.frameEndAction.unsafeMutableAddressor()
{
  if (one-time initialization token for frameEndAction != -1)
    swift_once();
  return &static MaterialXDataType.frameEndAction;
}

uint64_t *MetalDataType.MaterialX.space.unsafeMutableAddressor()
{
  if (one-time initialization token for space != -1)
    swift_once();
  return &static MetalDataType.MaterialX.space;
}

uint64_t *MaterialXDataType.realitykit.pixelAddressMode.unsafeMutableAddressor()
{
  if (one-time initialization token for pixelAddressMode != -1)
    swift_once();
  return &static MaterialXDataType.realitykit.pixelAddressMode;
}

uint64_t *MaterialXDataType.texture2dhalf.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2dhalf != -1)
    swift_once();
  return &static MaterialXDataType.texture2dhalf;
}

uint64_t *MaterialXDataType.texture2dfloat.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2dfloat != -1)
    swift_once();
  return &static MaterialXDataType.texture2dfloat;
}

uint64_t *MaterialXDataType.texture2dint.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2dint != -1)
    swift_once();
  return &static MaterialXDataType.texture2dint;
}

uint64_t *MaterialXDataType.texture2darrayhalf.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2darrayhalf != -1)
    swift_once();
  return &static MaterialXDataType.texture2darrayhalf;
}

uint64_t *MaterialXDataType.texture2darrayfloat.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2darrayfloat != -1)
    swift_once();
  return &static MaterialXDataType.texture2darrayfloat;
}

uint64_t *MaterialXDataType.texture2darrayint.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2darrayint != -1)
    swift_once();
  return &static MaterialXDataType.texture2darrayint;
}

uint64_t *MaterialXDataType.texture3dhalf.unsafeMutableAddressor()
{
  if (one-time initialization token for texture3dhalf != -1)
    swift_once();
  return &static MaterialXDataType.texture3dhalf;
}

uint64_t *MaterialXDataType.texture3dfloat.unsafeMutableAddressor()
{
  if (one-time initialization token for texture3dfloat != -1)
    swift_once();
  return &static MaterialXDataType.texture3dfloat;
}

uint64_t *MaterialXDataType.texture3dint.unsafeMutableAddressor()
{
  if (one-time initialization token for texture3dint != -1)
    swift_once();
  return &static MaterialXDataType.texture3dint;
}

uint64_t *MaterialXDataType.texturecubehalf.unsafeMutableAddressor()
{
  if (one-time initialization token for texturecubehalf != -1)
    swift_once();
  return &static MaterialXDataType.texturecubehalf;
}

uint64_t *MaterialXDataType.texturecubefloat.unsafeMutableAddressor()
{
  if (one-time initialization token for texturecubefloat != -1)
    swift_once();
  return &static MaterialXDataType.texturecubefloat;
}

uint64_t *MaterialXDataType.sampler.unsafeMutableAddressor()
{
  if (one-time initialization token for sampler != -1)
    swift_once();
  return &static MaterialXDataType.sampler;
}

uint64_t *MaterialXDataType.bias.unsafeMutableAddressor()
{
  if (one-time initialization token for bias != -1)
    swift_once();
  return &static MaterialXDataType.bias;
}

uint64_t *MaterialXDataType.max_anisotropy.unsafeMutableAddressor()
{
  if (one-time initialization token for max_anisotropy != -1)
    swift_once();
  return &static MaterialXDataType.max_anisotropy;
}

uint64_t *MaterialXDataType.level.unsafeMutableAddressor()
{
  if (one-time initialization token for level != -1)
    swift_once();
  return &static MaterialXDataType.level;
}

uint64_t *MaterialXDataType.min_lod_clamp.unsafeMutableAddressor()
{
  if (one-time initialization token for min_lod_clamp != -1)
    swift_once();
  return &static MaterialXDataType.min_lod_clamp;
}

uint64_t *MaterialXDataType.offset.unsafeMutableAddressor()
{
  if (one-time initialization token for offset != -1)
    swift_once();
  return &static MaterialXDataType.offset;
}

uint64_t *MaterialXDataType.offset3.unsafeMutableAddressor()
{
  if (one-time initialization token for offset3 != -1)
    swift_once();
  return &static MaterialXDataType.offset3;
}

uint64_t *MaterialXDataType.lod_clamp.unsafeMutableAddressor()
{
  if (one-time initialization token for lod_clamp != -1)
    swift_once();
  return &static MaterialXDataType.lod_clamp;
}

uint64_t *MaterialXDataType.gradient2d.unsafeMutableAddressor()
{
  if (one-time initialization token for gradient2d != -1)
    swift_once();
  return &static MaterialXDataType.gradient2d;
}

uint64_t *MaterialXDataType.gradient3d.unsafeMutableAddressor()
{
  if (one-time initialization token for gradient3d != -1)
    swift_once();
  return &static MaterialXDataType.gradient3d;
}

uint64_t *MaterialXDataType.gradientcube.unsafeMutableAddressor()
{
  if (one-time initialization token for gradientcube != -1)
    swift_once();
  return &static MaterialXDataType.gradientcube;
}

uint64_t *MaterialXDataType.realityKitHoverData.unsafeMutableAddressor()
{
  if (one-time initialization token for realityKitHoverData != -1)
    swift_once();
  return &static MaterialXDataType.realityKitHoverData;
}

void MaterialXDataType.__allocating_init(properties:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void MaterialXDataType.init(properties:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t MaterialXDataType.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t MaterialXDataType.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MaterialXDataType.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

double one-time initialization function for unsupported()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1540;
  *(_QWORD *)(v0 + 40) = 0xEB00000000646574;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.unsupported = v0;
  return result;
}

uint64_t static MaterialXDataType.unsupported.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for unsupported);
}

double one-time initialization function for BOOLean()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1550;
  *(_QWORD *)(v0 + 40) = 0xE700000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.BOOLean = v0;
  return result;
}

uint64_t static MaterialXDataType.BOOLean.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for BOOLean);
}

double one-time initialization function for integer()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1560;
  *(_QWORD *)(v0 + 40) = 0xE700000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.integer = v0;
  return result;
}

uint64_t static MaterialXDataType.integer.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for integer);
}

uint64_t static MaterialXDataType.float.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for float);
}

double one-time initialization function for color3()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1580;
  *(_QWORD *)(v0 + 40) = 0xE600000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.color3 = v0;
  return result;
}

uint64_t static MaterialXDataType.color3.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for color3);
}

double one-time initialization function for color4()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1590;
  *(_QWORD *)(v0 + 40) = 0xE600000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.color4 = v0;
  return result;
}

uint64_t static MaterialXDataType.color4.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for color4);
}

double one-time initialization function for vector2()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC15A0;
  *(_QWORD *)(v0 + 40) = 0xE700000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.vector2 = v0;
  return result;
}

uint64_t static MaterialXDataType.vector2.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for vector2);
}

double one-time initialization function for vector3()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC15B0;
  *(_QWORD *)(v0 + 40) = 0xE700000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.vector3 = v0;
  return result;
}

uint64_t static MaterialXDataType.vector3.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for vector3);
}

double one-time initialization function for vector4()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC15C0;
  *(_QWORD *)(v0 + 40) = 0xE700000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.vector4 = v0;
  return result;
}

uint64_t static MaterialXDataType.vector4.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for vector4);
}

double one-time initialization function for matrix22()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC15D0;
  *(_QWORD *)(v0 + 40) = 0xE800000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.matrix22 = v0;
  return result;
}

uint64_t static MaterialXDataType.matrix22.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for matrix22);
}

double one-time initialization function for matrix33()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC15E0;
  *(_QWORD *)(v0 + 40) = 0xE800000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.matrix33 = v0;
  return result;
}

uint64_t static MaterialXDataType.matrix33.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for matrix33);
}

double one-time initialization function for matrix44()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC15F0;
  *(_QWORD *)(v0 + 40) = 0xE800000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.matrix44 = v0;
  return result;
}

uint64_t static MaterialXDataType.matrix44.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for matrix44);
}

uint64_t static MaterialXDataType.half.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for half);
}

double one-time initialization function for half2()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1610;
  *(_QWORD *)(v0 + 40) = 0xE500000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.half2 = v0;
  return result;
}

uint64_t static MaterialXDataType.half2.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for half2);
}

double one-time initialization function for half3()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1620;
  *(_QWORD *)(v0 + 40) = 0xE500000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.half3 = v0;
  return result;
}

uint64_t static MaterialXDataType.half3.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for half3);
}

double one-time initialization function for half4()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1630;
  *(_QWORD *)(v0 + 40) = 0xE500000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.half4 = v0;
  return result;
}

uint64_t static MaterialXDataType.half4.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for half4);
}

double one-time initialization function for float2()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1640;
  *(_QWORD *)(v0 + 40) = 0xE600000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.float2 = v0;
  return result;
}

uint64_t static MaterialXDataType.float2.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for float2);
}

double one-time initialization function for float3()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1650;
  *(_QWORD *)(v0 + 40) = 0xE600000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.float3 = v0;
  return result;
}

uint64_t static MaterialXDataType.float3.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for float3);
}

double one-time initialization function for float4()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1660;
  *(_QWORD *)(v0 + 40) = 0xE600000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.float4 = v0;
  return result;
}

uint64_t static MaterialXDataType.float4.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for float4);
}

double one-time initialization function for integer2()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1670;
  *(_QWORD *)(v0 + 40) = 0xE800000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.integer2 = v0;
  return result;
}

uint64_t static MaterialXDataType.integer2.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for integer2);
}

double one-time initialization function for integer3()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1680;
  *(_QWORD *)(v0 + 40) = 0xE800000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.integer3 = v0;
  return result;
}

uint64_t static MaterialXDataType.integer3.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for integer3);
}

double one-time initialization function for integer4()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1690;
  *(_QWORD *)(v0 + 40) = 0xE800000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.integer4 = v0;
  return result;
}

uint64_t static MaterialXDataType.integer4.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for integer4);
}

double one-time initialization function for surfaceshader()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC16A0;
  *(_QWORD *)(v0 + 40) = 0xED00007265646168;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.surfaceshader = v0;
  return result;
}

uint64_t static MaterialXDataType.surfaceshader.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for surfaceshader);
}

double one-time initialization function for displacementshader()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC16B0;
  *(_QWORD *)(v0 + 40) = 0x8000000245FCA9A0;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.displacementshader = v0;
  return result;
}

uint64_t *MaterialXDataType.displacementshader.unsafeMutableAddressor()
{
  if (one-time initialization token for displacementshader != -1)
    swift_once();
  return &static MaterialXDataType.displacementshader;
}

uint64_t static MaterialXDataType.displacementshader.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for displacementshader);
}

double one-time initialization function for volumeshader()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC16C0;
  *(_QWORD *)(v0 + 40) = 0xEC00000072656461;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.volumeshader = v0;
  return result;
}

uint64_t *MaterialXDataType.volumeshader.unsafeMutableAddressor()
{
  if (one-time initialization token for volumeshader != -1)
    swift_once();
  return &static MaterialXDataType.volumeshader;
}

uint64_t static MaterialXDataType.volumeshader.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for volumeshader);
}

double one-time initialization function for lightshader()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC16D0;
  *(_QWORD *)(v0 + 40) = 0xEB00000000726564;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.lightshader = v0;
  return result;
}

uint64_t *MaterialXDataType.lightshader.unsafeMutableAddressor()
{
  if (one-time initialization token for lightshader != -1)
    swift_once();
  return &static MaterialXDataType.lightshader;
}

uint64_t static MaterialXDataType.lightshader.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for lightshader);
}

double one-time initialization function for vertexshader()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC16E0;
  *(_QWORD *)(v0 + 40) = 0xE600000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.vertexshader = v0;
  return result;
}

uint64_t static MaterialXDataType.vertexshader.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for vertexshader);
}

double one-time initialization function for geometrymodifier()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC16F0;
  *(_QWORD *)(v0 + 40) = 0x8000000245FCABB0;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.geometrymodifier = v0;
  return result;
}

uint64_t static MaterialXDataType.geometrymodifier.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for geometrymodifier);
}

double one-time initialization function for material()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1700;
  *(_QWORD *)(v0 + 40) = 0xE800000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.material = v0;
  return result;
}

uint64_t *MaterialXDataType.material.unsafeMutableAddressor()
{
  if (one-time initialization token for material != -1)
    swift_once();
  return &static MaterialXDataType.material;
}

uint64_t static MaterialXDataType.material.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for material);
}

double one-time initialization function for filename()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1710;
  *(_QWORD *)(v0 + 40) = 0xE800000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.filename = v0;
  return result;
}

uint64_t static MaterialXDataType.filename.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for filename);
}

double one-time initialization function for string()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1720;
  *(_QWORD *)(v0 + 40) = 0xE600000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.string = v0;
  return result;
}

uint64_t static MaterialXDataType.string.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for string);
}

double one-time initialization function for stringarray()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1730;
  *(_QWORD *)(v0 + 40) = 0xEB00000000796172;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.stringarray = v0;
  return result;
}

uint64_t *MaterialXDataType.stringarray.unsafeMutableAddressor()
{
  if (one-time initialization token for stringarray != -1)
    swift_once();
  return &static MaterialXDataType.stringarray;
}

uint64_t static MaterialXDataType.stringarray.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for stringarray);
}

double one-time initialization function for texture2dhalf()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1740;
  *(_QWORD *)(v0 + 40) = 0xED0000666C616864;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.texture2dhalf = v0;
  return result;
}

uint64_t static MaterialXDataType.texture2dhalf.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texture2dhalf);
}

double one-time initialization function for texture2dfloat()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1740;
  *(_QWORD *)(v0 + 40) = 0xEE0074616F6C6664;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.texture2dfloat = v0;
  return result;
}

uint64_t static MaterialXDataType.texture2dfloat.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texture2dfloat);
}

double one-time initialization function for texture2dint()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1740;
  *(_QWORD *)(v0 + 40) = 0xEC000000746E6964;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.texture2dint = v0;
  return result;
}

uint64_t static MaterialXDataType.texture2dint.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texture2dint);
}

double one-time initialization function for texture2darrayhalf()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC16B0;
  *(_QWORD *)(v0 + 40) = 0x8000000245FCAA40;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.texture2darrayhalf = v0;
  return result;
}

uint64_t static MaterialXDataType.texture2darrayhalf.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texture2darrayhalf);
}

double one-time initialization function for texture2darrayfloat()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1750;
  *(_QWORD *)(v0 + 40) = 0x8000000245FCAA20;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.texture2darrayfloat = v0;
  return result;
}

uint64_t static MaterialXDataType.texture2darrayfloat.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texture2darrayfloat);
}

double one-time initialization function for texture2darrayint()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1760;
  *(_QWORD *)(v0 + 40) = 0x8000000245FCAA00;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.texture2darrayint = v0;
  return result;
}

uint64_t static MaterialXDataType.texture2darrayint.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texture2darrayint);
}

double one-time initialization function for texture3dhalf()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1770;
  *(_QWORD *)(v0 + 40) = 0xED0000666C616864;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.texture3dhalf = v0;
  return result;
}

uint64_t static MaterialXDataType.texture3dhalf.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texture3dhalf);
}

double one-time initialization function for texture3dfloat()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1770;
  *(_QWORD *)(v0 + 40) = 0xEE0074616F6C6664;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.texture3dfloat = v0;
  return result;
}

uint64_t static MaterialXDataType.texture3dfloat.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texture3dfloat);
}

double one-time initialization function for texture3dint()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1770;
  *(_QWORD *)(v0 + 40) = 0xEC000000746E6964;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.texture3dint = v0;
  return result;
}

uint64_t static MaterialXDataType.texture3dint.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texture3dint);
}

double one-time initialization function for texturecubehalf()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1780;
  *(_QWORD *)(v0 + 40) = 0xEF666C6168656275;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.texturecubehalf = v0;
  return result;
}

uint64_t static MaterialXDataType.texturecubehalf.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texturecubehalf);
}

double one-time initialization function for texturecubefloat()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC16F0;
  *(_QWORD *)(v0 + 40) = 0x8000000245FCA9E0;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.texturecubefloat = v0;
  return result;
}

uint64_t static MaterialXDataType.texturecubefloat.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texturecubefloat);
}

double one-time initialization function for texturecubeint()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1780;
  *(_QWORD *)(v0 + 40) = 0xEE00746E69656275;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.texturecubeint = v0;
  return result;
}

uint64_t *MaterialXDataType.texturecubeint.unsafeMutableAddressor()
{
  if (one-time initialization token for texturecubeint != -1)
    swift_once();
  return &static MaterialXDataType.texturecubeint;
}

uint64_t static MaterialXDataType.texturecubeint.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texturecubeint);
}

uint64_t static MaterialXDataType.sampler.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for sampler);
}

double one-time initialization function for max_anisotropy()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC17A0;
  *(_QWORD *)(v0 + 40) = 0xEE0079706F72746FLL;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.max_anisotropy = v0;
  return result;
}

uint64_t static MaterialXDataType.max_anisotropy.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for max_anisotropy);
}

uint64_t static MaterialXDataType.lod_clamp.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for lod_clamp);
}

uint64_t static MaterialXDataType.bias.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for bias);
}

uint64_t static MaterialXDataType.level.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for level);
}

uint64_t static MaterialXDataType.gradient2d.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for gradient2d);
}

uint64_t static MaterialXDataType.gradient3d.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for gradient3d);
}

double one-time initialization function for gradientcube()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC17E0;
  *(_QWORD *)(v0 + 40) = 0xEC00000065627563;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.gradientcube = v0;
  return result;
}

uint64_t static MaterialXDataType.gradientcube.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for gradientcube);
}

uint64_t static MaterialXDataType.offset.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for offset);
}

double one-time initialization function for offset3()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1800;
  *(_QWORD *)(v0 + 40) = 0xE700000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.offset3 = v0;
  return result;
}

uint64_t static MaterialXDataType.offset3.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for offset3);
}

double one-time initialization function for min_lod_clamp()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1810;
  *(_QWORD *)(v0 + 40) = 0xED0000706D616C63;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.min_lod_clamp = v0;
  return result;
}

uint64_t static MaterialXDataType.min_lod_clamp.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for min_lod_clamp);
}

double one-time initialization function for realityKitHoverData()
{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1820;
  *(_QWORD *)(v0 + 40) = 0x8000000245FCA9C0;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.realityKitHoverData = v0;
  return result;
}

uint64_t static MaterialXDataType.realityKitHoverData.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for realityKitHoverData);
}

uint64_t one-time initialization function for uAddressMode()
{
  uint64_t result;

  type metadata accessor for MaterialXDataType();
  result = swift_allocObject();
  strcpy((char *)(result + 32), "uaddressmode");
  *(_BYTE *)(result + 45) = 0;
  *(_WORD *)(result + 46) = -5120;
  *(_QWORD *)(result + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(result + 24) = &outlined read-only object #0 of one-time initialization function for uAddressMode;
  static MaterialXDataType.uAddressMode = result;
  return result;
}

uint64_t static MaterialXDataType.uAddressMode.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for uAddressMode);
}

uint64_t one-time initialization function for vAddressMode()
{
  uint64_t result;

  type metadata accessor for MaterialXDataType();
  result = swift_allocObject();
  strcpy((char *)(result + 32), "vaddressmode");
  *(_BYTE *)(result + 45) = 0;
  *(_WORD *)(result + 46) = -5120;
  *(_QWORD *)(result + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(result + 24) = &outlined read-only object #0 of one-time initialization function for vAddressMode;
  static MaterialXDataType.vAddressMode = result;
  return result;
}

uint64_t static MaterialXDataType.vAddressMode.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for vAddressMode);
}

_QWORD *one-time initialization function for filterType()
{
  _QWORD *result;

  type metadata accessor for MaterialXDataType();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0x79747265746C6966;
  result[5] = 0xEA00000000006570;
  result[2] = MEMORY[0x24BEE4AF8];
  result[3] = &outlined read-only object #0 of one-time initialization function for filterType;
  static MaterialXDataType.filterType = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.filterType.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for filterType);
}

_QWORD *one-time initialization function for blurFilterType()
{
  _QWORD *result;

  type metadata accessor for MaterialXDataType();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0x746C696672756C62;
  result[5] = 0xEA00000000007265;
  result[2] = MEMORY[0x24BEE4AF8];
  result[3] = &outlined read-only object #0 of one-time initialization function for blurFilterType;
  static MaterialXDataType.blurFilterType = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.blurFilterType.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for blurFilterType);
}

uint64_t one-time initialization function for frameEndAction()
{
  uint64_t result;

  type metadata accessor for MaterialXDataType();
  result = swift_allocObject();
  strcpy((char *)(result + 32), "frameendaction");
  *(_BYTE *)(result + 47) = -18;
  *(_QWORD *)(result + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(result + 24) = &outlined read-only object #0 of one-time initialization function for frameEndAction;
  static MaterialXDataType.frameEndAction = result;
  return result;
}

uint64_t static MaterialXDataType.frameEndAction.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for frameEndAction);
}

_QWORD *one-time initialization function for space()
{
  _QWORD *result;

  type metadata accessor for MaterialXDataType();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0x6563617073;
  result[5] = 0xE500000000000000;
  result[2] = MEMORY[0x24BEE4AF8];
  result[3] = &outlined read-only object #0 of one-time initialization function for space;
  static MaterialXDataType.space = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.space.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for space);
}

_QWORD *one-time initialization function for normalMapSpace()
{
  _QWORD *result;

  type metadata accessor for MaterialXDataType();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0x6563617073;
  result[5] = 0xE500000000000000;
  result[2] = MEMORY[0x24BEE4AF8];
  result[3] = &outlined read-only object #0 of one-time initialization function for normalMapSpace;
  static MaterialXDataType.normalMapSpace = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.normalMapSpace.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for normalMapSpace);
}

_QWORD *one-time initialization function for lumacoeffs()
{
  _QWORD *result;

  type metadata accessor for MaterialXDataType();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0x66656F63616D756CLL;
  result[5] = 0xEA00000000007366;
  result[2] = MEMORY[0x24BEE4AF8];
  result[3] = &outlined read-only object #0 of one-time initialization function for lumacoeffs;
  static MaterialXDataType.lumacoeffs = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.lumacoeffs.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for lumacoeffs);
}

_QWORD *one-time initialization function for wrapS()
{
  _QWORD *result;

  type metadata accessor for MaterialXDataType();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0x5370617277;
  result[5] = 0xE500000000000000;
  result[2] = MEMORY[0x24BEE4AF8];
  result[3] = &outlined read-only object #0 of one-time initialization function for wrapS;
  static MaterialXDataType.usd.wrapS = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.usd.wrapS.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for wrapS);
}

_QWORD *one-time initialization function for wrapT()
{
  _QWORD *result;

  type metadata accessor for MaterialXDataType();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0x5470617277;
  result[5] = 0xE500000000000000;
  result[2] = MEMORY[0x24BEE4AF8];
  result[3] = &outlined read-only object #0 of one-time initialization function for wrapT;
  static MaterialXDataType.usd.wrapT = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.usd.wrapT.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for wrapT);
}

_QWORD *one-time initialization function for cubeimageFilterType()
{
  _QWORD *result;

  type metadata accessor for MaterialXDataType();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0x79747265746C6966;
  result[5] = 0xEA00000000006570;
  result[2] = MEMORY[0x24BEE4AF8];
  result[3] = &outlined read-only object #0 of one-time initialization function for cubeimageFilterType;
  static MaterialXDataType.realitykit.cubeimageFilterType = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.cubeimageFilterType.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for cubeimageFilterType);
}

_QWORD *one-time initialization function for coord()
{
  _QWORD *result;

  type metadata accessor for MaterialXDataType();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0x64726F6F63;
  result[5] = 0xE500000000000000;
  result[2] = MEMORY[0x24BEE4AF8];
  result[3] = &outlined read-only object #0 of one-time initialization function for coord;
  static MaterialXDataType.realitykit.coord = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.coord.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for coord);
}

_QWORD *one-time initialization function for addressMode()
{
  _QWORD *result;

  type metadata accessor for MaterialXDataType();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0x73736572646461;
  result[5] = 0xE700000000000000;
  result[2] = MEMORY[0x24BEE4AF8];
  result[3] = &outlined read-only object #0 of one-time initialization function for addressMode;
  static MaterialXDataType.realitykit.addressMode = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.addressMode.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for addressMode);
}

uint64_t one-time initialization function for pixelAddressMode()
{
  uint64_t result;

  type metadata accessor for MaterialXDataType();
  result = swift_allocObject();
  strcpy((char *)(result + 32), "pixel_address");
  *(_WORD *)(result + 46) = -4864;
  *(_QWORD *)(result + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(result + 24) = &outlined read-only object #0 of one-time initialization function for pixelAddressMode;
  static MaterialXDataType.realitykit.pixelAddressMode = result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.pixelAddressMode.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for pixelAddressMode);
}

_QWORD *one-time initialization function for sAddressMode()
{
  _QWORD *result;

  type metadata accessor for MaterialXDataType();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0x7365726464615F73;
  result[5] = 0xE900000000000073;
  result[2] = MEMORY[0x24BEE4AF8];
  result[3] = &outlined read-only object #0 of one-time initialization function for sAddressMode;
  static MaterialXDataType.realitykit.sAddressMode = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.sAddressMode.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for sAddressMode);
}

_QWORD *one-time initialization function for tAddressMode()
{
  _QWORD *result;

  type metadata accessor for MaterialXDataType();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0x7365726464615F74;
  result[5] = 0xE900000000000073;
  result[2] = MEMORY[0x24BEE4AF8];
  result[3] = &outlined read-only object #0 of one-time initialization function for tAddressMode;
  static MaterialXDataType.realitykit.tAddressMode = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.tAddressMode.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for tAddressMode);
}

_QWORD *one-time initialization function for u_wrap_mode()
{
  _QWORD *result;

  type metadata accessor for MaterialXDataType();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0x6D5F706172775F75;
  result[5] = 0xEB0000000065646FLL;
  result[2] = MEMORY[0x24BEE4AF8];
  result[3] = &outlined read-only object #0 of one-time initialization function for u_wrap_mode;
  static MaterialXDataType.realitykit.u_wrap_mode = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.u_wrap_mode.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for u_wrap_mode);
}

_QWORD *one-time initialization function for v_wrap_mode()
{
  _QWORD *result;

  type metadata accessor for MaterialXDataType();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0x6D5F706172775F76;
  result[5] = 0xEB0000000065646FLL;
  result[2] = MEMORY[0x24BEE4AF8];
  result[3] = &outlined read-only object #0 of one-time initialization function for v_wrap_mode;
  static MaterialXDataType.realitykit.v_wrap_mode = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.v_wrap_mode.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for v_wrap_mode);
}

_QWORD *one-time initialization function for w_wrap_mode()
{
  _QWORD *result;

  type metadata accessor for MaterialXDataType();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0x6D5F706172775F77;
  result[5] = 0xEB0000000065646FLL;
  result[2] = MEMORY[0x24BEE4AF8];
  result[3] = &outlined read-only object #0 of one-time initialization function for w_wrap_mode;
  static MaterialXDataType.realitykit.w_wrap_mode = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.w_wrap_mode.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for w_wrap_mode);
}

_QWORD *one-time initialization function for rAddressMode()
{
  _QWORD *result;

  type metadata accessor for MaterialXDataType();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0x7365726464615F72;
  result[5] = 0xE900000000000073;
  result[2] = MEMORY[0x24BEE4AF8];
  result[3] = &outlined read-only object #0 of one-time initialization function for rAddressMode;
  static MaterialXDataType.realitykit.rAddressMode = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.rAddressMode.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for rAddressMode);
}

_QWORD *one-time initialization function for u_pixel_wrap_mode()
{
  _QWORD *result;

  type metadata accessor for MaterialXDataType();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0x6D5F706172775F75;
  result[5] = 0xEB0000000065646FLL;
  result[2] = MEMORY[0x24BEE4AF8];
  result[3] = &outlined read-only object #0 of one-time initialization function for u_pixel_wrap_mode;
  static MaterialXDataType.realitykit.u_pixel_wrap_mode = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.u_pixel_wrap_mode.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for u_pixel_wrap_mode);
}

_QWORD *one-time initialization function for v_pixel_wrap_mode()
{
  _QWORD *result;

  type metadata accessor for MaterialXDataType();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0x6D5F706172775F76;
  result[5] = 0xEB0000000065646FLL;
  result[2] = MEMORY[0x24BEE4AF8];
  result[3] = &outlined read-only object #0 of one-time initialization function for v_pixel_wrap_mode;
  static MaterialXDataType.realitykit.v_pixel_wrap_mode = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.v_pixel_wrap_mode.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for v_pixel_wrap_mode);
}

_QWORD *one-time initialization function for w_pixel_wrap_mode()
{
  _QWORD *result;

  type metadata accessor for MaterialXDataType();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0x6D5F706172775F77;
  result[5] = 0xEB0000000065646FLL;
  result[2] = MEMORY[0x24BEE4AF8];
  result[3] = &outlined read-only object #0 of one-time initialization function for w_pixel_wrap_mode;
  static MaterialXDataType.realitykit.w_pixel_wrap_mode = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.w_pixel_wrap_mode.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for w_pixel_wrap_mode);
}

uint64_t one-time initialization function for borderColor()
{
  uint64_t result;

  type metadata accessor for MaterialXDataType();
  result = swift_allocObject();
  strcpy((char *)(result + 32), "border_color");
  *(_BYTE *)(result + 45) = 0;
  *(_WORD *)(result + 46) = -5120;
  *(_QWORD *)(result + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(result + 24) = &outlined read-only object #0 of one-time initialization function for borderColor;
  static MaterialXDataType.realitykit.borderColor = result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.borderColor.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for borderColor);
}

_QWORD *one-time initialization function for filter()
{
  _QWORD *result;

  type metadata accessor for MaterialXDataType();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0x7265746C6966;
  result[5] = 0xE600000000000000;
  result[2] = MEMORY[0x24BEE4AF8];
  result[3] = &outlined read-only object #0 of one-time initialization function for filter;
  static MaterialXDataType.realitykit.filter = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.filter.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for filter);
}

_QWORD *one-time initialization function for magFilter()
{
  _QWORD *result;

  type metadata accessor for MaterialXDataType();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0x746C69665F67616DLL;
  result[5] = 0xEA00000000007265;
  result[2] = MEMORY[0x24BEE4AF8];
  result[3] = &outlined read-only object #0 of one-time initialization function for magFilter;
  static MaterialXDataType.realitykit.magFilter = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.magFilter.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for magFilter);
}

_QWORD *one-time initialization function for minFilter()
{
  _QWORD *result;

  type metadata accessor for MaterialXDataType();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0x746C69665F6E696DLL;
  result[5] = 0xEA00000000007265;
  result[2] = MEMORY[0x24BEE4AF8];
  result[3] = &outlined read-only object #0 of one-time initialization function for minFilter;
  static MaterialXDataType.realitykit.minFilter = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.minFilter.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for minFilter);
}

_QWORD *one-time initialization function for mipFilter()
{
  _QWORD *result;

  type metadata accessor for MaterialXDataType();
  result = (_QWORD *)swift_allocObject();
  result[4] = 0x746C69665F70696DLL;
  result[5] = 0xEA00000000007265;
  result[2] = MEMORY[0x24BEE4AF8];
  result[3] = &outlined read-only object #0 of one-time initialization function for mipFilter;
  static MaterialXDataType.realitykit.mipFilter = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.mipFilter.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for mipFilter);
}

uint64_t one-time initialization function for space()
{
  uint64_t result;

  result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0, 0, 0x70533A3A786C746DLL, 0xEB00000000656361, (uint64_t)&outlined read-only object #0 of one-time initialization function for space);
  static MetalDataType.MaterialX.space = result;
  return result;
}

uint64_t static MetalDataType.MaterialX.space.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for space);
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return MEMORY[0x24BEE1110]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if (!(_DWORD)result)
  {
    result = a1(result, *(_QWORD *)(v3 + 16) + 1, 1, v3);
    *v1 = result;
  }
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result, uint64_t (*a2)(BOOL))
{
  uint64_t v2;
  unint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    result = a2(v3 > 1);
    *(_QWORD *)v2 = result;
  }
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *v3;
  *(_QWORD *)(v4 + 16) = result + 1;
  v5 = v4 + 16 * result;
  *(_QWORD *)(v5 + 32) = a2;
  *(_QWORD *)(v5 + 40) = a3;
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *v2;
  *(_QWORD *)(v5 + 16) = a1 + 1;
  v6 = type metadata accessor for NodeDef.Implementation(0);
  return outlined init with take of NodeDef.Implementation(a2, v5+ ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72) * a1);
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Edge>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 112);
  return v4;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = String.UTF16View.index(_:offsetBy:)();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x24954B07C](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

uint64_t specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = String.init<A>(_:)();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = static String._copying(_:)();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  v11 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 | ((((unint64_t)v11 >> 32) & 1) << 32);
}

unsigned __int8 *specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = String.init<A>(_:)();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = static String._copying(_:)();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  v11 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned __int8 v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  uint64_t v31;
  unsigned __int8 v32;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v16 = a2 - 1;
      if (a2 != 1)
      {
        v17 = a3 + 87;
        if (a3 > 10)
        {
          v18 = a3 + 55;
        }
        else
        {
          v17 = 97;
          v18 = 65;
        }
        if (a3 <= 10)
          v19 = a3 + 48;
        else
          v19 = 58;
        if (result)
        {
          v8 = 0;
          v20 = result + 1;
          do
          {
            v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                v12 = 0;
                v13 = 1;
                if (v21 < 0x61 || v21 >= v17)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v22 = -87;
              }
              else
              {
                v22 = -55;
              }
            }
            else
            {
              v22 = -48;
            }
            v23 = (int)v8 * (uint64_t)(int)a3;
            if (v23 != (int)v23)
              goto LABEL_72;
            v24 = v21 + v22;
            v8 = v23 + v24;
            if (__OFADD__((_DWORD)v23, v24))
              goto LABEL_72;
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v26 = a3 + 55;
        }
        else
        {
          v25 = 97;
          v26 = 65;
        }
        if (a3 <= 10)
          v27 = a3 + 48;
        else
          v27 = 58;
        if (result)
        {
          v28 = 0;
          do
          {
            v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                v12 = 0;
                v13 = 1;
                if (v29 < 0x61 || v29 >= v25)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v30 = -87;
              }
              else
              {
                v30 = -55;
              }
            }
            else
            {
              v30 = -48;
            }
            v31 = (int)v28 * (uint64_t)(int)a3;
            if (v31 != (int)v31)
              goto LABEL_72;
            v32 = v29 + v30;
            v28 = v31 + v32;
            if (__OFADD__((_DWORD)v31, v32))
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          v8 = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            v14 = (int)v8 * (uint64_t)(int)a3;
            if (v14 != (int)v14)
              goto LABEL_72;
            v15 = v10 + v11;
            v8 = v14 - v15;
            if (__OFSUB__((_DWORD)v14, v15))
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = String.subscript.getter();
  v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v13 = MEMORY[0x24954B010](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x24954B010);
LABEL_9:
      _StringObject.sharedUTF8.getter();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x24954B010]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t specialized Collection.count.getter(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)();
  }
  __break(1u);
  return result;
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

unint64_t specialized Float.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  int v3;
  _BYTE *v4;
  uint64_t v5;
  _QWORD v7[3];
  unsigned int v8;

  v8 = 0;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    swift_bridgeObjectRelease();
    v3 = LOBYTE(v7[0]);
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    v7[0] = a1;
    v7[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    v3 = (a1 > 0x20u || ((0x100003E01uLL >> a1) & 1) == 0)
      && (v4 = (_BYTE *)_swift_stdlib_strtof_clocale()) != 0
      && *v4 == 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((a1 & 0x1000000000000000) != 0)
      v2 = (_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v2 = (_BYTE *)_StringObject.sharedUTF8.getter();
    partial apply for closure #1 in closure #1 in Float.init<A>(_:)(v2, (BOOL *)v7);
    v3 = LOBYTE(v7[0]);
    swift_bridgeObjectRelease();
  }
  v5 = v8;
  LOBYTE(v7[0]) = v3 ^ 1;
  if (!v3)
    v5 = 0;
  return v5 | ((unint64_t)(v3 ^ 1u) << 32);
}

Swift::String *specialized MaterialXDataType.__allocating_init(xmlElement:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType;
  Swift::String v4;
  Swift::String *result;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  ObjectType = swift_getObjectType();
  v4._countAndFlagsBits = 1701869940;
  v4._object = (void *)0xE400000000000000;
  v6 = XMLElement.getRequiredAttribute(_:)(v4);
  result = (Swift::String *)v6._countAndFlagsBits;
  if (!v7)
  {
    if ((*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a2 + 16))(1836412517, 0xE400000000000000, ObjectType, a2)&& (v9 = v8, v10 = swift_getObjectType(), (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v10, v9), v12 = v11, swift_unknownObjectRelease(), v12))
    {
      lazy protocol witness table accessor for type String and conformance String();
      v13 = StringProtocol.components<A>(separatedBy:)();
      swift_bridgeObjectRelease();
      type metadata accessor for MaterialXDataType();
      result = (Swift::String *)swift_allocObject();
    }
    else
    {
      type metadata accessor for MaterialXDataType();
      result = (Swift::String *)swift_allocObject();
      v13 = 0;
    }
    result[2] = v6;
    result[1]._countAndFlagsBits = MEMORY[0x24BEE4AF8];
    result[1]._object = (void *)v13;
  }
  return result;
}

uint64_t specialized Graph.appendSwizzleNode(to:resultType:channels:nodeDefStore:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  Swift::String v19;
  unint64_t v20;
  const char *v21;
  Swift::String v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  __int128 v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t result;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  Swift::String v41;
  unint64_t v42;
  __int128 v43;
  __int128 *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  void *v55;
  Swift::String v56;
  Swift::String v57;
  uint64_t v58;
  void *v59;
  Swift::String v60;
  __int128 v61;
  uint64_t v62;
  void *v63;
  Swift::String v64;
  Swift::String v65;
  unint64_t v66;
  char v67;
  _OWORD *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  __int128 *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  __int128 *v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  __int128 *v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _OWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  unint64_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  _BYTE v158[25];
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char v162[8];
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  __int128 v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD v185[5];
  char v186;
  uint64_t v187;
  _QWORD v188[5];
  char v189;
  uint64_t v190;
  _OWORD v191[10];
  unint64_t v192;

  v7 = v6;
  v14 = a1[1];
  type metadata accessor for MaterialXDataType();
  v15 = swift_dynamicCastClass();
  if (!v15)
  {
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi47_((uint64_t)&v138);
    *(_QWORD *)&v144 = 0;
    *((_QWORD *)&v144 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(58);
    v22._countAndFlagsBits = 0x742074757074754FLL;
    v22._object = (void *)0xED00002720657079;
    String.append(_:)(v22);
    v23 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 136);
    v24 = swift_retain();
    v25._countAndFlagsBits = v23(v24);
    String.append(_:)(v25);
    swift_release();
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 0xD00000000000002BLL;
    v26._object = (void *)0x8000000245FCAA90;
    String.append(_:)(v26);
    v27 = v144;
    outlined init with take of UserGraphError.ErrorType(&v138, (uint64_t)&v144);
    v156 = v27;
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    swift_allocError();
    *v28 = v144;
    v29 = v148;
    v31 = v145;
    v30 = v146;
    v28[3] = v147;
    v28[4] = v29;
    v28[1] = v31;
    v28[2] = v30;
    v32 = v152;
    v34 = v149;
    v33 = v150;
    v28[7] = v151;
    v28[8] = v32;
    v28[5] = v34;
    v28[6] = v33;
    v35 = v156;
    v37 = v153;
    v36 = v154;
    v28[11] = v155;
    v28[12] = v35;
    v28[9] = v37;
    v28[10] = v36;
    return swift_willThrow();
  }
  v16 = v15;
  if (*(_QWORD *)(v15 + 24))
  {
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi47_((uint64_t)&v138);
    *(_QWORD *)&v144 = 0;
    *((_QWORD *)&v144 + 1) = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v144 = 0x272065707954;
    *((_QWORD *)&v144 + 1) = 0xE600000000000000;
    v17 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 136);
    v18 = swift_retain();
    v19._countAndFlagsBits = v17(v18);
    String.append(_:)(v19);
    swift_release();
    swift_bridgeObjectRelease();
    v20 = 0xD000000000000021;
    v21 = "' not supported as swizzle output";
LABEL_7:
    v42 = (unint64_t)(v21 - 32) | 0x8000000000000000;
    String.append(_:)(*(Swift::String *)&v20);
    v43 = v144;
    outlined init with take of UserGraphError.ErrorType(&v138, (uint64_t)&v144);
    v156 = v43;
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    swift_allocError();
    *v44 = v144;
    v45 = v148;
    v47 = v145;
    v46 = v146;
    v44[3] = v147;
    v44[4] = v45;
    v44[1] = v47;
    v44[2] = v46;
    v48 = v152;
    v50 = v149;
    v49 = v150;
    v44[7] = v151;
    v44[8] = v48;
    v44[5] = v50;
    v44[6] = v49;
    v51 = v156;
    v53 = v153;
    v52 = v154;
    v44[11] = v155;
    v44[12] = v51;
    v44[9] = v53;
    v44[10] = v52;
    swift_willThrow();
    return swift_release();
  }
  if (a2[3])
  {
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi47_((uint64_t)&v138);
    *(_QWORD *)&v144 = 0;
    *((_QWORD *)&v144 + 1) = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v144 = 0x272065707954;
    *((_QWORD *)&v144 + 1) = 0xE600000000000000;
    v39 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 136);
    v40 = swift_retain();
    v41._countAndFlagsBits = v39(v40);
    String.append(_:)(v41);
    swift_release();
    swift_bridgeObjectRelease();
    v20 = 0xD000000000000020;
    v21 = "' not supported as swizzle input";
    goto LABEL_7;
  }
  v132 = a6;
  swift_retain();
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v144 = 0x7A7A6977735F444ELL;
  *((_QWORD *)&v144 + 1) = 0xEB000000005F656CLL;
  v54 = *(_QWORD *)(v16 + 32);
  v55 = *(void **)(v16 + 40);
  swift_bridgeObjectRetain();
  v56._countAndFlagsBits = v54;
  v56._object = v55;
  String.append(_:)(v56);
  swift_bridgeObjectRelease();
  v57._countAndFlagsBits = 95;
  v57._object = (void *)0xE100000000000000;
  String.append(_:)(v57);
  v58 = a2[4];
  v59 = (void *)a2[5];
  swift_bridgeObjectRetain();
  v60._countAndFlagsBits = v58;
  v60._object = v59;
  String.append(_:)(v60);
  swift_bridgeObjectRelease();
  v61 = v144;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v144 = 0xD000000000000013;
  *((_QWORD *)&v144 + 1) = 0x8000000245FCAB20;
  v62 = a1[2];
  v63 = (void *)a1[3];
  swift_bridgeObjectRetain();
  v64._countAndFlagsBits = v62;
  v64._object = v63;
  String.append(_:)(v64);
  swift_bridgeObjectRelease();
  v65._countAndFlagsBits = 39;
  v65._object = (void *)0xE100000000000000;
  String.append(_:)(v65);
  if (!*(_QWORD *)(a5 + 16))
    goto LABEL_16;
  swift_bridgeObjectRetain();
  v66 = specialized __RawDictionaryStorage.find<A>(_:)(v61, *((uint64_t *)&v61 + 1));
  if ((v67 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    v138 = v61;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi18_((uint64_t)&v138);
    outlined init with take of UserGraphError.ErrorType(&v138, (uint64_t)&v144);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v156 = 0uLL;
    swift_allocError();
    *v80 = v144;
    v81 = v148;
    v83 = v145;
    v82 = v146;
    v80[3] = v147;
    v80[4] = v81;
    v80[1] = v83;
    v80[2] = v82;
    v84 = v152;
    v86 = v149;
    v85 = v150;
    v80[7] = v151;
    v80[8] = v84;
    v80[5] = v86;
    v80[6] = v85;
    v87 = v156;
    v89 = v153;
    v88 = v154;
    v80[11] = v155;
    v80[12] = v87;
    v80[9] = v89;
    v80[10] = v88;
    swift_bridgeObjectRetain();
    swift_willThrow();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v68 = (_OWORD *)(*(_QWORD *)(a5 + 56) + 144 * v66);
  v191[0] = *v68;
  v69 = v68[4];
  v71 = v68[1];
  v70 = v68[2];
  v191[3] = v68[3];
  v191[4] = v69;
  v191[1] = v71;
  v191[2] = v70;
  v72 = v68[8];
  v74 = v68[5];
  v73 = v68[6];
  v191[7] = v68[7];
  v191[8] = v72;
  v191[5] = v74;
  v191[6] = v73;
  outlined retain of NodeDef((uint64_t)v191);
  swift_bridgeObjectRelease();
  specialized NodeDefStore.createNode(in:from:label:)(v137, v191, &v157);
  v129 = *((_QWORD *)&v157 + 1);
  v125 = v157;
  v126 = *(_OWORD *)v158;
  v127 = *(_QWORD *)&v158[16];
  v128 = v158[24];
  outlined release of NodeDef((uint64_t)v191);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for string != -1)
    swift_once();
  v75 = static MaterialXDataType.string;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  v76 = swift_allocObject();
  *(_OWORD *)(v76 + 16) = xmmword_245FBECD0;
  *(_QWORD *)(v76 + 32) = 7632239;
  *(_QWORD *)(v76 + 40) = 0xE300000000000000;
  *(_QWORD *)(v76 + 48) = v75;
  v77 = swift_allocObject();
  *(_QWORD *)(v77 + 16) = a3;
  *(_QWORD *)(v77 + 24) = a4;
  *(_OWORD *)(v77 + 32) = 0u;
  *(_OWORD *)(v77 + 48) = 0u;
  *(_OWORD *)(v77 + 64) = 0u;
  *(_BYTE *)(v77 + 80) = 6;
  *(_QWORD *)(v77 + 88) = v75;
  v78 = *(_QWORD *)(v137 + 40);
  swift_retain_n();
  swift_bridgeObjectRetain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v78, MEMORY[0x24BEE4AF8], v76, v77, v137 + 64, v137, &v159);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  ShaderGraphNode.out.getter((uint64_t)v162);
  if (v7)
  {
    outlined init with take of NodePersonality(&v159, &v192);
    outlined release of NodePersonality(&v192);
    v184 = v160;
    outlined release of [Input]((uint64_t)&v184);
    v183 = v161;
    outlined release of [Input]((uint64_t)&v183);
    outlined init with take of NodePersonality(&v157, &v182);
    outlined release of NodePersonality(&v182);
    v181 = *((_QWORD *)&v157 + 1);
    outlined release of [Input]((uint64_t)&v181);
    v180 = *(_QWORD *)v158;
    v79 = &v180;
LABEL_36:
    outlined release of [Input]((uint64_t)v79);
    return swift_release();
  }
  v179 = v129;
  v90 = *(_QWORD *)(v129 + 16);
  if (!v90)
  {
LABEL_25:
    outlined init with take of NodePersonality(&v157, &v169);
    v168 = *(_QWORD *)v158;
    *(_QWORD *)&v138 = v125;
    *((_QWORD *)&v138 + 1) = v129;
    v139 = v126;
    v140 = v127;
    v141 = v128;
    v142 = 0x736C656E6E616863;
    v143 = 0xE800000000000000;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v138);
    outlined init with take of UserGraphError.ErrorType(&v138, (uint64_t)&v144);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v156 = 0uLL;
    swift_allocError();
    *v97 = v144;
    v98 = v148;
    v100 = v145;
    v99 = v146;
    v97[3] = v147;
    v97[4] = v98;
    v97[1] = v100;
    v97[2] = v99;
    v101 = v152;
    v103 = v149;
    v102 = v150;
    v97[7] = v151;
    v97[8] = v101;
    v97[5] = v103;
    v97[6] = v102;
    v104 = v156;
    v106 = v153;
    v105 = v154;
    v97[11] = v155;
    v97[12] = v104;
    v97[9] = v106;
    v97[10] = v105;
    outlined retain of [Input]((uint64_t)&v179);
    outlined retain of NodePersonality(&v169);
    outlined retain of [Input]((uint64_t)&v168);
    swift_willThrow();
    swift_release();
    v167 = v163;
    outlined release of String((uint64_t)&v167);
    outlined init with take of NodePersonality(&v159, &v166);
    outlined release of NodePersonality(&v166);
    v165 = v160;
    outlined release of [Input]((uint64_t)&v165);
    v164 = v161;
    outlined release of [Input]((uint64_t)&v164);
    outlined release of NodePersonality(&v169);
    outlined release of [Input]((uint64_t)&v179);
    v79 = &v168;
    goto LABEL_36;
  }
  v91 = (_QWORD *)(v129 + 80);
  while (1)
  {
    v92 = *(v91 - 5);
    v93 = *(v91 - 4);
    v94 = *(v91 - 3);
    v133 = *(v91 - 2);
    v135 = *(v91 - 6);
    v95 = *((_BYTE *)v91 - 8);
    v130 = *v91;
    if (v93 == 0x736C656E6E616863 && v94 == 0xE800000000000000)
      break;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_27;
    v91 += 7;
    if (!--v90)
      goto LABEL_25;
  }
  v94 = 0xE800000000000000;
LABEL_27:
  v188[0] = v135;
  v188[1] = v92;
  v188[2] = v93;
  v188[3] = v94;
  v188[4] = v133;
  v189 = v95;
  v190 = v130;
  swift_retain();
  swift_bridgeObjectRetain();
  Graph.connect(_:to:)((uint64_t)v162, (unint64_t)v188);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v178 = v163;
  outlined release of String((uint64_t)&v178);
  v107 = *(_QWORD *)(v129 + 16);
  if (!v107)
  {
LABEL_35:
    outlined init with take of NodePersonality(&v157, &v174);
    v173 = *(_QWORD *)v158;
    *(_QWORD *)&v138 = v125;
    *((_QWORD *)&v138 + 1) = v129;
    v139 = v126;
    v140 = v127;
    v141 = v128;
    v142 = 28265;
    v143 = 0xE200000000000000;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v138);
    outlined init with take of UserGraphError.ErrorType(&v138, (uint64_t)&v144);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v156 = 0uLL;
    swift_allocError();
    *v114 = v144;
    v115 = v148;
    v117 = v145;
    v116 = v146;
    v114[3] = v147;
    v114[4] = v115;
    v114[1] = v117;
    v114[2] = v116;
    v118 = v152;
    v120 = v149;
    v119 = v150;
    v114[7] = v151;
    v114[8] = v118;
    v114[5] = v120;
    v114[6] = v119;
    v121 = v156;
    v123 = v153;
    v122 = v154;
    v114[11] = v155;
    v114[12] = v121;
    v114[9] = v123;
    v114[10] = v122;
    outlined retain of [Input]((uint64_t)&v179);
    outlined retain of NodePersonality(&v174);
    outlined retain of [Input]((uint64_t)&v173);
    swift_willThrow();
    outlined init with take of NodePersonality(&v159, &v172);
    outlined release of NodePersonality(&v172);
    v171 = v160;
    outlined release of [Input]((uint64_t)&v171);
    v170 = v161;
    outlined release of [Input]((uint64_t)&v170);
    outlined release of NodePersonality(&v174);
    outlined release of [Input]((uint64_t)&v179);
    v79 = &v173;
    goto LABEL_36;
  }
  v108 = (_QWORD *)(v129 + 80);
  while (1)
  {
    v109 = *(v108 - 5);
    v110 = *(v108 - 4);
    v111 = *(v108 - 3);
    v134 = *(v108 - 2);
    v136 = *(v108 - 6);
    v112 = *((_BYTE *)v108 - 8);
    v131 = *v108;
    if (v110 == 28265 && v111 == 0xE200000000000000)
      break;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_38;
    v108 += 7;
    if (!--v107)
      goto LABEL_35;
  }
  v111 = 0xE200000000000000;
LABEL_38:
  v185[0] = v136;
  v185[1] = v109;
  v185[2] = v110;
  v185[3] = v111;
  v185[4] = v134;
  v186 = v112;
  v187 = v131;
  swift_retain();
  swift_bridgeObjectRetain();
  Graph.connect(_:to:)((uint64_t)a1, (unint64_t)v185);
  swift_bridgeObjectRelease();
  swift_release();
  outlined init with take of NodePersonality(&v159, &v177);
  outlined release of NodePersonality(&v177);
  v176 = v160;
  outlined release of [Input]((uint64_t)&v176);
  v175 = v161;
  outlined release of [Input]((uint64_t)&v175);
  result = swift_release();
  v124 = *(_OWORD *)v158;
  *v132 = v157;
  v132[1] = v124;
  *(_OWORD *)((char *)v132 + 25) = *(_OWORD *)&v158[9];
  return result;
}

void specialized closure #8 in createGraph(_:nodeDefStore:)(void **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  id v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  char v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  char v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  __int128 v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  _QWORD v147[5];
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  _QWORD v159[5];
  char v160;
  uint64_t v161;
  unint64_t v162;

  v5 = v4;
  v9 = *a1;
  v10 = XMLNode.subscript.getter(0x656D616E65646F6ELL, 0xE800000000000000);
  if (!v11)
    return;
  v12 = *a2;
  if (!*(_QWORD *)(*a2 + 16) || (v13 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11), (v14 & 1) == 0))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    return;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v13);
  swift_bridgeObjectRelease();
  if (v15 == -7)
    return;
  if ((v15 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_51;
  }
  v16 = *(_QWORD *)(a3 + 64);
  if (v15 >= *(_QWORD *)(v16 + 16))
  {
LABEL_51:
    __break(1u);
LABEL_52:
    swift_once();
LABEL_27:
    v58 = type metadata accessor for Logger();
    __swift_project_value_buffer(v58, (uint64_t)logger);
    v59 = v9;
    v60 = v9;
    v61 = Logger.logObject.getter();
    v62 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v61, v62))
    {
      v63 = (uint8_t *)swift_slowAlloc();
      v64 = swift_slowAlloc();
      v125 = v64;
      *(_DWORD *)v63 = 136315138;
      v65 = v9;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      v66 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, &v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_245E46000, v61, v62, "Got error '%s'. Ignoring.", v63, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v64, -1, -1);
      MEMORY[0x24954C33C](v63, -1, -1);

    }
    else
    {

    }
    return;
  }
  v17 = v16 + 48 * v15;
  v18 = *(_QWORD *)(v17 + 32);
  v19 = *(_QWORD *)(v17 + 40);
  v20 = *(_QWORD *)(v17 + 48);
  v117 = *(_QWORD *)(v17 + 64);
  v118 = *(_QWORD *)(v17 + 56);
  v116 = *(_BYTE *)(v17 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v18);
  v21 = XMLNode.subscript.getter(0x74757074756FLL, 0xE600000000000000);
  *((_QWORD *)&v120 + 1) = v19;
  v114 = a3;
  if (v22)
  {
    v23 = v21;
    v24 = v22;
    v112 = v5;
    v113 = a4;
    *(_QWORD *)&v120 = v18;
    v121 = v20;
    v25 = *(_QWORD *)(v20 + 16);
    if (!v25)
    {
LABEL_16:
      v126 = v120;
      v127 = v121;
      *(_QWORD *)&v128 = v118;
      *((_QWORD *)&v128 + 1) = v117;
      v129 = v116;
      v130 = v23;
      v131 = v24;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_((uint64_t)&v126);
      outlined init with take of UserGraphError.ErrorType(&v126, (uint64_t)&v132);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      v144 = 0uLL;
      v9 = (void *)swift_allocError();
      *v34 = v132;
      v35 = v136;
      v37 = v133;
      v36 = v134;
      v34[3] = v135;
      v34[4] = v35;
      v34[1] = v37;
      v34[2] = v36;
      v38 = v140;
      v40 = v137;
      v39 = v138;
      v34[7] = v139;
      v34[8] = v38;
      v34[5] = v40;
      v34[6] = v39;
      v41 = v144;
      v43 = v141;
      v42 = v142;
      v34[11] = v143;
      v34[12] = v41;
      v34[9] = v43;
      v34[10] = v42;
      swift_willThrow();
      goto LABEL_26;
    }
    v26 = (_QWORD *)(v20 + 80);
    while (1)
    {
      v27 = *(v26 - 5);
      v124 = *(v26 - 6);
      v29 = *(v26 - 4);
      v28 = *(v26 - 3);
      v30 = *(v26 - 2);
      v122 = *((_BYTE *)v26 - 8);
      v31 = *v26;
      if (v29 == v23 && v24 == v28)
        break;
      v33 = v23;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_21;
      v26 += 7;
      --v25;
      v23 = v33;
      if (!v25)
        goto LABEL_16;
    }
    v29 = v23;
LABEL_21:
    v45 = v27;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v5 = v112;
    v48 = v31;
    v46 = v30;
    v44 = v124;
    v47 = v122;
  }
  else
  {
    if (!*(_QWORD *)(v20 + 16))
    {
      outlined consume of NodePersonality(v18);
LABEL_45:
      swift_bridgeObjectRelease();
      goto LABEL_46;
    }
    v113 = a4;
    *(_QWORD *)&v120 = v18;
    v44 = *(_QWORD *)(v20 + 32);
    v45 = *(_QWORD *)(v20 + 40);
    v29 = *(_QWORD *)(v20 + 48);
    v28 = *(_QWORD *)(v20 + 56);
    v46 = *(_QWORD *)(v20 + 64);
    v47 = *(_BYTE *)(v20 + 72);
    v48 = *(_QWORD *)(v20 + 80);
    swift_retain();
    swift_bridgeObjectRetain();
  }
  swift_retain();
  swift_bridgeObjectRetain();
  v159[0] = v44;
  v159[1] = v45;
  v159[2] = v29;
  v159[3] = v28;
  v159[4] = v46;
  v123 = v47;
  v160 = v47;
  v161 = v48;
  swift_retain();
  v49 = v28;
  swift_bridgeObjectRetain();
  v50 = v29;
  v51 = XMLNode.subscript.getter(1701869940, 0xE400000000000000);
  if (!v52)
  {
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of Input?(v44, v45);
    outlined consume of NodePersonality(v120);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_46;
  }
  v53 = v51;
  v54 = v52;
  v109 = v46;
  v110 = v45;
  v111 = v49;
  type metadata accessor for MaterialXDataType();
  v55 = (_QWORD *)swift_allocObject();
  v55[4] = v53;
  v55[5] = v54;
  v55[2] = MEMORY[0x24BEE4AF8];
  v55[3] = 0;
  v56 = XMLNode.subscript.getter(0x736C656E6E616863, 0xE800000000000000);
  if (v57)
  {
    specialized Graph.appendSwizzleNode(to:resultType:channels:nodeDefStore:)(v159, v55, v56, v57, v113, &v145);
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of Input?(v44, v45);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_setDeallocating();
      swift_deallocClassInstance();
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(v120);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v9 = v5;
      goto LABEL_26;
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    ShaderGraphNode.out.getter((uint64_t)v147);
    swift_bridgeObjectRelease();
    swift_release();
    outlined init with take of NodePersonality(&v145, &v162);
    outlined release of NodePersonality(&v162);
    v151 = *((_QWORD *)&v145 + 1);
    outlined release of [Input]((uint64_t)&v151);
    v150 = v146;
    outlined release of [Input]((uint64_t)&v150);
    v106 = v147[4];
    v107 = v149;
    v123 = v148;
    v111 = v147[3];
    v108 = v147[1];
    v104 = v147[0];
    v105 = v147[2];
    v68 = v44;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    v68 = v44;
    v107 = v48;
    v108 = v45;
    v104 = v44;
    v105 = v50;
    v106 = v109;
  }
  v69 = XMLNode.subscript.getter(1701667182, 0xE400000000000000);
  v119 = v70;
  if (!v70)
  {
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of Input?(v68, v45);
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    swift_deallocClassInstance();
    outlined consume of NodePersonality(v120);
    goto LABEL_45;
  }
  v71 = v69;
  v73 = *(_QWORD *)(v114 + 128);
  v72 = *(_QWORD *)(v114 + 136);
  v74 = *(_QWORD *)(v114 + 144);
  v103 = *(_OWORD *)(v114 + 152);
  v75 = *(_BYTE *)(v114 + 168);
  v76 = *(_QWORD *)(v72 + 16);
  if (!v76)
  {
LABEL_42:
    *(_QWORD *)&v126 = v73;
    *((_QWORD *)&v126 + 1) = v72;
    v127 = v74;
    v128 = v103;
    v129 = v75;
    v130 = v71;
    v131 = v119;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v126);
    outlined init with take of UserGraphError.ErrorType(&v126, (uint64_t)&v132);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v144 = 0uLL;
    v9 = (void *)swift_allocError();
    *v89 = v132;
    v90 = v136;
    v92 = v133;
    v91 = v134;
    v89[3] = v135;
    v89[4] = v90;
    v89[1] = v92;
    v89[2] = v91;
    v93 = v140;
    v95 = v137;
    v94 = v138;
    v89[7] = v139;
    v89[8] = v93;
    v89[5] = v95;
    v89[6] = v94;
    v96 = v144;
    v98 = v141;
    v97 = v142;
    v89[11] = v143;
    v89[12] = v96;
    v89[9] = v98;
    v89[10] = v97;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v73);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v73);
    swift_bridgeObjectRetain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of Input?(v44, v110);
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_deallocClassInstance();
    outlined consume of NodePersonality(v73);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v120);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_26:
    if (one-time initialization token for logger == -1)
      goto LABEL_27;
    goto LABEL_52;
  }
  v99 = *(_BYTE *)(v114 + 168);
  v101 = *(_QWORD *)(v114 + 128);
  v102 = *(_QWORD *)(v114 + 144);
  v100 = *(_QWORD *)(v114 + 136);
  v77 = (_QWORD *)(v72 + 80);
  while (1)
  {
    v79 = *(v77 - 6);
    v78 = *(v77 - 5);
    v81 = *(v77 - 4);
    v80 = *(v77 - 3);
    v82 = *(v77 - 2);
    v83 = *((_BYTE *)v77 - 8);
    v84 = *v77;
    if (v81 == v71 && v119 == v80)
      break;
    v115 = *v77;
    v86 = *(v77 - 5);
    v87 = *(v77 - 3);
    v88 = v71;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v71 = v81;
      v78 = v86;
      v80 = v87;
      v84 = v115;
      break;
    }
    v77 += 7;
    --v76;
    v71 = v88;
    if (!v76)
    {
      v152 = v79;
      v153 = v86;
      v154 = v81;
      v155 = v87;
      v156 = v82;
      v157 = v83;
      v158 = v115;
      v72 = v100;
      v73 = v101;
      v74 = v102;
      v75 = v99;
      goto LABEL_42;
    }
  }
  v152 = v79;
  v153 = v78;
  v154 = v71;
  v155 = v80;
  v156 = v82;
  v157 = v83;
  v158 = v84;
  *(_QWORD *)&v132 = v104;
  *((_QWORD *)&v132 + 1) = v108;
  *(_QWORD *)&v133 = v105;
  *((_QWORD *)&v133 + 1) = v111;
  *(_QWORD *)&v134 = v106;
  BYTE8(v134) = v123;
  *(_QWORD *)&v135 = v107;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  Graph.connect(_:to:)((uint64_t)&v132, (unint64_t)&v152);
  outlined consume of Input?(v44, v110);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  swift_deallocClassInstance();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of NodePersonality(v120);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t specialized SGDataTypeStorage.init(materialXValue:type:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  int8x16_t v16;
  int64x2_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  Swift::String v26;
  Swift::String v27;
  __int128 v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  int64x2_t v46;
  int64x2_t v47;
  unint64_t *v48;
  uint64_t v49;
  char v50;
  int64x2_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  int64x2_t v61;
  uint64_t v62;
  char v63;
  int64x2_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  int64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 *v91;
  int v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  int64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  int64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v118;
  _BYTE *v119;
  BOOL v120;
  BOOL v121;
  int v122;
  _QWORD *v123;
  unint64_t v124;
  _BYTE *v125;
  _BYTE *v126;
  uint64_t v127;
  int64x2_t v128;
  unint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  unint64_t *v133;
  _BYTE *v134;
  BOOL v135;
  BOOL v136;
  int v137;
  _QWORD *v138;
  unint64_t v139;
  _BYTE *v140;
  _BYTE *v141;
  uint64_t v142;
  unint64_t v143;
  int64x2_t v144;
  int8x16_t v145;
  int8x16_t v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  unint64_t *v150;
  unsigned __int8 *v151;
  unint64_t v152;
  _BYTE *v153;
  BOOL v154;
  BOOL v155;
  int v156;
  _QWORD *v157;
  unint64_t v158;
  _BYTE *v159;
  uint64_t v160;
  _OWORD *v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  unint64_t v171;
  int64x2_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  char v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  unint64_t v191;
  int8x16_t v192;
  int8x16_t v193;
  int8x16_t v194;
  int64x2_t v195;
  unint64_t *v196;
  uint64_t v197;
  int v198;
  _QWORD *v199;
  __int128 v200;
  _BYTE v201[25];
  unint64_t v202;
  unint64_t v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;

  v196 = a4;
  v7 = type metadata accessor for CharacterSet();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v190 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD **)(a3 + 24);
  if (v11)
  {
    v12 = (char *)v11[2];
    if (!v12)
      goto LABEL_28;
    v13 = v11[4] == a1 && v11[5] == a2;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_8:
      result = swift_release();
      v15 = 0;
      v16 = 0uLL;
      v17 = (int64x2_t)a2;
      v18 = 6;
LABEL_48:
      v47 = 0uLL;
LABEL_49:
      v48 = v196;
      *v196 = a1;
      *(int64x2_t *)(v48 + 1) = v17;
      *(int8x16_t *)(v48 + 3) = v16;
      *(int64x2_t *)(v48 + 5) = v47;
      v48[7] = v15;
      *((_BYTE *)v48 + 64) = v18;
      return result;
    }
    if (v12 == (char *)1)
    {
LABEL_28:
      v200 = 0u;
      memset(v201, 0, sizeof(v201));
      v202 = a1;
      v203 = a2;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_((uint64_t)&v200);
      *(_QWORD *)&v204 = 0;
      *((_QWORD *)&v204 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v204 = a1;
      *((_QWORD *)&v204 + 1) = a2;
      v26._countAndFlagsBits = 0x20746F6E20736920;
      v26._object = (void *)0xEF20666F20656E6FLL;
      String.append(_:)(v26);
      v27._countAndFlagsBits = MEMORY[0x24954B1D8](v11, MEMORY[0x24BEE0D00]);
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v28 = v204;
      outlined init with take of UserGraphError.ErrorType(&v200, (uint64_t)&v204);
      v216 = v28;
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
LABEL_29:
      swift_allocError();
      *v29 = v204;
      v30 = v208;
      v32 = v205;
      v31 = v206;
      v29[3] = v207;
      v29[4] = v30;
      v29[1] = v32;
      v29[2] = v31;
      v33 = v212;
      v35 = v209;
      v34 = v210;
      v29[7] = v211;
      v29[8] = v33;
      v29[5] = v35;
      v29[6] = v34;
      v36 = v215;
      v37 = v216;
      v39 = v213;
      v38 = v214;
LABEL_30:
      v29[11] = v36;
      v29[12] = v37;
      v29[9] = v39;
      v29[10] = v38;
      swift_willThrow();
      return swift_release();
    }
    v8 = (uint64_t)(v11 + 7);
    v7 = 1;
    while (1)
    {
      v10 = (char *)(v7 + 1);
      if (__OFADD__(v7, 1))
        break;
      v25 = *(_QWORD *)(v8 - 8) == a1 && *(_QWORD *)v8 == a2;
      if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_8;
      v8 += 16;
      ++v7;
      if (v10 == v12)
        goto LABEL_28;
    }
    __break(1u);
  }
  else
  {
    v19 = one-time initialization token for BOOLean;
    swift_retain();
    if (v19 == -1)
      goto LABEL_10;
  }
  swift_once();
LABEL_10:
  v20 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v20 & 1) != 0)
  {
    if (a1 == 1702195828 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      result = swift_release();
      v15 = 0;
      v18 = 0;
      v17 = 0uLL;
      a1 = 1;
      goto LABEL_47;
    }
    if (a1 == 0x65736C6166 && a2 == 0xE500000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      result = swift_release();
      a1 = 0;
      v15 = 0;
      v18 = 0;
      v17 = 0uLL;
      goto LABEL_47;
    }
    goto LABEL_267;
  }
  v21 = one-time initialization token for integer;
  swift_retain();
  if (v21 != -1)
    swift_once();
  v22 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v22 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v23 = specialized FixedWidthInteger.init(_:)(a1, a2);
    if ((v23 & 0x100000000) == 0)
    {
      v24 = v23;
      swift_bridgeObjectRelease();
      result = swift_release();
      v15 = 0;
      a1 = v24;
      v17 = 0uLL;
      v18 = 2;
LABEL_47:
      v16 = 0uLL;
      goto LABEL_48;
    }
    goto LABEL_267;
  }
  v40 = one-time initialization token for integer2;
  swift_retain();
  if (v40 != -1)
    swift_once();
  v41 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v41 & 1) != 0)
  {
    specialized SIMD<>.init(_:)(a1, a2);
    v43 = v42;
    result = swift_release();
    v15 = 0;
    a1 = v43;
    v17 = 0uLL;
    v18 = 13;
    goto LABEL_47;
  }
  v44 = one-time initialization token for integer3;
  swift_retain();
  if (v44 != -1)
    swift_once();
  v45 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v45 & 1) != 0)
  {
    specialized SIMD<>.init(_:)(a1, a2, (double (*)(uint64_t))specialized SIMD.init<A>(_:));
    v195 = v46;
    result = swift_release();
    v15 = 0;
    a1 = v195.i64[0];
    v16 = 0uLL;
    v17 = vzip2q_s64(v195, (int64x2_t)0);
    v18 = 14;
    goto LABEL_48;
  }
  v49 = one-time initialization token for integer4;
  swift_retain();
  if (v49 != -1)
    swift_once();
  v50 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v50 & 1) != 0)
  {
    specialized SIMD<>.init(_:)(a1, a2, (double (*)(uint64_t))specialized SIMD.init<A>(_:));
    v195 = v51;
    result = swift_release();
    v15 = 0;
    a1 = v195.i64[0];
    v16 = 0uLL;
    v17 = vzip2q_s64(v195, (int64x2_t)0);
    v18 = 15;
    goto LABEL_48;
  }
  v52 = one-time initialization token for float;
  swift_retain();
  if (v52 != -1)
    swift_once();
  v53 = MaterialXDataType.isEqual(to:)();
  v54 = swift_release();
  if ((v53 & 1) != 0)
  {
    LODWORD(v199) = 0;
    MEMORY[0x24BDAC7A8](v54);
    *(&v190 - 2) = (uint64_t)&v199;
    if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
    {
      swift_bridgeObjectRetain();
      v116 = v197;
      _StringGuts._slowWithCString<A>(_:)();
      v197 = v116;
      swift_bridgeObjectRelease();
      if ((v200 & 1) != 0)
        goto LABEL_64;
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0)
      {
        if ((a1 & 0x1000000000000000) != 0)
        {
          v55 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          swift_bridgeObjectRetain();
        }
        else
        {
          v55 = _StringObject.sharedUTF8.getter();
          swift_bridgeObjectRetain();
          if (!v55)
          {
            v56 = 0;
LABEL_63:
            v57 = v197;
            partial apply for closure #1 in closure #1 in Float.init<A>(_:)(v56, (BOOL *)&v204);
            v197 = v57;
            v58 = v204;
            swift_bridgeObjectRelease();
            if ((v58 & 1) != 0)
            {
LABEL_64:
              swift_bridgeObjectRelease();
              result = swift_release();
              v15 = 0;
              a1 = v199;
              v17 = 0uLL;
              v18 = 5;
              goto LABEL_47;
            }
            goto LABEL_76;
          }
        }
        v56 = (_BYTE *)v55;
        goto LABEL_63;
      }
      *(_QWORD *)&v204 = a1;
      *((_QWORD *)&v204 + 1) = a2 & 0xFFFFFFFFFFFFFFLL;
      swift_bridgeObjectRetain();
      if (a1 <= 0x20u && ((1 << a1) & 0x100003E01) != 0
        || (v91 = (unsigned __int8 *)_swift_stdlib_strtof_clocale()) == 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v92 = *v91;
        swift_bridgeObjectRelease();
        if (!v92)
          goto LABEL_64;
      }
    }
LABEL_76:
    v200 = 0u;
    memset(v201, 0, sizeof(v201));
    v202 = a1;
    v203 = a2;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_((uint64_t)&v200);
    outlined init with take of UserGraphError.ErrorType(&v200, (uint64_t)&v204);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v216 = 0uLL;
    goto LABEL_29;
  }
  v59 = one-time initialization token for color3;
  swift_retain();
  if (v59 != -1)
    swift_once();
  v60 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v60 & 1) != 0)
  {
LABEL_68:
    specialized SIMD<>.init(_:)(a1, a2, (double (*)(_QWORD))specialized SIMD.init<A>(_:));
    v195 = v61;
    result = swift_release();
    v15 = 0;
    a1 = v195.i64[0];
    v16 = 0uLL;
    v17 = vzip2q_s64(v195, (int64x2_t)0);
    v18 = 8;
    goto LABEL_48;
  }
  v62 = one-time initialization token for color4;
  swift_retain();
  if (v62 != -1)
    swift_once();
  v63 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v63 & 1) != 0)
    goto LABEL_72;
  v65 = one-time initialization token for vector2;
  swift_retain();
  if (v65 != -1)
    swift_once();
  v66 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v66 & 1) != 0)
    goto LABEL_83;
  v67 = one-time initialization token for float2;
  swift_retain();
  if (v67 != -1)
    swift_once();
  v68 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v68 & 1) != 0)
  {
LABEL_83:
    specialized SIMD<>.init(_:)(a1, a2);
    v70 = v69;
    result = swift_release();
    v15 = 0;
    a1 = v70;
    v17 = 0uLL;
    v18 = 7;
    goto LABEL_47;
  }
  v71 = one-time initialization token for vector3;
  swift_retain();
  if (v71 != -1)
    swift_once();
  v72 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v72 & 1) != 0)
    goto LABEL_68;
  v73 = one-time initialization token for float3;
  swift_retain();
  if (v73 != -1)
    swift_once();
  v74 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v74 & 1) != 0)
    goto LABEL_68;
  v75 = one-time initialization token for vector4;
  swift_retain();
  if (v75 != -1)
    swift_once();
  v76 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v76 & 1) != 0)
    goto LABEL_72;
  v77 = one-time initialization token for float4;
  swift_retain();
  if (v77 != -1)
    swift_once();
  v78 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v78 & 1) != 0)
  {
LABEL_72:
    specialized SIMD<>.init(_:)(a1, a2, (double (*)(_QWORD))specialized SIMD.init<A>(_:));
    v195 = v64;
    result = swift_release();
    v15 = 0;
    a1 = v195.i64[0];
    v16 = 0uLL;
    v17 = vzip2q_s64(v195, (int64x2_t)0);
    v18 = 9;
    goto LABEL_48;
  }
  v79 = one-time initialization token for matrix22;
  swift_retain();
  if (v79 != -1)
    swift_once();
  v80 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v80 & 1) != 0)
  {
    *(_QWORD *)&v204 = a1;
    *((_QWORD *)&v204 + 1) = a2;
    *(_QWORD *)&v200 = 44;
    *((_QWORD *)&v200 + 1) = 0xE100000000000000;
    v193.i64[0] = lazy protocol witness table accessor for type String and conformance String();
    v81 = StringProtocol.components<A>(separatedBy:)();
    swift_bridgeObjectRelease();
    v192.i64[0] = v81;
    v82 = *(_QWORD *)(v81 + 16);
    if (v82)
    {
      *(_QWORD *)&v200 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v82, 0);
      a1 = v192.i64[0] + 40;
      do
      {
        v83 = *(_QWORD *)a1;
        *(_QWORD *)&v204 = *(_QWORD *)(a1 - 8);
        *((_QWORD *)&v204 + 1) = v83;
        swift_bridgeObjectRetain();
        static CharacterSet.whitespacesAndNewlines.getter();
        v195.i64[0] = StringProtocol.trimmingCharacters(in:)();
        v194.i64[0] = v84;
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        swift_bridgeObjectRelease();
        v85 = v200;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v85 + 16) + 1, 1);
          v85 = v200;
        }
        v87 = *(_QWORD *)(v85 + 16);
        v86 = *(_QWORD *)(v85 + 24);
        v88 = v87 + 1;
        if (v87 >= v86 >> 1)
        {
          v191 = v87 + 1;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v86 > 1, v87 + 1, 1);
          v88 = v191;
          v85 = v200;
        }
        a1 += 16;
        *(_QWORD *)(v85 + 16) = v88;
        v89 = v85 + 16 * v87;
        v90 = v194.i64[0];
        *(_QWORD *)(v89 + 32) = v195.i64[0];
        *(_QWORD *)(v89 + 40) = v90;
        --v82;
      }
      while (v82);
      v195.i64[0] = v85;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v195.i64[0] = MEMORY[0x24BEE4AF8];
    }
    a2 = *(_QWORD *)(v195.i64[0] + 16);
    if (a2)
    {
      v199 = (_QWORD *)MEMORY[0x24BEE4AF8];
      isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2, 0);
      v8 = v195.i64[0] + 40;
      while (1)
      {
        v10 = (char *)&v190;
        v7 = *(_QWORD *)(v8 - 8);
        v118 = *(_QWORD *)v8;
        v198 = 0;
        MEMORY[0x24BDAC7A8](isUniquelyReferenced_nonNull_native);
        *(&v190 - 2) = (uint64_t)&v198;
        if ((v118 & 0x1000000000000000) != 0 || !(v118 & 0x2000000000000000 | v7 & 0x1000000000000000))
        {
          swift_bridgeObjectRetain_n();
          v127 = v197;
          _StringGuts._slowWithCString<A>(_:)();
          v197 = v127;
        }
        else
        {
          if ((v118 & 0x2000000000000000) != 0)
          {
            *(_QWORD *)&v204 = v7;
            *((_QWORD *)&v204 + 1) = v118 & 0xFFFFFFFFFFFFFFLL;
            switch((char)v7)
            {
              case 0:
              case 9:
              case 10:
              case 11:
              case 12:
              case 13:
              case 32:
                swift_bridgeObjectRetain_n();
                goto LABEL_150;
              default:
                swift_bridgeObjectRetain_n();
                v126 = (_BYTE *)_swift_stdlib_strtof_clocale();
                if (v126)
                  v121 = *v126 == 0;
                else
LABEL_150:
                  v121 = 0;
                LOBYTE(v200) = v121;
                swift_bridgeObjectRelease();
                break;
            }
            goto LABEL_152;
          }
          if ((v7 & 0x1000000000000000) != 0)
            v119 = (_BYTE *)((v118 & 0xFFFFFFFFFFFFFFFLL) + 32);
          else
            v119 = (_BYTE *)_StringObject.sharedUTF8.getter();
          switch(*v119)
          {
            case 0:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
            case 0xD:
            case 0x20:
              swift_bridgeObjectRetain_n();
              goto LABEL_145;
            default:
              swift_bridgeObjectRetain_n();
              v125 = (_BYTE *)_swift_stdlib_strtof_clocale();
              if (v125)
                v120 = *v125 == 0;
              else
LABEL_145:
                v120 = 0;
              LOBYTE(v200) = v120;
              break;
          }
        }
        swift_bridgeObjectRelease();
LABEL_152:
        if ((v200 & 1) == 0)
          goto LABEL_246;
        swift_bridgeObjectRelease();
        v122 = v198;
        v123 = v199;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v123[2] + 1, 1);
          v123 = v199;
        }
        a1 = v123[2];
        v124 = v123[3];
        if (a1 >= v124 >> 1)
        {
          isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v124 > 1, a1 + 1, 1);
          v123 = v199;
        }
        v8 += 16;
        v123[2] = a1 + 1;
        *((_DWORD *)v123 + a1 + 8) = v122;
        if (!--a2)
        {
          swift_bridgeObjectRelease();
          goto LABEL_166;
        }
      }
    }
    swift_bridgeObjectRelease();
    v123 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_166:
    v129 = v123[2];
    if (v129)
    {
      if (v129 != 1)
      {
        if (v129 >= 3)
        {
          if (v129 != 3)
          {
            a1 = v123[4];
            v128.i64[0] = v123[5];
            v195 = v128;
            swift_release();
            result = swift_bridgeObjectRelease();
            v17 = v195;
            v15 = 0;
            v16 = 0uLL;
            v18 = 16;
            goto LABEL_48;
          }
          goto LABEL_271;
        }
LABEL_270:
        __break(1u);
LABEL_271:
        __break(1u);
LABEL_272:
        swift_once();
LABEL_124:
        v106 = MaterialXDataType.isEqual(to:)();
        swift_release();
        if ((v106 & 1) != 0)
        {
          *(_QWORD *)&v204 = a1;
          *((_QWORD *)&v204 + 1) = a2;
          *(_QWORD *)&v200 = 44;
          *((_QWORD *)&v200 + 1) = 0xE100000000000000;
          v191 = lazy protocol witness table accessor for type String and conformance String();
          v107 = StringProtocol.components<A>(separatedBy:)();
          swift_bridgeObjectRelease();
          v190 = v107;
          v108 = *(_QWORD *)(v107 + 16);
          if (v108)
          {
            *(_QWORD *)&v200 = MEMORY[0x24BEE4AF8];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v108, 0);
            a1 = v190 + 40;
            do
            {
              v109 = *(_QWORD *)a1;
              *(_QWORD *)&v204 = *(_QWORD *)(a1 - 8);
              *((_QWORD *)&v204 + 1) = v109;
              swift_bridgeObjectRetain();
              static CharacterSet.whitespacesAndNewlines.getter();
              v193.i64[0] = StringProtocol.trimmingCharacters(in:)();
              v192.i64[0] = v110;
              (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
              swift_bridgeObjectRelease();
              v195.i64[0] = v200;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v195.i64[0] + 16) + 1, 1);
                v195.i64[0] = v200;
              }
              v112 = *(_QWORD *)(v195.i64[0] + 16);
              v111 = *(_QWORD *)(v195.i64[0] + 24);
              v194.i64[0] = v112 + 1;
              if (v112 >= v111 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v111 > 1, v194.i64[0], 1);
                v195.i64[0] = v200;
              }
              a1 += 16;
              v113 = v195.i64[0];
              *(_QWORD *)(v195.i64[0] + 16) = v194.i64[0];
              v114 = v113 + 16 * v112;
              v115 = v192.i64[0];
              *(_QWORD *)(v114 + 32) = v193.i64[0];
              *(_QWORD *)(v114 + 40) = v115;
              --v108;
            }
            while (v108);
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            v195.i64[0] = MEMORY[0x24BEE4AF8];
          }
          a2 = *(_QWORD *)(v195.i64[0] + 16);
          if (a2)
          {
            v199 = (_QWORD *)MEMORY[0x24BEE4AF8];
            v149 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2, 0);
            v150 = (unint64_t *)(v195.i64[0] + 40);
            while (1)
            {
              v7 = *(v150 - 1);
              v118 = *v150;
              v198 = 0;
              MEMORY[0x24BDAC7A8](v149);
              *(&v190 - 2) = (uint64_t)&v198;
              if ((v118 & 0x1000000000000000) != 0 || !(v118 & 0x2000000000000000 | v7 & 0x1000000000000000))
              {
                swift_bridgeObjectRetain_n();
                v160 = v197;
                _StringGuts._slowWithCString<A>(_:)();
                v197 = v160;
              }
              else
              {
                if ((v118 & 0x2000000000000000) != 0)
                {
                  *(_QWORD *)&v204 = v7;
                  *((_QWORD *)&v204 + 1) = v118 & 0xFFFFFFFFFFFFFFLL;
                  switch((char)v7)
                  {
                    case 0:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 32:
                      swift_bridgeObjectRetain_n();
                      goto LABEL_229;
                    default:
                      swift_bridgeObjectRetain_n();
                      v159 = (_BYTE *)_swift_stdlib_strtof_clocale();
                      if (v159)
                        v155 = *v159 == 0;
                      else
LABEL_229:
                        v155 = 0;
                      LOBYTE(v200) = v155;
                      swift_bridgeObjectRelease();
                      break;
                  }
                  goto LABEL_234;
                }
                if ((v7 & 0x1000000000000000) != 0)
                {
                  v151 = (unsigned __int8 *)((v118 & 0xFFFFFFFFFFFFFFFLL) + 32);
                }
                else
                {
                  v151 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
                  if (!v151)
                  {
                    swift_bridgeObjectRetain_n();
                    __break(1u);
                    goto LABEL_246;
                  }
                }
                swift_bridgeObjectRetain_n();
                v152 = *v151;
                v154 = (v152 >= 0x21 || ((0x100003E01uLL >> v152) & 1) == 0)
                    && (v153 = (_BYTE *)_swift_stdlib_strtof_clocale()) != 0
                    && *v153 == 0;
                LOBYTE(v200) = v154;
              }
              swift_bridgeObjectRelease();
LABEL_234:
              if ((v200 & 1) == 0)
                goto LABEL_246;
              swift_bridgeObjectRelease();
              v156 = v198;
              v157 = v199;
              v149 = swift_isUniquelyReferenced_nonNull_native();
              if ((v149 & 1) == 0)
              {
                v149 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v157[2] + 1, 1);
                v157 = v199;
              }
              a1 = v157[2];
              v158 = v157[3];
              if (a1 >= v158 >> 1)
              {
                v149 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v158 > 1, a1 + 1, 1);
                v157 = v199;
              }
              v150 += 2;
              v157[2] = a1 + 1;
              *((_DWORD *)v157 + a1 + 8) = v156;
              if (!--a2)
              {
                swift_bridgeObjectRelease();
                goto LABEL_248;
              }
            }
          }
          swift_bridgeObjectRelease();
          v157 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_248:
          v171 = v157[2];
          if (v171 < 4)
          {
            __break(1u);
          }
          else
          {
            specialized SIMD.init<A>(_:)((uint64_t)(v157 + 4), 0, 9uLL);
            v195 = v172;
            if (v171 >= 8)
            {
              specialized SIMD.init<A>(_:)((uint64_t)(v157 + 4), 4, 0x11uLL);
              v194 = v173;
              if (v171 >= 0xC)
              {
                specialized SIMD.init<A>(_:)((uint64_t)(v157 + 4), 8, 0x19uLL);
                v193 = v174;
                if (v171 >= 0x10)
                {
                  specialized SIMD.init<A>(_:)((uint64_t)(v157 + 4), 12, 0x21uLL);
                  v192 = v175;
                  swift_release();
                  result = swift_bridgeObjectRelease();
                  a1 = v195.i64[0];
                  v15 = v192.i64[1];
                  v17 = (int64x2_t)vextq_s8((int8x16_t)v195, v194, 8uLL);
                  v16 = vextq_s8(v194, v193, 8uLL);
                  v47 = (int64x2_t)vextq_s8(v193, v192, 8uLL);
                  v18 = 18;
                  goto LABEL_49;
                }
                goto LABEL_280;
              }
LABEL_279:
              __break(1u);
LABEL_280:
              __break(1u);
LABEL_281:
              swift_once();
LABEL_213:
              v148 = MaterialXDataType.isEqual(to:)();
              swift_release();
              if ((v148 & 1) != 0)
              {
                swift_bridgeObjectRelease();
                result = swift_release();
                a1 = 0;
                v15 = 0;
                v17 = 0uLL;
                v18 = 10;
                goto LABEL_47;
              }
              v176 = one-time initialization token for half3;
              swift_retain();
              if (v176 != -1)
                swift_once();
              v177 = MaterialXDataType.isEqual(to:)();
              swift_release();
              if ((v177 & 1) != 0)
              {
                swift_bridgeObjectRelease();
                result = swift_release();
                a1 = 0;
                v15 = 0;
                v17 = 0uLL;
                v18 = 11;
                goto LABEL_47;
              }
              v178 = one-time initialization token for half4;
              swift_retain();
              if (v178 != -1)
                swift_once();
              v179 = MaterialXDataType.isEqual(to:)();
              swift_release();
              if ((v179 & 1) != 0)
              {
                swift_bridgeObjectRelease();
                result = swift_release();
                a1 = 0;
                v15 = 0;
                v17 = 0uLL;
                v18 = 12;
                goto LABEL_47;
              }
              v180 = one-time initialization token for filename;
              swift_retain();
              if (v180 != -1)
                swift_once();
              v181 = MaterialXDataType.isEqual(to:)();
              swift_release();
              if ((v181 & 1) != 0)
                goto LABEL_8;
              v182 = one-time initialization token for string;
              swift_retain();
              if (v182 != -1)
                swift_once();
              v183 = MaterialXDataType.isEqual(to:)();
              swift_release();
              if ((v183 & 1) != 0)
                goto LABEL_8;
LABEL_267:
              v200 = 0u;
              memset(v201, 0, sizeof(v201));
              v202 = a1;
              v203 = a2;
              _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_((uint64_t)&v200);
              outlined init with take of UserGraphError.ErrorType(&v200, (uint64_t)&v204);
              lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
              v216 = 0uLL;
              swift_allocError();
              *v29 = v204;
              v184 = v208;
              v186 = v205;
              v185 = v206;
              v29[3] = v207;
              v29[4] = v184;
              v29[1] = v186;
              v29[2] = v185;
              v187 = v212;
              v189 = v209;
              v188 = v210;
              v29[7] = v211;
              v29[8] = v187;
              v29[5] = v189;
              v29[6] = v188;
              v36 = v215;
              v37 = v216;
              v39 = v213;
              v38 = v214;
              goto LABEL_30;
            }
          }
          __break(1u);
          goto LABEL_279;
        }
        v130 = one-time initialization token for half;
        swift_retain();
        if (v130 == -1)
        {
LABEL_172:
          v131 = MaterialXDataType.isEqual(to:)();
          swift_release();
          if ((v131 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            result = swift_release();
            a1 = 0;
            v15 = 0;
            v17 = 0uLL;
            v18 = 4;
            goto LABEL_47;
          }
          v147 = one-time initialization token for half2;
          swift_retain();
          if (v147 == -1)
            goto LABEL_213;
          goto LABEL_281;
        }
LABEL_276:
        swift_once();
        goto LABEL_172;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_270;
  }
  v93 = one-time initialization token for matrix33;
  swift_retain();
  if (v93 != -1)
    swift_once();
  v94 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v94 & 1) == 0)
  {
    v105 = one-time initialization token for matrix44;
    swift_retain();
    if (v105 == -1)
      goto LABEL_124;
    goto LABEL_272;
  }
  *(_QWORD *)&v204 = a1;
  *((_QWORD *)&v204 + 1) = a2;
  *(_QWORD *)&v200 = 44;
  *((_QWORD *)&v200 + 1) = 0xE100000000000000;
  v192.i64[0] = lazy protocol witness table accessor for type String and conformance String();
  v95 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  v191 = v95;
  v96 = *(_QWORD *)(v95 + 16);
  if (v96)
  {
    *(_QWORD *)&v200 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v96, 0);
    a1 = v191 + 40;
    do
    {
      v97 = *(_QWORD *)a1;
      *(_QWORD *)&v204 = *(_QWORD *)(a1 - 8);
      *((_QWORD *)&v204 + 1) = v97;
      swift_bridgeObjectRetain();
      static CharacterSet.whitespacesAndNewlines.getter();
      v195.i64[0] = StringProtocol.trimmingCharacters(in:)();
      v194.i64[0] = v98;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      swift_bridgeObjectRelease();
      v99 = v200;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v99 + 16) + 1, 1);
        v99 = v200;
      }
      v101 = *(_QWORD *)(v99 + 16);
      v100 = *(_QWORD *)(v99 + 24);
      v102 = v101 + 1;
      if (v101 >= v100 >> 1)
      {
        v193.i64[0] = v101 + 1;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v100 > 1, v101 + 1, 1);
        v102 = v193.i64[0];
        v99 = v200;
      }
      a1 += 16;
      *(_QWORD *)(v99 + 16) = v102;
      v193.i64[0] = v99;
      v103 = v99 + 16 * v101;
      v104 = v194.i64[0];
      *(_QWORD *)(v103 + 32) = v195.i64[0];
      *(_QWORD *)(v103 + 40) = v104;
      --v96;
    }
    while (v96);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v193.i64[0] = MEMORY[0x24BEE4AF8];
  }
  a2 = *(_QWORD *)(v193.i64[0] + 16);
  if (!a2)
  {
    swift_bridgeObjectRelease();
    v138 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_206:
    v143 = v138[2];
    if (v143 < 3)
    {
      __break(1u);
    }
    else
    {
      specialized SIMD.init<A>(_:)((uint64_t)(v138 + 4), 0, 7uLL);
      v195 = v144;
      if (v143 >= 6)
      {
        specialized SIMD.init<A>(_:)((uint64_t)(v138 + 4), 3, 0xDuLL);
        v194 = v145;
        if (v143 >= 9)
        {
          specialized SIMD.init<A>(_:)((uint64_t)(v138 + 4), 6, 0x13uLL);
          v193 = v146;
          swift_release();
          result = swift_bridgeObjectRelease();
          v15 = 0;
          a1 = v195.i64[0];
          v17 = (int64x2_t)vextq_s8((int8x16_t)v195, v194, 8uLL);
          v16 = vextq_s8(v194, v193, 8uLL);
          v47 = vzip2q_s64((int64x2_t)v193, (int64x2_t)0);
          v18 = 17;
          goto LABEL_49;
        }
        goto LABEL_275;
      }
    }
    __break(1u);
LABEL_275:
    __break(1u);
    goto LABEL_276;
  }
  v199 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v132 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2, 0);
  v133 = (unint64_t *)(v193.i64[0] + 40);
  while (1)
  {
    v7 = *(v133 - 1);
    v118 = *v133;
    v198 = 0;
    MEMORY[0x24BDAC7A8](v132);
    *(&v190 - 2) = (uint64_t)&v198;
    if ((v118 & 0x1000000000000000) != 0 || !(v118 & 0x2000000000000000 | v7 & 0x1000000000000000))
    {
      swift_bridgeObjectRetain_n();
      v142 = v197;
      _StringGuts._slowWithCString<A>(_:)();
      v197 = v142;
LABEL_186:
      swift_bridgeObjectRelease();
      goto LABEL_191;
    }
    if ((v118 & 0x2000000000000000) == 0)
    {
      if ((v7 & 0x1000000000000000) != 0)
        v134 = (_BYTE *)((v118 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v134 = (_BYTE *)_StringObject.sharedUTF8.getter();
      switch(*v134)
      {
        case 0:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0x20:
          swift_bridgeObjectRetain_n();
          goto LABEL_184;
        default:
          swift_bridgeObjectRetain_n();
          v140 = (_BYTE *)_swift_stdlib_strtof_clocale();
          if (v140)
            v135 = *v140 == 0;
          else
LABEL_184:
            v135 = 0;
          LOBYTE(v200) = v135;
          break;
      }
      goto LABEL_186;
    }
    *(_QWORD *)&v204 = v7;
    *((_QWORD *)&v204 + 1) = v118 & 0xFFFFFFFFFFFFFFLL;
    switch((char)v7)
    {
      case 0:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 32:
        swift_bridgeObjectRetain_n();
        goto LABEL_189;
      default:
        swift_bridgeObjectRetain_n();
        v141 = (_BYTE *)_swift_stdlib_strtof_clocale();
        if (v141)
          v136 = *v141 == 0;
        else
LABEL_189:
          v136 = 0;
        LOBYTE(v200) = v136;
        swift_bridgeObjectRelease();
        break;
    }
LABEL_191:
    if ((v200 & 1) == 0)
      break;
    swift_bridgeObjectRelease();
    v137 = v198;
    v138 = v199;
    v132 = swift_isUniquelyReferenced_nonNull_native();
    if ((v132 & 1) == 0)
    {
      v132 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v138[2] + 1, 1);
      v138 = v199;
    }
    a1 = v138[2];
    v139 = v138[3];
    if (a1 >= v139 >> 1)
    {
      v132 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v139 > 1, a1 + 1, 1);
      v138 = v199;
    }
    v133 += 2;
    v138[2] = a1 + 1;
    *((_DWORD *)v138 + a1 + 8) = v137;
    if (!--a2)
    {
      swift_bridgeObjectRelease();
      goto LABEL_206;
    }
  }
LABEL_246:
  v200 = 0u;
  memset(v201, 0, sizeof(v201));
  v202 = v7;
  v203 = v118;
  _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_((uint64_t)&v200);
  outlined init with take of UserGraphError.ErrorType(&v200, (uint64_t)&v204);
  lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
  v216 = 0uLL;
  swift_allocError();
  *v161 = v204;
  v162 = v208;
  v164 = v205;
  v163 = v206;
  v161[3] = v207;
  v161[4] = v162;
  v161[1] = v164;
  v161[2] = v163;
  v165 = v212;
  v167 = v209;
  v166 = v210;
  v161[7] = v211;
  v161[8] = v165;
  v161[5] = v167;
  v161[6] = v166;
  v168 = v216;
  v170 = v213;
  v169 = v214;
  v161[11] = v215;
  v161[12] = v168;
  v161[9] = v170;
  v161[10] = v169;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t partial apply for closure #2 in SIMD<>.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #2 in SIMD<>.init(_:)(a1, *(_QWORD *)(v2 + 32), a2);
}

uint64_t outlined init with take of NodeDef?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NodeDef?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *outlined release of NodeDef?(uint64_t *a1)
{
  outlined consume of NodeDef?(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15]);
  return a1;
}

uint64_t outlined consume of NodeDef?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MaterialXAvailability(a15, a16);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

double _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi36_(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 2;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0x8C00000000000000;
  return result;
}

uint64_t type metadata accessor for MaterialXDataType()
{
  return objc_opt_self();
}

double _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi40_(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 6;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0x8C00000000000000;
  return result;
}

unint64_t lazy protocol witness table accessor for type XMLElementErrors and conformance XMLElementErrors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type XMLElementErrors and conformance XMLElementErrors;
  if (!lazy protocol witness table cache variable for type XMLElementErrors and conformance XMLElementErrors)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for XMLElementErrors, &type metadata for XMLElementErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type XMLElementErrors and conformance XMLElementErrors);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for MaterialXDataType.Kind.CodingKeys, &unk_25170FDB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for MaterialXDataType.Kind.CodingKeys, &unk_25170FDB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for MaterialXDataType.Kind.CodingKeys, &unk_25170FDB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for MaterialXDataType.Kind.CodingKeys, &unk_25170FDB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for MaterialXDataType.Kind.SetCodingKeys, &unk_25170FE68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for MaterialXDataType.Kind.SetCodingKeys, &unk_25170FE68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for MaterialXDataType.Kind.SetCodingKeys, &unk_25170FE68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for MaterialXDataType.Kind.SetCodingKeys, &unk_25170FE68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MaterialXDataType.Kind.NamedCodingKeys and conformance MaterialXDataType.Kind.NamedCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MaterialXDataType.Kind.NamedCodingKeys and conformance MaterialXDataType.Kind.NamedCodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialXDataType.Kind.NamedCodingKeys and conformance MaterialXDataType.Kind.NamedCodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for MaterialXDataType.Kind.NamedCodingKeys, &unk_25170FDD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialXDataType.Kind.NamedCodingKeys and conformance MaterialXDataType.Kind.NamedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MaterialXDataType.Kind.NamedCodingKeys and conformance MaterialXDataType.Kind.NamedCodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialXDataType.Kind.NamedCodingKeys and conformance MaterialXDataType.Kind.NamedCodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for MaterialXDataType.Kind.NamedCodingKeys, &unk_25170FDD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialXDataType.Kind.NamedCodingKeys and conformance MaterialXDataType.Kind.NamedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MaterialXDataType.Kind.NamedCodingKeys and conformance MaterialXDataType.Kind.NamedCodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialXDataType.Kind.NamedCodingKeys and conformance MaterialXDataType.Kind.NamedCodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for MaterialXDataType.Kind.NamedCodingKeys, &unk_25170FDD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialXDataType.Kind.NamedCodingKeys and conformance MaterialXDataType.Kind.NamedCodingKeys);
  }
  return result;
}

uint64_t specialized MaterialXDataType.Kind.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x64656D616ELL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7628147 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

_QWORD *specialized MaterialXDataType.Kind.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;
  char v32;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<MaterialXDataType.Kind.SetCodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  v25 = v2;
  v26 = v3;
  MEMORY[0x24BDAC7A8](v2);
  v27 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<MaterialXDataType.Kind.NamedCodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<MaterialXDataType.Kind.CodingKeys>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v28 = a1;
  v14 = __swift_project_boxed_opaque_existential_1(a1, v13);
  lazy protocol witness table accessor for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys();
  v15 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v15)
  {
    v24 = v5;
    v16 = v27;
    v29 = v10;
    v17 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v17 + 16) == 1)
    {
      if ((*(_BYTE *)(v17 + 32) & 1) != 0)
      {
        v32 = 1;
        lazy protocol witness table accessor for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A], MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
        v18 = v25;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v26 + 8))(v16, v18);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v9);
        v14 = v30;
      }
      else
      {
        v31 = 0;
        lazy protocol witness table accessor for type MaterialXDataType.Kind.NamedCodingKeys and conformance MaterialXDataType.Kind.NamedCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v24);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v9);
        v14 = 0;
      }
    }
    else
    {
      v19 = type metadata accessor for DecodingError();
      swift_allocError();
      v21 = v20;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v21 = &type metadata for MaterialXDataType.Kind;
      v14 = v12;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v9);
    }
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v28);
  return v14;
}

uint64_t lazy protocol witness table accessor for type [String] and conformance [A](unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [String]);
    result = MEMORY[0x24954C264](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for MaterialXDataType()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MaterialXDataType.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of MaterialXDataType.__allocating_init(_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

_QWORD *initializeBufferWithCopyOfBuffer for MaterialXDataType.Kind(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for MaterialXDataType.Kind()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for MaterialXDataType.Kind(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for MaterialXDataType.Kind(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MaterialXDataType.Kind(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MaterialXDataType.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t getEnumTag for MaterialXDataType.Kind(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *destructiveInjectEnumTag for MaterialXDataType.Kind(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for MaterialXDataType.Kind()
{
  return &type metadata for MaterialXDataType.Kind;
}

ValueMetadata *type metadata accessor for MaterialXDataType.usd()
{
  return &type metadata for MaterialXDataType.usd;
}

ValueMetadata *type metadata accessor for MaterialXDataType.realitykit()
{
  return &type metadata for MaterialXDataType.realitykit;
}

ValueMetadata *type metadata accessor for MetalDataType.MaterialX()
{
  return &type metadata for MetalDataType.MaterialX;
}

uint64_t getEnumTagSinglePayload for XMLElementErrors(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XMLElementErrors(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTag for XMLElementErrors()
{
  return 0;
}

ValueMetadata *type metadata accessor for XMLElementErrors()
{
  return &type metadata for XMLElementErrors;
}

uint64_t storeEnumTagSinglePayload for MaterialXDataType.Kind.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_245ECE410 + 4 * byte_245FC1843[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_245ECE444 + 4 * byte_245FC183E[v4]))();
}

uint64_t sub_245ECE444(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_245ECE44C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x245ECE454);
  return result;
}

uint64_t sub_245ECE460(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x245ECE468);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_245ECE46C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_245ECE474(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for MaterialXDataType.Kind.CodingKeys()
{
  return &unk_25170FDB8;
}

void *type metadata accessor for MaterialXDataType.Kind.NamedCodingKeys()
{
  return &unk_25170FDD8;
}

uint64_t getEnumTagSinglePayload for MaterialXDataType.Kind.SetCodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for MaterialXDataType.Kind.SetCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_245ECE534 + 4 * byte_245FC1848[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_245ECE554 + 4 * byte_245FC184D[v4]))();
}

_BYTE *sub_245ECE534(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_245ECE554(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_245ECE55C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_245ECE564(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_245ECE56C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_245ECE574(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for MaterialXDataType.Kind.SetCodingKeys()
{
  return &unk_25170FE68;
}

uint64_t outlined init with take of NodeDef.Implementation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NodeDef.Implementation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A](unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [String]);
    v8 = a2;
    result = MEMORY[0x24954C264](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_245ECE874()
{
  uint64_t v0;

  outlined consume of SGDataTypeStorage(*(void **)(v0 + 16), *(id *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80));
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_245ECE8BC()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(*(_QWORD *)(v0 + 96));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(*(_QWORD *)(v0 + 144));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_(uint64_t result)
{
  *(_QWORD *)(result + 168) = *(_QWORD *)(result + 168) & 1 | 0x2800000000000000;
  return result;
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi4_(uint64_t result)
{
  *(_QWORD *)(result + 168) = *(_QWORD *)(result + 168) & 1 | 0x1400000000000000;
  return result;
}

uint64_t outlined init with copy of NodeDef.Implementation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NodeDef.Implementation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of NodeDef.Implementation(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NodeDef.Implementation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double _s11ShaderGraph7NodeDefVSgWOi0_(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi11_(uint64_t result)
{
  *(_QWORD *)(result + 168) = *(_QWORD *)(result + 168) & 1 | 0x3000000000000000;
  return result;
}

_BYTE *partial apply for closure #1 in closure #1 in Float.init<A>(_:)@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return partial apply for closure #1 in closure #1 in Float.init<A>(_:)(a1, a2);
}

_BYTE *partial apply for closure #1 in closure #1 in Float.init<A>(_:)@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtof_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph16DataTypePropertyV_s6UInt32VtG_AF21SGPropertyDescriptionCs5NeverOTg504_s11d7Graph16fgh3Vs6i5VAA21jk17CIggyo_AC_AEtAGs5L96OIegnrzr_TR04_s11a13Graph17SGTypeh12CyAcA13Metalcd9CcfcAA010g9D0CAA0fG8e4V_s6F7VtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(void);
  char *v9;
  uint64_t v10;
  id v11;
  objc_class *v12;
  _BYTE *v13;
  _QWORD *v14;
  _DWORD *v15;
  objc_class *v16;
  uint64_t v17;
  char v18;
  int v19;
  objc_super v20;
  objc_super v21;
  uint64_t v22;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v22 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v16 = (objc_class *)type metadata accessor for SGTypeDescription();
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *v4;
      v6 = v4[1];
      v17 = *(v4 - 1);
      v18 = *((_BYTE *)v4 + 24);
      v19 = *((_DWORD *)v4 + 10);
      v7 = (char *)objc_allocWithZone(v16);
      *(_DWORD *)&v7[OBJC_IVAR___SGTypeDescription_offset] = 0;
      *(_QWORD *)&v7[OBJC_IVAR___SGTypeDescription_type] = v6;
      v8 = *(void (**)(void))(*(_QWORD *)v6 + 232);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v9 = v7;
      v8();
      v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph16DataTypePropertyV_s6UInt32VtG_AF21SGPropertyDescriptionCs5NeverOTg504_s11d7Graph16fgh3Vs6i5VAA21jk17CIggyo_AC_AEtAGs5L96OIegnrzr_TR04_s11a13Graph17SGTypeh12CyAcA13Metalcd9CcfcAA010g9D0CAA0fG8e4V_s6F7VtXEfU_Tf3nnnpf_nTf1cn_n();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v9[OBJC_IVAR___SGTypeDescription_properties] = v10;

      v21.receiver = v9;
      v21.super_class = v16;
      v11 = objc_msgSendSuper2(&v21, sel_init);
      swift_release();
      v12 = (objc_class *)type metadata accessor for SGPropertyDescription();
      v13 = objc_allocWithZone(v12);
      v14 = &v13[OBJC_IVAR___SGPropertyDescription_name];
      *v14 = v17;
      v14[1] = v5;
      *(_QWORD *)&v13[OBJC_IVAR___SGPropertyDescription_type] = v11;
      v13[OBJC_IVAR___SGPropertyDescription_visible] = v18;
      v20.receiver = v13;
      v20.super_class = v12;
      v15 = (_DWORD *)(*(_QWORD *)((char *)objc_msgSendSuper2(&v20, sel_init) + OBJC_IVAR___SGPropertyDescription_type)
                     + OBJC_IVAR___SGTypeDescription_offset);
      swift_beginAccess();
      *v15 = v19;
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v4 += 7;
      --v2;
    }
    while (v2);
    return v22;
  }
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay11ShaderGraph21SGPropertyDescriptionCGG_AH16DataTypePropertyVsAE_pTg506_sSi11f7Graph21hi5CAA16jkl3Vs5C149_pIgygozo_Si6offset_AC7elementtAEsAF_pIegnrzr_TR04_s11a12Graph13Metalef25C6create_4nameAcA17SGTyped14C_SStKFZAA0dE8g9VSi_AA010C10I0CtKXEfU_Tf3nnnpf_nTf1cn_n(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  _OWORD v33[12];
  __int128 v34;
  uint64_t v35;

  v35 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v2 = v35;
  if (a1 >> 62)
    goto LABEL_17;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v3)
  {
    while (1)
    {
      v4 = 0;
      v30 = a1 & 0xFFFFFFFFFFFFFF8;
      v31 = a1 & 0xC000000000000001;
      v28 = v3;
      v29 = a1;
      while (v31)
      {
        v5 = (char *)MEMORY[0x24954B748](v4, a1);
LABEL_7:
        v6 = v5;
        v7 = v4 + 1;
        if (__OFADD__(v4, 1))
          goto LABEL_16;
        v8 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)&v5[OBJC_IVAR___SGPropertyDescription_type]
                                                             + OBJC_IVAR___SGTypeDescription_type)
                                               + 144);
        v9 = swift_retain();
        v10 = v8(v9);
        swift_release();
        if (!v10)
        {
          _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi45_((uint64_t)&v32);
          outlined init with take of UserGraphError.ErrorType(&v32, (uint64_t)v33);
          lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
          v34 = 0uLL;
          swift_allocError();
          *v17 = v33[0];
          v18 = v33[4];
          v19 = v33[2];
          v20 = v33[1];
          v17[3] = v33[3];
          v17[4] = v18;
          v17[1] = v20;
          v17[2] = v19;
          v21 = v33[8];
          v22 = v33[6];
          v23 = v33[5];
          v17[7] = v33[7];
          v17[8] = v21;
          v17[5] = v23;
          v17[6] = v22;
          v24 = v34;
          v25 = v33[10];
          v26 = v33[9];
          v17[11] = v33[11];
          v17[12] = v24;
          v17[9] = v26;
          v17[10] = v25;
          swift_willThrow();
          swift_release();
          swift_bridgeObjectRelease();

          return v2;
        }
        v11 = *(_QWORD *)&v6[OBJC_IVAR___SGPropertyDescription_name];
        v12 = *(_QWORD *)&v6[OBJC_IVAR___SGPropertyDescription_name + 8];
        v13 = v6[OBJC_IVAR___SGPropertyDescription_visible];
        swift_bridgeObjectRetain();

        v35 = v2;
        v14 = *(_QWORD *)(v2 + 16);
        v15 = *(_QWORD *)(v2 + 24);
        if (v14 >= v15 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v14 + 1, 1);
          v2 = v35;
        }
        *(_QWORD *)(v2 + 16) = v14 + 1;
        v16 = v2 + 48 * v14;
        *(_QWORD *)(v16 + 32) = v11;
        *(_QWORD *)(v16 + 40) = v12;
        *(_QWORD *)(v16 + 48) = v10;
        *(_QWORD *)(v16 + 56) = MEMORY[0x24BEE4AF8];
        *(_BYTE *)(v16 + 64) = v13;
        *(_QWORD *)(v16 + 72) = v4++;
        a1 = v29;
        if (v7 == v28)
          goto LABEL_18;
      }
      if (v4 < *(_QWORD *)(v30 + 16))
        break;
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      swift_bridgeObjectRetain();
      v3 = _CocoaArrayWrapper.endIndex.getter();
      if (!v3)
        goto LABEL_18;
    }
    v5 = (char *)*(id *)(a1 + 8 * v4 + 32);
    goto LABEL_7;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t SGTypeDescription.size.getter()
{
  uint64_t v0;

  return *(unsigned int *)(*(_QWORD *)(v0 + OBJC_IVAR___SGTypeDescription_type) + 56);
}

uint64_t SGTypeDescription.alignment.getter()
{
  uint64_t v0;

  return *(unsigned int *)(*(_QWORD *)(v0 + OBJC_IVAR___SGTypeDescription_type) + 60);
}

uint64_t static MetalDataType.create(_:)(uint64_t a1)
{
  return specialized static MetalDataType.create(_:)(a1);
}

uint64_t SGTypeDescription.type.getter()
{
  return swift_retain();
}

uint64_t SGTypeDescription.properties.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SGTypeDescription.offset.getter()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)(v0 + OBJC_IVAR___SGTypeDescription_offset);
  swift_beginAccess();
  return *v1;
}

uint64_t SGTypeDescription.offset.setter(int a1)
{
  uint64_t v1;
  _DWORD *v3;
  uint64_t result;

  v3 = (_DWORD *)(v1 + OBJC_IVAR___SGTypeDescription_offset);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*SGTypeDescription.offset.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.StringNode.children.modify;
}

BOOL SGTypeDescription.getMTLTextureType(_:)(uint64_t *a1)
{
  return SGTypeDescription.getMTLTextureType(_:)(a1, MetalDataType.MTLTextureType.getter);
}

BOOL SGTypeDescription.getMTLDataType(_:)(uint64_t *a1)
{
  return SGTypeDescription.getMTLTextureType(_:)(a1, MetalDataType.MTLDataType.getter);
}

BOOL SGTypeDescription.getMTLTextureType(_:)(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v3;
  char v4;

  v3 = a2();
  if ((v4 & 1) == 0 && a1)
    *a1 = v3;
  return (v4 & 1) == 0;
}

BOOL @objc SGTypeDescription.getMTLTextureType(_:)(void *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  id v6;
  uint64_t v7;
  char v8;
  _BOOL8 v9;

  v6 = a1;
  v7 = a4();
  if ((v8 & 1) == 0 && a3)
    *a3 = v7;
  v9 = (v8 & 1) == 0;

  return v9;
}

id SGTypeDescription.__allocating_init(_:)(uint64_t a1)
{
  objc_class *v1;
  objc_class *v2;
  char *v4;
  uint64_t (*v5)(uint64_t);
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  objc_super v12;

  v2 = v1;
  v4 = (char *)objc_allocWithZone(v2);
  *(_DWORD *)&v4[OBJC_IVAR___SGTypeDescription_offset] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___SGTypeDescription_type] = a1;
  v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 232);
  v6 = v4;
  v7 = swift_retain();
  v8 = v5(v7);
  v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph16DataTypePropertyV_s6UInt32VtG_AF21SGPropertyDescriptionCs5NeverOTg504_s11d7Graph16fgh3Vs6i5VAA21jk17CIggyo_AC_AEtAGs5L96OIegnrzr_TR04_s11a13Graph17SGTypeh12CyAcA13Metalcd9CcfcAA010g9D0CAA0fG8e4V_s6F7VtXEfU_Tf3nnnpf_nTf1cn_n(v8);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v6[OBJC_IVAR___SGTypeDescription_properties] = v9;

  v12.receiver = v6;
  v12.super_class = v2;
  v10 = objc_msgSendSuper2(&v12, sel_init);
  swift_release();
  return v10;
}

id SGTypeDescription.init(_:)(uint64_t a1)
{
  char *v1;
  char *v2;
  objc_class *ObjectType;
  uint64_t (*v5)(uint64_t);
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  objc_super v12;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  *(_DWORD *)&v2[OBJC_IVAR___SGTypeDescription_offset] = 0;
  *(_QWORD *)&v2[OBJC_IVAR___SGTypeDescription_type] = a1;
  v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 232);
  v6 = v2;
  v7 = swift_retain();
  v8 = v5(v7);
  v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph16DataTypePropertyV_s6UInt32VtG_AF21SGPropertyDescriptionCs5NeverOTg504_s11d7Graph16fgh3Vs6i5VAA21jk17CIggyo_AC_AEtAGs5L96OIegnrzr_TR04_s11a13Graph17SGTypeh12CyAcA13Metalcd9CcfcAA010g9D0CAA0fG8e4V_s6F7VtXEfU_Tf3nnnpf_nTf1cn_n(v8);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v6[OBJC_IVAR___SGTypeDescription_properties] = v9;

  v12.receiver = v6;
  v12.super_class = ObjectType;
  v10 = objc_msgSendSuper2(&v12, sel_init);
  swift_release();
  return v10;
}

id SGPropertyDescription.__allocating_init(name:type:visible:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  objc_class *v4;
  _BYTE *v9;
  _QWORD *v10;
  objc_super v12;

  v9 = objc_allocWithZone(v4);
  v10 = &v9[OBJC_IVAR___SGPropertyDescription_name];
  *v10 = a1;
  v10[1] = a2;
  *(_QWORD *)&v9[OBJC_IVAR___SGPropertyDescription_type] = a3;
  v9[OBJC_IVAR___SGPropertyDescription_visible] = a4;
  v12.receiver = v9;
  v12.super_class = v4;
  return objc_msgSendSuper2(&v12, sel_init);
}

uint64_t SGTypeDescription.isEqual(_:)(uint64_t a1)
{
  void *v1;
  id v3;
  char v4;
  void *v6;
  _BYTE v7[24];
  uint64_t v8;

  swift_getObjectType();
  outlined init with copy of Any?(a1, (uint64_t)v7);
  if (!v8)
  {
    outlined destroy of Any?((uint64_t)v7);
    goto LABEL_5;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    v4 = 0;
    return v4 & 1;
  }
  v3 = v1;
  v4 = static NSObject.== infix(_:_:)();

  return v4 & 1;
}

id static SGTypeDescription.create(_:)(uint64_t a1)
{
  return specialized static SGTypeDescription.create(_:)(a1);
}

uint64_t SGTypeDescription.description.getter()
{
  return SGTypeDescription.description.getter((void (*)(_QWORD *__return_ptr, uint64_t *, uint64_t))closure #1 in SGTypeDescription.description.getter);
}

void closure #1 in SGTypeDescription.description.getter(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  Swift::String v4;
  Swift::String v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;

  _StringGuts.grow(_:)(45);
  v4._object = (void *)0x8000000245FCAD00;
  v4._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafePointer<SGTypeDescription>);
  _print_unlocked<A, B>(_:_:)();
  v5._countAndFlagsBits = 0x3D6570797420;
  v5._object = (void *)0xE600000000000000;
  String.append(_:)(v5);
  v6 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(a1 + OBJC_IVAR___SGTypeDescription_type) + 136);
  v7 = swift_retain();
  v8._countAndFlagsBits = v6(v7);
  String.append(_:)(v8);
  swift_release();
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x747265706F727020;
  v9._object = (void *)0xEC0000003D736569;
  String.append(_:)(v9);
  v10 = type metadata accessor for SGPropertyDescription();
  v11 = swift_bridgeObjectRetain();
  v12._countAndFlagsBits = MEMORY[0x24954B1D8](v11, v10);
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 62;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  *a2 = 0;
  a2[1] = 0xE000000000000000;
}

id SGTypeDescription.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SGTypeDescription.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t static SGTypeDescription.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + OBJC_IVAR___SGTypeDescription_type) + 128))(*(_QWORD *)(a2 + OBJC_IVAR___SGTypeDescription_type)) & 1;
}

uint64_t static MetalDataType.create(_:name:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + OBJC_IVAR___SGTypeDescription_type) + 144))();
  if (!result)
  {
    v7 = swift_bridgeObjectRetain();
    v8 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay11ShaderGraph21SGPropertyDescriptionCGG_AH16DataTypePropertyVsAE_pTg506_sSi11f7Graph21hi5CAA16jkl3Vs5C149_pIgygozo_Si6offset_AC7elementtAEsAF_pIegnrzr_TR04_s11a12Graph13Metalef25C6create_4nameAcA17SGTyped14C_SStKFZAA0dE8g9VSi_AA010C10I0CtKXEfU_Tf3nnnpf_nTf1cn_n(v7);
    result = swift_bridgeObjectRelease();
    if (!v3)
    {
      type metadata accessor for MetalDataType.Struct();
      v9 = swift_allocObject();
      swift_bridgeObjectRetain();
      v10 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, a2, a3, 0x100000000, 0x100000000, 0, v8, v9);
      swift_release();
      return v10;
    }
  }
  return result;
}

uint64_t SGPropertyDescription.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___SGPropertyDescription_name);
  swift_bridgeObjectRetain();
  return v1;
}

id SGPropertyDescription.type.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___SGPropertyDescription_type);
}

uint64_t SGPropertyDescription.visible.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SGPropertyDescription_visible);
}

id SGPropertyDescription.init(name:type:visible:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;
  objc_class *ObjectType;
  _QWORD *v10;
  objc_super v12;

  ObjectType = (objc_class *)swift_getObjectType();
  v10 = &v4[OBJC_IVAR___SGPropertyDescription_name];
  *v10 = a1;
  v10[1] = a2;
  *(_QWORD *)&v4[OBJC_IVAR___SGPropertyDescription_type] = a3;
  v4[OBJC_IVAR___SGPropertyDescription_visible] = a4;
  v12.receiver = v4;
  v12.super_class = ObjectType;
  return objc_msgSendSuper2(&v12, sel_init);
}

id static SGPropertyDescription.create(_:type:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  _BYTE *v7;
  _QWORD *v8;
  id v9;
  objc_super v11;

  v7 = objc_allocWithZone(v3);
  v8 = &v7[OBJC_IVAR___SGPropertyDescription_name];
  *v8 = a1;
  v8[1] = a2;
  *(_QWORD *)&v7[OBJC_IVAR___SGPropertyDescription_type] = a3;
  v7[OBJC_IVAR___SGPropertyDescription_visible] = 1;
  v11.receiver = v7;
  v11.super_class = v3;
  swift_bridgeObjectRetain();
  v9 = a3;
  return objc_msgSendSuper2(&v11, sel_init);
}

id @objc SGTypeDescription.description.getter(void *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, void **, id))
{
  id v4;
  void *v5;
  void *v7;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  v7 = a1;
  v4 = a1;
  a3(v8, &v7, v4);

  v5 = (void *)MEMORY[0x24954AF98](v8[0], v8[1]);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t SGPropertyDescription.description.getter()
{
  return SGTypeDescription.description.getter((void (*)(_QWORD *__return_ptr, uint64_t *, uint64_t))closure #1 in SGPropertyDescription.description.getter);
}

uint64_t SGTypeDescription.description.getter(void (*a1)(_QWORD *__return_ptr, uint64_t *, uint64_t))
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  a1(v4, &v3, v1);
  return v4[0];
}

void closure #1 in SGPropertyDescription.description.getter(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  Swift::String v20;

  _StringGuts.grow(_:)(53);
  v4._object = (void *)0x8000000245FCACE0;
  v4._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafePointer<SGPropertyDescription>);
  _print_unlocked<A, B>(_:_:)();
  v5._countAndFlagsBits = 0x3D656D616E20;
  v5._object = (void *)0xE600000000000000;
  String.append(_:)(v5);
  v6 = *(_QWORD *)(a1 + OBJC_IVAR___SGPropertyDescription_name);
  v7 = *(void **)(a1 + OBJC_IVAR___SGPropertyDescription_name + 8);
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x3D6570797420;
  v9._object = (void *)0xE600000000000000;
  String.append(_:)(v9);
  v10 = *(id *)(a1 + OBJC_IVAR___SGPropertyDescription_type);
  v11 = objc_msgSend(v10, sel_description);
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v13;

  v15._countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);

  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0x656C626973697620;
  v16._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v16);
  if (*(_BYTE *)(a1 + OBJC_IVAR___SGPropertyDescription_visible))
    v17 = 1702195828;
  else
    v17 = 0x65736C6166;
  if (*(_BYTE *)(a1 + OBJC_IVAR___SGPropertyDescription_visible))
    v18 = 0xE400000000000000;
  else
    v18 = 0xE500000000000000;
  v19 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 62;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  *a2 = 0;
  a2[1] = 0xE000000000000000;
}

void SGPropertyDescription.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t static SGPropertyDescription.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  char v5;
  char v6;

  if (a1 == a2)
    return 1;
  v4 = *(_QWORD *)(a1 + OBJC_IVAR___SGPropertyDescription_name) == *(_QWORD *)(a2
                                                                             + OBJC_IVAR___SGPropertyDescription_name)
    && *(_QWORD *)(a1 + OBJC_IVAR___SGPropertyDescription_name + 8) == *(_QWORD *)(a2
                                                                                 + OBJC_IVAR___SGPropertyDescription_name
                                                                                 + 8);
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), v6 = 0, (v5 & 1) != 0))
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + OBJC_IVAR___SGPropertyDescription_type)
                                                          + OBJC_IVAR___SGTypeDescription_type)
                                            + 128))(*(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___SGPropertyDescription_type)
                                                                + OBJC_IVAR___SGTypeDescription_type)) & 1) != 0)
      v6 = *(_BYTE *)(a1 + OBJC_IVAR___SGPropertyDescription_visible) ^ *(_BYTE *)(a2
                                                                                 + OBJC_IVAR___SGPropertyDescription_visible) ^ 1;
    else
      v6 = 0;
  }
  return v6 & 1;
}

uint64_t SGPropertyDescription.isEqual(_:)(uint64_t a1)
{
  char *v1;
  char *v2;
  BOOL v4;
  char v5;
  char v6;
  char v7;
  char *v9;
  _BYTE v10[24];
  uint64_t v11;

  v2 = v1;
  swift_getObjectType();
  outlined init with copy of Any?(a1, (uint64_t)v10);
  if (!v11)
  {
    outlined destroy of Any?((uint64_t)v10);
    goto LABEL_13;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    v7 = 0;
    return v7 & 1;
  }
  if (v9 == v1)
  {

    v7 = 1;
    return v7 & 1;
  }
  v4 = *(_QWORD *)&v9[OBJC_IVAR___SGPropertyDescription_name] == *(_QWORD *)&v1[OBJC_IVAR___SGPropertyDescription_name]
    && *(_QWORD *)&v9[OBJC_IVAR___SGPropertyDescription_name + 8] == *(_QWORD *)&v1[OBJC_IVAR___SGPropertyDescription_name
                                                                                  + 8];
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)&v9[OBJC_IVAR___SGPropertyDescription_type]
                                                        + OBJC_IVAR___SGTypeDescription_type)
                                          + 128))(*(_QWORD *)(*(_QWORD *)&v1[OBJC_IVAR___SGPropertyDescription_type]
                                                              + OBJC_IVAR___SGTypeDescription_type)) & 1) == 0)
  {

    goto LABEL_13;
  }
  v5 = v9[OBJC_IVAR___SGPropertyDescription_visible];
  v6 = v2[OBJC_IVAR___SGPropertyDescription_visible];

  v7 = v5 ^ v6 ^ 1;
  return v7 & 1;
}

uint64_t specialized static MetalDataType.create(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + OBJC_IVAR___SGPropertyDescription_name);
  v3 = *(_QWORD *)(a1 + OBJC_IVAR___SGPropertyDescription_name + 8);
  result = (*(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)(a1 + OBJC_IVAR___SGPropertyDescription_type)
                                              + OBJC_IVAR___SGTypeDescription_type)
                                + 144))();
  if (!result)
  {
    v5 = swift_bridgeObjectRetain();
    v6 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay11ShaderGraph21SGPropertyDescriptionCGG_AH16DataTypePropertyVsAE_pTg506_sSi11f7Graph21hi5CAA16jkl3Vs5C149_pIgygozo_Si6offset_AC7elementtAEsAF_pIegnrzr_TR04_s11a12Graph13Metalef25C6create_4nameAcA17SGTyped14C_SStKFZAA0dE8g9VSi_AA010C10I0CtKXEfU_Tf3nnnpf_nTf1cn_n(v5);
    result = swift_bridgeObjectRelease();
    if (!v1)
    {
      type metadata accessor for MetalDataType.Struct();
      v7 = swift_allocObject();
      swift_bridgeObjectRetain();
      v8 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, v2, v3, 0x100000000, 0x100000000, 0, v6, v7);
      swift_release();
      return v8;
    }
  }
  return result;
}

id specialized static SGTypeDescription.create(_:)(uint64_t a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  objc_class *v5;
  char *v6;
  uint64_t (*v7)(uint64_t);
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  objc_super v23;
  __int128 v24[12];
  _OWORD v25[12];
  __int128 v26;

  v2 = v1;
  specialized SGDataType.materialXDataType.getter(a1);
  swift_retain();
  v3 = MaterialXDataType.asMetalDataType.getter();
  if (v3)
  {
    v4 = v3;
    v5 = (objc_class *)type metadata accessor for SGTypeDescription();
    v6 = (char *)objc_allocWithZone(v5);
    *(_DWORD *)&v6[OBJC_IVAR___SGTypeDescription_offset] = 0;
    *(_QWORD *)&v6[OBJC_IVAR___SGTypeDescription_type] = v4;
    v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 232);
    v8 = v6;
    v9 = swift_retain();
    v10 = v7(v9);
    v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph16DataTypePropertyV_s6UInt32VtG_AF21SGPropertyDescriptionCs5NeverOTg504_s11d7Graph16fgh3Vs6i5VAA21jk17CIggyo_AC_AEtAGs5L96OIegnrzr_TR04_s11a13Graph17SGTypeh12CyAcA13Metalcd9CcfcAA010g9D0CAA0fG8e4V_s6F7VtXEfU_Tf3nnnpf_nTf1cn_n(v10);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v8[OBJC_IVAR___SGTypeDescription_properties] = v11;

    v23.receiver = v8;
    v23.super_class = v5;
    v2 = objc_msgSendSuper2(&v23, sel_init);
    swift_release();
    swift_release();
  }
  else
  {
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi45_((uint64_t)v24);
    outlined init with take of UserGraphError.ErrorType(v24, (uint64_t)v25);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v26 = 0uLL;
    swift_allocError();
    *v12 = v25[0];
    v13 = v25[4];
    v15 = v25[1];
    v14 = v25[2];
    v12[3] = v25[3];
    v12[4] = v13;
    v12[1] = v15;
    v12[2] = v14;
    v16 = v25[8];
    v18 = v25[5];
    v17 = v25[6];
    v12[7] = v25[7];
    v12[8] = v16;
    v12[5] = v18;
    v12[6] = v17;
    v19 = v26;
    v21 = v25[9];
    v20 = v25[10];
    v12[11] = v25[11];
    v12[12] = v19;
    v12[9] = v21;
    v12[10] = v20;
    swift_willThrow();
    swift_release();
  }
  return v2;
}

uint64_t type metadata accessor for SGTypeDescription()
{
  return objc_opt_self();
}

uint64_t method lookup function for SGTypeDescription()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SGTypeDescription.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t type metadata accessor for SGPropertyDescription()
{
  return objc_opt_self();
}

uint64_t method lookup function for SGPropertyDescription()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SGPropertyDescription.__allocating_init(name:type:visible:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

double _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi45_(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 11;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0x8C00000000000000;
  return result;
}

void *Signposts.subsystem.unsafeMutableAddressor()
{
  return &static Signposts.subsystem;
}

const char *Signposts.Category.material.unsafeMutableAddressor()
{
  return "Material";
}

char **Signposts.Names.transform.unsafeMutableAddressor()
{
  return &static Signposts.Names.transform;
}

void *Signposts.Category.api.unsafeMutableAddressor()
{
  return &static Signposts.Category.api;
}

char **Signposts.Events.materialInit.unsafeMutableAddressor()
{
  return &static Signposts.Events.materialInit;
}

char **Signposts.Events.archiveInit.unsafeMutableAddressor()
{
  return &static Signposts.Events.archiveInit;
}

char **Signposts.Events.archiveDecode.unsafeMutableAddressor()
{
  return &static Signposts.Events.archiveDecode;
}

char **Signposts.Events.libraryFromMaterial.unsafeMutableAddressor()
{
  return &static Signposts.Events.libraryFromMaterial;
}

unint64_t static Signposts.subsystem.getter()
{
  return 0xD000000000000015;
}

const char *Signposts.Category.graphCompiler.unsafeMutableAddressor()
{
  return "GraphCompiler";
}

uint64_t static Signposts.Category.graphCompiler.getter()
{
  return 0x6D6F436870617247;
}

const char *Signposts.Category.sourceBackend.unsafeMutableAddressor()
{
  return "SourceBackend";
}

uint64_t static Signposts.Category.sourceBackend.getter()
{
  return 0x6142656372756F53;
}

void *Signposts.Category.stitchingBackend.unsafeMutableAddressor()
{
  return &static Signposts.Category.stitchingBackend;
}

unint64_t static Signposts.Category.stitchingBackend.getter()
{
  return 0xD000000000000010;
}

const char *Signposts.Category.metalCompile.unsafeMutableAddressor()
{
  return "MetalCompile";
}

uint64_t static Signposts.Category.metalCompile.getter()
{
  return 0x6D6F436C6174654DLL;
}

uint64_t static Signposts.Category.material.getter()
{
  return 0x6C6169726574614DLL;
}

uint64_t static Signposts.Category.api.getter()
{
  return 4804673;
}

const char *static Signposts.Names.transform.getter()
{
  return "transform";
}

char **Signposts.Names.functionGraph.unsafeMutableAddressor()
{
  return &static Signposts.Names.functionGraph;
}

const char *static Signposts.Names.functionGraph.getter()
{
  return "functionGraph";
}

char **Signposts.Names.textGen.unsafeMutableAddressor()
{
  return &static Signposts.Names.textGen;
}

const char *static Signposts.Names.textGen.getter()
{
  return "textGeneration";
}

char **Signposts.Names.metalCompile.unsafeMutableAddressor()
{
  return &static Signposts.Names.metalCompile;
}

const char *static Signposts.Names.metalCompile.getter()
{
  return "metalCompile";
}

char **Signposts.Names.supportLib.unsafeMutableAddressor()
{
  return &static Signposts.Names.supportLib;
}

const char *static Signposts.Names.supportLib.getter()
{
  return "supportLibrary";
}

char **Signposts.Names.metalStitcher.unsafeMutableAddressor()
{
  return &static Signposts.Names.metalStitcher;
}

const char *static Signposts.Names.metalStitcher.getter()
{
  return "metalStitcher";
}

char **Signposts.Names.stitchingGraph.unsafeMutableAddressor()
{
  return &static Signposts.Names.stitchingGraph;
}

const char *static Signposts.Names.stitchingGraph.getter()
{
  return "stitchingGraph";
}

char **Signposts.Names.samplerCache.unsafeMutableAddressor()
{
  return &static Signposts.Names.samplerCache;
}

const char *static Signposts.Names.samplerCache.getter()
{
  return "samplerCache";
}

char **Signposts.Events.begin.unsafeMutableAddressor()
{
  return &static Signposts.Events.begin;
}

const char *static Signposts.Events.begin.getter()
{
  return "begin";
}

char **Signposts.Events.end.unsafeMutableAddressor()
{
  return &static Signposts.Events.end;
}

const char *static Signposts.Events.end.getter()
{
  return "end";
}

char **Signposts.Events.graphInit.unsafeMutableAddressor()
{
  return &static Signposts.Events.graphInit;
}

const char *static Signposts.Events.graphInit.getter()
{
  return "graphInit";
}

const char *static Signposts.Events.materialInit.getter()
{
  return "materialInit";
}

const char *static Signposts.Events.archiveInit.getter()
{
  return "archiveInit";
}

const char *static Signposts.Events.archiveDecode.getter()
{
  return "archiveDecode";
}

const char *static Signposts.Events.libraryFromMaterial.getter()
{
  return "libraryFromMaterial";
}

ValueMetadata *type metadata accessor for Signposts()
{
  return &type metadata for Signposts;
}

ValueMetadata *type metadata accessor for Signposts.Category()
{
  return &type metadata for Signposts.Category;
}

ValueMetadata *type metadata accessor for Signposts.Names()
{
  return &type metadata for Signposts.Names;
}

ValueMetadata *type metadata accessor for Signposts.Events()
{
  return &type metadata for Signposts.Events;
}

uint64_t OrderedDictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = specialized OrderedDictionary.init(dictionaryLiteral:)(a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t protocol witness for ExpressibleByDictionaryLiteral.init(dictionaryLiteral:) in conformance OrderedDictionary<A, B>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = specialized OrderedDictionary.init(dictionaryLiteral:)(a1, a2[2], a2[3], a2[4]);
  v6 = v5;
  v8 = v7;
  result = swift_bridgeObjectRelease();
  *a3 = v4;
  a3[1] = v6;
  a3[2] = v8;
  return result;
}

uint64_t specialized OrderedDictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v10 = a1;
  swift_getTupleTypeMetadata2();
  v7 = type metadata accessor for Array();
  v8 = MEMORY[0x24954C264](MEMORY[0x24BEE12C8], v7);
  return specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)((uint64_t)&v10, a2, a3, v7, a4, v8);
}

uint64_t static _HashTable.maximumUnhashedCount.getter()
{
  return 15;
}

uint64_t static _HashTable.minimumScale.getter()
{
  return 5;
}

uint64_t static _HashTable.maximumScale.getter()
{
  return 56;
}

double static _HashTable.maximumLoadFactor.getter()
{
  return 0.75;
}

double static _HashTable.minimumLoadFactor.getter()
{
  return 0.25;
}

uint64_t static _HashTable.wordCount(forScale:)(uint64_t result)
{
  uint64_t v1;

  v1 = (result << result) + 63;
  if (__OFADD__(result << result, 63))
  {
    __break(1u);
  }
  else
  {
    if (v1 < 0)
      v1 = (result << result) + 126;
    return v1 >> 6;
  }
  return result;
}

int64_t specialized static _HashTable.scale(forCapacity:)(int64_t result)
{
  double v1;
  uint64_t v2;

  if (result < 16)
    return 0;
  v1 = ceil((double)result / 0.75);
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v1 >= 9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v2 = result + 1;
  if (__OFADD__(result, 1))
  {
LABEL_13:
    __break(1u);
    return result;
  }
  if (v2 <= (uint64_t)v1)
    v2 = (uint64_t)v1;
  return 64 - __clz(v2 - 1);
}

uint64_t specialized static _HashTable.maximumCapacity(forScale:)(uint64_t result)
{
  double v1;

  if (result < 5)
    return 15;
  v1 = (double)(1 << result) * 0.75;
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v1 < 9.22337204e18)
    return (uint64_t)v1;
LABEL_9:
  __break(1u);
  return result;
}

uint64_t specialized static _HashTable.minimumCapacity(forScale:)(uint64_t result)
{
  double v1;

  if (result < 5)
    return 0;
  v1 = (double)(1 << result) * 0.25;
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v1 < 9.22337204e18)
    return (uint64_t)v1;
LABEL_9:
  __break(1u);
  return result;
}

uint64_t GraphCompiler.replaceTier1TextureGetterNodes(in:surface:geometryModifier:)(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return specialized GraphCompiler.replaceTier1TextureGetterNodes(in:surface:geometryModifier:)(a1, a2, a3);
}

uint64_t closure #1 in GraphCompiler.replaceTier1TextureGetterNodes(in:surface:geometryModifier:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD v121[6];
  _BYTE v122[8];
  uint64_t v123;
  __int128 v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _BYTE v128[8];
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  _QWORD v149[5];
  char v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  _QWORD v159[5];
  char v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  __int128 v175;
  _BYTE v176[25];
  uint64_t v177;
  _QWORD v178[2];
  unint64_t v179;

  v12 = v7;
  v14 = *a1;
  v15 = a1[1];
  *(_OWORD *)&v176[9] = *(__int128 *)((char *)a1 + 25);
  v175 = v14;
  *(_OWORD *)v176 = v15;
  outlined init with take of NodePersonality(&v175, v178);
  result = (uint64_t)outlined init with take of NodePersonality(v178, &v179);
  v17 = v179;
  if (v179 >> 61 != 4)
    return result;
  v179 &= 0x1FFFFFFFFFFFFFFFuLL;
  if (!*(_QWORD *)(*((_QWORD *)&v175 + 1) + 16))
    return result;
  v116 = a7;
  v111 = *((_QWORD *)&v175 + 1);
  v113 = a2;
  v18 = *(_QWORD *)(v17 + 16);
  v19 = *(_QWORD *)(v17 + 24);
  type metadata accessor for MetalDataType();
  result = swift_dynamicCastClass();
  if (!result)
    return result;
  v20 = *(uint64_t (**)(uint64_t))(*(_QWORD *)result + 88);
  swift_retain_n();
  swift_bridgeObjectRetain();
  v21 = swift_bridgeObjectRetain();
  v22 = v20(v21);
  specialized Sequence.first(where:)(v22, v18, v19, v121);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  outlined init with take of MetalFunctionNode?((uint64_t)v121, (uint64_t)&v130, &demangling cache variable for type metadata for DataTypeProperty?);
  if (!*((_QWORD *)&v130 + 1))
    goto LABEL_12;
  v132 = v130;
  v23 = v131;
  MetalDataType.MTLTextureType.getter();
  if ((v24 & 1) != 0)
  {
    v139 = v132;
    outlined release of String((uint64_t)&v139);
    swift_release();
    v140 = v23;
    v26 = &v140;
    goto LABEL_11;
  }
  ShaderGraphNode.out.getter((uint64_t)v122);
  if (v12)
  {
    v141 = v132;
    outlined release of String((uint64_t)&v141);
    swift_release();
    v142 = v23;
    v25 = &v142;
LABEL_8:
    outlined release of [Input]((uint64_t)v25);
    swift_release_n();
    return swift_bridgeObjectRelease();
  }
  v27 = v123;
  v148 = v124;
  outlined release of String((uint64_t)&v148);
  type metadata accessor for MetalDataType.Struct();
  v28 = swift_dynamicCastClass();
  if (!v28)
  {
    lazy protocol witness table accessor for type GraphCompilerErrors and conformance GraphCompilerErrors();
    swift_allocError();
    *(_QWORD *)v52 = 0xD000000000000030;
    *(_QWORD *)(v52 + 8) = 0x8000000245FCAE80;
    *(_BYTE *)(v52 + 16) = 2;
    swift_willThrow();
    swift_release();
    v133 = v132;
    outlined release of String((uint64_t)&v133);
    swift_release();
    v134 = v23;
    v25 = &v134;
    goto LABEL_8;
  }
  v102 = v23;
  v108 = v28;
  lazy protocol witness table accessor for type String and conformance String();
  swift_retain();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v29 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v31 = v30;
  swift_bridgeObjectRelease();
  v118 = *(_QWORD *)(v108 + 24);
  v120 = *(_QWORD *)(v108 + 32);
  swift_bridgeObjectRetain();
  v32._countAndFlagsBits = 95;
  v32._object = (void *)0xE100000000000000;
  String.append(_:)(v32);
  v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v34._countAndFlagsBits = 95;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  v35._countAndFlagsBits = v29;
  v35._object = v31;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v36._countAndFlagsBits = a4;
  v36._object = a5;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37 = swift_allocObject();
  *(_QWORD *)(v37 + 16) = v118;
  *(_QWORD *)(v37 + 24) = v120;
  *(_QWORD *)(v37 + 32) = v27;
  v38 = v37 | 0x2000000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
  v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_245FBECD0;
  v40 = *a6;
  swift_retain();
  if (v40 != -1)
    swift_once();
  v41 = *v116;
  *(_QWORD *)(v39 + 32) = 28265;
  *(_QWORD *)(v39 + 40) = 0xE200000000000000;
  *(_QWORD *)(v39 + 48) = v41;
  v42 = *(_QWORD *)v176;
  v177 = *(_QWORD *)v176;
  v43 = *(_QWORD *)(*(_QWORD *)v176 + 16);
  v104 = *(_QWORD *)v176;
  if (v43)
  {
    v117 = v39;
    swift_retain();
    outlined retain of [Input]((uint64_t)&v177);
    v119 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43, 0);
    v44 = v119;
    v45 = (uint64_t *)(v42 + 56);
    do
    {
      v46 = *(v45 - 2);
      v47 = *(v45 - 1);
      v48 = *v45;
      v50 = *(_QWORD *)(v119 + 16);
      v49 = *(_QWORD *)(v119 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v50 >= v49 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1);
      *(_QWORD *)(v119 + 16) = v50 + 1;
      v51 = (_QWORD *)(v119 + 24 * v50);
      v51[4] = v47;
      v51[5] = v48;
      v51[6] = v46;
      v45 += 7;
      --v43;
    }
    while (v43);
    outlined release of [Input]((uint64_t)&v177);
    v39 = v117;
  }
  else
  {
    swift_retain();
    v44 = MEMORY[0x24BEE4AF8];
  }
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(*(_QWORD *)(v113 + 40), v39, v44, v38, v113 + 64, v113, &v125);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  swift_bridgeObjectRelease();
  v147 = v126;
  v103 = v126;
  v107 = *(_QWORD *)(v126 + 16);
  if (!v107)
    goto LABEL_42;
  v105 = v126 + 32;
  swift_bridgeObjectRetain();
  v53 = 0;
  v54 = v111;
  while (2)
  {
    v56 = (uint64_t *)(v105 + 56 * v53);
    v57 = *v56;
    v58 = v56[1];
    v59 = v56[2];
    v60 = v56[3];
    v61 = v56[4];
    v62 = *((_BYTE *)v56 + 40);
    v63 = v56[6];
    *(_QWORD *)&v169 = v57;
    *((_QWORD *)&v169 + 1) = v58;
    v170 = v59;
    v171 = v60;
    v172 = v61;
    v173 = v62;
    v174 = v63;
    v64 = *(_QWORD *)(v54 + 16);
    if (!v64)
      goto LABEL_30;
    v109 = v53;
    v65 = (_QWORD *)(v111 + 80);
    do
    {
      v66 = *(v65 - 6);
      v67 = *(v65 - 5);
      v68 = *(v65 - 4);
      v69 = *(v65 - 2);
      v70 = *((_BYTE *)v65 - 8);
      v71 = *v65;
      if (v68 == v59 && *(v65 - 3) == v60)
      {
        v55 = v60;
LABEL_28:
        v162 = v66;
        v163 = v67;
        v164 = v59;
        v165 = v55;
        v166 = v69;
        v167 = v70;
        v168 = v71;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdge(from:to:)((uint64_t)&v162, &v169);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_29;
      }
      v114 = *(v65 - 6);
      v55 = *(v65 - 3);
      v73 = v59;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v59 = v68;
        v66 = v114;
        goto LABEL_28;
      }
      v65 += 7;
      --v64;
      v59 = v73;
    }
    while (v64);
    v162 = v114;
    v163 = v67;
    v164 = v68;
    v165 = v55;
    v166 = v69;
    v167 = v70;
    v168 = v71;
LABEL_29:
    v54 = v111;
    v53 = v109;
LABEL_30:
    if (++v53 != v107)
      continue;
    break;
  }
  outlined release of [Input]((uint64_t)&v147);
LABEL_42:
  v146 = v127;
  v110 = *(_QWORD *)(v127 + 16);
  if (!v110)
    goto LABEL_59;
  v106 = v127 + 32;
  swift_bridgeObjectRetain();
  v74 = 0;
  v75 = v104;
  while (2)
  {
    v77 = (uint64_t *)(v106 + 56 * v74);
    v78 = *v77;
    v79 = v77[1];
    v80 = v77[2];
    v81 = v77[3];
    v82 = v77[4];
    v83 = *((_BYTE *)v77 + 40);
    v84 = v77[6];
    v159[0] = v78;
    v159[1] = v79;
    v159[2] = v80;
    v159[3] = v81;
    v159[4] = v82;
    v160 = v83;
    v161 = v84;
    v85 = *(_QWORD *)(v75 + 16);
    if (!v85)
      goto LABEL_47;
    v112 = v74;
    v86 = (_QWORD *)(v104 + 80);
    while (2)
    {
      v87 = *(v86 - 6);
      v88 = *(v86 - 5);
      v89 = *(v86 - 4);
      v90 = *(v86 - 2);
      v91 = *((_BYTE *)v86 - 8);
      v92 = *v86;
      if (v89 == v80 && *(v86 - 3) == v81)
      {
        v76 = v81;
LABEL_45:
        v152 = v87;
        v153 = v88;
        v154 = v80;
        v155 = v76;
        v156 = v90;
        v157 = v91;
        v158 = v92;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdges(from:to:)((uint64_t)&v152, (uint64_t)v159);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_46;
      }
      v115 = *(v86 - 6);
      v76 = *(v86 - 3);
      v94 = v80;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v80 = v89;
        v87 = v115;
        goto LABEL_45;
      }
      v86 += 7;
      --v85;
      v80 = v94;
      if (v85)
        continue;
      break;
    }
    v152 = v115;
    v153 = v88;
    v154 = v89;
    v155 = v76;
    v156 = v90;
    v157 = v91;
    v158 = v92;
LABEL_46:
    v75 = v104;
    v74 = v112;
LABEL_47:
    if (++v74 != v110)
      continue;
    break;
  }
  outlined release of [Input]((uint64_t)&v146);
LABEL_59:
  specialized Graph.remove(_:)(*(uint64_t *)&v176[8]);
  if (!*(_QWORD *)(v103 + 16))
  {
    lazy protocol witness table accessor for type GraphCompilerErrors and conformance GraphCompilerErrors();
    swift_allocError();
    *(_QWORD *)v101 = 0xD000000000000016;
    *(_QWORD *)(v101 + 8) = 0x8000000245FCAEC0;
    *(_BYTE *)(v101 + 16) = 2;
    swift_willThrow();
    outlined init with take of NodePersonality(&v125, &v143);
    outlined release of NodePersonality(&v143);
    outlined release of [Input]((uint64_t)&v147);
    outlined release of [Input]((uint64_t)&v146);
    swift_release();
    swift_release();
    swift_release();
    v135 = v132;
    outlined release of String((uint64_t)&v135);
    swift_release();
    v136 = v102;
    v25 = &v136;
    goto LABEL_8;
  }
  v95 = *(_QWORD *)(v103 + 40);
  v96 = *(_QWORD *)(v103 + 48);
  v97 = *(_QWORD *)(v103 + 56);
  v98 = *(_QWORD *)(v103 + 64);
  v99 = *(_BYTE *)(v103 + 72);
  v100 = *(_QWORD *)(v103 + 80);
  v149[0] = *(_QWORD *)(v103 + 32);
  v149[1] = v95;
  v149[2] = v96;
  v149[3] = v97;
  v149[4] = v98;
  v150 = v99;
  v151 = v100;
  swift_retain();
  swift_bridgeObjectRetain();
  ShaderGraphNode.out.getter((uint64_t)v128);
  Graph.connect(_:to:)((uint64_t)v128, (unint64_t)v149);
  swift_release();
  v145 = v129;
  outlined release of String((uint64_t)&v145);
  swift_bridgeObjectRelease();
  swift_release();
  outlined init with take of NodePersonality(&v125, &v144);
  outlined release of NodePersonality(&v144);
  outlined release of [Input]((uint64_t)&v147);
  outlined release of [Input]((uint64_t)&v146);
  swift_release();
  swift_release();
  swift_release();
  v137 = v132;
  outlined release of String((uint64_t)&v137);
  swift_release();
  v138 = v102;
  v26 = &v138;
LABEL_11:
  outlined release of [Input]((uint64_t)v26);
LABEL_12:
  swift_bridgeObjectRelease();
  return swift_release_n();
}

void MetalStitchingBackend.generateFallbackTier1Getters(for:augmenting:library:)(uint64_t a1, uint64_t a2, void *a3)
{
  specialized MetalStitchingBackend.generateFallbackTier1Getters(for:augmenting:library:)(a1, a2, a3);
}

uint64_t specialized GraphCompiler.replaceTier1TextureGetterNodes(in:surface:geometryModifier:)(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t inited;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t *v43;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  _OWORD v57[2];
  __int128 v58;
  _OWORD v59[2];
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _OWORD v84[2];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _OWORD v92[2];
  _OWORD v93[2];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _OWORD v101[3];
  uint64_t v102;

  v4 = v3;
  v7 = a1[1];
  v93[0] = *a1;
  v93[1] = v7;
  v8 = a1[2];
  v9 = a1[3];
  v10 = a1[5];
  v96 = a1[4];
  v97 = v10;
  v94 = v8;
  v95 = v9;
  v11 = a1[6];
  v12 = a1[7];
  *(_OWORD *)((char *)v101 + 9) = *(_OWORD *)((char *)a1 + 153);
  v13 = a1[9];
  v100 = a1[8];
  v101[0] = v13;
  v98 = v11;
  v99 = v12;
  v14 = *((_QWORD *)&v94 + 1);
  outlined retain of Graph((uint64_t)v93);
  Graph.connectedUpstreamSubgraph(rootedAt:)(a2, (uint64_t)&v46);
  v15 = v46;
  outlined release of Graph((uint64_t)v93);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  if (one-time initialization token for surface_parameters_private != -1)
    swift_once();
  v16 = static MetalDataType.re.surface_parameters_private;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_245FBECD0;
  *(_QWORD *)(inited + 32) = 7632239;
  *(_QWORD *)(inited + 40) = 0xE300000000000000;
  *(_QWORD *)(inited + 48) = v16;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = 12324;
  *(_QWORD *)(v18 + 24) = 0xE200000000000000;
  v19 = v18 | 0x6000000000000000;
  swift_retain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v14, MEMORY[0x24BEE4AF8], inited, v19, (uint64_t)(a1 + 4), (uint64_t)a1, &v50);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  v20 = *(_QWORD *)(v15 + 16);
  if (v20)
  {
    v102 = swift_bridgeObjectRetain();
    v21 = v102 + 40;
    while (1)
    {
      v22 = *(_QWORD *)v21;
      v24 = *(_QWORD *)(v21 + 8);
      v25 = *(_BYTE *)(v21 + 32);
      *(_QWORD *)&v46 = *(_QWORD *)(v21 - 8);
      v23 = v46;
      *((_QWORD *)&v46 + 1) = v22;
      v47 = v24;
      v48 = *(_OWORD *)(v21 + 16);
      LOBYTE(v49) = v25;
      outlined copy of NodePersonality(v46);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      closure #1 in GraphCompiler.replaceTier1TextureGetterNodes(in:surface:geometryModifier:)(&v46, (uint64_t)a1, (uint64_t)&v50, 0x656361667275735FLL, (void *)0xE800000000000000, &one-time initialization token for surface_parameters_private, &static MetalDataType.re.surface_parameters_private);
      if (v4)
        break;
      outlined consume of NodePersonality(v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v21 += 48;
      if (!--v20)
      {
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
    }
    outlined consume of NodePersonality(v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with take of NodePersonality(&v50, &v83);
    outlined release of NodePersonality(&v83);
    v82 = v51;
    outlined release of [Input]((uint64_t)&v82);
    v81 = v52;
    v43 = &v81;
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
    outlined init with take of MetalFunctionNode?(a3, (uint64_t)&v56, &demangling cache variable for type metadata for ShaderGraphNode?);
    if (!*((_QWORD *)&v56 + 1))
    {
      outlined init with take of NodePersonality(&v50, &v80);
      outlined release of NodePersonality(&v80);
      v79 = v51;
      outlined release of [Input]((uint64_t)&v79);
      v78 = v52;
      return outlined release of [Input]((uint64_t)&v78);
    }
    v58 = v56;
    v59[0] = v57[0];
    *(_OWORD *)((char *)v59 + 9) = *(_OWORD *)((char *)v57 + 9);
    v26 = a1[9];
    v91 = a1[8];
    v92[0] = v26;
    *(_OWORD *)((char *)v92 + 9) = *(_OWORD *)((char *)a1 + 153);
    v27 = a1[5];
    v87 = a1[4];
    v88 = v27;
    v28 = a1[7];
    v89 = a1[6];
    v90 = v28;
    v29 = a1[1];
    v84[0] = *a1;
    v84[1] = v29;
    v30 = a1[3];
    v85 = a1[2];
    v86 = v30;
    v31 = *((_QWORD *)&v85 + 1);
    outlined retain of ShaderGraphNode?(a3);
    outlined retain of Graph((uint64_t)v84);
    Graph.connectedUpstreamSubgraph(rootedAt:)((uint64_t)&v58, (uint64_t)&v46);
    v32 = v46;
    outlined release of Graph((uint64_t)v84);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    if (one-time initialization token for geometry_parameters_private != -1)
      swift_once();
    v33 = static MetalDataType.re.geometry_parameters_private;
    v34 = swift_initStackObject();
    *(_OWORD *)(v34 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v34 + 32) = 7632239;
    *(_QWORD *)(v34 + 40) = 0xE300000000000000;
    *(_QWORD *)(v34 + 48) = v33;
    v35 = swift_allocObject();
    *(_QWORD *)(v35 + 16) = 12324;
    *(_QWORD *)(v35 + 24) = 0xE200000000000000;
    v36 = v35 | 0x6000000000000000;
    swift_retain();
    specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v31, MEMORY[0x24BEE4AF8], v34, v36, (uint64_t)(a1 + 4), (uint64_t)a1, &v53);
    swift_release();
    swift_setDeallocating();
    swift_arrayDestroy();
    v37 = *(_QWORD *)(v32 + 16);
    if (v37)
    {
      v102 = swift_bridgeObjectRetain();
      v38 = v102 + 40;
      while (1)
      {
        v39 = *(_QWORD *)v38;
        v41 = *(_QWORD *)(v38 + 8);
        v42 = *(_BYTE *)(v38 + 32);
        *(_QWORD *)&v46 = *(_QWORD *)(v38 - 8);
        v40 = v46;
        *((_QWORD *)&v46 + 1) = v39;
        v47 = v41;
        v48 = *(_OWORD *)(v38 + 16);
        LOBYTE(v49) = v42;
        outlined copy of NodePersonality(v46);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        closure #1 in GraphCompiler.replaceTier1TextureGetterNodes(in:surface:geometryModifier:)(&v46, (uint64_t)a1, (uint64_t)&v53, 0x7274656D6F65675FLL, (void *)0xE900000000000079, &one-time initialization token for geometry_parameters_private, &static MetalDataType.re.geometry_parameters_private);
        if (v4)
          break;
        outlined consume of NodePersonality(v40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v38 += 48;
        if (!--v37)
        {
          swift_bridgeObjectRelease();
          goto LABEL_18;
        }
      }
      outlined consume of NodePersonality(v40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined init with take of NodePersonality(&v50, &v77);
      outlined release of NodePersonality(&v77);
      v76 = v51;
      outlined release of [Input]((uint64_t)&v76);
      v75 = v52;
      outlined release of [Input]((uint64_t)&v75);
      outlined init with take of NodePersonality(&v58, &v63);
      outlined release of NodePersonality(&v63);
      v64 = *((_QWORD *)&v58 + 1);
      outlined release of [Input]((uint64_t)&v64);
      v65 = *(_QWORD *)&v59[0];
      outlined release of [Input]((uint64_t)&v65);
      outlined init with take of NodePersonality(&v53, &v74);
      outlined release of NodePersonality(&v74);
      v73 = v54;
      outlined release of [Input]((uint64_t)&v73);
      v72 = v55;
      v43 = &v72;
    }
    else
    {
LABEL_18:
      outlined init with take of NodePersonality(&v50, &v71);
      outlined release of NodePersonality(&v71);
      v70 = v51;
      outlined release of [Input]((uint64_t)&v70);
      v69 = v52;
      outlined release of [Input]((uint64_t)&v69);
      outlined init with take of NodePersonality(&v58, &v60);
      outlined release of NodePersonality(&v60);
      v61 = *((_QWORD *)&v58 + 1);
      outlined release of [Input]((uint64_t)&v61);
      v62 = *(_QWORD *)&v59[0];
      outlined release of [Input]((uint64_t)&v62);
      outlined init with take of NodePersonality(&v53, &v68);
      outlined release of NodePersonality(&v68);
      v67 = v54;
      outlined release of [Input]((uint64_t)&v67);
      v66 = v55;
      v43 = &v66;
    }
  }
  outlined release of [Input]((uint64_t)v43);
  return swift_bridgeObjectRelease();
}

uint64_t specialized closure #1 in MetalStitchingBackend.generateFallbackTier1Getters(for:augmenting:library:)(__int128 *a1, int a2, uint64_t a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, void *a8)
{
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  unint64_t v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  id v30;
  void *v31;
  const char *v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  id v40;
  Swift::String v41;
  uint64_t v42;
  void *v43;
  id v44;
  Swift::String v45;
  void *v46;
  id v47;
  void *v48;
  id v49;
  id v50;
  uint64_t v51;
  id v52;
  id v53;
  Swift::String v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  Swift::String v59;
  void *v60;
  id v61;
  void *v62;
  id v63;
  id v64;
  uint64_t v65;
  id v66;
  void *v67;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int v73;
  __int128 *v74;
  void *v78;
  id v80;
  id v81;
  unint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  v14 = *((_QWORD *)a1 + 2);
  v13 = *((_QWORD *)a1 + 3);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  v15 = MetalDataType.MTLTextureType.getter();
  if ((v16 & 1) != 0)
  {
    v33 = (void *)*((_QWORD *)a1 + 5);
    v93 = *a1;
    v34 = specialized MetalStitchingBackend.specializeGetter(for:field:offset:library:)(a3, v93, *((void **)&v93 + 1), v14, v33, a2, a8);
    if (v8)
    {
      outlined release of String((uint64_t)&v93);
      swift_release();
      v92 = v13;
      v37 = &v92;
    }
    else
    {
      specialized OrderedDictionary.subscript.setter(v36, (uint64_t)v34, v35);
      outlined release of String((uint64_t)&v93);
      swift_release();
      v91 = *((_QWORD *)a1 + 3);
      v37 = &v91;
    }
  }
  else
  {
    v74 = a1;
    v80 = a8;
    v17 = v15;
    v18 = lazy protocol witness table accessor for type String and conformance String();
    v19 = MEMORY[0x24BEE0D00];
    v81 = (id)StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v82 = v20;
    v71 = v18;
    v72 = v18;
    v69 = v19;
    v70 = v18;
    v21 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v23 = v22;
    swift_bridgeObjectRelease();
    v24 = *(_QWORD *)(a3 + 32);
    v81 = *(id *)(a3 + 24);
    v82 = v24;
    swift_bridgeObjectRetain();
    v25._countAndFlagsBits = 95;
    v25._object = (void *)0xE100000000000000;
    String.append(_:)(v25);
    v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 95;
    v27._object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    v28._countAndFlagsBits = v21;
    v28._object = v23;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29 = v82;
    v30 = v81;
    switch(v17)
    {
      case 2:
        v73 = *a4;
        if (*a4 == -1)
        {
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
        }
        v31 = (void *)0xD000000000000028;
        ++*a4;
        v81 = 0;
        v82 = 0xE000000000000000;
        _StringGuts.grow(_:)(37);
        swift_bridgeObjectRelease();
        v32 = "lookup_tier1_textureSlot_texture2d_float";
        break;
      case 3:
        v73 = *a6;
        if (*a6 == -1)
          goto LABEL_26;
        ++*a6;
        v81 = 0;
        v82 = 0xE000000000000000;
        _StringGuts.grow(_:)(42);
        swift_bridgeObjectRelease();
        v31 = (void *)0xD00000000000002DLL;
        v32 = "lookup_tier1_textureSlot_texture2darray_float";
        break;
      case 5:
        v73 = *a7;
        if (*a7 == -1)
          goto LABEL_27;
        ++*a7;
        v81 = 0;
        v82 = 0xE000000000000000;
        _StringGuts.grow(_:)(39);
        swift_bridgeObjectRelease();
        v31 = (void *)0xD00000000000002ALL;
        v32 = "lookup_tier1_textureSlot_texturecube_float";
        break;
      case 7:
        v73 = *a5;
        if (*a5 == -1)
          goto LABEL_28;
        v31 = (void *)0xD000000000000028;
        ++*a5;
        v81 = 0;
        v82 = 0xE000000000000000;
        _StringGuts.grow(_:)(37);
        swift_bridgeObjectRelease();
        v32 = "lookup_tier1_textureSlot_texture3d_float";
        break;
      default:
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type MetalStitchingBackendErrors and conformance MetalStitchingBackendErrors();
        swift_allocError();
        *(_OWORD *)v38 = xmmword_245FBFF30;
        *(_BYTE *)(v38 + 16) = 6;
        swift_willThrow();
        v90 = *a1;
        outlined release of String((uint64_t)&v90);
        swift_release();
        v89 = *((_QWORD *)a1 + 3);
        v37 = &v89;
        return outlined release of [Input]((uint64_t)v37);
    }
    v39 = (unint64_t)(v32 - 32) | 0x8000000000000000;
    v40 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD5B0]), sel_init, v69, v70, v71, v72);
    v78 = v30;
    swift_bridgeObjectRetain();
    v41._countAndFlagsBits = 0x656361667275735FLL;
    v41._object = (void *)0xE800000000000000;
    String.append(_:)(v41);
    v42 = (uint64_t)v30;
    v43 = (void *)MEMORY[0x24954AF98](v30, v29);
    objc_msgSend(v40, sel_setSpecializedName_, v43);

    v44 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD5A0]), sel_init);
    objc_msgSend(v40, sel_setConstantValues_, v44);

    v82 = v39;
    swift_bridgeObjectRetain();
    v45._countAndFlagsBits = 0x656361667275735FLL;
    v45._object = (void *)0xE800000000000000;
    String.append(_:)(v45);
    v46 = (void *)MEMORY[0x24954AF98](v31, v39);
    swift_bridgeObjectRelease();
    objc_msgSend(v40, sel_setName_, v46);

    v81 = (id)__PAIR64__(HIDWORD(v31), v73);
    v47 = objc_msgSend(v40, sel_constantValues);
    if (v47)
    {
      v48 = v47;
      objc_msgSend(v47, sel_setConstantValue_type_atIndex_, &v81, 33, 100);

    }
    v81 = 0;
    v49 = objc_msgSend(v80, sel_newFunctionWithDescriptor_error_, v40, &v81);
    v50 = v81;
    if (v49)
    {
      v51 = (uint64_t)v49;
      swift_unknownObjectRetain();
      v52 = v50;
      specialized OrderedDictionary.subscript.setter(v51, v42, v29);
      v53 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD5B0]), sel_init);
      v81 = v78;
      v82 = v29;
      swift_bridgeObjectRetain();
      v54._countAndFlagsBits = 0x7274656D6F65675FLL;
      v54._object = (void *)0xE900000000000079;
      String.append(_:)(v54);
      swift_bridgeObjectRelease();
      v55 = (uint64_t)v81;
      v56 = v82;
      v57 = (void *)MEMORY[0x24954AF98](v81, v82);
      objc_msgSend(v53, sel_setSpecializedName_, v57);

      v58 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD5A0]), sel_init);
      objc_msgSend(v53, sel_setConstantValues_, v58);

      v81 = v31;
      v82 = v39;
      swift_bridgeObjectRetain();
      v59._countAndFlagsBits = 0x7274656D6F65675FLL;
      v59._object = (void *)0xE900000000000079;
      String.append(_:)(v59);
      swift_bridgeObjectRelease();
      v60 = (void *)MEMORY[0x24954AF98](v81, v82);
      swift_bridgeObjectRelease();
      objc_msgSend(v53, sel_setName_, v60);

      LODWORD(v81) = v73;
      v61 = objc_msgSend(v53, sel_constantValues);
      if (v61)
      {
        v62 = v61;
        objc_msgSend(v61, sel_setConstantValue_type_atIndex_, &v81, 33, 100);

      }
      v81 = 0;
      v63 = objc_msgSend(v80, sel_newFunctionWithDescriptor_error_, v53, &v81);
      v64 = v81;
      if (v63)
      {
        v65 = swift_unknownObjectRetain();
        specialized OrderedDictionary.subscript.setter(v65, v55, v56);
        swift_unknownObjectRelease();

        swift_unknownObjectRelease();
        v84 = *v74;
        outlined release of String((uint64_t)&v84);
        swift_release();
        v83 = *((_QWORD *)v74 + 3);
        v37 = &v83;
      }
      else
      {
        v67 = v64;
        swift_bridgeObjectRelease();
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_unknownObjectRelease();

        v86 = *v74;
        outlined release of String((uint64_t)&v86);
        swift_release();
        v85 = *((_QWORD *)v74 + 3);
        v37 = &v85;
      }
    }
    else
    {
      v66 = v81;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _convertNSErrorToError(_:)();

      swift_willThrow();
      v88 = *v74;
      outlined release of String((uint64_t)&v88);
      swift_release();
      v87 = *((_QWORD *)v74 + 3);
      v37 = &v87;
    }
  }
  return outlined release of [Input]((uint64_t)v37);
}

void specialized MetalStitchingBackend.generateFallbackTier1Getters(for:augmenting:library:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35[3];
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  _QWORD v43[4];
  char v44;
  uint64_t v45;
  _QWORD *v46;

  v4 = v3;
  type metadata accessor for MetalDataType.Struct();
  v7 = swift_dynamicCastClass();
  if (v7)
  {
    v8 = v7;
    v36 = 0;
    v37 = 0;
    swift_beginAccess();
    v9 = *(_QWORD *)(v8 + 16);
    v46 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v34 = 0;
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      v11 = (_QWORD *)(v9 + 72);
      do
      {
        v12 = *(v11 - 5);
        v13 = *(v11 - 4);
        v14 = *(v11 - 3);
        v15 = *(v11 - 2);
        v16 = *((_BYTE *)v11 - 8);
        v17 = *v11;
        v11 += 6;
        v43[0] = v12;
        v43[1] = v13;
        v43[2] = v14;
        v43[3] = v15;
        v44 = v16;
        v45 = v17;
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        specialized closure #1 in calculateOffsets(for:)((uint64_t)v43, &v34, &v46);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease();
      v18 = v46;
      v19 = v46[2];
      if (v19)
      {
LABEL_6:
        swift_bridgeObjectRetain();
        v20 = (int *)(v18 + 10);
        while (1)
        {
          v21 = *((_QWORD *)v20 - 4);
          v22 = *((_QWORD *)v20 - 3);
          v23 = *v20;
          v24 = *((_QWORD *)v20 - 1);
          v25 = *((_BYTE *)v20 - 16);
          v26 = *((_QWORD *)v20 - 5);
          *(_QWORD *)&v38 = *((_QWORD *)v20 - 6);
          *((_QWORD *)&v38 + 1) = v26;
          v39 = v21;
          v40 = v22;
          v41 = v25;
          v42 = v24;
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          specialized closure #1 in MetalStitchingBackend.generateFallbackTier1Getters(for:augmenting:library:)(&v38, v23, v8, (unsigned int *)&v37 + 1, (unsigned int *)&v37, (unsigned int *)&v36 + 1, (unsigned int *)&v36, a3);
          if (v4)
            break;
          v20 += 14;
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          if (!--v19)
          {
            swift_release();
            swift_bridgeObjectRelease();
            goto LABEL_17;
          }
        }
        swift_release();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_17;
      }
    }
    else
    {
      swift_retain();
      v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v19 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      if (v19)
        goto LABEL_6;
    }
    swift_release();
LABEL_17:
    swift_bridgeObjectRelease();
    return;
  }
  if (one-time initialization token for logger != -1)
    swift_once();
  v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)logger);
  swift_retain();
  v28 = Logger.logObject.getter();
  v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v35[0] = v31;
    *(_DWORD *)v30 = 136315138;
    v32 = *(_QWORD *)(a1 + 24);
    v33 = *(_QWORD *)(a1 + 32);
    swift_bridgeObjectRetain();
    v46 = (_QWORD *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_245E46000, v28, v29, "Can not generate getters for a non-struct type %s", v30, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24954C33C](v31, -1, -1);
    MEMORY[0x24954C33C](v30, -1, -1);

  }
  else
  {

    swift_release();
  }
}

unint64_t lazy protocol witness table accessor for type MetalStitchingBackendErrors and conformance MetalStitchingBackendErrors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MetalStitchingBackendErrors and conformance MetalStitchingBackendErrors;
  if (!lazy protocol witness table cache variable for type MetalStitchingBackendErrors and conformance MetalStitchingBackendErrors)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for MetalStitchingBackendErrors, &type metadata for MetalStitchingBackendErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MetalStitchingBackendErrors and conformance MetalStitchingBackendErrors);
  }
  return result;
}

uint64_t sub_245ED2B8C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined retain of ShaderGraphNode?(uint64_t a1)
{
  outlined copy of ShaderGraphNode?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

unint64_t lazy protocol witness table accessor for type GraphCompilerErrors and conformance GraphCompilerErrors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphCompilerErrors and conformance GraphCompilerErrors;
  if (!lazy protocol witness table cache variable for type GraphCompilerErrors and conformance GraphCompilerErrors)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for GraphCompilerErrors, &type metadata for GraphCompilerErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphCompilerErrors and conformance GraphCompilerErrors);
  }
  return result;
}

uint64_t sub_245ED2C28()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t OrderedSet._UnstableInternals.base.getter(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t OrderedSet._UnstableInternals.base.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  swift_release();
  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*OrderedSet._UnstableInternals.base.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t OrderedSet.__unstable.getter(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t key path getter for OrderedSet.__unstable : <A>OrderedSet<A>@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = OrderedSet._UnstableInternals.init(_:)(*a1, a1[1]);
  a2[1] = v3;
  swift_retain();
  return swift_retain();
}

uint64_t key path setter for OrderedSet.__unstable : <A>OrderedSet<A>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v3 = *a1;
  v4 = a1[1];
  OrderedSet._UnstableInternals.init(_:)(*a2, a2[1]);
  swift_retain();
  swift_retain();
  v5 = OrderedSet.init()();
  v7 = v6;
  swift_release();
  swift_release();
  *a2 = v5;
  a2[1] = v7;
  v9[0] = v3;
  v9[1] = v4;
  $defer #1 <A>() in OrderedSet.__unstable.modify(a2, v9);
  swift_release();
  return swift_release();
}

void (*OrderedSet.__unstable.modify(_QWORD *a1, uint64_t a2))(_QWORD **a1)
{
  uint64_t *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  v6 = *v2;
  v7 = v2[1];
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v5[2] = v2;
  v5[3] = v8;
  v5[4] = v9;
  *v5 = v6;
  v5[1] = v7;
  *v2 = OrderedSet.init()();
  v2[1] = v10;
  return OrderedSet.__unstable.modify;
}

void OrderedSet.__unstable.modify(_QWORD **a1)
{
  void *v1;

  v1 = *a1;
  $defer #1 <A>() in OrderedSet.__unstable.modify((_QWORD *)(*a1)[2], *a1);
  swift_release();
  swift_release();
  free(v1);
}

uint64_t $defer #1 <A>() in OrderedSet.__unstable.modify(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  swift_retain();
  swift_retain();
  swift_release();
  return swift_release();
}

uint64_t OrderedSet.__unstable.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  swift_retain();
  swift_retain();
  v5 = OrderedSet.init()();
  v7 = v6;
  swift_release();
  swift_release();
  *v2 = v5;
  v2[1] = v7;
  v9[0] = a1;
  v9[1] = a2;
  $defer #1 <A>() in OrderedSet.__unstable.modify(v2, v9);
  swift_release_n();
  return swift_release_n();
}

uint64_t sub_245ED2FB0()
{
  return 16;
}

__n128 sub_245ED2FBC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata instantiation function for OrderedSet._UnstableInternals()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t destroy for OrderedSet._UnstableInternals()
{
  swift_release();
  return swift_release();
}

_QWORD *initializeBufferWithCopyOfBuffer for OrderedSet._UnstableInternals(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for OrderedSet._UnstableInternals(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for OrderedSet._UnstableInternals(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for OrderedSet._UnstableInternals(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrderedSet._UnstableInternals);
}

Swift::Void __swiftcall OrderedDictionary.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for OrderedSet(0, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 32), v2);
  OrderedSet.removeAll(keepingCapacity:)(keepingCapacity);
  type metadata accessor for ContiguousArray();
  ContiguousArray.removeAll(keepingCapacity:)(keepingCapacity);
}

uint64_t OrderedDictionary.remove(at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for OrderedSet(0, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 32), a4);
  OrderedSet.remove(at:)(a3, v5);
  type metadata accessor for ContiguousArray();
  return ContiguousArray.remove(at:)();
}

uint64_t OrderedDictionary.removeSubrange(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for OrderedSet(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 32), a4);
  OrderedSet.removeSubrange(_:)(a1, a2, v6);
  v7 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A68], v7);
  return RangeReplaceableCollection.removeSubrange(_:)();
}

uint64_t OrderedDictionary.removeSubrange<A>(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v3 = type metadata accessor for OrderedDictionary.Elements(0, a2[2], a2[3], a2[4]);
  MEMORY[0x24954C264](&protocol conformance descriptor for OrderedDictionary<A, B>.Elements, v3);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  return OrderedDictionary.removeSubrange(_:)(v6, v7, (uint64_t)a2, v4);
}

uint64_t OrderedDictionary.removeLast()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A60], v6);
  result = Collection.isEmpty.getter();
  if ((result & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    result = ContiguousArray.count.getter();
    if (!__OFSUB__(result, 1))
      return OrderedDictionary.remove(at:)(a1, a2, result - 1, a3);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall OrderedDictionary.removeLast(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = v1;
    if (ContiguousArray.count.getter() >= a1)
    {
      type metadata accessor for OrderedSet(0, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 32), v4);
      OrderedSet.removeLast(_:)(a1);
      v5 = type metadata accessor for ContiguousArray();
      MEMORY[0x24954C264](MEMORY[0x24BEE2A38], v5);
      MEMORY[0x24954C264](MEMORY[0x24BEE2A68], v5);
      RangeReplaceableCollection<>.removeLast(_:)();
      return;
    }
  }
  __break(1u);
}

uint64_t OrderedDictionary.removeFirst()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A60], v6);
  result = Collection.isEmpty.getter();
  if ((result & 1) == 0)
    return OrderedDictionary.remove(at:)(a1, a2, 0, a3);
  __break(1u);
  return result;
}

Swift::Void __swiftcall OrderedDictionary.removeFirst(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = v1;
    if (ContiguousArray.count.getter() >= a1)
    {
      type metadata accessor for OrderedSet(0, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 32), v4);
      OrderedSet.removeFirst(_:)(a1);
      v5 = type metadata accessor for ContiguousArray();
      MEMORY[0x24954C264](MEMORY[0x24BEE2A68], v5);
      RangeReplaceableCollection.removeFirst(_:)(a1);
      return;
    }
  }
  __break(1u);
}

_QWORD *OrderedDictionary.removeAll(where:)(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14[2];
  uint64_t v15;

  v8 = a3[3];
  type metadata accessor for ContiguousArray();
  ContiguousArray._makeMutableAndUnique()();
  v9 = *(_QWORD *)(v3 + 16);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80);
  v12 = v9 + ((v11 + 32) & ~v11);
  v14[0] = v12;
  v14[1] = v10;
  closure #1 in OrderedDictionary.removeAll(where:)(v14, a1, a2, a3[2], v8, a3[4], &v15);
  if (v4)
    return $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v14, v12, v10);
  $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v14, v12, v10);
  v14[0] = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialRangeFrom<Int>);
  lazy protocol witness table accessor for type PartialRangeFrom<Int> and conformance PartialRangeFrom<A>();
  return (_QWORD *)OrderedDictionary.removeSubrange<A>(_:)((uint64_t)v14, a3);
}

Swift::Void __swiftcall OrderedDictionary.reserveCapacity(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for OrderedSet(0, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 32), v2);
  OrderedSet.reserveCapacity(_:)(a1);
  type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(a1);
}

uint64_t closure #1 in OrderedDictionary.removeAll(where:)@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(char *, char *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v12 = *a1;
  v13 = a1[1];
  v14 = type metadata accessor for OrderedSet(0, a4, a6, a3);
  result = OrderedSet._halfStablePartition<A>(values:by:)(v12, v13, a2, a3, v14, a5);
  if (!v7)
    *a7 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PartialRangeFrom<Int> and conformance PartialRangeFrom<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PartialRangeFrom<Int> and conformance PartialRangeFrom<A>;
  if (!lazy protocol witness table cache variable for type PartialRangeFrom<Int> and conformance PartialRangeFrom<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PartialRangeFrom<Int>);
    result = MEMORY[0x24954C264](MEMORY[0x24BEE2C50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PartialRangeFrom<Int> and conformance PartialRangeFrom<A>);
  }
  return result;
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *i;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _OWORD v58[2];
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  __int128 v66;
  char v67;
  uint64_t v68;

  v3 = v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return MEMORY[0x24BEE4AF8];
  v6 = swift_bridgeObjectRetain() + 40;
  v47 = v4 - 1;
  for (i = (_QWORD *)MEMORY[0x24BEE4AF8]; ; i = v9)
  {
    v8 = *(_QWORD *)(v6 - 8);
    v7 = *(_QWORD *)v6;
    v9 = *(_QWORD **)(v6 + 8);
    v10 = *(_BYTE *)(v6 + 32);
    v63 = v8;
    v64 = v7;
    v65 = v9;
    v66 = *(_OWORD *)(v6 + 16);
    v67 = v10;
    v11 = a2[9];
    v57 = a2[8];
    v58[0] = v11;
    *(_OWORD *)((char *)v58 + 9) = *(__int128 *)((char *)a2 + 153);
    v12 = a2[5];
    v53 = a2[4];
    v54 = v12;
    v13 = a2[7];
    v55 = a2[6];
    v56 = v13;
    v14 = a2[1];
    v49 = *a2;
    v50 = v14;
    v15 = a2[3];
    v51 = a2[2];
    v52 = v15;
    outlined copy of NodePersonality(v8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined retain of Graph((uint64_t)&v49);
    ShaderGraphNode.out.getter((uint64_t)&v59);
    if (v3)
    {
      outlined release of Graph((uint64_t)&v49);
      outlined consume of NodePersonality(v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (unint64_t)v9;
    }
    v46 = v6;
    v16 = v50;
    result = specialized OrderedSet._find(_:)(v59, v49, *((_QWORD **)&v49 + 1));
    if ((v18 & 1) != 0)
    {
      v26 = MEMORY[0x24BEE4AF8];
      goto LABEL_11;
    }
    if ((result & 0x8000000000000000) != 0)
      break;
    if (result >= *(_QWORD *)(v16 + 16))
      goto LABEL_25;
    v68 = 0;
    v19 = (_QWORD *)(v16 + 48 * result);
    v20 = v19[4];
    v21 = v19[5];
    v22 = v19[6];
    v62 = v60;
    swift_retain();
    swift_retain();
    swift_retain();
    outlined retain of String((uint64_t)&v62);
    swift_retain();
    specialized OrderedDictionary.subscript.getter((uint64_t)&v59, v20, v21, v22);
    v24 = v23;
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined release of String((uint64_t)&v62);
    if (v24)
    {
      swift_retain();
      outlined retain of String((uint64_t)&v62);
      v25 = v68;
      v26 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_n(v24, &v59);
      v3 = v25;
      swift_release();
      outlined release of String((uint64_t)&v62);
      swift_release();
      swift_release();
    }
    else
    {
      v26 = MEMORY[0x24BEE4AF8];
      v3 = v68;
    }
LABEL_11:
    swift_release();
    v61 = v60;
    outlined release of String((uint64_t)&v61);
    outlined release of Graph((uint64_t)&v49);
    if (*(_QWORD *)(v26 + 16))
    {
      v68 = v3;
      v27 = *(_QWORD *)(v26 + 40);
      v28 = *(_QWORD *)(v26 + 56);
      v44 = *(_QWORD *)(v26 + 48);
      v45 = *(_QWORD *)(v26 + 32);
      v43 = *(_QWORD *)(v26 + 64);
      v42 = *(_BYTE *)(v26 + 72);
      v29 = *(_QWORD *)(v26 + 96);
      v40 = *(_QWORD *)(v26 + 88);
      v41 = *(_QWORD *)(v26 + 80);
      v30 = *(_QWORD *)(v26 + 112);
      v38 = *(_QWORD *)(v26 + 120);
      v39 = *(_QWORD *)(v26 + 104);
      v37 = *(_BYTE *)(v26 + 128);
      v36 = *(_QWORD *)(v26 + 136);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v9 = i;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, i[2] + 1, 1, i);
      v32 = v9[2];
      v31 = v9[3];
      if (v32 >= v31 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v9);
      v9[2] = v32 + 1;
      v33 = &v9[14 * v32];
      v33[4] = v45;
      v33[5] = v27;
      v33[6] = v44;
      v33[7] = v28;
      v33[8] = v43;
      *((_BYTE *)v33 + 72) = v42;
      v33[10] = v41;
      v33[11] = v40;
      v33[12] = v29;
      v33[13] = v39;
      v33[14] = v30;
      v33[15] = v38;
      *((_BYTE *)v33 + 128) = v37;
      v33[17] = v36;
      v3 = v68;
      v35 = v46;
      v34 = v47;
      if (!v47)
      {
LABEL_22:
        swift_bridgeObjectRelease();
        return (unint64_t)v9;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v9 = i;
      v35 = v46;
      v34 = v47;
      if (!v47)
        goto LABEL_22;
    }
    v6 = v35 + 48;
    v47 = v34 - 1;
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;

  result = MEMORY[0x24BEE4AF8];
  v9 = MEMORY[0x24BEE4AF8];
  v4 = *(_QWORD *)(a3 + 16);
  if (v4)
  {
    if (*(_QWORD *)(a2 + 16) >= v4)
      v6 = *(_QWORD *)(a3 + 16);
    else
      v6 = *(_QWORD *)(a2 + 16);
    swift_retain();
    swift_retain();
    result = swift_retain();
    v7 = (_BYTE *)(a3 + 40);
    while (v6)
    {
      if (*v7 == 1)
      {
        v8 = outlined copy of MetalLibrary(*((_QWORD *)v7 - 1), 1);
        MEMORY[0x24954B1A8](v8);
        if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        result = specialized Array._endMutation()();
      }
      --v6;
      v7 += 16;
      if (!--v4)
      {
        swift_release();
        swift_release();
        swift_release();
        return v9;
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  uint64_t v38;

  v3 = *(_QWORD *)(a3 + 16);
  if (v3)
  {
    v5 = a2;
    v6 = *(_QWORD *)(a2 + 16);
    swift_retain();
    swift_retain();
    result = swift_retain();
    v8 = 0;
    v26 = a3 + 80;
    v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v25 = v5;
    while (v6)
    {
      v10 = *(_QWORD *)(v26 + v8 - 48);
      v11 = *(_QWORD *)(v26 + v8 - 24);
      v12 = *(_QWORD *)(v26 + v8 - 16);
      v13 = *(_QWORD *)(v26 + v8);
      if (*(_QWORD *)(v26 + v8 - 40))
      {
        v31 = v6;
        v14 = *(_QWORD *)(v5 + v8 + 40);
        v33 = *(_QWORD *)(v5 + v8 + 32);
        v34 = v3;
        v38 = *(_QWORD *)(v26 + v8 - 40);
        v15 = *(_QWORD *)(v5 + v8 + 56);
        v30 = *(_QWORD *)(v5 + v8 + 48);
        v29 = *(_QWORD *)(v5 + v8 + 64);
        v28 = *(_BYTE *)(v5 + v8 + 72);
        v27 = *(_QWORD *)(v5 + v8 + 80);
        v36 = v9;
        v16 = *(_QWORD *)(v26 + v8 - 8);
        v17 = *(_QWORD *)(v26 + v8 - 32);
        swift_retain();
        swift_bridgeObjectRetain();
        outlined copy of Output?(v10, v38);
        swift_retain();
        swift_bridgeObjectRetain();
        outlined copy of Output?(v10, v38);
        swift_bridgeObjectRelease();
        v32 = v14;
        swift_release();
        v35 = v17;
        v37 = v16;
        v18 = v36;
        outlined consume of Input?(v10, v38);
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
          v18 = (_QWORD *)result;
        }
        v19 = v18;
        v20 = v18[2];
        v21 = v19;
        v22 = v19[3];
        v23 = v13;
        v3 = v34;
        if (v20 >= v22 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v20 + 1, 1, v21);
          v23 = v13;
          v21 = (_QWORD *)result;
        }
        v21[2] = v20 + 1;
        v24 = &v21[14 * v20];
        v9 = v21;
        v24[4] = v10;
        v24[5] = v38;
        v24[6] = v35;
        v24[7] = v11;
        v24[8] = v12;
        *((_BYTE *)v24 + 72) = v37 & 1;
        v24[10] = v23;
        v24[11] = v33;
        v6 = v31;
        v24[12] = v32;
        v24[13] = v30;
        v24[14] = v15;
        v24[15] = v29;
        *((_BYTE *)v24 + 128) = v28;
        v24[17] = v27;
        v5 = v25;
      }
      else
      {
        result = outlined consume of Input?(*(_QWORD *)(v26 + v8 - 48), 0);
      }
      --v6;
      v8 += 56;
      if (!--v3)
      {
        swift_release();
        swift_release();
        swift_release();
        return (uint64_t)v9;
      }
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph09RESurfaceD12FunctionNodeCG_AF0gH2IDVs5NeverOTg504_s11d103Graph0B8CompilerV08functionB033_137984365F15B3FD94CB2D26CA095C9FLL3forAA05MetalA7ProgramCAA0B0V_tKFAA14gH73IDVAA09RESurfaceaoP0Ccfu_33_56b5a88cd278ec4ee448dc3b0c4fd19cAnLTf3nnnpk_nTf1cn_n(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v3 = MEMORY[0x24BEE4AF8];
    if (!v2)
      return v3;
    v10 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v5 = 0;
    v3 = v10;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v6 = MEMORY[0x24954B748](v5, a1);
      }
      else
      {
        v6 = *(_QWORD *)(a1 + 8 * v5 + 32);
        swift_retain();
      }
      swift_beginAccess();
      v7 = *(_QWORD *)(v6 + 88);
      swift_release();
      v9 = *(_QWORD *)(v10 + 16);
      v8 = *(_QWORD *)(v10 + 24);
      if (v9 >= v8 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      ++v5;
      *(_QWORD *)(v10 + 16) = v9 + 1;
      *(_QWORD *)(v10 + 8 * v9 + 32) = v7;
      if (v2 == v5)
        return v3;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

unint64_t specialized Sequence.forEach(_:)(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD *);
  __int128 v20;
  Swift::UInt v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  char v35;
  char v36;
  uint64_t v38;
  unint64_t result;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  Swift::UInt v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  Swift::UInt v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  _QWORD v89[5];
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD v101[6];
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  char v109[8];
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  char v114[8];
  uint64_t v115;
  _QWORD *v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  Swift::UInt v120;
  _OWORD v121[2];
  uint64_t v122;

  v4 = *a1;
  v3 = (_QWORD *)a1[1];
  v5 = a1[2];
  v6 = (_QWORD *)a1[3];
  v115 = a1[4];
  v116 = v6;
  v99 = v115;
  v100 = v6;
  swift_retain();
  swift_retain();
  swift_retain();
  outlined retain of [Input]((uint64_t)&v116);
  outlined retain of [Input]((uint64_t)&v115);
  v67 = v5;
  if (!v6[2])
  {
LABEL_73:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  v68 = v3;
  v69 = v3 + 4;
  v65 = v4 + 32;
  v66 = (_QWORD *)(v4 + 16);
  v64 = v5 + 32;
  v60 = v3 + 7;
  v70 = v4;
  while (1)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v7 = v6[2];
      if (!v7)
        goto LABEL_72;
    }
    else
    {
      v6 = specialized _ArrayBuffer._consumeAndCreateNew()(v6);
      v7 = v6[2];
      if (!v7)
      {
LABEL_72:
        __break(1u);
        goto LABEL_73;
      }
    }
    v8 = v7 - 1;
    v9 = &v6[7 * v8];
    v10 = *((_OWORD *)v9 + 2);
    v11 = *((_OWORD *)v9 + 3);
    v12 = *((_OWORD *)v9 + 4);
    v120 = v9[10];
    v118 = v11;
    v119 = v12;
    v117 = v10;
    v13 = v9[4];
    v14 = v9[6];
    v77 = v9[7];
    v78 = v9[5];
    v15 = v9[8];
    v16 = *((_BYTE *)v9 + 72);
    v17 = v9[10];
    v6[2] = v8;
    v100 = v6;
    v75 = v14;
    v76 = v13;
    v74 = v15;
    v73 = v16;
    v72 = v17;
    if (*(_QWORD *)(v99 + 16))
    {
      v87 = v99;
      Hasher.init(_seed:)();
      v122 = v117;
      Hasher._combine(_:)(v117);
      v18 = *((_QWORD *)&v117 + 1);
      v19 = *(void (**)(_QWORD *))(**((_QWORD **)&v117 + 1) + 120);
      swift_retain();
      v19(v89);
      swift_release();
      v20 = v118;
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v21 = v119;
      v82 = BYTE8(v119);
      if (BYTE8(v119) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v21);
      }
      v81 = v120;
      Hasher._combine(_:)(v120);
      v22 = Hasher._finalize()();
      v23 = v87;
      v24 = -1 << *(_BYTE *)(v87 + 32);
      v25 = v22 & ~v24;
      if (((*(_QWORD *)(v87 + 56 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) != 0)
      {
        v71 = v21;
        v85 = v18;
        v79 = v6;
        v26 = ~v24;
        while (1)
        {
          v27 = *(_QWORD *)(v23 + 48) + 56 * v25;
          if (*(_QWORD *)v27 == v122)
          {
            v28 = *(_QWORD *)(v27 + 16);
            v30 = *(_QWORD *)(v27 + 24);
            v29 = *(_QWORD *)(v27 + 32);
            v31 = *(_BYTE *)(v27 + 40);
            v32 = *(_QWORD *)(v27 + 48);
            v33 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v27 + 8) + 128);
            swift_retain();
            swift_bridgeObjectRetain();
            if ((v33(v85) & 1) != 0)
            {
              if (v28 == (_QWORD)v20 && v30 == *((_QWORD *)&v20 + 1))
              {
                swift_bridgeObjectRelease();
                swift_release();
                v23 = v87;
                if ((v31 & 1) != 0)
                {
LABEL_24:
                  v36 = v82;
                  if (v32 != v81)
                    v36 = 0;
                  if ((v36 & 1) != 0)
                  {
LABEL_35:
                    swift_bridgeObjectRelease();
                    swift_release();
                    v4 = v70;
                    v3 = v68;
                    v6 = v79;
                    goto LABEL_4;
                  }
                  goto LABEL_15;
                }
                goto LABEL_29;
              }
              v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_release();
              v23 = v87;
              if ((v35 & 1) != 0)
              {
                if ((v31 & 1) != 0)
                  goto LABEL_24;
LABEL_29:
                if ((v82 & 1) == 0 && v29 == v71 && v32 == v81)
                  goto LABEL_35;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_release();
              v23 = v87;
            }
          }
LABEL_15:
          v25 = (v25 + 1) & v26;
          if (((*(_QWORD *)(v87 + 56 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
          {
            v4 = v70;
            v3 = v68;
            v6 = v79;
            goto LABEL_38;
          }
        }
      }
      v3 = v68;
    }
LABEL_38:
    v121[0] = v118;
    swift_retain();
    outlined retain of String((uint64_t)v121);
    specialized Set._Variant.insert(_:)((uint64_t)v89, (Swift::Int)&v117);
    swift_release();
    swift_bridgeObjectRelease();
    v38 = v3[2];
    if (v4)
      break;
    if (!v38)
      goto LABEL_3;
    if (*v69 == (_QWORD)v117)
    {
      result = 0;
      v41 = v67;
    }
    else
    {
      if (v38 == 1)
        goto LABEL_3;
      if (v3[5] == (_QWORD)v117)
      {
        result = 1;
        v41 = v67;
      }
      else
      {
        if (v38 == 2)
          goto LABEL_3;
        if (v3[6] != (_QWORD)v117)
        {
          v42 = 0;
          while (v38 - 3 != v42)
          {
            v43 = v60[v42++];
            if (v43 == (_QWORD)v117)
            {
              result = v42 + 2;
              v41 = v67;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_76;
              goto LABEL_55;
            }
          }
LABEL_3:
          swift_release();
          outlined release of String((uint64_t)v121);
          goto LABEL_4;
        }
        result = 2;
        v41 = v67;
      }
    }
LABEL_55:
    if (result >= *(_QWORD *)(v41 + 16))
      goto LABEL_77;
    v80 = v6;
    v44 = (_QWORD *)(v64 + 48 * result);
    v45 = v44[3];
    v46 = v44[4];
    v47 = v44[5];
    v48 = *(_QWORD *)(v46 + 16);
    if (v45)
    {
      swift_retain();
      outlined retain of String((uint64_t)v121);
      swift_retain();
      swift_retain();
      swift_retain();
      result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v117, v46 + 32, v48, (_QWORD *)(v45 + 16), v45 + 32);
      if ((v49 & 1) != 0)
        goto LABEL_65;
    }
    else
    {
      swift_retain();
      outlined retain of String((uint64_t)v121);
      swift_retain();
      swift_retain();
      result = specialized Collection<>.firstIndex(of:)(&v117, v46 + 32, v48);
      if ((v50 & 1) != 0)
      {
LABEL_65:
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        outlined release of String((uint64_t)v121);
        swift_release();
        outlined release of String((uint64_t)v121);
LABEL_67:
        v6 = v80;
        v4 = v70;
        goto LABEL_4;
      }
    }
    if ((result & 0x8000000000000000) != 0)
      goto LABEL_78;
    if (result >= *(_QWORD *)(v47 + 16))
      goto LABEL_79;
    v51 = (_QWORD *)(v47 + 56 * result);
    v53 = v51[4];
    v52 = v51[5];
    v54 = v51[6];
    v55 = v51[8];
    v56 = v51[9];
    v57 = v51[10];
    v122 = v51[7];
    v86 = v55;
    v88 = v56;
    outlined copy of Output?(v53, v52);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined release of String((uint64_t)v121);
    if (!v52)
    {
      swift_release();
      outlined release of String((uint64_t)v121);
      goto LABEL_67;
    }
    v84 = v57;
    v4 = v70;
    specialized OrderedDictionary.subscript.getter(v53, v70, v3, v67, v101);
    outlined init with take of MetalFunctionNode?((uint64_t)v101, (uint64_t)&v102, &demangling cache variable for type metadata for Graph.Adjacent?);
    if (*((_QWORD *)&v102 + 1))
    {
      v110 = v102;
      v107 = v104;
      v83 = v103;
      v58 = v105;
      outlined init with take of MetalFunctionNode?((uint64_t)&v107, (uint64_t)v109, &demangling cache variable for type metadata for _HashTable.Storage?);
      v59 = *((_QWORD *)&v107 + 1);
      v108 = *((_QWORD *)&v107 + 1);
      v106 = v58;
      v112 = v110;
      outlined init with take of MetalFunctionNode?((uint64_t)&v112, (uint64_t)v114, &demangling cache variable for type metadata for _HashTable.Storage?);
      swift_retain();
      outlined retain of String((uint64_t)v121);
      outlined retain of _HashTable.Storage?((uint64_t)v109);
      outlined retain of _HashTable.Storage?((uint64_t)&v108);
      outlined retain of _HashTable.Storage?((uint64_t)&v106);
      outlined release of _HashTable.Storage?((uint64_t)v114);
      v113 = *((_QWORD *)&v112 + 1);
      outlined release of _HashTable.Storage?((uint64_t)&v113);
      v111 = v83;
      outlined release of _HashTable.Storage?((uint64_t)&v111);
      outlined release of _HashTable.Storage?((uint64_t)v109);
      outlined release of _HashTable.Storage?((uint64_t)&v108);
      outlined release of _HashTable.Storage?((uint64_t)&v106);
      outlined release of _HashTable.Storage?((uint64_t)&v106);
      outlined release of _HashTable.Storage?((uint64_t)v109);
    }
    else
    {
      swift_retain();
      outlined retain of String((uint64_t)v121);
      v59 = MEMORY[0x24BEE4AF8];
    }
    specialized Array.append<A>(contentsOf:)(v59);
    swift_release();
    outlined release of String((uint64_t)v121);
    v89[0] = v53;
    v89[1] = v52;
    v89[2] = v54;
    v89[3] = v122;
    v89[4] = v86;
    v90 = v88 & 1;
    v91 = v84;
    v92 = v76;
    v93 = v78;
    v94 = v75;
    v95 = v77;
    v96 = v74;
    v97 = v73;
    v98 = v72;
    closure #2 in GraphCompiler.extract(node:from:withName:)((uint64_t)v89, a2, a3);
    if (v63)
    {
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    v63 = 0;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    v6 = v100;
    v3 = v68;
LABEL_4:
    if (!v6[2])
      goto LABEL_73;
  }
  result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v117, (uint64_t)v69, v38, v66, v65);
  if ((v40 & 1) != 0)
    goto LABEL_3;
  v41 = v67;
  if ((result & 0x8000000000000000) == 0)
    goto LABEL_55;
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
  return result;
}

void *GraphCompiler.init(material:)@<X0>(void *__src@<X0>, void *a2@<X8>)
{
  return memcpy(a2, __src, 0x138uLL);
}

char *GraphCompiler.compile(for:options:)(void *a1, uint64_t a2)
{
  const void *v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  NSObject *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  os_signpost_id_t v40;
  void (**v41)(char *, char *, uint64_t);
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  NSObject *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  os_signpost_id_t v52;
  uint64_t v53;
  void (**v54)(char *, char *, uint64_t);
  CGColorSpace *v55;
  CGColorSpaceRef v56;
  const __CFString *v57;
  CGColorSpaceRef v58;
  CGColorSpace *v59;
  CGColorSpace *v60;
  void *v61;
  void *v62;
  void *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 *v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  id v75;
  id v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  _QWORD *v80;
  id v81;
  void *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  _QWORD *v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v126;
  unint64_t v127;
  NSObject *v128;
  os_signpost_type_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint8_t *v140;
  os_signpost_id_t v141;
  os_signpost_type_t v142;
  char *v143;
  void (*v144)(char *, char *, uint64_t);
  const char *v145;
  uint64_t v146;
  Swift::Int v147;
  uint64_t v148;
  unint64_t v149;
  NSObject *v150;
  int v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  const char *v155;
  os_signpost_id_t v156;
  uint64_t v157;
  void (*v158)(char *, char *, uint64_t);
  uint64_t v159;
  void *v160;
  char *v161;
  NSObject *v162;
  char *v163;
  char v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  NSObject *v168;
  const char *v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint8_t *v173;
  os_signpost_id_t v174;
  void (*v175)(char *, char *, uint64_t);
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  char *v181;
  char *v182;
  NSObject *v183;
  uint8_t *v184;
  os_signpost_id_t v185;
  uint64_t v186;
  uint8_t *v187;
  void (*v188)(char *, char *, uint64_t);
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  NSObject *v196;
  char *v197;
  os_signpost_type_t v198;
  char *v199;
  const char *v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint8_t *v204;
  os_signpost_id_t v205;
  uint64_t v206;
  os_unfair_lock_s *v207;
  const char *v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  void *v216;
  char *v217;
  NSObject *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  char *v223;
  os_signpost_id_t v224;
  void (*v225)(char *, char *, uint64_t);
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  char *v238;
  char *v239;
  char *v240;
  char *v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  const char *v245;
  char *v246;
  void *v247;
  uint64_t v248;
  unint64_t v249;
  void (*v250)(char *, char *, uint64_t);
  void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  unint64_t v256;
  uint64_t v257;
  void (**v258)(char *, char *, uint64_t);
  uint64_t v259;
  char *v260;
  uint64_t v261;
  _QWORD v262[8];
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  _OWORD v272[2];
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  _OWORD v282[2];
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  _BYTE v286[312];
  _BYTE v287[48];
  __int128 v288;
  _OWORD v289[2];
  _OWORD v290[9];
  _OWORD v291[2];
  __int128 v292[9];
  _OWORD v293[14];
  char *v294;

  v3 = v2;
  v257 = a2;
  v247 = a1;
  v4 = type metadata accessor for OSSignpostError();
  v243 = *(_QWORD *)(v4 - 8);
  v244 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v236 = (char *)&v226 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v239 = (char *)&v226 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v242 = (char *)&v226 - v9;
  v10 = type metadata accessor for OSSignpostID();
  v258 = *(void (***)(char *, char *, uint64_t))(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v237 = (char *)&v226 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v238 = (char *)&v226 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v240 = (char *)&v226 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v241 = (char *)&v226 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v245 = (char *)&v226 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v246 = (char *)&v226 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v255 = (char *)&v226 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v294 = (char *)&v226 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v226 - v27;
  v29 = type metadata accessor for OSSignposter();
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v32 = (char *)&v226 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v248 = (uint64_t)v3;
  memcpy(v286, v3, sizeof(v286));
  v33 = *(_QWORD *)v286;
  v34 = *(_QWORD *)&v286[8];
  swift_bridgeObjectRetain();
  OSSignposter.init(subsystem:category:)();
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  swift_bridgeObjectRetain_n();
  v260 = v32;
  v35 = OSSignposter.logHandle.getter();
  LODWORD(v250) = static os_signpost_type_t.event.getter();
  v36 = OS_os_log.signpostsEnabled.getter();
  v259 = v10;
  v252 = v30;
  v253 = v29;
  v254 = v33;
  if ((v36 & 1) != 0)
  {
    v258[2](v294, v28, v10);
    v37 = swift_slowAlloc();
    v38 = swift_slowAlloc();
    *(_QWORD *)&v273 = v38;
    *(_DWORD *)v37 = 141558275;
    *(_QWORD *)&v263 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v37 + 12) = 2081;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v263 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, (uint64_t *)&v273);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    v39 = v294;
    v40 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_245E46000, v35, (os_signpost_type_t)v250, v40, "begin", "%{private,mask.hash}s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24954C33C](v38, -1, -1);
    MEMORY[0x24954C33C](v37, -1, -1);

    v41 = v258;
    v42 = v258[1];
    v43 = v28;
    v44 = v259;
    ((void (*)(char *, uint64_t))v42)(v43, v259);
    ((void (*)(char *, uint64_t))v42)(v39, v44);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    v41 = v258;
    v45 = v10;
    v42 = v258[1];
    ((void (*)(char *, uint64_t))v42)(v28, v45);
    v39 = v294;
  }
  v283 = 0;
  v284 = MEMORY[0x24BEE4AF8];
  v285 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  OSSignposter.logHandle.getter();
  v46 = v255;
  OSSignpostID.init(log:)();
  swift_bridgeObjectRetain_n();
  v47 = OSSignposter.logHandle.getter();
  LODWORD(v249) = static os_signpost_type_t.begin.getter();
  v48 = OS_os_log.signpostsEnabled.getter();
  v256 = v34;
  v250 = v42;
  if ((v48 & 1) != 0)
  {
    v258 = (void (**)(char *, char *, uint64_t))v41[2];
    v49 = v259;
    ((void (*)(char *, char *, uint64_t))v258)(v39, v46, v259);
    v50 = swift_slowAlloc();
    v51 = swift_slowAlloc();
    *(_QWORD *)&v273 = v51;
    *(_DWORD *)v50 = 141558275;
    *(_QWORD *)&v263 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v50 + 12) = 2081;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v263 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v254, v34, (uint64_t *)&v273);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    v52 = OSSignpostID.rawValue.getter();
    v53 = v49;
    v39 = v294;
    v42 = v250;
    _os_signpost_emit_with_name_impl(&dword_245E46000, v47, (os_signpost_type_t)v249, v52, "transform", "%{private,mask.hash}s", (uint8_t *)v50, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24954C33C](v51, -1, -1);
    MEMORY[0x24954C33C](v50, -1, -1);

    ((void (*)(char *, uint64_t))v42)(v39, v53);
    v54 = v258;
  }
  else
  {
    swift_bridgeObjectRelease_n();

    v54 = (void (**)(char *, char *, uint64_t))v41[2];
    v53 = v259;
  }
  v258 = v54;
  ((void (*)(char *, char *, uint64_t))v54)(v39, v46, v53);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  v255 = (char *)OSSignpostIntervalState.init(id:isOpen:)();
  ((void (*)(char *, uint64_t))v42)(v46, v53);
  v290[8] = *(_OWORD *)&v286[240];
  v291[0] = *(_OWORD *)&v286[256];
  *(_OWORD *)((char *)v291 + 9) = *(_OWORD *)&v286[265];
  v290[4] = *(_OWORD *)&v286[176];
  v290[5] = *(_OWORD *)&v286[192];
  v290[6] = *(_OWORD *)&v286[208];
  v290[7] = *(_OWORD *)&v286[224];
  v290[0] = *(_OWORD *)&v286[112];
  v290[1] = *(_OWORD *)&v286[128];
  v290[2] = *(_OWORD *)&v286[144];
  v290[3] = *(_OWORD *)&v286[160];
  v280 = *(_OWORD *)&v286[224];
  v281 = *(_OWORD *)&v286[240];
  v282[0] = *(_OWORD *)&v286[256];
  *(_OWORD *)((char *)v282 + 9) = *(_OWORD *)&v286[265];
  v277 = *(_OWORD *)&v286[176];
  v278 = *(_OWORD *)&v286[192];
  v279 = *(_OWORD *)&v286[208];
  v273 = *(_OWORD *)&v286[112];
  v274 = *(_OWORD *)&v286[128];
  v275 = *(_OWORD *)&v286[144];
  v276 = *(_OWORD *)&v286[160];
  v55 = *(CGColorSpace **)(v257 + OBJC_IVAR___SGREMaterialCompilationOptions_workingColorSpace);
  if (v55)
  {
    outlined retain of Graph((uint64_t)v290);
    v56 = v55;
  }
  else
  {
    v57 = (const __CFString *)*MEMORY[0x24BDBF2F0];
    outlined retain of Graph((uint64_t)v290);
    v58 = CGColorSpaceCreateWithName(v57);
    if (!v58)
    {
      lazy protocol witness table accessor for type GraphCompilerErrors and conformance GraphCompilerErrors();
      v62 = (void *)swift_allocError();
      *(_OWORD *)v66 = xmmword_245FC1E10;
      *(_BYTE *)(v66 + 16) = 3;
      swift_willThrow();
      goto LABEL_24;
    }
    v56 = v58;
    v55 = 0;
  }
  v59 = v55;
  v60 = v56;
  v61 = v251;
  Graph.convertColors(to:)(v60);
  v62 = v61;
  if (v61)
  {

LABEL_24:
    swift_release();
    swift_release();
    v64 = v256;
    goto LABEL_25;
  }

  Graph.replaceCreateSamplerNodes()();
  v62 = v63;
  if (v63)
    goto LABEL_24;
  GraphCompiler.extractSamplerNodes(in:into:)((uint64_t)&v273, &v283);
  v64 = v256;
  Graph.replaceWellKnownConstants()();
  v62 = v65;
  if (v65)
  {
    swift_release();
    swift_release();
LABEL_25:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v271 = v281;
    v272[0] = v282[0];
    *(_OWORD *)((char *)v272 + 9) = *(_OWORD *)((char *)v282 + 9);
    v267 = v277;
    v268 = v278;
    v269 = v279;
    v270 = v280;
    v263 = v273;
    v264 = v274;
    v68 = v275;
    v67 = v276;
    goto LABEL_26;
  }
  if (!objc_msgSend(v247, sel_argumentBuffersSupport)
    || (*(_BYTE *)(v257 + OBJC_IVAR___SGREMaterialCompilationOptions_forceEnableTier1FallbackSupport) & 1) != 0)
  {
    goto LABEL_20;
  }
  if (one-time initialization token for tier1SupportOverrideEnabled != -1)
    swift_once();
  swift_beginAccess();
  if (static DebugConfig.tier1SupportOverrideEnabled == 1)
  {
LABEL_20:
    v288 = *(_OWORD *)&v286[16];
    v289[0] = *(_OWORD *)&v286[32];
    *(_OWORD *)((char *)v289 + 9) = *(_OWORD *)&v286[41];
    outlined init with take of MetalFunctionNode?((uint64_t)&v286[64], (uint64_t)v287, &demangling cache variable for type metadata for ShaderGraphNode?);
    specialized GraphCompiler.replaceTier1TextureGetterNodes(in:surface:geometryModifier:)(&v273, (uint64_t)&v288, (uint64_t)v287);
  }
  specialized GraphCompiler.replaceGettersWithFunctionCalls(in:)((uint64_t)&v273);
  v251 = 0;
  specialized GraphCompiler.replaceMetalFunctionsWithStitchedNodes(in:)((uint64_t)&v273);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ShaderGraphNode?>);
  v87 = swift_allocObject();
  *(_OWORD *)(v87 + 16) = xmmword_245FBECE0;
  v88 = *(_QWORD *)&v286[16];
  v89 = *(_QWORD *)&v286[24];
  v228 = *(_QWORD *)&v286[24];
  v90 = *(_QWORD *)&v286[32];
  v91 = *(_QWORD *)&v286[40];
  v92 = *(_QWORD *)&v286[48];
  v93 = v286[56];
  *(_QWORD *)(v87 + 32) = *(_QWORD *)&v286[16];
  *(_QWORD *)(v87 + 40) = v89;
  *(_QWORD *)(v87 + 48) = v90;
  *(_QWORD *)(v87 + 56) = v91;
  v230 = v92;
  v231 = v91;
  *(_QWORD *)(v87 + 64) = v92;
  v229 = v93;
  *(_BYTE *)(v87 + 72) = v93;
  v94 = *(_QWORD *)&v286[72];
  v248 = *(_QWORD *)&v286[72];
  v249 = *(_QWORD *)&v286[64];
  v95 = *(_QWORD *)&v286[80];
  v96 = *(_QWORD *)&v286[88];
  v97 = *(_QWORD *)&v286[96];
  LOBYTE(v93) = v286[104];
  LODWORD(v235) = v286[104];
  *(_QWORD *)(v87 + 80) = *(_QWORD *)&v286[64];
  *(_QWORD *)(v87 + 88) = v94;
  *(_QWORD *)(v87 + 96) = v95;
  *(_QWORD *)(v87 + 104) = v96;
  *(_QWORD *)(v87 + 112) = v97;
  *(_BYTE *)(v87 + 120) = v93;
  outlined copy of NodePersonality(v88);
  v98 = v228;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v233 = v88;
  outlined copy of NodePersonality(v88);
  swift_bridgeObjectRetain();
  v232 = v90;
  swift_bridgeObjectRetain();
  v234 = v95;
  v226 = v97;
  v227 = v96;
  outlined copy of ShaderGraphNode?(v249, v248);
  v99 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v101 = v99[2];
  v100 = v99[3];
  if (v101 >= v100 >> 1)
    v99 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v100 > 1), v101 + 1, 1, v99);
  v99[2] = v101 + 1;
  v102 = &v99[6 * v101];
  v102[4] = v233;
  v102[5] = v98;
  v103 = v231;
  v102[6] = v232;
  v102[7] = v103;
  v102[8] = v230;
  *((_BYTE *)v102 + 72) = v229;
  v104 = v248;
  if (v248)
  {
    outlined copy of NodePersonality(v249);
    v106 = v99[2];
    v105 = v99[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v62 = v251;
    if (v106 >= v105 >> 1)
      v99 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v105 > 1), v106 + 1, 1, v99);
    v108 = v226;
    v107 = v227;
    v109 = v235;
    v99[2] = v106 + 1;
    v110 = &v99[6 * v106];
    v110[4] = v249;
    v110[5] = v104;
    v110[6] = v234;
    v110[7] = v107;
    v110[8] = v108;
    *((_BYTE *)v110 + 72) = v109 & 1;
  }
  else
  {
    v62 = v251;
  }
  swift_release();
  v111 = specialized Sequence.compactMap<A>(_:)((uint64_t)v99, &v273);
  v64 = v256;
  if (v62)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    v271 = v281;
    v272[0] = v282[0];
    *(_OWORD *)((char *)v272 + 9) = *(_OWORD *)((char *)v282 + 9);
    v267 = v277;
    v268 = v278;
    v269 = v279;
    v270 = v280;
    v263 = v273;
    v264 = v274;
    v68 = v275;
    v67 = v276;
  }
  else
  {
    v112 = v111;
    swift_bridgeObjectRelease();
    v113 = *(_QWORD *)(v112 + 16);
    v114 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v251 = 0;
    if (v113)
    {
      v232 = v277;
      v231 = v277 + 32;
      swift_bridgeObjectRetain();
      v115 = 88;
      v230 = v112;
      do
      {
        v119 = *(_QWORD *)(v112 + v115);
        if (v119 != -7)
        {
          if ((v119 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_100:
            __break(1u);
            JUMPOUT(0x245ED6830);
          }
          if (v119 >= *(_QWORD *)(v232 + 16))
            goto LABEL_100;
          v120 = v231 + 48 * v119;
          v121 = *(_QWORD *)v120;
          v122 = *(char **)(v120 + 8);
          v124 = *(_QWORD *)(v120 + 16);
          v123 = *(_QWORD *)(v120 + 24);
          v234 = *(_QWORD *)(v120 + 32);
          v235 = v123;
          LODWORD(v233) = *(unsigned __int8 *)(v120 + 40);
          outlined copy of NodePersonality(v121);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v248 = v124;
          v249 = (unint64_t)v122;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            v114 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v114[2] + 1, 1, v114);
          v127 = v114[2];
          v126 = v114[3];
          if (v127 >= v126 >> 1)
            v114 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v126 > 1), v127 + 1, 1, v114);
          v114[2] = v127 + 1;
          v116 = &v114[6 * v127];
          v117 = (char *)v249;
          v116[4] = v121;
          v116[5] = v117;
          v118 = v235;
          v116[6] = v248;
          v116[7] = v118;
          v116[8] = v234;
          *((_BYTE *)v116 + 72) = v233;
          v112 = v230;
        }
        v115 += 112;
        --v113;
      }
      while (v113);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    Graph.removeUnconnectedNodesAndEdges(roots:)((Swift::OpaquePointer)v114);
    swift_bridgeObjectRelease();
    v128 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    v129 = static os_signpost_type_t.end.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      swift_retain();
      v130 = v242;
      checkForErrorAndConsumeState(state:)();
      v131 = v130;
      swift_release();
      v132 = v243;
      v133 = v130;
      v134 = v244;
      if ((*(unsigned int (**)(char *, uint64_t))(v243 + 88))(v133, v244) == *MEMORY[0x24BEE7810])
      {
        v135 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v132 + 8))(v131, v134);
        v135 = "";
      }
      v249 = (unint64_t)v135;
      v137 = v259;
      v138 = v246;
      v139 = v294;
      ((void (*)(void))v258)();
      v140 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v140 = 0;
      v141 = OSSignpostID.rawValue.getter();
      v142 = v129;
      v136 = v137;
      v143 = v139;
      _os_signpost_emit_with_name_impl(&dword_245E46000, v128, v142, v141, "transform", (const char *)v249, v140, 2u);
      MEMORY[0x24954C33C](v140, -1, -1);

      v144 = v250;
      ((void (*)(char *, uint64_t))v250)(v138, v136);
      ((void (*)(char *, uint64_t))v144)(v143, v136);
    }
    else
    {

      v136 = v259;
      ((void (*)(char *, uint64_t))v250)(v246, v259);
    }
    v145 = v245;
    if (one-time initialization token for debugMode != -1)
      swift_once();
    swift_beginAccess();
    v146 = static DebugConfig.debugMode;
    if (*(_QWORD *)(static DebugConfig.debugMode + 16))
    {
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v147 = Hasher._finalize()();
      v148 = -1 << *(_BYTE *)(v146 + 32);
      v149 = v147 & ~v148;
      if (((*(_QWORD *)(v146 + 56 + ((v149 >> 3) & 0xFFFFFFFFFFFFF8)) >> v149) & 1) != 0)
      {
        v249 = ~v148;
        __asm { BR              X9 }
      }
      swift_bridgeObjectRelease();
      v136 = v259;
      v145 = v245;
    }
    OSSignposter.logHandle.getter();
    OSSignpostID.init(log:)();
    swift_bridgeObjectRetain_n();
    v150 = OSSignposter.logHandle.getter();
    v151 = static os_signpost_type_t.begin.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      LODWORD(v249) = v151;
      v152 = v294;
      ((void (*)(char *, const char *, uint64_t))v258)(v294, v145, v136);
      v153 = swift_slowAlloc();
      v154 = swift_slowAlloc();
      *(_QWORD *)&v263 = v154;
      *(_DWORD *)v153 = 141558275;
      v262[0] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v153 + 12) = 2081;
      swift_bridgeObjectRetain();
      v262[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v254, v256, (uint64_t *)&v263);
      v155 = v245;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      v156 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_245E46000, v150, (os_signpost_type_t)v249, v156, "functionGraph", "%{private,mask.hash}s", (uint8_t *)v153, 0x16u);
      swift_arrayDestroy();
      v157 = v154;
      v136 = v259;
      MEMORY[0x24954C33C](v157, -1, -1);
      MEMORY[0x24954C33C](v153, -1, -1);

      v158 = v250;
      ((void (*)(char *, uint64_t))v250)(v152, v136);
      ((void (*)(char *, const char *, uint64_t))v258)(v152, v155, v136);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      v155 = v145;
      v158 = v250;
      ((void (*)(char *, const char *, uint64_t))v258)(v294, v145, v136);
    }
    swift_allocObject();
    v159 = OSSignpostIntervalState.init(id:isOpen:)();
    ((void (*)(const char *, uint64_t))v158)(v155, v136);
    v292[7] = v280;
    v292[8] = v281;
    v293[0] = v282[0];
    *(_OWORD *)((char *)v293 + 9) = *(_OWORD *)((char *)v282 + 9);
    v292[4] = v277;
    v292[5] = v278;
    v292[6] = v279;
    v292[0] = v273;
    v292[1] = v274;
    v292[2] = v275;
    v292[3] = v276;
    outlined retain of Graph((uint64_t)v292);
    v160 = v251;
    v161 = (char *)specialized GraphCompiler.functionGraph(for:)(v292);
    v62 = v160;
    if (v160)
    {
      swift_release();
      swift_release();
      swift_release();
      outlined release of Graph((uint64_t)v292);
      swift_release();
      swift_release();
      v64 = v256;
      swift_bridgeObjectRelease();
      v69 = v292;
      goto LABEL_27;
    }
    v249 = (unint64_t)v161;
    outlined release of Graph((uint64_t)v292);
    v162 = OSSignposter.logHandle.getter();
    v163 = v241;
    OSSignpostIntervalState.signpostID.getter();
    LODWORD(v246) = static os_signpost_type_t.end.getter();
    v164 = OS_os_log.signpostsEnabled.getter();
    v248 = v159;
    if ((v164 & 1) != 0)
    {
      swift_retain();
      v165 = v239;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      v167 = v243;
      v166 = v244;
      v168 = v162;
      if ((*(unsigned int (**)(char *, uint64_t))(v243 + 88))(v165, v244) == *MEMORY[0x24BEE7810])
      {
        v169 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v167 + 8))(v165, v166);
        v169 = "";
      }
      v245 = v169;
      v170 = v241;
      v171 = v294;
      v172 = v259;
      ((void (*)(void))v258)();
      v173 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v173 = 0;
      v174 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_245E46000, v168, (os_signpost_type_t)v246, v174, "functionGraph", v245, v173, 2u);
      MEMORY[0x24954C33C](v173, -1, -1);

      v175 = v250;
      ((void (*)(char *, uint64_t))v250)(v170, v172);
      ((void (*)(char *, uint64_t))v175)(v171, v172);
    }
    else
    {

      ((void (*)(char *, uint64_t))v250)(v163, v259);
    }
    v176 = static DebugConfig.debugMode;
    v177 = *(_QWORD *)(static DebugConfig.debugMode + 16);
    v251 = 0;
    if (v177)
    {
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v178 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v176 + 32));
      if (((*(_QWORD *)(v176 + 56 + ((v178 >> 3) & 0xFFFFFFFFFFFFF8)) >> v178) & 1) != 0)
        __asm { BR              X9 }
      swift_bridgeObjectRelease();
      v62 = v251;
    }
    v179 = static DebugConfig.debugMode;
    if (*(_QWORD *)(static DebugConfig.debugMode + 16))
    {
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v180 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v179 + 32));
      if (((*(_QWORD *)(v179 + 56 + ((v180 >> 3) & 0xFFFFFFFFFFFFF8)) >> v180) & 1) != 0)
      {
        v246 = (char *)0xEA0000000000746FLL;
        __asm { BR              X9 }
      }
      swift_bridgeObjectRelease();
      v62 = v251;
    }
    v181 = v294;
    v182 = v240;
    OSSignposter.logHandle.getter();
    OSSignpostID.init(log:)();
    v183 = OSSignposter.logHandle.getter();
    LODWORD(v251) = static os_signpost_type_t.begin.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      ((void (*)(char *, char *, uint64_t))v258)(v181, v182, v259);
      v184 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v184 = 0;
      v185 = OSSignpostID.rawValue.getter();
      v186 = v259;
      _os_signpost_emit_with_name_impl(&dword_245E46000, v183, (os_signpost_type_t)v251, v185, "samplerCache", "buildingSamplerFunctions", v184, 2u);
      v187 = v184;
      v182 = v240;
      MEMORY[0x24954C33C](v187, -1, -1);

      v188 = v250;
      ((void (*)(char *, uint64_t))v250)(v181, v186);
    }
    else
    {

      v186 = v259;
      v188 = v250;
    }
    ((void (*)(char *, char *, uint64_t))v258)(v181, v182, v186);
    swift_allocObject();
    v246 = (char *)OSSignpostIntervalState.init(id:isOpen:)();
    v189 = ((uint64_t (*)(char *, uint64_t))v188)(v182, v186);
    v262[0] = 0;
    v262[1] = 0xE000000000000000;
    v190 = v283;
    v191 = v284;
    v192 = v285;
    MEMORY[0x24BDAC7A8](v189);
    *(&v226 - 2) = (uint64_t)v262;
    *(&v226 - 1) = (uint64_t)v247;
    swift_retain();
    swift_retain();
    swift_retain();
    v245 = (const char *)specialized Sequence.compactMap<A>(_:)(v190, v191, v192, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))partial apply for closure #4 in GraphCompiler.compile(for:options:));
    if (v62)
    {
      swift_release_n();
      swift_release_n();
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v193 = v256;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v271 = v281;
      v272[0] = v282[0];
      *(_OWORD *)((char *)v272 + 9) = *(_OWORD *)((char *)v282 + 9);
      v267 = v277;
      v268 = v278;
      v269 = v279;
      v270 = v280;
      v263 = v273;
      v264 = v274;
      v265 = v275;
      v266 = v276;
      outlined release of Graph((uint64_t)&v263);
      v64 = v193;
      goto LABEL_28;
    }
    v251 = 0;
    swift_release();
    swift_release();
    swift_release();
    v194 = static DebugConfig.debugMode;
    if (*(_QWORD *)(static DebugConfig.debugMode + 16))
    {
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v195 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v194 + 32));
      if (((*(_QWORD *)(v194 + 56 + ((v195 >> 3) & 0xFFFFFFFFFFFFF8)) >> v195) & 1) != 0)
        __asm { BR              X9 }
      swift_bridgeObjectRelease();
    }
    v196 = OSSignposter.logHandle.getter();
    v197 = v238;
    OSSignpostIntervalState.signpostID.getter();
    v198 = static os_signpost_type_t.end.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      swift_retain();
      v199 = v236;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      if ((*(unsigned int (**)(char *, uint64_t))(v243 + 88))(v199, v244) == *MEMORY[0x24BEE7810])
      {
        v200 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v243 + 8))(v236, v244);
        v200 = "";
      }
      v202 = v294;
      v203 = v238;
      v201 = v259;
      ((void (*)(char *, char *, uint64_t))v258)(v294, v238, v259);
      v204 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v204 = 0;
      v205 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_245E46000, v196, v198, v205, "samplerCache", v200, v204, 2u);
      MEMORY[0x24954C33C](v204, -1, -1);

      ((void (*)(char *, uint64_t))v250)(v203, v201);
      v197 = v202;
    }
    else
    {

      v201 = v259;
    }
    ((void (*)(char *, uint64_t))v250)(v197, v201);
    if (one-time initialization token for samplerCache != -1)
      swift_once();
    v206 = static GraphCompiler.samplerCache + 16;
    v207 = (os_unfair_lock_s *)(static GraphCompiler.samplerCache + 40);
    os_unfair_lock_lock((os_unfair_lock_t)(static GraphCompiler.samplerCache + 40));
    v208 = v245;
    v209 = v251;
    closure #5 in GraphCompiler.compile(for:options:)(v206, (uint64_t)v245);
    if (v209)
    {
      os_unfair_lock_unlock(v207);
      __break(1u);
      JUMPOUT(0x245ED6F54);
    }
    os_unfair_lock_unlock(v207);
    v210 = v283;
    v211 = v284;
    v212 = v285;
    swift_retain();
    swift_retain();
    swift_retain();
    v244 = specialized Sequence.compactMap<A>(_:)(v210, v211, v212);
    v251 = 0;
    swift_release();
    swift_release();
    v243 = v210;
    swift_release();
    v213 = *((_QWORD *)v208 + 2);
    if (v213)
    {
      *(_QWORD *)&v263 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray.reserveCapacity(_:)();
      v214 = 48;
      do
      {
        swift_unknownObjectRetain();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v214 += 24;
        --v213;
      }
      while (v213);
      v215 = v263;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v215 = MEMORY[0x24BEE4AF8];
    }
    *(_QWORD *)&v263 = v244;
    specialized Array.append<A>(contentsOf:)(v215);
    v64 = v256;
    v216 = v251;
    v217 = MetalStitchingBackend.compile(program:uniformDefinition:additionalLibraries:options:device:)((char *)v249, *(uint64_t *)&v286[304], v263, v257, v247, v254, v256);
    v62 = v216;
    if (!v216)
    {
      v84 = v217;
      v251 = 0;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OSSignposter.logHandle.getter();
      OSSignpostID.init(log:)();
      swift_bridgeObjectRetain();
      v218 = OSSignposter.logHandle.getter();
      LODWORD(v257) = static os_signpost_type_t.event.getter();
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v219 = v259;
        ((void (*)(char *, char *, uint64_t))v258)(v294, v237, v259);
        v220 = swift_slowAlloc();
        v221 = swift_slowAlloc();
        *(_QWORD *)&v263 = v221;
        *(_DWORD *)v220 = 141558275;
        v261 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v220 + 12) = 2081;
        v222 = v256;
        swift_bridgeObjectRetain();
        v261 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v254, v222, (uint64_t *)&v263);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        v223 = v294;
        v224 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_245E46000, v218, (os_signpost_type_t)v257, v224, "end", "%{private,mask.hash}s", (uint8_t *)v220, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x24954C33C](v221, -1, -1);
        MEMORY[0x24954C33C](v220, -1, -1);
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        v225 = v250;
        ((void (*)(char *, uint64_t))v250)(v237, v219);
        swift_release();
        swift_release();
        swift_release();
        (*(void (**)(char *, uint64_t))(v252 + 8))(v260, v253);
        ((void (*)(char *, uint64_t))v225)(v223, v219);
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        ((void (*)(char *, uint64_t))v250)(v237, v259);
        swift_release();
        swift_release();
        swift_release();
        (*(void (**)(char *, uint64_t))(v252 + 8))(v260, v253);
      }
      swift_bridgeObjectRelease();
      v271 = v281;
      v272[0] = v282[0];
      *(_OWORD *)((char *)v272 + 9) = *(_OWORD *)((char *)v282 + 9);
      v267 = v277;
      v268 = v278;
      v269 = v279;
      v270 = v280;
      v263 = v273;
      v264 = v274;
      v265 = v275;
      v266 = v276;
      outlined release of Graph((uint64_t)&v263);
      return v84;
    }
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v271 = v281;
    v272[0] = v282[0];
    *(_OWORD *)((char *)v272 + 9) = *(_OWORD *)((char *)v282 + 9);
    v267 = v277;
    v268 = v278;
    v269 = v279;
    v270 = v280;
    v263 = v273;
    v264 = v274;
    v68 = v275;
    v67 = v276;
  }
LABEL_26:
  v265 = v68;
  v266 = v67;
  v69 = &v263;
LABEL_27:
  outlined release of Graph((uint64_t)v69);
LABEL_28:
  if (one-time initialization token for logger != -1)
    swift_once();
  v70 = type metadata accessor for Logger();
  __swift_project_value_buffer(v70, (uint64_t)logger);
  swift_bridgeObjectRetain();
  v71 = Logger.logObject.getter();
  v72 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v71, v72))
  {
    v251 = v62;
    v73 = (uint8_t *)swift_slowAlloc();
    v74 = swift_slowAlloc();
    *(_QWORD *)&v273 = v74;
    *(_DWORD *)v73 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v263 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v254, v64, (uint64_t *)&v273);
    v62 = v251;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_245E46000, v71, v72, "Compile failed for material: %s", v73, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24954C33C](v74, -1, -1);
    MEMORY[0x24954C33C](v73, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v75 = v62;
  v76 = v62;
  v77 = Logger.logObject.getter();
  v78 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v77, v78))
  {
    v79 = (uint8_t *)swift_slowAlloc();
    v80 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v79 = 138412290;
    v81 = v62;
    v82 = v62;
    v83 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)&v273 = v83;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v80 = v83;

    _os_log_impl(&dword_245E46000, v77, v78, "%@", v79, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24954C33C](v80, -1, -1);
    MEMORY[0x24954C33C](v79, -1, -1);
  }
  else
  {

  }
  v85 = v252;
  v84 = (char *)v253;

  swift_willThrow();
  (*(void (**)(char *, char *))(v85 + 8))(v260, v84);
  return v84;
}

uint64_t specialized OrderedSet.removeSubrange(_:)(unint64_t a1, int64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *(_QWORD *)v2;
  if (!*(_QWORD *)v2)
    return specialized ContiguousArray.replaceSubrange<A>(_:with:)(a1, a2);
  v6 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v6 <= 0)
    return result;
  v7 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 16);
  v8 = v7 - v6;
  if (__OFSUB__(v7, v6))
    goto LABEL_16;
  if (v8 <= *(_QWORD *)(*(_QWORD *)(v2 + 8) + 16) / 2 || v8 < specialized OrderedSet._minimumCapacity.getter())
  {
    specialized ContiguousArray.replaceSubrange<A>(_:with:)(a1, a2);
    return specialized OrderedSet._regenerateHashTable()();
  }
  result = swift_isUniquelyReferenced_native();
  v9 = *(_QWORD *)v2;
  if (!(_DWORD)result)
  {
    if (!v9)
    {
LABEL_18:
      __break(1u);
      return result;
    }
    v9 = _HashTable.copy()(*(_QWORD **)v2);
    result = swift_release();
    *(_QWORD *)v2 = v9;
  }
  if (!v9)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  swift_retain();
  specialized closure #1 in OrderedSet.removeSubrange(_:)(v9 + 16, (_QWORD *)(v9 + 32), v2, a1, a2);
  swift_release();
  return specialized ContiguousArray.replaceSubrange<A>(_:with:)(a1, a2);
}

uint64_t GraphCompiler.material.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of RESurfaceShaderMaterial(v1, a1);
}

uint64_t one-time initialization function for samplerCache()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;

  v0 = MEMORY[0x24BEE4AF8];
  v1 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0)
    v1 = specialized _copyCollectionToContiguousArray<A>(_:)(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<OrderedDictionary<String, MTLLibrary>, os_unfair_lock_s>);
  result = swift_allocObject();
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = v0;
  *(_QWORD *)(result + 32) = v1;
  static GraphCompiler.samplerCache = result;
  return result;
}

uint64_t *GraphCompiler.samplerCache.unsafeMutableAddressor()
{
  if (one-time initialization token for samplerCache != -1)
    swift_once();
  return &static GraphCompiler.samplerCache;
}

uint64_t static GraphCompiler.samplerCache.getter()
{
  if (one-time initialization token for samplerCache != -1)
    swift_once();
  return swift_retain();
}

void GraphCompiler.extractSamplerNodes(in:into:)(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  char isUniquelyReferenced_nonNull_native;
  BOOL v49;
  BOOL v50;
  _QWORD *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  void *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t *v65;
  _QWORD *v67;
  _QWORD *v68;
  char v69;
  uint64_t v70;
  __int128 v71;
  _QWORD v72[3];
  __int128 v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;

  v4 = v3;
  v5 = v2;
  v77 = a2;
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = v6 + 32;
    v9 = v6 + 56;
    swift_bridgeObjectRetain();
    v10 = 0;
    v11 = v6 + 104;
    v12 = MEMORY[0x24BEE4AF8];
    v67 = v5;
    while (1)
    {
      if (v10 >= v7)
        goto LABEL_84;
      v16 = 48 * v10;
      if (*(_QWORD *)(v9 + 48 * v10) == -7)
        break;
LABEL_16:
      v19 = v8 + v16;
      if (*(_QWORD *)v19 == 0xE000000000000008)
      {
        v20 = *(_QWORD *)(v19 + 8);
        v21 = *(_QWORD *)(v19 + 16);
        v71 = *(_OWORD *)(v19 + 24);
        v69 = *(_BYTE *)(v19 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v75 = v12;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v12 + 16) + 1, 1);
          v12 = v75;
        }
        v14 = *(_QWORD *)(v12 + 16);
        v13 = *(_QWORD *)(v12 + 24);
        if (v14 >= v13 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
          v12 = v75;
        }
        *(_QWORD *)(v12 + 16) = v14 + 1;
        v15 = v12 + 48 * v14;
        *(_QWORD *)(v15 + 32) = 0xE000000000000008;
        *(_QWORD *)(v15 + 40) = v20;
        *(_QWORD *)(v15 + 48) = v21;
        *(_OWORD *)(v15 + 56) = v71;
        *(_BYTE *)(v15 + 72) = v69;
        v8 = v6 + 32;
        v5 = v67;
        v9 = v6 + 56;
      }
      if ((uint64_t)++v10 >= v7)
      {
LABEL_19:
        swift_bridgeObjectRelease();
        v22 = (_OWORD *)a1;
        v4 = v3;
        goto LABEL_21;
      }
    }
    if ((uint64_t)(v10 + 1) >= v7)
      goto LABEL_19;
    v17 = 48 * v10++;
    while (1)
    {
      if (*(_QWORD *)(v11 + v17) != -7)
      {
        v16 = v17 + 48;
        goto LABEL_16;
      }
      v18 = v10 + 1;
      if (__OFADD__(v10, 1))
        break;
      ++v10;
      v17 += 48;
      if (v18 >= v7)
        goto LABEL_19;
    }
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    swift_once();
LABEL_24:
    v24 = static GraphCompiler.samplerCache + 16;
    v25 = (os_unfair_lock_s *)(static GraphCompiler.samplerCache + 40);
    os_unfair_lock_lock((os_unfair_lock_t)(static GraphCompiler.samplerCache + 40));
    v76 = v24;
    v26 = specialized Sequence.compactMap<A>(_:)(v10, (uint64_t (*)(uint64_t, uint64_t, _QWORD *))partial apply for closure #1 in closure #3 in GraphCompiler.extractSamplerNodes(in:into:));
    if (v11)
    {
      os_unfair_lock_unlock(v25);
      __break(1u);
    }
    else
    {
      v27 = v26;
      os_unfair_lock_unlock(v25);
      v70 = v27[2];
      if (v70)
      {
        v64 = v10;
        v68 = v27 + 4;
        v28 = v77 + 2;
        swift_bridgeObjectRetain();
        v29 = 0;
        v65 = v77 + 2;
        while (1)
        {
          v34 = &v68[3 * v29];
          v35 = *v34;
          v36 = v34[1];
          v11 = v34[2];
          v10 = *v77;
          v37 = (_QWORD *)v77[1];
          v38 = v37[2];
          if (*v77)
          {
            swift_bridgeObjectRetain();
            swift_unknownObjectRetain();
            swift_retain();
            swift_retain();
            v39 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v35, v36, (uint64_t)(v37 + 4), v38, (_QWORD *)(v10 + 16), v10 + 32);
            v41 = v40;
            v43 = v42;
            swift_release();
            swift_release();
            if ((v41 & 1) == 0)
            {
              v28 = v65;
              goto LABEL_42;
            }
            v28 = v65;
          }
          else
          {
            if (v38)
            {
              v44 = v37[4] == v35 && v37[5] == v36;
              if (v44 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                v39 = 0;
                goto LABEL_41;
              }
              if (v38 != 1)
              {
                v49 = v37[6] == v35 && v37[7] == v36;
                if (v49 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  v39 = 1;
                  goto LABEL_41;
                }
                if (v38 != 2)
                {
                  v50 = v37[8] == v35 && v37[9] == v36;
                  if (v50 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    v39 = 2;
LABEL_41:
                    swift_bridgeObjectRetain();
                    swift_unknownObjectRetain();
LABEL_42:
                    v53 = *v28;
                    swift_unknownObjectRetain();
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                      v53 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v53);
                    if ((v39 & 0x8000000000000000) != 0)
                      goto LABEL_82;
                    if (v39 >= *(_QWORD *)(v53 + 16))
                      goto LABEL_83;
                    v45 = v53 + 16 * v39;
                    v46 = *(_QWORD *)(v45 + 32);
                    v33 = (_BYTE *)(v45 + 40);
                    v47 = *(_BYTE *)(v45 + 40);
                    swift_unknownObjectRetain();
                    outlined consume of MetalLibrary(v46, v47);
                    *(_QWORD *)(v45 + 32) = v11;
                    goto LABEL_30;
                  }
                  v51 = v37 + 11;
                  v10 = 3;
                  while (v38 != v10)
                  {
                    if (*(v51 - 1) == v35 && *v51 == v36)
                    {
                      v39 = v10;
                      goto LABEL_41;
                    }
                    v39 = v10++;
                    v51 += 2;
                    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      goto LABEL_41;
                  }
                }
              }
            }
            swift_bridgeObjectRetain();
            swift_unknownObjectRetain();
            v43 = 0;
          }
          swift_unknownObjectRetain();
          specialized OrderedSet._appendNew(_:in:)(v35, v36, v43);
          v53 = v77[2];
          swift_unknownObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v77[2] = v53;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v53 + 16) + 1, 1);
            v53 = *v28;
          }
          v31 = *(_QWORD *)(v53 + 16);
          v30 = *(_QWORD *)(v53 + 24);
          if (v31 >= v30 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
            v53 = *v28;
          }
          *(_QWORD *)(v53 + 16) = v31 + 1;
          v32 = v53 + 16 * v31;
          *(_QWORD *)(v32 + 32) = v11;
          v33 = (_BYTE *)(v32 + 40);
LABEL_30:
          *v33 = 1;
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease();
          *v28 = v53;
          if (++v29 == v70)
          {
            swift_bridgeObjectRelease_n();
            v10 = v64;
            v54 = *(_QWORD *)(v64 + 16);
            if (!v54)
              goto LABEL_80;
            goto LABEL_77;
          }
        }
      }
      swift_bridgeObjectRelease();
      v54 = *(_QWORD *)(v10 + 16);
      if (!v54)
        goto LABEL_80;
LABEL_77:
      swift_bridgeObjectRetain();
      v55 = 0;
      do
      {
        v56 = v10;
        v57 = v10 + v55;
        v59 = *(_QWORD *)(v10 + v55 + 48);
        v58 = *(_QWORD *)(v10 + v55 + 56);
        v60 = *(_QWORD *)(v10 + v55 + 64);
        v61 = *(_BYTE *)(v10 + v55 + 88);
        v63 = *(_QWORD *)(v10 + v55 + 32);
        v62 = *(void **)(v10 + v55 + 40);
        v72[0] = v59;
        v72[1] = v58;
        v72[2] = v60;
        v73 = *(_OWORD *)(v57 + 72);
        v74 = v61;
        swift_bridgeObjectRetain();
        outlined copy of NodePersonality(v59);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized closure #5 in GraphCompiler.extractSamplerNodes(in:into:)(v63, v62, (uint64_t)v72, v77, (_OWORD *)a1);
        swift_bridgeObjectRelease();
        outlined consume of NodePersonality(v59);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v55 += 64;
        --v54;
        v10 = v56;
      }
      while (v54);
      swift_bridgeObjectRelease();
LABEL_80:
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v22 = (_OWORD *)a1;
    v12 = MEMORY[0x24BEE4AF8];
LABEL_21:
    outlined retain of RESurfaceShaderMaterial(v5);
    v23 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_SS_AHtsAE_pTg504_s11d152Graph0B8CompilerV19extractSamplerNodes33_137984365F15B3FD94CB2D26CA095C9FLL2in4intoyAA0B0Vz_AA17OrderedDictionaryVySSAA12MetalLibraryAELLOGztKFSS_AA0aB4F11VtAPKXEfU0_AF0eJ0VAF0E0VTf1cn_nTf4ngn_n(v12, v5, v22);
    v11 = v4;
    if (!v4)
    {
      v10 = v23;
      outlined release of RESurfaceShaderMaterial(v5);
      swift_release();
      if (one-time initialization token for samplerCache != -1)
        goto LABEL_85;
      goto LABEL_24;
    }
    outlined release of RESurfaceShaderMaterial(v5);
    swift_release();
  }
}

uint64_t closure #4 in GraphCompiler.compile(for:options:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, void *a6)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  id v22[17];

  v22[15] = *(id *)MEMORY[0x24BDAC8D0];
  if ((a4 & 1) != 0)
    return 0;
  type metadata accessor for MetalShaderCompiler();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a3;
  type metadata accessor for MetalShaderCompiler.Scope();
  v10 = (_QWORD *)swift_allocObject();
  v11 = MEMORY[0x24BEE4AF8];
  v10[2] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v10[3] = 0;
  swift_weakInit();
  v10[5] = v11;
  outlined copy of MetalLibrary(a3, 0);
  outlined copy of MetalLibrary(a3, 0);
  v10[6] = specialized Dictionary.init(dictionaryLiteral:)(v11);
  v10[7] = v11;
  v10[8] = v11;
  v10[9] = v11;
  v10[10] = v11;
  swift_beginAccess();
  swift_weakAssign();
  *(_QWORD *)(v9 + 24) = v10;
  v12 = MetalShaderCompiler.compile()();
  if (v13)
  {
    swift_release();
    outlined consume of MetalLibrary(a3, 0);
  }
  else
  {
    v22[0] = (id)0xD00000000000002FLL;
    v22[1] = (id)0x8000000245FCAF20;
    String.append(_:)(v12);
    if (one-time initialization token for debugMode != -1)
      swift_once();
    swift_beginAccess();
    v15 = static DebugConfig.debugMode;
    if (*(_QWORD *)(static DebugConfig.debugMode + 16))
    {
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v16 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v15 + 32));
      if (((*(_QWORD *)(v15 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
        __asm { BR              X9 }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD528]), sel_init);
    v18 = (void *)MEMORY[0x24954AF98](0xD00000000000002FLL, 0x8000000245FCAF20);
    swift_bridgeObjectRelease();
    v22[0] = 0;
    v19 = objc_msgSend(a6, sel_newLibraryWithSource_options_error_, v18, v17, v22);

    v20 = v22[0];
    if (v19)
    {
      outlined consume of MetalLibrary(a3, 0);
      swift_release();

      swift_bridgeObjectRetain();
    }
    else
    {
      v21 = v20;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      outlined consume of MetalLibrary(a3, 0);
      swift_release();

    }
  }
  return a1;
}

uint64_t closure #5 in GraphCompiler.compile(for:options:)(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  char v16;
  char v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  BOOL v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v3 = (_QWORD *)result;
  v4 = (_QWORD *)(result + 16);
  if (*(_QWORD *)(*(_QWORD *)(result + 16) + 16) > 0x1000uLL)
  {
    if (*(_QWORD *)(*(_QWORD *)(result + 8) + 16) < 0xC00uLL)
      goto LABEL_88;
    specialized OrderedSet.removeSubrange(_:)(0, 3072);
    result = specialized ContiguousArray.replaceSubrange<A>(_:with:)(0, 3072);
  }
  v45 = *(_QWORD *)(a2 + 16);
  if (v45)
  {
    v44 = a2 + 32;
    swift_bridgeObjectRetain();
    v5 = 0;
    v40 = v3;
    v41 = v4;
    while (1)
    {
      v7 = (uint64_t *)(v44 + 24 * v5);
      v6 = *v7;
      v8 = v7[1];
      v9 = v7[2];
      v10 = *v3;
      v11 = (_QWORD *)v3[1];
      v12 = v11[2];
      v47 = v5;
      if (*v3)
      {
        v46 = v3[2];
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_retain();
        v42 = (uint64_t)(v11 + 4);
        v13 = v6;
        v14 = v11;
        v15 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v6, v8, (uint64_t)(v11 + 4), v12, (_QWORD *)(v10 + 16), v10 + 32);
        v17 = v16;
        swift_release();
        if ((v17 & 1) != 0)
        {
          v21 = v14[2];
          swift_bridgeObjectRetain();
          swift_unknownObjectRetain();
          swift_retain();
          swift_retain();
          v22 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v13, v8, v42, v21, (_QWORD *)(v10 + 16), v10 + 32);
          v24 = v23;
          v26 = v25;
          swift_release();
          swift_release();
          if ((v24 & 1) != 0)
          {
            v3 = v40;
            v4 = v41;
            v6 = v13;
            goto LABEL_7;
          }
          v3 = v40;
          v4 = v41;
          v27 = v9;
          goto LABEL_35;
        }
        v3 = v40;
        v4 = v41;
        result = v9;
        if ((v15 & 0x8000000000000000) != 0)
          goto LABEL_84;
      }
      else
      {
        if (!v12)
          goto LABEL_27;
        v46 = v3[2];
        v18 = v11[4] == v6 && v11[5] == v8;
        if (v18 || (v19 = *v7, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          v15 = 0;
        }
        else
        {
          if (v12 == 1)
            goto LABEL_27;
          v32 = v11[6] == v6 && v11[7] == v8;
          if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            v15 = 1;
          }
          else
          {
            if (v12 == 2)
              goto LABEL_27;
            v33 = v11[8] == v6 && v11[9] == v8;
            if (!v33 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            {
              v43 = v11;
              v34 = v11 + 11;
              v35 = 3;
              while (1)
              {
                v6 = v19;
                v11 = v43;
                if (v12 == v35)
                  break;
                if (*(v34 - 1) == v19 && *v34 == v8)
                {
                  v15 = v35;
                  goto LABEL_21;
                }
                v15 = v35++;
                v34 += 2;
                if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  goto LABEL_21;
              }
LABEL_27:
              v28 = v11[2];
              swift_bridgeObjectRetain();
              v27 = v9;
              swift_unknownObjectRetain();
              if (!v28)
                goto LABEL_47;
              v29 = v11[4] == v6 && v11[5] == v8;
              if (v29 || (v30 = v6, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
              {
                v22 = 0;
                goto LABEL_34;
              }
              if (v28 == 1)
              {
LABEL_47:
                swift_bridgeObjectRetain();
                swift_unknownObjectRetain();
                v26 = 0;
LABEL_7:
                swift_unknownObjectRetain();
                specialized OrderedSet._appendNew(_:in:)(v6, v8, v26);
                swift_unknownObjectRetain();
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
LABEL_8:
                specialized ContiguousArray._endMutation()();
                swift_unknownObjectRelease_n();
                swift_bridgeObjectRelease_n();
                goto LABEL_9;
              }
              if (v11[6] == v6 && v11[7] == v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                v22 = 1;
              }
              else
              {
                if (v28 == 2)
                  goto LABEL_47;
                if ((v11[8] != v6 || v11[9] != v8) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                {
                  v37 = v11 + 11;
                  v38 = 3;
                  while (1)
                  {
                    v6 = v30;
                    if (v28 == v38)
                      goto LABEL_47;
                    if (*(v37 - 1) == v30 && *v37 == v8)
                    {
                      v22 = v38;
                      goto LABEL_34;
                    }
                    v22 = v38++;
                    v37 += 2;
                    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      goto LABEL_34;
                  }
                }
                v22 = 2;
              }
LABEL_34:
              swift_bridgeObjectRetain();
              swift_unknownObjectRetain();
LABEL_35:
              v31 = *v4;
              swift_unknownObjectRetain();
              result = swift_isUniquelyReferenced_nonNull_native();
              *v4 = v31;
              if ((result & 1) == 0)
                specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v31);
              if ((v22 & 0x8000000000000000) != 0)
                goto LABEL_86;
              if (v22 >= *(_QWORD *)(v31 + 16))
                goto LABEL_87;
              swift_unknownObjectRetain();
              swift_unknownObjectRelease();
              *(_QWORD *)(v31 + 8 * v22 + 32) = v27;
              goto LABEL_8;
            }
            v15 = 2;
          }
        }
LABEL_21:
        swift_bridgeObjectRetain();
        result = swift_unknownObjectRetain();
        if ((v15 & 0x8000000000000000) != 0)
        {
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
          return result;
        }
      }
      v20 = *(_QWORD *)(v46 + 16);
      swift_unknownObjectRelease();
      result = swift_bridgeObjectRelease();
      if (v15 >= v20)
        goto LABEL_85;
LABEL_9:
      v5 = v47 + 1;
      if (v47 + 1 == v45)
        return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t Graph.convertColors(to:)(CGColorSpace *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD v15[5];
  char v16;
  CGColorSpace *v17;

  v17 = a1;
  result = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v5 = v1;
    v6 = result + 32;
    swift_bridgeObjectRetain_n();
    v7 = 0;
    while (1)
    {
      v8 = v6 + 48 * v7;
      v9 = *(_QWORD *)(v8 + 24);
      if (v9 == -7)
      {
        if ((uint64_t)++v7 >= v4)
          return swift_bridgeObjectRelease_n();
      }
      else
      {
        v11 = *(_QWORD *)v8;
        v10 = *(_QWORD *)(v8 + 8);
        v12 = *(_QWORD *)(v8 + 16);
        v13 = *(_BYTE *)(v8 + 40);
        v14 = *(_QWORD *)(v8 + 32);
        v15[0] = v11;
        v15[1] = v10;
        v15[2] = v12;
        v15[3] = v9;
        v15[4] = v14;
        v16 = v13;
        outlined copy of NodePersonality(v11);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        closure #1 in Graph.convertColors(to:)((uint64_t)v15, v17, v5);
        if (v2)
        {
          outlined consume of NodePersonality(v11);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        ++v7;
        outlined consume of NodePersonality(v11);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((uint64_t)v7 >= v4)
          return swift_bridgeObjectRelease_n();
      }
      if (v7 >= v4)
      {
        __break(1u);
        return swift_bridgeObjectRelease_n();
      }
    }
  }
  return result;
}

uint64_t closure #2 in GraphCompiler.functionGraph(for:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  uint64_t v34;
  _QWORD v35[5];
  uint64_t v36;
  Swift::Int v37[5];
  unint64_t v38;

  v5 = (_QWORD *)*a1;
  v37[3] = type metadata accessor for RESurfaceShaderFunctionNode();
  v37[4] = (Swift::Int)&protocol witness table for RESurfaceShaderFunctionNode;
  v37[0] = (Swift::Int)v5;
  swift_retain();
  v6 = MetalShaderProgram.topologicalSort(from:)(v37);
  result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v37);
  if (v2)
    return result;
  v8 = MEMORY[0x24BEE4AF8];
  v38 = MEMORY[0x24BEE4AF8];
  v9 = *(_QWORD *)(v6 + 16);
  if (v9)
  {
    v10 = v6 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of MetalFunctionNode(v10, (uint64_t)v37);
      outlined init with copy of MetalFunctionNode((uint64_t)v37, (uint64_t)v35);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetalFunctionNode);
      type metadata accessor for MetalFunctionParameterNode();
      if ((swift_dynamicCast() & 1) == 0)
        v36 = 0;
      v11 = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v37);
      v3 = v36;
      if (v36)
      {
        MEMORY[0x24954B1A8](v11);
        if (*(_QWORD *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v10 += 40;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
    v8 = v38;
  }
  swift_bridgeObjectRelease();
  v35[0] = MEMORY[0x24BEE4B08];
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    if (v12)
      goto LABEL_14;
  }
  else
  {
    v12 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v12)
    {
LABEL_14:
      if (v12 < 1)
        goto LABEL_37;
      v13 = 0;
      do
      {
        if ((v8 & 0xC000000000000001) != 0)
        {
          v3 = MEMORY[0x24954B748](v13, v8);
        }
        else
        {
          v3 = *(_QWORD *)(v8 + 8 * v13 + 32);
          swift_retain();
        }
        ++v13;
        v14 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 192))();
        specialized Set._Variant.insert(_:)(v37, v14, v15);
        swift_release();
        swift_bridgeObjectRelease();
      }
      while (v12 != v13);
      swift_bridgeObjectRelease_n();
      v16 = v35[0];
      goto LABEL_23;
    }
  }
  swift_bridgeObjectRelease_n();
  v16 = MEMORY[0x24BEE4B08];
LABEL_23:
  v17 = *(_QWORD *)(v16 + 16);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(name: String, type: MetalDataType)>);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_245FBECD0;
  v18 = v5[5];
  v19 = v5[6];
  *(_QWORD *)(v12 + 32) = v5[4];
  *(_QWORD *)(v12 + 40) = v18;
  *(_QWORD *)(v12 + 48) = v19;
  v8 = v5[8];
  if (!v8)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    goto LABEL_31;
  }
  v3 = v5[7];
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of (name: String, type: MetalDataType)?(v3, v8);
  if (v17 <= 1)
    goto LABEL_29;
  v20 = one-time initialization token for uint8;
  swift_bridgeObjectRetain();
  if (v20 != -1)
    goto LABEL_38;
  while (1)
  {
    type metadata accessor for MetalDataType.Pointer();
    swift_allocObject();
    v21 = (_QWORD *)swift_retain();
    v22 = specialized MetalDataType.Pointer.init(to:isConst:addressSpace:)(v21, 0, 0);
    swift_release();
    v24 = *(_QWORD *)(v12 + 16);
    v23 = *(_QWORD *)(v12 + 24);
    if (v24 >= v23 >> 1)
      v12 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, (_QWORD *)v12);
    *(_QWORD *)(v12 + 16) = v24 + 1;
    v25 = (_QWORD *)(v12 + 24 * v24);
    v25[4] = v3;
    v25[5] = v8;
    v25[6] = v22;
LABEL_29:
    swift_release();
    swift_bridgeObjectRelease();
LABEL_31:
    v26 = one-time initialization token for void;
    swift_bridgeObjectRetain();
    if (v26 != -1)
      swift_once();
    v27 = *(_QWORD *)(a2 + 48);
    if (!__OFADD__(v27, 1))
      break;
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    swift_once();
  }
  v29 = v5[2];
  v28 = (void *)v5[3];
  v30 = static MetalDataType.void;
  *(_QWORD *)(a2 + 48) = v27 + 1;
  type metadata accessor for MetalFunctionDefinitionNode();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  v31 = specialized MetalFunctionDefinitionNode.init(id:argumentTypes:resultType:functionName:specifier:)(v27, v12, v30, v29, v28, 0, 0);
  swift_release();
  v32 = specialized MetalShaderProgram.add<A>(_:)((uint64_t)v31);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v32 + 240))(0x6863746974735B5BLL, 0xEE005D5D656C6261);
  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 264))(v12);
  swift_beginAccess();
  v33 = *(void (**)(uint64_t))(*(_QWORD *)v32 + 168);
  v34 = swift_bridgeObjectRetain();
  v33(v34);
  return swift_release();
}

uint64_t closure #1 in GraphCompiler.replaceGettersWithFunctionCalls(in:)(__int128 *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v7;
  __int128 v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  unint64_t v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD v115[6];
  _BYTE v116[8];
  uint64_t v117;
  __int128 v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  unint64_t v141;
  _QWORD v142[5];
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  unint64_t v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  __int128 v158;
  _BYTE v159[25];
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[3];
  unint64_t v164;

  v4 = v3;
  v7 = *a1;
  v8 = a1[1];
  *(_OWORD *)&v159[9] = *(__int128 *)((char *)a1 + 25);
  v158 = v7;
  *(_OWORD *)v159 = v8;
  outlined init with take of NodePersonality(&v158, &v162);
  result = (uint64_t)outlined init with take of NodePersonality(&v162, v163);
  v10 = v163[0];
  if (v163[0] >> 61 != 4)
    return result;
  v163[0] &= 0x1FFFFFFFFFFFFFFFuLL;
  v12 = *(_QWORD *)(v10 + 16);
  v11 = *(_QWORD *)(v10 + 24);
  v13 = *((_QWORD *)&v158 + 1);
  v161 = *((_QWORD *)&v158 + 1);
  if (!*(_QWORD *)(*((_QWORD *)&v158 + 1) + 16))
    return result;
  v109 = a2;
  type metadata accessor for MetalDataType();
  result = swift_dynamicCastClass();
  if (!result)
    return result;
  v99 = a3;
  v14 = *(uint64_t (**)(uint64_t))(*(_QWORD *)result + 88);
  swift_retain_n();
  swift_bridgeObjectRetain();
  v15 = swift_bridgeObjectRetain();
  v16 = v14(v15);
  specialized Sequence.first(where:)(v16, v12, v11, v115);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  outlined init with take of MetalFunctionNode?((uint64_t)v115, (uint64_t)&v122, &demangling cache variable for type metadata for DataTypeProperty?);
  if (!*((_QWORD *)&v122 + 1))
  {
    swift_bridgeObjectRelease();
    return swift_release_n();
  }
  v124 = v122;
  v17 = v123;
  ShaderGraphNode.out.getter((uint64_t)v116);
  if (v4)
  {
    v129 = v124;
    outlined release of String((uint64_t)&v129);
    swift_release();
    v130 = v17;
    v18 = &v130;
LABEL_7:
    outlined release of [Input]((uint64_t)v18);
    swift_release_n();
    return swift_bridgeObjectRelease();
  }
  v102 = v17;
  v19 = v117;
  v134 = v118;
  outlined release of String((uint64_t)&v134);
  type metadata accessor for MetalDataType.Struct();
  v20 = swift_dynamicCastClass();
  if (!v20)
  {
    lazy protocol witness table accessor for type GraphCompilerErrors and conformance GraphCompilerErrors();
    swift_allocError();
    *(_QWORD *)v41 = 0xD000000000000030;
    *(_QWORD *)(v41 + 8) = 0x8000000245FCAE80;
    *(_BYTE *)(v41 + 16) = 2;
    swift_willThrow();
    swift_release();
    v125 = v124;
    outlined release of String((uint64_t)&v125);
    swift_release();
    v126 = v17;
    v18 = &v126;
    goto LABEL_7;
  }
  v21 = v20;
  lazy protocol witness table accessor for type String and conformance String();
  swift_retain();
  v98 = v19;
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v22 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v24 = v23;
  swift_bridgeObjectRelease();
  v112 = *(_QWORD *)(v21 + 24);
  v114 = *(_QWORD *)(v21 + 32);
  swift_bridgeObjectRetain();
  v25._countAndFlagsBits = 95;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 95;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  v28._countAndFlagsBits = v22;
  v28._object = v24;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = v112;
  *(_QWORD *)(v29 + 24) = v114;
  *(_QWORD *)(v29 + 32) = v98;
  v164 = v29 | 0x2000000000000000;
  v30 = *(_QWORD *)(v13 + 16);
  v101 = v13;
  if (v30)
  {
    v31 = v13;
    v32 = MEMORY[0x24BEE4AF8];
    swift_retain();
    outlined retain of [Input]((uint64_t)&v161);
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30, 0);
    v33 = v32;
    v34 = (uint64_t *)(v31 + 56);
    do
    {
      v35 = *(v34 - 2);
      v36 = *(v34 - 1);
      v37 = *v34;
      v39 = *(_QWORD *)(v33 + 16);
      v38 = *(_QWORD *)(v33 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v39 >= v38 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
      *(_QWORD *)(v33 + 16) = v39 + 1;
      v40 = (_QWORD *)(v33 + 24 * v39);
      v40[4] = v36;
      v40[5] = v37;
      v40[6] = v35;
      v34 += 7;
      --v30;
    }
    while (v30);
    outlined release of [Input]((uint64_t)&v161);
  }
  else
  {
    swift_retain();
    v33 = MEMORY[0x24BEE4AF8];
  }
  v42 = *(_QWORD *)v159;
  v160 = *(_QWORD *)v159;
  v43 = *(_QWORD *)(*(_QWORD *)v159 + 16);
  v44 = MEMORY[0x24BEE4AF8];
  v100 = *(_QWORD *)v159;
  if (v43)
  {
    v113 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43, 0);
    v44 = v113;
    v45 = (uint64_t *)(v42 + 56);
    do
    {
      v46 = *(v45 - 2);
      v47 = *(v45 - 1);
      v48 = *v45;
      v50 = *(_QWORD *)(v113 + 16);
      v49 = *(_QWORD *)(v113 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v50 >= v49 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1);
      *(_QWORD *)(v113 + 16) = v50 + 1;
      v51 = (_QWORD *)(v113 + 24 * v50);
      v51[4] = v47;
      v51[5] = v48;
      v51[6] = v46;
      v45 += 7;
      --v43;
    }
    while (v43);
    outlined release of [Input]((uint64_t)&v160);
  }
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(*(_QWORD *)(v109 + 40), v33, v44, v164, v109 + 64, v109, &v119);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v133 = v120;
  v52 = v102;
  v105 = *(_QWORD *)(v120 + 16);
  if (!v105)
    goto LABEL_41;
  v103 = v120 + 32;
  swift_bridgeObjectRetain();
  v53 = 0;
  v54 = v101;
  while (2)
  {
    v56 = (uint64_t *)(v103 + 56 * v53);
    v57 = *v56;
    v58 = v56[1];
    v59 = v56[2];
    v60 = v56[3];
    v61 = v56[4];
    v62 = *((_BYTE *)v56 + 40);
    v63 = v56[6];
    *(_QWORD *)&v152 = v57;
    *((_QWORD *)&v152 + 1) = v58;
    v153 = v59;
    v154 = v60;
    v155 = v61;
    v156 = v62;
    v157 = v63;
    v64 = *(_QWORD *)(v54 + 16);
    if (!v64)
      goto LABEL_29;
    v107 = v53;
    v65 = (_QWORD *)(v101 + 80);
    do
    {
      v66 = *(v65 - 6);
      v67 = *(v65 - 5);
      v69 = *(v65 - 4);
      v68 = *(v65 - 3);
      v70 = *(v65 - 2);
      v71 = *((_BYTE *)v65 - 8);
      v72 = *v65;
      if (v69 == v59 && v68 == v60)
      {
        v55 = v60;
LABEL_27:
        v145 = v66;
        v146 = v67;
        v147 = v59;
        v148 = v55;
        v149 = v70;
        v150 = v71;
        v151 = v72;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdge(from:to:)((uint64_t)&v145, &v152);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_28;
      }
      v110 = *(v65 - 6);
      v164 = *v65;
      v55 = v68;
      v74 = v59;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v59 = v69;
        v72 = v164;
        v66 = v110;
        goto LABEL_27;
      }
      v65 += 7;
      --v64;
      v59 = v74;
    }
    while (v64);
    v145 = v110;
    v146 = v67;
    v147 = v69;
    v148 = v55;
    v149 = v70;
    v150 = v71;
    v151 = v164;
LABEL_28:
    v53 = v107;
    v52 = v102;
    v54 = v101;
LABEL_29:
    if (++v53 != v105)
      continue;
    break;
  }
  outlined release of [Input]((uint64_t)&v133);
LABEL_41:
  v132 = v121;
  v106 = *(_QWORD *)(v121 + 16);
  if (!v106)
    goto LABEL_58;
  v104 = v121 + 32;
  swift_bridgeObjectRetain();
  v75 = 0;
  v76 = v100;
  while (2)
  {
    v78 = (uint64_t *)(v104 + 56 * v75);
    v79 = *v78;
    v80 = v78[1];
    v81 = v78[2];
    v82 = v78[3];
    v83 = v78[4];
    v84 = *((_BYTE *)v78 + 40);
    v85 = v78[6];
    v142[0] = v79;
    v142[1] = v80;
    v142[2] = v81;
    v142[3] = v82;
    v142[4] = v83;
    v143 = v84;
    v144 = v85;
    v86 = *(_QWORD *)(v76 + 16);
    if (!v86)
      goto LABEL_46;
    v108 = v75;
    v87 = (_QWORD *)(v100 + 80);
    while (2)
    {
      v88 = *(v87 - 6);
      v89 = *(v87 - 5);
      v91 = *(v87 - 4);
      v90 = *(v87 - 3);
      v92 = *(v87 - 2);
      v93 = *((_BYTE *)v87 - 8);
      v94 = *v87;
      if (v91 == v81 && v90 == v82)
      {
        v77 = v82;
LABEL_44:
        v135 = v88;
        v136 = v89;
        v137 = v81;
        v138 = v77;
        v139 = v92;
        v140 = v93;
        v141 = v94;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdges(from:to:)((uint64_t)&v135, (uint64_t)v142);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_45;
      }
      v111 = *(v87 - 6);
      v164 = *v87;
      v96 = v90;
      v97 = v81;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v81 = v91;
        v94 = v164;
        v77 = v96;
        v88 = v111;
        goto LABEL_44;
      }
      v87 += 7;
      --v86;
      v81 = v97;
      if (v86)
        continue;
      break;
    }
    v135 = v111;
    v136 = v89;
    v137 = v91;
    v138 = v96;
    v139 = v92;
    v140 = v93;
    v141 = v164;
LABEL_45:
    v75 = v108;
    v76 = v100;
LABEL_46:
    if (++v75 != v106)
      continue;
    break;
  }
  outlined release of [Input]((uint64_t)&v132);
  v52 = v102;
LABEL_58:
  specialized Graph.remove(_:)(*(uint64_t *)&v159[8]);
  swift_release();
  swift_release();
  v127 = v124;
  outlined release of String((uint64_t)&v127);
  swift_release();
  v128 = v52;
  outlined release of [Input]((uint64_t)&v128);
  outlined init with take of NodePersonality(&v119, &v131);
  outlined release of NodePersonality(&v131);
  outlined release of [Input]((uint64_t)&v133);
  outlined release of [Input]((uint64_t)&v132);
  swift_bridgeObjectRelease();
  swift_release_n();
  result = swift_release();
  if (__OFADD__(*v99, 1))
    __break(1u);
  else
    ++*v99;
  return result;
}

uint64_t closure #1 in GraphCompiler.replaceMetalFunctionsWithStitchedNodes(in:)(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  int64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  int64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  int64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  int64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  _QWORD v100[5];
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;

  v2 = *(_QWORD **)result;
  if (*(_QWORD *)result >> 61 != 1)
    return result;
  v3 = *(_QWORD *)(result + 8);
  v4 = *(int64_t **)(result + 16);
  v73 = *(_QWORD *)(result + 24);
  v5 = 0xD000000000000018;
  v6 = v2[2];
  v7 = v2[3];
  v74 = v2[4];
  v8 = 0xD000000000000012;
  v9 = 0x8000000245FCAFF0;
  v10 = v6 == 1935763810 && v7 == 0xE400000000000000;
  if (v10
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || (v8 = 0xD00000000000001BLL, v9 = 0x8000000245FCAFD0, v6 == 0x5F646F6C5F6E696DLL) && v7 == 0xED0000706D616C63
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || (v8 = 0xD000000000000013, v9 = 0x8000000245FCAFB0, v6 == 0x6C6576656CLL) && v7 == 0xE500000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v5 = v8;
  }
  else
  {
    v9 = 0x8000000245FCAF90;
    if ((v6 != 0x746E656964617267 || v7 != 0xEA00000000006432)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v9 = 0x8000000245FCAF70;
      if ((v6 != 0x746E656964617267 || v7 != 0xEA00000000006433)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        v5 = 0xD00000000000001ALL;
        v9 = 0x8000000245FCAF50;
        if (v6 != 0x746E656964617267 || v7 != 0xEC00000065627563)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
            return result;
        }
      }
    }
  }
  v85 = v9;
  v11 = *(_QWORD *)(v3 + 16);
  v75 = v3;
  v77 = v4;
  if (v11)
  {
    *(_QWORD *)&v110 = MEMORY[0x24BEE4AF8];
    swift_retain();
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    v12 = v110;
    v13 = (uint64_t *)(v3 + 56);
    do
    {
      v14 = *(v13 - 2);
      v15 = *(v13 - 1);
      v16 = *v13;
      *(_QWORD *)&v110 = v12;
      v18 = *(_QWORD *)(v12 + 16);
      v17 = *(_QWORD *)(v12 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        v12 = v110;
      }
      *(_QWORD *)(v12 + 16) = v18 + 1;
      v19 = (_QWORD *)(v12 + 24 * v18);
      v19[4] = v15;
      v19[5] = v16;
      v19[6] = v14;
      v13 += 7;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
    v4 = v77;
  }
  else
  {
    swift_retain();
    v12 = MEMORY[0x24BEE4AF8];
  }
  v20 = v4[2];
  v21 = MEMORY[0x24BEE4AF8];
  if (v20)
  {
    *(_QWORD *)&v110 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
    v21 = v110;
    v22 = v4 + 7;
    do
    {
      v23 = *(v22 - 2);
      v24 = *(v22 - 1);
      v25 = *v22;
      *(_QWORD *)&v110 = v21;
      v27 = *(_QWORD *)(v21 + 16);
      v26 = *(_QWORD *)(v21 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v27 >= v26 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
        v21 = v110;
      }
      *(_QWORD *)(v21 + 16) = v27 + 1;
      v28 = (_QWORD *)(v21 + 24 * v27);
      v28[4] = v24;
      v28[5] = v25;
      v28[6] = v23;
      v22 += 7;
      --v20;
    }
    while (v20);
    v4 = v77;
    swift_bridgeObjectRelease();
  }
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = v5;
  *(_QWORD *)(v29 + 24) = v85;
  *(_QWORD *)(v29 + 32) = v74;
  v30 = *(_QWORD *)(a2 + 40);
  swift_retain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v30, v12, v21, v29 | 0x2000000000000000, a2 + 64, a2, &v88);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v116 = v89;
  v81 = *(_QWORD *)(v89 + 16);
  if (!v81)
    goto LABEL_44;
  v78 = v89 + 32;
  swift_bridgeObjectRetain();
  v31 = 0;
  v32 = v75;
  while (2)
  {
    v34 = (uint64_t *)(v78 + 56 * v31);
    v35 = *v34;
    v36 = v34[1];
    v37 = v34[2];
    v38 = v34[3];
    v39 = v34[4];
    v40 = *((_BYTE *)v34 + 40);
    v41 = v34[6];
    *(_QWORD *)&v110 = v35;
    *((_QWORD *)&v110 + 1) = v36;
    v111 = v37;
    v112 = v38;
    v113 = v39;
    v114 = v40;
    v115 = v41;
    v42 = *(_QWORD *)(v32 + 16);
    if (!v42)
      goto LABEL_32;
    v83 = v31;
    v43 = (_QWORD *)(v75 + 80);
    do
    {
      v44 = *(v43 - 6);
      v45 = *(v43 - 5);
      v46 = *(v43 - 4);
      v47 = *(v43 - 2);
      v48 = *((_BYTE *)v43 - 8);
      v49 = *v43;
      if (v46 == v37 && *(v43 - 3) == v38)
      {
        v33 = v38;
LABEL_30:
        v103 = v44;
        v104 = v45;
        v105 = v37;
        v106 = v33;
        v107 = v47;
        v108 = v48;
        v109 = v49;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdge(from:to:)((uint64_t)&v103, &v110);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_31;
      }
      v86 = *(v43 - 6);
      v51 = *(v43 - 3);
      v52 = v37;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v37 = v46;
        v44 = v86;
        v33 = v51;
        goto LABEL_30;
      }
      v43 += 7;
      --v42;
      v37 = v52;
    }
    while (v42);
    v103 = v86;
    v104 = v45;
    v105 = v46;
    v106 = v51;
    v107 = v47;
    v108 = v48;
    v109 = v49;
LABEL_31:
    v32 = v75;
    v31 = v83;
LABEL_32:
    if (++v31 != v81)
      continue;
    break;
  }
  outlined release of [Input]((uint64_t)&v116);
  v4 = v77;
LABEL_44:
  v92 = v90;
  v82 = *(_QWORD *)(v90 + 16);
  if (!v82)
    goto LABEL_61;
  v79 = v90 + 32;
  swift_bridgeObjectRetain();
  v53 = 0;
  v76 = v4 + 10;
  while (2)
  {
    v55 = (uint64_t *)(v79 + 56 * v53);
    v56 = *v55;
    v57 = v55[1];
    v58 = v55[2];
    v59 = v55[3];
    v60 = v55[4];
    v61 = *((_BYTE *)v55 + 40);
    v62 = v55[6];
    v100[0] = v56;
    v100[1] = v57;
    v100[2] = v58;
    v100[3] = v59;
    v100[4] = v60;
    v101 = v61;
    v102 = v62;
    v63 = v4[2];
    if (!v63)
      goto LABEL_49;
    v84 = v53;
    v64 = v76;
    while (2)
    {
      v65 = *(v64 - 6);
      v66 = *(v64 - 5);
      v67 = *(v64 - 4);
      v68 = *(v64 - 2);
      v69 = *((_BYTE *)v64 - 8);
      v70 = *v64;
      if (v67 == v58 && *(v64 - 3) == v59)
      {
        v54 = v59;
LABEL_47:
        v93 = v65;
        v94 = v66;
        v95 = v58;
        v96 = v54;
        v97 = v68;
        v98 = v69;
        v99 = v70;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdges(from:to:)((uint64_t)&v93, (uint64_t)v100);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_48;
      }
      v87 = *(v64 - 6);
      v54 = *(v64 - 3);
      v72 = v58;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v58 = v67;
        v65 = v87;
        goto LABEL_47;
      }
      v64 += 7;
      --v63;
      v58 = v72;
      if (v63)
        continue;
      break;
    }
    v93 = v87;
    v94 = v66;
    v95 = v67;
    v96 = v54;
    v97 = v68;
    v98 = v69;
    v99 = v70;
LABEL_48:
    v4 = v77;
    v53 = v84;
LABEL_49:
    if (++v53 != v82)
      continue;
    break;
  }
  outlined release of [Input]((uint64_t)&v92);
LABEL_61:
  specialized Graph.remove(_:)(v73);
  swift_release();
  outlined init with take of NodePersonality(&v88, &v91);
  outlined release of NodePersonality(&v91);
  outlined release of [Input]((uint64_t)&v116);
  return outlined release of [Input]((uint64_t)&v92);
}

void closure #2 in GraphCompiler.samplerName(for:in:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  const char *v41;
  Swift::String v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  Swift::String v59;
  Swift::String v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  unint64_t v72;
  Swift::String v73;
  uint64_t v74;
  Swift::String v75;
  Swift::String v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  float v83;
  float v84;
  float v85;
  Swift::String v86;
  Swift::String v87;
  Swift::String v88;
  int v89[2];
  int v90[2];
  uint64_t *v91;
  uint64_t (*v92)(uint64_t);
  int v93;
  uint64_t *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106[14];
  _BYTE v107[80];
  uint64_t v108[14];
  uint64_t v109[14];
  char v110[8];
  uint64_t v111;
  char v112[8];
  uint64_t v113;
  char v114[8];
  uint64_t v115;
  _QWORD v116[5];
  char v117;
  uint64_t v118;
  _QWORD v119[5];
  char v120;
  uint64_t v121;
  _QWORD v122[5];
  char v123;
  uint64_t v124;
  uint64_t v125;

  v5 = a3;
  v6 = *a1;
  v7 = (unint64_t)*a1 >> 61;
  if ((_DWORD)v7 != 1)
  {
    if (!(_DWORD)v7)
    {
      v91 = a3;
      v8 = *(void **)(v6 + 16);
      v9 = *(void **)(v6 + 24);
      v10 = *(_QWORD *)(v6 + 32);
      v11 = *(_QWORD *)(v6 + 40);
      v13 = *(_QWORD *)(v6 + 48);
      v12 = *(_QWORD *)(v6 + 56);
      v15 = *(_QWORD *)(v6 + 64);
      v14 = *(_QWORD *)(v6 + 72);
      v16 = *(unsigned __int8 *)(v6 + 80);
      v17 = *(_QWORD *)(v6 + 88);
      v93 = v15;
      if (v16 == 6)
      {
        v94 = a4;
        v95 = 0;
        v125 = v4;
        v96 = 0xE000000000000000;
        v92 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 144);
        v18 = v10;
        outlined copy of SGDataTypeStorage(v8, v9, v10, v11, v13, v12, v15, v14, 6);
        outlined copy of SGDataTypeStorage(v8, v9, v18, v11, v13, v12, v15, v14, 6);
        v19 = swift_retain();
        v20 = v92(v19);
        if (v20)
        {
          v21 = *(_QWORD *)(v20 + 24);
          v22 = *(void **)(v20 + 32);
          swift_bridgeObjectRetain();
          swift_release();
          v23._countAndFlagsBits = v21;
          v23._object = v22;
          String.append(_:)(v23);
          swift_bridgeObjectRelease();
          v24._countAndFlagsBits = 95;
          v24._object = (void *)0xE100000000000000;
          String.append(_:)(v24);
          v25._countAndFlagsBits = (uint64_t)v8;
          v25._object = v9;
          String.append(_:)(v25);
          outlined consume of SGDataTypeStorage(v8, v9, v18, v11, v13, v12, v93, v14, 6);
          outlined consume of SGDataTypeStorage(v8, v9, v18, v11, v13, v12, v93, v14, 6);
          swift_release();
LABEL_6:
          v26 = v95;
          v27 = v96;
LABEL_7:
          *v94 = v26;
          v94[1] = v27;
          return;
        }
        goto LABEL_66;
      }
      *(_QWORD *)v90 = *(_QWORD *)(v6 + 32);
      outlined copy of SGDataTypeStorage(v8, v9, v10, v11, v13, v12, v15, v14, v16);
      swift_retain();
      _StringGuts.grow(_:)(25);
      v42._countAndFlagsBits = 0xD000000000000017;
      v42._object = (void *)0x8000000245FCB0C0;
      String.append(_:)(v42);
      v95 = (uint64_t)v8;
      v96 = (unint64_t)v9;
      v97 = *(_QWORD *)v90;
      v98 = v11;
      v99 = v13;
      v100 = v12;
      v101 = v15;
      v102 = v14;
      v103 = v16;
      _print_unlocked<A, B>(_:_:)();
      lazy protocol witness table accessor for type GraphCompilerErrors and conformance GraphCompilerErrors();
      v43 = swift_allocError();
      *(_QWORD *)v44 = 0;
      *(_QWORD *)(v44 + 8) = 0xE000000000000000;
      v45 = v43;
      *(_BYTE *)(v44 + 16) = 0;
      swift_willThrow();
      swift_release();
      outlined consume of SGDataTypeStorage(v8, v9, v90[0], v11, v13, v12, v93, v14, v16);
      goto LABEL_20;
    }
    v95 = 0;
    v96 = 0xE000000000000000;
    v104 = v6;
    _print_unlocked<A, B>(_:_:)();
LABEL_39:
    v61 = v96;
    lazy protocol witness table accessor for type GraphCompilerErrors and conformance GraphCompilerErrors();
    v45 = swift_allocError();
    *(_QWORD *)v62 = v95;
    *(_QWORD *)(v62 + 8) = v61;
    *(_BYTE *)(v62 + 16) = 0;
    swift_willThrow();
    goto LABEL_40;
  }
  v94 = a4;
  v125 = v4;
  v29 = a1[1];
  v30 = *(_QWORD *)(v6 + 16);
  v31 = *(void **)(v6 + 24);
  v32 = v30 == 0x73696E615F78616DLL && v31 == (void *)0xEE0079706F72746FLL;
  if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    if (*(_QWORD *)(v29 + 16))
    {
      v33 = *(_QWORD *)(v29 + 40);
      v34 = *(_QWORD *)(v29 + 48);
      v35 = *(_QWORD *)(v29 + 56);
      v36 = *(_QWORD *)(v29 + 64);
      v37 = *(_BYTE *)(v29 + 72);
      v38 = *(_QWORD *)(v29 + 80);
      v116[0] = *(_QWORD *)(v29 + 32);
      v116[1] = v33;
      v116[2] = v34;
      v116[3] = v35;
      v116[4] = v36;
      v117 = v37;
      v118 = v38;
      swift_retain();
      swift_bridgeObjectRetain();
      Graph.edge(to:)((uint64_t)v116, v106);
      v39 = v106[0];
      outlined init with take of MetalFunctionNode?((uint64_t)v106, (uint64_t)v110, &demangling cache variable for type metadata for Edge?);
      if (!v111)
      {
LABEL_17:
        swift_bridgeObjectRelease();
        swift_release();
        v95 = 0;
        v96 = 0xE000000000000000;
        _StringGuts.grow(_:)(40);
        swift_bridgeObjectRelease();
        v40 = 0xD000000000000026;
        v41 = "missing max_anisotropy value node for ";
LABEL_38:
        v95 = v40;
        v96 = (unint64_t)(v41 - 32) | 0x8000000000000000;
        v60._countAndFlagsBits = v30;
        v60._object = v31;
        String.append(_:)(v60);
        goto LABEL_39;
      }
      if (v39 == -7)
      {
        outlined release of Edge?(v106);
        goto LABEL_17;
      }
      if ((v39 & 0x8000000000000000) == 0)
      {
        v54 = *(_QWORD *)(a2 + 64);
        if (v39 < *(_QWORD *)(v54 + 16))
        {
          v55 = *(_QWORD *)(v54 + 48 * v39 + 32);
          outlined copy of NodePersonality(v55);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined release of Edge?(v106);
          swift_bridgeObjectRelease();
          swift_release();
          v56 = v125;
          specialized GraphCompiler.constantValue(from:)(v55, (uint64_t)v107);
          v125 = v56;
          if (v56)
          {
            outlined consume of NodePersonality(v55);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v45 = v125;
          }
          else
          {
            v57 = SGDataTypeStorage.bitPattern.getter();
            if ((v57 & 0x100000000) == 0)
            {
              v58 = ((_BYTE)v57 - 1) & 0xF;
              outlined retain of SGDataTypeStorage((uint64_t)v107, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of SGDataTypeStorage);
              _StringGuts.grow(_:)(17);
              swift_bridgeObjectRelease();
              v95 = 0x73696E615F78616DLL;
              v96 = 0xEF5F79706F72746FLL;
              LODWORD(v104) = v58;
              v59._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v59);
              swift_bridgeObjectRelease();
              outlined retain of SGDataTypeStorage((uint64_t)v107, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of SGDataTypeStorage);
              outlined consume of NodePersonality(v55);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_6;
            }
            v95 = 0;
            v96 = 0xE000000000000000;
            outlined retain of SGDataTypeStorage((uint64_t)v107, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of SGDataTypeStorage);
            _StringGuts.grow(_:)(27);
            v104 = 0;
            v105 = 0xE000000000000000;
            v75._countAndFlagsBits = 0xD000000000000018;
            v75._object = (void *)0x8000000245FCB0A0;
            String.append(_:)(v75);
            outlined init with take of SGDataTypeStorage((uint64_t)v107, (uint64_t)&v95);
            _print_unlocked<A, B>(_:_:)();
            v76._countAndFlagsBits = 32;
            v76._object = (void *)0xE100000000000000;
            String.append(_:)(v76);
            v77 = v104;
            v78 = v105;
            lazy protocol witness table accessor for type GraphCompilerErrors and conformance GraphCompilerErrors();
            v79 = swift_allocError();
            *(_QWORD *)v80 = v77;
            *(_QWORD *)(v80 + 8) = v78;
            *(_BYTE *)(v80 + 16) = 0;
            swift_willThrow();
            outlined retain of SGDataTypeStorage((uint64_t)v107, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of SGDataTypeStorage);
            outlined consume of NodePersonality(v55);
            v45 = v79;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          goto LABEL_40;
        }
        goto LABEL_60;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  v46 = v30 == 0x6D616C635F646F6CLL && v31 == (void *)0xE900000000000070;
  if (!v46 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    v95 = 0;
    v96 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    v40 = 0xD000000000000015;
    v41 = "unsupported function ";
    goto LABEL_38;
  }
  if (!*(_QWORD *)(v29 + 16))
    goto LABEL_61;
  v47 = *(_QWORD *)(v29 + 40);
  v48 = *(_QWORD *)(v29 + 48);
  v49 = *(_QWORD *)(v29 + 56);
  v50 = *(_QWORD *)(v29 + 64);
  v51 = *(_BYTE *)(v29 + 72);
  v52 = *(_QWORD *)(v29 + 80);
  v122[0] = *(_QWORD *)(v29 + 32);
  v122[1] = v47;
  v122[2] = v48;
  v122[3] = v49;
  v122[4] = v50;
  v123 = v51;
  v124 = v52;
  swift_retain();
  swift_bridgeObjectRetain();
  Graph.edge(to:)((uint64_t)v122, v108);
  v53 = v108[0];
  outlined init with take of MetalFunctionNode?((uint64_t)v108, (uint64_t)v114, &demangling cache variable for type metadata for Edge?);
  if (!v115)
  {
LABEL_30:
    swift_bridgeObjectRelease();
    swift_release();
    v95 = 0;
    v96 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v40 = 0xD00000000000001FLL;
    v41 = "missing lod_min value node for ";
    goto LABEL_38;
  }
  if (v53 == -7)
  {
    outlined release of Edge?(v108);
    goto LABEL_30;
  }
  if ((v53 & 0x8000000000000000) != 0)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  v91 = v5;
  v63 = *(_QWORD *)(a2 + 64);
  v64 = *(_QWORD *)(v63 + 16);
  if (v53 >= v64)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  v65 = *(_QWORD *)(v63 + 32 + 48 * v53);
  *(_QWORD *)v89 = v63 + 32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v65);
  outlined release of Edge?(v108);
  swift_bridgeObjectRelease();
  swift_release();
  if (*(_QWORD *)(v29 + 16) < 2uLL)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  v66 = *(_QWORD *)(v29 + 96);
  v67 = *(_QWORD *)(v29 + 104);
  v68 = *(_QWORD *)(v29 + 112);
  v69 = *(_QWORD *)(v29 + 120);
  v70 = *(_BYTE *)(v29 + 128);
  v71 = *(_QWORD *)(v29 + 136);
  v119[0] = *(_QWORD *)(v29 + 88);
  v119[1] = v66;
  v119[2] = v67;
  v119[3] = v68;
  v119[4] = v69;
  v120 = v70;
  v121 = v71;
  swift_retain();
  swift_bridgeObjectRetain();
  Graph.edge(to:)((uint64_t)v119, v109);
  v72 = v109[0];
  outlined init with take of MetalFunctionNode?((uint64_t)v109, (uint64_t)v112, &demangling cache variable for type metadata for Edge?);
  if (!v113)
  {
LABEL_47:
    swift_bridgeObjectRelease();
    swift_release();
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v73._countAndFlagsBits = v30;
    v73._object = v31;
    String.append(_:)(v73);
    lazy protocol witness table accessor for type GraphCompilerErrors and conformance GraphCompilerErrors();
    v45 = swift_allocError();
    *(_QWORD *)v74 = 0xD00000000000001FLL;
    *(_QWORD *)(v74 + 8) = 0x8000000245FCB050;
    *(_BYTE *)(v74 + 16) = 0;
    swift_willThrow();
    outlined consume of NodePersonality(v65);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_20:
    v5 = v91;
LABEL_40:
    *v5 = v45;
    return;
  }
  if (v72 == -7)
  {
    outlined release of Edge?(v109);
    goto LABEL_47;
  }
  if (v72 < v64)
  {
    v81 = *(_QWORD *)(*(_QWORD *)v89 + 48 * v72);
    outlined copy of NodePersonality(v81);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined release of Edge?(v109);
    swift_bridgeObjectRelease();
    swift_release();
    v82 = v125;
    specialized GraphCompiler.floatValue(from:)(v65);
    if (!v82)
    {
      v84 = v83;
      specialized GraphCompiler.floatValue(from:)(v81);
      v125 = 0;
      v85 = v84;
      if ((~LODWORD(v84) & 0x7F800000) != 0)
      {
        v85 = 65504.0;
        if (v84 <= 65504.0)
        {
          if (v84 >= -65504.0)
            v85 = v84;
          else
            v85 = -65504.0;
        }
      }
      v86._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v86);
      swift_bridgeObjectRelease();
      v87._countAndFlagsBits = 95;
      v87._object = (void *)0xE100000000000000;
      String.append(_:)(v87);
      *(float *)&v104 = v85;
      v88._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v88);
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(v65);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(v81);
      swift_bridgeObjectRelease();
      v26 = 0x6D616C635F646F6CLL;
      v27 = 0xEA00000000005F70;
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    outlined consume of NodePersonality(v81);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v65);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v45 = v82;
    goto LABEL_40;
  }
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
}

unint64_t closure #1 in closure #3 in GraphCompiler.extractSamplerNodes(in:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t result;
  char v10;

  v6 = *a4;
  v7 = (_QWORD *)a4[1];
  v8 = a4[2];
  swift_bridgeObjectRetain();
  result = specialized OrderedSet._find(_:)(a1, a2, v6, v7);
  if ((v10 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)(v8 + 16))
  {
    swift_unknownObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    return a1;
  }
  __break(1u);
  return result;
}

uint64_t GraphCompiler.extract(node:from:withName:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return specialized GraphCompiler.extract(node:from:withName:)(a1, a2, a3, a4);
}

uint64_t closure #2 in GraphCompiler.extract(node:from:withName:)(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD v48[5];
  char v49;
  uint64_t v50;
  _QWORD v51[5];
  char v52;
  uint64_t v53;
  uint64_t v54;

  v3 = *a2;
  if (!*(_QWORD *)(*a2 + 16))
    return result;
  v6 = *(_QWORD *)(result + 16);
  v54 = *(_QWORD *)(result + 24);
  v7 = *(_QWORD *)(result + 56);
  v8 = *(_QWORD *)(result + 72);
  v9 = *(_QWORD *)(result + 80);
  result = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)result);
  if ((v10 & 1) == 0)
    return result;
  v11 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * result);
  if (v11 == -7)
    return result;
  if ((v11 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_39;
  }
  v12 = *(_QWORD *)(a3 + 64);
  if (v11 >= *(_QWORD *)(v12 + 16))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v13 = v12 + 48 * v11;
  result = *(_QWORD *)(v13 + 48);
  v14 = *(_QWORD *)(result + 16);
  if (v14)
  {
    v42 = v7;
    v43 = a2;
    v44 = v9;
    v45 = v8;
    v41 = a3;
    v46 = *(_QWORD *)(v13 + 32);
    for (i = (_QWORD *)(swift_bridgeObjectRetain() + 80); ; i += 7)
    {
      v16 = *(i - 6);
      v47 = *(i - 5);
      v17 = *(i - 4);
      v18 = *(i - 3);
      v19 = *(i - 2);
      v20 = *((_BYTE *)i - 8);
      v21 = *i;
      if (v17 == v6 && v18 == v54)
        break;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_16;
      if (!--v14)
        return swift_bridgeObjectRelease();
    }
    v17 = v6;
    v18 = v54;
LABEL_16:
    v48[0] = v16;
    v48[1] = v47;
    v48[2] = v17;
    v48[3] = v18;
    v48[4] = v19;
    v49 = v20;
    v50 = v21;
    swift_bridgeObjectRetain();
    v23 = v46;
    outlined copy of NodePersonality(v46);
    v24 = *v43;
    v25 = *(_QWORD *)(*v43 + 16);
    swift_retain();
    v54 = v18;
    swift_bridgeObjectRetain();
    if (!v25
      || (result = specialized __RawDictionaryStorage.find<A>(_:)(v42), (v26 & 1) == 0)
      || (v27 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * result), v27 == -7))
    {
      swift_bridgeObjectRelease();
      swift_release();
LABEL_20:
      outlined consume of NodePersonality(v23);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    if ((v27 & 0x8000000000000000) == 0)
    {
      v28 = *(_QWORD *)(v41 + 64);
      if (v27 < *(_QWORD *)(v28 + 16))
      {
        v29 = v28 + 48 * v27;
        v30 = *(_QWORD *)(*(_QWORD *)(v29 + 40) + 16);
        if (v30)
        {
          v40 = *(_QWORD *)(v29 + 32);
          v31 = (_QWORD *)(swift_bridgeObjectRetain() + 80);
          while (1)
          {
            v32 = *(v31 - 6);
            v33 = *(v31 - 5);
            v34 = *(v31 - 4);
            v35 = *(v31 - 3);
            v36 = *(v31 - 2);
            v37 = *((_BYTE *)v31 - 8);
            v38 = *v31;
            if (v34 == v45 && v35 == v44)
              break;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              goto LABEL_37;
            v31 += 7;
            if (!--v30)
            {
              swift_release();
              swift_bridgeObjectRelease();
              v23 = v46;
              goto LABEL_35;
            }
          }
          v34 = v45;
          v35 = v44;
LABEL_37:
          v51[0] = v32;
          v51[1] = v33;
          v51[2] = v34;
          v51[3] = v35;
          v51[4] = v36;
          v52 = v37;
          v53 = v38;
          swift_bridgeObjectRetain();
          outlined copy of NodePersonality(v40);
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain_n();
          swift_bridgeObjectRetain_n();
          Graph.connect(_:to:)((uint64_t)v48, (unint64_t)v51);
          swift_bridgeObjectRelease_n();
          swift_release_n();
          swift_bridgeObjectRelease();
          swift_release();
          outlined consume of NodePersonality(v40);
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v23 = v46;
        }
        else
        {
          swift_release();
LABEL_35:
          swift_bridgeObjectRelease();
        }
        goto LABEL_20;
      }
      goto LABEL_41;
    }
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
  }
  return result;
}

void closure #1 in Graph.convertColors(to:)(uint64_t a1, CGColorSpace *a2, uint64_t a3)
{
  unint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  CGColorRef CopyByMatchingToColorSpace;
  CGColorRef v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  double v23;
  unint64_t v24;
  float v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  CFStringRef v31;
  __CFString *v32;
  __CFString *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  Swift::String v37;
  Swift::String v38;
  __int128 v39;
  _OWORD *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  CGColor *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  CFStringRef v55;
  __CFString *v56;
  __CFString *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  __int128 v62;
  char v63;
  Swift::String v64;
  Swift::String v65;
  unint64_t v66;
  unint64_t v67;
  _OWORD *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v124;
  uint64_t v125;
  Swift::String v126;
  Swift::String v127;
  unint64_t v128;
  unint64_t v129;
  _OWORD *v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  CGColorRef v140;
  int v141;
  int v142;
  uint64_t v143;
  char v144;
  void *v145;
  void *v146;
  int v147;
  int v148;
  int v149;
  int v150;
  char v151;
  int v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  CGColorSpace *space;
  CGColorSpaceRef spacea[2];
  unsigned int spaceb;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char v206;
  uint64_t v207;
  _QWORD v208[5];
  char v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char v216;
  uint64_t v217;
  __int128 v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char v222;
  uint64_t v223;

  v3 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 >> 61)
    return;
  v162 = *(_QWORD *)(a1 + 8);
  v164 = *(_QWORD *)(a1 + 16);
  v5 = *(void **)(v3 + 16);
  v4 = *(void **)(v3 + 24);
  v7 = *(_QWORD *)(v3 + 32);
  v6 = *(_QWORD *)(v3 + 40);
  v9 = *(_QWORD *)(v3 + 48);
  v8 = *(_QWORD *)(v3 + 56);
  v11 = *(_QWORD *)(v3 + 64);
  v10 = *(_QWORD *)(v3 + 72);
  v12 = *(unsigned __int8 *)(v3 + 80);
  if (v12 == 22)
  {
    v166 = *(_QWORD *)a1;
    space = a2;
    v156 = *(_QWORD *)(a1 + 32);
    v158 = *(_BYTE *)(a1 + 40);
    v143 = *(_QWORD *)(a1 + 24);
    v152 = 1;
    v13 = 3;
  }
  else
  {
    if (v12 != 23)
      return;
    v166 = *(_QWORD *)a1;
    space = a2;
    v156 = *(_QWORD *)(a1 + 32);
    v158 = *(_BYTE *)(a1 + 40);
    v143 = *(_QWORD *)(a1 + 24);
    v152 = 0;
    v13 = 4;
  }
  v154 = v13;
  v14 = *(_BYTE *)(v3 + 80);
  outlined copy of SGDataTypeStorage(v5, v4, v7, v6, v9, v8, v11, v10, v12);
  CopyByMatchingToColorSpace = CGColorCreateCopyByMatchingToColorSpace(space, kCGRenderingIntentDefault, (CGColorRef)v5, 0);
  v149 = v9;
  v150 = v8;
  v147 = v7;
  v148 = v6;
  v145 = v5;
  v146 = v4;
  v144 = v14;
  if (!CopyByMatchingToColorSpace)
  {
    v26 = v7;
    v27 = v11;
    outlined copy of SGDataTypeStorage(v5, v4, v26, v6, v9, v8, v11, v10, v14);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v166);
    type metadata accessor for CGColorRef(0);
    v28 = String.init<A>(describing:)();
    v30 = v29;
    *(_QWORD *)&v180 = 0;
    *((_QWORD *)&v180 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    v193 = 0xD00000000000002FLL;
    v194 = 0x8000000245FCB120;
    v31 = CGColorSpaceCopyName(space);
    v32 = (__CFString *)v31;
    if (v31)
    {
      *(_QWORD *)&v180 = v31;
      type metadata accessor for CFStringRef(0);
      v33 = v32;
      v34 = String.init<A>(describing:)();
      v36 = v35;
    }
    else
    {
      v34 = 0x3E6C696E3CLL;
      v36 = (void *)0xE500000000000000;
    }
    *(_QWORD *)&v173 = v166;
    *((_QWORD *)&v173 + 1) = v162;
    v174 = v164;
    v175 = v143;
    v176 = v156;
    v177 = v158;
    v178 = v28;
    v179 = v30;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_((uint64_t)&v173);
    v64._countAndFlagsBits = v34;
    v64._object = v36;
    String.append(_:)(v64);

    swift_bridgeObjectRelease();
    v65._countAndFlagsBits = 39;
    v65._object = (void *)0xE100000000000000;
    String.append(_:)(v65);
    v66 = v193;
    v67 = v194;
    outlined init with take of UserGraphError.ErrorType(&v173, (uint64_t)&v180);
    *(_QWORD *)&v192 = v66;
    *((_QWORD *)&v192 + 1) = v67;
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    swift_allocError();
    *v68 = v180;
    v69 = v184;
    v71 = v181;
    v70 = v182;
    v68[3] = v183;
    v68[4] = v69;
    v68[1] = v71;
    v68[2] = v70;
    v72 = v188;
    v74 = v185;
    v73 = v186;
    v68[7] = v187;
    v68[8] = v72;
    v68[5] = v74;
    v68[6] = v73;
    v75 = v192;
    v77 = v189;
    v76 = v190;
    v68[11] = v191;
    v68[12] = v75;
    v68[9] = v77;
    v68[10] = v76;
    swift_willThrow();
    outlined consume of SGDataTypeStorage(v5, v146, v147, v148, v149, v150, v27, v10, v144);
    return;
  }
  v141 = v10;
  v142 = v11;
  v16 = CopyByMatchingToColorSpace;
  v17 = CGColorRef.components.getter();
  if (!v17)
  {
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi47_((uint64_t)&v173);
    *(_QWORD *)&v180 = 0;
    *((_QWORD *)&v180 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(57);
    v37._countAndFlagsBits = 0xD000000000000036;
    v37._object = (void *)0x8000000245FCB150;
    String.append(_:)(v37);
    v193 = (unint64_t)v16;
    type metadata accessor for CGColorRef(0);
    _print_unlocked<A, B>(_:_:)();
    v38._countAndFlagsBits = 39;
    v38._object = (void *)0xE100000000000000;
    String.append(_:)(v38);
    v39 = v180;
    outlined init with take of UserGraphError.ErrorType(&v173, (uint64_t)&v180);
    v192 = v39;
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    swift_allocError();
    *v40 = v180;
    v41 = v184;
    v43 = v181;
    v42 = v182;
    v40[3] = v183;
    v40[4] = v41;
    v40[1] = v43;
    v40[2] = v42;
    v44 = v188;
    v46 = v185;
    v45 = v186;
    v40[7] = v187;
    v40[8] = v44;
    v40[5] = v46;
    v40[6] = v45;
    v47 = v192;
    v49 = v189;
    v48 = v190;
    v40[11] = v191;
    v40[12] = v47;
    v40[9] = v49;
    v40[10] = v48;
    swift_willThrow();
    outlined consume of SGDataTypeStorage(v5, v4, v7, v6, v149, v8, v11, v10, v14);

    return;
  }
  v18 = v17;
  v140 = v16;
  v19 = *(_QWORD *)(v17 + 16);
  if (v19)
  {
    *(_QWORD *)&v180 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
    v20 = 0;
    v21 = v180;
    v22 = *(_QWORD *)(v180 + 16);
    do
    {
      v23 = *(double *)(v18 + 8 * v20 + 32);
      *(_QWORD *)&v180 = v21;
      v24 = *(_QWORD *)(v21 + 24);
      if (v22 >= v24 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v22 + 1, 1);
        v21 = v180;
      }
      ++v20;
      v25 = v23;
      *(_QWORD *)(v21 + 16) = v22 + 1;
      *(float *)(v21 + 4 * v22++ + 32) = v25;
    }
    while (v19 != v20);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v21 = MEMORY[0x24BEE4AF8];
  }
  v50 = *(_QWORD *)(v21 + 16);
  if (v50 < v154)
  {
    swift_bridgeObjectRelease();
    outlined copy of NodePersonality(v166);
    type metadata accessor for CGColorRef(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v51 = v16;
    v52 = String.init<A>(describing:)();
    v54 = v53;
    *(_QWORD *)&v180 = 0;
    *((_QWORD *)&v180 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    v193 = 0xD000000000000027;
    v194 = 0x8000000245FCB190;
    v55 = CGColorSpaceCopyName(space);
    v56 = (__CFString *)v55;
    if (v55)
    {
      *(_QWORD *)&v180 = v55;
      type metadata accessor for CFStringRef(0);
      v57 = v56;
      v58 = String.init<A>(describing:)();
      v60 = v59;
    }
    else
    {
      v58 = 0x3E6C696E3CLL;
      v60 = (void *)0xE500000000000000;
    }
    *(_QWORD *)&v173 = v166;
    *((_QWORD *)&v173 + 1) = v162;
    v174 = v164;
    v175 = v143;
    v176 = v156;
    v177 = v158;
    v178 = v52;
    v179 = v54;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_((uint64_t)&v173);
    v126._countAndFlagsBits = v58;
    v126._object = v60;
    String.append(_:)(v126);

    swift_bridgeObjectRelease();
    v127._countAndFlagsBits = 39;
    v127._object = (void *)0xE100000000000000;
    String.append(_:)(v127);
    v128 = v193;
    v129 = v194;
    outlined init with take of UserGraphError.ErrorType(&v173, (uint64_t)&v180);
    *(_QWORD *)&v192 = v128;
    *((_QWORD *)&v192 + 1) = v129;
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    swift_allocError();
    *v130 = v180;
    v131 = v184;
    v133 = v181;
    v132 = v182;
    v130[3] = v183;
    v130[4] = v131;
    v130[1] = v133;
    v130[2] = v132;
    v134 = v188;
    v136 = v185;
    v135 = v186;
    v130[7] = v187;
    v130[8] = v134;
    v130[5] = v136;
    v130[6] = v135;
    v137 = v192;
    v139 = v189;
    v138 = v190;
    v130[11] = v191;
    v130[12] = v137;
    v130[9] = v139;
    v130[10] = v138;
    swift_willThrow();
    outlined consume of SGDataTypeStorage(v145, v146, v147, v148, v149, v150, v142, v10, v144);

    return;
  }
  if (!v152)
  {
    if (one-time initialization token for color4 == -1)
    {
      if (!v50)
      {
LABEL_78:
        __break(1u);
        goto LABEL_79;
      }
LABEL_31:
      if (v50 != 1)
      {
        if (v50 >= 3)
        {
          if (v50 != 3)
          {
            v61 = static MetalDataType.color4;
            spaceb = *(_DWORD *)(v21 + 32);
            v159 = *(_DWORD *)(v21 + 36);
            v167 = *(_QWORD *)(v21 + 40);
            swift_retain();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v78 = __PAIR64__(v159, spaceb);
            *((_QWORD *)&v78 + 1) = v167;
            *(_OWORD *)spacea = v78;
            v63 = 9;
            goto LABEL_35;
          }
LABEL_81:
          __break(1u);
          return;
        }
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }
LABEL_79:
      __break(1u);
      goto LABEL_80;
    }
LABEL_77:
    swift_once();
    v50 = *(_QWORD *)(v21 + 16);
    if (!v50)
      goto LABEL_78;
    goto LABEL_31;
  }
  if (one-time initialization token for color3 == -1)
  {
    if (v50)
      goto LABEL_24;
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  swift_once();
  v50 = *(_QWORD *)(v21 + 16);
  if (!v50)
    goto LABEL_74;
LABEL_24:
  if (v50 == 1)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  if (v50 < 3)
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  v61 = static MetalDataType.color3;
  *(_QWORD *)&v62 = *(_QWORD *)(v21 + 32);
  *((_QWORD *)&v62 + 1) = *(unsigned int *)(v21 + 40);
  *(_OWORD *)spacea = v62;
  swift_retain();
  swift_bridgeObjectRelease();
  v63 = 8;
LABEL_35:
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  v79 = swift_allocObject();
  *(_OWORD *)(v79 + 16) = xmmword_245FBECD0;
  *(_QWORD *)(v79 + 32) = 7632239;
  *(_QWORD *)(v79 + 40) = 0xE300000000000000;
  *(_QWORD *)(v79 + 48) = v61;
  v80 = swift_allocObject();
  *(_OWORD *)(v80 + 16) = *(_OWORD *)spacea;
  *(_OWORD *)(v80 + 32) = 0u;
  *(_OWORD *)(v80 + 48) = 0u;
  *(_OWORD *)(v80 + 64) = 0u;
  *(_BYTE *)(v80 + 80) = v63;
  *(_QWORD *)(v80 + 88) = v61;
  v81 = *(_QWORD *)(a3 + 40);
  swift_retain_n();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v81, MEMORY[0x24BEE4AF8], v79, v80, a3 + 64, a3, &v195);
  v151 = v63;
  outlined copy of SGDataTypeStorage(spacea[0], spacea[1], 0, 0, 0, 0, 0, 0, v63);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v200 = v196;
  v82 = v11;
  v83 = v150;
  v157 = *(_QWORD *)(v196 + 16);
  if (!v157)
    goto LABEL_52;
  v153 = v196 + 32;
  swift_bridgeObjectRetain();
  v84 = 0;
  while (2)
  {
    v86 = (uint64_t *)(v153 + 56 * v84);
    v87 = *v86;
    v88 = v86[1];
    v89 = v86[2];
    v90 = v86[3];
    v91 = v86[4];
    v92 = *((_BYTE *)v86 + 40);
    v93 = v86[6];
    *(_QWORD *)&v218 = v87;
    *((_QWORD *)&v218 + 1) = v88;
    v219 = v89;
    v220 = v90;
    v221 = v91;
    v222 = v92;
    v223 = v93;
    v94 = *(_QWORD *)(v162 + 16);
    if (!v94)
      goto LABEL_40;
    v160 = v84;
    v95 = (_QWORD *)(v162 + 80);
    do
    {
      v96 = *(v95 - 6);
      v97 = *(v95 - 5);
      v98 = *(v95 - 4);
      v99 = *(v95 - 2);
      v100 = *((_BYTE *)v95 - 8);
      v101 = *v95;
      if (v98 == v89 && *(v95 - 3) == v90)
      {
        v85 = v90;
LABEL_38:
        v211 = v96;
        v212 = v97;
        v213 = v89;
        v214 = v85;
        v215 = v99;
        v216 = v100;
        v217 = v101;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdge(from:to:)((uint64_t)&v211, &v218);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_39;
      }
      v168 = *(v95 - 6);
      v85 = *(v95 - 3);
      v103 = v89;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v89 = v98;
        v96 = v168;
        goto LABEL_38;
      }
      v95 += 7;
      --v94;
      v89 = v103;
    }
    while (v94);
    v211 = v168;
    v212 = v97;
    v213 = v98;
    v214 = v85;
    v215 = v99;
    v216 = v100;
    v217 = v101;
LABEL_39:
    v84 = v160;
LABEL_40:
    if (++v84 != v157)
      continue;
    break;
  }
  outlined release of [Input]((uint64_t)&v200);
  v82 = v142;
  v83 = v150;
LABEL_52:
  v199 = v197;
  v104 = v151;
  v161 = *(_QWORD *)(v197 + 16);
  if (!v161)
    goto LABEL_69;
  v155 = v197 + 32;
  swift_bridgeObjectRetain();
  v105 = 0;
  while (2)
  {
    v107 = (uint64_t *)(v155 + 56 * v105);
    v108 = *v107;
    v109 = v107[1];
    v110 = v107[2];
    v111 = v107[3];
    v112 = v107[4];
    v113 = *((_BYTE *)v107 + 40);
    v114 = v107[6];
    v208[0] = v108;
    v208[1] = v109;
    v208[2] = v110;
    v208[3] = v111;
    v208[4] = v112;
    v209 = v113;
    v210 = v114;
    v115 = *(_QWORD *)(v164 + 16);
    if (!v115)
      goto LABEL_57;
    v163 = v105;
    v116 = (_QWORD *)(v164 + 80);
    while (2)
    {
      v117 = *(v116 - 6);
      v118 = *(v116 - 5);
      v119 = *(v116 - 4);
      v120 = *(v116 - 2);
      v121 = *((_BYTE *)v116 - 8);
      v122 = *v116;
      if (v119 == v110 && *(v116 - 3) == v111)
      {
        v106 = v111;
LABEL_55:
        v201 = v117;
        v202 = v118;
        v203 = v110;
        v204 = v106;
        v205 = v120;
        v206 = v121;
        v207 = v122;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdges(from:to:)((uint64_t)&v201, (uint64_t)v208);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_56;
      }
      v169 = *(v116 - 6);
      v124 = *(v116 - 3);
      v125 = v110;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v110 = v119;
        v106 = v124;
        v117 = v169;
        goto LABEL_55;
      }
      v116 += 7;
      --v115;
      v110 = v125;
      if (v115)
        continue;
      break;
    }
    v201 = v169;
    v202 = v118;
    v203 = v119;
    v204 = v124;
    v205 = v120;
    v206 = v121;
    v207 = v122;
LABEL_56:
    v104 = v151;
    v105 = v163;
LABEL_57:
    if (++v105 != v161)
      continue;
    break;
  }
  outlined release of [Input]((uint64_t)&v199);
  v82 = v142;
  v83 = v150;
LABEL_69:
  specialized Graph.remove(_:)(v143);
  outlined consume of SGDataTypeStorage(v145, v146, v147, v148, v149, v83, v82, v141, v144);
  outlined consume of SGDataTypeStorage(spacea[0], spacea[1], 0, 0, 0, 0, 0, 0, v104);

  swift_release();
  outlined init with take of NodePersonality(&v195, &v198);
  outlined release of NodePersonality(&v198);
  outlined release of [Input]((uint64_t)&v200);
  outlined release of [Input]((uint64_t)&v199);
}

uint64_t specialized closure #1 in OrderedSet.removeSubrange(_:)(uint64_t result, _QWORD *a2, uint64_t a3, unint64_t a4, int64_t a5)
{
  int64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if ((a4 & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v5 = a5;
  v6 = a4;
  v8 = *(_QWORD *)(a3 + 8);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9 < a4 || (uint64_t)v9 < a5)
    goto LABEL_16;
  if (a5 < 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v12 = (uint64_t *)result;
  v13 = a5 - a4;
  if (a5 == a4)
  {
LABEL_13:
    swift_retain();
    specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(v6, v5, v8, v12, a2);
    return swift_release();
  }
  if (a5 > a4)
  {
    swift_retain();
    v22 = v6;
    v14 = (uint64_t *)(v8 + 16 * v6 + 40);
    while (1)
    {
      v15 = *(v14 - 1);
      v16 = *v14;
      v17 = *(_QWORD *)(a3 + 8);
      swift_bridgeObjectRetain();
      swift_retain();
      specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v15, v16, v17, v12, (uint64_t)a2);
      v19 = v18;
      v21 = v20;
      result = swift_release();
      if ((v19 & 1) != 0)
        break;
      v14 += 2;
      specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(v21, v12, a2, a3);
      swift_bridgeObjectRelease();
      if (!--v13)
      {
        swift_release();
        v8 = *(_QWORD *)(a3 + 8);
        v6 = v22;
        v5 = a5;
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_15;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(void (*a1)(void))
{
  a1();
  return _swift_stdlib_bridgeErrorToNSError();
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  void *v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = (void *)a4();
  v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  v8 = *a2;
  if (*a2)
  {
    *v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {

  }
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v5 = v4;
  v6 = *(_QWORD *)(a3 + 16);
  if (v6)
  {
    v7 = a3;
    v8 = a2;
    v9 = *(_QWORD *)(a2 + 16);
    swift_retain();
    swift_retain();
    result = swift_retain();
    v11 = 0;
    v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v26 = v7;
    v27 = v8;
    while (v9)
    {
      v29 = v6;
      v14 = *(_QWORD *)(v8 + v11 + 32);
      v15 = *(_QWORD *)(v8 + v11 + 40);
      v16 = *(_QWORD *)(v7 + v11 + 32);
      v17 = *(unsigned __int8 *)(v7 + v11 + 40);
      swift_bridgeObjectRetain();
      outlined copy of MetalLibrary(v16, v17);
      v18 = a4(v14, v15, v16, v17);
      if (v5)
      {
        swift_bridgeObjectRelease();
        outlined consume of MetalLibrary(v16, v17);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        return (uint64_t)v12;
      }
      v21 = v18;
      v22 = v19;
      v23 = v20;
      swift_bridgeObjectRelease();
      result = outlined consume of MetalLibrary(v16, v17);
      if (v22)
      {
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
          v12 = (_QWORD *)result;
        }
        v25 = v12[2];
        v24 = v12[3];
        if (v25 >= v24 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v12);
          v12 = (_QWORD *)result;
        }
        v12[2] = v25 + 1;
        v13 = &v12[3 * v25];
        v13[4] = v21;
        v13[5] = v22;
        v13[6] = v23;
      }
      v7 = v26;
      v8 = v27;
      --v9;
      v11 += 16;
      v6 = v29 - 1;
      v5 = 0;
      if (v29 == 1)
      {
        swift_release();
        swift_release();
        swift_release();
        return (uint64_t)v12;
      }
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::UInt v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  char v39;
  char v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  int v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[5];
  char v76;
  uint64_t v77;
  uint64_t v78;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return MEMORY[0x24BEE4AF8];
  v3 = a1 + 32;
  v4 = *a2;
  v5 = (_QWORD *)a2[1];
  v69 = v5 + 4;
  v66 = *a2 + 32;
  v67 = (_QWORD *)(*a2 + 16);
  v62 = a2[2];
  swift_bridgeObjectRetain();
  v6 = 0;
  v57 = v5 + 7;
  v58 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v59 = v2;
  v61 = v3;
  v63 = v5;
  v64 = v4;
  while (2)
  {
    v7 = v3 + 56 * v6;
    v9 = *(_QWORD *)v7;
    v8 = *(_QWORD *)(v7 + 8);
    v10 = *(_QWORD *)(v7 + 16);
    v11 = *(_QWORD *)(v7 + 24);
    v12 = *(_QWORD *)(v7 + 32);
    v13 = *(unsigned __int8 *)(v7 + 40);
    v14 = *(_QWORD *)(v7 + 48);
    v75[0] = v9;
    v75[1] = v8;
    v78 = v8;
    v73 = v10;
    v75[2] = v10;
    v75[3] = v11;
    v75[4] = v12;
    v76 = v13;
    v71 = v14;
    v77 = v14;
    v15 = v5[2];
    v74 = v11;
    if (v4)
    {
      result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v9, (uint64_t)v69, v15, v67, v66);
      if ((v17 & 1) != 0)
        goto LABEL_5;
      if ((result & 0x8000000000000000) != 0)
        goto LABEL_67;
    }
    else
    {
      if (!v15)
        goto LABEL_5;
      if (*v69 == v9)
      {
        result = 0;
      }
      else
      {
        if (v15 == 1)
          goto LABEL_5;
        if (v5[5] == v9)
        {
          result = 1;
        }
        else
        {
          if (v15 == 2)
            goto LABEL_5;
          if (v5[6] == v9)
          {
            result = 2;
          }
          else
          {
            v54 = 0;
            do
            {
              if (v15 - 3 == v54)
                goto LABEL_5;
              v55 = v57[v54++];
            }
            while (v55 != v9);
            result = v54 + 2;
            if (v54 + 2 < 0)
              goto LABEL_67;
          }
        }
      }
    }
    if (result >= *(_QWORD *)(v62 + 16))
    {
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    v68 = v13;
    v18 = (_QWORD *)(v62 + 32 + 48 * result);
    v19 = v18[3];
    v20 = v18[4];
    v21 = v18[5];
    v70 = v6;
    if (v19)
    {
      v22 = v2;
      v23 = (_QWORD *)(v19 + 16);
      v24 = v19 + 32;
      v25 = *(_QWORD *)(v20 + 16);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      swift_retain();
      swift_retain();
      swift_retain();
      result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v75, v20 + 32, v25, v23, v24);
      if ((v26 & 1) == 0)
      {
        v27 = result;
        v65 = v21;
        v2 = v22;
        v5 = v63;
        v4 = v64;
        if ((result & 0x8000000000000000) == 0)
          goto LABEL_17;
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
      swift_release();
      swift_release();
      v2 = v22;
      v5 = v63;
      v4 = v64;
      v3 = v61;
LABEL_4:
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      v6 = v70;
      goto LABEL_5;
    }
    v65 = v18[5];
    if (!*(_QWORD *)(v20 + 16))
    {
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      swift_retain();
      swift_retain();
LABEL_45:
      swift_release();
      v2 = v59;
      v3 = v61;
      v5 = v63;
      v4 = v64;
      goto LABEL_4;
    }
    v60 = v12;
    v72 = *(_QWORD *)(v20 + 16);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_retain();
    v31 = v72;
    v27 = 0;
    v32 = (_QWORD *)(v20 + 80);
    while (1)
    {
      if (*(v32 - 6) != v9)
        goto LABEL_24;
      v33 = *(v32 - 4);
      v35 = *(v32 - 3);
      v34 = *(v32 - 2);
      v36 = *((_BYTE *)v32 - 8);
      v37 = *v32;
      v38 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*(v32 - 5) + 128);
      swift_retain();
      swift_bridgeObjectRetain();
      if ((v38(v78) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_release();
        v31 = v72;
        goto LABEL_24;
      }
      if (v33 == v73 && v35 == v74)
      {
        swift_bridgeObjectRelease();
        result = swift_release();
        v31 = v72;
      }
      else
      {
        v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        result = swift_release();
        v31 = v72;
        if ((v39 & 1) == 0)
          goto LABEL_24;
      }
      if ((v36 & 1) == 0)
        break;
      v40 = v68;
      if (v37 != v71)
        v40 = 0;
      if ((v40 & 1) != 0)
        goto LABEL_40;
LABEL_24:
      v32 += 7;
      if (v31 == ++v27)
        goto LABEL_45;
    }
    v41 = v68 ^ 1;
    if (v34 != v60)
      v41 = 0;
    if (v41 != 1 || v37 != v71)
      goto LABEL_24;
LABEL_40:
    v2 = v59;
    v5 = v63;
    v4 = v64;
LABEL_17:
    if (v27 >= *(_QWORD *)(v65 + 16))
      goto LABEL_68;
    v28 = (_QWORD *)(v65 + 56 * v27);
    v30 = v28[4];
    v29 = v28[5];
    v78 = v28[7];
    outlined copy of Output?(v30, v29);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    result = swift_release();
    if (!v29)
    {
      swift_bridgeObjectRelease();
LABEL_47:
      swift_release();
      v6 = v70;
      v3 = v61;
LABEL_5:
      if (++v6 == v2)
      {
        swift_bridgeObjectRelease();
        return (unint64_t)v58;
      }
      continue;
    }
    break;
  }
  if (v30 == -7)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_47;
  }
  if ((v30 & 0x8000000000000000) != 0)
    goto LABEL_70;
  v42 = a2[8];
  if (v30 < *(_QWORD *)(v42 + 16))
  {
    v43 = v42 + 48 * v30;
    v44 = *(_QWORD *)(v43 + 32);
    v45 = *(_QWORD *)(v43 + 40);
    v46 = *(_QWORD *)(v43 + 48);
    v47 = *(_QWORD *)(v43 + 56);
    v48 = *(_QWORD *)(v43 + 64);
    v49 = *(_BYTE *)(v43 + 72);
    outlined copy of NodePersonality(v44);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v50 = v58;
    else
      v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v58[2] + 1, 1, v58);
    v6 = v70;
    v52 = v50[2];
    v51 = v50[3];
    if (v52 >= v51 >> 1)
      v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v51 > 1), v52 + 1, 1, v50);
    v50[2] = v52 + 1;
    v58 = v50;
    v53 = &v50[6 * v52];
    v53[4] = v44;
    v53[5] = v45;
    v53[6] = v46;
    v53[7] = v47;
    v53[8] = v48;
    *((_BYTE *)v53 + 72) = v49;
    v2 = v59;
    v3 = v61;
    v5 = v63;
    v4 = v64;
    goto LABEL_5;
  }
LABEL_71:
  __break(1u);
  return result;
}

{
  unint64_t result;
  uint64_t v4;
  uint64_t v6;
  Swift::UInt v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = MEMORY[0x24BEE4AF8];
  v17 = MEMORY[0x24BEE4AF8];
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return result;
  swift_bridgeObjectRetain();
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD *)(a1 + 32 + 8 * v6);
    v8 = (_QWORD *)a2[1];
    v9 = a2[2];
    v10 = v8 + 4;
    v11 = v8[2];
    if (!*a2)
    {
      if (!v11)
        goto LABEL_4;
      if (*v10 == v7)
      {
        result = 0;
      }
      else
      {
        if (v11 == 1)
          goto LABEL_4;
        if (v8[5] == v7)
        {
          result = 1;
        }
        else
        {
          if (v11 == 2)
            goto LABEL_4;
          if (v8[6] != v7)
          {
            v13 = 0;
            v14 = v8 + 7;
            while (v11 - 3 != v13)
            {
              v15 = v14[v13++];
              if (v15 == v7)
              {
                result = v13 + 2;
                if (v13 + 2 < 0)
                  goto LABEL_27;
                goto LABEL_22;
              }
            }
            goto LABEL_4;
          }
          result = 2;
        }
      }
      goto LABEL_22;
    }
    result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v7, (uint64_t)v10, v11, (_QWORD *)(*a2 + 16), *a2 + 32);
    if ((v12 & 1) != 0)
      goto LABEL_4;
    if ((result & 0x8000000000000000) != 0)
      break;
LABEL_22:
    if (result >= *(_QWORD *)(v9 + 16))
      goto LABEL_28;
    v16 = swift_unknownObjectRetain();
    MEMORY[0x24954B1A8](v16);
    if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
LABEL_4:
    if (++v6 == v4)
    {
      swift_bridgeObjectRelease();
      return v17;
    }
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

_QWORD *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, _QWORD *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  _QWORD v23[3];
  __int128 v24;
  char v25;
  _QWORD *v26;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v3 = swift_bridgeObjectRetain();
  v4 = 0;
  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v21 = v3;
  do
  {
    v26 = v5;
    v6 = *(_BYTE *)(v3 + v4 + 88);
    v7 = *(_QWORD *)(v3 + v4 + 56);
    v8 = *(_QWORD *)(v3 + v4 + 64);
    v9 = *(_QWORD *)(v3 + v4 + 40);
    v11 = *(_QWORD *)(v3 + v4 + 32);
    v23[0] = *(_QWORD *)(v3 + v4 + 48);
    v10 = v23[0];
    v23[1] = v7;
    v23[2] = v8;
    v24 = *(_OWORD *)(v3 + v4 + 72);
    v25 = v6;
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12 = a2(v11, v9, v23);
    v14 = v13;
    v16 = v15;
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v14)
    {
      v5 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      v18 = v5[2];
      v17 = v5[3];
      if (v18 >= v17 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v5);
      v5[2] = v18 + 1;
      v19 = &v5[3 * v18];
      v19[4] = v12;
      v19[5] = v14;
      v19[6] = v16;
    }
    else
    {
      v5 = v26;
    }
    v4 += 64;
    --v2;
    v3 = v21;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v5;
}

unint64_t specialized GraphCompiler.constantValue(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;
  __int128 v3;
  __int128 v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;

  if (result >> 61)
  {
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = 1701080942;
    v6._object = (void *)0xE400000000000000;
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type GraphCompilerErrors and conformance GraphCompilerErrors();
    swift_allocError();
    *(_QWORD *)v7 = 0xD00000000000001DLL;
    *(_QWORD *)(v7 + 8) = 0x8000000245FCB0E0;
    *(_BYTE *)(v7 + 16) = 1;
    return swift_willThrow();
  }
  else
  {
    v2 = *(_BYTE *)(result + 80);
    v3 = *(_OWORD *)(result + 32);
    *(_OWORD *)a2 = *(_OWORD *)(result + 16);
    *(_OWORD *)(a2 + 16) = v3;
    v4 = *(_OWORD *)(result + 64);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(result + 48);
    *(_OWORD *)(a2 + 48) = v4;
    *(_BYTE *)(a2 + 64) = v2;
  }
  return result;
}

void specialized GraphCompiler.floatValue(from:)(unint64_t a1)
{
  void *v1;
  int v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15[2];

  if (a1 >> 61)
  {
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._countAndFlagsBits = 1701080942;
    v4._object = (void *)0xE400000000000000;
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type GraphCompilerErrors and conformance GraphCompilerErrors();
    swift_allocError();
    *(_QWORD *)v5 = 0xD00000000000001DLL;
    *(_QWORD *)(v5 + 8) = 0x8000000245FCB0E0;
    *(_BYTE *)(v5 + 16) = 1;
    swift_willThrow();
  }
  else
  {
    v1 = *(void **)(a1 + 16);
    v2 = *(unsigned __int8 *)(a1 + 80);
    if (v2 != 5)
    {
      v14 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)v15 = *(_QWORD *)(a1 + 72);
      v6 = *(_QWORD *)(a1 + 48);
      v13 = *(_QWORD *)(a1 + 56);
      v8 = *(_QWORD *)(a1 + 32);
      v7 = *(_QWORD *)(a1 + 40);
      v9 = *(void **)(a1 + 24);
      outlined copy of SGDataTypeStorage(v1, v9, v8, v7, v6, v13, v14, v15[0], v2);
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      v11._countAndFlagsBits = 1701080942;
      v11._object = (void *)0xE400000000000000;
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type GraphCompilerErrors and conformance GraphCompilerErrors();
      swift_allocError();
      *(_QWORD *)v12 = 0xD000000000000013;
      *(_QWORD *)(v12 + 8) = 0x8000000245FCB100;
      *(_BYTE *)(v12 + 16) = 1;
      swift_willThrow();
      outlined consume of SGDataTypeStorage(v1, v9, v8, v7, v6, v13, v14, v15[0], v2);
    }
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_SSsAE_pTg504_s11d82Graph0B8CompilerV11samplerName33_137984365F15B3FD94CB2D26CA095C9FLL3for2inSSAA0aB4F22V_AA0B0VtKFSSAIKXEfU0_AF0E0VAF0eJ0VTf1cn_nTf4ngg_n(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20[3];
  __int128 v21;
  char v22;
  uint64_t v23[2];
  uint64_t v24;

  v3 = v2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v24 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    v5 = v24;
    for (i = a1 + 40; ; i += 48)
    {
      v10 = *(_QWORD *)(i - 8);
      v9 = *(_QWORD *)i;
      v11 = *(_QWORD *)(i + 8);
      v12 = *(_BYTE *)(i + 32);
      v20[0] = v10;
      v20[1] = v9;
      v20[2] = v11;
      v21 = *(_OWORD *)(i + 16);
      v22 = v12;
      outlined copy of NodePersonality(v10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      closure #2 in GraphCompiler.samplerName(for:in:)(v20, a2, &v19, v23);
      if (v3)
        break;
      v3 = 0;
      outlined consume of NodePersonality(v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v13 = v23[0];
      v14 = v23[1];
      v24 = v5;
      v16 = *(_QWORD *)(v5 + 16);
      v15 = *(_QWORD *)(v5 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        v5 = v24;
      }
      *(_QWORD *)(v5 + 16) = v16 + 1;
      v17 = v5 + 16 * v16;
      *(_QWORD *)(v17 + 32) = v13;
      *(_QWORD *)(v17 + 40) = v14;
      if (!--v4)
        return v5;
    }
    outlined consume of NodePersonality(v10);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v5;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_SS_AHtsAE_pTg504_s11d152Graph0B8CompilerV19extractSamplerNodes33_137984365F15B3FD94CB2D26CA095C9FLL2in4intoyAA0B0Vz_AA17OrderedDictionaryVySSAA12MetalLibraryAELLOGztKFSS_AA0aB4F11VtAPKXEfU0_AF0eJ0VAF0E0VTf1cn_nTf4ngn_n(uint64_t a1, _QWORD *a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v6;
  uint64_t result;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Swift::String v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[9];
  _OWORD v36[3];
  uint64_t v37;

  v4 = v3;
  v6 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v33 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    result = v33;
    v10 = (_BYTE *)(a1 + 72);
    v29 = a2;
    while (1)
    {
      v11 = result;
      v12 = *((_QWORD *)v10 - 5);
      v13 = *((_QWORD *)v10 - 4);
      v14 = *((_QWORD *)v10 - 3);
      v30 = *((_QWORD *)v10 - 1);
      v31 = *((_QWORD *)v10 - 2);
      v32 = *v10;
      v15 = a3[8];
      v16 = a3[9];
      v17 = a3[6];
      v35[7] = a3[7];
      v35[8] = v15;
      v36[0] = v16;
      *(_OWORD *)((char *)v36 + 9) = *(_OWORD *)((char *)a3 + 153);
      v18 = a3[5];
      v35[4] = a3[4];
      v35[5] = v18;
      v35[6] = v17;
      v19 = a3[1];
      v35[0] = *a3;
      v35[1] = v19;
      v20 = a3[3];
      v35[2] = a3[2];
      v35[3] = v20;
      swift_bridgeObjectRetain();
      outlined retain of Graph((uint64_t)v35);
      outlined retain of Graph((uint64_t)v35);
      swift_bridgeObjectRetain();
      outlined copy of NodePersonality(v12);
      v37 = v14;
      swift_bridgeObjectRetain();
      v21 = specialized Sequence.compactMap<A>(_:)(v13, v35);
      outlined release of Graph((uint64_t)v35);
      swift_bridgeObjectRelease();
      outlined retain of Graph((uint64_t)v35);
      outlined retain of RESurfaceShaderMaterial(a2);
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_SSsAE_pTg504_s11d82Graph0B8CompilerV11samplerName33_137984365F15B3FD94CB2D26CA095C9FLL3for2inSSAA0aB4F22V_AA0B0VtKFSSAIKXEfU0_AF0E0VAF0eJ0VTf1cn_nTf4ngg_n(v21, (uint64_t)v35);
      if (v4)
        break;
      outlined release of RESurfaceShaderMaterial(a2);
      outlined release of Graph((uint64_t)v35);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      v22 = BidirectionalCollection<>.joined(separator:)();
      v24 = v23;
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = v22;
      v25._object = v24;
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      outlined release of Graph((uint64_t)v35);
      result = v11;
      v34 = v11;
      v26 = *(_QWORD *)(v11 + 16);
      v27 = *(_QWORD *)(result + 24);
      if (v26 >= v27 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v26 + 1, 1);
        result = v34;
      }
      *(_QWORD *)(result + 16) = v26 + 1;
      v28 = result + (v26 << 6);
      *(_QWORD *)(v28 + 32) = 0x5F72656C706D6173;
      *(_QWORD *)(v28 + 40) = 0xE800000000000000;
      *(_QWORD *)(v28 + 48) = v12;
      *(_QWORD *)(v28 + 56) = v13;
      *(_QWORD *)(v28 + 64) = v37;
      *(_QWORD *)(v28 + 72) = v31;
      v4 = 0;
      *(_QWORD *)(v28 + 80) = v30;
      v10 += 48;
      *(_BYTE *)(v28 + 88) = v32;
      --v6;
      a2 = v29;
      if (!v6)
        return result;
    }
    outlined release of RESurfaceShaderMaterial(a2);
    outlined release of Graph((uint64_t)v35);
    swift_bridgeObjectRelease();
    outlined release of Graph((uint64_t)v35);
    outlined consume of NodePersonality(v12);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized GraphCompiler.extract(node:from:withName:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t result;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t);
  _OWORD v75[9];
  _OWORD v76[2];
  _QWORD v77[3];
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[25];
  _OWORD v81[12];
  uint64_t v82;
  _QWORD v83[25];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _OWORD v93[2];
  unint64_t v94;
  unint64_t v95[3];
  uint64_t v96;
  char v97[8];
  __int128 v98;
  __int128 v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  _QWORD v116[3];
  __int128 v117;
  char v118;
  __int128 v119[4];
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  _OWORD v125[2];
  uint64_t v126[7];
  unint64_t v127;

  v6 = v4;
  Graph.connectedUpstreamSubgraph(rootedAt:)(a1, (uint64_t)v83);
  v7 = v83[0];
  v126[0] = v83[1];
  v126[1] = v83[2];
  v126[2] = v83[3];
  v126[3] = v83[4];
  v126[4] = v83[5];
  v8 = MEMORY[0x24BEE4AF8];
  v94 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  specialized Graph.init(id:label:inputs:outputs:)(0, 1886217588, 0xE400000000000000, v8, v8, (uint64_t)&v84);
  v70 = *(_QWORD *)(v7 + 16);
  if (v70)
  {
    v67 = v4;
    v69 = v7 + 32;
    swift_bridgeObjectRetain();
    v9 = 0;
    while (1)
    {
      v10 = (unint64_t *)(v69 + 48 * v9);
      v12 = *v10;
      v11 = v10[1];
      v13 = v10[2];
      v14 = v10[3];
      v15 = *(_QWORD *)(v11 + 16);
      *(_QWORD *)&v71 = v9;
      v127 = *v10;
      v72 = v14;
      v73 = v13;
      if (v15)
      {
        outlined copy of NodePersonality(v12);
        v83[0] = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0);
        v16 = (_QWORD *)v83[0];
        v17 = (uint64_t *)(v11 + 56);
        do
        {
          v18 = *(v17 - 2);
          v5 = (_QWORD *)*(v17 - 1);
          v19 = *v17;
          v83[0] = v16;
          v21 = v16[2];
          v20 = v16[3];
          swift_retain();
          swift_bridgeObjectRetain();
          if (v21 >= v20 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
            v16 = (_QWORD *)v83[0];
          }
          v16[2] = v21 + 1;
          v22 = &v16[3 * v21];
          v22[4] = v5;
          v22[5] = v19;
          v22[6] = v18;
          v17 += 7;
          --v15;
        }
        while (v15);
        v12 = v127;
        v14 = v72;
        v13 = v73;
        v23 = *(_QWORD *)(v73 + 16);
        if (!v23)
        {
LABEL_17:
          v24 = MEMORY[0x24BEE4AF8];
          goto LABEL_18;
        }
      }
      else
      {
        outlined copy of NodePersonality(v12);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
        v23 = *(_QWORD *)(v13 + 16);
        if (!v23)
          goto LABEL_17;
      }
      v83[0] = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23, 0);
      v24 = v83[0];
      v25 = (uint64_t *)(v13 + 56);
      do
      {
        v26 = *(v25 - 2);
        v5 = (_QWORD *)*(v25 - 1);
        v27 = *v25;
        v83[0] = v24;
        v29 = *(_QWORD *)(v24 + 16);
        v28 = *(_QWORD *)(v24 + 24);
        swift_retain();
        swift_bridgeObjectRetain();
        if (v29 >= v28 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
          v24 = v83[0];
        }
        *(_QWORD *)(v24 + 16) = v29 + 1;
        v30 = (_QWORD *)(v24 + 24 * v29);
        v30[4] = v5;
        v30[5] = v27;
        v30[6] = v26;
        v25 += 7;
        --v23;
      }
      while (v23);
      swift_bridgeObjectRelease();
      v12 = v127;
      v14 = v72;
LABEL_18:
      specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(*((unint64_t *)&v86 + 1), (uint64_t)v16, v24, v12, (uint64_t)&v88, (uint64_t)&v84, v95);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v31 = v94;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v83[0] = v31;
      v34 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
      v35 = *(_QWORD *)(v31 + 16);
      v36 = (v33 & 1) == 0;
      v37 = v35 + v36;
      if (__OFADD__(v35, v36))
      {
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      v38 = v33;
      if (*(_QWORD *)(v31 + 24) >= v37)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, isUniquelyReferenced_nonNull_native);
        v39 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
        if ((v38 & 1) != (v40 & 1))
          goto LABEL_52;
        v34 = v39;
      }
      v41 = v83[0];
      if ((v38 & 1) != 0)
        *(_QWORD *)(*(_QWORD *)(v83[0] + 56) + 8 * v34) = v96;
      else
        specialized _NativeDictionary._insert(at:key:value:)(v34, v14, v96, v83[0]);
      v9 = v71 + 1;
      v94 = v41;
      swift_bridgeObjectRelease();
      outlined init with take of NodePersonality(v95, &v102);
      outlined release of NodePersonality(&v102);
      v101 = v95[1];
      outlined release of [Input]((uint64_t)&v101);
      v100 = v95[2];
      outlined release of [Input]((uint64_t)&v100);
      outlined consume of NodePersonality(v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((_QWORD)v71 + 1 == v70)
      {
        swift_bridgeObjectRelease_n();
        v6 = v67;
        goto LABEL_28;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_28:
  v5 = v116;
  v42 = v6;
  specialized Sequence.forEach(_:)(v126, (uint64_t *)&v94, (uint64_t)&v84);
  type metadata accessor for UserGraphCompiler();
  v43 = swift_allocObject() + 16;
  _s11ShaderGraph04UserB8CompilerC14CompileContextVSgWOi0_((uint64_t)v83);
  outlined init with take of MetalFunctionNode?((uint64_t)v83, v43, (uint64_t *)&demangling cache variable for type metadata for UserGraphCompiler.CompileContext?);
  v124 = v92;
  v125[0] = v93[0];
  *(_OWORD *)((char *)v125 + 9) = *(_OWORD *)((char *)v93 + 9);
  v120 = v88;
  v121 = v89;
  v123 = v91;
  v122 = v90;
  v119[0] = v84;
  v119[1] = v85;
  v119[3] = v87;
  v119[2] = v86;
  type metadata accessor for MetalShaderProgram();
  v34 = swift_allocObject();
  v44 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v34 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v34 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v44);
  *(_QWORD *)(v34 + 32) = v44;
  *(_QWORD *)(v34 + 40) = v44;
  *(_QWORD *)(v34 + 48) = 1;
  outlined retain of Graph((uint64_t)v119);
  v16 = (_QWORD *)UserGraphCompiler.compile(sourceProgram:into:)(v119, v34);
  if (v42)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    outlined release of Graph((uint64_t)v119);
    swift_release();
    outlined release of Graph((uint64_t)v119);
LABEL_38:
    swift_bridgeObjectRelease();
    return (uint64_t)v16;
  }
  swift_release();
  outlined release of Graph((uint64_t)v119);
  v45 = v94;
  if (!*(_QWORD *)(v94 + 16))
    goto LABEL_43;
  v46 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(a1 + 24));
  if ((v47 & 1) == 0)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v48 = *(_QWORD *)(*(_QWORD *)(v45 + 56) + 8 * v46);
  if (v48 == -7)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if ((v48 & 0x8000000000000000) != 0)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v48 >= *(_QWORD *)(v120 + 16))
  {
LABEL_47:
    __break(1u);
LABEL_48:
    swift_once();
LABEL_40:
    v5[6] = static MetalDataType.void;
    v57 = v78;
    v58 = v79;
    __swift_project_boxed_opaque_existential_1(v77, v78);
    v74 = *(uint64_t (**)(uint64_t, uint64_t))(v58 + 16);
    swift_retain();
    v59 = v74(v57, v58);
    v60 = v16[6];
    if (!__OFADD__(v60, 1))
    {
      v61 = v59;
      v16[6] = v60 + 1;
      type metadata accessor for MetalFunctionDefinitionNode();
      swift_allocObject();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      v62 = specialized MetalFunctionDefinitionNode.init(id:argumentTypes:resultType:functionName:specifier:)(v60, (uint64_t)v5, v61, a3, a4, 0, 0);
      swift_release();
      v63 = specialized MetalShaderProgram.add<A>(_:)((uint64_t)v62);
      swift_retain();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v63 + 240))(0x6863746974735B5BLL, 0xEE005D5D656C6261);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>);
      v64 = swift_allocObject();
      *(_OWORD *)(v64 + 16) = v71;
      outlined init with copy of MetalFunctionNode((uint64_t)v77, v64 + 32);
      (*(void (**)(uint64_t))(*(_QWORD *)v63 + 288))(v64);
      outlined consume of NodePersonality(v34);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v77);
      v75[8] = v92;
      v76[0] = v93[0];
      *(_OWORD *)((char *)v76 + 9) = *(_OWORD *)((char *)v93 + 9);
      v75[4] = v88;
      v75[5] = v89;
      v75[6] = v90;
      v75[7] = v91;
      v75[0] = v84;
      v75[1] = v85;
      v75[2] = v86;
      v75[3] = v87;
      outlined release of Graph((uint64_t)v75);
      goto LABEL_38;
    }
    __break(1u);
    goto LABEL_50;
  }
  v127 = v45;
  v49 = v120 + 48 * v48;
  v34 = *(_QWORD *)(v49 + 32);
  v50 = *(_QWORD *)(v49 + 40);
  v51 = *(_QWORD *)(v49 + 48);
  v52 = *(_BYTE *)(v49 + 72);
  v116[0] = v34;
  v116[1] = v50;
  v116[2] = v51;
  v117 = *(_OWORD *)(v49 + 56);
  v118 = v52;
  swift_beginAccess();
  outlined init with take of MetalFunctionNode?(v43, (uint64_t)v80, (uint64_t *)&demangling cache variable for type metadata for UserGraphCompiler.CompileContext?);
  outlined init with take of MetalFunctionNode?((uint64_t)v80, (uint64_t)v81, (uint64_t *)&demangling cache variable for type metadata for UserGraphCompiler.CompileContext?);
  if (getEnumTag for IOAttachment((uint64_t)v81) != 1)
  {
    v113 = v81[10];
    v114 = v81[11];
    v115 = v82;
    v109 = v81[6];
    v110 = v81[7];
    v112 = v81[9];
    v111 = v81[8];
    v105 = v81[2];
    v106 = v81[3];
    v108 = v81[5];
    v107 = v81[4];
    v104 = v81[1];
    v103 = v81[0];
    outlined copy of NodePersonality(v34);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined retain of UserGraphCompiler.CompileContext?(v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of UserGraphCompiler.CompileContext?);
    ShaderGraphNode.out.getter((uint64_t)v97);
    v53 = UserGraphCompiler.CompileContext.compiledNodeID(for:)((uint64_t)v97);
    v55 = v54;
    swift_release();
    v99 = v98;
    outlined release of String((uint64_t)&v99);
    outlined retain of UserGraphCompiler.CompileContext?(v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of UserGraphCompiler.CompileContext?);
    if ((v55 & 1) != 0)
      goto LABEL_51;
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*v16 + 272))(v77, v53);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(name: String, type: MetalDataType)>);
    v5 = (_QWORD *)swift_allocObject();
    v71 = xmmword_245FBECD0;
    *((_OWORD *)v5 + 1) = xmmword_245FBECD0;
    v5[4] = 1684631414;
    v5[5] = 0xE400000000000000;
    if (one-time initialization token for void == -1)
      goto LABEL_40;
    goto LABEL_48;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #5 in GraphCompiler.extractSamplerNodes(in:into:)(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, _OWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  char v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  _QWORD *v72;
  int64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  int64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101[8];
  uint64_t v102;
  __int128 v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  _QWORD v119[5];
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  _OWORD v135[9];
  _OWORD v136[3];
  uint64_t v137;

  v6 = v5;
  v12 = *a4;
  v11 = (_QWORD *)a4[1];
  v13 = a4[2];
  swift_bridgeObjectRetain();
  result = specialized OrderedSet._find(_:)(a1, (uint64_t)a2, v12, v11);
  if ((v15 & 1) != 0)
    goto LABEL_5;
  v16 = result;
  v85 = a3;
  v86 = v6;
  if (result < 0)
  {
    __break(1u);
    return result;
  }
  v17 = *(_QWORD *)(v13 + 16);
  swift_bridgeObjectRelease();
  if (v16 >= v17)
  {
    __break(1u);
LABEL_5:
    swift_bridgeObjectRelease();
    v18 = a5[8];
    v19 = a5[9];
    v20 = a5[6];
    v135[7] = a5[7];
    v135[8] = v18;
    v136[0] = v19;
    *(_OWORD *)((char *)v136 + 9) = *(_OWORD *)((char *)a5 + 153);
    v21 = a5[5];
    v135[4] = a5[4];
    v135[5] = v21;
    v135[6] = v20;
    v22 = a5[1];
    v135[0] = *a5;
    v135[1] = v22;
    v23 = a5[3];
    v135[2] = a5[2];
    v135[3] = v23;
    outlined retain of Graph((uint64_t)v135);
    v24 = specialized GraphCompiler.extract(node:from:withName:)(a3, (uint64_t)v135, a1, a2);
    result = outlined release of Graph((uint64_t)v135);
    if (v6)
      return result;
    v85 = a3;
    v86 = 0;
    swift_bridgeObjectRetain();
    specialized OrderedDictionary.subscript.setter(v24, 0, a1, (uint64_t)a2);
  }
  v137 = a1;
  v96 = (uint64_t)a5;
  v25 = *(_QWORD *)(v85 + 16);
  v111 = v25;
  v26 = *(_QWORD *)(v25 + 16);
  v27 = MEMORY[0x24BEE4AF8];
  v89 = v26;
  v84 = v25;
  if (v26)
  {
    v97 = a2;
    v100 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    v28 = v26;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 0);
    v27 = v100;
    v29 = (uint64_t *)(v25 + 56);
    do
    {
      v30 = *(v29 - 2);
      v31 = *(v29 - 1);
      v32 = *v29;
      v34 = *(_QWORD *)(v100 + 16);
      v33 = *(_QWORD *)(v100 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v34 >= v33 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
      *(_QWORD *)(v100 + 16) = v34 + 1;
      v35 = (_QWORD *)(v100 + 24 * v34);
      v35[4] = v31;
      v35[5] = v32;
      v35[6] = v30;
      v29 += 7;
      --v28;
    }
    while (v28);
    outlined release of [Input]((uint64_t)&v111);
    a2 = v97;
  }
  v36 = swift_allocObject();
  *(_QWORD *)(v36 + 16) = v137;
  *(_QWORD *)(v36 + 24) = a2;
  swift_bridgeObjectRetain();
  ShaderGraphNode.out.getter((uint64_t)v101);
  if (v86)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_deallocUninitializedObject();
  }
  v37 = v102;
  v110 = v103;
  outlined release of String((uint64_t)&v110);
  *(_QWORD *)(v36 + 32) = v37;
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(*(_QWORD *)(v96 + 40), MEMORY[0x24BEE4AF8], v27, v36 | 0x2000000000000000, v96 + 64, v96, &v104);
  swift_release();
  swift_bridgeObjectRelease();
  v109 = v105;
  v92 = *(_QWORD *)(v105 + 16);
  if (!v92)
    goto LABEL_32;
  v90 = v105 + 32;
  v38 = *(_QWORD *)(v85 + 8);
  v39 = *(_QWORD *)(v38 + 16);
  swift_bridgeObjectRetain();
  v40 = 0;
  v87 = v39;
  v88 = (_QWORD *)(v38 + 80);
  while (2)
  {
    v42 = (uint64_t *)(v90 + 56 * v40);
    v43 = *v42;
    v44 = v42[1];
    v45 = v42[2];
    v46 = v42[3];
    v47 = v42[4];
    v48 = *((_BYTE *)v42 + 40);
    v49 = v42[6];
    *(_QWORD *)&v129 = v43;
    *((_QWORD *)&v129 + 1) = v44;
    v130 = v45;
    v131 = v46;
    v132 = v47;
    v133 = v48;
    v134 = v49;
    if (!v39)
      goto LABEL_20;
    v94 = v40;
    v50 = v88;
    do
    {
      v51 = *(v50 - 6);
      v52 = *(v50 - 5);
      v54 = *(v50 - 4);
      v53 = *(v50 - 3);
      v55 = *(v50 - 2);
      v56 = *((_BYTE *)v50 - 8);
      v57 = *v50;
      if (v54 == v45 && v53 == v46)
      {
        v41 = v46;
LABEL_18:
        v122 = v51;
        v123 = v52;
        v124 = v45;
        v125 = v41;
        v126 = v55;
        v127 = v56;
        v128 = v57;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdge(from:to:)((uint64_t)&v122, &v129);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_19;
      }
      v98 = *(v50 - 6);
      v137 = *v50;
      v41 = v53;
      v59 = v45;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v45 = v54;
        v57 = v137;
        v51 = v98;
        goto LABEL_18;
      }
      v50 += 7;
      --v39;
      v45 = v59;
    }
    while (v39);
    v122 = v98;
    v123 = v52;
    v124 = v54;
    v125 = v41;
    v126 = v55;
    v127 = v56;
    v128 = v137;
LABEL_19:
    v39 = v87;
    v40 = v94;
LABEL_20:
    if (++v40 != v92)
      continue;
    break;
  }
  outlined release of [Input]((uint64_t)&v109);
LABEL_32:
  v108 = v106;
  v60 = v85;
  v93 = *(_QWORD *)(v106 + 16);
  if (!v93)
    goto LABEL_49;
  v91 = v106 + 32;
  swift_bridgeObjectRetain();
  v61 = 0;
  v62 = v89;
  while (2)
  {
    v64 = (uint64_t *)(v91 + 56 * v61);
    v65 = *v64;
    v66 = v64[1];
    v67 = v64[2];
    v68 = v64[3];
    v69 = v64[4];
    v70 = *((_BYTE *)v64 + 40);
    v71 = v64[6];
    v119[0] = v65;
    v119[1] = v66;
    v119[2] = v67;
    v119[3] = v68;
    v119[4] = v69;
    v120 = v70;
    v121 = v71;
    if (!v62)
      goto LABEL_37;
    v95 = v61;
    v72 = (_QWORD *)(v84 + 80);
    v73 = v62;
    while (2)
    {
      v74 = *(v72 - 6);
      v75 = *(v72 - 5);
      v77 = *(v72 - 4);
      v76 = *(v72 - 3);
      v78 = *(v72 - 2);
      v79 = *((_BYTE *)v72 - 8);
      v80 = *v72;
      if (v77 == v67 && v76 == v68)
      {
        v63 = v68;
LABEL_35:
        v112 = v74;
        v113 = v75;
        v114 = v67;
        v115 = v63;
        v116 = v78;
        v117 = v79;
        v118 = v80;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdges(from:to:)((uint64_t)&v112, (uint64_t)v119);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_36;
      }
      v99 = *(v72 - 6);
      v137 = *v72;
      v82 = v76;
      v83 = v67;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v67 = v77;
        v80 = v137;
        v63 = v82;
        v74 = v99;
        goto LABEL_35;
      }
      v72 += 7;
      --v73;
      v67 = v83;
      if (v73)
        continue;
      break;
    }
    v112 = v99;
    v113 = v75;
    v114 = v77;
    v115 = v82;
    v116 = v78;
    v117 = v79;
    v118 = v137;
LABEL_36:
    v62 = v89;
    v61 = v95;
LABEL_37:
    if (++v61 != v93)
      continue;
    break;
  }
  outlined release of [Input]((uint64_t)&v108);
  v60 = v85;
LABEL_49:
  specialized Graph.remove(_:)(*(_QWORD *)(v60 + 24));
  outlined init with take of NodePersonality(&v104, &v107);
  outlined release of NodePersonality(&v107);
  outlined release of [Input]((uint64_t)&v109);
  return outlined release of [Input]((uint64_t)&v108);
}

uint64_t specialized GraphCompiler.replaceGettersWithFunctionCalls(in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return v20;
  v5 = v3 + 32;
  swift_bridgeObjectRetain_n();
  v6 = 0;
  while (1)
  {
    v7 = v5 + 48 * v6;
    v8 = *(_QWORD *)(v7 + 24);
    if (v8 != -7)
      break;
    if ((uint64_t)++v6 >= v4)
      goto LABEL_10;
LABEL_8:
    if (v6 >= v4)
    {
      __break(1u);
LABEL_10:
      swift_bridgeObjectRelease_n();
      return v20;
    }
  }
  v10 = *(_QWORD *)v7;
  v9 = *(_QWORD *)(v7 + 8);
  v11 = *(_QWORD *)(v7 + 16);
  v12 = *(_BYTE *)(v7 + 40);
  v13 = *(_QWORD *)(v7 + 32);
  *(_QWORD *)&v15 = v10;
  *((_QWORD *)&v15 + 1) = v9;
  v16 = v11;
  v17 = v8;
  v18 = v13;
  v19 = v12;
  outlined copy of NodePersonality(v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  closure #1 in GraphCompiler.replaceGettersWithFunctionCalls(in:)(&v15, a1, &v20);
  if (!v1)
  {
    ++v6;
    outlined consume of NodePersonality(v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((uint64_t)v6 >= v4)
      goto LABEL_10;
    goto LABEL_8;
  }
  outlined consume of NodePersonality(v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized GraphCompiler.replaceMetalFunctionsWithStitchedNodes(in:)(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v1 = *(_QWORD *)(result + 64);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = result;
    swift_bridgeObjectRetain();
    v4 = (_BYTE *)(v1 + 72);
    v5 = 1;
    while (1)
    {
      v6 = *((_QWORD *)v4 - 2);
      if (v6 != -7)
      {
        v7 = *v4;
        v8 = *((_QWORD *)v4 - 1);
        v10 = *((_QWORD *)v4 - 5);
        v11 = *((_OWORD *)v4 - 2);
        v12 = v6;
        v13 = v8;
        v14 = v7;
        closure #1 in GraphCompiler.replaceMetalFunctionsWithStitchedNodes(in:)((uint64_t)&v10, v3);
      }
      if (v5 >= v2)
        break;
      v4 += 48;
      if (v5++ >= v2)
      {
        __break(1u);
        return swift_bridgeObjectRelease();
      }
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized GraphCompiler.functionGraph(for:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[5];
  _BYTE v26[208];
  unint64_t v27;

  type metadata accessor for UserGraphCompiler();
  v3 = swift_allocObject();
  _s11ShaderGraph04UserB8CompilerC14CompileContextVSgWOi0_((uint64_t)v26);
  outlined init with take of MetalFunctionNode?((uint64_t)v26, v3 + 16, (uint64_t *)&demangling cache variable for type metadata for UserGraphCompiler.CompileContext?);
  type metadata accessor for MetalShaderProgram();
  v4 = (_QWORD *)swift_allocObject();
  v5 = MEMORY[0x24BEE4AF8];
  v4[2] = MEMORY[0x24BEE4AF8];
  v4[3] = specialized Dictionary.init(dictionaryLiteral:)(v5);
  v4[4] = v5;
  v4[5] = v5;
  v4[6] = 1;
  v6 = UserGraphCompiler.compile(sourceProgram:into:)(a1, (uint64_t)v4);
  if (v1)
  {
    swift_release();
LABEL_30:
    swift_release();
    return v6;
  }
  swift_release();
  v7 = MetalShaderProgram.terminalNodes()();
  v27 = v5;
  v8 = v7[2];
  if (v8)
  {
    v22 = v7;
    v9 = (uint64_t)(v7 + 4);
    do
    {
      outlined init with copy of MetalFunctionNode(v9, (uint64_t)v25);
      outlined init with copy of MetalFunctionNode((uint64_t)v25, (uint64_t)&v23);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetalFunctionNode);
      type metadata accessor for RESurfaceShaderFunctionNode();
      if ((swift_dynamicCast() & 1) == 0)
        v24 = 0;
      v10 = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
      if (v24)
      {
        MEMORY[0x24954B1A8](v10);
        if (*(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v9 += 40;
      --v8;
    }
    while (v8);
    v5 = v27;
    v11 = v22[2];
  }
  else
  {
    v11 = 0;
  }
  swift_bridgeObjectRelease();
  if (v5 >> 62)
  {
LABEL_26:
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v11 == v19)
    {
      swift_bridgeObjectRetain();
      v11 = _CocoaArrayWrapper.endIndex.getter();
      if (v11)
        goto LABEL_17;
      goto LABEL_24;
    }
LABEL_29:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type GraphCompilerErrors and conformance GraphCompilerErrors();
    swift_allocError();
    *(_QWORD *)v20 = 0;
    *(_QWORD *)(v20 + 8) = 0;
    *(_BYTE *)(v20 + 16) = 3;
    swift_willThrow();
    swift_release();
    goto LABEL_30;
  }
  if (v11 != *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_29;
  swift_bridgeObjectRetain();
  if (v11)
  {
LABEL_17:
    v12 = 4;
    do
    {
      v13 = v12 - 4;
      if ((v5 & 0xC000000000000001) != 0)
      {
        v14 = MEMORY[0x24954B748](v12 - 4, v5);
        v15 = __OFADD__(v13, 1);
        v16 = v12 - 3;
        if (v15)
          goto LABEL_25;
      }
      else
      {
        v14 = *(_QWORD *)(v5 + 8 * v12);
        swift_retain();
        v15 = __OFADD__(v13, 1);
        v16 = v12 - 3;
        if (v15)
        {
LABEL_25:
          __break(1u);
          goto LABEL_26;
        }
      }
      v25[0] = v14;
      closure #2 in GraphCompiler.functionGraph(for:)(v25, v6);
      swift_release();
      ++v12;
    }
    while (v16 != v11);
  }
LABEL_24:
  swift_bridgeObjectRelease();
  v17 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph09RESurfaceD12FunctionNodeCG_AF0gH2IDVs5NeverOTg504_s11d103Graph0B8CompilerV08functionB033_137984365F15B3FD94CB2D26CA095C9FLL3forAA05MetalA7ProgramCAA0B0V_tKFAA14gH73IDVAA09RESurfaceaoP0Ccfu_33_56b5a88cd278ec4ee448dc3b0c4fd19cAnLTf3nnnpk_nTf1cn_n(v5);
  swift_bridgeObjectRelease();
  specialized Set.init<A>(_:)(v17);
  v18 = swift_bridgeObjectRelease();
  MEMORY[0x24BDAC7A8](v18);
  (*(void (**)(BOOL (*)(_QWORD *)))(*(_QWORD *)v6 + 288))(partial apply for closure #3 in GraphCompiler.functionGraph(for:));
  swift_release();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t partial apply for closure #4 in GraphCompiler.compile(for:options:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  return closure #4 in GraphCompiler.compile(for:options:)(a1, a2, a3, a4 & 1, *(_QWORD *)(v4 + 16), *(void **)(v4 + 24));
}

uint64_t outlined init with copy of RESurfaceShaderMaterial(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for RESurfaceShaderMaterial(a2, a1);
  return a2;
}

uint64_t dispatch thunk of GraphCompilerBackend.compile(program:uniformDefinition:additionalLibraries:options:device:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 8))();
}

uint64_t dispatch thunk of GraphCompilerBackend.programName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of GraphCompilerBackend.programName.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of GraphCompilerBackend.programName.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t outlined copy of GraphCompilerErrors(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for GraphCompilerErrors(uint64_t a1)
{
  return outlined consume of GraphCompilerErrors(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of GraphCompilerErrors(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for GraphCompilerErrors(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of GraphCompilerErrors(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for GraphCompilerErrors(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of GraphCompilerErrors(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of GraphCompilerErrors(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for GraphCompilerErrors(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of GraphCompilerErrors(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphCompilerErrors(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphCompilerErrors(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for GraphCompilerErrors(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t destructiveInjectEnumTag for GraphCompilerErrors(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for GraphCompilerErrors()
{
  return &type metadata for GraphCompilerErrors;
}

ValueMetadata *type metadata accessor for GraphCompiler()
{
  return &type metadata for GraphCompiler;
}

double _s11ShaderGraph04UserB8CompilerC14CompileContextVSgWOi0_(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 192) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t outlined copy of UserGraphCompiler.CompileContext?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  uint64_t result;

  if (a2)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(a11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(a17);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

_QWORD *outlined retain of UserGraphCompiler.CompileContext?(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23],
    a1[24]);
  return a1;
}

uint64_t outlined consume of UserGraphCompiler.CompileContext?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of NodePersonality(a11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(a17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined retain of _HashTable.Storage?(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t outlined release of _HashTable.Storage?(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t outlined copy of MetalLibrary(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_unknownObjectRetain();
  else
    return swift_retain();
}

uint64_t outlined consume of MetalLibrary(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_unknownObjectRelease();
  else
    return swift_release();
}

BOOL partial apply for closure #3 in GraphCompiler.functionGraph(for:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
  return (specialized Set.contains(_:)(v5, v2) & 1) == 0;
}

uint64_t outlined copy of (name: String, type: MetalDataType)?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_245EDEA0C()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

unint64_t partial apply for closure #1 in closure #3 in GraphCompiler.extractSamplerNodes(in:into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in closure #3 in GraphCompiler.extractSamplerNodes(in:into:)(a1, a2, a3, *(uint64_t **)(v3 + 16));
}

uint64_t sub_245EDEA40()
{
  uint64_t v0;

  outlined consume of SGDataTypeStorage(*(void **)(v0 + 16), *(id *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80));
  swift_release();
  return swift_deallocObject();
}

uint64_t initializeBufferWithCopyOfBuffer for MetalLibrary(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of MetalLibrary(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for MetalLibrary(uint64_t a1)
{
  return outlined consume of MetalLibrary(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for MetalLibrary(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of MetalLibrary(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of MetalLibrary(v5, v6);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for MetalLibrary(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of MetalLibrary(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetalLibrary(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MetalLibrary(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for MetalLibrary(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t destructiveInjectEnumTag for MetalLibrary(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for MetalLibrary()
{
  return &type metadata for MetalLibrary;
}

uint64_t OrderedDictionary.description.getter(void (*a1)(char *, char *, uint64_t), unsigned int (*a2)(_QWORD, _QWORD, _QWORD), void (*a3)(_QWORD, _QWORD, _QWORD), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  Swift::String v29;
  void (*v30)(char *, uint64_t);
  void (*v31)(char *, uint64_t);
  char *v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(_QWORD, _QWORD, _QWORD);
  void (*v42)(char *, char *, uint64_t);
  unsigned int (*v43)(_QWORD, _QWORD, _QWORD);
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  void (*v47)(char *, char *, uint64_t);
  unsigned int (*v48)(_QWORD, _QWORD, _QWORD);
  void (*v49)(_QWORD, _QWORD, _QWORD);
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;

  v42 = a1;
  v43 = a2;
  v37 = *(_QWORD *)(a5 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v45 = type metadata accessor for Optional();
  v40 = *(_QWORD *)(v45 - 8);
  v17 = MEMORY[0x24BDAC7A8](v45);
  v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v36 - v20;
  v41 = a3;
  v47 = (void (*)(char *, char *, uint64_t))a3;
  v22 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A60], v22);
  if ((Collection.isEmpty.getter() & 1) != 0)
    return 6109787;
  v51 = 91;
  v52 = 0xE100000000000000;
  v47 = v42;
  v48 = v43;
  v49 = v41;
  v50 = 0;
  v44 = type metadata accessor for OrderedDictionary.Iterator(0, a4, a5, a6);
  swift_retain();
  v24 = v44;
  swift_retain();
  swift_retain();
  OrderedDictionary.Iterator.next()(v24, v19);
  v25 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
  v25(v21, v19, v45);
  v43 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48);
  if (v43(v21, 1, TupleTypeMetadata2) != 1)
  {
    v26 = *(int *)(TupleTypeMetadata2 + 48);
    v42 = v25;
    v27 = &v21[v26];
    v41 = *(void (**)(_QWORD, _QWORD, _QWORD))(v38 + 32);
    v41(v15, v21, a4);
    v28 = v37;
    v40 = *(_QWORD *)(v37 + 32);
    ((void (*)(char *, char *, uint64_t))v40)(v12, v27, a5);
    v46._countAndFlagsBits = 0;
    v46._object = (void *)0xE000000000000000;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v29._countAndFlagsBits = 8250;
    v29._object = (void *)0xE200000000000000;
    String.append(_:)(v29);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v30 = *(void (**)(char *, uint64_t))(v28 + 8);
    v30(v12, a5);
    v31 = *(void (**)(char *, uint64_t))(v38 + 8);
    v31(v15, a4);
    OrderedDictionary.Iterator.next()(v44, v19);
    v42(v21, v19, v45);
    if (v43(v21, 1, TupleTypeMetadata2) != 1)
    {
      v39 = v21;
      do
      {
        v32 = &v21[*(int *)(TupleTypeMetadata2 + 48)];
        v41(v15, v21, a4);
        ((void (*)(char *, char *, uint64_t))v40)(v12, v32, a5);
        v33._countAndFlagsBits = 8236;
        v33._object = (void *)0xE200000000000000;
        String.append(_:)(v33);
        v46._countAndFlagsBits = 0;
        v46._object = (void *)0xE000000000000000;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v34._countAndFlagsBits = 8250;
        v34._object = (void *)0xE200000000000000;
        String.append(_:)(v34);
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        String.append(_:)(v46);
        v21 = v39;
        swift_bridgeObjectRelease();
        v30(v12, a5);
        v31(v15, a4);
        OrderedDictionary.Iterator.next()(v44, v19);
        v42(v21, v19, v45);
      }
      while (v43(v21, 1, TupleTypeMetadata2) != 1);
    }
  }
  swift_release();
  swift_release();
  swift_release();
  v35._countAndFlagsBits = 93;
  v35._object = (void *)0xE100000000000000;
  String.append(_:)(v35);
  return v51;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance OrderedDictionary<A, B>(uint64_t *a1)
{
  uint64_t v1;

  return OrderedDictionary.description.getter(*(void (**)(char *, char *, uint64_t))v1, *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v1 + 8), *(void (**)(_QWORD, _QWORD, _QWORD))(v1 + 16), a1[2], a1[3], a1[4]);
}

uint64_t OrderedSet.description.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t *boxed_opaque_existential_0;
  void (*v16)(uint64_t *, char *, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t *v21;
  Swift::String v22;
  _QWORD v24[2];
  __int128 v25;
  uint64_t v26;
  unint64_t v27;

  v4 = *(_QWORD **)(a3 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)v24 - v9;
  v26 = 91;
  v27 = 0xE100000000000000;
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v24[1] = v8;
    swift_retain();
    swift_retain();
    ContiguousArray.subscript.getter();
    v13 = (void (*)(char *, char *, uint64_t))v4[4];
    v13(v7, v10, a3);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v14 = swift_allocObject();
    v25 = xmmword_245FBECD0;
    *(_OWORD *)(v14 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v14 + 56) = a3;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v14 + 32));
    v16 = (void (*)(uint64_t *, char *, uint64_t))v4[2];
    v16(boxed_opaque_existential_0, v7, a3);
    print<A>(_:separator:terminator:to:)();
    swift_bridgeObjectRelease();
    v17 = (void (*)(char *, uint64_t))v4[1];
    v17(v7, a3);
    if (v12 != 1)
    {
      v18 = 1;
      do
      {
        ContiguousArray.subscript.getter();
        ++v18;
        v13(v7, v10, a3);
        v19._countAndFlagsBits = 8236;
        v19._object = (void *)0xE200000000000000;
        String.append(_:)(v19);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
        v20 = swift_allocObject();
        *(_OWORD *)(v20 + 16) = v25;
        *(_QWORD *)(v20 + 56) = a3;
        v21 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v20 + 32));
        v16(v21, v7, a3);
        print<A>(_:separator:terminator:to:)();
        swift_bridgeObjectRelease();
        v17(v7, a3);
      }
      while (v12 != v18);
    }
    swift_release();
    swift_release();
  }
  v22._countAndFlagsBits = 93;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  return v26;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance OrderedSet<A>(uint64_t a1)
{
  uint64_t *v1;

  return OrderedSet.description.getter(*v1, v1[1], *(_QWORD *)(a1 + 16));
}

Swift::Double __swiftcall _HashTable.UnsafeHandle.debugLoadFactor()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _BOOL8 v3;

  v2 = v0;
  v3 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, v0, v1) != 0;
  _HashTable.BucketIterator.advance()();
  return (double)v3 / (double)(1 << *v2);
}

_QWORD *_HashTable.UnsafeHandle.debugContents()(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (1 << *a1) & ~(1 << *a1 >> 63), 0, MEMORY[0x24BEE4AF8]);
  v13 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, a1, a2);
  if (v13)
  {
    v5 = -1 << *a1;
    v6 = (v5 ^ ~v13) + ((uint64_t)a1[1] >> 6);
    if (v6 >= ~v5)
      v7 = ~v5;
    else
      v7 = 0;
    v8 = v6 - v7;
  }
  else
  {
    v8 = 0;
  }
  v10 = v4[2];
  v9 = v4[3];
  if (v10 >= v9 >> 1)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v4);
  v4[2] = v10 + 1;
  v11 = &v4[2 * v10];
  v11[4] = v8;
  *((_BYTE *)v11 + 40) = v13 == 0;
  _HashTable.BucketIterator.advance()();
  return v4;
}

uint64_t _HashTable.Bucket.description.getter()
{
  Swift::String v0;
  Swift::String v1;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0x402874656B637542;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _HashTable.Bucket()
{
  Swift::String v0;
  Swift::String v1;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0x402874656B637542;
}

Swift::Int __swiftcall _HashTable.UnsafeHandle.debugOccupiedCount()()
{
  _QWORD *v0;
  uint64_t v1;
  Swift::Int v2;

  v2 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, v0, v1) != 0;
  _HashTable.BucketIterator.advance()();
  return v2;
}

uint64_t _HashTable.BucketIterator.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t result;
  void *v7;
  Swift::String v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  Swift::String v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = dispatch thunk of CustomStringConvertible.description.getter();
  v5 = v4;
  result = String.count.getter();
  if (result <= 3)
  {
    if (__OFSUB__(4, result))
    {
      __break(1u);
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
    v30 = MEMORY[0x24954B0D0](32, 0xE100000000000000, 4 - result);
    v33 = v7;
    swift_bridgeObjectRetain();
    v8._countAndFlagsBits = v3;
    v8._object = v5;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = v30;
    v5 = v33;
  }
  if (!v1)
  {
    v11 = (void *)0xE400000000000000;
    v9 = 1818848800;
    goto LABEL_9;
  }
  v9 = dispatch thunk of CustomStringConvertible.description.getter();
  v11 = v10;
  result = String.count.getter();
  if (result > 3)
  {
LABEL_9:
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    v14 = String.init<A>(_:radix:uppercase:)();
    v16 = v15;
    result = String.count.getter();
    if (result >= v2)
    {
LABEL_12:
      _StringGuts.grow(_:)(68);
      v19._object = (void *)0x8000000245FCB1C0;
      v19._countAndFlagsBits = 0xD000000000000016;
      String.append(_:)(v19);
      v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      v21._countAndFlagsBits = 0x74656B637562202CLL;
      v21._object = (void *)0xEA0000000000203ALL;
      String.append(_:)(v21);
      v22._countAndFlagsBits = v3;
      v22._object = v5;
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23._countAndFlagsBits = 0x3A65756C6176202CLL;
      v23._object = (void *)0xE900000000000020;
      String.append(_:)(v23);
      v24._countAndFlagsBits = v9;
      v24._object = v11;
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = 0x203A73746962202CLL;
      v25._object = (void *)0xE800000000000000;
      String.append(_:)(v25);
      v26._countAndFlagsBits = v14;
      v26._object = v16;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._countAndFlagsBits = 10272;
      v27._object = (void *)0xE200000000000000;
      String.append(_:)(v27);
      v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      v29._countAndFlagsBits = 0x29297374696220;
      v29._object = (void *)0xE700000000000000;
      String.append(_:)(v29);
      return 0;
    }
    if (!__OFSUB__(v2, result))
    {
      v32 = MEMORY[0x24954B0D0](48, 0xE100000000000000, v2 - result);
      v35 = v17;
      swift_bridgeObjectRetain();
      v18._countAndFlagsBits = v14;
      v18._object = v16;
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = v32;
      v16 = v35;
      goto LABEL_12;
    }
    goto LABEL_14;
  }
  if (!__OFSUB__(4, result))
  {
    v31 = MEMORY[0x24954B0D0](32, 0xE100000000000000, 4 - result);
    v34 = v12;
    swift_bridgeObjectRetain();
    v13._countAndFlagsBits = v9;
    v13._object = v11;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = v31;
    v11 = v34;
    goto LABEL_9;
  }
LABEL_15:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt64 and conformance UInt64()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    result = MEMORY[0x24954C264](MEMORY[0x24BEE45A0], MEMORY[0x24BEE4568]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_AH2IDVs5NeverOTg504_s11D159Graph0B0V16splitSharedNodes12nodeDefStore07surfaceA016geometryModifieryAA04NodegH0V_AA0abL0VAKSgtKFAK2IDVAKcfu_33_300d98c1e43c0bc1dedcebf2cdbfb115AkNTf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    result = v9;
    v4 = (uint64_t *)(a1 + 56);
    do
    {
      v6 = *v4;
      v4 += 6;
      v5 = v6;
      v10 = result;
      v8 = *(_QWORD *)(result + 16);
      v7 = *(_QWORD *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
        result = v10;
      }
      *(_QWORD *)(result + 16) = v8 + 1;
      *(_QWORD *)(result + 8 * v8 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph5InputVG_AF0F4SpecVs5NeverOTg504_s11d111Graph0B0V16splitSharedNodes12nodeDefStore07surfaceA016geometryModifieryAA04NodegH0V_AA0abL0VAKSgtKFyAKXEfU0_AA9fG59VAA0M0Vcfu_33_15bdc1b17c00ea157f8d68df2a99b331ApNTf3nnnpk_nTf1cn_nTm(uint64_t a1, uint64_t a2, void (*a3)(BOOL, unint64_t, uint64_t))
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v15;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v15 = MEMORY[0x24BEE4AF8];
    a3(0, v3, 0);
    v4 = v15;
    v6 = (uint64_t *)(a1 + 56);
    do
    {
      v8 = *(v6 - 2);
      v7 = *(v6 - 1);
      v9 = *v6;
      v10 = *(_QWORD *)(v15 + 16);
      v11 = *(_QWORD *)(v15 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v10 >= v11 >> 1)
        a3(v11 > 1, v10 + 1, 1);
      *(_QWORD *)(v15 + 16) = v10 + 1;
      v12 = (_QWORD *)(v15 + 24 * v10);
      v12[4] = v7;
      v12[5] = v9;
      v12[6] = v8;
      v6 += 7;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS_SisAE_pTg508_sSJSis5C131_pIggdzo_SJSisAA_pIegnrzr_TR91_s11ShaderGraph0B0V19resolveSwizzleNodes12nodeDefStoreyAA04NodegH0V_tKF5indexL_3forSiSJ_tKFTf3nnnpf_nTf1cn_n()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21[3];
  uint64_t v22;
  unint64_t v23;
  _OWORD v24[12];
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v1 = String.count.getter();
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v3 = v1;
    v26 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1 & ~(v1 >> 63), 0);
    if (v3 < 0)
    {
      __break(1u);
LABEL_42:
      *(_QWORD *)&v24[0] = 0;
      *((_QWORD *)&v24[0] + 1) = 0xE000000000000000;
      Character.write<A>(to:)();
      memset(v21, 0, 41);
      v22 = 0;
      v23 = 0xE000000000000000;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_((uint64_t)v21);
      outlined init with take of UserGraphError.ErrorType(v21, (uint64_t)v24);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      v25 = 0uLL;
      swift_allocError();
      *v11 = v24[0];
      v12 = v24[4];
      v14 = v24[1];
      v13 = v24[2];
      v11[3] = v24[3];
      v11[4] = v12;
      v11[1] = v14;
      v11[2] = v13;
      v15 = v24[8];
      v17 = v24[5];
      v16 = v24[6];
      v11[7] = v24[7];
      v11[8] = v15;
      v11[5] = v17;
      v11[6] = v16;
      v18 = v25;
      v20 = v24[9];
      v19 = v24[10];
      v11[11] = v24[11];
      v11[12] = v18;
      v11[9] = v20;
      v11[10] = v19;
      swift_willThrow();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      v27 = v0;
      v2 = v26;
      do
      {
        v5 = String.subscript.getter();
        v6 = v4;
        if (v5 == 114 && v4 == 0xE100000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
          || v5 == 120 && v6 == 0xE100000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v7 = 0;
        }
        else if (v5 == 103 && v6 == 0xE100000000000000
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
               || v5 == 121 && v6 == 0xE100000000000000
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v7 = 1;
        }
        else if (v5 == 98 && v6 == 0xE100000000000000
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
               || v5 == 122 && v6 == 0xE100000000000000
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v7 = 2;
        }
        else
        {
          if ((v5 != 97 || v6 != 0xE100000000000000)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
            && (v5 != 119 || v6 != 0xE100000000000000)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            goto LABEL_42;
          }
          swift_bridgeObjectRelease();
          v7 = 3;
        }
        v26 = v2;
        v9 = *(_QWORD *)(v2 + 16);
        v8 = *(_QWORD *)(v2 + 24);
        if (v9 >= v8 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
          v2 = v26;
        }
        *(_QWORD *)(v2 + 16) = v9 + 1;
        *(_QWORD *)(v2 + 8 * v9 + 32) = v7;
        String.index(after:)();
        --v3;
      }
      while (v3);
    }
  }
  return v2;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySiGG_11ShaderGraph9InputSpecVs5NeverOTg507_sS2i11f6Graph9hi32VIgyyo_Si6offset_Si7elementtACs5J126OIegnrzr_TR04_s11a79Graph0B0V19resolveSwizzleNodes12nodeDefStoreyAA04NodegH0V_tKFyAA0abI0VKXEfU_AA9cD13VSi_SitXEfU9_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  v10 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v2 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v2)
  {
    v3 = 0;
    do
    {
      v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      if (one-time initialization token for int32 != -1)
        swift_once();
      v5 = static MetalDataType.int32;
      v7 = *(_QWORD *)(v10 + 16);
      v6 = *(_QWORD *)(v10 + 24);
      swift_retain();
      if (v7 >= v6 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      ++v3;
      *(_QWORD *)(v10 + 16) = v7 + 1;
      v8 = (_QWORD *)(v10 + 24 * v7);
      v8[4] = 0x5F7865646E69;
      v8[5] = 0xE600000000000000;
      v8[6] = v5;
    }
    while (v2 != v3);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized Set.contains(_:)(char a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
  {
    Hasher.init(_seed:)();
    __asm { BR              X10 }
  }
  return 0;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

BOOL specialized Set.contains(_:)(Swift::UInt a1, uint64_t a2)
{
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(v8 + 8 * v6) == a1)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(_QWORD *)(v8 + 8 * v11);
    result = v12 == a1;
    if (v12 == a1)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::UInt v4;
  uint64_t v5;
  void (*v6)(_BYTE *);
  uint64_t v7;
  uint64_t v8;
  Swift::UInt v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t (*v20)(uint64_t);
  char v22;
  char v23;
  Swift::UInt v26;
  Swift::UInt v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[72];

  if (*(_QWORD *)(a2 + 16))
  {
    v2 = a2;
    Hasher.init(_seed:)();
    v4 = *(_QWORD *)a1;
    Hasher._combine(_:)(*(_QWORD *)a1);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(void (**)(_BYTE *))(*(_QWORD *)v5 + 120);
    swift_retain();
    v6(v33);
    v31 = v5;
    swift_release();
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 24);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v29 = v8;
    swift_bridgeObjectRelease();
    v9 = *(_QWORD *)(a1 + 32);
    v28 = *(unsigned __int8 *)(a1 + 40);
    if (v28 == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v9);
    }
    v27 = *(_QWORD *)(a1 + 48);
    Hasher._combine(_:)(v27);
    v10 = Hasher._finalize()();
    v11 = -1 << *(_BYTE *)(v2 + 32);
    v12 = v10 & ~v11;
    v13 = v2 + 56;
    if (((*(_QWORD *)(v2 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
    {
      v26 = v9;
      v14 = ~v11;
      do
      {
        v15 = *(_QWORD *)(v2 + 48) + 56 * v12;
        if (*(_QWORD *)v15 != v4)
          goto LABEL_8;
        v16 = v2;
        v17 = *(_QWORD *)(v15 + 16);
        v18 = *(_QWORD *)(v15 + 24);
        v30 = *(_QWORD *)(v15 + 32);
        v19 = *(_BYTE *)(v15 + 40);
        v32 = *(_QWORD *)(v15 + 48);
        v20 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v15 + 8) + 128);
        swift_retain();
        swift_bridgeObjectRetain();
        if ((v20(v31) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_release();
          v2 = v16;
          goto LABEL_8;
        }
        if (v17 == v7 && v18 == v29)
        {
          swift_bridgeObjectRelease();
          swift_release();
          v2 = v16;
          if ((v19 & 1) != 0)
            goto LABEL_17;
        }
        else
        {
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_release();
          v2 = v16;
          if ((v22 & 1) == 0)
            goto LABEL_8;
          if ((v19 & 1) != 0)
          {
LABEL_17:
            v23 = v28;
            if (v32 != v27)
              v23 = 0;
            if ((v23 & 1) != 0)
              return 1;
            goto LABEL_8;
          }
        }
        if ((v28 & 1) == 0 && v30 == v26 && v32 == v27)
          return 1;
LABEL_8:
        v12 = (v12 + 1) & v14;
      }
      while (((*(_QWORD *)(v13 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
    }
  }
  return 0;
}

uint64_t Graph.splitSharedNodes(nodeDefStore:surfaceShader:geometryModifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized Graph.splitSharedNodes(nodeDefStore:surfaceShader:geometryModifier:)(a4, a5);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Graph.mapStringInputs(nodeDefStore:)(ShaderGraph::NodeDefStore nodeDefStore)
{
  specialized Graph.mapStringInputs(nodeDefStore:)((uint64_t)nodeDefStore.nodeDefs._rawValue);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Graph.insertMaterialXDefaultValues(nodeDefStore:)(ShaderGraph::NodeDefStore nodeDefStore)
{
  specialized Graph.insertMaterialXDefaultValues(nodeDefStore:)((uint64_t)nodeDefStore.nodeDefs._rawValue, (uint64_t)nodeDefStore.geomPropDefs._rawValue);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Graph.resolvingNodegraphImplementations(nodeDefStore:)(ShaderGraph::NodeDefStore nodeDefStore)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  _BYTE *v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *rawValue;
  _QWORD *v14;
  uint64_t v15[5];
  char v16;

  rawValue = nodeDefStore.geomPropDefs._rawValue;
  v14 = nodeDefStore.implementations._rawValue;
  v2 = nodeDefStore.nodeDefs._rawValue;
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 64) + 16);
  if (v3)
  {
    v4 = (_BYTE *)(swift_bridgeObjectRetain() + 72);
    v5 = 1;
    while (1)
    {
      v6 = *((_QWORD *)v4 - 2);
      if (v6 != -7)
      {
        v7 = *v4;
        v8 = *((_QWORD *)v4 - 1);
        v10 = *((_QWORD *)v4 - 4);
        v9 = *((_QWORD *)v4 - 3);
        v11 = *((_QWORD *)v4 - 5);
        v15[0] = v11;
        v15[1] = v10;
        v15[2] = v9;
        v15[3] = v6;
        v15[4] = v8;
        v16 = v7;
        outlined copy of NodePersonality(v11);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        closure #1 in Graph.resolvingNodegraphImplementations(nodeDefStore:)(v15, v2, rawValue, v14, v1);
        outlined consume of NodePersonality(v11);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (v5 >= v3)
        break;
      v4 += 48;
      if (v5++ >= v3)
      {
        __break(1u);
        break;
      }
    }
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Graph.replaceMultiOutputNodes()()
{
  Graph.replaceMultiOutputNodes()((void (*)(_QWORD *, uint64_t))closure #1 in Graph.replaceMultiOutputNodes());
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Graph.removePassthroughNodes(nodeDefStore:)(ShaderGraph::NodeDefStore nodeDefStore)
{
  specialized Graph.removePassthroughNodes(nodeDefStore:)((uint64_t)nodeDefStore.nodeDefs._rawValue);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Graph.removeEdgesToExplicitlyIgnoredInputs()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  Swift::String v8;
  Swift::Bool v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  Swift::UInt v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v38;
  _QWORD *v39;
  BOOL v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  Swift::UInt v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(_QWORD *, _QWORD);
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t);
  char v84;
  char v85;
  int v86;
  uint64_t v87;
  char v88;
  _QWORD *v89;
  char isUniquelyReferenced_nonNull_native;
  Swift::UInt v91;
  _QWORD *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t (*v104)(uint64_t);
  char v105;
  char v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t (*v117)(uint64_t);
  char v118;
  char v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  _QWORD *v134;
  BOOL v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  char v142;
  unint64_t v143;
  unint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  unint64_t v147;
  char v148;
  Swift::UInt v149;
  _QWORD *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  uint64_t (*v162)(uint64_t);
  char v163;
  char v164;
  uint64_t *v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t (*v174)(uint64_t);
  char v175;
  char v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  _QWORD *v189;
  void (*v190)(_QWORD *, _QWORD);
  _QWORD *v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  char v198;
  char v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  _QWORD *v203;
  char v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  char v208;
  unint64_t v209;
  unint64_t v210;
  _QWORD *v211;
  unint64_t v212;
  char v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  char v217;
  char v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t *v237;
  void (*v238)(_QWORD *, _QWORD);
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  Swift::Int v248;
  _QWORD *v249;
  char v250;
  char v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char v257;
  unint64_t v258;
  uint64_t v259;
  char v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  _QWORD *v264;
  uint64_t v265;
  uint64_t v266;
  Swift::Int v267;
  unint64_t v268;
  uint64_t v269;
  Swift::UInt v270;
  void (*v271)(_QWORD *, _QWORD);
  uint64_t v272;
  _QWORD v273[9];
  __int128 v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  char v278;
  uint64_t v279;
  __int128 v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char v284;
  uint64_t v285;
  uint64_t v286;

  v1 = v0[8];
  if (!*(_QWORD *)(v1 + 16))
    return;
  v2 = v1 + 32;
  v240 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain_n();
  v3 = v2;
  v4 = v240;
  v5 = 0;
  v264 = v0;
  v239 = v2;
  do
  {
    v6 = (unint64_t *)(v3 + 48 * v5);
    if (v6[3] != -7 && *v6 >> 61 == 5)
    {
      v244 = *v6;
      v245 = v5;
      v7 = v6[1];
      outlined copy of NodePersonality(*v6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8._countAndFlagsBits = 0x6567616D695F444ELL;
      v8._object = (void *)0xE800000000000000;
      v9 = String.hasPrefix(_:)(v8);
      swift_bridgeObjectRelease();
      if (!v9)
      {
LABEL_242:
        outlined consume of NodePersonality(v244);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v3 = v239;
        v4 = v240;
        v5 = v245;
        goto LABEL_243;
      }
      v10 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of Graph.removeEdgesToExplicitlyIgnoredInputs());
      swift_arrayDestroy();
      v11 = *(_QWORD *)(v7 + 16);
      if (!v11)
      {
LABEL_241:
        swift_bridgeObjectRelease();
        goto LABEL_242;
      }
      v267 = v10 + 56;
      v268 = v7 + 32;
      swift_bridgeObjectRetain_n();
      v12 = 0;
      v266 = v11;
      v248 = v10;
      while (1)
      {
        v13 = v268 + 56 * v12;
        v14 = *(_QWORD *)v13;
        v15 = *(_QWORD *)(v13 + 8);
        v17 = *(_QWORD *)(v13 + 16);
        v16 = *(_QWORD *)(v13 + 24);
        v18 = *(_QWORD *)(v13 + 32);
        v19 = *(unsigned __int8 *)(v13 + 40);
        v20 = *(_QWORD *)(v13 + 48);
        *(_QWORD *)&v274 = *(_QWORD *)v13;
        *((_QWORD *)&v274 + 1) = v15;
        v275 = v17;
        v276 = v16;
        v277 = v18;
        v278 = v19;
        v279 = v20;
        if (!*(_QWORD *)(v10 + 16))
          goto LABEL_10;
        v269 = v12;
        v270 = v14;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain_n();
        swift_retain();
        String.hash(into:)();
        v21 = Hasher._finalize()();
        v22 = -1 << *(_BYTE *)(v10 + 32);
        v23 = v17;
        v24 = v16;
        v25 = v21 & ~v22;
        if (((*(_QWORD *)(v267 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
        {
LABEL_19:
          swift_release();
          swift_bridgeObjectRelease_n();
          goto LABEL_53;
        }
        v286 = v15;
        v26 = *(_QWORD *)(v10 + 48);
        v27 = (_QWORD *)(v26 + 16 * v25);
        v28 = *v27 == v23 && v27[1] == v24;
        v272 = v24;
        if (v28)
        {
          v33 = v23;
          goto LABEL_37;
        }
        v29 = v20;
        v30 = v19;
        v31 = v18;
        v32 = v23;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          break;
        v34 = ~v22;
        v35 = (v25 + 1) & v34;
        if (((*(_QWORD *)(v267 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) == 0)
        {
          swift_release();
          swift_bridgeObjectRelease_n();
          v12 = v269;
          goto LABEL_54;
        }
        v36 = (_QWORD *)(v26 + 16 * v35);
        v33 = v32;
        if (*v36 == v32 && v36[1] == v272)
          goto LABEL_35;
        v18 = v31;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_36;
        v38 = (v35 + 1) & v34;
        v19 = v30;
        v20 = v29;
        if (((*(_QWORD *)(v267 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8)) >> v38) & 1) == 0)
          goto LABEL_19;
        while (1)
        {
          v39 = (_QWORD *)(v26 + 16 * v38);
          v40 = *v39 == v33 && v39[1] == v272;
          if (v40 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            break;
          v38 = (v38 + 1) & v34;
          if (((*(_QWORD *)(v267 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8)) >> v38) & 1) == 0)
            goto LABEL_19;
        }
LABEL_37:
        swift_bridgeObjectRelease();
        v41 = (_QWORD *)v264[1];
        v42 = v264[2];
        v43 = v41 + 4;
        v44 = v41[2];
        v45 = v270;
        if (*v264)
        {
          v46 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v270, (uint64_t)v43, v44, (_QWORD *)(*v264 + 16), *v264 + 32);
          if ((v47 & 1) != 0)
            goto LABEL_52;
          if ((v46 & 0x8000000000000000) != 0)
            goto LABEL_249;
        }
        else
        {
          if (!v44)
            goto LABEL_52;
          if (*v43 == v270)
          {
            v46 = 0;
          }
          else
          {
            if (v44 == 1)
              goto LABEL_52;
            if (v41[5] == v270)
            {
              v46 = 1;
            }
            else
            {
              if (v44 == 2)
                goto LABEL_52;
              if (v41[6] == v270)
              {
                v46 = 2;
              }
              else
              {
                if (v44 == 3)
                {
LABEL_52:
                  swift_bridgeObjectRelease();
                  swift_release();
LABEL_53:
                  v12 = v269;
LABEL_54:
                  v11 = v266;
                  goto LABEL_10;
                }
                if (v41[7] == v270)
                {
                  v46 = 3;
                }
                else
                {
                  v48 = 0;
                  v49 = v41 + 8;
                  do
                  {
                    if (v44 - 4 == v48)
                      goto LABEL_52;
                    v50 = v49[v48++];
                  }
                  while (v50 != v270);
                  v46 = v48 + 3;
                  if (v48 + 3 < 0)
                    goto LABEL_249;
                }
              }
            }
          }
        }
        if (v46 >= *(_QWORD *)(v42 + 16))
        {
          __break(1u);
LABEL_249:
          __break(1u);
LABEL_250:
          __break(1u);
LABEL_251:
          __break(1u);
LABEL_252:
          __break(1u);
LABEL_253:
          __break(1u);
LABEL_254:
          __break(1u);
LABEL_255:
          __break(1u);
          goto LABEL_256;
        }
        v265 = v33;
        v51 = (_QWORD *)(v42 + 48 * v46);
        v52 = v51[7];
        v53 = v51[8];
        v54 = *(_QWORD *)(v53 + 16);
        v254 = v51[5];
        v255 = v51[4];
        v262 = v51[9];
        if (v52)
        {
          v249 = (_QWORD *)(v52 + 16);
          v252 = v52 + 32;
          swift_retain();
          swift_retain_n();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          v55 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v274, v53 + 32, v54, v249, v252);
          v57 = v56;
          swift_release();
          if ((v57 & 1) == 0)
          {
            v253 = v20;
            v58 = v262;
            if ((v55 & 0x8000000000000000) == 0)
              goto LABEL_65;
            goto LABEL_250;
          }
LABEL_9:
          swift_bridgeObjectRelease();
          swift_release();
          outlined consume of Graph.Adjacent?(v255, v254);
          swift_bridgeObjectRelease();
          swift_release();
          v10 = v248;
          v11 = v266;
          v12 = v269;
          goto LABEL_10;
        }
        if (!v54)
        {
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          goto LABEL_9;
        }
        v253 = v20;
        v247 = v18;
        v251 = v19;
        v243 = v19 ^ 1;
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        v55 = 0;
        v77 = (_QWORD *)(v53 + 80);
        while (1)
        {
          if (*(v77 - 6) != v45)
            goto LABEL_73;
          v78 = *(v77 - 4);
          v79 = *(v77 - 3);
          v80 = *(v77 - 2);
          v81 = *((_BYTE *)v77 - 8);
          v82 = *v77;
          v83 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*(v77 - 5) + 128);
          swift_retain();
          swift_bridgeObjectRetain();
          if ((v83(v286) & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_release();
            v45 = v270;
            goto LABEL_73;
          }
          if (v78 == v265 && v79 == v272)
          {
            swift_bridgeObjectRelease();
            swift_release();
            v45 = v270;
          }
          else
          {
            v84 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_release();
            v45 = v270;
            if ((v84 & 1) == 0)
              goto LABEL_73;
          }
          if ((v81 & 1) == 0)
            break;
          v85 = v251;
          if (v82 != v253)
            v85 = 0;
          if ((v85 & 1) != 0)
            goto LABEL_89;
LABEL_73:
          v77 += 7;
          if (v54 == ++v55)
            goto LABEL_9;
        }
        v86 = v243;
        if (v80 != v247)
          v86 = 0;
        if (v86 != 1 || v82 != v253)
          goto LABEL_73;
LABEL_89:
        v18 = v247;
        LOBYTE(v19) = v251;
        v58 = v262;
LABEL_65:
        if (v55 >= *(_QWORD *)(v58 + 16))
          goto LABEL_251;
        v59 = (_QWORD *)(v58 + 56 * v55);
        v60 = v59[5];
        v61 = v59[6];
        v62 = v59[7];
        v63 = v59[8];
        v64 = v59[10];
        v241 = v59[9];
        v242 = v59[4];
        outlined copy of Output?(v242, v60);
        swift_bridgeObjectRelease();
        swift_release();
        outlined consume of Graph.Adjacent?(v255, v254);
        if (!v60)
        {
          swift_bridgeObjectRelease();
          swift_release();
          v10 = v248;
          v11 = v266;
          v12 = v269;
          goto LABEL_10;
        }
        v250 = v19;
        *(_QWORD *)&v280 = v242;
        *((_QWORD *)&v280 + 1) = v60;
        v281 = v61;
        v282 = v62;
        v283 = v63;
        v284 = v241 & 1;
        v285 = v64;
        swift_bridgeObjectRetain_n();
        swift_retain_n();
        swift_retain();
        swift_bridgeObjectRetain();
        outlined copy of Output?(v242, v60);
        v263 = v60;
        swift_retain();
        swift_bridgeObjectRetain();
        v65 = (void (*)(_QWORD *, _QWORD))specialized OrderedDictionary.subscript.modify(v273, v242);
        v67 = v66[1];
        v10 = v248;
        v68 = v266;
        if (!v67)
        {
          v65(v273, 0);
          v87 = v263;
          goto LABEL_218;
        }
        v69 = v66;
        v238 = v65;
        v246 = v18;
        v70 = *v66;
        v71 = *(_QWORD *)(v67 + 16);
        if (*v66)
        {
          swift_retain();
          swift_retain();
          v72 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v280, v67 + 32, v71, (_QWORD *)(v70 + 16), v70 + 32);
          v74 = v73;
          v76 = v75;
        }
        else
        {
          swift_retain();
          v72 = specialized Collection<>.firstIndex(of:)((uint64_t *)&v280, v67 + 32, v71);
          v74 = v88;
          v76 = 0;
        }
        swift_release();
        swift_release();
        v87 = v263;
        if ((v74 & 1) == 0)
        {
          v89 = (_QWORD *)v69[2];
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v69[2] = v89;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v89 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v89);
            v69[2] = v89;
          }
          v91 = v270;
          if ((v72 & 0x8000000000000000) != 0)
            goto LABEL_258;
          if (v72 < v89[2])
          {
            v92 = &v89[2 * v72];
            v94 = v92[5];
            v93 = v92 + 5;
            v95 = *(_QWORD *)(v94 + 16);
            if (!v95)
            {
              v107 = 0;
              v112 = 0;
              v68 = v266;
              goto LABEL_217;
            }
            v236 = v93;
            v96 = 0;
            v97 = (_QWORD *)(swift_retain() + 80);
            v98 = 136;
            v99 = v95;
            while (2)
            {
              if (*(v97 - 6) == v91)
              {
                v100 = *(v97 - 4);
                v101 = *(v97 - 3);
                v256 = *(v97 - 2);
                v102 = *((_BYTE *)v97 - 8);
                v103 = *v97;
                v104 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*(v97 - 5) + 128);
                swift_retain();
                swift_bridgeObjectRetain();
                if ((v104(v286) & 1) != 0)
                {
                  if (v100 == v265 && v101 == v272)
                  {
                    swift_bridgeObjectRelease();
                    swift_release();
                    v91 = v270;
                    v95 = v99;
LABEL_108:
                    if ((v102 & 1) != 0)
                    {
                      v106 = v250;
                      if (v103 != v253)
                        v106 = 0;
                      if ((v106 & 1) != 0)
                      {
LABEL_116:
                        swift_release();
                        v107 = v96 + 1;
                        if (!__OFADD__(v96, 1))
                        {
                          v108 = v236;
                          v109 = *v236;
                          v110 = *(_QWORD *)(*v236 + 16);
                          v111 = v263;
                          v112 = v96;
                          if (v107 == v110)
                          {
                            v68 = v266;
                            goto LABEL_209;
                          }
                          while (2)
                          {
                            if (v107 >= v110)
                              goto LABEL_252;
                            v113 = (_QWORD *)(v109 + v98);
                            if (*(_QWORD *)(v109 + v98 - 48) == v91)
                            {
                              v114 = v112;
                              v115 = *(v113 - 4);
                              v116 = *(v113 - 3);
                              v257 = *((_BYTE *)v113 - 8);
                              v228 = *(v113 - 2);
                              v232 = *v113;
                              v117 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*(v113 - 5) + 128);
                              swift_retain();
                              swift_bridgeObjectRetain();
                              if ((v117(v286) & 1) != 0)
                              {
                                if (v115 == v265 && v116 == v272)
                                {
                                  swift_bridgeObjectRelease();
                                  swift_release();
                                  v91 = v270;
                                  v112 = v114;
                                  goto LABEL_127;
                                }
                                v118 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                swift_bridgeObjectRelease();
                                swift_release();
                                v91 = v270;
                                v112 = v114;
                                if ((v118 & 1) != 0)
                                {
LABEL_127:
                                  if ((v257 & 1) != 0)
                                  {
                                    v119 = v250;
                                    if (v232 != v253)
                                      v119 = 0;
                                    if ((v119 & 1) != 0)
                                    {
LABEL_147:
                                      ++v107;
                                      v109 = *v108;
                                      v110 = *(_QWORD *)(*v108 + 16);
                                      v98 += 56;
                                      v68 = v266;
                                      v111 = v263;
                                      if (v107 == v110)
                                        goto LABEL_209;
                                      continue;
                                    }
                                  }
                                  else if ((v250 & 1) == 0 && v228 == v246 && v232 == v253)
                                  {
                                    goto LABEL_147;
                                  }
                                }
                              }
                              else
                              {
                                swift_bridgeObjectRelease();
                                swift_release();
                                v91 = v270;
                                v112 = v114;
                              }
                            }
                            break;
                          }
                          if (v107 != v112)
                          {
                            if (v112 < 0)
                              goto LABEL_266;
                            v120 = *(_QWORD *)(v109 + 16);
                            if (v112 >= v120)
                              goto LABEL_267;
                            if (v107 >= v120)
                              goto LABEL_268;
                            v258 = v112;
                            v121 = v109 + 32 + 56 * v112;
                            v122 = *(_QWORD *)(v121 + 24);
                            v222 = *(_QWORD *)(v121 + 16);
                            v224 = *(_QWORD *)(v121 + 8);
                            v220 = *(_QWORD *)(v121 + 32);
                            v218 = *(_BYTE *)(v121 + 40);
                            v216 = *(_QWORD *)(v121 + 48);
                            v233 = *(v113 - 6);
                            v123 = *(v113 - 4);
                            v124 = v108;
                            v125 = *(v113 - 5);
                            v126 = *(v113 - 3);
                            v226 = *(_QWORD *)v121;
                            v229 = *(v113 - 2);
                            v127 = *((_BYTE *)v113 - 8);
                            v128 = *(_QWORD *)(v109 + v98);
                            v129 = *v124;
                            swift_retain();
                            swift_bridgeObjectRetain();
                            swift_retain();
                            swift_bridgeObjectRetain();
                            v130 = swift_isUniquelyReferenced_nonNull_native();
                            *v124 = v129;
                            if ((v130 & 1) == 0)
                            {
                              v129 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v129);
                              *v124 = v129;
                            }
                            if (v258 >= *(_QWORD *)(v129 + 16))
                              goto LABEL_269;
                            v131 = v129 + 56 * v258;
                            *(_QWORD *)(v131 + 32) = v233;
                            *(_QWORD *)(v131 + 40) = v125;
                            *(_QWORD *)(v131 + 48) = v123;
                            *(_QWORD *)(v131 + 56) = v126;
                            *(_QWORD *)(v131 + 64) = v229;
                            *(_BYTE *)(v131 + 72) = v127;
                            *(_QWORD *)(v131 + 80) = v128;
                            swift_bridgeObjectRelease();
                            swift_release();
                            v108 = v236;
                            v132 = *v236;
                            v133 = swift_isUniquelyReferenced_nonNull_native();
                            *v236 = v132;
                            if ((v133 & 1) == 0)
                            {
                              v132 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v132);
                              *v236 = v132;
                            }
                            v91 = v270;
                            if (v107 >= *(_QWORD *)(v132 + 16))
                              goto LABEL_270;
                            v134 = (_QWORD *)(v132 + v98);
                            *(v134 - 6) = v226;
                            *(v134 - 5) = v224;
                            *(v134 - 4) = v222;
                            *(v134 - 3) = v122;
                            *(v134 - 2) = v220;
                            *((_BYTE *)v134 - 8) = v218;
                            *v134 = v216;
                            swift_bridgeObjectRelease();
                            swift_release();
                            v112 = v258;
                          }
                          v135 = __OFADD__(v112++, 1);
                          if (v135)
                            goto LABEL_254;
                          goto LABEL_147;
                        }
                        goto LABEL_276;
                      }
                    }
                    else if ((v250 & 1) == 0 && v256 == v246 && v103 == v253)
                    {
                      goto LABEL_116;
                    }
                  }
                  else
                  {
                    v105 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_release();
                    v91 = v270;
                    v95 = v99;
                    if ((v105 & 1) != 0)
                      goto LABEL_108;
                  }
                }
                else
                {
                  swift_bridgeObjectRelease();
                  swift_release();
                  v91 = v270;
                  v95 = v99;
                }
              }
              v97 += 7;
              ++v96;
              v98 += 56;
              if (v95 == v96)
              {
                swift_release();
                v112 = v99;
                v107 = *(_QWORD *)(*v236 + 16);
                v68 = v266;
                v111 = v263;
LABEL_209:
                v87 = v111;
                if ((uint64_t)v107 >= v112)
                  goto LABEL_217;
LABEL_256:
                __break(1u);
LABEL_257:
                __break(1u);
LABEL_258:
                __break(1u);
                break;
              }
              continue;
            }
          }
          __break(1u);
LABEL_260:
          __break(1u);
          goto LABEL_261;
        }
        specialized OrderedSet._appendNew(_:in:)(&v280, v76, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(uint64_t, int64_t, _QWORD, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
        v136 = specialized OrderedSet.init<A>(_:)(MEMORY[0x24BEE4AF8]);
        v138 = v137;
        v141 = (_QWORD *)v69[2];
        v140 = v69 + 2;
        v139 = v141;
        v142 = swift_isUniquelyReferenced_nonNull_native();
        *v140 = v141;
        if ((v142 & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v139[2] + 1, 1);
          v139 = (_QWORD *)*v140;
        }
        v144 = v139[2];
        v143 = v139[3];
        if (v144 >= v143 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v143 > 1, v144 + 1, 1);
          v139 = (_QWORD *)*v140;
        }
        v139[2] = v144 + 1;
        v145 = &v139[2 * v144];
        v145[4] = v136;
        v145[5] = v138;
        v146 = (_QWORD *)*v140;
        v147 = *(_QWORD *)(*v140 + 16);
        v148 = swift_isUniquelyReferenced_nonNull_native();
        *v140 = v146;
        if ((v148 & 1) == 0)
        {
          v146 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v146);
          *v140 = v146;
        }
        v68 = v266;
        v149 = v270;
        v87 = v263;
        if (!v147)
          goto LABEL_260;
        if (v147 > v146[2])
        {
LABEL_261:
          __break(1u);
LABEL_262:
          __break(1u);
          goto LABEL_263;
        }
        v150 = &v146[2 * v147 - 2];
        v152 = v150[5];
        v151 = v150 + 5;
        v153 = *(_QWORD *)(v152 + 16);
        if (!v153)
        {
          v107 = 0;
          v112 = 0;
          goto LABEL_217;
        }
        v237 = v151;
        v154 = 0;
        v155 = (_QWORD *)(swift_retain() + 80);
        v156 = 136;
        v157 = v153;
        while (2)
        {
          if (*(v155 - 6) != v149)
            goto LABEL_160;
          v158 = *(v155 - 4);
          v159 = *(v155 - 3);
          v259 = *(v155 - 2);
          v160 = *((_BYTE *)v155 - 8);
          v161 = *v155;
          v162 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*(v155 - 5) + 128);
          swift_retain();
          swift_bridgeObjectRetain();
          if ((v162(v286) & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_release();
            v149 = v270;
            v153 = v157;
            goto LABEL_160;
          }
          if (v158 == v265 && v159 == v272)
          {
            swift_bridgeObjectRelease();
            swift_release();
            v149 = v270;
            v153 = v157;
            goto LABEL_167;
          }
          v163 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_release();
          v149 = v270;
          v153 = v157;
          if ((v163 & 1) == 0)
            goto LABEL_160;
LABEL_167:
          if ((v160 & 1) == 0)
          {
            if ((v250 & 1) == 0 && v259 == v246 && v161 == v253)
              goto LABEL_175;
LABEL_160:
            v155 += 7;
            ++v154;
            v156 += 56;
            if (v153 == v154)
            {
              swift_release();
              v112 = v157;
              v107 = *(_QWORD *)(*v237 + 16);
              v68 = v266;
              v168 = v263;
              goto LABEL_212;
            }
            continue;
          }
          break;
        }
        v164 = v250;
        if (v161 != v253)
          v164 = 0;
        if ((v164 & 1) == 0)
          goto LABEL_160;
LABEL_175:
        swift_release();
        v107 = v154 + 1;
        if (__OFADD__(v154, 1))
          goto LABEL_277;
        v165 = v237;
        v166 = *v237;
        v167 = *(_QWORD *)(*v237 + 16);
        v168 = v263;
        v112 = v154;
        if (v107 != v167)
        {
          while (1)
          {
            if (v107 >= v167)
              goto LABEL_253;
            v169 = (_QWORD *)(v166 + v156);
            if (*(_QWORD *)(v166 + v156 - 48) != v149)
              goto LABEL_194;
            v170 = v165;
            v171 = v112;
            v172 = *(v169 - 4);
            v173 = *(v169 - 3);
            v260 = *((_BYTE *)v169 - 8);
            v230 = *(v169 - 2);
            v234 = *v169;
            v174 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*(v169 - 5) + 128);
            swift_retain();
            swift_bridgeObjectRetain();
            if ((v174(v286) & 1) != 0)
            {
              if (v172 == v265 && v173 == v272)
              {
                swift_bridgeObjectRelease();
                swift_release();
                v149 = v270;
                v112 = v171;
                v165 = v170;
              }
              else
              {
                v175 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_release();
                v149 = v270;
                v112 = v171;
                v165 = v170;
                if ((v175 & 1) == 0)
                  goto LABEL_194;
              }
              if ((v260 & 1) != 0)
              {
                v176 = v250;
                if (v234 != v253)
                  v176 = 0;
                if ((v176 & 1) != 0)
                  goto LABEL_206;
              }
              else if ((v250 & 1) == 0 && v230 == v246 && v234 == v253)
              {
                goto LABEL_206;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_release();
              v149 = v270;
              v112 = v171;
              v165 = v170;
            }
LABEL_194:
            if (v107 != v112)
            {
              if (v112 < 0)
                goto LABEL_271;
              v177 = *(_QWORD *)(v166 + 16);
              if (v112 >= v177)
                goto LABEL_272;
              if (v107 >= v177)
                goto LABEL_273;
              v261 = v112;
              v178 = v166 + 32 + 56 * v112;
              v179 = *(_QWORD *)(v178 + 24);
              v221 = *(_QWORD *)(v178 + 16);
              v223 = *(_QWORD *)(v178 + 8);
              v219 = *(_QWORD *)(v178 + 32);
              v217 = *(_BYTE *)(v178 + 40);
              v215 = *(_QWORD *)(v178 + 48);
              v180 = *(v169 - 5);
              v182 = *(v169 - 4);
              v181 = *(v169 - 3);
              v231 = *(v169 - 2);
              v235 = *(v169 - 6);
              v183 = *((_BYTE *)v169 - 8);
              v225 = *(_QWORD *)v178;
              v227 = *(_QWORD *)(v166 + v156);
              v184 = *v165;
              swift_retain();
              swift_bridgeObjectRetain();
              swift_retain();
              swift_bridgeObjectRetain();
              v185 = swift_isUniquelyReferenced_nonNull_native();
              *v165 = v184;
              if ((v185 & 1) == 0)
              {
                v184 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v184);
                *v165 = v184;
              }
              if (v261 >= *(_QWORD *)(v184 + 16))
                goto LABEL_274;
              v186 = v184 + 56 * v261;
              *(_QWORD *)(v186 + 32) = v235;
              *(_QWORD *)(v186 + 40) = v180;
              *(_QWORD *)(v186 + 48) = v182;
              *(_QWORD *)(v186 + 56) = v181;
              *(_QWORD *)(v186 + 64) = v231;
              *(_BYTE *)(v186 + 72) = v183;
              *(_QWORD *)(v186 + 80) = v227;
              swift_bridgeObjectRelease();
              swift_release();
              v165 = v237;
              v187 = *v237;
              v188 = swift_isUniquelyReferenced_nonNull_native();
              *v237 = v187;
              if ((v188 & 1) == 0)
              {
                v187 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v187);
                *v237 = v187;
              }
              v149 = v270;
              if (v107 >= *(_QWORD *)(v187 + 16))
                goto LABEL_275;
              v189 = (_QWORD *)(v187 + v156);
              *(v189 - 6) = v225;
              *(v189 - 5) = v223;
              *(v189 - 4) = v221;
              *(v189 - 3) = v179;
              *(v189 - 2) = v219;
              *((_BYTE *)v189 - 8) = v217;
              *v189 = v215;
              swift_bridgeObjectRelease();
              swift_release();
              v112 = v261;
            }
            v135 = __OFADD__(v112++, 1);
            if (v135)
              goto LABEL_255;
LABEL_206:
            ++v107;
            v166 = *v165;
            v167 = *(_QWORD *)(*v165 + 16);
            v156 += 56;
            v68 = v266;
            v168 = v263;
            if (v107 == v167)
              goto LABEL_212;
          }
        }
        v68 = v266;
LABEL_212:
        v87 = v168;
        if ((uint64_t)v107 < v112)
          goto LABEL_257;
LABEL_217:
        specialized ContiguousArray.replaceSubrange<A>(_:with:)(v112, v107);
        specialized OrderedSet._regenerateHashTable()((uint64_t (*)(uint64_t, int64_t, _QWORD, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
        v238(v273, 0);
        v10 = v248;
LABEL_218:
        v190 = (void (*)(_QWORD *, _QWORD))specialized OrderedDictionary.subscript.modify(v273, v270);
        if (!v191[1])
        {
          v190(v273, 0);
          swift_bridgeObjectRelease_n();
          swift_release_n();
          swift_bridgeObjectRelease_n();
          swift_release_n();
          goto LABEL_239;
        }
        v192 = v191;
        v271 = v190;
        v193 = v87;
        v194 = v191[3];
        v195 = v191[4];
        v196 = *(_QWORD *)(v195 + 16);
        swift_retain();
        if (v194)
        {
          swift_retain();
          v197 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v274, v195 + 32, v196, (_QWORD *)(v194 + 16), v194 + 32);
          v199 = v198;
          v201 = v200;
        }
        else
        {
          v197 = specialized Collection<>.firstIndex(of:)((uint64_t *)&v274, v195 + 32, v196);
          v199 = v202;
          v201 = 0;
        }
        swift_release();
        swift_release();
        if ((v199 & 1) != 0)
        {
          specialized OrderedSet._appendNew(_:in:)(&v274, v201, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(uint64_t, int64_t, _QWORD, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
          v207 = (_QWORD *)v192[5];
          v206 = v192 + 5;
          v205 = v207;
          v208 = swift_isUniquelyReferenced_nonNull_native();
          *v206 = v207;
          v87 = v193;
          if ((v208 & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v205[2] + 1, 1);
            v205 = (_QWORD *)*v206;
          }
          v210 = v205[2];
          v209 = v205[3];
          v10 = v248;
          if (v210 >= v209 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v209 > 1, v210 + 1, 1);
            v205 = (_QWORD *)*v206;
          }
          v205[2] = v210 + 1;
          v211 = &v205[7 * v210];
          *((_OWORD *)v211 + 2) = 0u;
          *((_OWORD *)v211 + 3) = 0u;
          *((_OWORD *)v211 + 4) = 0u;
          v211[10] = 0;
          v203 = (_QWORD *)*v206;
          v212 = *(_QWORD *)(*v206 + 16);
          v213 = swift_isUniquelyReferenced_nonNull_native();
          *v206 = v203;
          if ((v213 & 1) == 0)
          {
            v203 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v203);
            *v206 = v203;
          }
          if (v212)
          {
            if (v212 <= v203[2])
            {
              v197 = v212 - 1;
              goto LABEL_238;
            }
          }
          else
          {
LABEL_264:
            __break(1u);
          }
          __break(1u);
LABEL_266:
          __break(1u);
LABEL_267:
          __break(1u);
LABEL_268:
          __break(1u);
LABEL_269:
          __break(1u);
LABEL_270:
          __break(1u);
LABEL_271:
          __break(1u);
LABEL_272:
          __break(1u);
LABEL_273:
          __break(1u);
LABEL_274:
          __break(1u);
LABEL_275:
          __break(1u);
LABEL_276:
          __break(1u);
LABEL_277:
          __break(1u);
          return;
        }
        v203 = (_QWORD *)v192[5];
        v204 = swift_isUniquelyReferenced_nonNull_native();
        v192[5] = v203;
        v87 = v193;
        if ((v204 & 1) == 0)
        {
          v203 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v203);
          v192[5] = v203;
        }
        v10 = v248;
        if ((v197 & 0x8000000000000000) != 0)
          goto LABEL_262;
        if (v197 >= v203[2])
        {
LABEL_263:
          __break(1u);
          goto LABEL_264;
        }
LABEL_238:
        v214 = &v203[7 * v197];
        outlined consume of Input?(v214[4], v214[5]);
        v214[10] = 0;
        *((_OWORD *)v214 + 3) = 0u;
        *((_OWORD *)v214 + 4) = 0u;
        *((_OWORD *)v214 + 2) = 0u;
        v271(v273, 0);
        swift_bridgeObjectRelease_n();
        swift_release_n();
        swift_bridgeObjectRelease_n();
        swift_release_n();
        v68 = v266;
LABEL_239:
        swift_bridgeObjectRelease();
        outlined consume of Input?(v242, v87);
        swift_bridgeObjectRelease();
        swift_release();
        v12 = v269;
        v11 = v68;
LABEL_10:
        if (++v12 == v11)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_241;
        }
      }
      v33 = v32;
LABEL_35:
      v18 = v31;
LABEL_36:
      v19 = v30;
      v20 = v29;
      goto LABEL_37;
    }
LABEL_243:
    if ((uint64_t)++v5 >= (uint64_t)v4)
      goto LABEL_246;
  }
  while (v5 < v4);
  __break(1u);
LABEL_246:
  swift_bridgeObjectRelease_n();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Graph.resolveMaterialXEnums()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;

  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = v0;
    v5 = v2 + 32;
    swift_bridgeObjectRetain_n();
    v6 = 0;
    v19 = v5;
    while (1)
    {
      v7 = (unint64_t *)(v5 + 48 * v6);
      if (v7[3] != -7)
      {
        v8 = v7[1];
        v9 = *(_QWORD *)(v8 + 16);
        if (v9)
        {
          v10 = *v7;
          v11 = v7[2];
          swift_bridgeObjectRetain_n();
          v27 = v11;
          swift_bridgeObjectRetain();
          v20 = v10;
          outlined copy of NodePersonality(v10);
          v12 = (_QWORD *)(v8 + 80);
          while (1)
          {
            v13 = *v12;
            v14 = *((_BYTE *)v12 - 8);
            v16 = *(v12 - 3);
            v15 = *(v12 - 2);
            v18 = *(v12 - 5);
            v17 = *(v12 - 4);
            *(_QWORD *)&v21 = *(v12 - 6);
            *((_QWORD *)&v21 + 1) = v18;
            v22 = v17;
            v23 = v16;
            v24 = v15;
            v25 = v14;
            v26 = v13;
            swift_retain();
            swift_bridgeObjectRetain();
            closure #1 in closure #1 in Graph.resolveMaterialXEnums()(&v21, v4);
            if (v1)
              goto LABEL_12;
            v12 += 7;
            swift_bridgeObjectRelease();
            swift_release();
            if (!--v9)
            {
              swift_bridgeObjectRelease_n();
              outlined consume of NodePersonality(v20);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v5 = v19;
              break;
            }
          }
        }
      }
      if ((uint64_t)++v6 >= (uint64_t)v3)
        break;
      if (v6 >= v3)
      {
        __break(1u);
LABEL_12:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_release();
        outlined consume of NodePersonality(v20);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
    }
    swift_bridgeObjectRelease_n();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Graph.resolveSwizzleNodes(nodeDefStore:)(ShaderGraph::NodeDefStore nodeDefStore)
{
  specialized Graph.resolveSwizzleNodes(nodeDefStore:)();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Graph.resolveEnvironmentRadianceNode()()
{
  Graph.replaceMultiOutputNodes()((void (*)(_QWORD *, uint64_t))closure #1 in Graph.resolveEnvironmentRadianceNode());
}

uint64_t Graph.replaceMultiOutputNodes()(void (*a1)(_QWORD *, uint64_t))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD v15[5];
  char v16;
  void (*v17)(_QWORD *, uint64_t);

  v17 = a1;
  result = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v5 = v1;
    v6 = result + 32;
    swift_bridgeObjectRetain_n();
    v7 = 0;
    while (1)
    {
      v8 = v6 + 48 * v7;
      v9 = *(_QWORD *)(v8 + 24);
      if (v9 == -7)
      {
        if ((uint64_t)++v7 >= v4)
          return swift_bridgeObjectRelease_n();
      }
      else
      {
        v11 = *(_QWORD *)v8;
        v10 = *(_QWORD *)(v8 + 8);
        v12 = *(_QWORD *)(v8 + 16);
        v13 = *(_BYTE *)(v8 + 40);
        v14 = *(_QWORD *)(v8 + 32);
        v15[0] = v11;
        v15[1] = v10;
        v15[2] = v12;
        v15[3] = v9;
        v15[4] = v14;
        v16 = v13;
        outlined copy of NodePersonality(v11);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v17(v15, v5);
        if (v2)
        {
          outlined consume of NodePersonality(v11);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        ++v7;
        outlined consume of NodePersonality(v11);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((uint64_t)v7 >= v4)
          return swift_bridgeObjectRelease_n();
      }
      if (v7 >= v4)
      {
        __break(1u);
        return swift_bridgeObjectRelease_n();
      }
    }
  }
  return result;
}

uint64_t Graph.transformGeomPropValueNodes(surface:geometryModifier:nodeDefStore:)(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  return specialized Graph.transformGeomPropValueNodes(surface:geometryModifier:nodeDefStore:)(a3, a4);
}

uint64_t Graph.insertParamsInputs(surface:geometryModifier:nodeDefStore:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  __int128 v8;
  _OWORD v9[2];
  __int128 v10;
  _OWORD v11[2];

  outlined init with take of MetalFunctionNode?(a2, (uint64_t)&v7, &demangling cache variable for type metadata for ShaderGraphNode?);
  v5 = v7;
  result = specialized Graph.insertParamsInputs(surface:type:nodeDefStore:)(a1, 0);
  if (!v2)
  {
    result = outlined init with take of MetalFunctionNode?(a2, (uint64_t)&v8, &demangling cache variable for type metadata for ShaderGraphNode?);
    if (*((_QWORD *)&v8 + 1))
    {
      v10 = v8;
      v11[0] = v9[0];
      *(_OWORD *)((char *)v11 + 9) = *(_OWORD *)((char *)v9 + 9);
      outlined copy of NodePersonality(v5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Graph.insertParamsInputs(surface:type:nodeDefStore:)((uint64_t)&v10, 1);
      return outlined retain of ShaderGraphNode?(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ShaderGraphNode?);
    }
  }
  return result;
}

uint64_t Graph.rewireUniformInputs(customUniformsType:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t *v59;
  _OWORD *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  __int128 v80;
  unint64_t v81;
  uint64_t i;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  unint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  unint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  _QWORD v143[5];
  char v144;
  uint64_t v145;
  _QWORD v146[5];
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;

  v3 = v1;
  v5 = swift_bridgeObjectRetain();
  v6 = specialized _ArrayProtocol.filter(_:)(v5, (__int128 *)v3);
  v7 = v2;
  swift_bridgeObjectRelease();
  v84 = *(_QWORD *)(v6 + 16);
  if (!v84)
    return swift_bridgeObjectRelease();
  v95 = v3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_245FBECD0;
  *(_QWORD *)(v8 + 32) = 7632239;
  *(_QWORD *)(v8 + 40) = 0xE300000000000000;
  *(_QWORD *)(v8 + 48) = a1;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = 12580;
  *(_QWORD *)(v9 + 24) = 0xE200000000000000;
  v10 = v9 | 0x6000000000000000;
  v11 = *(_QWORD *)(v3 + 40);
  swift_retain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v11, MEMORY[0x24BEE4AF8], v8, v10, v3 + 64, v3, &v119);
  v12 = v119;
  v13 = v120;
  v14 = v121;
  v15 = v122;
  v75 = v123;
  v74 = v124;
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  result = swift_deallocClassInstance();
  v156 = v14;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_59;
  v73 = v15;
  v17 = *(void **)(v6 + 56);
  v96 = *(_QWORD *)(v14 + 16);
  if (!v96)
  {
    swift_bridgeObjectRetain_n();
    swift_retain();
LABEL_52:
    outlined init with take of NodePersonality(&v119, &v131);
    v130 = v120;
    v99 = v12;
    *(_QWORD *)&v100 = v13;
    *((_QWORD *)&v100 + 1) = v14;
    v101 = v73;
    v102 = v75;
    v103 = v74;
    v104 = 7632239;
    v105 = 0xE300000000000000;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_((uint64_t)&v99);
    outlined init with take of UserGraphError.ErrorType((__int128 *)&v99, (uint64_t)&v106);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v118 = 0uLL;
    swift_allocError();
    *v60 = v106;
    v61 = v110;
    v62 = v108;
    v63 = v107;
    v60[3] = v109;
    v60[4] = v61;
    v60[1] = v63;
    v60[2] = v62;
    v64 = v114;
    v65 = v112;
    v66 = v111;
    v60[7] = v113;
    v60[8] = v64;
    v60[5] = v66;
    v60[6] = v65;
    v67 = v118;
    v68 = v116;
    v69 = v115;
    v60[11] = v117;
    v60[12] = v67;
    v60[9] = v69;
    v60[10] = v68;
    outlined retain of [Input]((uint64_t)&v156);
    outlined retain of NodePersonality(&v131);
    outlined retain of [Input]((uint64_t)&v130);
    swift_willThrow();
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    outlined release of NodePersonality(&v131);
    v59 = &v130;
LABEL_53:
    outlined release of [Input]((uint64_t)v59);
    return outlined release of [Input]((uint64_t)&v156);
  }
  v70 = v13;
  v71 = v12;
  v91 = *(_QWORD *)(v6 + 40);
  v92 = v7;
  v81 = v6 + 32;
  v88 = *(_QWORD *)(v6 + 80);
  v87 = *(_BYTE *)(v6 + 72);
  v83 = v6;
  v85 = *(_QWORD *)(v6 + 32);
  v86 = *(_QWORD *)(v6 + 64);
  v18 = *(_QWORD *)(v6 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  v72 = (_QWORD *)(v14 + 136);
  v19 = 1;
  for (i = v14; ; v14 = i)
  {
    v89 = v19;
    v90 = v18;
    v21 = *(_QWORD *)(v14 + 32);
    v20 = *(_QWORD *)(v14 + 40);
    v22 = *(_QWORD *)(v14 + 48);
    v23 = *(_QWORD *)(v14 + 56);
    v24 = *(_QWORD *)(v14 + 64);
    v25 = *(_BYTE *)(v14 + 72);
    v26 = *(_QWORD *)(v14 + 80);
    v27 = v22 == 7632239 && v23 == 0xE300000000000000;
    v93 = v17;
    if (!v27)
      break;
    swift_bridgeObjectRetain();
    swift_retain();
    v23 = 0xE300000000000000;
    swift_bridgeObjectRetain();
    v22 = 7632239;
    v28 = v20;
LABEL_25:
    v149 = v21;
    v150 = v28;
    v151 = v22;
    v152 = v23;
    v153 = v24;
    v154 = v25;
    v155 = v26;
    Output.getProperty(_:_:)(v95, v18, v17, &v125);
    if (v92)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      outlined init with take of NodePersonality(&v119, &v142);
      outlined release of NodePersonality(&v142);
      v141 = v120;
      v59 = &v141;
      goto LABEL_53;
    }
    v92 = 0;
    v80 = v126;
    v78 = v127;
    v79 = v125;
    v77 = v128;
    v76 = v129;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v34 = *((_QWORD *)&v126 + 1);
    v140 = *((_QWORD *)&v126 + 1);
    v98 = *(_QWORD *)(*((_QWORD *)&v126 + 1) + 16);
    if (!v98)
      goto LABEL_50;
    v35 = *(_QWORD *)(*((_QWORD *)&v126 + 1) + 32);
    v36 = *(_QWORD *)(*((_QWORD *)&v126 + 1) + 40);
    v37 = *(_QWORD *)(*((_QWORD *)&v126 + 1) + 48);
    v38 = *(_QWORD *)(*((_QWORD *)&v126 + 1) + 56);
    v39 = *(_QWORD *)(*((_QWORD *)&v126 + 1) + 64);
    v40 = *(_BYTE *)(*((_QWORD *)&v126 + 1) + 72);
    v41 = *(_QWORD *)(*((_QWORD *)&v126 + 1) + 80);
    if (v37 == 7632239 && v38 == 0xE300000000000000)
    {
      v42 = *(_QWORD *)(*((_QWORD *)&v126 + 1) + 32);
      swift_retain();
      v38 = 0xE300000000000000;
      swift_bridgeObjectRetain();
      v37 = 7632239;
    }
    else
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        if (v98 != 1)
        {
          v44 = (_QWORD *)(v34 + 136);
          v45 = 1;
          while (1)
          {
            v46 = v45 + 1;
            if (__OFADD__(v45, 1))
              goto LABEL_57;
            v47 = *(v44 - 6);
            v36 = *(v44 - 5);
            v37 = *(v44 - 4);
            v38 = *(v44 - 3);
            v94 = *(v44 - 2);
            v40 = *((_BYTE *)v44 - 8);
            v41 = *v44;
            if (v37 == 7632239 && v38 == 0xE300000000000000)
              break;
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) != 0)
            {
              v42 = v47;
              swift_retain();
              swift_bridgeObjectRetain();
              goto LABEL_47;
            }
            v44 += 7;
            ++v45;
            if (v46 == v98)
              goto LABEL_50;
          }
          v42 = *(v44 - 6);
          swift_retain();
          v38 = 0xE300000000000000;
          swift_bridgeObjectRetain();
          v37 = 7632239;
LABEL_47:
          v39 = v94;
          goto LABEL_32;
        }
LABEL_50:
        outlined init with take of NodePersonality(&v125, &v135);
        v134 = v126;
        v99 = v79;
        v100 = v80;
        v101 = v78;
        v102 = v77;
        v103 = v76;
        v104 = 7632239;
        v105 = 0xE300000000000000;
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_((uint64_t)&v99);
        outlined init with take of UserGraphError.ErrorType((__int128 *)&v99, (uint64_t)&v106);
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        v118 = 0uLL;
        swift_allocError();
        *v49 = v106;
        v50 = v110;
        v51 = v108;
        v52 = v107;
        v49[3] = v109;
        v49[4] = v50;
        v49[1] = v52;
        v49[2] = v51;
        v53 = v114;
        v54 = v112;
        v55 = v111;
        v49[7] = v113;
        v49[8] = v53;
        v49[5] = v55;
        v49[6] = v54;
        v56 = v118;
        v57 = v116;
        v58 = v115;
        v49[11] = v117;
        v49[12] = v56;
        v49[9] = v58;
        v49[10] = v57;
        outlined retain of [Input]((uint64_t)&v140);
        outlined retain of NodePersonality(&v135);
        outlined retain of [Input]((uint64_t)&v134);
        swift_willThrow();
        swift_bridgeObjectRelease();
        outlined release of NodePersonality(&v135);
        outlined release of [Input]((uint64_t)&v134);
        outlined release of [Input]((uint64_t)&v140);
        swift_bridgeObjectRelease();
        swift_release();
        outlined init with take of NodePersonality(&v119, &v133);
        outlined release of NodePersonality(&v133);
        v132 = v120;
        v59 = &v132;
        goto LABEL_53;
      }
      v42 = v35;
      swift_retain();
      swift_bridgeObjectRetain();
    }
LABEL_32:
    v143[0] = v85;
    v143[1] = v91;
    v143[2] = v90;
    v143[3] = v93;
    v143[4] = v86;
    v144 = v87 & 1;
    v145 = v88;
    v146[0] = v42;
    v146[1] = v36;
    v146[2] = v37;
    v146[3] = v38;
    v146[4] = v39;
    v147 = v40;
    v148 = v41;
    Graph.moveEdges(from:to:)((uint64_t)v143, (uint64_t)v146);
    swift_bridgeObjectRelease();
    swift_release();
    outlined init with take of NodePersonality(&v125, &v139);
    outlined release of NodePersonality(&v139);
    v138 = v126;
    outlined release of [Input]((uint64_t)&v138);
    outlined release of [Input]((uint64_t)&v140);
    swift_bridgeObjectRelease();
    swift_release();
    result = v83;
    if (v89 == v84)
    {
      swift_bridgeObjectRelease();
      outlined init with take of NodePersonality(&v119, &v137);
      outlined release of NodePersonality(&v137);
      v136 = v120;
      outlined release of [Input]((uint64_t)&v136);
      return outlined release of [Input]((uint64_t)&v156);
    }
    if (v89 >= *(_QWORD *)(v83 + 16))
      goto LABEL_58;
    v19 = v89 + 1;
    v43 = v81 + 56 * v89;
    v88 = *(_QWORD *)(v43 + 48);
    v87 = *(_BYTE *)(v43 + 40);
    v17 = *(void **)(v43 + 24);
    v18 = *(_QWORD *)(v43 + 16);
    v85 = *(_QWORD *)v43;
    v86 = *(_QWORD *)(v43 + 32);
    v91 = *(_QWORD *)(v43 + 8);
    swift_retain();
    swift_bridgeObjectRetain();
  }
  v28 = *(_QWORD *)(v14 + 40);
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    goto LABEL_25;
  }
  if (v96 == 1)
  {
LABEL_51:
    swift_bridgeObjectRetain();
    v14 = i;
    v13 = v70;
    v12 = v71;
    goto LABEL_52;
  }
  v29 = 1;
  v30 = v72;
  while (1)
  {
    v31 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    v32 = *(v30 - 5);
    v97 = *(v30 - 6);
    v22 = *(v30 - 4);
    v23 = *(v30 - 3);
    v24 = *(v30 - 2);
    v25 = *((_BYTE *)v30 - 8);
    v26 = *v30;
    if (v22 == 7632239 && v23 == 0xE300000000000000)
    {
      v17 = v93;
      swift_bridgeObjectRetain();
      v28 = v32;
      swift_retain();
      v23 = 0xE300000000000000;
      swift_bridgeObjectRetain();
      v22 = 7632239;
LABEL_24:
      v18 = v90;
      v21 = v97;
      goto LABEL_25;
    }
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) != 0)
    {
      v17 = v93;
      swift_bridgeObjectRetain();
      v28 = v32;
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_24;
    }
    v30 += 7;
    ++v29;
    if (v31 == v96)
      goto LABEL_51;
  }
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
  return result;
}

uint64_t Graph.resolveMaterialXNodeDefs(connectedTo:nodeDefStore:shaderType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v34;
  __int128 v35;
  _BYTE v36[25];
  _OWORD v37[11];
  unint64_t v38;
  uint64_t v39;
  _QWORD v40[3];
  uint64_t v41;

  v7 = v6;
  v8 = v5;
  v10 = v37;
  if ((a5 & 1) != 0)
  {
    if (one-time initialization token for realitykit_geometryModifier != -1)
      swift_once();
    v11 = &static MaterialXTarget.realitykit_geometryModifier;
    goto LABEL_7;
  }
  if (one-time initialization token for realitykit_surfaceShader != -1)
    goto LABEL_28;
  while (1)
  {
    v11 = &static MaterialXTarget.realitykit_surfaceShader;
LABEL_7:
    v12 = *v11;
    v13 = v8[9];
    v10[8] = v8[8];
    v10[9] = v13;
    *(_OWORD *)((char *)v10 + 153) = *(_OWORD *)((char *)v8 + 153);
    v14 = v8[5];
    v10[4] = v8[4];
    v10[5] = v14;
    v15 = v8[7];
    v10[6] = v8[6];
    v10[7] = v15;
    v16 = v8[1];
    v37[0] = *v8;
    v37[1] = v16;
    v17 = v8[3];
    v10[2] = v8[2];
    v10[3] = v17;
    swift_retain();
    outlined retain of Graph((uint64_t)v37);
    Graph.connectedUpstreamSubgraph(rootedAt:)(a1, (uint64_t)&v34);
    v18 = v34;
    outlined release of Graph((uint64_t)v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    v19 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_AH2IDVs5NeverOTg504_s11D159Graph0B0V16splitSharedNodes12nodeDefStore07surfaceA016geometryModifieryAA04NodegH0V_AA0abL0VAKSgtKFAK2IDVAKcfu_33_300d98c1e43c0bc1dedcebf2cdbfb115AkNTf3nnnpk_nTf1cn_nTm(v18);
    v10 = (_OWORD *)v7;
    swift_bridgeObjectRelease();
    a1 = specialized Set.init<A>(_:)(v19);
    swift_bridgeObjectRelease();
    v7 = *((_QWORD *)v8 + 8);
    v20 = *(_QWORD *)(v7 + 16);
    if (!v20)
      break;
    v41 = v7 + 56;
    swift_bridgeObjectRetain_n();
    v21 = 0;
    v22 = 0;
    while (v22 < v20)
    {
      v23 = 48 * v22;
      if (*(_QWORD *)(v41 + 48 * v22) == -7)
      {
        if ((uint64_t)(v22 + 1) >= v20)
          goto LABEL_23;
        v24 = 48 * v22++;
        while (1)
        {
          if (*(_QWORD *)(v7 + 104 + v24) != -7)
          {
            v23 = v24 + 48;
            goto LABEL_18;
          }
          v25 = v22 + 1;
          if (__OFADD__(v22, 1))
            break;
          ++v22;
          v24 += 48;
          if (v25 >= v20)
            goto LABEL_23;
        }
        __break(1u);
        break;
      }
LABEL_18:
      v26 = (__int128 *)(v7 + 32 + v23);
      v27 = *v26;
      v28 = v26[1];
      *(_OWORD *)&v36[9] = *(__int128 *)((char *)v26 + 25);
      v35 = v27;
      *(_OWORD *)v36 = v28;
      outlined init with take of NodePersonality(&v35, &v38);
      v39 = *((_QWORD *)&v35 + 1);
      v40[0] = *(_QWORD *)v36;
      if (__OFADD__(v21++, 1))
        goto LABEL_27;
      outlined retain of NodePersonality(&v38);
      outlined retain of [Input]((uint64_t)&v39);
      outlined retain of [Input]((uint64_t)v40);
      specialized closure #1 in Graph.resolveMaterialXNodeDefs(connectedTo:nodeDefStore:shaderType:)((uint64_t *)&v35, a2, a3, a4, a1, v12, (uint64_t)v8);
      outlined release of NodePersonality(&v38);
      outlined release of [Input]((uint64_t)&v39);
      outlined release of [Input]((uint64_t)v40);
      if (v10)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease_n();
      }
      if ((uint64_t)++v22 >= v20)
        goto LABEL_23;
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    swift_once();
  }
  swift_bridgeObjectRetain_n();
LABEL_23:
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t specialized Sequence.forEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t *a5, uint64_t *a6, _QWORD **a7, _QWORD **a8)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::UInt v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t result;
  char v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  Swift::UInt v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t);
  char v65;
  uint64_t v66;
  uint64_t *v67;
  __int128 *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  Swift::UInt v75;
  __int128 v76;
  uint64_t v77;
  char v78;
  Swift::Int v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  Swift::Int v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  char v111;
  unint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  NSObject *v116;
  os_log_type_t v117;
  uint8_t *v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned __int8 v164;
  unsigned __int8 v165;
  uint64_t v166;
  unsigned __int8 v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  Swift::UInt v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD v174[5];
  char v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  uint64_t v190;
  _OWORD v191[9];
  _OWORD v192[2];
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  uint64_t v199;
  uint64_t v200;
  __int128 v201;
  __int128 v202;
  char v203;
  uint64_t v204;
  _QWORD v205[5];
  char v206;
  uint64_t v207;
  _OWORD v208[3];
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unsigned __int8 v218;
  uint64_t v219;
  _OWORD *v220;

  v220 = a4;
  v134 = *(_QWORD *)(a1 + 16);
  if (!v134)
    goto LABEL_98;
  v133 = *(_QWORD *)(a2 + 16);
  if (!v133)
    goto LABEL_98;
  v131 = *(_QWORD *)(a3 + 16);
  if (!v131)
    goto LABEL_98;
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 56);
  v168 = *(_QWORD *)(a1 + 48);
  v170 = *(_QWORD *)(a1 + 32);
  v136 = *(_QWORD *)(a1 + 64);
  v164 = *(_BYTE *)(a1 + 72);
  v130 = a1 + 32;
  v160 = *(_QWORD *)(a1 + 80);
  v129 = a2 + 32;
  v152 = *(_QWORD *)(a2 + 80);
  v10 = *(_BYTE *)(a2 + 72);
  v11 = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 48);
  v132 = a3 + 32;
  v15 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  v16 = v170;
  v17 = v15;
  v18 = v164;
  v19 = v14;
  v20 = v12;
  v21 = v160;
  v22 = v10;
  v23 = v8;
  v24 = v152;
  v25 = v11;
  v26 = v136;
  v27 = v9;
  v28 = 0;
  v213 = v170;
  v214 = v23;
  v215 = v168;
  v216 = v9;
  v217 = v136;
  v218 = v164;
  v219 = v160;
  v193 = v17;
  v194 = v13;
  v29 = 1;
  v195 = v14;
  v196 = v25;
  v197 = v20;
  v198 = v22;
LABEL_5:
  v199 = v24;
  v148 = v17;
  v149 = v19;
  v150 = v20;
  v151 = v22;
  v153 = v24;
  v154 = v13;
  v155 = v25;
  v30 = v132 + 56 * v28;
  v31 = *(_QWORD *)(v30 + 8);
  v32 = v29;
  v34 = *(_QWORD *)(v30 + 16);
  v33 = *(_QWORD *)(v30 + 24);
  v35 = *(_QWORD *)(v30 + 32);
  v36 = *(_BYTE *)(v30 + 40);
  v37 = *(_QWORD *)(v30 + 48);
  v205[0] = *(_QWORD *)v30;
  v205[1] = v31;
  v205[2] = v34;
  v205[3] = v33;
  v205[4] = v35;
  v206 = v36;
  v207 = v37;
  v174[0] = v16;
  v174[1] = v23;
  v174[2] = v168;
  v174[3] = v27;
  v174[4] = v26;
  v175 = v18 & 1;
  v176 = v21;
  v177 = v17;
  v178 = v13;
  v179 = v19;
  v180 = v25;
  v181 = v20;
  v182 = v22 & 1;
  v183 = v24;
  v184 = v205[0];
  v146 = v34;
  v147 = v205[0];
  v156 = v33;
  v157 = v31;
  v185 = v31;
  v186 = v34;
  v187 = v33;
  v145 = v35;
  v188 = v35;
  v144 = v36;
  v189 = v36;
  v143 = v37;
  v190 = v37;
  v38 = v220[5];
  v191[4] = v220[4];
  v191[5] = v38;
  v39 = v220[3];
  v191[2] = v220[2];
  v191[3] = v39;
  *(_OWORD *)((char *)v192 + 9) = *(_OWORD *)((char *)v220 + 153);
  v40 = v220[9];
  v191[8] = v220[8];
  v192[0] = v40;
  v41 = v220[7];
  v191[6] = v220[6];
  v191[7] = v41;
  v42 = v220[1];
  v191[0] = *v220;
  v191[1] = v42;
  v43 = v42;
  v44 = (_QWORD *)(*((_QWORD *)&v191[0] + 1) + 32);
  v45 = *(_QWORD *)(*((_QWORD *)&v191[0] + 1) + 16);
  v139 = v27;
  v171 = v16;
  v135 = v32;
  if (*(_QWORD *)&v191[0])
  {
    result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v16, (uint64_t)v44, v45, (_QWORD *)(*(_QWORD *)&v191[0] + 16), *(_QWORD *)&v191[0] + 32);
    if ((v47 & 1) == 0)
    {
      if ((result & 0x8000000000000000) != 0)
        goto LABEL_97;
      goto LABEL_12;
    }
LABEL_42:
    swift_retain();
    swift_bridgeObjectRetain();
    outlined retain of (Input, (Input, Input))((uint64_t)v174);
    outlined retain of Graph((uint64_t)v191);
LABEL_43:
    v56 = MEMORY[0x24BEE4AF8];
LABEL_44:
    outlined release of Graph((uint64_t)v191);
    v166 = *(_QWORD *)(v56 + 16);
    if (!v166)
    {
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_87;
    }
    v162 = v56 + 32;
    swift_bridgeObjectRetain();
    v66 = 0;
    while (1)
    {
      v68 = (__int128 *)(v162 + 112 * v66);
      v70 = v68[5];
      v69 = v68[6];
      v71 = v68[4];
      v209 = v68[3];
      v210 = v71;
      v211 = v70;
      v212 = v69;
      v72 = *v68;
      v73 = v68[2];
      v208[1] = v68[1];
      v208[2] = v73;
      v208[0] = v72;
      v74 = *a5;
      v75 = *((_QWORD *)&v209 + 1);
      v76 = v210;
      v77 = v70;
      v78 = v212;
      v200 = *((_QWORD *)&v209 + 1);
      v201 = v210;
      v202 = v70;
      v169 = *((_QWORD *)&v212 + 1);
      v172 = *((_QWORD *)&v70 + 1);
      v203 = v212;
      v204 = *((_QWORD *)&v212 + 1);
      if (*(_QWORD *)(v74 + 16))
      {
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v75);
        v79 = Hasher._finalize()();
        v80 = -1 << *(_BYTE *)(v74 + 32);
        v81 = v79 & ~v80;
        v82 = v74 + 56;
        if (((*(_QWORD *)(v74 + 56 + ((v81 >> 3) & 0xFFFFFFFFFFFFF8)) >> v81) & 1) != 0)
        {
          v83 = *(_QWORD *)(v74 + 48);
          if (*(_QWORD *)(v83 + 8 * v81) == v75)
          {
            v84 = 1;
            goto LABEL_58;
          }
          v85 = ~v80;
          v86 = (v81 + 1) & v85;
          if (((*(_QWORD *)(v82 + ((v86 >> 3) & 0xFFFFFFFFFFFFF8)) >> v86) & 1) != 0)
          {
            do
            {
              v87 = *(_QWORD *)(v83 + 8 * v86);
              v84 = v87 == v75;
              if (v87 == v75)
                break;
              v86 = (v86 + 1) & v85;
            }
            while (((*(_QWORD *)(v82 + ((v86 >> 3) & 0xFFFFFFFFFFFFF8)) >> v86) & 1) != 0);
            goto LABEL_58;
          }
        }
      }
      v84 = 0;
LABEL_58:
      v88 = *a6;
      if (!*(_QWORD *)(*a6 + 16))
        goto LABEL_66;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v75);
      v89 = Hasher._finalize()();
      v90 = -1 << *(_BYTE *)(v88 + 32);
      v91 = v89 & ~v90;
      v92 = v88 + 56;
      if (((*(_QWORD *)(v88 + 56 + ((v91 >> 3) & 0xFFFFFFFFFFFFF8)) >> v91) & 1) == 0)
        goto LABEL_66;
      v93 = *(_QWORD *)(v88 + 48);
      if (*(_QWORD *)(v93 + 8 * v91) == v75)
      {
        v94 = 1;
        goto LABEL_67;
      }
      v95 = ~v90;
      v96 = (v91 + 1) & v95;
      if (((*(_QWORD *)(v92 + ((v96 >> 3) & 0xFFFFFFFFFFFFF8)) >> v96) & 1) != 0)
      {
        do
        {
          v97 = *(_QWORD *)(v93 + 8 * v96);
          v94 = v97 == v75;
          if (v97 == v75)
            break;
          v96 = (v96 + 1) & v95;
        }
        while (((*(_QWORD *)(v92 + ((v96 >> 3) & 0xFFFFFFFFFFFFF8)) >> v96) & 1) != 0);
      }
      else
      {
LABEL_66:
        v94 = 0;
      }
LABEL_67:
      outlined retain of Edge((uint64_t)v208);
      Graph.remove(_:)((uint64_t)v208);
      if (v84)
      {
        if (v94)
        {
          v98 = *a7;
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *a7 = v98;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v98[2] + 1, 1, v98);
            *a7 = v98;
          }
          v101 = v98[2];
          v100 = v98[3];
          v103 = v154;
          v102 = v155;
          v104 = v153;
          v105 = v151;
          v107 = v149;
          v106 = v150;
          v108 = v148;
          if (v101 >= v100 >> 1)
          {
            v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v100 > 1), v101 + 1, 1, v98);
            v108 = v148;
            v107 = v149;
            v106 = v150;
            v105 = v151;
            v104 = v153;
            v103 = v154;
            v102 = v155;
            *a7 = v98;
          }
          v98[2] = v101 + 1;
          v109 = &v98[14 * v101];
          v109[4] = v108;
          v109[5] = v103;
          v109[6] = v107;
          v109[7] = v102;
          v109[8] = v106;
          *((_BYTE *)v109 + 72) = v105 & 1;
          v109[10] = v104;
          v109[11] = v75;
          *((_OWORD *)v109 + 6) = v76;
          v109[14] = v77;
          v109[15] = v172;
          *((_BYTE *)v109 + 128) = v78;
          v109[17] = v169;
          v110 = *a8;
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          v111 = swift_isUniquelyReferenced_nonNull_native();
          *a8 = v110;
          if ((v111 & 1) == 0)
          {
            v110 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v110[2] + 1, 1, v110);
            *a8 = v110;
          }
          v113 = v110[2];
          v112 = v110[3];
          if (v113 >= v112 >> 1)
          {
            v110 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v112 > 1), v113 + 1, 1, v110);
            *a8 = v110;
          }
          v110[2] = v113 + 1;
          v114 = &v110[14 * v113];
          v114[4] = v147;
          v114[5] = v157;
          v114[6] = v146;
          v114[7] = v156;
          v114[8] = v145;
          *((_BYTE *)v114 + 72) = v144;
          v114[10] = v143;
          v114[11] = v75;
          *((_OWORD *)v114 + 6) = v76;
          v114[14] = v77;
          v114[15] = v172;
          *((_BYTE *)v114 + 128) = v78;
          v114[17] = v169;
          goto LABEL_48;
        }
        v67 = &v193;
      }
      else
      {
        if (!v94)
        {
          if (one-time initialization token for logger != -1)
            swift_once();
          v115 = type metadata accessor for Logger();
          __swift_project_value_buffer(v115, (uint64_t)logger);
          v116 = Logger.logObject.getter();
          v117 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v116, v117))
          {
            v118 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v118 = 0;
            _os_log_impl(&dword_245E46000, v116, v117, "Edge destination node isn't a surface node or geometry modifier node.", v118, 2u);
            MEMORY[0x24954C33C](v118, -1, -1);
          }

          goto LABEL_48;
        }
        v67 = v205;
      }
      Graph.connect(_:to:)((uint64_t)v67, (unint64_t)&v200);
LABEL_48:
      ++v66;
      outlined release of Edge((uint64_t)v208);
      if (v66 == v166)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
LABEL_87:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        outlined release of (Input, (Input, Input))((uint64_t)v174);
        if (v135 == v134 || v135 == v133 || v135 == v131)
          goto LABEL_99;
        v119 = v130 + 56 * v135;
        v23 = *(_QWORD *)(v119 + 8);
        v173 = *(_QWORD *)v119;
        v27 = *(_QWORD *)(v119 + 24);
        v168 = *(_QWORD *)(v119 + 16);
        v138 = *(_QWORD *)(v119 + 32);
        v167 = *(_BYTE *)(v119 + 40);
        v163 = *(_QWORD *)(v119 + 48);
        v120 = (uint64_t *)(v129 + 56 * v135);
        v121 = v120[6];
        v122 = *((_BYTE *)v120 + 40);
        v25 = v120[3];
        v123 = v120[4];
        v13 = v120[1];
        v124 = v120[2];
        v125 = *v120;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        v29 = v135 + 1;
        v16 = v173;
        v17 = v125;
        v26 = v138;
        v19 = v124;
        v20 = v123;
        v21 = v163;
        v22 = v122;
        v24 = v121;
        v18 = v167;
        v28 = v135;
        v213 = v173;
        v214 = v23;
        v215 = v168;
        v216 = v27;
        v217 = v138;
        v218 = v167;
        v219 = v163;
        v193 = v17;
        v194 = v13;
        v195 = v124;
        v196 = v25;
        v197 = v20;
        v198 = v122;
        goto LABEL_5;
      }
    }
  }
  if (!v45)
    goto LABEL_42;
  if (*v44 == v16)
  {
    result = 0;
  }
  else
  {
    if (v45 == 1)
      goto LABEL_42;
    if (*(_QWORD *)(*((_QWORD *)&v191[0] + 1) + 40) != v16)
    {
      if (v45 != 2)
      {
        if (*(_QWORD *)(*((_QWORD *)&v191[0] + 1) + 48) == v16)
        {
          result = 2;
        }
        else
        {
          v126 = 0;
          do
          {
            if (v45 - 3 == v126)
              goto LABEL_42;
            v127 = *(_QWORD *)(*((_QWORD *)&v191[0] + 1) + 56 + 8 * v126++);
          }
          while (v127 != v16);
          result = v126 + 2;
          if (v126 + 2 < 0)
          {
LABEL_97:
            __break(1u);
LABEL_98:
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_99:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
        }
        goto LABEL_12;
      }
      goto LABEL_42;
    }
    result = 1;
  }
LABEL_12:
  if (result >= *(_QWORD *)(v43 + 16))
  {
    __break(1u);
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  v48 = (_QWORD *)(v43 + 48 * result);
  v50 = v48[4];
  v49 = v48[5];
  v51 = v48[6];
  v52 = *(_QWORD *)(v49 + 16);
  if (v50)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    outlined retain of (Input, (Input, Input))((uint64_t)v174);
    outlined retain of Graph((uint64_t)v191);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v213, v49 + 32, v52, (_QWORD *)(v50 + 16), v50 + 32);
    if ((v53 & 1) == 0)
    {
      v54 = result;
      if ((result & 0x8000000000000000) == 0)
        goto LABEL_16;
      goto LABEL_101;
    }
    swift_release();
    swift_release();
    goto LABEL_37;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  outlined retain of (Input, (Input, Input))((uint64_t)v174);
  outlined retain of Graph((uint64_t)v191);
  swift_retain();
  v128 = v51;
  swift_retain();
  v140 = v23;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!v52)
  {
LABEL_35:
    swift_release();
LABEL_37:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_43;
  }
  v161 = v21;
  v165 = v18;
  v137 = v26;
  v54 = 0;
  v57 = (_QWORD *)(v49 + 80);
  v58 = v171;
  while (1)
  {
    if (*(v57 - 6) != v58)
      goto LABEL_21;
    v59 = *(v57 - 4);
    v60 = *(v57 - 3);
    v61 = *(v57 - 2);
    v62 = *((_BYTE *)v57 - 8);
    v63 = *v57;
    v64 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*(v57 - 5) + 128);
    swift_retain();
    swift_bridgeObjectRetain();
    if ((v64(v140) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v58 = v171;
      goto LABEL_21;
    }
    if (v59 == v168 && v60 == v139)
    {
      swift_bridgeObjectRelease();
      result = swift_release();
      v58 = v171;
    }
    else
    {
      v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      result = swift_release();
      v58 = v171;
      if ((v65 & 1) == 0)
        goto LABEL_21;
    }
    if ((v62 & 1) == 0)
      break;
    if ((v165 & (v63 == v161)) != 0)
      goto LABEL_34;
LABEL_21:
    v57 += 7;
    if (v52 == ++v54)
      goto LABEL_35;
  }
  if ((v165 & 1) != 0 || v61 != v137 || v63 != v161)
    goto LABEL_21;
LABEL_34:
  v51 = v128;
LABEL_16:
  if (v54 < *(_QWORD *)(v51 + 16))
  {
    v55 = *(_QWORD *)(v51 + 16 * v54 + 40);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_retain();
    swift_bridgeObjectRetain();
    v56 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_n(v55, &v213);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_44;
  }
LABEL_102:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t *a5, uint64_t *a6, _QWORD **a7, _QWORD **a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t i;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD v64[10];
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;

  v9 = v8;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 && *(_QWORD *)(a2 + 16) && *(_QWORD *)(a3 + 16))
  {
    v12 = *(_QWORD *)(a1 + 40);
    v54 = *(_QWORD *)(a2 + 16);
    v13 = *(_QWORD *)(a1 + 56);
    v60 = *(_QWORD *)(a1 + 32);
    v62 = *(_QWORD *)(a1 + 48);
    v14 = *(_QWORD *)(a1 + 64);
    v15 = *(_BYTE *)(a1 + 72);
    v58 = *(_QWORD *)(a1 + 80);
    v63 = *(_QWORD *)(a2 + 80);
    v56 = *(_BYTE *)(a2 + 72);
    v16 = *(_QWORD *)(a2 + 56);
    v17 = *(_QWORD *)(a2 + 40);
    v49 = *(_QWORD *)(a2 + 48);
    v51 = *(_QWORD *)(a2 + 64);
    v47 = *(_QWORD *)(a2 + 32);
    v52 = *(_QWORD *)(a3 + 16);
    swift_bridgeObjectRetain();
    v39 = a2;
    v18 = v16;
    v19 = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    v20 = v47;
    v21 = v49;
    v22 = v51;
    v23 = v56;
    v25 = v58;
    v24 = v60;
    v26 = 0;
    v77 = v11 - 1;
    v53 = v52 - 1;
    for (i = v54 - 1; ; --i)
    {
      v28 = *(_QWORD *)(a3 + v26 + 32);
      v27 = *(_QWORD *)(a3 + v26 + 40);
      v29 = *(_QWORD *)(a3 + v26 + 48);
      v30 = *(_QWORD *)(a3 + v26 + 56);
      v31 = *(_QWORD *)(a3 + v26 + 64);
      v32 = *(_BYTE *)(a3 + v26 + 72);
      v33 = *(_QWORD *)(a3 + v26 + 80);
      *(_QWORD *)&v66 = v24;
      *((_QWORD *)&v66 + 1) = v12;
      *(_QWORD *)&v67 = v62;
      *((_QWORD *)&v67 + 1) = v13;
      *(_QWORD *)&v68 = v14;
      BYTE8(v68) = v15 & 1;
      *(_QWORD *)&v69 = v25;
      *((_QWORD *)&v69 + 1) = v20;
      *(_QWORD *)&v70 = v19;
      *((_QWORD *)&v70 + 1) = v21;
      *(_QWORD *)&v71 = v18;
      *((_QWORD *)&v71 + 1) = v22;
      LOBYTE(v72) = v23 & 1;
      *((_QWORD *)&v72 + 1) = v63;
      *(_QWORD *)&v73 = v28;
      *((_QWORD *)&v73 + 1) = v27;
      *(_QWORD *)&v74 = v29;
      *((_QWORD *)&v74 + 1) = v30;
      *(_QWORD *)&v75 = v31;
      BYTE8(v75) = v32;
      v76 = v33;
      v64[8] = v74;
      v64[9] = v75;
      v65 = v33;
      v64[4] = v70;
      v64[5] = v71;
      v64[6] = v72;
      v64[7] = v73;
      v64[0] = v66;
      v64[1] = v67;
      v64[2] = v68;
      v64[3] = v69;
      swift_retain();
      swift_bridgeObjectRetain();
      closure #2 in closure #2 in Graph.splitSharedNodes(nodeDefStore:surfaceShader:geometryModifier:)((uint64_t)v64, a4, a5, a6, a7, a8);
      outlined release of (Input, (Input, Input))((uint64_t)&v66);
      if (v9 || !v77 || !i || !v53)
        break;
      v12 = *(_QWORD *)(a1 + v26 + 96);
      v13 = *(_QWORD *)(a1 + v26 + 112);
      v61 = *(_QWORD *)(a1 + v26 + 88);
      v62 = *(_QWORD *)(a1 + v26 + 104);
      v50 = *(_QWORD *)(a1 + v26 + 120);
      v48 = *(_BYTE *)(a1 + v26 + 128);
      v59 = *(_QWORD *)(a1 + v26 + 136);
      v63 = *(_QWORD *)(v39 + v26 + 136);
      v57 = *(_BYTE *)(v39 + v26 + 128);
      v35 = *(_QWORD *)(v39 + v26 + 112);
      v34 = *(_QWORD *)(v39 + v26 + 120);
      v19 = *(_QWORD *)(v39 + v26 + 96);
      v36 = *(_QWORD *)(v39 + v26 + 104);
      v37 = *(_QWORD *)(v39 + v26 + 88);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      v20 = v37;
      v21 = v36;
      v22 = v34;
      v23 = v57;
      v25 = v59;
      v24 = v61;
      v14 = v50;
      v9 = 0;
      v15 = v48;
      v26 += 56;
      --v77;
      --v53;
      v18 = v35;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

double Graph.insertGetParams(type:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t inited;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  double result;
  __int128 v11;
  _OWORD v12[2];

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_245FBECD0;
  *(_QWORD *)(inited + 32) = 7632239;
  *(_QWORD *)(inited + 40) = 0xE300000000000000;
  *(_QWORD *)(inited + 48) = a1;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = 12324;
  *(_QWORD *)(v6 + 24) = 0xE200000000000000;
  v7 = v6 | 0x6000000000000000;
  v8 = *(_QWORD *)(v2 + 40);
  swift_retain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v8, MEMORY[0x24BEE4AF8], inited, v7, v2 + 64, v2, (unint64_t *)&v11);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  v9 = v12[0];
  *a2 = v11;
  a2[1] = v9;
  result = *(double *)((char *)v12 + 9);
  *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v12 + 9);
  return result;
}

BOOL ShaderGraphNode.isGetTextureNode.getter()
{
  return ShaderGraphNode.isMaterialXSwizzleNode.getter(0xD000000000000013, (void *)0x8000000245FC8330);
}

BOOL ShaderGraphNode.isMaterialXImageNode.getter()
{
  return ShaderGraphNode.isMaterialXSwizzleNode.getter(0x6567616D695F444ELL, (void *)0xE800000000000000);
}

BOOL ShaderGraphNode.isMaterialXCubeimageNode.getter()
{
  return ShaderGraphNode.isMaterialXSwizzleNode.getter(0xD000000000000017, (void *)0x8000000245FC8310);
}

BOOL ShaderGraphNode.isRealityKitImageNode.getter()
{
  return ShaderGraphNode.isMaterialXSwizzleNode.getter(0xD000000000000014, (void *)0x8000000245FC82F0);
}

unint64_t Graph.transformModernRealityKitImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t result;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  _QWORD v62[2];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD v74[9];
  _OWORD v75[2];
  uint64_t v76[2];
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81[5];
  char v82;
  uint64_t v83;
  _QWORD v84[5];
  char v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  char v91;
  char *v92;

  v8 = v7;
  v9 = v6;
  v63 = a3;
  v64 = a4;
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v16(v14, a1, v17);
  v92 = v14;
  v18 = *(_QWORD *)(Sequence.filter(_:)() + 16);
  if (v18)
  {
    v69 = v7;
    v70 = (uint64_t *)v16;
    v71 = a1;
    v72 = a5;
    v73 = a6;
    v19 = *(_QWORD **)(v9 + 64);
    v68 = swift_bridgeObjectRetain();
    v20 = (unint64_t *)(v68 + 56);
    while (1)
    {
      v21 = *(v20 - 3);
      v22 = *v20;
      outlined copy of NodePersonality(v21);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
        if ((v22 & 0x8000000000000000) != 0)
          goto LABEL_9;
      }
      else
      {
        result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v19);
        v19 = (_QWORD *)result;
        if ((v22 & 0x8000000000000000) != 0)
        {
LABEL_9:
          __break(1u);
LABEL_10:
          swift_bridgeObjectRelease_n();
          *(_QWORD *)(v9 + 64) = v19;
          v8 = v69;
          ((void (*)(char *, uint64_t, uint64_t))v70)(v92, v71, v72);
          goto LABEL_12;
        }
      }
      if (v22 >= v19[2])
        break;
      v20 += 6;
      v24 = &v19[6 * v22];
      v25 = v24[4];
      v24[4] = 0xE000000000000008;
      outlined consume of NodePersonality(v25);
      outlined consume of NodePersonality(v21);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v18)
        goto LABEL_10;
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v16(v92, a1, a5);
LABEL_12:
    v26 = Sequence.filter(_:)();
    v27 = v8;
    v28 = *(_QWORD *)(v26 + 16);
    if (v28)
    {
      v29 = v26 + 40;
      v70 = &v77;
      v62[1] = v26;
      swift_bridgeObjectRetain();
      v73 = v28 - 1;
      v65 = v9;
      while (1)
      {
        v30 = *(_QWORD *)v29;
        v31 = *(_QWORD *)(v29 + 8);
        v32 = *(_BYTE *)(v29 + 32);
        v87 = *(char **)(v29 - 8);
        v88 = v30;
        v89 = v31;
        v90 = *(_OWORD *)(v29 + 16);
        v91 = v32;
        v92 = v87;
        outlined copy of NodePersonality((unint64_t)v87);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v33 = v27;
        ShaderGraphNode.out.getter((uint64_t)v76);
        if (v27)
        {
          outlined consume of NodePersonality((unint64_t)v92);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          return swift_bridgeObjectRelease();
        }
        v34 = *(_OWORD *)(v9 + 144);
        v74[8] = *(_OWORD *)(v9 + 128);
        v75[0] = v34;
        *(_OWORD *)((char *)v75 + 9) = *(_OWORD *)(v9 + 153);
        v35 = *(_OWORD *)(v9 + 80);
        v74[4] = *(_OWORD *)(v9 + 64);
        v74[5] = v35;
        v36 = *(_OWORD *)(v9 + 112);
        v74[6] = *(_OWORD *)(v9 + 96);
        v74[7] = v36;
        v37 = *(_OWORD *)(v9 + 16);
        v74[0] = *(_OWORD *)v9;
        v74[1] = v37;
        v38 = *(_OWORD *)(v9 + 48);
        v74[2] = *(_OWORD *)(v9 + 32);
        v74[3] = v38;
        v39 = v37;
        result = specialized OrderedSet._find(_:)(v76[0], *(uint64_t *)&v74[0], *((_QWORD **)&v74[0] + 1));
        v71 = v29;
        v72 = v31;
        if ((v40 & 1) != 0)
        {
          outlined retain of Graph((uint64_t)v74);
          v47 = MEMORY[0x24BEE4AF8];
        }
        else
        {
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_33;
          if (result >= *(_QWORD *)(v39 + 16))
            goto LABEL_34;
          v41 = (_QWORD *)(v39 + 48 * result);
          v42 = v41[4];
          v43 = v41[5];
          v44 = v41[6];
          v80 = *(_OWORD *)v70;
          outlined retain of Graph((uint64_t)v74);
          swift_retain();
          swift_retain();
          swift_retain();
          outlined retain of String((uint64_t)&v80);
          swift_retain();
          specialized OrderedDictionary.subscript.getter((uint64_t)v76, v42, v43, v44);
          v46 = v45;
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          outlined release of String((uint64_t)&v80);
          if (v46)
          {
            swift_retain();
            outlined retain of String((uint64_t)&v80);
            v47 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_n(v46, v76);
            swift_release();
            outlined release of String((uint64_t)&v80);
            v27 = v33;
            swift_release();
            swift_release();
          }
          else
          {
            v47 = MEMORY[0x24BEE4AF8];
            v27 = v33;
          }
        }
        outlined release of Graph((uint64_t)v74);
        if (*(_QWORD *)(v47 + 16))
        {
          v48 = *(_QWORD *)(v47 + 40);
          v49 = *(_QWORD *)(v47 + 56);
          v50 = *(_QWORD *)(v47 + 88);
          v51 = *(_QWORD *)(v47 + 96);
          v52 = *(_QWORD *)(v47 + 104);
          v53 = *(_QWORD *)(v47 + 112);
          v54 = *(_QWORD *)(v47 + 120);
          LODWORD(v69) = *(unsigned __int8 *)(v47 + 128);
          v55 = *(_QWORD *)(v47 + 136);
          v67 = v48;
          v68 = v55;
          swift_retain();
          v66 = v49;
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          result = swift_bridgeObjectRelease();
          v84[0] = v50;
          v84[1] = v51;
          v84[2] = v52;
          v84[3] = v53;
          v84[4] = v54;
          v85 = v69;
          v86 = v68;
          if (!*(_QWORD *)(v30 + 16))
            goto LABEL_32;
          v56 = *(_QWORD *)(v30 + 40);
          v57 = *(_QWORD *)(v30 + 48);
          v58 = *(_QWORD *)(v30 + 56);
          v59 = *(_QWORD *)(v30 + 64);
          v60 = *(_BYTE *)(v30 + 72);
          v61 = *(_QWORD *)(v30 + 80);
          v81[0] = *(_QWORD *)(v30 + 32);
          v81[1] = v56;
          v81[2] = v57;
          v81[3] = v58;
          v81[4] = v59;
          v82 = v60;
          v83 = v61;
          swift_retain();
          swift_bridgeObjectRetain();
          v9 = v65;
          Graph.convertFilenameInput(_:movingTo:textureAssignments:customUniformsType:)(v81, (unint64_t)v84, v63, v64);
          swift_release();
          v79 = *(_OWORD *)v70;
          outlined release of String((uint64_t)&v79);
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          outlined consume of NodePersonality((unint64_t)v92);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_release();
          v78 = *(_OWORD *)v70;
          outlined release of String((uint64_t)&v78);
          outlined consume of NodePersonality((unint64_t)v92);
          swift_bridgeObjectRelease();
          v9 = v65;
        }
        swift_bridgeObjectRelease();
        if (!v73)
          return swift_bridgeObjectRelease_n();
        v29 = v71 + 48;
        --v73;
      }
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

unint64_t Graph.transformMaterialXImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  char *v15;
  uint64_t AssociatedConformanceWitness;
  __int128 v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  Swift::String v25;
  Swift::Bool v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  int v33;
  _QWORD *object;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  uint64_t v77;
  BOOL v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  unint64_t result;
  uint64_t v87;
  unint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v104;
  char v105;
  uint64_t v106;
  _QWORD **v107;
  Swift::UInt v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  char v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  char v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  char v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v157;
  unint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  _QWORD *v161;
  char v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  char v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  char v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  unint64_t *v196;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  NSObject *v204;
  os_log_type_t v205;
  uint64_t v206;
  uint64_t v207;
  _OWORD *v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  _OWORD *v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  _OWORD *v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  _OWORD *v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  _OWORD *v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  _OWORD *v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  uint64_t *v268;
  _OWORD *v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  _OWORD *v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  uint64_t *v289;
  _OWORD *v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  _OWORD *v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  uint64_t v310;
  uint64_t v311;
  _QWORD *v312;
  _QWORD *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  __int128 v318;
  int v319;
  Swift::String v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  uint64_t v325;
  uint64_t v326;
  _QWORD *v327;
  Swift::String v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  __int128 *v333;
  __int128 *v334;
  unint64_t v335;
  __int128 *v336;
  unint64_t v337;
  __int128 *v338;
  __int128 *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  _QWORD *v344;
  uint64_t v345;
  _QWORD *v346;
  _QWORD *v347;
  uint64_t v348;
  unint64_t v349;
  char *v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t *v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  unint64_t v359;
  uint64_t v360;
  Swift::String v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  char v365;
  __int128 v366;
  __int128 v367;
  uint64_t v368;
  char v369;
  uint64_t v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  _QWORD v384[2];
  uint64_t v385;
  Swift::String v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unsigned __int8 v390;
  _BYTE v391[16];
  uint64_t v392;
  _BYTE v393[16];
  uint64_t v394;
  Swift::String v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  unsigned __int8 v399;
  _BYTE v400[16];
  uint64_t v401;
  _QWORD v402[7];
  _OWORD v403[2];
  uint64_t v404;
  char v405;
  uint64_t v406;
  _OWORD v407[3];
  uint64_t v408;
  __int128 v409;
  _OWORD v410[2];
  uint64_t v411;
  __int128 v412;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  void *v416;
  unint64_t v417;
  uint64_t v418;
  void *v419;
  unint64_t v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  unint64_t v424;
  uint64_t v425;
  void *v426;
  unint64_t v427;
  uint64_t v428;
  void *v429;
  unint64_t v430;
  uint64_t v431;
  unint64_t v432;
  uint64_t v433;
  void *v434;
  unint64_t v435;
  uint64_t v436;
  unint64_t v437;
  uint64_t v438;
  unint64_t v439;
  void *v440;
  uint64_t v441;
  unint64_t v442;
  void *v443;
  uint64_t v444;
  unint64_t v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t v448;
  unint64_t v449;
  __int128 v450;
  uint64_t v451;
  void *v452;
  unint64_t v453;
  __int128 v454;
  uint64_t v455;
  unint64_t v456[7];
  __int128 v457;
  __int128 v458[6];
  __int128 v459;
  uint64_t v460[5];
  char v461;
  uint64_t v462;
  _QWORD v463[5];
  char v464;
  unint64_t v465;
  __int128 v466;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  char v470;
  unint64_t v471;
  __int128 v472;
  uint64_t v473;
  unint64_t v474;
  unint64_t v475;
  char v476;
  unint64_t v477;
  __int128 v478;
  uint64_t v479;
  unint64_t v480;
  unint64_t v481;
  char v482;
  uint64_t v483;
  __int128 v484;
  uint64_t v485;
  unint64_t v486;
  uint64_t v487;
  char v488;
  unint64_t v489;
  __int128 v490;
  uint64_t v491;
  unint64_t v492;
  uint64_t v493;
  char v494;
  unint64_t v495;
  _QWORD v496[5];
  char v497;
  unint64_t v498;
  uint64_t v499;
  unint64_t v500;
  uint64_t v501;
  unint64_t v502;
  unint64_t v503;
  char v504;
  uint64_t v505;
  _QWORD v506[5];
  char v507;
  uint64_t v508;
  unint64_t v509;
  unint64_t v510;
  uint64_t v511;
  unint64_t v512;
  unint64_t v513;
  char v514;
  unint64_t *v515;
  unint64_t v516;
  _QWORD *v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  char v521;
  unint64_t v522;

  v342 = a3;
  v343 = a4;
  v7 = type metadata accessor for Logger();
  v325 = *(_QWORD *)(v7 - 8);
  v326 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v324 = (char *)&v310 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v310 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v341 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v15 = (char *)&v310 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a5);
  dispatch thunk of Sequence.makeIterator()();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v350 = v15;
  v351 = AssociatedTypeWitness;
  v348 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  v18 = (_QWORD *)*((_QWORD *)&v371 + 1);
  if (!*((_QWORD *)&v371 + 1))
    return (*(uint64_t (**)(char *, uint64_t))(v341 + 8))(v350, v351);
  v19 = v371;
  v20 = v372;
  v338 = (__int128 *)&v392;
  v339 = (__int128 *)&v385;
  v21 = *((_QWORD *)&v372 + 1);
  v22 = v373;
  v23 = BYTE8(v373);
  v333 = v410;
  v334 = (__int128 *)&v401;
  v335 = 0x8000000245FC83A0;
  v336 = (__int128 *)&v394;
  *(_QWORD *)&v17 = 136315138;
  v318 = v17;
  v317 = MEMORY[0x24BEE4AD8] + 8;
  v24 = v356;
  while (1)
  {
    v516 = v19;
    v517 = v18;
    v357 = v20;
    v518 = v20;
    v519 = v21;
    v520 = v22;
    v521 = v23 & 1;
    if (v19 >> 61 != 5)
      goto LABEL_6;
    v349 = v19;
    swift_bridgeObjectRetain();
    v25._countAndFlagsBits = 0x6567616D695F444ELL;
    v25._object = (void *)0xE800000000000000;
    v26 = String.hasPrefix(_:)(v25);
    swift_bridgeObjectRelease();
    if (v26)
      break;
LABEL_5:
    v19 = v349;
LABEL_6:
    outlined consume of NodePersonality(v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    dispatch thunk of IteratorProtocol.next()();
    v18 = (_QWORD *)*((_QWORD *)&v371 + 1);
    v19 = v371;
    v21 = *((_QWORD *)&v372 + 1);
    v20 = v372;
    v22 = v373;
    v23 = BYTE8(v373);
    if (!*((_QWORD *)&v371 + 1))
      return (*(uint64_t (**)(char *, uint64_t))(v341 + 8))(v350, v351);
  }
  ShaderGraphNode.out.getter((uint64_t)v384);
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v341 + 8))(v350, v351);
LABEL_280:
    outlined consume of NodePersonality(v349);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v27 = v384[1];
  v459 = *v339;
  v28 = outlined release of String((uint64_t)&v459);
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 144))(v28);
  swift_release();
  if (!v29)
  {
    ShaderGraphNode.out.getter((uint64_t)v403);
    v361._countAndFlagsBits = v349;
    v361._object = v18;
    v362 = v357;
    v363 = v21;
    v364 = v22;
    v365 = v23 & 1;
    v366 = v403[0];
    v367 = v403[1];
    v368 = v404;
    v369 = v405;
    v370 = v406;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi2_((uint64_t)&v361);
    outlined init with take of UserGraphError.ErrorType((__int128 *)&v361._countAndFlagsBits, (uint64_t)&v371);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v383 = 0uLL;
    swift_allocError();
    *v238 = v371;
    v239 = v375;
    v241 = v372;
    v240 = v373;
    v238[3] = v374;
    v238[4] = v239;
    v238[1] = v241;
    v238[2] = v240;
    v242 = v379;
    v244 = v376;
    v243 = v377;
    v238[7] = v378;
    v238[8] = v242;
    v238[5] = v244;
    v238[6] = v243;
    v245 = v383;
    v247 = v380;
    v246 = v381;
    v238[11] = v382;
    v238[12] = v245;
    v238[9] = v247;
    v238[10] = v246;
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v341 + 8))(v350, v351);
  }
  specialized ShaderGraphNode.metalTextureType.getter(v349);
  v30 = swift_retain();
  v340 = v29;
  Graph.insertImageNode(metalTextureType:resultType:)(v30, v29, &v386);
  v328 = v386;
  v329 = v387;
  v330 = v388;
  v331 = v389;
  v332 = v390;
  swift_release();
  ShaderGraphNode.out.getter((uint64_t)v391);
  ShaderGraphNode.out.getter((uint64_t)v393);
  Graph.moveEdges(from:to:)((uint64_t)v391, (uint64_t)v393);
  swift_release();
  v458[0] = *v336;
  outlined release of String((uint64_t)v458);
  swift_release();
  v457 = *v338;
  outlined release of String((uint64_t)&v457);
  *(_QWORD *)&v371 = 0;
  *((_QWORD *)&v371 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v371 = 0xD000000000000018;
  *((_QWORD *)&v371 + 1) = v335;
  v360 = v21;
  v361._countAndFlagsBits = 1701080942;
  v361._object = (void *)0xE400000000000000;
  v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  String.append(_:)(v361);
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = 39;
  v32._object = (void *)0xE100000000000000;
  String.append(_:)(v32);
  specialized Graph.insertCreateSampler(label:)(&v395);
  v320 = v395;
  v321 = v396;
  v322 = v397;
  v323 = v398;
  v33 = v399;
  swift_bridgeObjectRelease();
  ShaderGraphNode.out.getter((uint64_t)v400);
  v319 = v33;
  object = v386._object;
  specialized Sequence.first(where:)((uint64_t)v386._object, 115, 0xE100000000000000, v402);
  v24 = 0;
  outlined init with take of MetalFunctionNode?((uint64_t)v402, (uint64_t)v407, (uint64_t *)&demangling cache variable for type metadata for Input?);
  if (!*((_QWORD *)&v407[0] + 1))
  {
    outlined init with take of NodePersonality(&v386, v456);
    v455 = v387;
    v361 = v328;
    v362 = v329;
    v363 = v330;
    v364 = v331;
    v365 = v332;
    *(_QWORD *)&v366 = 115;
    *((_QWORD *)&v366 + 1) = 0xE100000000000000;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v361);
    outlined init with take of UserGraphError.ErrorType((__int128 *)&v361._countAndFlagsBits, (uint64_t)&v371);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v383 = 0uLL;
    swift_allocError();
    *v218 = v371;
    v219 = v375;
    v221 = v372;
    v220 = v373;
    v218[3] = v374;
    v218[4] = v219;
    v218[1] = v221;
    v218[2] = v220;
    v222 = v379;
    v224 = v376;
    v223 = v377;
    v218[7] = v378;
    v218[8] = v222;
    v218[5] = v224;
    v218[6] = v223;
    v225 = v383;
    v227 = v380;
    v226 = v381;
    v218[11] = v382;
    v218[12] = v225;
    v218[9] = v227;
    v218[10] = v226;
    swift_bridgeObjectRetain();
    outlined retain of NodePersonality(v456);
    outlined retain of [Input]((uint64_t)&v455);
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v341 + 8))(v350, v351);
    swift_release();
    v454 = *v334;
    outlined release of String((uint64_t)&v454);
    outlined init with take of NodePersonality(&v395, &v453);
    outlined release of NodePersonality(&v453);
    v452 = v395._object;
    outlined release of [Input]((uint64_t)&v452);
    v451 = v396;
    outlined release of [Input]((uint64_t)&v451);
    outlined release of NodePersonality(v456);
    swift_bridgeObjectRelease();
    outlined release of [Input]((uint64_t)&v455);
    swift_release();
    goto LABEL_280;
  }
  v409 = v407[0];
  v410[0] = v407[1];
  v410[1] = v407[2];
  v411 = v408;
  Graph.connect(_:to:)((uint64_t)v400, (unint64_t)&v409);
  swift_release();
  v412 = *v333;
  outlined release of String((uint64_t)&v412);
  swift_release();
  v450 = *v334;
  outlined release of String((uint64_t)&v450);
  v345 = v18[2];
  if (!v345)
  {
LABEL_4:
    outlined init with take of NodePersonality(&v395, &v417);
    outlined release of NodePersonality(&v417);
    v416 = v395._object;
    outlined release of [Input]((uint64_t)&v416);
    v415 = v396;
    outlined release of [Input]((uint64_t)&v415);
    outlined init with take of NodePersonality(&v386, &v414);
    outlined release of NodePersonality(&v414);
    swift_bridgeObjectRelease();
    v413 = v387;
    outlined release of [Input]((uint64_t)&v413);
    swift_release();
    goto LABEL_5;
  }
  v346 = v18 + 4;
  swift_bridgeObjectRetain();
  v347 = v18;
  v35 = 0;
  v327 = object + 17;
  v344 = object;
  while (1)
  {
    if (v35 >= v347[2])
    {
      __break(1u);
LABEL_290:
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_291;
    }
    v36 = &v346[7 * v35];
    v38 = *v36;
    v37 = v36[1];
    v40 = v36[2];
    v39 = v36[3];
    v41 = v36[4];
    v42 = *((_BYTE *)v36 + 40);
    v43 = v36[6];
    v460[0] = v38;
    v359 = v37;
    v460[1] = v37;
    v460[2] = v40;
    v460[3] = v39;
    v460[4] = v41;
    v461 = v42;
    v462 = v43;
    v44 = v40 == 1701603686 && v39 == 0xE400000000000000;
    v522 = v39;
    v352 = v35;
    if (v44 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v358 = object[2];
      if (v358)
      {
        v356 = v24;
        v46 = object[4];
        v45 = object[5];
        v47 = object[6];
        v48 = object[8];
        v49 = *((_BYTE *)object + 72);
        v50 = object[10];
        if (v47 == 1701603686 && object[7] == 0xE400000000000000)
        {
          v51 = object[10];
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          v50 = v51;
          swift_bridgeObjectRetain();
          v52 = 0xE400000000000000;
          v53 = 1701603686;
LABEL_58:
          v463[0] = v46;
          v463[1] = v45;
          v463[2] = v53;
          v463[3] = v52;
          v463[4] = v48;
          v464 = v49;
          v465 = v50;
          v23 = v45;
          v74 = v356;
          Graph.convertFilenameInput(_:movingTo:textureAssignments:customUniformsType:)(v460, (unint64_t)v463, v342, v343);
          v24 = v74;
          if (v74)
          {
            swift_bridgeObjectRelease();
            swift_release();
            outlined init with take of NodePersonality(&v395, &v427);
            outlined release of NodePersonality(&v427);
            v426 = v395._object;
            outlined release of [Input]((uint64_t)&v426);
            v425 = v396;
            outlined release of [Input]((uint64_t)&v425);
            outlined init with take of NodePersonality(&v386, &v424);
            outlined release of NodePersonality(&v424);
            swift_bridgeObjectRelease();
            v423 = v387;
            outlined release of [Input]((uint64_t)&v423);
            swift_bridgeObjectRelease();
            goto LABEL_272;
          }
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_60;
        }
        LODWORD(v354) = *((unsigned __int8 *)object + 72);
        v53 = v47;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          v52 = swift_bridgeObjectRetain();
          v49 = v354;
          goto LABEL_58;
        }
        swift_bridgeObjectRetain_n();
        swift_retain();
        swift_bridgeObjectRetain();
        if (v358 != 1)
        {
          v61 = 1;
          v62 = v327;
          while (1)
          {
            v63 = v61 + 1;
            if (__OFADD__(v61, 1))
              break;
            v46 = *(v62 - 6);
            v45 = *(v62 - 5);
            v65 = *(v62 - 4);
            v64 = *(v62 - 3);
            v48 = *(v62 - 2);
            v49 = *((_BYTE *)v62 - 8);
            v354 = *v62;
            if (v65 == 1701603686 && v64 == 0xE400000000000000)
            {
              swift_retain();
              swift_bridgeObjectRetain();
              object = v344;
              swift_bridgeObjectRelease_n();
              v52 = 0xE400000000000000;
              v53 = 1701603686;
              v50 = v354;
              goto LABEL_58;
            }
            v353 = v46;
            v67 = v64;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_retain();
              swift_bridgeObjectRetain();
              object = v344;
              swift_bridgeObjectRelease_n();
              v52 = v67;
              v46 = v353;
              v50 = v354;
              v53 = v65;
              goto LABEL_58;
            }
            v62 += 7;
            ++v61;
            if (v63 == v358)
              goto LABEL_44;
          }
          __break(1u);
LABEL_288:
          outlined release of [Input]((uint64_t)&v440);
          outlined release of [Input]((uint64_t)&v440);
          v23 = 0x7365726464615F73;
          goto LABEL_291;
        }
LABEL_44:
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_retain();
        swift_bridgeObjectRetain();
      }
      outlined init with take of NodePersonality(&v386, &v422);
      v421 = v387;
      v361 = v328;
      v362 = v329;
      v363 = v330;
      v364 = v331;
      v365 = v332;
      *(_QWORD *)&v366 = 1701603686;
      *((_QWORD *)&v366 + 1) = 0xE400000000000000;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v361);
      outlined init with take of UserGraphError.ErrorType((__int128 *)&v361._countAndFlagsBits, (uint64_t)&v371);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      v383 = 0uLL;
      swift_allocError();
      *v208 = v371;
      v209 = v375;
      v211 = v372;
      v210 = v373;
      v208[3] = v374;
      v208[4] = v209;
      v208[1] = v211;
      v208[2] = v210;
      v212 = v379;
      v214 = v376;
      v213 = v377;
      v208[7] = v378;
      v208[8] = v212;
      v208[5] = v214;
      v208[6] = v213;
      v215 = v383;
      v217 = v380;
      v216 = v381;
      v208[11] = v382;
      v208[12] = v215;
      v208[9] = v217;
      v208[10] = v216;
      swift_bridgeObjectRetain();
      outlined retain of NodePersonality(&v422);
      outlined retain of [Input]((uint64_t)&v421);
      swift_willThrow();
      outlined init with take of NodePersonality(&v395, &v420);
      outlined release of NodePersonality(&v420);
      v419 = v395._object;
      outlined release of [Input]((uint64_t)&v419);
      v418 = v396;
      outlined release of [Input]((uint64_t)&v418);
      outlined release of NodePersonality(&v422);
      swift_bridgeObjectRelease();
      outlined release of [Input]((uint64_t)&v421);
      swift_bridgeObjectRelease();
      goto LABEL_272;
    }
    v54 = v40 == 0x746C7561666564 && v522 == 0xE700000000000000;
    if (v54 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v354 = object[2];
      if (v354)
      {
        v55 = object[4];
        v56 = object[5];
        v57 = object[6];
        v58 = object[7];
        v59 = object[8];
        v23 = *((unsigned __int8 *)object + 72);
        v60 = object[10];
        if (v57 == 0x56746C7561666564 && v58 == 0xEA00000000006C61)
        {
          v358 = v60;
          v58 = 0xEA00000000006C61;
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          v57 = 0x56746C7561666564;
LABEL_88:
          *(_QWORD *)&v466 = v55;
          *((_QWORD *)&v466 + 1) = v56;
          v467 = v57;
          v468 = v58;
          v469 = v59;
          v470 = v23;
          v471 = v358;
          Graph.moveEdge(from:to:)((uint64_t)v460, &v466);
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          object = v344;
          goto LABEL_61;
        }
        v337 = v56;
        v353 = 0xEA00000000006C61;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          v358 = v60;
          swift_retain();
          swift_bridgeObjectRetain();
          v56 = v337;
          swift_retain();
          swift_bridgeObjectRetain();
          goto LABEL_88;
        }
        swift_bridgeObjectRetain_n();
        swift_retain();
        swift_bridgeObjectRetain();
        if (v354 != 1)
        {
          v356 = v24;
          v75 = 1;
          v76 = v327;
          while (1)
          {
            v77 = v75 + 1;
            if (__OFADD__(v75, 1))
              break;
            v55 = *(v76 - 5);
            v337 = *(v76 - 6);
            v57 = *(v76 - 4);
            v58 = *(v76 - 3);
            v59 = *(v76 - 2);
            v23 = *((unsigned __int8 *)v76 - 8);
            v358 = *v76;
            if (v57 == 0x56746C7561666564 && v58 == v353)
            {
              v58 = v353;
              swift_retain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease_n();
              v56 = v55;
              v57 = 0x56746C7561666564;
LABEL_87:
              v24 = v356;
              v55 = v337;
              goto LABEL_88;
            }
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_retain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease_n();
              v56 = v55;
              goto LABEL_87;
            }
            v76 += 7;
            ++v75;
            if (v77 == v354)
              goto LABEL_276;
          }
          __break(1u);
LABEL_296:
          v509 = v23;
          v510 = v358;
          v511 = v57;
          v512 = v55;
          v513 = v354;
          v514 = v77;
          v515 = v76;
LABEL_297:
          v361 = v320;
          v362 = v321;
          v363 = v322;
          v364 = v323;
          v365 = v319;
          *(_QWORD *)&v366 = 0x746C69665F67616DLL;
          *((_QWORD *)&v366 + 1) = 0xEA00000000007265;
          _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v361);
          outlined init with take of UserGraphError.ErrorType((__int128 *)&v361._countAndFlagsBits, (uint64_t)&v371);
          lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
          v383 = 0uLL;
          swift_allocError();
          *v269 = v371;
          v270 = v375;
          v272 = v372;
          v271 = v373;
          v269[3] = v374;
          v269[4] = v270;
          v269[1] = v272;
          v269[2] = v271;
          v273 = v379;
          v275 = v376;
          v274 = v377;
          v269[7] = v378;
          v269[8] = v273;
          v269[5] = v275;
          v269[6] = v274;
          v276 = v383;
          v278 = v380;
          v277 = v381;
          v269[11] = v382;
          v269[12] = v276;
          v269[9] = v278;
          v269[10] = v277;
          swift_retain();
          swift_bridgeObjectRetain();
          swift_willThrow();
          outlined init with take of NodePersonality(&v386, &v445);
          outlined release of NodePersonality(&v445);
          swift_bridgeObjectRelease();
          v444 = v387;
          outlined release of [Input]((uint64_t)&v444);
          goto LABEL_293;
        }
LABEL_276:
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_retain();
        swift_bridgeObjectRetain();
      }
      outlined init with take of NodePersonality(&v386, &v432);
      v431 = v387;
      v361 = v328;
      v362 = v329;
      v363 = v330;
      v364 = v331;
      v365 = v332;
      *(_QWORD *)&v366 = 0x56746C7561666564;
      *((_QWORD *)&v366 + 1) = 0xEA00000000006C61;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v361);
      outlined init with take of UserGraphError.ErrorType((__int128 *)&v361._countAndFlagsBits, (uint64_t)&v371);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      v383 = 0uLL;
      swift_allocError();
      *v228 = v371;
      v229 = v375;
      v231 = v372;
      v230 = v373;
      v228[3] = v374;
      v228[4] = v229;
      v228[1] = v231;
      v228[2] = v230;
      v232 = v379;
      v234 = v376;
      v233 = v377;
      v228[7] = v378;
      v228[8] = v232;
      v228[5] = v234;
      v228[6] = v233;
      v235 = v383;
      v237 = v380;
      v236 = v381;
      v228[11] = v382;
      v228[12] = v235;
      v228[9] = v237;
      v228[10] = v236;
      swift_bridgeObjectRetain();
      outlined retain of NodePersonality(&v432);
      outlined retain of [Input]((uint64_t)&v431);
      swift_willThrow();
      outlined init with take of NodePersonality(&v395, &v430);
      outlined release of NodePersonality(&v430);
      v429 = v395._object;
      outlined release of [Input]((uint64_t)&v429);
      v428 = v396;
      outlined release of [Input]((uint64_t)&v428);
      outlined release of NodePersonality(&v432);
      swift_bridgeObjectRelease();
      outlined release of [Input]((uint64_t)&v431);
      swift_bridgeObjectRelease();
      goto LABEL_272;
    }
    v68 = v40 == 0x64726F6F63786574 && v522 == 0xE800000000000000;
    if (!v68 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v79 = v40 == 0x7373657264646175 && v522 == 0xEC00000065646F6DLL;
      v356 = v24;
      if (v79 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v23 = 0x7365726464615F73;
        v80 = (char *)v395._object;
        v440 = v395._object;
        v353 = *((_QWORD *)v395._object + 2);
        if (!v353)
          goto LABEL_290;
        v81 = *((_QWORD *)v395._object + 5);
        v358 = *((_QWORD *)v395._object + 4);
        v83 = *((_QWORD *)v395._object + 6);
        v82 = *((_QWORD *)v395._object + 7);
        v354 = *((_QWORD *)v395._object + 8);
        v84 = *((_BYTE *)v395._object + 72);
        v85 = *((_QWORD *)v395._object + 10);
        if (v83 == 0x7365726464615F73 && v82 == 0xE900000000000073)
        {
          outlined retain of [Input]((uint64_t)&v440);
          v83 = 0x7365726464615F73;
          v23 = v359;
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          v82 = 0xE900000000000073;
        }
        else
        {
          LODWORD(v337) = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined retain of [Input]((uint64_t)&v440);
          swift_retain();
          swift_bridgeObjectRetain();
          if ((v337 & 1) == 0)
          {
            result = outlined retain of [Input]((uint64_t)&v440);
            if (v353 != 1)
            {
              v99 = v80 + 136;
              v100 = 1;
              while (1)
              {
                v101 = v100 + 1;
                if (__OFADD__(v100, 1))
                  goto LABEL_305;
                v81 = *(v99 - 5);
                v358 = *(v99 - 6);
                v102 = *(v99 - 4);
                v82 = *(v99 - 3);
                v354 = *(v99 - 2);
                v84 = *((_BYTE *)v99 - 8);
                v85 = *v99;
                if (v102 == 0x7365726464615F73 && v82 == 0xE900000000000073)
                {
                  swift_retain();
                  swift_bridgeObjectRetain();
                  outlined release of [Input]((uint64_t)&v440);
                  v82 = 0xE900000000000073;
                  v23 = v359;
                  v83 = 0x7365726464615F73;
                  goto LABEL_138;
                }
                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                if ((result & 1) != 0)
                {
                  swift_retain();
                  swift_bridgeObjectRetain();
                  outlined release of [Input]((uint64_t)&v440);
                  v83 = v102;
                  goto LABEL_137;
                }
                v99 += 7;
                ++v100;
                if (v101 == v353)
                  goto LABEL_288;
              }
            }
            outlined release of [Input]((uint64_t)&v440);
            outlined release of [Input]((uint64_t)&v440);
LABEL_291:
            v361 = v320;
            v362 = v321;
            v363 = v322;
            v364 = v323;
            v365 = v319;
            *(_QWORD *)&v366 = v23;
            *((_QWORD *)&v366 + 1) = 0xE900000000000073;
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v361);
            outlined init with take of UserGraphError.ErrorType((__int128 *)&v361._countAndFlagsBits, (uint64_t)&v371);
            lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
            v383 = 0uLL;
            swift_allocError();
            *v258 = v371;
            v259 = v375;
            v261 = v372;
            v260 = v373;
            v258[3] = v374;
            v258[4] = v259;
            v258[1] = v261;
            v258[2] = v260;
            v262 = v379;
            v264 = v376;
            v263 = v377;
            v258[7] = v378;
            v258[8] = v262;
            v258[5] = v264;
            v258[6] = v263;
            v265 = v383;
            v267 = v380;
            v266 = v381;
            v258[11] = v382;
            v258[12] = v265;
            v258[9] = v267;
            v258[10] = v266;
            swift_willThrow();
            outlined init with take of NodePersonality(&v386, &v439);
            outlined release of NodePersonality(&v439);
            swift_bridgeObjectRelease();
            v438 = v387;
            v268 = &v438;
            goto LABEL_292;
          }
          swift_retain();
          swift_bridgeObjectRetain();
LABEL_137:
          v23 = v359;
        }
LABEL_138:
        outlined release of [Input]((uint64_t)&v440);
        *(_QWORD *)&v478 = v358;
        *((_QWORD *)&v478 + 1) = v81;
        v479 = v83;
        v480 = v82;
        v481 = v354;
        v482 = v84;
        v483 = v85;
        Graph.moveEdge(from:to:)((uint64_t)v460, &v478);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_139;
      }
      if (v40 == 0x7373657264646176 && v522 == 0xEC00000065646F6DLL
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v92 = (char *)v395._object;
        v443 = v395._object;
        v316 = *((_QWORD *)v395._object + 2);
        if (!v316)
        {
          swift_retain();
          swift_bridgeObjectRetain();
          goto LABEL_302;
        }
        v93 = *((_QWORD *)v395._object + 4);
        v315 = *((_QWORD *)v395._object + 5);
        v94 = *((_QWORD *)v395._object + 6);
        v95 = *((_QWORD *)v395._object + 7);
        v96 = *((_QWORD *)v395._object + 8);
        v97 = *((unsigned __int8 *)v395._object + 72);
        v358 = *((_QWORD *)v395._object + 10);
        if (v94 == 0x7365726464615F74 && v95 == 0xE900000000000073)
        {
          LODWORD(v337) = v97;
          v353 = v96;
          v354 = v93;
          outlined retain of [Input]((uint64_t)&v443);
          v23 = v359;
          swift_retain();
          swift_bridgeObjectRetain();
          v98 = v315;
          swift_retain();
          swift_bridgeObjectRetain();
          v94 = 0x7365726464615F74;
          v95 = 0xE900000000000073;
        }
        else
        {
          v104 = v96;
          v105 = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined retain of [Input]((uint64_t)&v443);
          swift_retain();
          swift_bridgeObjectRetain();
          if ((v105 & 1) == 0)
          {
            result = outlined retain of [Input]((uint64_t)&v443);
            if (v316 != 1)
            {
              v112 = (unint64_t *)(v92 + 136);
              v113 = 1;
              do
              {
                v114 = v113 + 1;
                if (__OFADD__(v113, 1))
                  goto LABEL_306;
                v115 = *(v112 - 6);
                v98 = *(v112 - 5);
                v94 = *(v112 - 4);
                v95 = *(v112 - 3);
                v353 = *(v112 - 2);
                v354 = v115;
                LODWORD(v337) = *((unsigned __int8 *)v112 - 8);
                v358 = *v112;
                if (v94 == 0x7365726464615F74 && v95 == 0xE900000000000073)
                {
                  swift_retain();
                  swift_bridgeObjectRetain();
                  outlined release of [Input]((uint64_t)&v443);
                  v95 = 0xE900000000000073;
                  v94 = 0x7365726464615F74;
                  goto LABEL_171;
                }
                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                if ((result & 1) != 0)
                {
                  swift_retain();
                  swift_bridgeObjectRetain();
                  outlined release of [Input]((uint64_t)&v443);
                  goto LABEL_171;
                }
                v112 += 7;
                ++v113;
              }
              while (v114 != v316);
            }
            outlined release of [Input]((uint64_t)&v443);
            outlined release of [Input]((uint64_t)&v443);
LABEL_302:
            v361 = v320;
            v362 = v321;
            v363 = v322;
            v364 = v323;
            v365 = v319;
            *(_QWORD *)&v366 = 0x7365726464615F74;
            *((_QWORD *)&v366 + 1) = 0xE900000000000073;
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v361);
            outlined init with take of UserGraphError.ErrorType((__int128 *)&v361._countAndFlagsBits, (uint64_t)&v371);
            lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
            v383 = 0uLL;
            swift_allocError();
            *v300 = v371;
            v301 = v375;
            v303 = v372;
            v302 = v373;
            v300[3] = v374;
            v300[4] = v301;
            v300[1] = v303;
            v300[2] = v302;
            v304 = v379;
            v306 = v376;
            v305 = v377;
            v300[7] = v378;
            v300[8] = v304;
            v300[5] = v306;
            v300[6] = v305;
            v307 = v383;
            v309 = v380;
            v308 = v381;
            v300[11] = v382;
            v300[12] = v307;
            v300[9] = v309;
            v300[10] = v308;
            swift_willThrow();
            outlined init with take of NodePersonality(&v386, &v442);
            outlined release of NodePersonality(&v442);
            swift_bridgeObjectRelease();
            v441 = v387;
            v268 = &v441;
LABEL_292:
            outlined release of [Input]((uint64_t)v268);
LABEL_293:
            swift_bridgeObjectRelease();
            goto LABEL_272;
          }
          LODWORD(v337) = v97;
          v353 = v104;
          v354 = v93;
          v98 = v315;
          swift_retain();
          swift_bridgeObjectRetain();
LABEL_171:
          object = v344;
          v23 = v359;
        }
        outlined release of [Input]((uint64_t)&v443);
        *(_QWORD *)&v484 = v354;
        *((_QWORD *)&v484 + 1) = v98;
        v485 = v94;
        v486 = v95;
        v487 = v353;
        v488 = v337;
        v489 = v358;
        Graph.moveEdge(from:to:)((uint64_t)v460, &v484);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        v24 = v356;
        goto LABEL_61;
      }
      if ((v40 != 0x79747265746C6966 || v522 != 0xEA00000000006570)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        if ((v40 != 0x726579616CLL || v522 != 0xE500000000000000)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
          && (v40 != 0x6E6172656D617266 || v522 != 0xEA00000000006567)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v40 == 0x66666F656D617266 && v522 == 0xEB00000000746573
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
            || v40 == 0x646E65656D617266 && v522 == 0xEE006E6F69746361
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            object = v344;
          }
          else
          {
            v201 = one-time initialization token for logger;
            swift_retain();
            swift_bridgeObjectRetain();
            if (v201 != -1)
              swift_once();
            v202 = v326;
            v203 = __swift_project_value_buffer(v326, (uint64_t)logger);
            (*(void (**)(char *, uint64_t, uint64_t))(v325 + 16))(v324, v203, v202);
            swift_retain_n();
            swift_bridgeObjectRetain_n();
            v204 = Logger.logObject.getter();
            v205 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v204, v205))
            {
              v206 = swift_slowAlloc();
              v207 = swift_slowAlloc();
              *(_QWORD *)&v371 = v207;
              *(_DWORD *)v206 = v318;
              v23 = v522;
              swift_bridgeObjectRetain();
              *(_QWORD *)(v206 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v23, (uint64_t *)&v371);
              swift_release_n();
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_245E46000, v204, v205, "Ignoring unexpected image node input '%s'", (uint8_t *)v206, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x24954C33C](v207, -1, -1);
              MEMORY[0x24954C33C](v206, -1, -1);
              swift_bridgeObjectRelease();
              swift_release();

            }
            else
            {

              swift_bridgeObjectRelease_n();
              swift_release_n();
            }
            (*(void (**)(char *, uint64_t))(v325 + 8))(v324, v326);
            object = v344;
          }
        }
        goto LABEL_62;
      }
      v106 = *((_QWORD *)v395._object + 2);
      if (!v106)
        goto LABEL_297;
      v337 = (unint64_t)v395._object;
      v107 = (_QWORD **)((char *)v395._object + 80);
      v353 = (uint64_t)v395._object + 80;
      while (1)
      {
        v108 = (Swift::UInt)*(v107 - 6);
        v358 = (unint64_t)*(v107 - 5);
        v57 = (uint64_t)*(v107 - 4);
        v109 = (unint64_t)*(v107 - 3);
        v110 = (unint64_t)*(v107 - 2);
        LOBYTE(v77) = *((_BYTE *)v107 - 8);
        v76 = *v107;
        if (v57 == 0x746C69665F67616DLL && v109 == 0xEA00000000007265)
        {
          v117 = 0xEA00000000007265;
          goto LABEL_165;
        }
        v354 = (unint64_t)*(v107 - 2);
        v23 = v108;
        v55 = v109;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          break;
        v107 += 7;
        if (!--v106)
          goto LABEL_296;
      }
      v117 = v55;
      v108 = v23;
      v110 = v354;
LABEL_165:
      v509 = v108;
      v510 = v358;
      v511 = v57;
      v512 = v117;
      v513 = v110;
      v514 = v77;
      v515 = v76;
      v119 = *v355;
      v118 = (_QWORD *)v355[1];
      v120 = (_QWORD *)v355[2];
      v121 = v118 + 4;
      v122 = v118[2];
      v354 = v117;
      if (v119)
      {
        result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v108, (uint64_t)v121, v122, (_QWORD *)(v119 + 16), v119 + 32);
        if ((v123 & 1) == 0)
        {
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_308;
LABEL_184:
          if (result >= v120[2])
            goto LABEL_307;
          v124 = &v120[6 * result];
          v126 = v124[7];
          v125 = v124[8];
          v127 = v124[9];
          v315 = *(_QWORD *)(v125 + 16);
          v316 = v125 + 32;
          v314 = v127;
          if (v126)
          {
            v312 = (_QWORD *)(v126 + 32);
            v313 = (_QWORD *)(v126 + 16);
            swift_retain_n();
            swift_bridgeObjectRetain_n();
            swift_retain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
            swift_retain();
            result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v509, v316, v315, v313, (uint64_t)v312);
            if ((v128 & 1) != 0)
            {
LABEL_193:
              swift_bridgeObjectRelease();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              goto LABEL_195;
            }
          }
          else
          {
            swift_retain_n();
            swift_bridgeObjectRetain_n();
            swift_retain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
            result = specialized Collection<>.firstIndex(of:)((uint64_t *)&v509, v316, v315);
            if ((v129 & 1) != 0)
              goto LABEL_193;
          }
          v313 = v120;
          v315 = (uint64_t)v118;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_315;
          if (result >= *(_QWORD *)(v314 + 16))
            goto LABEL_316;
          v130 = (_QWORD *)(v314 + 56 * result);
          v131 = v130[4];
          v132 = v130[5];
          v316 = v130[7];
          outlined copy of Output?(v131, v132);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          if (v132)
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            goto LABEL_211;
          }
          v118 = (_QWORD *)v315;
          v120 = v313;
LABEL_195:
          result = specialized OrderedSet._find(_:)(v38, v119, v118);
          if ((v133 & 1) == 0)
          {
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_310;
            if (result >= v120[2])
              goto LABEL_309;
            v134 = &v120[6 * result];
            v136 = v134[7];
            v135 = v134[8];
            v137 = v134[9];
            v138 = *(_QWORD *)(v135 + 16);
            if (v136)
            {
              swift_retain();
              swift_bridgeObjectRetain();
              swift_retain();
              swift_retain();
              swift_retain();
              result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v460, v135 + 32, v138, (_QWORD *)(v136 + 16), v136 + 32);
              if ((v139 & 1) != 0)
              {
LABEL_208:
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                swift_release();
                goto LABEL_210;
              }
            }
            else
            {
              swift_retain();
              swift_bridgeObjectRetain();
              swift_retain();
              swift_retain();
              result = specialized Collection<>.firstIndex(of:)(v460, v135 + 32, v138);
              if ((v140 & 1) != 0)
                goto LABEL_208;
            }
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_317;
            if (result >= *(_QWORD *)(v137 + 16))
              goto LABEL_318;
            v141 = (_QWORD *)(v137 + 56 * result);
            v142 = v141[4];
            v143 = v141[5];
            v144 = v141[7];
            v145 = (_QWORD *)v141[8];
            v146 = v141[9];
            v147 = v141[10];
            v313 = (_QWORD *)v141[6];
            v314 = v142;
            v312 = v145;
            v315 = v146;
            v316 = v147;
            outlined copy of Output?(v142, v143);
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            if (v143)
            {
              v506[0] = v314;
              v506[1] = v143;
              v506[2] = v313;
              v506[3] = v144;
              v506[4] = v312;
              v507 = v315 & 1;
              v508 = v316;
              swift_retain();
              swift_release();
              Graph.connect(_:to:)((uint64_t)v506, (unint64_t)&v509);
              swift_bridgeObjectRelease();
              swift_release();
            }
          }
          swift_bridgeObjectRelease();
LABEL_210:
          swift_release();
LABEL_211:
          v148 = *(_QWORD *)(v337 + 16);
          v149 = (_QWORD *)v353;
          if (!v148)
          {
LABEL_298:
            v361 = v320;
            v362 = v321;
            v363 = v322;
            v364 = v323;
            v365 = v319;
            *(_QWORD *)&v366 = 0x746C69665F70696DLL;
            *((_QWORD *)&v366 + 1) = 0xEA00000000007265;
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v361);
            outlined init with take of UserGraphError.ErrorType((__int128 *)&v361._countAndFlagsBits, (uint64_t)&v371);
            lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
            v383 = 0uLL;
            swift_allocError();
            *v279 = v371;
            v280 = v375;
            v282 = v372;
            v281 = v373;
            v279[3] = v374;
            v279[4] = v280;
            v279[1] = v282;
            v279[2] = v281;
            v283 = v379;
            v285 = v376;
            v284 = v377;
            v279[7] = v378;
            v279[8] = v283;
            v279[5] = v285;
            v279[6] = v284;
            v286 = v383;
            v288 = v380;
            v287 = v381;
            v279[11] = v382;
            v279[12] = v286;
            v279[9] = v288;
            v279[10] = v287;
            swift_willThrow();
            outlined init with take of NodePersonality(&v386, &v447);
            outlined release of NodePersonality(&v447);
            swift_bridgeObjectRelease();
            v446 = v387;
            v289 = &v446;
            goto LABEL_300;
          }
          while (1)
          {
            v150 = *(v149 - 6);
            v358 = *(v149 - 5);
            v152 = *(v149 - 4);
            v151 = *(v149 - 3);
            v153 = *(v149 - 2);
            v154 = *((_BYTE *)v149 - 8);
            v155 = *v149;
            if (v152 == 0x746C69665F70696DLL && v151 == 0xEA00000000007265)
            {
              v158 = 0xEA00000000007265;
              goto LABEL_221;
            }
            v354 = *(v149 - 2);
            v157 = v150;
            v158 = v151;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              break;
            v149 += 7;
            if (!--v148)
            {
              v499 = v157;
              v500 = v358;
              v501 = v152;
              v502 = v158;
              v503 = v354;
              v504 = v154;
              v505 = v155;
              goto LABEL_298;
            }
          }
          v150 = v157;
          v153 = v354;
LABEL_221:
          v499 = v150;
          v500 = v358;
          v501 = v152;
          v502 = v158;
          v503 = v153;
          v504 = v154;
          v505 = v155;
          v160 = *v355;
          v159 = (_QWORD *)v355[1];
          v161 = (_QWORD *)v355[2];
          result = specialized OrderedSet._find(_:)(v150, *v355, v159);
          v354 = v158;
          if ((v162 & 1) != 0)
          {
            swift_retain();
            swift_bridgeObjectRetain();
            goto LABEL_234;
          }
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_312;
          v316 = (uint64_t)v159;
          if (result >= v161[2])
            goto LABEL_311;
          v163 = &v161[6 * result];
          v164 = v163[7];
          v165 = v163[8];
          v166 = v163[9];
          v315 = v165 + 32;
          v167 = *(_QWORD *)(v165 + 16);
          v313 = v161;
          v314 = v167;
          if (v164)
          {
            v311 = v164 + 32;
            v312 = (_QWORD *)(v164 + 16);
            swift_retain_n();
            swift_bridgeObjectRetain_n();
            swift_retain();
            v168 = v166;
            swift_retain();
            swift_retain();
            result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v499, v315, v314, v312, v311);
            if ((v169 & 1) != 0)
            {
LABEL_233:
              swift_bridgeObjectRelease();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              v159 = (_QWORD *)v316;
              v161 = v313;
              goto LABEL_234;
            }
          }
          else
          {
            swift_retain_n();
            swift_bridgeObjectRetain_n();
            swift_retain();
            v168 = v166;
            swift_retain();
            result = specialized Collection<>.firstIndex(of:)(&v499, v315, v314);
            if ((v170 & 1) != 0)
              goto LABEL_233;
          }
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_320;
          if (result >= *(_QWORD *)(v168 + 16))
            goto LABEL_319;
          v171 = (_QWORD *)(v168 + 56 * result);
          v172 = v171[4];
          v173 = v171[5];
          v358 = v171[7];
          outlined copy of Output?(v172, v173);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          v159 = (_QWORD *)v316;
          v161 = v313;
          if (v173)
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
LABEL_248:
            v189 = *(_QWORD *)(v337 + 16);
            v190 = (unint64_t *)v353;
            if (!v189)
            {
LABEL_299:
              v361 = v320;
              v362 = v321;
              v363 = v322;
              v364 = v323;
              v365 = v319;
              *(_QWORD *)&v366 = 0x746C69665F6E696DLL;
              *((_QWORD *)&v366 + 1) = 0xEA00000000007265;
              _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v361);
              outlined init with take of UserGraphError.ErrorType((__int128 *)&v361._countAndFlagsBits, (uint64_t)&v371);
              lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
              v383 = 0uLL;
              swift_allocError();
              *v290 = v371;
              v291 = v375;
              v293 = v372;
              v292 = v373;
              v290[3] = v374;
              v290[4] = v291;
              v290[1] = v293;
              v290[2] = v292;
              v294 = v379;
              v296 = v376;
              v295 = v377;
              v290[7] = v378;
              v290[8] = v294;
              v290[5] = v296;
              v290[6] = v295;
              v297 = v383;
              v299 = v380;
              v298 = v381;
              v290[11] = v382;
              v290[12] = v297;
              v290[9] = v299;
              v290[10] = v298;
              swift_willThrow();
              outlined init with take of NodePersonality(&v386, &v449);
              outlined release of NodePersonality(&v449);
              swift_bridgeObjectRelease();
              v448 = v387;
              v289 = &v448;
LABEL_300:
              outlined release of [Input]((uint64_t)v289);
              swift_bridgeObjectRelease();
LABEL_272:
              swift_release();
              swift_release();
              outlined consume of NodePersonality(v349);
              swift_bridgeObjectRelease();
LABEL_273:
              swift_bridgeObjectRelease_n();
              return (*(uint64_t (**)(char *, uint64_t))(v341 + 8))(v350, v351);
            }
            while (1)
            {
              v192 = *(v190 - 6);
              v191 = *(v190 - 5);
              v193 = *(v190 - 4);
              v194 = *(v190 - 2);
              v195 = *((_BYTE *)v190 - 8);
              v196 = v190;
              v23 = *v190;
              if (v193 == 0x746C69665F6E696DLL && *(v190 - 3) == 0xEA00000000007265)
              {
                v198 = 0xEA00000000007265;
                goto LABEL_258;
              }
              v358 = *(v190 - 3);
              if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                break;
              v190 = v196 + 7;
              if (!--v189)
              {
                *(_QWORD *)&v490 = v192;
                *((_QWORD *)&v490 + 1) = v191;
                v491 = v193;
                v492 = v358;
                v493 = v194;
                v494 = v195;
                v495 = v23;
                goto LABEL_299;
              }
            }
            v198 = v358;
LABEL_258:
            *(_QWORD *)&v490 = v192;
            *((_QWORD *)&v490 + 1) = v191;
            v491 = v193;
            v492 = v198;
            v493 = v194;
            v494 = v195;
            v495 = v23;
            swift_retain();
            swift_bridgeObjectRetain();
            Graph.moveEdge(from:to:)((uint64_t)v460, &v490);
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
LABEL_139:
            swift_release();
            v24 = v356;
            object = v344;
            goto LABEL_61;
          }
LABEL_234:
          result = specialized OrderedSet._find(_:)(v38, v160, v159);
          if ((v174 & 1) != 0)
            goto LABEL_245;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_313;
          if (result >= v161[2])
            goto LABEL_314;
          v175 = &v161[6 * result];
          v177 = v175[7];
          v176 = v175[8];
          v178 = v175[9];
          v179 = *(_QWORD *)(v176 + 16);
          if (v177)
          {
            swift_retain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
            swift_retain();
            result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v460, v176 + 32, v179, (_QWORD *)(v177 + 16), v177 + 32);
            if ((v180 & 1) != 0)
            {
LABEL_246:
              swift_bridgeObjectRelease();
              swift_release();
              swift_bridgeObjectRelease();
              swift_release();
              swift_release();
              swift_release();
              goto LABEL_247;
            }
          }
          else
          {
            swift_retain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
            result = specialized Collection<>.firstIndex(of:)(v460, v176 + 32, v179);
            if ((v181 & 1) != 0)
              goto LABEL_246;
          }
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_321;
          if (result >= *(_QWORD *)(v178 + 16))
            goto LABEL_322;
          v182 = (_QWORD *)(v178 + 56 * result);
          v183 = v182[4];
          v184 = v182[5];
          v185 = v182[7];
          v186 = (_QWORD *)v182[8];
          v187 = v182[9];
          v188 = v182[10];
          v314 = v182[6];
          v315 = v183;
          v313 = v186;
          v316 = v187;
          v358 = v188;
          outlined copy of Output?(v183, v184);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          if (!v184)
          {
LABEL_245:
            swift_bridgeObjectRelease();
          }
          else
          {
            v496[0] = v315;
            v496[1] = v184;
            v496[2] = v314;
            v496[3] = v185;
            v496[4] = v313;
            v497 = v316 & 1;
            v498 = v358;
            swift_retain();
            swift_release();
            Graph.connect(_:to:)((uint64_t)v496, (unint64_t)&v499);
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
          }
LABEL_247:
          swift_release();
          goto LABEL_248;
        }
      }
      else if (v122)
      {
        if (*v121 == v108)
        {
          result = 0;
          goto LABEL_184;
        }
        if (v122 != 1)
        {
          if (v118[5] == v108)
          {
            result = 1;
            goto LABEL_184;
          }
          if (v122 != 2)
          {
            if (v118[6] == v108)
            {
              result = 2;
              goto LABEL_184;
            }
            v199 = 0;
            while (v122 - 3 != v199)
            {
              v200 = v118[v199++ + 7];
              if (v200 == v108)
              {
                result = v199 + 2;
                if (((v199 + 2) & 0x8000000000000000) == 0)
                  goto LABEL_184;
                goto LABEL_308;
              }
            }
          }
        }
      }
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_195;
    }
    v353 = object[2];
    if (!v353)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_286;
    }
    v69 = object[5];
    v358 = object[4];
    v70 = object[6];
    v71 = object[7];
    v354 = object[8];
    v72 = *((_BYTE *)object + 72);
    v23 = object[10];
    v73 = 0x64726F6F63786574;
    if (v70 != 0x64726F6F63786574 || v71 != 0xE800000000000000)
      break;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    v71 = 0xE800000000000000;
LABEL_110:
    *(_QWORD *)&v472 = v358;
    *((_QWORD *)&v472 + 1) = v69;
    v473 = v73;
    v474 = v71;
    v475 = v354;
    v476 = v72;
    v477 = v23;
    Graph.moveEdge(from:to:)((uint64_t)v460, &v472);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
LABEL_60:
    swift_release();
LABEL_61:
    v35 = v352;
LABEL_62:
    if (++v35 == v345)
    {
      swift_bridgeObjectRelease();
      goto LABEL_4;
    }
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    v73 = v70;
    goto LABEL_110;
  }
  swift_bridgeObjectRetain_n();
  swift_retain();
  result = swift_bridgeObjectRetain();
  if (v353 == 1)
  {
LABEL_284:
    swift_bridgeObjectRelease_n();
LABEL_286:
    outlined init with take of NodePersonality(&v386, &v437);
    v436 = v387;
    v361 = v328;
    v362 = v329;
    v363 = v330;
    v364 = v331;
    v365 = v332;
    *(_QWORD *)&v366 = 0x64726F6F63786574;
    *((_QWORD *)&v366 + 1) = 0xE800000000000000;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v361);
    outlined init with take of UserGraphError.ErrorType((__int128 *)&v361._countAndFlagsBits, (uint64_t)&v371);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v383 = 0uLL;
    swift_allocError();
    *v248 = v371;
    v249 = v375;
    v251 = v372;
    v250 = v373;
    v248[3] = v374;
    v248[4] = v249;
    v248[1] = v251;
    v248[2] = v250;
    v252 = v379;
    v254 = v376;
    v253 = v377;
    v248[7] = v378;
    v248[8] = v252;
    v248[5] = v254;
    v248[6] = v253;
    v255 = v383;
    v257 = v380;
    v256 = v381;
    v248[11] = v382;
    v248[12] = v255;
    v248[9] = v257;
    v248[10] = v256;
    swift_bridgeObjectRetain();
    outlined retain of NodePersonality(&v437);
    outlined retain of [Input]((uint64_t)&v436);
    swift_willThrow();
    outlined init with take of NodePersonality(&v395, &v435);
    outlined release of NodePersonality(&v435);
    v434 = v395._object;
    outlined release of [Input]((uint64_t)&v434);
    v433 = v396;
    outlined release of [Input]((uint64_t)&v433);
    outlined release of NodePersonality(&v437);
    swift_bridgeObjectRelease();
    outlined release of [Input]((uint64_t)&v436);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    outlined consume of NodePersonality(v349);
    swift_bridgeObjectRelease();
    goto LABEL_273;
  }
  v356 = v24;
  v87 = 1;
  v88 = v327;
  while (1)
  {
    v89 = v87 + 1;
    if (__OFADD__(v87, 1))
      break;
    v69 = *(v88 - 5);
    v358 = *(v88 - 6);
    v90 = *(v88 - 4);
    v71 = *(v88 - 3);
    v354 = *(v88 - 2);
    v72 = *((_BYTE *)v88 - 8);
    v23 = *v88;
    if (v90 == 0x64726F6F63786574 && v71 == 0xE800000000000000)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      object = v344;
      swift_bridgeObjectRelease_n();
      v71 = 0xE800000000000000;
      v24 = v356;
      v73 = 0x64726F6F63786574;
      goto LABEL_110;
    }
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) != 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      object = v344;
      swift_bridgeObjectRelease_n();
      v73 = v90;
      v24 = v356;
      goto LABEL_110;
    }
    v88 += 7;
    ++v87;
    if (v89 == v353)
      goto LABEL_284;
  }
  __break(1u);
LABEL_305:
  __break(1u);
LABEL_306:
  __break(1u);
LABEL_307:
  __break(1u);
LABEL_308:
  __break(1u);
LABEL_309:
  __break(1u);
LABEL_310:
  __break(1u);
LABEL_311:
  __break(1u);
LABEL_312:
  __break(1u);
LABEL_313:
  __break(1u);
LABEL_314:
  __break(1u);
LABEL_315:
  __break(1u);
LABEL_316:
  __break(1u);
LABEL_317:
  __break(1u);
LABEL_318:
  __break(1u);
LABEL_319:
  __break(1u);
LABEL_320:
  __break(1u);
LABEL_321:
  __break(1u);
LABEL_322:
  __break(1u);
  return result;
}

uint64_t Graph.transformMaterialXCubeimageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(uint64_t a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  Swift::String v26;
  Swift::Bool v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  unint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  char *v106;
  _QWORD *v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  unint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  _OWORD *v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t *v134;
  _OWORD *v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  _OWORD *v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t *v156;
  _OWORD *v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  unint64_t v167;
  _OWORD *v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  _OWORD *v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  Swift::String v188;
  Swift::String v189;
  __int128 v190;
  _OWORD *v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  unint64_t v201;
  _OWORD *v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  _OWORD *v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  _OWORD *v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  _OWORD *v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  _OWORD *v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  __int128 *v256;
  __int128 *v257;
  __int128 *v258;
  __int128 *v259;
  __int128 *v260;
  __int128 *v261;
  __int128 *v262;
  __int128 *v263;
  __int128 *v264;
  __int128 *v265;
  unint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  char *v269;
  uint64_t v270;
  Swift::String v271;
  char *v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  __int128 *v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  unint64_t v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  _QWORD *v286;
  void *v287;
  uint64_t v288;
  uint64_t v289;
  __int128 *v290;
  char *v291;
  uint64_t v292;
  Swift::String v293;
  Swift::String v294;
  char *v295;
  uint64_t v296;
  uint64_t countAndFlagsBits;
  char v298;
  uint64_t v299;
  unint64_t v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  _QWORD v314[2];
  uint64_t v315;
  Swift::String v316;
  char *v317;
  unint64_t v318;
  uint64_t v319;
  unsigned __int8 v320;
  uint64_t v321[14];
  uint64_t v322[14];
  uint64_t v323[14];
  uint64_t v324[14];
  __int128 v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  unsigned __int8 v329;
  _QWORD v330[7];
  _QWORD v331[7];
  _QWORD v332[7];
  _QWORD v333[7];
  _BYTE v334[16];
  uint64_t v335;
  _QWORD v336[7];
  _BYTE v337[16];
  uint64_t v338;
  _BYTE v339[16];
  uint64_t v340;
  _OWORD v341[3];
  uint64_t v342;
  __int128 v343;
  _OWORD v344[2];
  uint64_t v345;
  _OWORD v346[3];
  uint64_t v347;
  __int128 v348;
  _OWORD v349[2];
  uint64_t v350;
  _OWORD v351[3];
  uint64_t v352;
  __int128 v353;
  _OWORD v354[2];
  uint64_t v355;
  _OWORD v356[3];
  uint64_t v357;
  __int128 v358;
  _OWORD v359[2];
  uint64_t v360;
  _OWORD v361[3];
  uint64_t v362;
  __int128 v363;
  _OWORD v364[2];
  uint64_t v365;
  _OWORD v366[3];
  uint64_t v367;
  _QWORD v368[14];
  _OWORD v369[3];
  uint64_t v370;
  _QWORD v371[14];
  __int128 v372;
  _OWORD v373[2];
  uint64_t v374;
  __int128 v375;
  __int128 v376;
  _OWORD v377[2];
  uint64_t v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  char *v387;
  void *object;
  unint64_t v389;
  char *v390;
  unint64_t v391;
  char *v392;
  unint64_t v393;
  char *v394;
  unint64_t v395;
  char *v396;
  unint64_t v397;
  char *v398;
  uint64_t v399;
  unint64_t v400;
  char *v401;
  unint64_t v402;
  char *v403;
  unint64_t v404;
  char *v405;
  unint64_t v406;
  char *v407;
  unint64_t v408;
  __int128 v409;
  __int128 v410[6];
  __int128 v411;
  char *v412;
  unint64_t v413;
  __int128 v414;
  char *v415;
  unint64_t v416[5];
  char *v417;
  unint64_t v418;
  char *v419;
  unint64_t v420;
  char *v421;
  unint64_t v422;
  char *v423;
  unint64_t v424;
  char *v425;
  unint64_t v426;
  char *v427;
  unint64_t v428;
  char *v429;
  unint64_t v430;
  char *v431;
  unint64_t v432;
  char *v433;
  unint64_t v434;
  char *v435;
  unint64_t v436;
  void *v437;
  __int128 v438;
  unint64_t v439;
  _QWORD *v440;
  char *v441;
  uint64_t v442;
  uint64_t v443;
  char v444;
  uint64_t v445;
  char *v446;
  uint64_t v447;
  unint64_t v448;
  uint64_t v449;
  char v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  unint64_t v455;
  uint64_t v456;
  char v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  uint64_t v463;
  char v464;
  uint64_t v465;
  __int128 v466;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  char v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  uint64_t v476;
  char v477;
  uint64_t v478;
  __int128 v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  _OWORD v488[2];
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  unint64_t v492;
  uint64_t v493;
  char v494;
  uint64_t v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  _OWORD v505[3];
  uint64_t v506;

  v3 = MEMORY[0x24BDAC7A8](a1);
  v4 = v2;
  v290 = v1;
  v6 = v5;
  v275 = v7;
  v276 = v8;
  v9 = v3;
  v10 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v12 = (char *)&v252 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v288 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v16 = (char *)&v252 - v15;
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v18 = v14;
  v17(v12, v9, v6);
  dispatch thunk of Sequence.makeIterator()();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v291 = v16;
  dispatch thunk of IteratorProtocol.next()();
  v20 = (_QWORD *)*((_QWORD *)&v301 + 1);
  if (*((_QWORD *)&v301 + 1))
  {
    v21 = v301;
    v22 = (char *)v302;
    v278 = (__int128 *)&v315;
    v23 = *((_QWORD *)&v302 + 1);
    v24 = v303;
    v260 = v377;
    v25 = BYTE8(v303);
    v263 = v359;
    v264 = v364;
    v265 = v373;
    v261 = v349;
    v262 = v354;
    v258 = v344;
    v259 = (__int128 *)&v335;
    v256 = (__int128 *)&v340;
    v257 = (__int128 *)&v338;
    v287 = (void *)0x8000000245FC8310;
    v277 = 0x8000000245FC8380;
    v280 = AssociatedConformanceWitness;
    do
    {
      v439 = v21;
      v440 = v20;
      v441 = v22;
      v442 = v23;
      v443 = v24;
      v444 = v25 & 1;
      if (v21 >> 61 == 5)
      {
        v283 = v25;
        v284 = v24;
        v289 = v23;
        swift_bridgeObjectRetain();
        v26._countAndFlagsBits = 0xD000000000000017;
        v26._object = v287;
        v27 = String.hasPrefix(_:)(v26);
        swift_bridgeObjectRelease();
        if (v27)
        {
          ShaderGraphNode.out.getter((uint64_t)v314);
          if (v4)
          {
            (*(void (**)(char *, uint64_t))(v288 + 8))(v291, v18);
            goto LABEL_88;
          }
          v28 = v314[1];
          v438 = *v278;
          v29 = outlined release of String((uint64_t)&v438);
          v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 144))(v29);
          swift_release();
          v279 = v30;
          if (!v30)
          {
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi34_((uint64_t)&v294);
            *(_QWORD *)&v301 = 0;
            *((_QWORD *)&v301 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(40);
            swift_bridgeObjectRelease();
            *(_QWORD *)&v301 = 0xD000000000000025;
            *((_QWORD *)&v301 + 1) = 0x8000000245FC8350;
            v293._countAndFlagsBits = 1701080942;
            v293._object = (void *)0xE400000000000000;
            v292 = v289;
            v188._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v188);
            swift_bridgeObjectRelease();
            String.append(_:)(v293);
            swift_bridgeObjectRelease();
            v189._countAndFlagsBits = 39;
            v189._object = (void *)0xE100000000000000;
            String.append(_:)(v189);
            v190 = v301;
            outlined init with take of UserGraphError.ErrorType((__int128 *)&v294._countAndFlagsBits, (uint64_t)&v301);
            v313 = v190;
            lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
            swift_allocError();
            *v191 = v301;
            v192 = v305;
            v194 = v302;
            v193 = v303;
            v191[3] = v304;
            v191[4] = v192;
            v191[1] = v194;
            v191[2] = v193;
            v195 = v309;
            v197 = v306;
            v196 = v307;
            v191[7] = v308;
            v191[8] = v195;
            v191[5] = v197;
            v191[6] = v196;
            v198 = v313;
            v200 = v310;
            v199 = v311;
            v191[11] = v312;
            v191[12] = v198;
            v191[9] = v200;
            v191[10] = v199;
            swift_willThrow();
            outlined consume of NodePersonality(v21);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return (*(uint64_t (**)(char *, uint64_t))(v288 + 8))(v291, v18);
          }
          *(_QWORD *)&v301 = 0;
          *((_QWORD *)&v301 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(31);
          swift_bridgeObjectRelease();
          *(_QWORD *)&v301 = 0xD00000000000001CLL;
          *((_QWORD *)&v301 + 1) = v277;
          v294._countAndFlagsBits = 1701080942;
          v294._object = (void *)0xE400000000000000;
          v293._countAndFlagsBits = v289;
          v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v31);
          swift_bridgeObjectRelease();
          String.append(_:)(v294);
          swift_bridgeObjectRelease();
          v32._countAndFlagsBits = 39;
          v32._object = (void *)0xE100000000000000;
          String.append(_:)(v32);
          specialized Graph.insertCreateSampler(label:)(&v316);
          v271 = v316;
          v272 = v317;
          v273 = v318;
          v274 = v319;
          v33 = v320;
          swift_bridgeObjectRelease();
          v34 = v20[2];
          if (!v34)
          {
LABEL_86:
            v294._countAndFlagsBits = v21;
            v294._object = v20;
            v295 = v22;
            v296 = v289;
            countAndFlagsBits = v284;
            v298 = v283 & 1;
            v299 = 0x79747265746C6966;
            v300 = 0xEA00000000006570;
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v294);
            outlined init with take of UserGraphError.ErrorType((__int128 *)&v294._countAndFlagsBits, (uint64_t)&v301);
            lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
            v313 = 0uLL;
            swift_allocError();
            *v124 = v301;
            v125 = v305;
            v127 = v302;
            v126 = v303;
            v124[3] = v304;
            v124[4] = v125;
            v124[1] = v127;
            v124[2] = v126;
            v128 = v309;
            v130 = v306;
            v129 = v307;
            v124[7] = v308;
            v124[8] = v128;
            v124[5] = v130;
            v124[6] = v129;
            v131 = v313;
            v133 = v310;
            v132 = v311;
            v124[11] = v312;
            v124[12] = v131;
            v124[9] = v133;
            v124[10] = v132;
            swift_bridgeObjectRetain();
            outlined copy of NodePersonality(v21);
            swift_bridgeObjectRetain();
            swift_willThrow();
            (*(void (**)(char *, uint64_t))(v288 + 8))(v291, v18);
            outlined init with take of NodePersonality(&v316, &v389);
            outlined release of NodePersonality(&v389);
            object = v316._object;
            outlined release of [Input]((uint64_t)&object);
            v387 = v317;
            v134 = (uint64_t *)&v387;
            goto LABEL_87;
          }
          LODWORD(v270) = v33;
          v285 = v18;
          v286 = v20;
          v254 = 0;
          v281 = v22;
          v282 = v21;
          v35 = v20 + 10;
          v255 = v20 + 10;
          while (1)
          {
            v37 = *(v35 - 6);
            v36 = *(v35 - 5);
            v39 = *(v35 - 4);
            v38 = *(v35 - 3);
            v40 = *(v35 - 2);
            v41 = *((_BYTE *)v35 - 8);
            v42 = *v35;
            if (v39 == 0x79747265746C6966 && v38 == 0xEA00000000006570)
            {
              v46 = 0xEA00000000006570;
              goto LABEL_19;
            }
            v506 = *v35;
            v44 = v36;
            v45 = v38;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              break;
            v35 += 7;
            if (!--v34)
            {
              v459 = v37;
              v460 = v44;
              v461 = v39;
              v462 = v45;
              v463 = v40;
              v464 = v41;
              v465 = v506;
              v22 = v281;
              v21 = v282;
              v18 = v285;
              v20 = v286;
              goto LABEL_86;
            }
          }
          v36 = v44;
          v46 = v45;
          v42 = v506;
LABEL_19:
          v459 = v37;
          v460 = v36;
          v461 = v39;
          v462 = v46;
          v463 = v40;
          v464 = v41;
          v465 = v42;
          v47 = (char *)v316._object;
          v437 = v316._object;
          v48 = *((_QWORD *)v316._object + 2);
          v267 = v36;
          swift_retain();
          v266 = v46;
          swift_bridgeObjectRetain();
          if (!v48)
          {
LABEL_90:
            outlined init with take of NodePersonality(&v316, &v391);
            v390 = v317;
            v294 = v271;
            v295 = v272;
            v296 = v273;
            countAndFlagsBits = v274;
            v298 = v270;
            v299 = 0x746C69665F67616DLL;
            v300 = 0xEA00000000007265;
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v294);
            outlined init with take of UserGraphError.ErrorType((__int128 *)&v294._countAndFlagsBits, (uint64_t)&v301);
            lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
            v313 = 0uLL;
            swift_allocError();
            *v136 = v301;
            v137 = v305;
            v139 = v302;
            v138 = v303;
            v136[3] = v304;
            v136[4] = v137;
            v136[1] = v139;
            v136[2] = v138;
            v140 = v309;
            v142 = v306;
            v141 = v307;
            v136[7] = v308;
            v136[8] = v140;
            v136[5] = v142;
            v136[6] = v141;
            v143 = v313;
            v145 = v310;
            v144 = v311;
            v136[11] = v312;
            v136[12] = v143;
            v136[9] = v145;
            v136[10] = v144;
            outlined retain of [Input]((uint64_t)&v437);
            outlined retain of NodePersonality(&v391);
            outlined retain of [Input]((uint64_t)&v390);
            swift_willThrow();
            (*(void (**)(char *, uint64_t))(v288 + 8))(v291, v285);
            swift_bridgeObjectRelease();
            swift_release();
            outlined release of NodePersonality(&v391);
            outlined release of [Input]((uint64_t)&v437);
            outlined release of [Input]((uint64_t)&v390);
            swift_release();
            outlined consume of NodePersonality(v282);
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
          v269 = v47;
          v49 = v47 + 80;
          v268 = v49;
          while (1)
          {
            v50 = *(v49 - 6);
            v506 = *(v49 - 5);
            v51 = *(v49 - 4);
            v52 = *(v49 - 2);
            v53 = *((_BYTE *)v49 - 8);
            v54 = *v49;
            if (v51 == 0x746C69665F67616DLL && *(v49 - 3) == 0xEA00000000007265)
              break;
            v56 = *(v49 - 3);
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              goto LABEL_29;
            v49 += 7;
            if (!--v48)
            {
              v489 = v50;
              v490 = v506;
              v491 = v51;
              v492 = v56;
              v493 = v52;
              v494 = v53;
              v495 = v54;
              goto LABEL_90;
            }
          }
          v56 = 0xEA00000000007265;
LABEL_29:
          v489 = v50;
          v490 = v506;
          v491 = v51;
          v492 = v56;
          v493 = v52;
          v494 = v53;
          v495 = v54;
          v57 = v290[8];
          v58 = v290[9];
          v59 = v290[6];
          v503 = v290[7];
          v504 = v57;
          v505[0] = v58;
          *(_OWORD *)((char *)v505 + 9) = *(__int128 *)((char *)v290 + 153);
          v60 = v290[5];
          v500 = v290[4];
          v501 = v60;
          v502 = v59;
          v61 = v290[1];
          v496 = *v290;
          v497 = v61;
          v62 = v290[3];
          v498 = v290[2];
          v499 = v62;
          swift_retain();
          swift_bridgeObjectRetain();
          Graph.edge(to:)((uint64_t)&v489, v321);
          outlined init with take of MetalFunctionNode?((uint64_t)v321, (uint64_t)v371, &demangling cache variable for type metadata for Edge?);
          if (v371[1])
          {
            outlined release of Edge?(v321);
            v63 = v285;
            v64 = v291;
            v65 = v269;
          }
          else
          {
            Graph.edge(to:)((uint64_t)&v459, v322);
            outlined init with take of MetalFunctionNode?((uint64_t)v322, (uint64_t)v369, &demangling cache variable for type metadata for Edge?);
            v63 = v285;
            v64 = v291;
            v65 = v269;
            if (*((_QWORD *)&v369[0] + 1))
            {
              v372 = v369[0];
              v373[0] = v369[1];
              v373[1] = v369[2];
              v374 = v370;
              v375 = *v265;
              swift_retain();
              outlined retain of String((uint64_t)&v375);
              outlined release of Edge?(v322);
              Graph.connect(_:to:)((uint64_t)&v372, (unint64_t)&v489);
              swift_release();
              outlined release of String((uint64_t)&v375);
            }
          }
          swift_bridgeObjectRelease();
          swift_release();
          v66 = *((_QWORD *)v65 + 2);
          if (!v66)
          {
LABEL_91:
            outlined init with take of NodePersonality(&v316, &v393);
            v392 = v317;
            v294 = v271;
            v295 = v272;
            v296 = v273;
            countAndFlagsBits = v274;
            v298 = v270;
            v299 = 0x746C69665F70696DLL;
            v300 = 0xEA00000000007265;
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v294);
            outlined init with take of UserGraphError.ErrorType((__int128 *)&v294._countAndFlagsBits, (uint64_t)&v301);
            lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
            v313 = 0uLL;
            swift_allocError();
            *v146 = v301;
            v147 = v305;
            v149 = v302;
            v148 = v303;
            v146[3] = v304;
            v146[4] = v147;
            v146[1] = v149;
            v146[2] = v148;
            v150 = v309;
            v152 = v306;
            v151 = v307;
            v146[7] = v308;
            v146[8] = v150;
            v146[5] = v152;
            v146[6] = v151;
            v153 = v313;
            v155 = v310;
            v154 = v311;
            v146[11] = v312;
            v146[12] = v153;
            v146[9] = v155;
            v146[10] = v154;
            outlined retain of [Input]((uint64_t)&v437);
            outlined retain of NodePersonality(&v393);
            outlined retain of [Input]((uint64_t)&v392);
            swift_willThrow();
            (*(void (**)(char *, uint64_t))(v288 + 8))(v64, v63);
            swift_bridgeObjectRelease();
            swift_release();
            outlined release of NodePersonality(&v393);
            outlined release of [Input]((uint64_t)&v437);
            v156 = (uint64_t *)&v392;
            goto LABEL_92;
          }
          v67 = v268;
          while (1)
          {
            v68 = *(v67 - 6);
            v506 = *(v67 - 5);
            v69 = *(v67 - 4);
            v70 = *(v67 - 2);
            v71 = *((_BYTE *)v67 - 8);
            v72 = *v67;
            if (v69 == 0x746C69665F70696DLL && *(v67 - 3) == 0xEA00000000007265)
              break;
            v74 = *(v67 - 3);
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              goto LABEL_43;
            v67 += 7;
            if (!--v66)
            {
              v472 = v68;
              v473 = v506;
              v474 = v69;
              v475 = v74;
              v476 = v70;
              v477 = v71;
              v478 = v72;
              v63 = v285;
              v64 = v291;
              goto LABEL_91;
            }
          }
          v74 = 0xEA00000000007265;
LABEL_43:
          v472 = v68;
          v473 = v506;
          v474 = v69;
          v475 = v74;
          v476 = v70;
          v477 = v71;
          v478 = v72;
          v75 = v290[6];
          v486 = v290[7];
          v76 = v290[9];
          v487 = v290[8];
          v488[0] = v76;
          *(_OWORD *)((char *)v488 + 9) = *(__int128 *)((char *)v290 + 153);
          v77 = v290[5];
          v483 = v290[4];
          v484 = v77;
          v485 = v75;
          v78 = v290[1];
          v479 = *v290;
          v480 = v78;
          v79 = v290[3];
          v481 = v290[2];
          v482 = v79;
          swift_retain();
          swift_bridgeObjectRetain();
          Graph.edge(to:)((uint64_t)&v472, v323);
          outlined init with take of MetalFunctionNode?((uint64_t)v323, (uint64_t)v368, &demangling cache variable for type metadata for Edge?);
          v80 = v282;
          if (v368[1])
          {
            outlined release of Edge?(v323);
            v81 = v285;
            v82 = v291;
          }
          else
          {
            Graph.edge(to:)((uint64_t)&v459, v324);
            outlined init with take of MetalFunctionNode?((uint64_t)v324, (uint64_t)v366, &demangling cache variable for type metadata for Edge?);
            v81 = v285;
            v82 = v291;
            if (*((_QWORD *)&v366[0] + 1))
            {
              v376 = v366[0];
              v377[0] = v366[1];
              v377[1] = v366[2];
              v378 = v367;
              v379 = *v260;
              swift_retain();
              outlined retain of String((uint64_t)&v379);
              outlined release of Edge?(v324);
              Graph.connect(_:to:)((uint64_t)&v376, (unint64_t)&v472);
              swift_release();
              outlined release of String((uint64_t)&v379);
            }
          }
          swift_bridgeObjectRelease();
          swift_release();
          v83 = *((_QWORD *)v269 + 2);
          if (!v83)
          {
LABEL_93:
            outlined init with take of NodePersonality(&v316, &v395);
            v394 = v317;
            v294 = v271;
            v295 = v272;
            v296 = v273;
            countAndFlagsBits = v274;
            v298 = v270;
            v299 = 0x746C69665F6E696DLL;
            v300 = 0xEA00000000007265;
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v294);
            outlined init with take of UserGraphError.ErrorType((__int128 *)&v294._countAndFlagsBits, (uint64_t)&v301);
            lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
            v313 = 0uLL;
            swift_allocError();
            *v157 = v301;
            v158 = v305;
            v160 = v302;
            v159 = v303;
            v157[3] = v304;
            v157[4] = v158;
            v157[1] = v160;
            v157[2] = v159;
            v161 = v309;
            v163 = v306;
            v162 = v307;
            v157[7] = v308;
            v157[8] = v161;
            v157[5] = v163;
            v157[6] = v162;
            v164 = v313;
            v166 = v310;
            v165 = v311;
            v157[11] = v312;
            v157[12] = v164;
            v157[9] = v166;
            v157[10] = v165;
            outlined retain of [Input]((uint64_t)&v437);
            outlined retain of NodePersonality(&v395);
            outlined retain of [Input]((uint64_t)&v394);
            swift_willThrow();
            (*(void (**)(char *, uint64_t))(v288 + 8))(v82, v81);
            swift_bridgeObjectRelease();
            swift_release();
            outlined release of NodePersonality(&v395);
            outlined release of [Input]((uint64_t)&v437);
            outlined release of [Input]((uint64_t)&v394);
            swift_release();
            outlined consume of NodePersonality(v80);
            goto LABEL_89;
          }
          v84 = v268;
          while (1)
          {
            v86 = *(v84 - 6);
            v85 = *(v84 - 5);
            v87 = *(v84 - 4);
            v88 = *(v84 - 3);
            v89 = *(v84 - 2);
            v90 = *((_BYTE *)v84 - 8);
            v91 = v84;
            v92 = *v84;
            if (v87 == 0x746C69665F6E696DLL && v88 == 0xEA00000000007265)
            {
              v88 = 0xEA00000000007265;
              goto LABEL_58;
            }
            v506 = *v84;
            v94 = v85;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              break;
            v84 = v91 + 7;
            if (!--v83)
            {
              *(_QWORD *)&v466 = v86;
              *((_QWORD *)&v466 + 1) = v94;
              v467 = v87;
              v468 = v88;
              v469 = v89;
              v470 = v90;
              v471 = v506;
              v80 = v282;
              v81 = v285;
              v82 = v291;
              goto LABEL_93;
            }
          }
          v85 = v94;
          v92 = v506;
LABEL_58:
          *(_QWORD *)&v466 = v86;
          *((_QWORD *)&v466 + 1) = v85;
          v467 = v87;
          v468 = v88;
          v469 = v89;
          v470 = v90;
          v471 = v92;
          swift_retain();
          swift_bridgeObjectRetain();
          Graph.moveEdge(from:to:)((uint64_t)&v459, &v466);
          swift_bridgeObjectRelease();
          swift_release();
          specialized ShaderGraphNode.metalTextureType.getter(v282);
          v95 = swift_retain();
          Graph.insertCubeimageNode(metalTextureType:resultType:)(v95, v279, &v325);
          v268 = (_QWORD *)*((_QWORD *)&v325 + 1);
          v253 = v325;
          v269 = v326;
          v270 = v327;
          v271._countAndFlagsBits = v328;
          LODWORD(v271._object) = v329;
          swift_release();
          v96 = v286[2];
          v97 = v255;
          if (!v96)
          {
LABEL_94:
            v167 = v282;
            v294._countAndFlagsBits = v282;
            v294._object = v286;
            v295 = v281;
            v296 = v289;
            countAndFlagsBits = v284;
            v298 = v283 & 1;
            v299 = 1701603686;
            v300 = 0xE400000000000000;
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v294);
            outlined init with take of UserGraphError.ErrorType((__int128 *)&v294._countAndFlagsBits, (uint64_t)&v301);
            lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
            v313 = 0uLL;
            swift_allocError();
            *v168 = v301;
            v169 = v305;
            v171 = v302;
            v170 = v303;
            v168[3] = v304;
            v168[4] = v169;
            v168[1] = v171;
            v168[2] = v170;
            v172 = v309;
            v174 = v306;
            v173 = v307;
            v168[7] = v308;
            v168[8] = v172;
            v168[5] = v174;
            v168[6] = v173;
            v175 = v313;
            v177 = v310;
            v176 = v311;
            v168[11] = v312;
            v168[12] = v175;
            v168[9] = v177;
            v168[10] = v176;
            swift_bridgeObjectRetain();
            outlined copy of NodePersonality(v167);
            swift_bridgeObjectRetain();
            swift_willThrow();
            (*(void (**)(char *, uint64_t))(v288 + 8))(v291, v285);
            outlined init with take of NodePersonality(&v325, &v400);
            outlined release of NodePersonality(&v400);
            v399 = *((_QWORD *)&v325 + 1);
            outlined release of [Input]((uint64_t)&v399);
            v398 = v326;
            outlined release of [Input]((uint64_t)&v398);
            swift_bridgeObjectRelease();
            swift_release();
            outlined init with take of NodePersonality(&v316, &v397);
            outlined release of NodePersonality(&v397);
            outlined release of [Input]((uint64_t)&v437);
            v396 = v317;
            outlined release of [Input]((uint64_t)&v396);
            swift_release();
            outlined consume of NodePersonality(v167);
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
          while (1)
          {
            v99 = *(v97 - 6);
            v98 = (char *)*(v97 - 5);
            v101 = *(v97 - 4);
            v100 = *(v97 - 3);
            v102 = *(v97 - 2);
            v103 = *((_BYTE *)v97 - 8);
            v104 = *v97;
            if (v101 == 1701603686 && v100 == 0xE400000000000000)
            {
              v109 = 0xE400000000000000;
              goto LABEL_68;
            }
            v506 = *v97;
            v106 = v98;
            v107 = v97;
            v108 = v100;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              break;
            v97 = v107 + 7;
            if (!--v96)
            {
              v445 = v99;
              v446 = v106;
              v447 = v101;
              v448 = v108;
              v449 = v102;
              v450 = v103;
              v451 = v506;
              goto LABEL_94;
            }
          }
          v98 = v106;
          v109 = v108;
          v104 = v506;
LABEL_68:
          v445 = v99;
          v446 = v98;
          v447 = v101;
          v448 = v109;
          v449 = v102;
          v450 = v103;
          v451 = v104;
          v110 = *((_QWORD *)&v325 + 1);
          v111 = *(_QWORD *)(*((_QWORD *)&v325 + 1) + 16);
          swift_retain();
          v273 = v109;
          swift_bridgeObjectRetain();
          if (!v111)
          {
LABEL_95:
            outlined init with take of NodePersonality(&v325, &v404);
            v403 = v326;
            v294._countAndFlagsBits = v253;
            v294._object = v268;
            v295 = v269;
            v296 = v270;
            countAndFlagsBits = v271._countAndFlagsBits;
            v298 = (char)v271._object;
            v299 = 1701603686;
            v300 = 0xE400000000000000;
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v294);
            outlined init with take of UserGraphError.ErrorType((__int128 *)&v294._countAndFlagsBits, (uint64_t)&v301);
            lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
            v313 = 0uLL;
            swift_allocError();
            *v178 = v301;
            v179 = v305;
            v181 = v302;
            v180 = v303;
            v178[3] = v304;
            v178[4] = v179;
            v178[1] = v181;
            v178[2] = v180;
            v182 = v309;
            v184 = v306;
            v183 = v307;
            v178[7] = v308;
            v178[8] = v182;
            v178[5] = v184;
            v178[6] = v183;
            v185 = v313;
            v187 = v310;
            v186 = v311;
            v178[11] = v312;
            v178[12] = v185;
            v178[9] = v187;
            v178[10] = v186;
            swift_bridgeObjectRetain();
            outlined retain of NodePersonality(&v404);
            outlined retain of [Input]((uint64_t)&v403);
            swift_willThrow();
            (*(void (**)(char *, uint64_t))(v288 + 8))(v291, v285);
            swift_bridgeObjectRelease();
            swift_release();
            outlined release of NodePersonality(&v404);
            swift_bridgeObjectRelease();
            outlined release of [Input]((uint64_t)&v403);
            swift_bridgeObjectRelease();
            swift_release();
            outlined init with take of NodePersonality(&v316, &v402);
            outlined release of NodePersonality(&v402);
            outlined release of [Input]((uint64_t)&v437);
            v401 = v317;
            outlined release of [Input]((uint64_t)&v401);
            swift_release();
            outlined consume of NodePersonality(v282);
            goto LABEL_89;
          }
          v272 = v98;
          v274 = v110;
          v112 = (_QWORD *)(v110 + 80);
          while (1)
          {
            v113 = *(v112 - 6);
            v114 = *(v112 - 5);
            v116 = *(v112 - 4);
            v115 = *(v112 - 3);
            v117 = *(v112 - 2);
            v118 = *((_BYTE *)v112 - 8);
            v119 = *v112;
            if (v116 == 1701603686 && v115 == 0xE400000000000000)
            {
              v121 = 0xE400000000000000;
              goto LABEL_79;
            }
            v506 = *(v112 - 6);
            v121 = v115;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              break;
            v112 += 7;
            if (!--v111)
            {
              v452 = v506;
              v453 = v114;
              v454 = v116;
              v455 = v121;
              v456 = v117;
              v457 = v118;
              v458 = v119;
              goto LABEL_95;
            }
          }
          v113 = v506;
LABEL_79:
          v452 = v113;
          v453 = v114;
          v454 = v116;
          v455 = v121;
          v456 = v117;
          v457 = v118;
          v458 = v119;
          swift_retain();
          swift_bridgeObjectRetain();
          v122 = v254;
          Graph.convertFilenameInput(_:movingTo:textureAssignments:customUniformsType:)(&v445, (unint64_t)&v452, v275, v276);
          if (v122)
          {
            (*(void (**)(char *, uint64_t))(v288 + 8))(v291, v285);
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            outlined init with take of NodePersonality(&v325, &v436);
            outlined release of NodePersonality(&v436);
            swift_bridgeObjectRelease();
            v435 = v326;
            outlined release of [Input]((uint64_t)&v435);
            swift_bridgeObjectRelease();
            swift_release();
            outlined init with take of NodePersonality(&v316, &v434);
            outlined release of NodePersonality(&v434);
            outlined release of [Input]((uint64_t)&v437);
            v433 = v317;
            v156 = (uint64_t *)&v433;
LABEL_92:
            outlined release of [Input]((uint64_t)v156);
            swift_release();
            outlined consume of NodePersonality(v282);
            goto LABEL_89;
          }
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          v123 = v286;
          specialized Sequence.first(where:)((uint64_t)v286, 0x746C7561666564, 0xE700000000000000, v330);
          outlined init with take of MetalFunctionNode?((uint64_t)v330, (uint64_t)v361, (uint64_t *)&demangling cache variable for type metadata for Input?);
          if (!*((_QWORD *)&v361[0] + 1))
          {
            v201 = v282;
            v294._countAndFlagsBits = v282;
            v294._object = v123;
            v295 = v281;
            v296 = v289;
            countAndFlagsBits = v284;
            v298 = v283 & 1;
            v299 = 0x746C7561666564;
            v300 = 0xE700000000000000;
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v294);
            outlined init with take of UserGraphError.ErrorType((__int128 *)&v294._countAndFlagsBits, (uint64_t)&v301);
            lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
            v313 = 0uLL;
            swift_allocError();
            *v202 = v301;
            v203 = v305;
            v205 = v302;
            v204 = v303;
            v202[3] = v304;
            v202[4] = v203;
            v202[1] = v205;
            v202[2] = v204;
            v206 = v309;
            v208 = v306;
            v207 = v307;
            v202[7] = v308;
            v202[8] = v206;
            v202[5] = v208;
            v202[6] = v207;
            v209 = v313;
            v211 = v310;
            v210 = v311;
            v202[11] = v312;
            v202[12] = v209;
            v202[9] = v211;
            v202[10] = v210;
            swift_bridgeObjectRetain();
            outlined copy of NodePersonality(v201);
            swift_bridgeObjectRetain();
            swift_willThrow();
            (*(void (**)(char *, uint64_t))(v288 + 8))(v291, v285);
            outlined init with take of NodePersonality(&v325, &v432);
            outlined release of NodePersonality(&v432);
            swift_bridgeObjectRelease();
            v431 = v326;
            outlined release of [Input]((uint64_t)&v431);
            swift_bridgeObjectRelease();
            swift_release();
            outlined init with take of NodePersonality(&v316, &v430);
            outlined release of NodePersonality(&v430);
            outlined release of [Input]((uint64_t)&v437);
            v429 = v317;
            outlined release of [Input]((uint64_t)&v429);
            swift_release();
            outlined consume of NodePersonality(v201);
            goto LABEL_89;
          }
          v363 = v361[0];
          v364[0] = v361[1];
          v364[1] = v361[2];
          v365 = v362;
          specialized Sequence.first(where:)(v274, 0x56746C7561666564, 0xEA00000000006C61, v331);
          outlined init with take of MetalFunctionNode?((uint64_t)v331, (uint64_t)v356, (uint64_t *)&demangling cache variable for type metadata for Input?);
          if (!*((_QWORD *)&v356[0] + 1))
          {
            outlined init with take of NodePersonality(&v325, &v428);
            v427 = v326;
            v294._countAndFlagsBits = v253;
            v294._object = v268;
            v295 = v269;
            v296 = v270;
            countAndFlagsBits = v271._countAndFlagsBits;
            v298 = (char)v271._object;
            v299 = 0x56746C7561666564;
            v300 = 0xEA00000000006C61;
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v294);
            outlined init with take of UserGraphError.ErrorType((__int128 *)&v294._countAndFlagsBits, (uint64_t)&v301);
            lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
            v313 = 0uLL;
            swift_allocError();
            *v212 = v301;
            v213 = v305;
            v215 = v302;
            v214 = v303;
            v212[3] = v304;
            v212[4] = v213;
            v212[1] = v215;
            v212[2] = v214;
            v216 = v309;
            v218 = v306;
            v217 = v307;
            v212[7] = v308;
            v212[8] = v216;
            v212[5] = v218;
            v212[6] = v217;
            v219 = v313;
            v221 = v310;
            v220 = v311;
            v212[11] = v312;
            v212[12] = v219;
            v212[9] = v221;
            v212[10] = v220;
            swift_bridgeObjectRetain();
            outlined retain of NodePersonality(&v428);
            outlined retain of [Input]((uint64_t)&v427);
            swift_willThrow();
            (*(void (**)(char *, uint64_t))(v288 + 8))(v291, v285);
            swift_release();
            v381 = *v264;
            outlined release of String((uint64_t)&v381);
            outlined release of NodePersonality(&v428);
            swift_bridgeObjectRelease();
            outlined release of [Input]((uint64_t)&v427);
            swift_bridgeObjectRelease();
            swift_release();
            outlined init with take of NodePersonality(&v316, &v426);
            outlined release of NodePersonality(&v426);
            outlined release of [Input]((uint64_t)&v437);
            v425 = v317;
            outlined release of [Input]((uint64_t)&v425);
            swift_release();
            outlined consume of NodePersonality(v282);
            goto LABEL_89;
          }
          v358 = v356[0];
          v359[0] = v356[1];
          v359[1] = v356[2];
          v360 = v357;
          Graph.moveEdge(from:to:)((uint64_t)&v363, &v358);
          swift_release();
          v382 = *v263;
          outlined release of String((uint64_t)&v382);
          swift_release();
          v380 = *v264;
          outlined release of String((uint64_t)&v380);
          specialized Sequence.first(where:)((uint64_t)v123, 0x64726F6F63786574, 0xE800000000000000, v332);
          outlined init with take of MetalFunctionNode?((uint64_t)v332, (uint64_t)v351, (uint64_t *)&demangling cache variable for type metadata for Input?);
          v21 = v282;
          v18 = v285;
          if (!*((_QWORD *)&v351[0] + 1))
          {
            v294._countAndFlagsBits = v282;
            v294._object = v123;
            v295 = v281;
            v296 = v289;
            countAndFlagsBits = v284;
            v298 = v283 & 1;
            v299 = 0x64726F6F63786574;
            v300 = 0xE800000000000000;
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v294);
            outlined init with take of UserGraphError.ErrorType((__int128 *)&v294._countAndFlagsBits, (uint64_t)&v301);
            lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
            v313 = 0uLL;
            swift_allocError();
            *v222 = v301;
            v223 = v305;
            v225 = v302;
            v224 = v303;
            v222[3] = v304;
            v222[4] = v223;
            v222[1] = v225;
            v222[2] = v224;
            v226 = v309;
            v228 = v306;
            v227 = v307;
            v222[7] = v308;
            v222[8] = v226;
            v222[5] = v228;
            v222[6] = v227;
            v229 = v313;
            v231 = v310;
            v230 = v311;
            v222[11] = v312;
            v222[12] = v229;
            v222[9] = v231;
            v222[10] = v230;
            swift_bridgeObjectRetain();
            outlined copy of NodePersonality(v21);
            swift_bridgeObjectRetain();
            swift_willThrow();
            (*(void (**)(char *, uint64_t))(v288 + 8))(v291, v18);
            outlined init with take of NodePersonality(&v325, &v424);
            outlined release of NodePersonality(&v424);
            swift_bridgeObjectRelease();
            v423 = v326;
            outlined release of [Input]((uint64_t)&v423);
            swift_bridgeObjectRelease();
            swift_release();
            outlined init with take of NodePersonality(&v316, &v422);
            outlined release of NodePersonality(&v422);
            outlined release of [Input]((uint64_t)&v437);
            v421 = v317;
            v134 = (uint64_t *)&v421;
            goto LABEL_87;
          }
          v353 = v351[0];
          v354[0] = v351[1];
          v354[1] = v351[2];
          v355 = v352;
          specialized Sequence.first(where:)(v274, 0x64726F6F63786574, 0xE800000000000000, v333);
          outlined init with take of MetalFunctionNode?((uint64_t)v333, (uint64_t)v346, (uint64_t *)&demangling cache variable for type metadata for Input?);
          if (!*((_QWORD *)&v346[0] + 1))
          {
            outlined init with take of NodePersonality(&v325, &v420);
            v419 = v326;
            v294._countAndFlagsBits = v253;
            v294._object = v268;
            v295 = v269;
            v296 = v270;
            countAndFlagsBits = v271._countAndFlagsBits;
            v298 = (char)v271._object;
            v299 = 0x64726F6F63786574;
            v300 = 0xE800000000000000;
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v294);
            outlined init with take of UserGraphError.ErrorType((__int128 *)&v294._countAndFlagsBits, (uint64_t)&v301);
            lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
            v313 = 0uLL;
            swift_allocError();
            *v232 = v301;
            v233 = v305;
            v235 = v302;
            v234 = v303;
            v232[3] = v304;
            v232[4] = v233;
            v232[1] = v235;
            v232[2] = v234;
            v236 = v309;
            v238 = v306;
            v237 = v307;
            v232[7] = v308;
            v232[8] = v236;
            v232[5] = v238;
            v232[6] = v237;
            v239 = v313;
            v241 = v310;
            v240 = v311;
            v232[11] = v312;
            v232[12] = v239;
            v232[9] = v241;
            v232[10] = v240;
            swift_bridgeObjectRetain();
            outlined retain of NodePersonality(&v420);
            outlined retain of [Input]((uint64_t)&v419);
            swift_willThrow();
            (*(void (**)(char *, uint64_t))(v288 + 8))(v291, v18);
            swift_release();
            v384 = *v262;
            outlined release of String((uint64_t)&v384);
            outlined release of NodePersonality(&v420);
            swift_bridgeObjectRelease();
            outlined release of [Input]((uint64_t)&v419);
            swift_bridgeObjectRelease();
            swift_release();
            outlined init with take of NodePersonality(&v316, &v418);
            outlined release of NodePersonality(&v418);
            outlined release of [Input]((uint64_t)&v437);
            v417 = v317;
            v134 = (uint64_t *)&v417;
            goto LABEL_87;
          }
          v348 = v346[0];
          v349[0] = v346[1];
          v349[1] = v346[2];
          v350 = v347;
          Graph.moveEdge(from:to:)((uint64_t)&v353, &v348);
          swift_release();
          v385 = *v261;
          outlined release of String((uint64_t)&v385);
          swift_release();
          v383 = *v262;
          outlined release of String((uint64_t)&v383);
          ShaderGraphNode.out.getter((uint64_t)v334);
          specialized Sequence.first(where:)(v274, 0x72656C706D6173, 0xE700000000000000, v336);
          outlined init with take of MetalFunctionNode?((uint64_t)v336, (uint64_t)v341, (uint64_t *)&demangling cache variable for type metadata for Input?);
          if (!*((_QWORD *)&v341[0] + 1))
          {
            outlined init with take of NodePersonality(&v325, v416);
            v415 = v326;
            v294._countAndFlagsBits = v253;
            v294._object = v268;
            v295 = v269;
            v296 = v270;
            countAndFlagsBits = v271._countAndFlagsBits;
            v298 = (char)v271._object;
            v299 = 0x72656C706D6173;
            v300 = 0xE700000000000000;
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v294);
            outlined init with take of UserGraphError.ErrorType((__int128 *)&v294._countAndFlagsBits, (uint64_t)&v301);
            lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
            v313 = 0uLL;
            swift_allocError();
            *v242 = v301;
            v243 = v305;
            v245 = v302;
            v244 = v303;
            v242[3] = v304;
            v242[4] = v243;
            v242[1] = v245;
            v242[2] = v244;
            v246 = v309;
            v248 = v306;
            v247 = v307;
            v242[7] = v308;
            v242[8] = v246;
            v242[5] = v248;
            v242[6] = v247;
            v249 = v313;
            v251 = v310;
            v250 = v311;
            v242[11] = v312;
            v242[12] = v249;
            v242[9] = v251;
            v242[10] = v250;
            swift_bridgeObjectRetain();
            outlined retain of NodePersonality(v416);
            outlined retain of [Input]((uint64_t)&v415);
            swift_willThrow();
            (*(void (**)(char *, uint64_t))(v288 + 8))(v291, v18);
            swift_release();
            v414 = *v259;
            outlined release of String((uint64_t)&v414);
            outlined release of NodePersonality(v416);
            swift_bridgeObjectRelease();
            outlined release of [Input]((uint64_t)&v415);
            swift_bridgeObjectRelease();
            swift_release();
            outlined init with take of NodePersonality(&v316, &v413);
            outlined release of NodePersonality(&v413);
            outlined release of [Input]((uint64_t)&v437);
            v412 = v317;
            v134 = (uint64_t *)&v412;
LABEL_87:
            outlined release of [Input]((uint64_t)v134);
            swift_release();
LABEL_88:
            outlined consume of NodePersonality(v21);
LABEL_89:
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
          v343 = v341[0];
          v344[0] = v341[1];
          v344[1] = v341[2];
          v345 = v342;
          Graph.connect(_:to:)((uint64_t)v334, (unint64_t)&v343);
          swift_release();
          v386 = *v258;
          outlined release of String((uint64_t)&v386);
          swift_release();
          v411 = *v259;
          outlined release of String((uint64_t)&v411);
          ShaderGraphNode.out.getter((uint64_t)v337);
          ShaderGraphNode.out.getter((uint64_t)v339);
          v4 = 0;
          Graph.moveEdges(from:to:)((uint64_t)v337, (uint64_t)v339);
          swift_release();
          v410[0] = *v256;
          outlined release of String((uint64_t)v410);
          swift_release();
          v409 = *v257;
          outlined release of String((uint64_t)&v409);
          outlined init with take of NodePersonality(&v325, &v408);
          outlined release of NodePersonality(&v408);
          swift_bridgeObjectRelease();
          v407 = v326;
          outlined release of [Input]((uint64_t)&v407);
          swift_bridgeObjectRelease();
          swift_release();
          outlined init with take of NodePersonality(&v316, &v406);
          outlined release of NodePersonality(&v406);
          outlined release of [Input]((uint64_t)&v437);
          v405 = v317;
          outlined release of [Input]((uint64_t)&v405);
          swift_release();
        }
      }
      outlined consume of NodePersonality(v21);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      dispatch thunk of IteratorProtocol.next()();
      v20 = (_QWORD *)*((_QWORD *)&v301 + 1);
      v21 = v301;
      v23 = *((_QWORD *)&v302 + 1);
      v22 = (char *)v302;
      v24 = v303;
      v25 = BYTE8(v303);
    }
    while (*((_QWORD *)&v301 + 1));
  }
  return (*(uint64_t (**)(char *, uint64_t))(v288 + 8))(v291, v18);
}

uint64_t Graph.transformRealityKitImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD v12[3];
  __int128 v13;
  char v14;
  uint64_t v15;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *))(v3 + 16))((char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = Sequence.filter(_:)();
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v15 = v4;
    for (i = v4 + 40; ; i += 48)
    {
      v8 = *(_QWORD *)(i - 8);
      v7 = *(_QWORD *)i;
      v9 = *(_QWORD *)(i + 8);
      v10 = *(_BYTE *)(i + 32);
      v12[0] = v8;
      v12[1] = v7;
      v12[2] = v9;
      v13 = *(_OWORD *)(i + 16);
      v14 = v10;
      outlined copy of NodePersonality(v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      closure #1 in Graph.transformRealityKitImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)((uint64_t)v12);
      if (v1)
        break;
      outlined consume of NodePersonality(v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
    outlined consume of NodePersonality(v8);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t *ShaderGraphNode.realityKitBackgroundBlurNodes.unsafeMutableAddressor()
{
  if (one-time initialization token for realityKitBackgroundBlurNodes != -1)
    swift_once();
  return &static ShaderGraphNode.realityKitBackgroundBlurNodes;
}

unint64_t specialized MutableCollection.swapAt(_:_:)(unint64_t result, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  if (result != a2)
  {
    v3 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v4 = *(_QWORD **)v2;
      v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
      if (v5 > result)
      {
        if (v5 > a2)
        {
          v7 = &v4[2 * result + 4];
          v8 = *v7;
          v9 = v7[1];
          v10 = &v4[2 * a2 + 4];
          v11 = *v10;
          v12 = v10[1];
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v4);
            v4 = (_QWORD *)result;
          }
          if (v4[2] > v3)
          {
            v13 = &v4[2 * v3 + 4];
            *v13 = v11;
            v13[1] = v12;
            swift_release();
            result = swift_release();
            if (v4[2] > a2)
            {
              v14 = &v4[2 * a2 + 4];
              *v14 = v8;
              v14[1] = v9;
              swift_release();
              result = swift_release();
              *(_QWORD *)v2 = v4;
              return result;
            }
LABEL_15:
            __break(1u);
            return result;
          }
LABEL_14:
          __break(1u);
          goto LABEL_15;
        }
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (result != a2)
  {
    v3 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v4 = *v2;
      v5 = *(_QWORD *)(*v2 + 16);
      if (v5 > result)
      {
        if (v5 > a2)
        {
          v20 = v2;
          v7 = (uint64_t *)(v4 + 32 + 48 * result);
          v8 = *v7;
          v9 = v7[1];
          v10 = v7[2];
          v11 = v7[3];
          v12 = v7[4];
          v13 = (uint64_t *)(v4 + 32 + 48 * a2);
          v23 = *v13;
          v24 = v7[5];
          v26 = v13[1];
          v25 = v13[2];
          v15 = v13[4];
          v14 = v13[5];
          v22 = v13[3];
          swift_retain();
          v21 = v15;
          v16 = v8;
          v17 = v4;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v4);
            v17 = result;
          }
          if (*(_QWORD *)(v17 + 16) > v3)
          {
            v18 = (_QWORD *)(v17 + 32 + 48 * v3);
            *v18 = v23;
            v18[1] = v26;
            v18[2] = v25;
            v18[3] = v22;
            v18[4] = v21;
            v18[5] = v14;
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            result = swift_release();
            if (*(_QWORD *)(v17 + 16) > a2)
            {
              v19 = (_QWORD *)(v17 + 32 + 48 * a2);
              *v19 = v16;
              v19[1] = v9;
              v19[2] = v10;
              v19[3] = v11;
              v19[4] = v12;
              v19[5] = v24;
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              result = swift_release();
              *v20 = v17;
              return result;
            }
LABEL_15:
            __break(1u);
            return result;
          }
LABEL_14:
          __break(1u);
          goto LABEL_15;
        }
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

uint64_t specialized OrderedSet._regenerateHashTable()()
{
  return specialized OrderedSet._regenerateHashTable()((uint64_t (*)(uint64_t, int64_t, _QWORD, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

{
  return specialized OrderedSet._regenerateHashTable()((uint64_t (*)(uint64_t, int64_t, _QWORD, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

{
  return specialized OrderedSet._regenerateHashTable()((uint64_t (*)(uint64_t, int64_t, _QWORD, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

{
  return specialized OrderedSet._regenerateHashTable()((uint64_t (*)(uint64_t, int64_t, _QWORD, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

{
  return specialized OrderedSet._regenerateHashTable()((uint64_t (*)(uint64_t, int64_t, _QWORD, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

uint64_t specialized OrderedSet._regenerateHashTable()(uint64_t (*a1)(uint64_t, int64_t, _QWORD, uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t result;

  v3 = *v1;
  v4 = v1[1];
  if (*v1)
  {
    swift_beginAccess();
    v5 = *(_QWORD *)(v3 + 24) & 0x3FLL;
    v6 = *(_QWORD *)(v4 + 16);
    if (v5)
      goto LABEL_7;
  }
  else
  {
    v5 = 0;
    v6 = *(_QWORD *)(v4 + 16);
  }
  if (v6 < 0x10)
  {
    v7 = 0;
    goto LABEL_11;
  }
LABEL_7:
  v8 = specialized static _HashTable.scale(forCapacity:)(v6);
  if (v5 <= v8)
    v9 = v8;
  else
    v9 = v5;
  v7 = a1(v4, v9, 0, v5);
LABEL_11:
  result = swift_release();
  *v1 = v7;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Graph.insertConversionFromFloatColorToHalfColor(for:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;

  v3 = v1;
  if ((unint64_t)a1._rawValue >> 62)
    goto LABEL_13;
  v5 = *(_QWORD *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    v6 = 4;
    while (1)
    {
      v7 = ((unint64_t)a1._rawValue & 0xC000000000000001) != 0
         ? (id)MEMORY[0x24954B748](v6 - 4, a1._rawValue)
         : *((id *)a1._rawValue + v6);
      v8 = v7;
      v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1))
        break;
      v10 = v7;
      closure #1 in Graph.insertConversionFromFloatColorToHalfColor(for:)((uint64_t *)&v10, v3);
      if (v2)
      {
        swift_bridgeObjectRelease();

        return;
      }

      ++v6;
      if (v9 == v5)
        goto LABEL_10;
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_bridgeObjectRelease();
}

uint64_t specialized OrderedSet.init<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)();
  v4 = specialized static _HashTable.create<A>(untilFirstDuplicateIn:scale:reservedScale:)((uint64_t)&v10, a1, 0, 1, v3);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = v10;
  if (v10 == v5)
    return v4;
  if ((v10 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v5 < v10)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    swift_bridgeObjectRelease();
    result = specialized _copyCollectionToContiguousArray<A>(_:)(a1, v1, 0, (2 * v6) | 1);
    goto LABEL_9;
  }
  v1 = a1 + 32;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  v7 = swift_dynamicCastClass();
  if (!v7)
  {
    swift_bridgeObjectRelease();
    v7 = MEMORY[0x24BEE4AF8];
  }
  v8 = *(_QWORD *)(v7 + 16);
  swift_release();
  if (v8 != v6)
    goto LABEL_14;
  result = swift_dynamicCastClass();
  if (!result)
  {
    swift_bridgeObjectRelease();
    result = MEMORY[0x24BEE4AF8];
  }
LABEL_9:
  v11 = v4;
  v12 = result;
  if (*(_QWORD *)(a1 + 16) >= v5)
  {
    swift_retain();
    specialized OrderedSet.append<A>(contentsOf:)(a1, v1, v6, (2 * v5) | 1);
    swift_bridgeObjectRelease();
    swift_release();
    return v11;
  }
  __break(1u);
  return result;
}

{
  return specialized OrderedSet.init<A>(_:)(a1, specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:), (uint64_t (*)(BOOL, unint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), (void (*)(uint64_t, uint64_t, unint64_t, uint64_t))specialized OrderedSet.append<A>(contentsOf:));
}

{
  return specialized OrderedSet.init<A>(_:)(a1, specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:), (uint64_t (*)(BOOL, unint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), (void (*)(uint64_t, uint64_t, unint64_t, uint64_t))specialized OrderedSet.append<A>(contentsOf:));
}

{
  uint64_t v1;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;

  v3 = specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)();
  v4 = specialized static _HashTable.create<A>(untilFirstDuplicateIn:scale:reservedScale:)(&v11, a1, 0, 1, v3);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = v11;
  if (v11 == v5)
    return (uint64_t)v4;
  if ((v11 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v5 < v11)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    swift_bridgeObjectRelease();
    v9 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, v1, 0, (2 * v6) | 1);
    goto LABEL_9;
  }
  v1 = a1 + 32;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v7 = swift_dynamicCastClass();
  if (!v7)
  {
    swift_bridgeObjectRelease();
    v7 = MEMORY[0x24BEE4AF8];
  }
  v8 = *(_QWORD *)(v7 + 16);
  swift_release();
  if (v8 != v6)
    goto LABEL_14;
  v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x24BEE4AF8];
  }
LABEL_9:
  result = swift_bridgeObjectRelease();
  v12 = v4;
  v13 = v9;
  if (*(_QWORD *)(a1 + 16) >= v5)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    specialized OrderedSet.append<A>(contentsOf:)(a1, v1, v6, (2 * v5) | 1);
    swift_bridgeObjectRelease_n();
    swift_release();
    return (uint64_t)v12;
  }
  __break(1u);
  return result;
}

uint64_t specialized OrderedSet.init<A>(_:)(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(BOOL, unint64_t, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, _QWORD, uint64_t), void (*a5)(uint64_t, uint64_t, unint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v10 = a2();
  v11 = specialized static _HashTable.create<A>(untilFirstDuplicateIn:scale:reservedScale:)((uint64_t)&v18, a1, 0, 1, v10, a3);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = v18;
  if (v18 == v12)
    return v11;
  if ((v18 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v12 < v18)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    swift_release();
    v16 = a4(a1, v5, 0, (2 * v13) | 1);
    goto LABEL_9;
  }
  v5 = a1 + 32;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_retain_n();
  v14 = swift_dynamicCastClass();
  if (!v14)
  {
    swift_release();
    v14 = MEMORY[0x24BEE4AF8];
  }
  v15 = *(_QWORD *)(v14 + 16);
  swift_release();
  if (v15 != v13)
    goto LABEL_14;
  v16 = swift_dynamicCastClass();
  if (!v16)
  {
    swift_release();
    v16 = MEMORY[0x24BEE4AF8];
  }
LABEL_9:
  result = swift_release();
  v19 = v11;
  v20 = v16;
  if (*(_QWORD *)(a1 + 16) >= v12)
  {
    swift_retain();
    swift_retain();
    a5(a1, v5, v13, (2 * v12) | 1);
    swift_release_n();
    swift_release();
    return v19;
  }
  __break(1u);
  return result;
}

uint64_t specialized OrderedSet.init<A>(_:)(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t result;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = (unint64_t *)specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)();
  specialized static _HashTable.create<A>(untilFirstDuplicateIn:scale:reservedScale:)((uint64_t)&v34, a1, 0, 1, v4, (void (*)(_QWORD))type metadata accessor for SGEdge);
  v6 = v5;
  v7 = a1 >> 62;
  if (a1 >> 62)
  {
    if ((a1 & 0x8000000000000000) != 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v9 = v34;
    if (v34 == v8)
    {
      v30 = swift_bridgeObjectRetain();
      specialized _copyCollectionToContiguousArray<A>(_:)(v30);
      swift_bridgeObjectRelease();
      goto LABEL_4;
    }
    if ((v34 & 0x8000000000000000) == 0)
    {
      swift_bridgeObjectRetain();
      v31 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v31 < 0)
      {
        __break(1u);
        return result;
      }
      swift_bridgeObjectRetain();
      v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v10 >= v9)
        goto LABEL_7;
      goto LABEL_44;
    }
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v9 = v34;
  if (v34 == v8)
  {
    swift_bridgeObjectRetain();
LABEL_4:
    swift_bridgeObjectRelease();
    return v6;
  }
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v34 < 0)
    goto LABEL_45;
  if (v8 < v34)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
LABEL_7:
  v11 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0 && v9)
  {
    type metadata accessor for SGEdge();
    v12 = 0;
    do
    {
      v13 = v12 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v12);
      v12 = v13;
    }
    while (v9 != v13);
  }
  if (v7)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.subscript.getter();
    v14 = v15;
    v2 = v16;
    v1 = v17;
    swift_bridgeObjectRelease();
    if ((v1 & 1) == 0)
      goto LABEL_15;
  }
  else
  {
    v10 = a1 & 0xFFFFFFFFFFFFFF8;
    v14 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
    v1 = (2 * v9) | 1;
    swift_bridgeObjectRetain();
    v2 = 0;
  }
  v32 = v14;
  v33 = a1 & 0xC000000000000001;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  v19 = swift_dynamicCastClass();
  if (!v19)
  {
    swift_unknownObjectRelease();
    v19 = MEMORY[0x24BEE4AF8];
  }
  v20 = *(_QWORD *)(v19 + 16);
  swift_release();
  if (__OFSUB__(v1 >> 1, v2))
    goto LABEL_49;
  if (v20 != (v1 >> 1) - v2)
    goto LABEL_50;
  v18 = swift_dynamicCastClass();
  v11 = a1 & 0xC000000000000001;
  if (!v18)
  {
    swift_unknownObjectRelease();
    v18 = MEMORY[0x24BEE4AF8];
  }
  while (1)
  {
    swift_unknownObjectRelease();
    v35 = v6;
    v36 = v18;
    if (v8 < v9)
    {
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    if (v7)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
    }
    if (v10 < v8)
      goto LABEL_47;
    if (!v11)
      goto LABEL_31;
    if (v9 < v8)
      break;
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    swift_unknownObjectRelease();
    v14 = v32;
    v11 = v33;
LABEL_15:
    v18 = specialized _copyCollectionToContiguousArray<A>(_:)(v10, v14, v2, v1);
  }
  type metadata accessor for SGEdge();
  v21 = v9;
  do
  {
    v22 = v21 + 1;
    _ArrayBuffer._typeCheckSlowPath(_:)(v21);
    v21 = v22;
  }
  while (v8 != v22);
LABEL_31:
  if (v7)
  {
    swift_bridgeObjectRetain();
    v23 = _CocoaArrayWrapper.subscript.getter();
    v24 = v26;
    v9 = v27;
    v25 = v28;
    swift_bridgeObjectRelease();
  }
  else
  {
    v23 = a1 & 0xFFFFFFFFFFFFFF8;
    v24 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
    v25 = (2 * v8) | 1;
    swift_bridgeObjectRetain();
  }
  specialized OrderedSet.append<A>(contentsOf:)(v23, v24, v9, v25);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v35;
}

{
  unint64_t v1;
  uint64_t v2;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t result;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = (unint64_t *)specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)();
  specialized static _HashTable.create<A>(untilFirstDuplicateIn:scale:reservedScale:)((uint64_t)&v34, a1, 0, 1, v4, (void (*)(_QWORD))type metadata accessor for SGNode);
  v6 = v5;
  v7 = a1 >> 62;
  if (a1 >> 62)
  {
    if ((a1 & 0x8000000000000000) != 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v9 = v34;
    if (v34 == v8)
    {
      v30 = swift_bridgeObjectRetain();
      specialized _copyCollectionToContiguousArray<A>(_:)(v30);
      swift_bridgeObjectRelease();
      goto LABEL_4;
    }
    if ((v34 & 0x8000000000000000) == 0)
    {
      swift_bridgeObjectRetain();
      v31 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v31 < 0)
      {
        __break(1u);
        return result;
      }
      swift_bridgeObjectRetain();
      v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v10 >= v9)
        goto LABEL_7;
      goto LABEL_44;
    }
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v9 = v34;
  if (v34 == v8)
  {
    swift_bridgeObjectRetain();
LABEL_4:
    swift_bridgeObjectRelease();
    return v6;
  }
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v34 < 0)
    goto LABEL_45;
  if (v8 < v34)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
LABEL_7:
  v11 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0 && v9)
  {
    type metadata accessor for SGNode();
    v12 = 0;
    do
    {
      v13 = v12 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v12);
      v12 = v13;
    }
    while (v9 != v13);
  }
  if (v7)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.subscript.getter();
    v14 = v15;
    v2 = v16;
    v1 = v17;
    swift_bridgeObjectRelease();
    if ((v1 & 1) == 0)
      goto LABEL_15;
  }
  else
  {
    v10 = a1 & 0xFFFFFFFFFFFFFF8;
    v14 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
    v1 = (2 * v9) | 1;
    swift_bridgeObjectRetain();
    v2 = 0;
  }
  v32 = v14;
  v33 = a1 & 0xC000000000000001;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  v19 = swift_dynamicCastClass();
  if (!v19)
  {
    swift_unknownObjectRelease();
    v19 = MEMORY[0x24BEE4AF8];
  }
  v20 = *(_QWORD *)(v19 + 16);
  swift_release();
  if (__OFSUB__(v1 >> 1, v2))
    goto LABEL_49;
  if (v20 != (v1 >> 1) - v2)
    goto LABEL_50;
  v18 = swift_dynamicCastClass();
  v11 = a1 & 0xC000000000000001;
  if (!v18)
  {
    swift_unknownObjectRelease();
    v18 = MEMORY[0x24BEE4AF8];
  }
  while (1)
  {
    swift_unknownObjectRelease();
    v35 = v6;
    v36 = v18;
    if (v8 < v9)
    {
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    if (v7)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
    }
    if (v10 < v8)
      goto LABEL_47;
    if (!v11)
      goto LABEL_31;
    if (v9 < v8)
      break;
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    swift_unknownObjectRelease();
    v14 = v32;
    v11 = v33;
LABEL_15:
    v18 = specialized _copyCollectionToContiguousArray<A>(_:)(v10, v14, v2, v1);
  }
  type metadata accessor for SGNode();
  v21 = v9;
  do
  {
    v22 = v21 + 1;
    _ArrayBuffer._typeCheckSlowPath(_:)(v21);
    v21 = v22;
  }
  while (v8 != v22);
LABEL_31:
  if (v7)
  {
    swift_bridgeObjectRetain();
    v23 = _CocoaArrayWrapper.subscript.getter();
    v24 = v26;
    v9 = v27;
    v25 = v28;
    swift_bridgeObjectRelease();
  }
  else
  {
    v23 = a1 & 0xFFFFFFFFFFFFFF8;
    v24 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
    v25 = (2 * v8) | 1;
    swift_bridgeObjectRetain();
  }
  specialized OrderedSet.append<A>(contentsOf:)(v23, v24, v9, v25);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v35;
}

uint64_t specialized static _HashTable.create<A>(untilFirstDuplicateIn:scale:reservedScale:)(uint64_t result, uint64_t a2, int64_t a3, char a4, uint64_t a5)
{
  unint64_t v6;
  double v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  char v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v6 = *(_QWORD *)(a2 + 16);
  v32 = (_QWORD *)result;
  if (v6 < 0x10)
  {
    v9 = 0;
  }
  else
  {
    v7 = ceil((double)(uint64_t)v6 / 0.75);
    if ((~*(_QWORD *)&v7 & 0x7FF0000000000000) == 0)
    {
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    if (v7 <= -9.22337204e18)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    if (v7 >= 9.22337204e18)
    {
LABEL_56:
      __break(1u);
      return result;
    }
    if ((uint64_t)(v6 + 1) > (uint64_t)v7)
      v8 = v6 + 1;
    else
      v8 = (uint64_t)v7;
    v9 = 64 - __clz(v8 - 1);
  }
  if (v9 <= a3)
    v10 = a3;
  else
    v10 = v9;
  if ((a4 & 1) == 0)
    v9 = v10;
  if (v9 <= a5)
    v11 = a5;
  else
    v11 = v9;
  if (v11 > 4)
  {
    v30 = specialized _HashTable.init(scale:reservedScale:)(v11, a5);
    specialized _HashTable.UnsafeHandle.fill<A>(untilFirstDuplicateIn:)(&v41, a2, (uint64_t *)(v30 + 16), v30 + 32);
    *v32 = v41;
    return v30;
  }
  if (v6 < 2)
    goto LABEL_51;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0, MEMORY[0x24BEE4AF8]);
  v12 = (_QWORD *)result;
  v13 = 0;
  v31 = v6;
  do
  {
    if (v13 == v6)
    {
      __break(1u);
      goto LABEL_54;
    }
    v14 = a2 + 32 + 56 * v13;
    v15 = *(_QWORD *)v14;
    v16 = *(_QWORD *)(v14 + 8);
    v38 = *(_QWORD *)(v14 + 24);
    v39 = *(_QWORD *)(v14 + 16);
    v37 = *(_BYTE *)(v14 + 40);
    v35 = *(_QWORD *)(v14 + 32);
    v36 = *(_QWORD *)(v14 + 48);
    v17 = v12[2];
    if (v17)
    {
      v34 = v13;
      swift_bridgeObjectRetain_n();
      v40 = v16;
      swift_retain();
      swift_bridgeObjectRetain();
      v33 = v12;
      v18 = v12 + 10;
      while (1)
      {
        if (*(v18 - 6) == v15)
        {
          v19 = *(v18 - 4);
          v21 = *(v18 - 3);
          v20 = *(v18 - 2);
          v22 = *((_BYTE *)v18 - 8);
          v23 = *v18;
          v24 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*(v18 - 5) + 128);
          swift_retain();
          swift_bridgeObjectRetain();
          if ((v24(v40) & 1) != 0)
          {
            if (v19 == v39 && v21 == v38)
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            else
            {
              v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_release();
              if ((v25 & 1) == 0)
                goto LABEL_25;
            }
            if ((v22 & 1) != 0)
            {
              v26 = v37;
              if (v23 != v36)
                v26 = 0;
              if ((v26 & 1) != 0)
              {
LABEL_50:
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease_n();
                v30 = 0;
                *v32 = v34;
                return v30;
              }
            }
            else if ((v37 & 1) == 0 && v20 == v35 && v23 == v36)
            {
              goto LABEL_50;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
LABEL_25:
        v18 += 7;
        if (!--v17)
        {
          v12 = v33;
          swift_bridgeObjectRelease_n();
          v6 = v31;
          v13 = v34;
          v16 = v40;
          goto LABEL_43;
        }
      }
    }
    swift_retain();
    swift_bridgeObjectRetain();
LABEL_43:
    swift_retain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    v28 = v12[2];
    v27 = v12[3];
    if (v28 >= v27 >> 1)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v12);
    ++v13;
    v12[2] = v28 + 1;
    v29 = &v12[7 * v28];
    v29[4] = v15;
    v29[5] = v16;
    v29[6] = v39;
    v29[7] = v38;
    v29[8] = v35;
    *((_BYTE *)v29 + 72) = v37;
    v29[10] = v36;
    swift_bridgeObjectRelease();
    result = swift_release();
  }
  while (v13 != v6);
  swift_bridgeObjectRelease();
LABEL_51:
  v30 = 0;
  *v32 = v6;
  return v30;
}

uint64_t specialized static _HashTable.create<A>(untilFirstDuplicateIn:scale:reservedScale:)(uint64_t result, uint64_t a2, int64_t a3, char a4, uint64_t a5, uint64_t (*a6)(BOOL, unint64_t, uint64_t, uint64_t))
{
  unint64_t v7;
  double v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  char v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v7 = *(_QWORD *)(a2 + 16);
  v34 = (_QWORD *)result;
  if (v7 < 0x10)
  {
    v10 = 0;
  }
  else
  {
    v8 = ceil((double)(uint64_t)v7 / 0.75);
    if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0)
    {
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    if (v8 <= -9.22337204e18)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    if (v8 >= 9.22337204e18)
    {
LABEL_56:
      __break(1u);
      return result;
    }
    if ((uint64_t)(v7 + 1) > (uint64_t)v8)
      v9 = v7 + 1;
    else
      v9 = (uint64_t)v8;
    v10 = 64 - __clz(v9 - 1);
  }
  if (v10 <= a3)
    v11 = a3;
  else
    v11 = v10;
  if ((a4 & 1) == 0)
    v10 = v11;
  if (v10 <= a5)
    v12 = a5;
  else
    v12 = v10;
  if (v12 > 4)
  {
    v31 = specialized _HashTable.init(scale:reservedScale:)(v12, a5);
    specialized _HashTable.UnsafeHandle.fill<A>(untilFirstDuplicateIn:)(&v43, a2, (uint64_t *)(v31 + 16), v31 + 32);
    *v34 = v43;
    return v31;
  }
  if (v7 < 2)
    goto LABEL_51;
  result = a6(0, v7, 0, MEMORY[0x24BEE4AF8]);
  v13 = result;
  v14 = 0;
  v33 = v7;
  do
  {
    if (v14 == v7)
    {
      __break(1u);
      goto LABEL_54;
    }
    v15 = a2 + 32 + 56 * v14;
    v16 = *(_QWORD *)v15;
    v17 = *(_QWORD *)(v15 + 8);
    v40 = *(_QWORD *)(v15 + 24);
    v41 = *(_QWORD *)(v15 + 16);
    v39 = *(_BYTE *)(v15 + 40);
    v37 = *(_QWORD *)(v15 + 32);
    v38 = *(_QWORD *)(v15 + 48);
    v18 = *(_QWORD *)(v13 + 16);
    if (v18)
    {
      v36 = v14;
      v42 = *(_QWORD *)(v15 + 8);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v35 = v13;
      v19 = (_QWORD *)(v13 + 80);
      while (1)
      {
        if (*(v19 - 6) == v16)
        {
          v20 = *(v19 - 4);
          v22 = *(v19 - 3);
          v21 = *(v19 - 2);
          v23 = *((_BYTE *)v19 - 8);
          v24 = *v19;
          v25 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*(v19 - 5) + 128);
          swift_retain();
          swift_bridgeObjectRetain();
          if ((v25(v42) & 1) != 0)
          {
            if (v20 == v41 && v22 == v40)
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            else
            {
              v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_release();
              if ((v26 & 1) == 0)
                goto LABEL_25;
            }
            if ((v23 & 1) != 0)
            {
              v27 = v39;
              if (v24 != v38)
                v27 = 0;
              if ((v27 & 1) != 0)
              {
LABEL_50:
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease_n();
                v31 = 0;
                *v34 = v36;
                return v31;
              }
            }
            else if ((v39 & 1) == 0 && v21 == v37 && v24 == v38)
            {
              goto LABEL_50;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
LABEL_25:
        v19 += 7;
        if (!--v18)
        {
          v13 = v35;
          swift_bridgeObjectRelease();
          v7 = v33;
          v14 = v36;
          v17 = v42;
          goto LABEL_43;
        }
      }
    }
    swift_retain();
    swift_bridgeObjectRetain();
LABEL_43:
    swift_retain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = a6(0, *(_QWORD *)(v13 + 16) + 1, 1, v13);
    v29 = *(_QWORD *)(v13 + 16);
    v28 = *(_QWORD *)(v13 + 24);
    if (v29 >= v28 >> 1)
      v13 = a6(v28 > 1, v29 + 1, 1, v13);
    ++v14;
    *(_QWORD *)(v13 + 16) = v29 + 1;
    v30 = v13 + 56 * v29;
    *(_QWORD *)(v30 + 32) = v16;
    *(_QWORD *)(v30 + 40) = v17;
    *(_QWORD *)(v30 + 48) = v41;
    *(_QWORD *)(v30 + 56) = v40;
    *(_QWORD *)(v30 + 64) = v37;
    *(_BYTE *)(v30 + 72) = v39;
    *(_QWORD *)(v30 + 80) = v38;
    swift_bridgeObjectRelease();
    result = swift_release();
  }
  while (v14 != v7);
  swift_bridgeObjectRelease();
LABEL_51:
  v31 = 0;
  *v34 = v7;
  return v31;
}

unint64_t *specialized static _HashTable.create<A>(untilFirstDuplicateIn:scale:reservedScale:)(unint64_t *result, uint64_t a2, int64_t a3, char a4, uint64_t a5)
{
  unint64_t *v6;
  unint64_t v7;
  double v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v6 = result;
  v7 = *(_QWORD *)(a2 + 16);
  if (v7 < 0x10)
  {
    v10 = 0;
LABEL_10:
    if (v10 <= a3)
      v11 = a3;
    else
      v11 = v10;
    if ((a4 & 1) == 0)
      v10 = v11;
    if (v10 <= a5)
      v12 = a5;
    else
      v12 = v10;
    if (v12 > 4)
    {
      v13 = specialized _HashTable.init(scale:reservedScale:)(v12, a5);
      specialized _HashTable.UnsafeHandle.fill<A>(untilFirstDuplicateIn:)((uint64_t *)&v21, a2, (uint64_t *)(v13 + 16), v13 + 32);
      *v6 = v21;
      return (unint64_t *)v13;
    }
    if (v7 < 2)
    {
LABEL_20:
      v13 = 0;
      *v6 = v7;
      return (unint64_t *)v13;
    }
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a2 + 16), 0, MEMORY[0x24BEE4AF8]);
    v14 = result;
    v15 = 0;
    while (v15 != v7)
    {
      v16 = *(_QWORD *)(a2 + 32 + 8 * v15);
      v17 = v14[2];
      if (v17)
      {
        if (v14[4] == v16)
          goto LABEL_37;
        if (v17 != 1)
        {
          if (v14[5] == v16)
          {
LABEL_37:
            swift_bridgeObjectRelease();
            v13 = 0;
            *v6 = v15;
            return (unint64_t *)v13;
          }
          if (v17 != 2)
          {
            v18 = 6;
            while (1)
            {
              v19 = v18 - 3;
              if (__OFADD__(v18 - 4, 1))
                break;
              if (v14[v18] == v16)
                goto LABEL_37;
              ++v18;
              if (v19 == v17)
                goto LABEL_33;
            }
            __break(1u);
            break;
          }
        }
      }
LABEL_33:
      v20 = v14[3];
      if (v17 >= v20 >> 1)
      {
        result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v17 + 1, 1, v14);
        v14 = result;
      }
      ++v15;
      v14[2] = v17 + 1;
      v14[v17 + 4] = v16;
      if (v15 == v7)
      {
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
    __break(1u);
    goto LABEL_41;
  }
  v8 = ceil((double)(uint64_t)v7 / 0.75);
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v8 <= -9.22337204e18)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v8 < 9.22337204e18)
  {
    if ((uint64_t)(v7 + 1) > (uint64_t)v8)
      v9 = v7 + 1;
    else
      v9 = (uint64_t)v8;
    v10 = 64 - __clz(v9 - 1);
    goto LABEL_10;
  }
LABEL_43:
  __break(1u);
  return result;
}

void specialized static _HashTable.create<A>(untilFirstDuplicateIn:scale:reservedScale:)(uint64_t a1, unint64_t a2, uint64_t a3, char a4, unint64_t *a5, void (*a6)(_QWORD))
{
  unint64_t v7;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  id v22;
  void *v23;
  char v24;
  char v25;
  id v26;
  id v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v31;

  LOBYTE(v7) = a4;
  v11 = a2 >> 62;
  if (a2 >> 62)
  {
LABEL_62:
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v13 = specialized static _HashTable.scale(forCapacity:)(v12);
  if ((v7 & 1) != 0)
    v14 = 0;
  else
    v14 = a3;
  if (v14 <= v13)
    v14 = v13;
  if (v14 <= (uint64_t)a5)
    v15 = (uint64_t)a5;
  else
    v15 = v14;
  if (v15 > 4)
  {
    v17 = specialized _HashTable.init(scale:reservedScale:)(v15, (uint64_t)a5);
    specialized _HashTable.UnsafeHandle.fill<A>(untilFirstDuplicateIn:)(&v31, a2, (Swift::Int *)(v17 + 16), v17 + 32, a6);
    *(_QWORD *)a1 = v31;
    return;
  }
  if (v12 < 2)
  {
    if (v11)
    {
      swift_bridgeObjectRetain();
      v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v16 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    *(_QWORD *)a1 = v16;
    return;
  }
  v31 = MEMORY[0x24BEE4AF8];
  specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v12, 0);
  a5 = &v31;
  specialized Array._endMutation()();
  if (v11)
  {
    swift_bridgeObjectRetain();
    a3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (a3 < 0)
      goto LABEL_64;
  }
  else
  {
    a3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!a3)
  {
LABEL_57:
    swift_bridgeObjectRelease();
    *(_QWORD *)a1 = a3;
    return;
  }
  v18 = 0;
  v29 = (_QWORD *)a1;
  v28 = a3;
  while (1)
  {
    if (v18 == a3)
      goto LABEL_60;
    if ((a2 & 0xC000000000000001) != 0)
    {
      v19 = (id)MEMORY[0x24954B748](v18, a2);
      goto LABEL_28;
    }
    if (v18 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
      break;
    v19 = *(id *)(a2 + 32 + 8 * v18);
LABEL_28:
    v20 = v19;
    v7 = v31;
    if (v31 >> 62)
    {
      swift_bridgeObjectRetain_n();
      v21 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v21)
      {
LABEL_51:
        swift_bridgeObjectRelease();
        goto LABEL_52;
      }
    }
    else
    {
      v21 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v21)
        goto LABEL_51;
    }
    v11 = v7 & 0xC000000000000001;
    if ((v7 & 0xC000000000000001) != 0)
      v22 = (id)MEMORY[0x24954B748](0, v7);
    else
      v22 = *(id *)(v7 + 32);
    v23 = v22;
    a5 = (unint64_t *)((uint64_t (*)(_QWORD))a6)(0);
    v24 = static NSObject.== infix(_:_:)();

    if ((v24 & 1) != 0)
    {
LABEL_58:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *v29 = v18;
      return;
    }
    if (v21 != 1)
    {
      if (v11)
      {
        MEMORY[0x24954B748](1, v7);
        v25 = static NSObject.== infix(_:_:)();
        swift_unknownObjectRelease();
        if ((v25 & 1) != 0)
          goto LABEL_58;
        if (v21 != 2)
        {
          a1 = 2;
          while (1)
          {
            MEMORY[0x24954B748](a1, v7);
            a3 = a1 + 1;
            if (__OFADD__(a1, 1))
              break;
            v11 = static NSObject.== infix(_:_:)();
            swift_unknownObjectRelease();
            if ((v11 & 1) != 0)
              goto LABEL_58;
            ++a1;
            if (a3 == v21)
              goto LABEL_49;
          }
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
          goto LABEL_62;
        }
      }
      else
      {
        v26 = *(id *)(v7 + 40);
        a1 = static NSObject.== infix(_:_:)();

        if ((a1 & 1) != 0)
          goto LABEL_58;
        if (v21 != 2)
        {
          v11 = 6;
          while (1)
          {
            a3 = v11 - 3;
            if (__OFADD__(v11 - 4, 1))
              goto LABEL_61;
            v27 = *(id *)(v7 + 8 * v11);
            a1 = static NSObject.== infix(_:_:)();

            if ((a1 & 1) != 0)
              goto LABEL_58;
            ++v11;
            if (a3 == v21)
            {
LABEL_49:
              swift_bridgeObjectRelease();
              a1 = (uint64_t)v29;
              a3 = v28;
              goto LABEL_52;
            }
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    a1 = (uint64_t)v29;
LABEL_52:
    v7 = v20;
    MEMORY[0x24954B1A8]();
    if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    ++v18;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    a5 = &v31;
    specialized Array._endMutation()();

    if (v18 == a3)
      goto LABEL_57;
  }
  __break(1u);
LABEL_64:
  __break(1u);
}

Swift::Int specialized _HashTable.UnsafeHandle._find<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  Swift::UInt v9;
  uint64_t v10;
  void (*v11)(_QWORD *);
  uint64_t v12;
  uint64_t v13;
  Swift::UInt v14;
  Swift::Int result;
  uint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  char v33;
  char v34;
  int v35;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  Swift::UInt v40;
  int v41;
  Swift::UInt v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;

  Hasher.init(_seed:)();
  v9 = *(_QWORD *)a1;
  Hasher._combine(_:)(*(_QWORD *)a1);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(void (**)(_QWORD *))(*(_QWORD *)v10 + 120);
  swift_retain();
  v11(v46);
  v45 = v10;
  swift_release();
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain();
  v44 = v12;
  String.hash(into:)();
  v43 = v13;
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a1 + 32);
  v41 = *(unsigned __int8 *)(a1 + 40);
  if (v41 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }
  v42 = *(_QWORD *)(a1 + 48);
  Hasher._combine(_:)(v42);
  result = Hasher._finalize()();
  v16 = 1 << *a4;
  v17 = v16 - 1;
  if (__OFSUB__(v16, 1))
  {
    __break(1u);
  }
  else
  {
    v18 = v17 & result;
    v19 = _HashTable.UnsafeHandle._startIterator(bucket:)(v17 & result, a4, a5);
    v46[0] = a4;
    v46[1] = a5;
    v46[2] = v18;
    v47 = v19;
    v48 = v20;
    v49 = v21;
    v50 = 0;
    if (v19)
    {
      v40 = v14;
      v22 = (v19 ^ v17) + ((uint64_t)a4[1] >> 6);
      if (v22 >= v17)
        v23 = v17;
      else
        v23 = 0;
      for (i = v22 - v23; ; i = v38 - v39)
      {
        v25 = a2 + 56 * i;
        if (*(_QWORD *)v25 != v9)
          goto LABEL_30;
        v26 = *(_QWORD *)(v25 + 16);
        v28 = *(_QWORD *)(v25 + 24);
        v27 = *(_QWORD *)(v25 + 32);
        v29 = *(_BYTE *)(v25 + 40);
        v30 = *(_QWORD *)(v25 + 48);
        v31 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v25 + 8) + 128);
        swift_retain();
        swift_bridgeObjectRetain();
        if ((v31(v45) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_30;
        }
        if (v26 == v44 && v28 == v43)
        {
          swift_bridgeObjectRelease();
          swift_release();
          if ((v29 & 1) != 0)
            goto LABEL_18;
        }
        else
        {
          v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_release();
          if ((v33 & 1) == 0)
            goto LABEL_30;
          if ((v29 & 1) != 0)
          {
LABEL_18:
            v34 = v41;
            if (v30 != v42)
              v34 = 0;
            if ((v34 & 1) != 0)
              return i;
            goto LABEL_30;
          }
        }
        v35 = v41 ^ 1;
        if (v27 != v40)
          v35 = 0;
        if (v35 == 1 && v30 == v42)
          return i;
LABEL_30:
        _HashTable.BucketIterator.advance()();
        if (!v47)
          return 0;
        v37 = -1 << *(_QWORD *)v46[0];
        v38 = (v37 ^ ~v47) + (*(uint64_t *)(v46[0] + 8) >> 6);
        if (v38 >= ~v37)
          v39 = ~v37;
        else
          v39 = 0;
      }
    }
    return 0;
  }
  return result;
}

{
  Swift::UInt v9;
  uint64_t v10;
  void (*v11)(_QWORD *);
  uint64_t v12;
  uint64_t v13;
  Swift::UInt v14;
  Swift::Int result;
  uint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  char v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  Swift::UInt v39;
  Swift::UInt v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;

  Hasher.init(_seed:)();
  v9 = *(_QWORD *)a1;
  Hasher._combine(_:)(*(_QWORD *)a1);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(void (**)(_QWORD *))(*(_QWORD *)v10 + 120);
  swift_retain();
  v11(v45);
  v44 = v10;
  swift_release();
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain();
  v43 = v12;
  String.hash(into:)();
  v42 = v13;
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a1 + 32);
  v41 = *(unsigned __int8 *)(a1 + 40);
  if (v41 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }
  v40 = *(_QWORD *)(a1 + 48);
  Hasher._combine(_:)(v40);
  result = Hasher._finalize()();
  v16 = 1 << *a4;
  v17 = v16 - 1;
  if (__OFSUB__(v16, 1))
  {
    __break(1u);
  }
  else
  {
    v18 = v17 & result;
    v19 = _HashTable.UnsafeHandle._startIterator(bucket:)(v17 & result, a4, a5);
    v45[0] = a4;
    v45[1] = a5;
    v45[2] = v18;
    v46 = v19;
    v47 = v20;
    v48 = v21;
    v49 = 0;
    if (v19)
    {
      v39 = v14;
      v22 = (v19 ^ v17) + ((uint64_t)a4[1] >> 6);
      if (v22 >= v17)
        v23 = v17;
      else
        v23 = 0;
      for (i = v22 - v23; ; i = v36 - v37)
      {
        v25 = a2 + 56 * i;
        if (*(_QWORD *)v25 != v9)
          goto LABEL_23;
        v26 = *(_QWORD *)(v25 + 16);
        v28 = *(_QWORD *)(v25 + 24);
        v27 = *(_QWORD *)(v25 + 32);
        v29 = *(_BYTE *)(v25 + 40);
        v30 = *(_QWORD *)(v25 + 48);
        v31 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v25 + 8) + 128);
        swift_retain();
        swift_bridgeObjectRetain();
        if ((v31(v44) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_23;
        }
        if (v26 == v43 && v28 == v42)
        {
          swift_bridgeObjectRelease();
          swift_release();
          if ((v29 & 1) == 0)
            goto LABEL_29;
        }
        else
        {
          v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_release();
          if ((v33 & 1) == 0)
            goto LABEL_23;
          if ((v29 & 1) == 0)
          {
LABEL_29:
            if ((v41 & 1) == 0 && v27 == v39 && v30 == v40)
              return i;
            goto LABEL_23;
          }
        }
        v34 = v41;
        if (v30 != v40)
          v34 = 0;
        if ((v34 & 1) != 0)
          return i;
LABEL_23:
        _HashTable.BucketIterator.advance()();
        if (!v46)
          return 0;
        v35 = -1 << *(_QWORD *)v45[0];
        v36 = (v35 ^ ~v46) + (*(uint64_t *)(v45[0] + 8) >> 6);
        if (v36 >= ~v35)
          v37 = ~v35;
        else
          v37 = 0;
      }
    }
    return 0;
  }
  return result;
}

{
  uint64_t v9;
  void *v10;
  id v11;
  Swift::Int result;
  uint64_t v13;
  unint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t i;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30[8];
  _QWORD *v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  Hasher.init(_seed:)();
  v9 = MEMORY[0x24954C3E4](a1);
  if (v9)
  {
    v10 = (void *)v9;
    Hasher._combine(_:)(1u);
    v11 = v10;
    NSObject.hash(into:)();

  }
  else
  {
    Hasher._combine(_:)(0);
  }
  result = Hasher._finalize()();
  v13 = 1 << *a4;
  v14 = v13 - 1;
  if (__OFSUB__(v13, 1))
  {
    __break(1u);
    return result;
  }
  v15 = v14 & result;
  v16 = _HashTable.UnsafeHandle._startIterator(bucket:)(v14 & result, a4, a5);
  v31 = a4;
  v32 = a5;
  v33 = v15;
  v34 = v16;
  v35 = v17;
  v36 = v18;
  v37 = 0;
  if (!v16)
    return 0;
  v19 = (v16 ^ v14) + ((uint64_t)a4[1] >> 6);
  if (v19 >= v14)
    v20 = v14;
  else
    v20 = 0;
  for (i = v19 - v20; ; i = v28 - v29)
  {
    outlined init with copy of WeakBox<SGEdge>(a2 + 8 * i, (uint64_t)v30);
    v22 = (void *)MEMORY[0x24954C3E4](v30);
    v23 = MEMORY[0x24954C3E4](a1);
    v24 = (void *)v23;
    if (!v22)
      break;
    if (!v23)
    {
      v24 = v22;
      goto LABEL_17;
    }
    type metadata accessor for SGEdge();
    v25 = v22;
    v26 = static NSObject.== infix(_:_:)();

    if ((v26 & 1) != 0)
      goto LABEL_25;
LABEL_18:
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v30, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
    _HashTable.BucketIterator.advance()();
    if (!v34)
      return 0;
    v27 = -1 << *v31;
    v28 = (v27 ^ ~v34) + ((uint64_t)v31[1] >> 6);
    if (v28 >= ~v27)
      v29 = ~v27;
    else
      v29 = 0;
  }
  if (v23)
  {
LABEL_17:

    goto LABEL_18;
  }
LABEL_25:
  outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v30, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
  return i;
}

{
  Swift::Int result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  Hasher.init(_seed:)();
  String.hash(into:)();
  result = Hasher._finalize()();
  v11 = 1 << *a4;
  v12 = v11 - 1;
  if (__OFSUB__(v11, 1))
  {
    __break(1u);
  }
  else
  {
    v13 = _HashTable.UnsafeHandle._startIterator(bucket:)(v12 & result, a4, a5);
    v24 = a4;
    v25 = v13;
    if (!v13)
      return 0;
    v14 = (v13 ^ v12) + ((uint64_t)a4[1] >> 6);
    if (v14 >= v12)
      v15 = v12;
    else
      v15 = 0;
    v16 = v14 - v15;
    v17 = *(_QWORD *)(a3 + 16);
    if (v14 - v15 >= v17)
    {
LABEL_18:
      __break(1u);
    }
    else
    {
      v18 = a3 + 32;
      while (1)
      {
        v19 = (_QWORD *)(v18 + 16 * v16);
        v20 = *v19 == a1 && v19[1] == a2;
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          break;
        _HashTable.BucketIterator.advance()();
        if (!v25)
          return 0;
        v21 = -1 << *v24;
        v22 = (v21 ^ ~v25) + ((uint64_t)v24[1] >> 6);
        if (v22 >= ~v21)
          v23 = ~v21;
        else
          v23 = 0;
        v16 = v22 - v23;
        if (v22 - v23 >= v17)
          goto LABEL_18;
      }
    }
    return v16;
  }
  return result;
}

Swift::Int specialized _HashTable.UnsafeHandle._find<A>(_:in:)(Swift::UInt a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  Swift::Int v17;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  result = Hasher._finalize()();
  v10 = 1 << *a4;
  v11 = v10 - 1;
  if (__OFSUB__(v10, 1))
  {
    __break(1u);
  }
  else
  {
    result = _HashTable.UnsafeHandle._startIterator(bucket:)(v11 & result, a4, a5);
    v17 = result;
    if (result)
    {
      v12 = (result ^ v11) + ((uint64_t)a4[1] >> 6);
      v13 = v12 >= v11 ? v11 : 0;
      result = v12 - v13;
      if (*(_QWORD *)(a2 + 8 * (v12 - v13)) != a1)
      {
        while (1)
        {
          _HashTable.BucketIterator.advance()();
          if (!v17)
            break;
          v14 = -1 << *a4;
          v15 = (v14 ^ ~v17) + ((uint64_t)a4[1] >> 6);
          if (v15 >= ~v14)
            v16 = ~v14;
          else
            v16 = 0;
          result = v15 - v16;
          if (*(_QWORD *)(a2 + 8 * (v15 - v16)) == a1)
            return result;
        }
        return 0;
      }
    }
  }
  return result;
}

Swift::Int specialized _HashTable.UnsafeHandle._find<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  Swift::Int result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;

  Hasher.init(_seed:)();
  String.hash(into:)();
  result = Hasher._finalize()();
  v12 = 1 << *a5;
  v13 = v12 - 1;
  if (__OFSUB__(v12, 1))
  {
    __break(1u);
  }
  else
  {
    v14 = _HashTable.UnsafeHandle._startIterator(bucket:)(v13 & result, a5, a6);
    v25 = v14;
    if (!v14)
      return 0;
    v15 = (v14 ^ v13) + ((uint64_t)a5[1] >> 6);
    if (v15 >= v13)
      v16 = v13;
    else
      v16 = 0;
    v17 = v15 - v16;
    v18 = (_QWORD *)(a3 + 16 * (v15 - v16));
    v19 = *v18 == a1 && v18[1] == a2;
    if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      while (1)
      {
        _HashTable.BucketIterator.advance()();
        if (!v25)
          break;
        v20 = -1 << *a5;
        v21 = (v20 ^ ~v25) + ((uint64_t)a5[1] >> 6);
        if (v21 >= ~v20)
          v22 = ~v20;
        else
          v22 = 0;
        v17 = v21 - v22;
        v23 = (_QWORD *)(a3 + 16 * (v21 - v22));
        v24 = *v23 == a1 && v23[1] == a2;
        if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          return v17;
      }
      return 0;
    }
    return v17;
  }
  return result;
}

uint64_t specialized _HashTable.UnsafeHandle._find<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *a4;
  result = static Hasher._hash(seed:_:)();
  v11 = (1 << v9) - 1;
  if (__OFSUB__(1 << v9, 1))
  {
    __break(1u);
  }
  else
  {
    result = _HashTable.UnsafeHandle._startIterator(bucket:)(v11 & result, a4, a5);
    v17 = result;
    if (result)
    {
      v12 = (result ^ v11) + (a4[1] >> 6);
      v13 = v12 >= v11 ? (1 << v9) - 1 : 0;
      result = v12 - v13;
      if (*(_QWORD *)(a2 + 8 * (v12 - v13)) != a1)
      {
        while (1)
        {
          _HashTable.BucketIterator.advance()();
          if (!v17)
            break;
          v14 = -1 << *a4;
          v15 = (v14 ^ ~v17) + (a4[1] >> 6);
          if (v15 >= ~v14)
            v16 = ~v14;
          else
            v16 = 0;
          result = v15 - v16;
          if (*(_QWORD *)(a2 + 8 * (v15 - v16)) == a1)
            return result;
        }
        return 0;
      }
    }
  }
  return result;
}

Swift::Int specialized _HashTable.UnsafeHandle._find<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, Swift::Int *a4, uint64_t a5)
{
  Swift::Int result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  char v21;
  Swift::Int *v22;
  uint64_t v23;

  result = NSObject._rawHashValue(seed:)(*a4);
  v9 = 1 << *a4;
  v10 = v9 - 1;
  if (__OFSUB__(v9, 1))
  {
    __break(1u);
  }
  else
  {
    v11 = _HashTable.UnsafeHandle._startIterator(bucket:)(v10 & result, a4, a5);
    v22 = a4;
    v23 = v11;
    if (!v11)
      return 0;
    v12 = (v11 ^ v10) + (a4[1] >> 6);
    if (v12 >= v10)
      v13 = v10;
    else
      v13 = 0;
    v14 = v12 - v13;
    type metadata accessor for SGNode();
    v15 = *(id *)(a2 + 8 * v14);
    v16 = static NSObject.== infix(_:_:)();

    if ((v16 & 1) == 0)
    {
      while (1)
      {
        _HashTable.BucketIterator.advance()();
        if (!v23)
          break;
        v17 = -1 << *v22;
        v18 = (v17 ^ ~v23) + (v22[1] >> 6);
        if (v18 >= ~v17)
          v19 = ~v17;
        else
          v19 = 0;
        v14 = v18 - v19;
        v20 = *(id *)(a2 + 8 * (v18 - v19));
        v21 = static NSObject.== infix(_:_:)();

        if ((v21 & 1) != 0)
          return v14;
      }
      return 0;
    }
    return v14;
  }
  return result;
}

Swift::Int specialized _HashTable.UnsafeHandle._find<A>(_:in:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  Swift::Int result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t i;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a3 & 1);
  String.hash(into:)();
  result = Hasher._finalize()();
  v14 = 1 << *a6;
  v15 = v14 - 1;
  if (__OFSUB__(v14, 1))
  {
    __break(1u);
    return result;
  }
  v16 = _HashTable.UnsafeHandle._startIterator(bucket:)(v15 & result, a6, a7);
  v26 = v16;
  if (!v16)
    return 0;
  v17 = a3 & 1;
  v18 = (v16 ^ v15) + ((uint64_t)a6[1] >> 6);
  if (v18 >= v15)
    v19 = v15;
  else
    v19 = 0;
  for (i = v18 - v19; ; i = v24 - v25)
  {
    v21 = a4 + 24 * i;
    if ((*(_BYTE *)(v21 + 16) & 1) != 0)
    {
      if (!v17)
        goto LABEL_16;
    }
    else if (v17)
    {
      goto LABEL_16;
    }
    v22 = *(_QWORD *)v21 == a1 && *(_QWORD *)(v21 + 8) == a2;
    if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return i;
LABEL_16:
    _HashTable.BucketIterator.advance()();
    if (!v26)
      break;
    v23 = -1 << *a6;
    v24 = (v23 ^ ~v26) + ((uint64_t)a6[1] >> 6);
    if (v24 >= ~v23)
      v25 = ~v23;
    else
      v25 = 0;
  }
  return 0;
}

uint64_t specialized _HashTable.UnsafeHandle.fill<A>(untilFirstDuplicateIn:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::UInt v6;
  uint64_t v7;
  Swift::UInt v8;
  int v9;
  Swift::UInt v10;
  void (*v11)(char *);
  Swift::Int v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t result;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69[72];
  uint64_t *v70;
  uint64_t v71;
  Swift::Int v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;

  v68 = *(_QWORD *)(a2 + 16);
  if (!v68)
  {
LABEL_58:
    *a1 = v68;
    return 1;
  }
  v4 = 0;
  v67 = a2 + 32;
  while (1)
  {
    v5 = v67 + 56 * v4;
    v6 = *(_QWORD *)v5;
    v7 = *(_QWORD *)(v5 + 8);
    v58 = (uint64_t *)(v5 + 8);
    v57 = (uint64_t *)(v5 + 16);
    v8 = *(_QWORD *)(v5 + 32);
    v56 = (uint64_t *)(v5 + 32);
    v9 = *(unsigned __int8 *)(v5 + 40);
    v61 = v5;
    v10 = *(_QWORD *)(v5 + 48);
    v55 = (uint64_t *)(v5 + 48);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v6);
    v11 = *(void (**)(char *))(*(_QWORD *)v7 + 120);
    swift_retain();
    swift_bridgeObjectRetain();
    v11(v69);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v9 == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v8);
    }
    Hasher._combine(_:)(v10);
    v12 = Hasher._finalize()();
    v13 = a3;
    v14 = 1 << *a3;
    v15 = __OFSUB__(v14, 1);
    v16 = v14 - 1;
    if (v15)
      goto LABEL_64;
    v52 = v4;
    v17 = v16 & v12;
    v18 = _HashTable.UnsafeHandle._startIterator(bucket:)(v16 & v12, a3, a4);
    v20 = v19;
    v22 = v21;
    swift_bridgeObjectRelease();
    swift_release();
    v70 = a3;
    v71 = a4;
    v23 = 0;
    if (v18)
      break;
LABEL_3:
    v76 = v23;
    v72 = v17;
    v73 = 0;
    v74 = v20;
    v75 = v22;
    _HashTable.BucketIterator.currentValue.setter(v52, 0);
    v4 = v52 + 1;
    if (v52 + 1 == v68)
      goto LABEL_58;
  }
  v24 = (_QWORD *)v61;
  v25 = *a3;
  while (1)
  {
    v26 = -1 << v25;
    v27 = (v26 ^ ~v18) + (v13[1] >> 6);
    v28 = v27 >= ~v26 ? ~v26 : 0;
    v29 = v27 - v28;
    if (v29 >= v68)
      break;
    v30 = v67 + 56 * v29;
    if (*(_QWORD *)v30 == *v24)
    {
      v66 = v20;
      v31 = *(_QWORD *)(v30 + 16);
      v32 = *(_QWORD *)(v30 + 24);
      v33 = *v58;
      v34 = *v57;
      v35 = v57[1];
      v53 = *v56;
      v54 = *(_QWORD *)(v30 + 32);
      v64 = *(_BYTE *)(v61 + 40);
      v65 = *(_BYTE *)(v30 + 40);
      v62 = *v55;
      v63 = *(_QWORD *)(v30 + 48);
      v36 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v30 + 8) + 128);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      if ((v36(v33) & 1) != 0)
      {
        if (v31 == v34 && v32 == v35)
        {
          swift_release();
          swift_bridgeObjectRelease_n();
          swift_release();
          v13 = a3;
          v24 = (_QWORD *)v61;
          v20 = v66;
          if ((v65 & 1) != 0)
          {
LABEL_22:
            v39 = v64;
            if (v63 != v62)
              v39 = 0;
            if ((v39 & 1) != 0)
            {
LABEL_57:
              result = 0;
              *a1 = v52;
              return result;
            }
            goto LABEL_27;
          }
          goto LABEL_51;
        }
        v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        v13 = a3;
        v24 = (_QWORD *)v61;
        v20 = v66;
        if ((v38 & 1) != 0)
        {
          if ((v65 & 1) != 0)
            goto LABEL_22;
LABEL_51:
          if ((v64 & 1) == 0 && v54 == v53 && v63 == v62)
            goto LABEL_57;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        v13 = a3;
        v24 = (_QWORD *)v61;
        v20 = v66;
      }
    }
LABEL_27:
    ++v17;
    v25 = *v13;
    v40 = *v13 & 0x3F;
    v41 = 1 << *v13;
    if (v17 == v41)
    {
      if ((v23 & 1) != 0)
        goto LABEL_65;
      v17 = 0;
      v23 = 1;
    }
    if (v22 >= v40)
    {
      v15 = __OFSUB__(v22, v40);
      v22 -= v40;
      if (v15)
        goto LABEL_60;
      v18 = (v41 - 1) & v20;
      v20 >>= v40;
      if (!v18)
        goto LABEL_3;
    }
    else
    {
      v42 = (v17 * v40) >> 6;
      if (v22)
      {
        if (__OFADD__(v40 << v40, 64))
          goto LABEL_63;
        v43 = (v40 << v40) + 126;
        if ((v40 << v40) + 64 >= 1)
          v43 = (v40 << v40) + 63;
        if (v42 + 1 == v43 >> 6)
          v42 = 0;
        else
          ++v42;
      }
      v44 = v40 - v22;
      if (__OFSUB__(v40, v22))
        goto LABEL_61;
      v45 = v42 == 2 && v40 == 5;
      v46 = 64;
      if (v45)
        v46 = 32;
      v15 = __OFSUB__(v46, v44);
      v47 = v46 - v44;
      if (v15)
        goto LABEL_62;
      v48 = *(_QWORD *)(a4 + 8 * v42);
      v18 = ((v48 << v22) | v20) & (v41 - 1);
      v20 = v48 >> v44;
      v22 = v47;
      if (!v18)
        goto LABEL_3;
    }
  }
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v7 = 0;
    v8 = a2 + 32;
    while (1)
    {
      v9 = *a3;
      v10 = static Hasher._hash(seed:_:)();
      v11 = (1 << v9) - 1;
      if (__OFSUB__(1 << v9, 1))
        break;
      v12 = v11 & v10;
      v13 = _HashTable.UnsafeHandle._startIterator(bucket:)(v11 & v10, a3, a4);
      v16 = 0;
      if (v13)
      {
        v17 = v9 & 0x3F;
        v18 = __OFADD__(v17 << v17, 64);
        v19 = (v17 << v17) + 126;
        if ((v17 << v17) + 64 >= 1)
          v19 = (v17 << v17) + 63;
        v20 = v19 >> 6;
        v21 = v14;
        while (1)
        {
          v22 = (a3[1] >> 6) + (v13 ^ v11);
          v23 = v22 >= v11 ? (1 << v9) - 1 : 0;
          v24 = v22 - v23;
          if (v24 >= v4)
            break;
          if (*(_QWORD *)(v8 + 8 * v24) == *(_QWORD *)(v8 + 8 * v7))
          {
            result = 0;
            *a1 = v7;
            return result;
          }
          if (++v12 == 1 << v9)
          {
            if ((v16 & 1) != 0)
              goto LABEL_47;
            v12 = 0;
            v16 = 1;
          }
          if (v15 >= v17)
          {
            v29 = __OFSUB__(v15, v17);
            v15 -= v17;
            if (v29)
              goto LABEL_42;
            v32 = v21 >> v17;
          }
          else
          {
            v25 = (uint64_t)(v12 * v17) >> 6;
            if (v15)
            {
              if (v18)
                goto LABEL_45;
              if (v25 + 1 == v20)
                v25 = 0;
              else
                ++v25;
            }
            v26 = v17 - v15;
            if (__OFSUB__(v17, v15))
              goto LABEL_43;
            v27 = v25 == 2 && v17 == 5;
            if (v27)
              v28 = 32;
            else
              v28 = 64;
            v29 = __OFSUB__(v28, v26);
            v30 = v28 - v26;
            if (v29)
              goto LABEL_44;
            v31 = *(_QWORD *)(a4 + 8 * v25);
            v21 |= v31 << v15;
            v32 = v31 >> v26;
            v15 = v30;
          }
          v13 = v21 & v11;
          v27 = (v21 & v11) == 0;
          v21 = v32;
          if (v27)
            goto LABEL_3;
        }
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        break;
      }
LABEL_3:
      _HashTable.BucketIterator.currentValue.setter(v7++, 0);
      if (v7 == v4)
        goto LABEL_39;
    }
    __break(1u);
LABEL_47:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_39:
    *a1 = v4;
    return 1;
  }
  return result;
}

uint64_t specialized _HashTable.UnsafeHandle.fill<A>(untilFirstDuplicateIn:)(_QWORD *a1, unint64_t a2, Swift::Int *a3, uint64_t a4, void (*a5)(_QWORD))
{
  uint64_t v7;
  unint64_t v8;
  id v9;
  void *v10;
  Swift::Int v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t result;
  uint64_t v42;
  unint64_t v44;
  unint64_t v47;

  if (a2 >> 62)
    goto LABEL_56;
  v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  do
  {
    if (!v7)
    {
LABEL_47:
      *a1 = v7;
      return 1;
    }
    v8 = 0;
    v47 = a2 & 0xC000000000000001;
    v44 = a2 + 32;
    v42 = v7;
    while (v8 != v7)
    {
      if (v47)
      {
        v9 = (id)MEMORY[0x24954B748](v8, a2);
      }
      else
      {
        if (v8 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_58;
        v9 = *(id *)(v44 + 8 * v8);
      }
      v10 = v9;
      v11 = NSObject._rawHashValue(seed:)(*a3);
      v12 = 1 << *a3;
      v13 = __OFSUB__(v12, 1);
      v14 = v12 - 1;
      if (v13)
        goto LABEL_55;
      v15 = v14 & v11;
      v16 = _HashTable.UnsafeHandle._startIterator(bucket:)(v14 & v11, a3, a4);
      v18 = v17;
      v20 = v19;

      v21 = 0;
      if (v16)
      {
        v22 = *a3;
        while (1)
        {
          while (1)
          {
            v23 = -1 << v22;
            v24 = (v23 ^ ~v16) + (a3[1] >> 6);
            v25 = v24 >= ~v23 ? ~v23 : 0;
            v26 = v24 - v25;
            if (v47)
            {
              v27 = (id)MEMORY[0x24954B748](v26, a2);
              v28 = (id)MEMORY[0x24954B748](v8, a2);
            }
            else
            {
              if ((v26 & 0x8000000000000000) != 0)
                goto LABEL_51;
              if (v26 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_52;
              v29 = *(void **)(v44 + 8 * v8);
              v27 = *(id *)(v44 + 8 * v26);
              v28 = v29;
            }
            v30 = v28;
            a5(0);
            v31 = static NSObject.== infix(_:_:)();

            if ((v31 & 1) != 0)
            {
              result = 0;
              *a1 = v8;
              return result;
            }
            ++v15;
            v22 = *a3;
            v32 = *a3 & 0x3F;
            v33 = 1 << *a3;
            if (v15 == v33)
            {
              if ((v21 & 1) != 0)
                goto LABEL_59;
              v15 = 0;
              v21 = 1;
            }
            if (v20 >= v32)
              break;
            v34 = (v15 * v32) >> 6;
            if (v20)
            {
              if (__OFADD__(v32 << v32, 64))
                goto LABEL_53;
              v35 = (v32 << v32) + 126;
              if ((v32 << v32) + 64 >= 1)
                v35 = (v32 << v32) + 63;
              if (v34 + 1 == v35 >> 6)
                v34 = 0;
              else
                ++v34;
            }
            v36 = v32 - v20;
            if (__OFSUB__(v32, v20))
              goto LABEL_49;
            v37 = v34 == 2 && v32 == 5;
            v38 = 64;
            if (v37)
              v38 = 32;
            v13 = __OFSUB__(v38, v36);
            v39 = v38 - v36;
            if (v13)
              goto LABEL_50;
            v40 = *(_QWORD *)(a4 + 8 * v34);
            v16 = ((v40 << v20) | v18) & (v33 - 1);
            v18 = v40 >> v36;
            v20 = v39;
            if (!v16)
              goto LABEL_5;
          }
          v13 = __OFSUB__(v20, v32);
          v20 -= v32;
          if (v13)
            break;
          v16 = (v33 - 1) & v18;
          v18 >>= v32;
          if (!v16)
            goto LABEL_5;
        }
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        break;
      }
LABEL_5:
      _HashTable.BucketIterator.currentValue.setter(v8++, 0);
      v7 = v42;
      if (v8 == v42)
        goto LABEL_47;
    }
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  while ((v7 & 0x8000000000000000) == 0);
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double Graph.insertConstantValue(type:valueString:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t inited;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  double result;
  __int128 v14;
  _OWORD v15[2];

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_245FBECD0;
  *(_QWORD *)(inited + 32) = 7632239;
  *(_QWORD *)(inited + 40) = 0xE300000000000000;
  *(_QWORD *)(inited + 48) = a1;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_BYTE *)(v10 + 80) = 6;
  *(_QWORD *)(v10 + 88) = a1;
  v11 = *(_QWORD *)(v4 + 40);
  swift_retain_n();
  swift_bridgeObjectRetain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v11, MEMORY[0x24BEE4AF8], inited, v10, v4 + 64, v4, (unint64_t *)&v14);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  v12 = v15[0];
  *a4 = v14;
  a4[1] = v12;
  result = *(double *)((char *)v15 + 9);
  *(_OWORD *)((char *)a4 + 25) = *(_OWORD *)((char *)v15 + 9);
  return result;
}

void *one-time initialization function for passthroughNodeNames()
{
  void *result;

  result = (void *)specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for passthroughNodeNames);
  passthroughNodeNames._rawValue = result;
  return result;
}

uint64_t one-time initialization function for validLODOptionsSets()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Set<String>>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_245FC2000;
  *(_QWORD *)(v0 + 32) = MEMORY[0x24BEE4B08];
  v1 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for validLODOptionsSets);
  swift_arrayDestroy();
  *(_QWORD *)(v0 + 40) = v1;
  v2 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #1 of one-time initialization function for validLODOptionsSets);
  swift_arrayDestroy();
  *(_QWORD *)(v0 + 48) = v2;
  v3 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #2 of one-time initialization function for validLODOptionsSets);
  swift_arrayDestroy();
  *(_QWORD *)(v0 + 56) = v3;
  v4 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #3 of one-time initialization function for validLODOptionsSets);
  swift_arrayDestroy();
  *(_QWORD *)(v0 + 64) = v4;
  v5 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #4 of one-time initialization function for validLODOptionsSets);
  swift_arrayDestroy();
  *(_QWORD *)(v0 + 72) = v5;
  v6 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #5 of one-time initialization function for validLODOptionsSets);
  swift_arrayDestroy();
  *(_QWORD *)(v0 + 80) = v6;
  v7 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #6 of one-time initialization function for validLODOptionsSets);
  swift_arrayDestroy();
  *(_QWORD *)(v0 + 88) = v7;
  v8 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #7 of one-time initialization function for validLODOptionsSets);
  result = swift_arrayDestroy();
  *(_QWORD *)(v0 + 96) = v8;
  validLODOptionsSets._rawValue = (void *)v0;
  return result;
}

uint64_t ShaderGraphNode.metalTextureType.getter()
{
  unint64_t *v0;

  specialized ShaderGraphNode.metalTextureType.getter(*v0);
  return swift_retain();
}

double Graph.insertImageNode(metalTextureType:resultType:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  Swift::String v16;
  unint64_t v17;
  __int128 v18;
  double result;
  __int128 v21;
  _OWORD v22[2];

  v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_245FC2010;
  *(_QWORD *)(inited + 32) = 1701603686;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  *(_QWORD *)(inited + 48) = a1;
  *(_QWORD *)(inited + 56) = 0x56746C7561666564;
  *(_QWORD *)(inited + 64) = 0xEA00000000006C61;
  *(_QWORD *)(inited + 72) = a2;
  v8 = one-time initialization token for float2;
  swift_retain();
  swift_retain();
  if (v8 != -1)
    swift_once();
  v9 = static MetalDataType.float2;
  *(_QWORD *)(inited + 80) = 0x64726F6F63786574;
  *(_QWORD *)(inited + 88) = 0xE800000000000000;
  *(_QWORD *)(inited + 96) = v9;
  v10 = one-time initialization token for sampler;
  swift_retain();
  if (v10 != -1)
    swift_once();
  v11 = static MetalDataType.sampler;
  *(_QWORD *)(inited + 104) = 115;
  *(_QWORD *)(inited + 112) = 0xE100000000000000;
  *(_QWORD *)(inited + 120) = v11;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  v12 = swift_initStackObject();
  *(_OWORD *)(v12 + 16) = xmmword_245FBECD0;
  *(_QWORD *)(v12 + 32) = 7632239;
  *(_QWORD *)(v12 + 40) = 0xE300000000000000;
  *(_QWORD *)(v12 + 48) = a2;
  v13 = swift_allocObject();
  swift_retain();
  swift_retain();
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v21 = 0xD000000000000011;
  *((_QWORD *)&v21 + 1) = 0x8000000245FCB1E0;
  v15 = *(_QWORD *)(a2 + 24);
  v14 = *(void **)(a2 + 32);
  swift_bridgeObjectRetain();
  v16._countAndFlagsBits = v15;
  v16._object = v14;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v13 + 16) = 0xD000000000000011;
  *(_QWORD *)(v13 + 24) = 0x8000000245FCB1E0;
  *(_QWORD *)(v13 + 32) = a2;
  v17 = *(_QWORD *)(v4 + 40);
  swift_retain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v17, inited, v12, v13 | 0x2000000000000000, v4 + 64, v4, (unint64_t *)&v21);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_setDeallocating();
  swift_arrayDestroy();
  v18 = v22[0];
  *a3 = v21;
  a3[1] = v18;
  result = *(double *)((char *)v22 + 9);
  *(_OWORD *)((char *)a3 + 25) = *(_OWORD *)((char *)v22 + 9);
  return result;
}

double Graph.insertCreateSampler(label:)@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  __int128 v4;
  _OWORD v5[2];

  specialized Graph.insertCreateSampler(label:)(&v4);
  v2 = v5[0];
  *a1 = v4;
  a1[1] = v2;
  result = *(double *)((char *)v5 + 9);
  *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)v5 + 9);
  return result;
}

void Graph.convertFilenameInput(_:movingTo:textureAssignments:customUniformsType:)(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  __int128 v59;
  _OWORD *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  int v72[2];
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v79;
  unint64_t v80;
  __int128 v81[12];
  _OWORD v82[12];
  __int128 v83;
  uint64_t v84[7];
  __int128 v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unsigned __int8 v89;
  uint64_t v90[14];
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE v94[8];
  __int128 v95;
  __int128 v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unsigned __int8 v100;
  _BYTE v101[8];
  __int128 v102;
  _BYTE v103[8];
  uint64_t v104;
  uint64_t v105;
  void *v106;
  unint64_t v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116[6];
  char v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  _BYTE v124[32];
  __int128 v125;
  _OWORD v126[2];
  _QWORD v127[3];
  __int128 v128;
  char v129;
  __int128 v130;
  _OWORD v131[3];
  unint64_t v132;

  v6 = (uint64_t)v4;
  v132 = a4;
  v9 = (void *)a1[3];
  v10 = *v4;
  v119 = v4[1];
  v118 = v10;
  v11 = v4[2];
  v12 = v4[3];
  v13 = v4[4];
  v123 = v4[5];
  v122 = v13;
  v120 = v11;
  v121 = v12;
  v14 = v4[6];
  v15 = v4[7];
  *(_OWORD *)((char *)v126 + 9) = *(__int128 *)((char *)v4 + 153);
  v16 = v4[8];
  v126[0] = v4[9];
  v125 = v16;
  *(_OWORD *)v124 = v14;
  *(_OWORD *)&v124[16] = v15;
  v17 = *a1;
  v18 = specialized OrderedSet._find(_:)(*a1, v118, *((_QWORD **)&v118 + 1));
  if ((v19 & 1) != 0)
    return;
  if ((v18 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v18 >= *(_QWORD *)(v119 + 16))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v73 = a2;
  v76 = v5;
  v20 = (_QWORD *)(v119 + 48 * v18);
  v21 = v20[7];
  v22 = v20[8];
  v23 = v20[9];
  v74 = a1[2];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  specialized OrderedDictionary.subscript.getter((uint64_t)a1, v21, v22, v23, v84);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined init with take of MetalFunctionNode?((uint64_t)v84, (uint64_t)&v107, &demangling cache variable for type metadata for Output??);
  if (v108 == 1)
    return;
  if (!v108)
  {
    outlined release of Output??(v84);
    return;
  }
  if (v107 == -7)
  {
    swift_retain();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return;
  }
  if ((v107 & 0x8000000000000000) != 0)
    goto LABEL_33;
  if (v107 >= *(_QWORD *)(v122 + 16))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v71 = v122;
  v70 = v122 + 32;
  v24 = v122 + 32 + 48 * v107;
  v26 = *(_QWORD *)(v24 + 8);
  v27 = *(_QWORD *)(v24 + 16);
  v28 = *(_BYTE *)(v24 + 40);
  v127[0] = *(_QWORD *)v24;
  v25 = v127[0];
  v127[1] = v26;
  v127[2] = v27;
  v128 = *(_OWORD *)(v24 + 24);
  v129 = v28;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v25);
  swift_bridgeObjectRelease();
  v29 = (_QWORD *)v25;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  if (!(v25 >> 61) && *(_BYTE *)(v25 + 80) == 6)
  {
    v30 = *(void **)(v25 + 16);
    v31 = (void *)v29[3];
    v33 = v29[4];
    v32 = v29[5];
    v34 = v29[6];
    v35 = v29[7];
    v75 = v29[8];
    *(_QWORD *)v72 = v29[9];
    swift_bridgeObjectRetain();
    Graph.insertGetTexture(_:textureAssignments:customUniformsType:)((uint64_t)v30, v31, a3, v132, &v85);
    if (v76)
    {
      outlined consume of NodePersonality((unint64_t)v29);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of SGDataTypeStorage(v30, v31, v33, v32, v34, v35, v75, v72[0], 6);
      return;
    }
    v80 = v87;
    v77 = v88;
    LODWORD(v132) = v89;
    v46 = v32;
    v47 = *((_QWORD *)&v85 + 1);
    v48 = v34;
    v49 = v85;
    v50 = v35;
    v51 = v86;
    outlined consume of SGDataTypeStorage(v30, v31, v33, v46, v48, v50, v75, v72[0], 6);
    goto LABEL_30;
  }
  v130 = v123;
  v131[0] = *(_OWORD *)v124;
  *(_OWORD *)((char *)v131 + 9) = *(_OWORD *)&v124[9];
  if ((specialized static ShaderGraphNode.== infix(_:_:)((uint64_t)v127, (uint64_t)&v130) & 1) != 0)
  {
    Graph.edge(to:)((uint64_t)a1, v90);
    outlined init with take of MetalFunctionNode?((uint64_t)v90, (uint64_t)v103, &demangling cache variable for type metadata for Edge?);
    if (v104)
    {
      v79 = v105;
      v36 = v106;
      v37 = *((_QWORD *)&v120 + 1);
      swift_bridgeObjectRetain();
      outlined release of Edge?(v90);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
      v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = xmmword_245FBECD0;
      *(_QWORD *)(v38 + 32) = 7632239;
      v39 = v132;
      *(_QWORD *)(v38 + 40) = 0xE300000000000000;
      *(_QWORD *)(v38 + 48) = v39;
      v40 = swift_allocObject();
      *(_QWORD *)(v40 + 16) = 12580;
      *(_QWORD *)(v40 + 24) = 0xE200000000000000;
      v41 = v40 | 0x6000000000000000;
      swift_retain();
      specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v37, MEMORY[0x24BEE4AF8], v38, v41, v6 + 64, v6, &v91);
      swift_release();
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      ShaderGraphNode.out.getter((uint64_t)v94);
      if (!v76)
      {
        outlined init with take of NodePersonality(&v91, &v113);
        outlined release of NodePersonality(&v113);
        v112 = v92;
        outlined release of [Input]((uint64_t)&v112);
        v111 = v93;
        outlined release of [Input]((uint64_t)&v111);
        Output.getProperty(_:_:)(v6, v79, v36, &v96);
        v47 = *((_QWORD *)&v96 + 1);
        v49 = v96;
        v51 = v97;
        v77 = v99;
        v80 = v98;
        LODWORD(v132) = v100;
        swift_release();
        v110 = v95;
        outlined release of String((uint64_t)&v110);
        swift_bridgeObjectRelease();
LABEL_30:
        v116[1] = v49;
        v116[2] = v47;
        v116[3] = v51;
        v116[4] = v80;
        v116[5] = v77;
        v117 = v132;
        outlined copy of NodePersonality(v49);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        ShaderGraphNode.out.getter((uint64_t)v101);
        Graph.connect(_:to:)((uint64_t)v101, v73);
        outlined consume of ShaderGraphNode?(v49, v47);
        outlined consume of NodePersonality((unint64_t)v29);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        v109 = v102;
        outlined release of String((uint64_t)&v109);
        outlined consume of NodePersonality(v49);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
      outlined init with take of NodePersonality(&v91, v116);
      outlined release of NodePersonality(v116);
      v115 = v92;
      outlined release of [Input]((uint64_t)&v115);
      v114 = v93;
      outlined release of [Input]((uint64_t)&v114);
      outlined consume of NodePersonality((unint64_t)v29);
      swift_bridgeObjectRelease();
LABEL_29:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    if (v17 == -7)
    {
      v42 = 0;
      v43 = 0;
      v132 = 0;
      v44 = (void *)0xED00002165646F6ELL;
      v45 = 0x20676E697373696DLL;
LABEL_28:
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)v81);
      *(_QWORD *)&v82[0] = 0;
      *((_QWORD *)&v82[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(58);
      v55._object = (void *)0x8000000245FCB200;
      v55._countAndFlagsBits = 0xD00000000000002BLL;
      String.append(_:)(v55);
      swift_bridgeObjectRetain();
      v56._countAndFlagsBits = v74;
      v56._object = v9;
      String.append(_:)(v56);
      swift_bridgeObjectRelease();
      v57._countAndFlagsBits = 0x646F6E206E6F2027;
      v57._object = (void *)0xEB00000000203A65;
      String.append(_:)(v57);
      v58._countAndFlagsBits = v45;
      v58._object = v44;
      String.append(_:)(v58);
      swift_bridgeObjectRelease();
      v59 = v82[0];
      outlined init with take of UserGraphError.ErrorType(v81, (uint64_t)v82);
      v83 = v59;
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      swift_allocError();
      *v60 = v82[0];
      v61 = v82[4];
      v63 = v82[1];
      v62 = v82[2];
      v60[3] = v82[3];
      v60[4] = v61;
      v60[1] = v63;
      v60[2] = v62;
      v64 = v82[8];
      v66 = v82[5];
      v65 = v82[6];
      v60[7] = v82[7];
      v60[8] = v64;
      v60[5] = v66;
      v60[6] = v65;
      v67 = v83;
      v69 = v82[9];
      v68 = v82[10];
      v60[11] = v82[11];
      v60[12] = v67;
      v60[9] = v69;
      v60[10] = v68;
      swift_willThrow();
      outlined consume of ShaderGraphNode?(v42, v43);
      outlined consume of NodePersonality((unint64_t)v29);
      goto LABEL_29;
    }
    if ((v17 & 0x8000000000000000) == 0)
    {
      if (v17 < *(_QWORD *)(v71 + 16))
      {
        v52 = (unint64_t *)(v70 + 48 * v17);
        v42 = *v52;
        v43 = v52[1];
        v53 = v52[3];
        v132 = v52[4];
        *(_QWORD *)&v82[0] = 1701080942;
        *((_QWORD *)&v82[0] + 1) = 0xE400000000000000;
        *(_QWORD *)&v81[0] = v53;
        outlined copy of NodePersonality(v42);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of NodePersonality(v42);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v54._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v54);
        swift_bridgeObjectRelease();
        outlined consume of NodePersonality(v42);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v44 = (void *)0xE400000000000000;
        v45 = 1701080942;
        goto LABEL_28;
      }
      goto LABEL_36;
    }
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    return;
  }
  outlined consume of NodePersonality(v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t implicit closure #1 in Graph.transformMaterialXImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

double Graph.insertCubeimageNode(metalTextureType:resultType:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  Swift::String v16;
  unint64_t v17;
  __int128 v18;
  double result;
  __int128 v21;
  _OWORD v22[2];

  v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_245FC2010;
  *(_QWORD *)(inited + 32) = 1701603686;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  *(_QWORD *)(inited + 48) = a1;
  *(_QWORD *)(inited + 56) = 0x56746C7561666564;
  *(_QWORD *)(inited + 64) = 0xEA00000000006C61;
  *(_QWORD *)(inited + 72) = a2;
  v8 = one-time initialization token for float3;
  swift_retain();
  swift_retain();
  if (v8 != -1)
    swift_once();
  v9 = static MetalDataType.float3;
  *(_QWORD *)(inited + 80) = 0x64726F6F63786574;
  *(_QWORD *)(inited + 88) = 0xE800000000000000;
  *(_QWORD *)(inited + 96) = v9;
  v10 = one-time initialization token for sampler;
  swift_retain();
  if (v10 != -1)
    swift_once();
  v11 = static MetalDataType.sampler;
  *(_QWORD *)(inited + 104) = 0x72656C706D6173;
  *(_QWORD *)(inited + 112) = 0xE700000000000000;
  *(_QWORD *)(inited + 120) = v11;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  v12 = swift_initStackObject();
  *(_OWORD *)(v12 + 16) = xmmword_245FBECD0;
  *(_QWORD *)(v12 + 32) = 7632239;
  *(_QWORD *)(v12 + 40) = 0xE300000000000000;
  *(_QWORD *)(v12 + 48) = a2;
  v13 = swift_allocObject();
  swift_retain();
  swift_retain();
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v21 = 0xD000000000000015;
  *((_QWORD *)&v21 + 1) = 0x8000000245FCB230;
  v15 = *(_QWORD *)(a2 + 24);
  v14 = *(void **)(a2 + 32);
  swift_bridgeObjectRetain();
  v16._countAndFlagsBits = v15;
  v16._object = v14;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v13 + 16) = 0xD000000000000015;
  *(_QWORD *)(v13 + 24) = 0x8000000245FCB230;
  *(_QWORD *)(v13 + 32) = a2;
  v17 = *(_QWORD *)(v4 + 40);
  swift_retain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v17, inited, v12, v13 | 0x2000000000000000, v4 + 64, v4, (unint64_t *)&v21);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_setDeallocating();
  swift_arrayDestroy();
  v18 = v22[0];
  *a3 = v21;
  a3[1] = v18;
  result = *(double *)((char *)v22 + 9);
  *(_OWORD *)((char *)a3 + 25) = *(_OWORD *)((char *)v22 + 9);
  return result;
}

BOOL specialized implicit closure #1 in Graph.transformRealityKitImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(_QWORD *a1)
{
  Swift::String v1;
  Swift::Bool v2;

  if (*a1 >> 61 != 5)
    return 0;
  swift_bridgeObjectRetain();
  v1._object = (void *)0x8000000245FC82F0;
  v1._countAndFlagsBits = 0xD000000000000014;
  v2 = String.hasPrefix(_:)(v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t closure #1 in Graph.transformRealityKitImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  unint64_t *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::UInt v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  NSObject *v36;
  BOOL v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  Swift::Int v47;
  uint64_t v48;
  uint64_t v49;
  Swift::Int_optional v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  Swift::Int v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  Swift::Int v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  Swift::Int v68;
  BOOL v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void **v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t (*v95)(uint64_t);
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  int v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  _QWORD *v115;
  NSObject *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  BOOL v153;
  BOOL v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  BOOL v158;
  BOOL v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  BOOL v163;
  BOOL v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  __int128 v169;
  uint64_t v170;
  _OWORD *v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  os_log_type_t v184;
  uint8_t *v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  NSObject *v189;
  uint64_t v190;
  _OWORD *v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  _OWORD *v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  unint64_t *v241;
  unint64_t *v242;
  uint64_t v243;
  unint64_t v244;
  _OWORD *v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  unint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  _QWORD v266[2];
  __int128 v267;
  void **p_object;
  uint64_t *v269;
  uint64_t *v270;
  uint64_t v271;
  uint64_t *v272;
  uint64_t *v273;
  uint64_t *v274;
  uint64_t *v275;
  _QWORD *v276;
  __int128 v277;
  uint64_t v278;
  uint64_t v279;
  __int128 v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  int v291;
  uint64_t v292;
  unint64_t v293;
  void *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  _OWORD *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  NSObject *v319;
  NSObject *v320;
  uint64_t v321;
  Swift::Int v322;
  uint64_t v323;
  uint64_t v324;
  unsigned int v325;
  unint64_t v326;
  uint64_t v327;
  _OWORD v328[9];
  _OWORD v329[2];
  uint64_t v330;
  Swift::String v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  char v335;
  uint64_t v336;
  unint64_t v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  _BYTE v352[32];
  __int128 v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  unsigned __int8 v357;
  _BYTE v358[56];
  _QWORD v359[7];
  uint64_t v360;
  _OWORD v361[3];
  __int128 v362[3];
  uint64_t v363;
  _OWORD v364[3];
  __int128 v365[3];
  uint64_t v366;
  _OWORD v367[3];
  __int128 v368[3];
  uint64_t v369;
  uint64_t v370;
  __int128 v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unsigned __int8 v375;
  __int128 v376[3];
  uint64_t v377;
  uint64_t v378;
  __int128 v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unsigned __int8 v383;
  __int128 v384[3];
  uint64_t v385;
  uint64_t v386;
  __int128 v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unsigned __int8 v391;
  __int128 v392[3];
  uint64_t v393;
  uint64_t v394;
  __int128 v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  unsigned __int8 v399;
  __int128 v400[3];
  __int128 v401[3];
  uint64_t v402;
  _OWORD v403[3];
  __int128 v404[3];
  uint64_t v405;
  uint64_t v406;
  __int128 v407;
  uint64_t v408;
  unint64_t v409;
  uint64_t v410;
  unsigned __int8 v411;
  __int128 v412[3];
  uint64_t v413;
  uint64_t v414;
  __int128 v415;
  uint64_t v416;
  unint64_t v417;
  uint64_t v418;
  unsigned __int8 v419;
  __int128 v420[3];
  __int128 v421[3];
  _BYTE v422[56];
  _QWORD v423[14];
  unint64_t v424[6];
  _BYTE v425[56];
  _BYTE v426[56];
  _QWORD v427[14];
  unint64_t v428[6];
  _BYTE v429[56];
  _BYTE v430[56];
  _BYTE v431[56];
  _QWORD v432[14];
  _QWORD v433[14];
  _OWORD v434[3];
  uint64_t v435;
  _OWORD v436[3];
  uint64_t v437;
  unint64_t v438[2];
  unint64_t v439;
  uint64_t v440;
  unint64_t v441;
  unint64_t v442[6];
  unint64_t v443[4];
  unint64_t v444;
  unint64_t v445;
  unint64_t v446;
  uint64_t v447;
  unint64_t v448;
  uint64_t v449;
  unint64_t v450;
  unint64_t v451;
  uint64_t v452;
  unint64_t v453;
  unint64_t v454[6];
  uint64_t v455;
  unint64_t v456;
  unint64_t v457[6];
  uint64_t v458;
  unint64_t v459;
  unint64_t v460[6];
  uint64_t v461;
  unint64_t v462;
  uint64_t v463;
  unint64_t v464[3];
  uint64_t v465;
  unint64_t v466;
  uint64_t v467;
  unint64_t v468[3];
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  unint64_t v472[3];
  uint64_t v473;
  unint64_t v474;
  uint64_t v475;
  unint64_t v476[3];
  uint64_t v477;
  unint64_t v478;
  uint64_t v479;
  unint64_t v480;
  unint64_t v481[6];
  uint64_t v482;
  unint64_t v483;
  uint64_t v484;
  unint64_t v485[3];
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  unint64_t v489[3];
  uint64_t v490;
  unint64_t v491;
  uint64_t v492;
  unint64_t v493;
  uint64_t v494;
  uint64_t v495;
  unint64_t v496[3];
  uint64_t v497;
  __int128 v498;
  _OWORD v499[2];
  _OWORD v500[4];
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  _OWORD v506[2];
  unint64_t v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t v510;
  uint64_t v511;
  char v512;
  _OWORD v513[4];
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  _OWORD v519[2];
  __int128 v520;
  __int128 v521;
  __int128 v522;
  NSObject *v523;
  _QWORD v524[5];
  char v525;
  uint64_t v526;
  __int128 v527;
  uint64_t v528;
  unint64_t v529;
  uint64_t v530;
  char v531;
  uint64_t v532;
  unint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  char v538;
  unint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  char v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  char v550;
  unint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  char v556;
  unint64_t v557;
  uint64_t v558;
  uint64_t v559;
  unint64_t v560;
  uint64_t v561;
  char v562;
  unint64_t v563;
  uint64_t v564;
  uint64_t v565;
  unint64_t v566;
  uint64_t v567;
  char v568;
  unint64_t v569;
  _QWORD v570[3];
  uint64_t v571;

  v2 = MEMORY[0x24BDAC7A8](a1);
  v311 = v4;
  v312 = v3;
  v6 = v5;
  v7 = (__int128 *)v2;
  v8 = type metadata accessor for Logger();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v266 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v7[1];
  v498 = *v7;
  v499[0] = v12;
  *(_OWORD *)((char *)v499 + 9) = *(__int128 *)((char *)v7 + 25);
  *(_QWORD *)&v338 = 0;
  *((_QWORD *)&v338 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v338 = 0xD000000000000014;
  *((_QWORD *)&v338 + 1) = 0x8000000245FCB4F0;
  v13 = *((_QWORD *)&v499[0] + 1);
  v331._countAndFlagsBits = 1701080942;
  v331._object = (void *)0xE400000000000000;
  *(_QWORD *)&v328[0] = *((_QWORD *)&v499[0] + 1);
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  String.append(_:)(v331);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 39;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  specialized Graph.insertCreateSampler(label:)(&v351);
  swift_bridgeObjectRelease();
  Graph.insertSampleTexture(for:)((uint64_t *)&v498, &v353);
  if (v1)
  {
    outlined init with take of NodePersonality(&v351, &v497);
    v16 = (unint64_t *)&v497;
LABEL_4:
    outlined release of NodePersonality(v16);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v301 = v13;
  v302 = v11;
  v303 = v9;
  v17 = (void *)*((_QWORD *)&v353 + 1);
  v305 = v353;
  v18 = v354;
  v19 = v355;
  v20 = v356;
  v21 = v357;
  ShaderGraphNode.out.getter((uint64_t)v358);
  v298 = v21;
  v296 = v19;
  v297 = v20;
  v294 = v17;
  v295 = v18;
  v279 = v8;
  v23 = *((_QWORD *)&v353 + 1);
  specialized Sequence.first(where:)(*((uint64_t *)&v353 + 1), 0x72656C706D6173, 0xE700000000000000, v359);
  outlined init with take of MetalFunctionNode?((uint64_t)v359, (uint64_t)v434, (uint64_t *)&demangling cache variable for type metadata for Input?);
  if (!*((_QWORD *)&v434[0] + 1))
  {
    outlined init with take of NodePersonality(&v353, v496);
    v495 = v354;
    v331._countAndFlagsBits = v305;
    v331._object = v294;
    v332 = v295;
    v333 = v296;
    v334 = v297;
    v335 = v298;
    v336 = 0x72656C706D6173;
    v337 = 0xE700000000000000;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v331);
    outlined init with take of UserGraphError.ErrorType((__int128 *)&v331._countAndFlagsBits, (uint64_t)&v338);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v350 = 0uLL;
    swift_allocError();
    *v191 = v338;
    v192 = v342;
    v194 = v339;
    v193 = v340;
    v191[3] = v341;
    v191[4] = v192;
    v191[1] = v194;
    v191[2] = v193;
    v195 = v346;
    v197 = v343;
    v196 = v344;
    v191[7] = v345;
    v191[8] = v195;
    v191[5] = v197;
    v191[6] = v196;
    v198 = v350;
    v200 = v347;
    v199 = v348;
    v191[11] = v349;
    v191[12] = v198;
    v191[9] = v200;
    v191[10] = v199;
    swift_bridgeObjectRetain();
    outlined retain of NodePersonality(v496);
    outlined retain of [Input]((uint64_t)&v495);
    swift_willThrow();
    swift_release();
    swift_bridgeObjectRelease();
    outlined release of NodePersonality(v496);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with take of NodePersonality(&v351, &v494);
    v16 = (unint64_t *)&v494;
    goto LABEL_4;
  }
  v306 = 0;
  v300 = v23;
  v436[0] = v434[0];
  v436[1] = v434[1];
  v436[2] = v434[2];
  v437 = v435;
  v316 = v6;
  Graph.connect(_:to:)((uint64_t)v358, (unint64_t)v436);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v330 = MEMORY[0x24BEE4B08];
  v24 = *((_QWORD *)&v498 + 1);
  v315 = specialized Array._getCount()(*((_QWORD *)&v498 + 1));
  if (!v315)
  {
    v292 = 0;
    v293 = 0;
    v299 = 0;
    v326 = 0;
    v283 = 0;
    v284 = 0;
    v286 = 0;
    v287 = 0;
    v281 = 0;
    v282 = 0;
    v285 = 0;
    v289 = 0;
    v290 = 0;
    v288 = 0;
    v291 = 0;
    goto LABEL_292;
  }
  v313 = v24 + 32;
  v270 = &v414;
  p_object = &v331._object;
  v269 = &v406;
  v272 = &v394;
  v273 = &v386;
  v274 = &v378;
  v275 = &v370;
  swift_bridgeObjectRetain();
  v292 = 0;
  v293 = 0;
  v299 = 0;
  v278 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v283 = 0;
  v284 = 0;
  v286 = 0;
  v287 = 0;
  v281 = 0;
  v282 = 0;
  v285 = 0;
  v289 = 0;
  v290 = 0;
  v288 = 0;
  v291 = 0;
  v28 = 0;
  v276 = (_QWORD *)(v300 + 136);
  v280 = xmmword_245FC2020;
  v277 = xmmword_245FBECD0;
  v267 = xmmword_245FC2030;
  v266[1] = MEMORY[0x24BEE4AD8] + 8;
  v271 = 0xE900000000000070;
  v314 = v24;
  while (1)
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v28, 1, v24);
    v29 = v313 + 56 * v28;
    v31 = *(_QWORD *)v29;
    v30 = *(_QWORD *)(v29 + 8);
    v33 = *(_QWORD *)(v29 + 16);
    v32 = *(_QWORD *)(v29 + 24);
    v34 = *(_QWORD *)(v29 + 32);
    v35 = *(unsigned __int8 *)(v29 + 40);
    v36 = *(NSObject **)(v29 + 48);
    *(_QWORD *)&v520 = v31;
    v327 = v30;
    *((_QWORD *)&v520 + 1) = v30;
    v322 = v33;
    *(_QWORD *)&v521 = v33;
    *((_QWORD *)&v521 + 1) = v32;
    LODWORD(v318) = v35;
    BYTE8(v522) = v35;
    *(_QWORD *)&v522 = v34;
    v320 = v36;
    v523 = v36;
    v37 = __OFADD__(v28, 1);
    v38 = v28 + 1;
    if (v37)
    {
      __break(1u);
      goto LABEL_313;
    }
    v323 = v38;
    v571 = v32;
    v324 = v26;
    v325 = v27;
    v39 = *(_OWORD *)(v316 + 80);
    v328[4] = *(_OWORD *)(v316 + 64);
    v328[5] = v39;
    v40 = *(_OWORD *)(v316 + 48);
    v328[2] = *(_OWORD *)(v316 + 32);
    v328[3] = v40;
    *(_OWORD *)((char *)v329 + 9) = *(_OWORD *)(v316 + 153);
    v41 = *(_OWORD *)(v316 + 144);
    v328[8] = *(_OWORD *)(v316 + 128);
    v329[0] = v41;
    v42 = *(_OWORD *)(v316 + 112);
    v328[6] = *(_OWORD *)(v316 + 96);
    v328[7] = v42;
    v43 = *(_OWORD *)(v316 + 16);
    v328[0] = *(_OWORD *)v316;
    v328[1] = v43;
    v44 = *(_QWORD *)&v328[0];
    v45 = (_QWORD *)(*((_QWORD *)&v328[0] + 1) + 32);
    v46 = v43;
    v326 = v25;
    if (*(_QWORD *)&v328[0])
      break;
    v51 = *(_QWORD *)(*((_QWORD *)&v328[0] + 1) + 16);
    if (v51)
    {
      if (*v45 == v31)
      {
        v50.value = 0;
        goto LABEL_23;
      }
      v27 = v325;
      v26 = v324;
      if (v51 != 1)
      {
        if (*(_QWORD *)(*((_QWORD *)&v328[0] + 1) + 40) == v31)
        {
          v50.value = 1;
          goto LABEL_23;
        }
        if (v51 != 2)
        {
          if (*(_QWORD *)(*((_QWORD *)&v328[0] + 1) + 48) == v31)
          {
            v50.value = 2;
            goto LABEL_23;
          }
          if (v51 != 3)
          {
            if (*(_QWORD *)(*((_QWORD *)&v328[0] + 1) + 56) == v31)
            {
              v50.value = 3;
            }
            else
            {
              v120 = 0;
              v121 = v51 - 4;
              do
              {
                if (v121 == v120)
                  goto LABEL_83;
                v122 = *(_QWORD *)(*((_QWORD *)&v328[0] + 1) + 64 + 8 * v120++);
              }
              while (v122 != v31);
              v50.value = v120 + 3;
              if (v120 + 3 < 0)
                goto LABEL_319;
            }
            goto LABEL_23;
          }
        }
      }
    }
    else
    {
      v27 = v325;
      v26 = v324;
    }
LABEL_83:
    swift_bridgeObjectRetain_n();
    swift_retain();
    outlined retain of Graph((uint64_t)v328);
LABEL_89:
    outlined release of Graph((uint64_t)v328);
    swift_release();
    swift_bridgeObjectRelease_n();
LABEL_90:
    v28 = v323;
    if (v323 == v315)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v299)
      {
        v201 = v293;
        v507 = v293;
        v508 = v299;
        v202 = v278;
        v509 = v278;
        v510 = v25;
        v511 = v26;
        v512 = v27 & 1;
        outlined copy of NodePersonality(v293);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v203 = v306;
        ShaderGraphNode.subscript.getter(0x6E696D5F646F6CLL, 0xE700000000000000, (uint64_t)v422);
        if (v203)
        {
          outlined consume of NodePersonality(v201);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of ShaderGraphNode?(v283, v286);
          outlined consume of ShaderGraphNode?(v289, v292);
          outlined init with take of NodePersonality(&v353, &v445);
          outlined release of NodePersonality(&v445);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined init with take of NodePersonality(&v351, &v444);
          outlined release of NodePersonality(&v444);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of NodePersonality(v201);
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        v278 = v202;
        v34 = 0;
        v326 = v25;
        v324 = v26;
        v325 = v27;
        v205 = *(_OWORD *)(v316 + 144);
        v518 = *(_OWORD *)(v316 + 128);
        v519[0] = v205;
        *(_OWORD *)((char *)v519 + 9) = *(_OWORD *)(v316 + 153);
        v206 = *(_OWORD *)(v316 + 80);
        v514 = *(_OWORD *)(v316 + 64);
        v515 = v206;
        v207 = *(_OWORD *)(v316 + 96);
        v517 = *(_OWORD *)(v316 + 112);
        v516 = v207;
        v208 = *(_OWORD *)(v316 + 16);
        v513[0] = *(_OWORD *)v316;
        v513[1] = v208;
        v209 = *(_OWORD *)(v316 + 32);
        v513[3] = *(_OWORD *)(v316 + 48);
        v513[2] = v209;
        outlined retain of Graph((uint64_t)v513);
        Graph.edge(to:)((uint64_t)v422, v423);
        v210 = v423[0];
        outlined init with take of MetalFunctionNode?((uint64_t)v423, (uint64_t)v433, &demangling cache variable for type metadata for Edge?);
        if (v433[1])
        {
          if (v210 != -7)
          {
            v217 = v514;
            specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v210, 1, v514);
            v218 = *(_QWORD *)(v217 + 48 * v210 + 32);
            outlined copy of NodePersonality(v218);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            outlined release of Graph((uint64_t)v513);
            v219 = v293;
            outlined consume of NodePersonality(v218);
            swift_bridgeObjectRelease();
LABEL_302:
            swift_bridgeObjectRelease();
            ShaderGraphNode.subscript.getter(0x78616D5F646F6CLL, 0xE700000000000000, (uint64_t)v426);
            v293 = v219;
            v220 = *(_OWORD *)(v316 + 144);
            v505 = *(_OWORD *)(v316 + 128);
            v506[0] = v220;
            *(_OWORD *)((char *)v506 + 9) = *(_OWORD *)(v316 + 153);
            v221 = *(_OWORD *)(v316 + 80);
            v501 = *(_OWORD *)(v316 + 64);
            v502 = v221;
            v222 = *(_OWORD *)(v316 + 96);
            v504 = *(_OWORD *)(v316 + 112);
            v503 = v222;
            v223 = *(_OWORD *)(v316 + 16);
            v500[0] = *(_OWORD *)v316;
            v500[1] = v223;
            v224 = *(_OWORD *)(v316 + 32);
            v500[3] = *(_OWORD *)(v316 + 48);
            v500[2] = v224;
            outlined retain of Graph((uint64_t)v500);
            Graph.edge(to:)((uint64_t)v426, v427);
            v27 = v427[0];
            outlined init with take of MetalFunctionNode?((uint64_t)v427, (uint64_t)v432, &demangling cache variable for type metadata for Edge?);
            if (!v432[1])
            {
LABEL_305:
              outlined release of Graph((uint64_t)v500);
              if (one-time initialization token for float != -1)
                swift_once();
              v225 = static MetalDataType.float;
              v226 = specialized static Array._allocateUninitialized(_:)(0);
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
              v227 = swift_allocObject();
              *(_OWORD *)(v227 + 16) = v277;
              *(_QWORD *)(v227 + 32) = 7632239;
              *(_QWORD *)(v227 + 40) = 0xE300000000000000;
              *(_QWORD *)(v227 + 48) = v225;
              v228 = swift_allocObject();
              *(_QWORD *)(v228 + 16) = 1232348144;
              *(_OWORD *)(v228 + 24) = 0u;
              *(_OWORD *)(v228 + 40) = 0u;
              *(_OWORD *)(v228 + 56) = 0u;
              *(_QWORD *)(v228 + 72) = 0;
              *(_BYTE *)(v228 + 80) = 5;
              *(_QWORD *)(v228 + 88) = v225;
              v229 = v316;
              v230 = *(_QWORD *)(v316 + 40);
              swift_retain_n();
              specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v230, v226, v227, v228, v229 + 64, v229, v428);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
              ShaderGraphNode.out.getter((uint64_t)v429);
              v306 = 0;
              Graph.connect(_:to:)((uint64_t)v429, (unint64_t)v426);
              swift_release();
              swift_bridgeObjectRelease();
              swift_release();
              swift_bridgeObjectRelease();
              outlined consume of NodePersonality(v293);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
              swift_bridgeObjectRelease();
              outlined init with take of NodePersonality(v428, v442);
              outlined release of NodePersonality(v442);
              swift_bridgeObjectRelease();
              goto LABEL_314;
            }
            if (v27 == -7)
            {
              swift_bridgeObjectRelease();
              swift_release();
              swift_bridgeObjectRelease();
              swift_release();
              goto LABEL_305;
            }
LABEL_313:
            v306 = v34;
            v243 = v501;
            specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v27, 1, v501);
            v244 = *(_QWORD *)(v243 + 48 * v27 + 32);
            outlined copy of NodePersonality(v244);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            outlined release of Graph((uint64_t)v500);
            outlined consume of NodePersonality(v244);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            outlined consume of NodePersonality(v293);
            swift_bridgeObjectRelease();
LABEL_314:
            swift_bridgeObjectRelease();
            goto LABEL_292;
          }
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
        }
        outlined release of Graph((uint64_t)v513);
        if (one-time initialization token for float != -1)
          swift_once();
        v211 = static MetalDataType.float;
        v212 = specialized static Array._allocateUninitialized(_:)(0);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
        v213 = swift_allocObject();
        *(_OWORD *)(v213 + 16) = v277;
        *(_QWORD *)(v213 + 32) = 7632239;
        *(_QWORD *)(v213 + 40) = 0xE300000000000000;
        *(_QWORD *)(v213 + 48) = v211;
        v214 = swift_allocObject();
        *(_OWORD *)(v214 + 16) = 0u;
        *(_OWORD *)(v214 + 32) = 0u;
        *(_OWORD *)(v214 + 48) = 0u;
        *(_OWORD *)(v214 + 64) = 0u;
        *(_BYTE *)(v214 + 80) = 5;
        *(_QWORD *)(v214 + 88) = v211;
        v215 = v316;
        v216 = *(_QWORD *)(v316 + 40);
        swift_retain_n();
        specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v216, v212, v213, v214, v215 + 64, v215, v424);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        ShaderGraphNode.out.getter((uint64_t)v425);
        Graph.connect(_:to:)((uint64_t)v425, (unint64_t)v422);
        swift_release();
        swift_bridgeObjectRelease();
        outlined init with take of NodePersonality(v424, v443);
        outlined release of NodePersonality(v443);
        swift_bridgeObjectRelease();
        v219 = v293;
        goto LABEL_302;
      }
      v326 = v25;
      v299 = 0;
LABEL_292:
      outlined init with take of NodePersonality(&v353, &v441);
      v440 = v354;
      swift_bridgeObjectRetain();
      outlined retain of NodePersonality(&v441);
      outlined retain of [Input]((uint64_t)&v440);
      v204 = v306;
      ShaderGraphNode.out.getter((uint64_t)v430);
      if (!v204)
      {
        ShaderGraphNode.out.getter((uint64_t)v431);
        Graph.moveEdges(from:to:)((uint64_t)v430, (uint64_t)v431);
        outlined consume of ShaderGraphNode?(v293, v299);
        outlined consume of ShaderGraphNode?(v283, v286);
        outlined consume of ShaderGraphNode?(v289, v292);
        outlined release of NodePersonality(&v441);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined init with take of NodePersonality(&v351, v438);
        outlined release of NodePersonality(v438);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        outlined release of NodePersonality(&v441);
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      outlined consume of ShaderGraphNode?(v293, v299);
      outlined consume of ShaderGraphNode?(v283, v286);
      outlined consume of ShaderGraphNode?(v289, v292);
      outlined release of NodePersonality(&v441);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined init with take of NodePersonality(&v351, &v439);
      outlined release of NodePersonality(&v439);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of NodePersonality(&v441);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v31);
  v47 = Hasher._finalize()();
  v48 = 1 << *(_QWORD *)(v44 + 16);
  v37 = __OFSUB__(v48, 1);
  v49 = v48 - 1;
  if (v37)
  {
    __break(1u);
LABEL_316:
    swift_bridgeObjectRetain_n();
    goto LABEL_317;
  }
  v50.value = _HashTable.UnsafeHandle.startFind(_:)((uint64_t)&v338, v49 & v47, (_QWORD *)(v44 + 16), v44 + 32);
  if (v50.is_nil)
  {
    v24 = v314;
    v27 = v325;
LABEL_21:
    swift_bridgeObjectRetain_n();
    swift_retain();
    outlined retain of Graph((uint64_t)v328);
    v26 = v324;
    v25 = v326;
    goto LABEL_89;
  }
  v24 = v314;
  v27 = v325;
  while (v45[v50.value] != v31)
  {
    v50 = _HashTable.BucketIterator.findNext()();
    if (v50.is_nil)
      goto LABEL_21;
  }
  v25 = v326;
  if (v50.value < 0)
    goto LABEL_319;
LABEL_23:
  if (v50.value >= *(_QWORD *)(v46 + 16))
  {
    __break(1u);
LABEL_319:
    __break(1u);
LABEL_320:
    __break(1u);
LABEL_321:
    __break(1u);
LABEL_322:
    outlined init with take of NodePersonality(&v351, &v456);
    outlined release of NodePersonality(&v456);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of ShaderGraphNode?(v289, v292);
    outlined consume of ShaderGraphNode?(v283, v286);
    outlined consume of ShaderGraphNode?(v25, v299);
    swift_bridgeObjectRelease();
    swift_release();
    outlined init with take of NodePersonality(&v353, &v455);
    v242 = (unint64_t *)&v455;
    goto LABEL_326;
  }
  v52 = (_QWORD *)(v46 + 48 * v50.value);
  v54 = v52[7];
  v53 = v52[8];
  v55 = v52[9];
  v56 = *(_QWORD *)(v53 + 16);
  v310 = (_OWORD *)v53;
  if (v54)
  {
    v25 = v53 + 32;
    swift_bridgeObjectRetain_n();
    v57 = v327;
    swift_retain_n();
    outlined retain of Graph((uint64_t)v328);
    swift_retain();
    swift_retain();
    swift_retain();
    v58 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v520, v53 + 32, v56, (_QWORD *)(v54 + 16), v54 + 32);
    v59 = v55;
    if ((v60 & 1) == 0)
    {
      v61 = v58;
      v62 = v571;
      v63 = v306;
      v27 = v325;
      v24 = v314;
      if ((v58 & 0x8000000000000000) == 0)
        goto LABEL_27;
      goto LABEL_320;
    }
    v307 = v54;
    v308 = v55;
    v25 = v326;
    goto LABEL_88;
  }
  v307 = 0;
  v308 = v55;
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  outlined retain of Graph((uint64_t)v328);
  if (!v56)
  {
    swift_retain();
    swift_retain();
LABEL_88:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v24 = v314;
    v27 = v325;
    v26 = v324;
    goto LABEL_89;
  }
  v89 = v56;
  LODWORD(v304) = v318 ^ 1;
  swift_retain();
  swift_retain();
  v90 = v53;
  v61 = 0;
  v91 = (void **)(v90 + 80);
  v309 = v89;
  while (1)
  {
    if (*(v91 - 6) != (void *)v31)
      goto LABEL_65;
    v92 = (uint64_t)*(v91 - 5);
    v93 = (uint64_t)*(v91 - 4);
    v94 = (uint64_t)*(v91 - 3);
    v317 = (uint64_t)*(v91 - 2);
    LODWORD(v321) = *((unsigned __int8 *)v91 - 8);
    v319 = *v91;
    v95 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v92 + 128);
    swift_retain();
    swift_bridgeObjectRetain();
    if ((v95(v327) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v25 = v326;
      goto LABEL_65;
    }
    v96 = v34;
    v97 = v571;
    if (v93 == v322 && v94 == v571)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v25 = v326;
      v62 = v97;
      v34 = v96;
      v89 = v309;
    }
    else
    {
      v98 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_release();
      v25 = v326;
      v62 = v97;
      v34 = v96;
      v89 = v309;
      if ((v98 & 1) == 0)
        goto LABEL_65;
    }
    if ((v321 & 1) == 0)
      break;
    v99 = v318;
    if (v319 != v320)
      v99 = 0;
    if ((v99 & 1) != 0)
      goto LABEL_81;
LABEL_65:
    v91 += 7;
    if (v89 == ++v61)
      goto LABEL_88;
  }
  v100 = v304;
  if (v317 != v34)
    v100 = 0;
  if (v100 != 1 || v319 != v320)
    goto LABEL_65;
LABEL_81:
  v63 = v306;
  v24 = v314;
  v27 = v325;
  v57 = v327;
  v59 = v308;
LABEL_27:
  v306 = v63;
  if (v61 >= *(_QWORD *)(v59 + 16))
    goto LABEL_321;
  v64 = v59 + 56 * v61;
  v65 = *(_QWORD *)(v64 + 40);
  outlined copy of Output?(*(_QWORD *)(v64 + 32), v65);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (!v65)
  {
    v26 = v324;
    v25 = v326;
    goto LABEL_89;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  outlined release of Graph((uint64_t)v328);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v66 = swift_allocObject();
  v67 = (_QWORD *)v66;
  *(_OWORD *)(v66 + 16) = v280;
  *(_QWORD *)(v66 + 32) = 1935763810;
  *(_QWORD *)(v66 + 40) = 0xE400000000000000;
  *(_QWORD *)(v66 + 48) = 0x6C6576656CLL;
  *(_QWORD *)(v66 + 56) = 0xE500000000000000;
  *(_QWORD *)(v66 + 64) = 0x746E656964617267;
  *(_QWORD *)(v66 + 72) = 0xEA00000000006432;
  *(_QWORD *)(v66 + 80) = 0x746E656964617267;
  *(_QWORD *)(v66 + 88) = 0xEA00000000006433;
  v68 = v322;
  v69 = v322 == 1935763810 && v62 == 0xE400000000000000;
  v70 = v69;
  strcpy((char *)(v66 + 96), "min_lod_clamp");
  *(_WORD *)(v66 + 110) = -4864;
  if (!v69)
  {
    v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v68 = v322;
    if ((v71 & 1) == 0 && (v322 != 0x6C6576656CLL || v62 != 0xE500000000000000))
    {
      v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v68 = v322;
      if ((v72 & 1) == 0 && (v67[8] != v322 || v67[9] != v62))
      {
        v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v68 = v322;
        if ((v73 & 1) == 0 && (v67[10] != v322 || v67[11] != v62))
        {
          v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v68 = v322;
          if ((v74 & 1) == 0 && (v67[12] != v322 || v67[13] != v62))
          {
            v75 = _stringCompareWithSmolCheck(_:_:expecting:)();
            v68 = v322;
            if ((v75 & 1) == 0)
            {
LABEL_54:
              swift_bridgeObjectRelease();
              v81 = v312;
              if (v322 == 1701603686 && v62 == 0xE400000000000000
                || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                v82 = v300;
                v320 = specialized Array._getCount()(v300);
                if (v320)
                {
                  v83 = *(_QWORD *)(v82 + 40);
                  v322 = *(_QWORD *)(v82 + 32);
                  v84 = *(_QWORD *)(v82 + 48);
                  v85 = *(_QWORD *)(v82 + 56);
                  v86 = *(_QWORD *)(v82 + 64);
                  v87 = *(_BYTE *)(v82 + 72);
                  v88 = *(_QWORD *)(v82 + 80);
                  if (v84 == 0x65727574786574 && v85 == 0xE700000000000000)
                  {
                    v321 = v88;
                    swift_bridgeObjectRetain_n();
                    swift_retain();
                    v85 = 0xE700000000000000;
                    swift_bridgeObjectRetain();
                    v84 = 0x65727574786574;
LABEL_147:
                    v524[0] = v322;
                    v524[1] = v83;
                    v524[2] = v84;
                    v524[3] = v85;
                    v525 = v87;
                    v524[4] = v86;
                    v526 = v321;
                    swift_bridgeObjectRelease_n();
                    v125 = v306;
                    Graph.convertFilenameInput(_:movingTo:textureAssignments:customUniformsType:)((uint64_t *)&v520, (unint64_t)v524, v81, v311);
                    v27 = v325;
                    v26 = v324;
                    v306 = v125;
                    if (v125)
                    {
                      swift_bridgeObjectRelease();
                      swift_release();
                      outlined init with take of NodePersonality(&v351, &v450);
                      outlined release of NodePersonality(&v450);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      outlined consume of ShaderGraphNode?(v289, v292);
                      outlined consume of ShaderGraphNode?(v283, v286);
                      outlined consume of ShaderGraphNode?(v293, v299);
                      swift_bridgeObjectRelease();
                      swift_release();
                      outlined init with take of NodePersonality(&v353, &v449);
                      v242 = (unint64_t *)&v449;
                      goto LABEL_326;
                    }
                    swift_bridgeObjectRelease();
                    swift_release();
                    swift_bridgeObjectRelease();
                    swift_release();
LABEL_149:
                    v24 = v314;
                    goto LABEL_150;
                  }
                  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    v321 = v88;
                    swift_bridgeObjectRetain_n();
                    swift_retain();
                    swift_bridgeObjectRetain();
                    goto LABEL_147;
                  }
                  swift_bridgeObjectRetain_n();
                  if (v320 != 1)
                  {
                    v114 = 1;
                    v115 = v276;
                    while (1)
                    {
                      v116 = (v114 + 1);
                      if (__OFADD__(v114, 1))
                        break;
                      v117 = *(v115 - 6);
                      v118 = *(v115 - 5);
                      v84 = *(v115 - 4);
                      v85 = *(v115 - 3);
                      v86 = *(v115 - 2);
                      v87 = *((_BYTE *)v115 - 8);
                      v321 = *v115;
                      v322 = v117;
                      if (v84 == 0x65727574786574 && v85 == 0xE700000000000000)
                      {
                        v83 = v118;
                        swift_retain();
                        v85 = 0xE700000000000000;
                        swift_bridgeObjectRetain();
                        v84 = 0x65727574786574;
LABEL_146:
                        v81 = v312;
                        goto LABEL_147;
                      }
                      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      {
                        v83 = v118;
                        swift_retain();
                        swift_bridgeObjectRetain();
                        goto LABEL_146;
                      }
                      v115 += 7;
                      ++v114;
                      if (v116 == v320)
                        goto LABEL_309;
                    }
                    __break(1u);
                    goto LABEL_324;
                  }
                }
                else
                {
                  swift_bridgeObjectRetain_n();
                }
LABEL_309:
                swift_bridgeObjectRelease_n();
                outlined init with take of NodePersonality(&v353, &v448);
                v447 = v354;
                v331._countAndFlagsBits = v305;
                v331._object = v294;
                v332 = v295;
                v333 = v296;
                v334 = v297;
                v335 = v298;
                v336 = 0x65727574786574;
                v337 = 0xE700000000000000;
                _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v331);
                outlined init with take of UserGraphError.ErrorType((__int128 *)&v331._countAndFlagsBits, (uint64_t)&v338);
                lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
                v350 = 0uLL;
                swift_allocError();
                *v231 = v338;
                v232 = v342;
                v234 = v339;
                v233 = v340;
                v231[3] = v341;
                v231[4] = v232;
                v231[1] = v234;
                v231[2] = v233;
                v235 = v346;
                v237 = v343;
                v236 = v344;
                v231[7] = v345;
                v231[8] = v235;
                v231[5] = v237;
                v231[6] = v236;
                v238 = v350;
                v240 = v347;
                v239 = v348;
                v231[11] = v349;
                v231[12] = v238;
                v231[9] = v240;
                v231[10] = v239;
                swift_bridgeObjectRetain();
                outlined retain of NodePersonality(&v448);
                outlined retain of [Input]((uint64_t)&v447);
                swift_willThrow();
                outlined init with take of NodePersonality(&v351, &v446);
                outlined release of NodePersonality(&v446);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined consume of ShaderGraphNode?(v289, v292);
                outlined consume of ShaderGraphNode?(v283, v286);
                outlined consume of ShaderGraphNode?(v293, v299);
                swift_bridgeObjectRelease();
                swift_release();
                v241 = &v448;
LABEL_310:
                outlined release of NodePersonality(v241);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                return swift_bridgeObjectRelease();
              }
              if (v322 == 0x64726F6F63786574 && v62 == 0xE800000000000000
                || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                v107 = v300;
                v321 = specialized Array._getCount()(v300);
                if (!v321)
                  goto LABEL_316;
                v109 = *(NSObject **)(v107 + 32);
                v108 = *(_QWORD *)(v107 + 40);
                v110 = *(_QWORD *)(v107 + 48);
                v111 = *(_QWORD *)(v107 + 56);
                v112 = *(_QWORD *)(v107 + 64);
                v113 = *(_BYTE *)(v107 + 72);
                v322 = *(_QWORD *)(v107 + 80);
                if (v110 == 0x64726F6F63 && v111 == 0xE500000000000000)
                {
                  swift_bridgeObjectRetain_n();
                  swift_retain();
                  v111 = 0xE500000000000000;
                  swift_bridgeObjectRetain();
                  v110 = 0x64726F6F63;
LABEL_132:
                  *(_QWORD *)&v527 = v109;
                  *((_QWORD *)&v527 + 1) = v108;
                  v528 = v110;
                  v529 = v111;
                  v531 = v113;
                  v530 = v112;
                  v532 = v322;
                  swift_bridgeObjectRelease_n();
                  Graph.moveEdge(from:to:)((uint64_t)&v520, &v527);
                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_release();
                  v24 = v314;
                  v27 = v325;
                  v26 = v324;
                  v25 = v326;
                  goto LABEL_90;
                }
                if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRetain_n();
                  swift_retain();
                  swift_bridgeObjectRetain();
                  goto LABEL_132;
                }
                swift_bridgeObjectRetain_n();
                if (v321 != 1)
                {
                  v126 = 1;
                  v127 = v276;
                  while (1)
                  {
                    v128 = v126 + 1;
                    if (__OFADD__(v126, 1))
                      break;
                    v108 = *(v127 - 5);
                    v320 = *(v127 - 6);
                    v110 = *(v127 - 4);
                    v111 = *(v127 - 3);
                    v129 = *(v127 - 2);
                    v113 = *((_BYTE *)v127 - 8);
                    v322 = *v127;
                    if (v110 == 0x64726F6F63 && v111 == 0xE500000000000000)
                    {
                      swift_retain();
                      v111 = 0xE500000000000000;
                      swift_bridgeObjectRetain();
                      v110 = 0x64726F6F63;
LABEL_168:
                      v112 = v129;
                      v109 = v320;
                      goto LABEL_132;
                    }
                    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      swift_retain();
                      swift_bridgeObjectRetain();
                      goto LABEL_168;
                    }
                    v127 += 7;
                    ++v126;
                    if (v128 == v321)
                      goto LABEL_317;
                  }
                  __break(1u);
LABEL_328:
                  outlined init with take of NodePersonality(&v351, &v462);
                  outlined release of NodePersonality(&v462);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  outlined consume of ShaderGraphNode?(v289, v292);
                  outlined consume of ShaderGraphNode?(v283, v286);
                  outlined consume of ShaderGraphNode?(v293, v299);
                  swift_bridgeObjectRelease();
                  swift_release();
                  outlined init with take of NodePersonality(&v353, &v461);
                  v242 = (unint64_t *)&v461;
                  goto LABEL_326;
                }
LABEL_317:
                swift_bridgeObjectRelease_n();
                outlined init with take of NodePersonality(&v353, &v453);
                v452 = v354;
                v331._countAndFlagsBits = v305;
                v331._object = v294;
                v332 = v295;
                v333 = v296;
                v334 = v297;
                v335 = v298;
                v336 = 0x64726F6F63;
                v337 = 0xE500000000000000;
                _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v331);
                outlined init with take of UserGraphError.ErrorType((__int128 *)&v331._countAndFlagsBits, (uint64_t)&v338);
                lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
                v350 = 0uLL;
                swift_allocError();
                *v245 = v338;
                v246 = v342;
                v248 = v339;
                v247 = v340;
                v245[3] = v341;
                v245[4] = v246;
                v245[1] = v248;
                v245[2] = v247;
                v249 = v346;
                v251 = v343;
                v250 = v344;
                v245[7] = v345;
                v245[8] = v249;
                v245[5] = v251;
                v245[6] = v250;
                v252 = v350;
                v254 = v347;
                v253 = v348;
                v245[11] = v349;
                v245[12] = v252;
                v245[9] = v254;
                v245[10] = v253;
                swift_bridgeObjectRetain();
                outlined retain of NodePersonality(&v453);
                outlined retain of [Input]((uint64_t)&v452);
                swift_willThrow();
                outlined init with take of NodePersonality(&v351, &v451);
                outlined release of NodePersonality(&v451);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined consume of ShaderGraphNode?(v289, v292);
                outlined consume of ShaderGraphNode?(v283, v286);
                outlined consume of ShaderGraphNode?(v293, v299);
                swift_bridgeObjectRelease();
                swift_release();
                v241 = &v453;
                goto LABEL_310;
              }
              if (v322 == 0x6C6576656CLL && v62 == 0xE500000000000000
                || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                v123 = v306;
                ShaderGraphNode.subscript.getter(0x6C6576656CLL, 0xE500000000000000, (uint64_t)&v360);
                v25 = v293;
                v27 = v325;
                v26 = v324;
                if (v123)
                  goto LABEL_322;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
                v124 = swift_allocObject();
                *(_OWORD *)(v124 + 16) = v277;
                *(_QWORD *)(v124 + 32) = 28265;
                *(_QWORD *)(v124 + 40) = 0xE200000000000000;
                *(_QWORD *)(v124 + 48) = v57;
                swift_retain();
                specialized Input.prependFunction(_:label:arguments:in:)(0x6C6576656CLL, 0xE500000000000000, v124, v316, v361);
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                ShaderGraphNode.subscript.getter(28265, 0xE200000000000000, (uint64_t)v362);
                v306 = 0;
                Graph.moveEdge(from:to:)((uint64_t)&v520, v362);
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                outlined init with take of NodePersonality(v361, v454);
                outlined release of NodePersonality(v454);
                swift_bridgeObjectRelease();
                goto LABEL_143;
              }
              v27 = v325;
              v26 = v324;
              if ((v70 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                v131 = v306;
                ShaderGraphNode.subscript.getter(1935763810, 0xE400000000000000, (uint64_t)&v363);
                if (v131)
                  goto LABEL_325;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
                v132 = swift_allocObject();
                *(_OWORD *)(v132 + 16) = v277;
                *(_QWORD *)(v132 + 32) = 28265;
                *(_QWORD *)(v132 + 40) = 0xE200000000000000;
                *(_QWORD *)(v132 + 48) = v57;
                swift_retain();
                specialized Input.prependFunction(_:label:arguments:in:)(1935763810, 0xE400000000000000, v132, v316, v364);
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                ShaderGraphNode.subscript.getter(28265, 0xE200000000000000, (uint64_t)v365);
                v306 = 0;
                Graph.moveEdge(from:to:)((uint64_t)&v520, v365);
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                outlined init with take of NodePersonality(v364, v457);
                outlined release of NodePersonality(v457);
                swift_bridgeObjectRelease();
LABEL_143:
                swift_bridgeObjectRelease();
                v24 = v314;
                v25 = v326;
                goto LABEL_90;
              }
              if (v322 == 0x5F646F6C5F6E696DLL && v62 == 0xED0000706D616C63
                || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                v133 = v306;
                ShaderGraphNode.subscript.getter(0x5F646F6C5F6E696DLL, 0xED0000706D616C63, (uint64_t)&v366);
                if (v133)
                  goto LABEL_328;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
                v134 = swift_allocObject();
                *(_OWORD *)(v134 + 16) = v277;
                *(_QWORD *)(v134 + 32) = 28265;
                *(_QWORD *)(v134 + 40) = 0xE200000000000000;
                *(_QWORD *)(v134 + 48) = v57;
                swift_retain();
                specialized Input.prependFunction(_:label:arguments:in:)(0x5F646F6C5F6E696DLL, 0xED0000706D616C63, v134, v316, v367);
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                ShaderGraphNode.subscript.getter(28265, 0xE200000000000000, (uint64_t)v368);
                v306 = 0;
                Graph.moveEdge(from:to:)((uint64_t)&v520, v368);
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                outlined init with take of NodePersonality(v367, v460);
                outlined release of NodePersonality(v460);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_149;
              }
              if (v322 == 0x746E656964617267 && v62 == 0xEC000000785F6432
                || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                if (v292)
                {
                  v291 &= 1u;
LABEL_181:
                  v533 = v289;
                  v534 = v292;
                  v535 = v290;
                  v536 = v287;
                  v537 = v288;
                  v538 = v291;
                  outlined copy of NodePersonality(v289);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v136 = v306;
                  ShaderGraphNode.subscript.getter(2019840100, 0xE400000000000000, (uint64_t)v376);
                  if (v136)
                  {
                    outlined init with take of NodePersonality(&v351, v464);
                    outlined release of NodePersonality(v464);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    v255 = v289;
                    outlined consume of NodePersonality(v289);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    outlined consume of NodePersonality(v255);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    outlined consume of ShaderGraphNode?(v283, v286);
                    outlined consume of ShaderGraphNode?(v293, v299);
                    swift_bridgeObjectRelease();
                    swift_release();
                    outlined init with take of NodePersonality(&v353, &v463);
                    v242 = (unint64_t *)&v463;
                    goto LABEL_326;
                  }
                  outlined consume of NodePersonality(v289);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  Graph.moveEdge(from:to:)((uint64_t)&v520, v376);
                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_release();
                  goto LABEL_183;
                }
                v135 = v306;
                ShaderGraphNode.subscript.getter(0x746E656964617267, 0xE800000000000000, (uint64_t)&v369);
                v306 = v135;
                if (!v135)
                {
                  Input.prependCreateGradient2DNode(in:)(v316, &v371);
                  v306 = 0;
                  swift_release();
                  swift_bridgeObjectRelease();
                  v291 = v375;
                  v287 = v373;
                  v288 = v374;
                  v292 = *((_QWORD *)&v371 + 1);
                  v289 = v371;
                  v290 = v372;
                  goto LABEL_181;
                }
                outlined init with take of NodePersonality(&v351, &v466);
                outlined release of NodePersonality(&v466);
                swift_bridgeObjectRelease();
                v275 = (uint64_t *)v352;
                v256 = (unint64_t *)&v465;
                goto LABEL_331;
              }
              if (v322 == 0x746E656964617267 && v571 == 0xEC000000795F6432
                || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                if (v292)
                {
                  v291 &= 1u;
                }
                else
                {
                  v137 = v306;
                  ShaderGraphNode.subscript.getter(0x746E656964617267, 0xE800000000000000, (uint64_t)&v377);
                  v306 = v137;
                  if (v137)
                  {
                    outlined init with take of NodePersonality(&v351, &v470);
                    outlined release of NodePersonality(&v470);
                    swift_bridgeObjectRelease();
                    v274 = (uint64_t *)v352;
                    v256 = (unint64_t *)&v469;
LABEL_331:
                    swift_bridgeObjectRelease();
                    v257 = v283;
                    v258 = v286;
LABEL_332:
                    outlined consume of ShaderGraphNode?(v257, v258);
                    v259 = v293;
                    v260 = v299;
LABEL_333:
                    outlined consume of ShaderGraphNode?(v259, v260);
                    swift_bridgeObjectRelease();
                    swift_release();
                    outlined init with take of NodePersonality(&v353, v256);
                    v242 = v256;
                    goto LABEL_326;
                  }
                  Input.prependCreateGradient2DNode(in:)(v316, &v379);
                  v306 = 0;
                  swift_release();
                  swift_bridgeObjectRelease();
                  v291 = v383;
                  v287 = v381;
                  v288 = v382;
                  v292 = *((_QWORD *)&v379 + 1);
                  v289 = v379;
                  v290 = v380;
                }
                v539 = v289;
                v540 = v292;
                v541 = v290;
                v542 = v287;
                v543 = v288;
                v544 = v291;
                outlined copy of NodePersonality(v289);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v138 = v306;
                ShaderGraphNode.subscript.getter(2036617316, 0xE400000000000000, (uint64_t)v384);
                if (v138)
                {
                  outlined init with take of NodePersonality(&v351, v468);
                  outlined release of NodePersonality(v468);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v261 = v289;
                  outlined consume of NodePersonality(v289);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  outlined consume of NodePersonality(v261);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  outlined consume of ShaderGraphNode?(v283, v286);
                  outlined consume of ShaderGraphNode?(v293, v299);
                  swift_bridgeObjectRelease();
                  swift_release();
                  outlined init with take of NodePersonality(&v353, &v467);
                  v242 = (unint64_t *)&v467;
                  goto LABEL_326;
                }
                outlined consume of NodePersonality(v289);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                Graph.moveEdge(from:to:)((uint64_t)&v520, v384);
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                goto LABEL_183;
              }
              if (v322 == 0x746E656964617267 && v571 == 0xEC000000785F6433
                || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                if (v286)
                {
                  v285 &= 1u;
LABEL_200:
                  v545 = v283;
                  v546 = v286;
                  v547 = v284;
                  v548 = v281;
                  v549 = v282;
                  v550 = v285;
                  outlined copy of NodePersonality(v283);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v140 = v306;
                  ShaderGraphNode.subscript.getter(2019840100, 0xE400000000000000, (uint64_t)v392);
                  if (v140)
                  {
                    outlined init with take of NodePersonality(&v351, v472);
                    outlined release of NodePersonality(v472);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    v262 = v283;
                    outlined consume of NodePersonality(v283);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    outlined consume of ShaderGraphNode?(v289, v292);
                    outlined consume of NodePersonality(v262);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    outlined consume of ShaderGraphNode?(v293, v299);
                    swift_bridgeObjectRelease();
                    swift_release();
                    outlined init with take of NodePersonality(&v353, &v471);
                    v242 = (unint64_t *)&v471;
                    goto LABEL_326;
                  }
                  outlined consume of NodePersonality(v283);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  Graph.moveEdge(from:to:)((uint64_t)&v520, v392);
                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_release();
                  goto LABEL_183;
                }
                v139 = v306;
                ShaderGraphNode.subscript.getter(0x746E656964617267, 0xE800000000000000, (uint64_t)&v385);
                v306 = v139;
                if (!v139)
                {
                  Input.prependCreateGradient3DNode(in:)(v316, &v387);
                  v306 = 0;
                  swift_release();
                  swift_bridgeObjectRelease();
                  v285 = v391;
                  v281 = v389;
                  v282 = v390;
                  v286 = *((_QWORD *)&v387 + 1);
                  v283 = v387;
                  v284 = v388;
                  goto LABEL_200;
                }
                outlined init with take of NodePersonality(&v351, &v474);
                outlined release of NodePersonality(&v474);
                swift_bridgeObjectRelease();
                v273 = (uint64_t *)v352;
                v256 = (unint64_t *)&v473;
LABEL_338:
                swift_bridgeObjectRelease();
                v257 = v289;
                v258 = v292;
                goto LABEL_332;
              }
              if (v322 == 0x746E656964617267 && v571 == 0xEC000000795F6433
                || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                if (v286)
                {
                  v285 &= 1u;
                }
                else
                {
                  v141 = v306;
                  ShaderGraphNode.subscript.getter(0x746E656964617267, 0xE800000000000000, (uint64_t)&v393);
                  v306 = v141;
                  if (v141)
                  {
                    outlined init with take of NodePersonality(&v351, &v478);
                    outlined release of NodePersonality(&v478);
                    swift_bridgeObjectRelease();
                    v272 = (uint64_t *)v352;
                    v256 = (unint64_t *)&v477;
                    goto LABEL_338;
                  }
                  Input.prependCreateGradient3DNode(in:)(v316, &v395);
                  v306 = 0;
                  swift_release();
                  swift_bridgeObjectRelease();
                  v285 = v399;
                  v281 = v397;
                  v282 = v398;
                  v286 = *((_QWORD *)&v395 + 1);
                  v283 = v395;
                  v284 = v396;
                }
                v551 = v283;
                v552 = v286;
                v553 = v284;
                v554 = v281;
                v555 = v282;
                v556 = v285;
                outlined copy of NodePersonality(v283);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v142 = v306;
                ShaderGraphNode.subscript.getter(2036617316, 0xE400000000000000, (uint64_t)v400);
                if (v142)
                {
                  outlined init with take of NodePersonality(&v351, v476);
                  outlined release of NodePersonality(v476);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v263 = v283;
                  outlined consume of NodePersonality(v283);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  outlined consume of ShaderGraphNode?(v289, v292);
                  outlined consume of NodePersonality(v263);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  outlined consume of ShaderGraphNode?(v293, v299);
                  swift_bridgeObjectRelease();
                  swift_release();
                  outlined init with take of NodePersonality(&v353, &v475);
                  v242 = (unint64_t *)&v475;
                  goto LABEL_326;
                }
                outlined consume of NodePersonality(v283);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                Graph.moveEdge(from:to:)((uint64_t)&v520, v400);
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                goto LABEL_183;
              }
              if (v322 == 0x746C7561666564 && v571 == 0xE700000000000000
                || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                v143 = v306;
                ShaderGraphNode.subscript.getter(v322, v571, (uint64_t)v401);
                if (v143)
                {
                  outlined init with take of NodePersonality(&v351, &v480);
                  outlined release of NodePersonality(&v480);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  outlined consume of ShaderGraphNode?(v289, v292);
                  outlined consume of ShaderGraphNode?(v283, v286);
                  outlined consume of ShaderGraphNode?(v293, v299);
                  swift_bridgeObjectRelease_n();
                  swift_release();
                  outlined init with take of NodePersonality(&v353, &v479);
                  v242 = (unint64_t *)&v479;
                  goto LABEL_326;
                }
                swift_bridgeObjectRelease();
                Graph.moveEdge(from:to:)((uint64_t)&v520, v401);
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                goto LABEL_183;
              }
              if (v322 == 0x73696E615F78616DLL && v571 == 0xEE0079706F72746FLL
                || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                v144 = v306;
                ShaderGraphNode.subscript.getter(0x73696E615F78616DLL, 0xEE0079706F72746FLL, (uint64_t)&v402);
                if (v144)
                {
                  outlined init with take of NodePersonality(&v351, &v483);
                  outlined release of NodePersonality(&v483);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  outlined consume of ShaderGraphNode?(v289, v292);
                  outlined consume of ShaderGraphNode?(v283, v286);
                  outlined consume of ShaderGraphNode?(v293, v299);
                  swift_bridgeObjectRelease();
                  swift_release();
                  outlined init with take of NodePersonality(&v353, &v482);
                  v242 = (unint64_t *)&v482;
                  goto LABEL_326;
                }
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
                v145 = swift_allocObject();
                *(_OWORD *)(v145 + 16) = v277;
                *(_QWORD *)(v145 + 32) = 28265;
                *(_QWORD *)(v145 + 40) = 0xE200000000000000;
                *(_QWORD *)(v145 + 48) = v327;
                swift_retain();
                specialized Input.prependFunction(_:label:arguments:in:)(0x73696E615F78616DLL, 0xEE0079706F72746FLL, v145, v316, v403);
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                ShaderGraphNode.subscript.getter(28265, 0xE200000000000000, (uint64_t)v404);
                Graph.moveEdge(from:to:)((uint64_t)&v520, v404);
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                outlined init with take of NodePersonality(v403, v481);
                outlined release of NodePersonality(v481);
                swift_bridgeObjectRelease();
                goto LABEL_183;
              }
              if (v322 == 0x6E696D5F646F6CLL && v571 == 0xE700000000000000
                || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                if (v299)
                {
                  v325 &= 1u;
LABEL_228:
                  v557 = v293;
                  v558 = v299;
                  v559 = v278;
                  v560 = v326;
                  v561 = v324;
                  v562 = v325;
                  outlined copy of NodePersonality(v293);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v147 = v306;
                  ShaderGraphNode.subscript.getter(0x6E696D5F646F6CLL, 0xE700000000000000, (uint64_t)v412);
                  if (v147)
                  {
                    outlined init with take of NodePersonality(&v351, v485);
                    outlined release of NodePersonality(v485);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    v264 = v293;
                    outlined consume of NodePersonality(v293);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    outlined consume of ShaderGraphNode?(v289, v292);
                    outlined consume of ShaderGraphNode?(v283, v286);
                    outlined consume of NodePersonality(v264);
                    swift_bridgeObjectRelease();
                    swift_release();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    outlined init with take of NodePersonality(&v353, &v484);
                    v242 = (unint64_t *)&v484;
                    goto LABEL_326;
                  }
                  outlined consume of NodePersonality(v293);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  Graph.moveEdge(from:to:)((uint64_t)&v520, v412);
                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_release();
                  goto LABEL_183;
                }
                v146 = v306;
                ShaderGraphNode.subscript.getter(0x6D616C635F646F6CLL, v271, (uint64_t)&v405);
                v306 = v146;
                if (!v146)
                {
                  Input.prependCreateLODClampNode(in:)(v316, &v407);
                  v306 = 0;
                  swift_release();
                  swift_bridgeObjectRelease();
                  v324 = v410;
                  v325 = v411;
                  v326 = v409;
                  v278 = v408;
                  v299 = *((_QWORD *)&v407 + 1);
                  v293 = v407;
                  goto LABEL_228;
                }
                outlined init with take of NodePersonality(&v351, &v487);
                outlined release of NodePersonality(&v487);
                swift_bridgeObjectRelease();
                v269 = (uint64_t *)v352;
                v256 = (unint64_t *)&v486;
LABEL_346:
                swift_bridgeObjectRelease();
                outlined consume of ShaderGraphNode?(v289, v292);
                v259 = v283;
                v260 = v286;
                goto LABEL_333;
              }
              if ((v322 != 0x78616D5F646F6CLL || v571 != 0xE700000000000000)
                && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              {
                if ((v322 != 0x64726F6F63 || v571 != 0xE500000000000000)
                  && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
                  && (v322 != 0x7365726464615F73 || v571 != 0xE900000000000073))
                {
                  v150 = v322;
                  v151 = v571;
                  v152 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  v153 = v150 == 0x7365726464615F74 && v151 == 0xE900000000000073;
                  v154 = v153;
                  if ((v152 & 1) == 0
                    && !v154
                    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
                    && (v322 != 0x635F726564726F62 || v571 != 0xEC000000726F6C6FLL)
                    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
                    && (v322 != 0x746C69665F67616DLL || v571 != 0xEA00000000007265))
                  {
                    v155 = v322;
                    v156 = v571;
                    v157 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    v158 = v155 == 0x746C69665F6E696DLL && v156 == 0xEA00000000007265;
                    v159 = v158;
                    if ((v157 & 1) == 0 && !v159)
                    {
                      v160 = v322;
                      v161 = v571;
                      v162 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      v163 = v160 == 0x746C69665F70696DLL && v161 == 0xEA00000000007265;
                      v164 = v163;
                      if ((v162 & 1) == 0
                        && !v164
                        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
                        && (v322 != 0x5F657261706D6F63 || v571 != 0xEC000000636E7566)
                        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                      {
                        swift_bridgeObjectRelease();
                        if (one-time initialization token for logger != -1)
                          swift_once();
                        v166 = v279;
                        v167 = __swift_project_value_buffer(v279, (uint64_t)logger);
                        (*(void (**)(char *, uint64_t, uint64_t))(v303 + 16))(v302, v167, v166);
                        v168 = swift_allocObject();
                        v169 = v521;
                        *(_OWORD *)(v168 + 16) = v520;
                        *(_OWORD *)(v168 + 32) = v169;
                        *(_OWORD *)(v168 + 48) = v522;
                        *(_QWORD *)(v168 + 64) = v523;
                        v170 = v168;
                        v319 = v168;
                        outlined init with take of NodePersonality(&v498, &v569);
                        v317 = *(_QWORD *)&v499[0];
                        v570[0] = *(_QWORD *)&v499[0];
                        v171 = (_OWORD *)swift_allocObject();
                        v172 = v499[0];
                        v171[1] = v498;
                        v171[2] = v172;
                        *(_OWORD *)((char *)v171 + 41) = *(_OWORD *)((char *)v499 + 9);
                        v173 = swift_allocObject();
                        v321 = v173;
                        *(_QWORD *)(v173 + 16) = partial apply for implicit closure #8 in closure #1 in Graph.transformRealityKitImageNodes<A>(_:paramType:textureAssignments:customUniformsType:);
                        *(_QWORD *)(v173 + 24) = v171;
                        swift_bridgeObjectRetain();
                        swift_retain();
                        swift_bridgeObjectRetain();
                        outlined retain of NodePersonality(&v569);
                        outlined retain of [Input]((uint64_t)v570);
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        swift_retain();
                        outlined retain of NodePersonality(&v569);
                        outlined retain of [Input]((uint64_t)v570);
                        v310 = v171;
                        swift_retain();
                        v320 = Logger.logObject.getter();
                        LODWORD(v318) = static os_log_type_t.error.getter();
                        v174 = swift_allocObject();
                        *(_BYTE *)(v174 + 16) = 32;
                        v175 = swift_allocObject();
                        *(_BYTE *)(v175 + 16) = 8;
                        v176 = swift_allocObject();
                        *(_QWORD *)(v176 + 16) = protocol witness for XMLNode.name.getter in conformance XMLParserDelegate.StringNode;
                        *(_QWORD *)(v176 + 24) = v170;
                        v177 = swift_allocObject();
                        *(_QWORD *)(v177 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
                        *(_QWORD *)(v177 + 24) = v176;
                        v178 = swift_allocObject();
                        *(_BYTE *)(v178 + 16) = 32;
                        v179 = swift_allocObject();
                        *(_BYTE *)(v179 + 16) = 8;
                        v180 = swift_allocObject();
                        v181 = v321;
                        *(_QWORD *)(v180 + 16) = partial apply for specialized implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
                        *(_QWORD *)(v180 + 24) = v181;
                        v182 = swift_allocObject();
                        *(_QWORD *)(v182 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
                        *(_QWORD *)(v182 + 24) = v180;
                        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>);
                        v183 = swift_allocObject();
                        *(_OWORD *)(v183 + 16) = v267;
                        *(_QWORD *)(v183 + 32) = partial apply for closure #1 in OSLogArguments.append(_:);
                        *(_QWORD *)(v183 + 40) = v174;
                        *(_QWORD *)(v183 + 48) = closure #1 in OSLogArguments.append(_:)partial apply;
                        *(_QWORD *)(v183 + 56) = v175;
                        *(_QWORD *)(v183 + 64) = partial apply for closure #1 in OSLogArguments.append(_:);
                        *(_QWORD *)(v183 + 72) = v177;
                        *(_QWORD *)(v183 + 80) = closure #1 in OSLogArguments.append(_:)partial apply;
                        *(_QWORD *)(v183 + 88) = v178;
                        *(_QWORD *)(v183 + 96) = closure #1 in OSLogArguments.append(_:)partial apply;
                        *(_QWORD *)(v183 + 104) = v179;
                        *(_QWORD *)(v183 + 112) = closure #1 in OSLogArguments.append(_:)partial apply;
                        *(_QWORD *)(v183 + 120) = v182;
                        swift_retain();
                        v309 = v176;
                        swift_retain();
                        swift_retain();
                        v308 = v180;
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        v304 = v177;
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        v307 = v182;
                        swift_retain();
                        swift_bridgeObjectRelease();
                        v184 = v318;
                        if (os_log_type_enabled(v320, (os_log_type_t)v318))
                        {
                          v185 = (uint8_t *)swift_slowAlloc();
                          v318 = swift_slowAlloc();
                          *(_QWORD *)&v338 = v318;
                          *(_WORD *)v185 = 514;
                          v185[2] = 32;
                          swift_release();
                          v185[3] = 8;
                          swift_release();
                          v186 = v571;
                          swift_bridgeObjectRetain();
                          v331._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v322, v186, (uint64_t *)&v338);
                          UnsafeMutableRawBufferPointer.copyMemory(from:)();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          v185[12] = 32;
                          swift_release();
                          v185[13] = 8;
                          swift_release();
                          v187 = ShaderGraphNode.ID.description.getter();
                          v331._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v187, v188, (uint64_t *)&v338);
                          UnsafeMutableRawBufferPointer.copyMemory(from:)();
                          swift_bridgeObjectRelease();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          outlined release of NodePersonality(&v569);
                          swift_bridgeObjectRelease();
                          v24 = v314;
                          swift_bridgeObjectRelease();
                          v189 = v320;
                          _os_log_impl(&dword_245E46000, v320, v184, "Ignoring unexpected input '%s' on node '%s'", v185, 0x16u);
                          v190 = v318;
                          swift_arrayDestroy();
                          MEMORY[0x24954C33C](v190, -1, -1);
                          MEMORY[0x24954C33C](v185, -1, -1);
                          swift_bridgeObjectRelease();
                          swift_release();

                        }
                        else
                        {
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_bridgeObjectRelease_n();
                          swift_release_n();
                          outlined release of NodePersonality(&v569);

                          swift_bridgeObjectRelease();
                          v24 = v314;
                          swift_bridgeObjectRelease();
                        }
                        (*(void (**)(char *, uint64_t))(v303 + 8))(v302, v279);
LABEL_100:
                        v27 = v325;
                        v26 = v324;
LABEL_150:
                        v25 = v326;
                        goto LABEL_90;
                      }
                    }
                  }
                }
                v165 = v306;
                ShaderGraphNode.subscript.getter(v322, v571, (uint64_t)v421);
                if (v165)
                {
                  outlined init with take of NodePersonality(&v351, &v493);
                  outlined release of NodePersonality(&v493);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  outlined consume of ShaderGraphNode?(v289, v292);
                  outlined consume of ShaderGraphNode?(v283, v286);
                  outlined consume of ShaderGraphNode?(v293, v299);
                  swift_bridgeObjectRelease_n();
                  swift_release();
                  outlined init with take of NodePersonality(&v353, &v492);
                  v242 = (unint64_t *)&v492;
                  goto LABEL_326;
                }
                swift_bridgeObjectRelease();
                Graph.moveEdge(from:to:)((uint64_t)&v520, v421);
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
LABEL_183:
                swift_bridgeObjectRelease();
                v306 = 0;
LABEL_99:
                v24 = v314;
                goto LABEL_100;
              }
              swift_bridgeObjectRelease();
              if (v299)
              {
                v325 &= 1u;
              }
              else
              {
                v148 = v306;
                ShaderGraphNode.subscript.getter(0x6D616C635F646F6CLL, v271, (uint64_t)&v413);
                v306 = v148;
                if (v148)
                {
                  outlined init with take of NodePersonality(&v351, &v491);
                  outlined release of NodePersonality(&v491);
                  swift_bridgeObjectRelease();
                  v270 = (uint64_t *)v352;
                  v256 = (unint64_t *)&v490;
                  goto LABEL_346;
                }
                Input.prependCreateLODClampNode(in:)(v316, &v415);
                v306 = 0;
                swift_release();
                swift_bridgeObjectRelease();
                v324 = v418;
                v325 = v419;
                v326 = v417;
                v278 = v416;
                v299 = *((_QWORD *)&v415 + 1);
                v293 = v415;
              }
              v563 = v293;
              v564 = v299;
              v565 = v278;
              v566 = v326;
              v567 = v324;
              v568 = v325;
              outlined copy of NodePersonality(v293);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v149 = v306;
              ShaderGraphNode.subscript.getter(0x78616D5F646F6CLL, 0xE700000000000000, (uint64_t)v420);
              if (v149)
              {
                outlined init with take of NodePersonality(&v351, v489);
                outlined release of NodePersonality(v489);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v265 = v293;
                outlined consume of NodePersonality(v293);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined consume of ShaderGraphNode?(v289, v292);
                outlined consume of ShaderGraphNode?(v283, v286);
                outlined consume of NodePersonality(v265);
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined init with take of NodePersonality(&v353, &v488);
                v242 = (unint64_t *)&v488;
                goto LABEL_326;
              }
              outlined consume of NodePersonality(v293);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              Graph.moveEdge(from:to:)((uint64_t)&v520, v420);
              swift_bridgeObjectRelease();
              swift_release();
              swift_release();
              goto LABEL_183;
            }
          }
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((Swift::Int *)&v338, v68, v62);
  swift_bridgeObjectRelease();
  if (one-time initialization token for validLODOptionsSets != -1)
    swift_once();
  v76 = v330;
  v77 = specialized Array._getCount()(validLODOptionsSets._rawValue);
  if (!v77)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_98;
  }
  v78 = v77;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v79 = swift_bridgeObjectRetain();
  v80 = specialized static Set.== infix(_:_:)(v79, v76);
  swift_bridgeObjectRelease();
  if ((v80 & 1) != 0)
    goto LABEL_53;
  if (v78 == 1)
  {
LABEL_98:
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_99;
  }
  v101 = swift_bridgeObjectRetain();
  v102 = specialized static Set.== infix(_:_:)(v101, v76);
  swift_bridgeObjectRelease();
  if ((v102 & 1) != 0)
  {
LABEL_53:
    v62 = v571;
    swift_bridgeObjectRelease();
    goto LABEL_54;
  }
  if (v78 == 2)
    goto LABEL_98;
  v103 = 6;
  while (1)
  {
    v104 = v103 - 3;
    if (__OFADD__(v103 - 4, 1))
      break;
    v105 = swift_bridgeObjectRetain();
    v106 = specialized static Set.== infix(_:_:)(v105, v76);
    swift_bridgeObjectRelease();
    if ((v106 & 1) != 0)
    {
      v57 = v327;
      goto LABEL_53;
    }
    ++v103;
    if (v104 == v78)
      goto LABEL_98;
  }
LABEL_324:
  __break(1u);
LABEL_325:
  outlined init with take of NodePersonality(&v351, &v459);
  outlined release of NodePersonality(&v459);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ShaderGraphNode?(v289, v292);
  outlined consume of ShaderGraphNode?(v283, v286);
  outlined consume of ShaderGraphNode?(v293, v299);
  swift_bridgeObjectRelease();
  swift_release();
  outlined init with take of NodePersonality(&v353, &v458);
  v242 = (unint64_t *)&v458;
LABEL_326:
  outlined release of NodePersonality(v242);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Graph.insertSampleTexture(for:)@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  id v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  _QWORD *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  uint64_t v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t result;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  _OWORD *v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  _OWORD v116[12];
  __int128 v117;
  char v118[8];
  uint64_t v119;
  __int128 v120;
  uint64_t v121[7];
  uint64_t v122[7];
  uint64_t v123[7];
  uint64_t v124[7];
  uint64_t v125[7];
  uint64_t v126[7];
  uint64_t v127[7];
  uint64_t v128[7];
  __int128 v129;
  _OWORD v130[2];
  _OWORD v131[2];
  uint64_t v132;
  char v133;
  uint64_t v134;
  char v135[8];
  uint64_t v136;
  char v137[8];
  uint64_t v138;
  char v139[8];
  uint64_t v140;
  char v141[8];
  uint64_t v142;
  char v143[8];
  uint64_t v144;
  char v145[8];
  uint64_t v146;
  char v147[8];
  uint64_t v148;
  char v149[8];
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154[3];

  v6 = *a1;
  v104 = *(_OWORD *)(a1 + 1);
  v7 = a1[3];
  v8 = a1[4];
  v9 = *((_BYTE *)a1 + 40);
  ShaderGraphNode.out.getter((uint64_t)v118);
  if (v3)
  {

    ShaderGraphNode.out.getter((uint64_t)v131);
    v101 = v131[1];
    v102 = v131[0];
    v10 = v132;
    v11 = v133;
    v12 = v134;
    outlined init with take of NodePersonality(a1, v154);
    v13 = a1[1];
    v152 = a1[2];
    v153 = v13;
    v106 = v6;
    v107 = v104;
    v108 = v7;
    v109 = v8;
    v110 = v9 & 1;
    v111 = v102;
    v112 = v101;
    v113 = v10;
    v114 = v11;
    v115 = v12;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi2_((uint64_t)&v106);
    outlined init with take of UserGraphError.ErrorType((__int128 *)&v106, (uint64_t)v116);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v117 = 0uLL;
    v14 = (void *)swift_allocError();
    *v15 = v116[0];
    v16 = v116[4];
    v18 = v116[1];
    v17 = v116[2];
    v15[3] = v116[3];
    v15[4] = v16;
    v15[1] = v18;
    v15[2] = v17;
    v19 = v116[8];
    v21 = v116[5];
    v20 = v116[6];
    v15[7] = v116[7];
    v15[8] = v19;
    v15[5] = v21;
    v15[6] = v20;
    v22 = v117;
    v24 = v116[9];
    v23 = v116[10];
    v15[11] = v116[11];
    v15[12] = v22;
    v15[9] = v24;
    v15[10] = v23;
    outlined retain of NodePersonality(v154);
    outlined retain of [Input]((uint64_t)&v153);
    outlined retain of [Input]((uint64_t)&v152);
    swift_willThrow();
    if (one-time initialization token for logger != -1)
      swift_once();
    v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)logger);
    v26 = v14;
    v27 = v14;
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      v31 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v30 = 138412290;
      v32 = v14;
      v33 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)&v116[0] = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v31 = v33;

      _os_log_impl(&dword_245E46000, v28, v29, "%@", v30, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v31, -1, -1);
      MEMORY[0x24954C33C](v30, -1, -1);
    }
    else
    {

    }
    return swift_willThrow();
  }
  else
  {
    v103 = v2;
    v34 = v119;
    v151 = v120;
    outlined release of String((uint64_t)&v151);
    v35 = specialized ShaderGraphNode.metalTextureType.getter(*a1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
    v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_245FC2010;
    v37 = one-time initialization token for sampler;
    swift_retain();
    if (v37 != -1)
      swift_once();
    v105 = a2;
    v38 = static MetalDataType.sampler;
    *(_QWORD *)(v36 + 32) = 0x72656C706D6173;
    *(_QWORD *)(v36 + 40) = 0xE700000000000000;
    *(_QWORD *)(v36 + 48) = v38;
    *(_QWORD *)(v36 + 56) = 0x65727574786574;
    *(_QWORD *)(v36 + 64) = 0xE700000000000000;
    *(_QWORD *)(v36 + 72) = v35;
    *(_QWORD *)(v36 + 80) = 0x746C7561666564;
    *(_QWORD *)(v36 + 88) = 0xE700000000000000;
    *(_QWORD *)(v36 + 96) = v34;
    v39 = one-time initialization token for float2;
    swift_retain();
    swift_retain();
    swift_retain();
    if (v39 != -1)
      swift_once();
    v40 = static MetalDataType.float2;
    *(_QWORD *)(v36 + 104) = 0x64726F6F63;
    *(_QWORD *)(v36 + 112) = 0xE500000000000000;
    *(_QWORD *)(v36 + 120) = v40;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_245FBECD0;
    v42 = one-time initialization token for texture2d_half;
    swift_retain();
    if (v42 != -1)
      swift_once();
    v43 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 128);
    v44 = swift_retain();
    v45 = v43(v44);
    swift_release();
    v46 = 0xD000000000000018;
    if ((v45 & 1) == 0)
      v46 = 0xD000000000000019;
    v47 = 0x8000000245FCB250;
    if ((v45 & 1) != 0)
      v47 = 0x8000000245FCB270;
    *(_QWORD *)(v41 + 32) = v46;
    *(_QWORD *)(v41 + 40) = v47;
    v48 = a1[1];
    specialized Sequence.first(where:)(v48, 1935763810, 0xE400000000000000, v121);
    outlined release of Input?(v121);
    outlined init with take of MetalFunctionNode?((uint64_t)v121, (uint64_t)v149, (uint64_t *)&demangling cache variable for type metadata for Input?);
    if (v150)
    {
      if (one-time initialization token for bias != -1)
        swift_once();
      v49 = static MetalDataType.bias;
      swift_retain();
      v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
      v52 = v50[2];
      v51 = v50[3];
      if (v52 >= v51 >> 1)
        v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v51 > 1), v52 + 1, 1, v50);
      v50[2] = v52 + 1;
      v53 = &v50[3 * v52];
      v53[4] = 1935763810;
      v53[5] = 0xE400000000000000;
      v53[6] = v49;
      v55 = *(_QWORD *)(v41 + 16);
      v54 = *(_QWORD *)(v41 + 24);
      if (v55 >= v54 >> 1)
        v41 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v54 > 1), v55 + 1, 1, (_QWORD *)v41);
      *(_QWORD *)(v41 + 16) = v55 + 1;
      v56 = v41 + 16 * v55;
      *(_QWORD *)(v56 + 32) = 1935763810;
      *(_QWORD *)(v56 + 40) = 0xE400000000000000;
    }
    else
    {
      v50 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    specialized Sequence.first(where:)(v48, 0x6C6576656CLL, 0xE500000000000000, v122);
    outlined release of Input?(v122);
    outlined init with take of MetalFunctionNode?((uint64_t)v122, (uint64_t)v147, (uint64_t *)&demangling cache variable for type metadata for Input?);
    if (v148)
    {
      if (one-time initialization token for level != -1)
        swift_once();
      v58 = static MetalDataType.level;
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50[2] + 1, 1, v50);
      v60 = v50[2];
      v59 = v50[3];
      if (v60 >= v59 >> 1)
        v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v59 > 1), v60 + 1, 1, v50);
      v50[2] = v60 + 1;
      v61 = &v50[3 * v60];
      v61[4] = 0x6C6576656CLL;
      v61[5] = 0xE500000000000000;
      v61[6] = v58;
      v63 = *(_QWORD *)(v41 + 16);
      v62 = *(_QWORD *)(v41 + 24);
      if (v63 >= v62 >> 1)
        v41 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v62 > 1), v63 + 1, 1, (_QWORD *)v41);
      *(_QWORD *)(v41 + 16) = v63 + 1;
      v64 = v41 + 16 * v63;
      *(_QWORD *)(v64 + 32) = 6582124;
      *(_QWORD *)(v64 + 40) = 0xE300000000000000;
    }
    specialized Sequence.first(where:)(v48, 0x746E656964617267, 0xEC000000785F6432, v123);
    outlined release of Input?(v123);
    outlined init with take of MetalFunctionNode?((uint64_t)v123, (uint64_t)v145, (uint64_t *)&demangling cache variable for type metadata for Input?);
    if (v146)
    {
      specialized Sequence.first(where:)(v48, 0x746E656964617267, 0xEC000000795F6432, v124);
      outlined release of Input?(v124);
      outlined init with take of MetalFunctionNode?((uint64_t)v124, (uint64_t)v143, (uint64_t *)&demangling cache variable for type metadata for Input?);
      if (v144)
      {
        if (one-time initialization token for gradient2d != -1)
          swift_once();
        v65 = static MetalDataType.gradient2d;
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50[2] + 1, 1, v50);
        v67 = v50[2];
        v66 = v50[3];
        if (v67 >= v66 >> 1)
          v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v66 > 1), v67 + 1, 1, v50);
        v50[2] = v67 + 1;
        v68 = &v50[3 * v67];
        v68[4] = 0x746E656964617267;
        v68[5] = 0xE800000000000000;
        v68[6] = v65;
        v70 = *(_QWORD *)(v41 + 16);
        v69 = *(_QWORD *)(v41 + 24);
        if (v70 >= v69 >> 1)
          v41 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v69 > 1), v70 + 1, 1, (_QWORD *)v41);
        *(_QWORD *)(v41 + 16) = v70 + 1;
        v71 = v41 + 16 * v70;
        *(_QWORD *)(v71 + 32) = 0x746E656964617267;
        *(_QWORD *)(v71 + 40) = 0xEA00000000006432;
      }
    }
    specialized Sequence.first(where:)(v48, 0x746E656964617267, 0xEC000000785F6433, v125);
    outlined release of Input?(v125);
    outlined init with take of MetalFunctionNode?((uint64_t)v125, (uint64_t)v141, (uint64_t *)&demangling cache variable for type metadata for Input?);
    if (v142)
    {
      specialized Sequence.first(where:)(v48, 0x746E656964617267, 0xEC000000795F6433, v126);
      outlined release of Input?(v126);
      outlined init with take of MetalFunctionNode?((uint64_t)v126, (uint64_t)v139, (uint64_t *)&demangling cache variable for type metadata for Input?);
      if (v140)
      {
        specialized Sequence.first(where:)(v48, 0x746E656964617267, 0xEC0000007A5F6433, v127);
        outlined release of Input?(v127);
        outlined init with take of MetalFunctionNode?((uint64_t)v127, (uint64_t)v137, (uint64_t *)&demangling cache variable for type metadata for Input?);
        if (v138)
        {
          if (one-time initialization token for gradient2d != -1)
            swift_once();
          v72 = static MetalDataType.gradient2d;
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50[2] + 1, 1, v50);
          v74 = v50[2];
          v73 = v50[3];
          if (v74 >= v73 >> 1)
            v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v73 > 1), v74 + 1, 1, v50);
          v50[2] = v74 + 1;
          v75 = &v50[3 * v74];
          v75[4] = 0x746E656964617267;
          v75[5] = 0xE800000000000000;
          v75[6] = v72;
          v77 = *(_QWORD *)(v41 + 16);
          v76 = *(_QWORD *)(v41 + 24);
          if (v77 >= v76 >> 1)
            v41 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v76 > 1), v77 + 1, 1, (_QWORD *)v41);
          *(_QWORD *)(v41 + 16) = v77 + 1;
          v78 = v41 + 16 * v77;
          *(_QWORD *)(v78 + 32) = 0x746E656964617267;
          *(_QWORD *)(v78 + 40) = 0xEA00000000006433;
        }
      }
    }
    specialized Sequence.first(where:)(v48, 0x5F646F6C5F6E696DLL, 0xED0000706D616C63, v128);
    outlined release of Input?(v128);
    isUniquelyReferenced_nonNull_native = outlined init with take of MetalFunctionNode?((uint64_t)v128, (uint64_t)v135, (uint64_t *)&demangling cache variable for type metadata for Input?);
    if (v136)
    {
      if (one-time initialization token for min_lod_clamp != -1)
        swift_once();
      v80 = static MetalDataType.min_lod_clamp;
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50[2] + 1, 1, v50);
        v50 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v82 = v50[2];
      v81 = v50[3];
      if (v82 >= v81 >> 1)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v81 > 1), v82 + 1, 1, v50);
        v50 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v50[2] = v82 + 1;
      v83 = (char *)&v50[3 * v82];
      strcpy(v83 + 32, "min_lod_clamp");
      *((_WORD *)v83 + 23) = -4864;
      *((_QWORD *)v83 + 6) = v80;
      v85 = *(_QWORD *)(v41 + 16);
      v84 = *(_QWORD *)(v41 + 24);
      if (v85 >= v84 >> 1)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v84 > 1), v85 + 1, 1, (_QWORD *)v41);
        v41 = isUniquelyReferenced_nonNull_native;
      }
      *(_QWORD *)(v41 + 16) = v85 + 1;
      v86 = v41 + 16 * v85;
      strcpy((char *)(v86 + 32), "min_lod_clamp");
      *(_WORD *)(v86 + 46) = -4864;
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 144))(isUniquelyReferenced_nonNull_native);
    if (result)
    {
      v88 = *(_QWORD *)(result + 24);
      v87 = *(_QWORD *)(result + 32);
      swift_bridgeObjectRetain();
      swift_release();
      v90 = *(_QWORD *)(v41 + 16);
      v89 = *(_QWORD *)(v41 + 24);
      if (v90 >= v89 >> 1)
        v41 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v89 > 1), v90 + 1, 1, (_QWORD *)v41);
      *(_QWORD *)(v41 + 16) = v90 + 1;
      v91 = v41 + 16 * v90;
      *(_QWORD *)(v91 + 32) = v88;
      *(_QWORD *)(v91 + 40) = v87;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String], MEMORY[0x24BEE12B0]);
      v92 = BidirectionalCollection<>.joined(separator:)();
      v94 = v93;
      swift_bridgeObjectRelease();
      specialized Array.append<A>(contentsOf:)((uint64_t)v50);
      v95 = v36;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
      v96 = swift_allocObject();
      *(_OWORD *)(v96 + 16) = xmmword_245FBECD0;
      *(_QWORD *)(v96 + 32) = 7632239;
      *(_QWORD *)(v96 + 40) = 0xE300000000000000;
      *(_QWORD *)(v96 + 48) = v34;
      v97 = swift_allocObject();
      *(_QWORD *)&v116[0] = v92;
      *((_QWORD *)&v116[0] + 1) = v94;
      swift_retain();
      *(_QWORD *)(v97 + 16) = String.init<A>(_:)();
      *(_QWORD *)(v97 + 24) = v98;
      *(_QWORD *)(v97 + 32) = v34;
      v99 = *(_QWORD *)(v103 + 40);
      swift_retain();
      specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v99, v95, v96, v97 | 0x2000000000000000, v103 + 64, v103, (unint64_t *)&v129);
      swift_release();
      swift_release();
      swift_release();
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      result = swift_bridgeObjectRelease();
      v100 = v130[0];
      *v105 = v129;
      v105[1] = v100;
      *(_OWORD *)((char *)v105 + 25) = *(_OWORD *)((char *)v130 + 9);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

double Input.prependUnaryFunction(_:argumentType:in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t inited;
  double result;
  __int128 v13;
  __int128 v14;
  _OWORD v15[2];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_245FBECD0;
  *(_QWORD *)(inited + 32) = 28265;
  *(_QWORD *)(inited + 40) = 0xE200000000000000;
  *(_QWORD *)(inited + 48) = a3;
  swift_retain();
  specialized Input.prependFunction(_:label:arguments:in:)(a1, a2, inited, a4, &v14);
  swift_setDeallocating();
  swift_arrayDestroy();
  if (!v5)
  {
    v13 = v15[0];
    *a5 = v14;
    a5[1] = v13;
    result = *(double *)((char *)v15 + 9);
    *(_OWORD *)((char *)a5 + 25) = *(_OWORD *)((char *)v15 + 9);
  }
  return result;
}

double Input.prependCreateGradient2DNode(in:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return Input.prependCreateGradient2DNode(in:)(a1, &one-time initialization token for float2, &static MetalDataType.float2, 0xEA00000000006432, (uint64_t)one-time initialization function for float2, a2);
}

double Input.prependCreateGradient3DNode(in:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return Input.prependCreateGradient2DNode(in:)(a1, &one-time initialization token for float3, &static MetalDataType.float3, 0xEA00000000006433, (uint64_t)one-time initialization function for float3, a2);
}

double Input.prependCreateGradient2DNode(in:)@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t inited;
  uint64_t v13;
  double result;
  __int128 v15;
  __int128 v16;
  _OWORD v17[2];
  uint64_t v18;

  v18 = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_245FBECE0;
  if (*a2 != -1)
    swift_once();
  v13 = *a3;
  *(_QWORD *)(inited + 32) = 2019840100;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  *(_QWORD *)(inited + 48) = v13;
  *(_QWORD *)(inited + 56) = 2036617316;
  *(_QWORD *)(inited + 64) = 0xE400000000000000;
  *(_QWORD *)(inited + 72) = v13;
  swift_retain_n();
  specialized Input.prependFunction(_:label:arguments:in:)(0x746E656964617267, a4, inited, a1, &v16);
  swift_setDeallocating();
  swift_arrayDestroy();
  if (!v6)
  {
    v15 = v17[0];
    *a6 = v16;
    a6[1] = v15;
    result = *(double *)((char *)v17 + 9);
    *(_OWORD *)((char *)a6 + 25) = *(_OWORD *)((char *)v17 + 9);
  }
  return result;
}

double Input.prependCreateLODClampNode(in:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t inited;
  uint64_t v6;
  double result;
  __int128 v8;
  __int128 v9;
  _OWORD v10[2];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_245FBECE0;
  if (one-time initialization token for float != -1)
    swift_once();
  v6 = static MetalDataType.float;
  *(_QWORD *)(inited + 32) = 0x6E696D5F646F6CLL;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  *(_QWORD *)(inited + 48) = v6;
  *(_QWORD *)(inited + 56) = 0x78616D5F646F6CLL;
  *(_QWORD *)(inited + 64) = 0xE700000000000000;
  *(_QWORD *)(inited + 72) = v6;
  swift_retain_n();
  specialized Input.prependFunction(_:label:arguments:in:)(0x6D616C635F646F6CLL, 0xE900000000000070, inited, a1, &v9);
  swift_setDeallocating();
  swift_arrayDestroy();
  if (!v2)
  {
    v8 = v10[0];
    *a2 = v9;
    a2[1] = v8;
    result = *(double *)((char *)v10 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v10 + 9);
  }
  return result;
}

double Graph.insertConstantValue(type:value:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t inited;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  double result;
  __int128 v12;
  _OWORD v13[2];

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_245FBECD0;
  *(_QWORD *)(inited + 32) = 7632239;
  *(_QWORD *)(inited + 40) = 0xE300000000000000;
  *(_QWORD *)(inited + 48) = a1;
  v8 = swift_allocObject();
  outlined init with take of SGDataTypeStorage(a2, v8 + 16);
  *(_QWORD *)(v8 + 88) = a1;
  v9 = *(_QWORD *)(v3 + 40);
  swift_retain_n();
  outlined retain of SGDataTypeStorage(a2);
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v9, MEMORY[0x24BEE4AF8], inited, v8, v3 + 64, v3, (unint64_t *)&v12);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  v10 = v13[0];
  *a3 = v12;
  a3[1] = v10;
  result = *(double *)((char *)v13 + 9);
  *(_OWORD *)((char *)a3 + 25) = *(_OWORD *)((char *)v13 + 9);
  return result;
}

uint64_t closure #1 in Graph.transformModernRealityKitImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = v2 - 1;
    v4 = v1 + 56;
    do
    {
      v5 = v3;
      v6 = *(_QWORD *)(v4 - 16);
      v7 = one-time initialization token for sampler;
      swift_retain();
      swift_bridgeObjectRetain();
      if (v7 != -1)
        swift_once();
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 128))(static MaterialXDataType.sampler);
      swift_bridgeObjectRelease();
      swift_release();
      if ((v8 & 1) != 0)
        break;
      v3 = v5 - 1;
      v4 += 56;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = 0;
  }
  return v8 & 1;
}

BOOL closure #3 in Graph.transformModernRealityKitImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(_QWORD *a1)
{
  Swift::String v1;
  Swift::Bool v2;

  if (*a1 >> 61 != 5)
    return 0;
  swift_bridgeObjectRetain();
  v1._object = (void *)0x8000000245FC8330;
  v1._countAndFlagsBits = 0xD000000000000013;
  v2 = String.hasPrefix(_:)(v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t closure #1 in closure #1 in Graph.mapStringInputs(nodeDefStore:)(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *a2;
  v6 = a2[1];
  v7 = *a2 == 0x636170736D6F7266 && v6 == 0xE900000000000065;
  if (v7
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || (v5 == 0x65636170736F74 ? (v8 = v6 == 0xE700000000000000) : (v8 = 0),
        v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    *a3 = 1;
    v9 = *(_QWORD *)(a1 + 16);
    v10 = one-time initialization token for space;
    swift_bridgeObjectRetain();
    if (v10 != -1)
      swift_once();
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 16);
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v9;
}

uint64_t closure #3 in closure #1 in Graph.mapStringInputs(nodeDefStore:)(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  BOOL v9;
  uint64_t result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100[14];
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE v104[8];
  __int128 v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE v109[8];
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _OWORD v121[3];
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  _QWORD v130[5];
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  _OWORD v146[4];
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  _OWORD v152[3];
  uint64_t v153;

  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  v122 = *((_QWORD *)a1 + 6);
  v121[1] = v6;
  v121[2] = v7;
  v121[0] = v5;
  v8 = v6;
  v9 = (_QWORD)v6 == 0x636170736D6F7266 && *((_QWORD *)&v6 + 1) == 0xE900000000000065;
  if (!v9
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && ((_QWORD)v8 != 0x65636170736F74 || *((_QWORD *)&v8 + 1) != 0xE700000000000000))
  {
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) == 0)
      return result;
  }
  v96 = v2;
  v12 = *(_OWORD *)(a2 + 128);
  v13 = *(_OWORD *)(a2 + 144);
  v14 = *(_OWORD *)(a2 + 96);
  v150 = *(_OWORD *)(a2 + 112);
  v151 = v12;
  v152[0] = v13;
  *(_OWORD *)((char *)v152 + 9) = *(_OWORD *)(a2 + 153);
  v15 = *(_OWORD *)(a2 + 80);
  v147 = *(_OWORD *)(a2 + 64);
  v148 = v15;
  v149 = v14;
  v16 = *(_OWORD *)(a2 + 16);
  v146[0] = *(_OWORD *)a2;
  v146[1] = v16;
  v17 = *(_OWORD *)(a2 + 48);
  v146[2] = *(_OWORD *)(a2 + 32);
  v146[3] = v17;
  outlined retain of Graph((uint64_t)v146);
  v18 = v146;
  Graph.edge(to:)((uint64_t)v121, v100);
  v19 = v100[0];
  outlined init with take of MetalFunctionNode?((uint64_t)v100, (uint64_t)v109, &demangling cache variable for type metadata for Edge?);
  if (!v110)
  {
LABEL_14:
    outlined release of Graph((uint64_t)v146);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
    v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_245FBECD0;
    if (one-time initialization token for string != -1)
      swift_once();
    v21 = static MaterialXDataType.string;
    *(_QWORD *)(v20 + 32) = 7632239;
    *(_QWORD *)(v20 + 40) = 0xE300000000000000;
    *(_QWORD *)(v20 + 48) = v21;
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_245FC2040;
    *(_OWORD *)(v22 + 32) = 0u;
    *(_OWORD *)(v22 + 48) = 0u;
    *(_OWORD *)(v22 + 64) = 0u;
    *(_BYTE *)(v22 + 80) = 6;
    *(_QWORD *)(v22 + 88) = v21;
    v23 = *(_QWORD *)(a2 + 40);
    swift_retain_n();
    specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v23, MEMORY[0x24BEE4AF8], v20, v22, a2 + 64, a2, &v101);
    swift_release();
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    ShaderGraphNode.out.getter((uint64_t)v104);
    if (v96)
    {
      outlined init with take of NodePersonality(&v101, &v117);
      outlined release of NodePersonality(&v117);
      v116 = v102;
      outlined release of [Input]((uint64_t)&v116);
      v115 = v103;
      v24 = &v115;
    }
    else
    {
      Graph.connect(_:to:)((uint64_t)v104, (unint64_t)v121);
      swift_release();
      v114 = v105;
      outlined release of String((uint64_t)&v114);
      outlined init with take of NodePersonality(&v101, &v113);
      outlined release of NodePersonality(&v113);
      v112 = v102;
      outlined release of [Input]((uint64_t)&v112);
      v111 = v103;
      v24 = &v111;
    }
    return outlined release of [Input]((uint64_t)v24);
  }
  if (v19 == -7)
  {
    outlined release of Edge?(v100);
    goto LABEL_14;
  }
  if ((v19 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v19 < *(_QWORD *)(v147 + 16))
  {
    v25 = (_QWORD *)(v147 + 48 * v19);
    v27 = v25[4];
    v26 = v25[5];
    v28 = v25[6];
    v86 = v25[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v27);
    outlined release of Edge?(v100);
    outlined release of Graph((uint64_t)v146);
    if (v27 >> 61)
    {
      outlined consume of NodePersonality(v27);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    v88 = v28;
    if (*(_BYTE *)(v27 + 80) == 6)
    {
      v85 = v27;
      if (!*(_QWORD *)(v27 + 16) && *(_QWORD *)(v27 + 24) == 0xE000000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v87 = v26;
        v29 = *(_QWORD *)(v28 + 16);
        v18 = (_OWORD *)MEMORY[0x24BEE4AF8];
        v95 = a2;
        if (v29)
        {
          v99 = MEMORY[0x24BEE4AF8];
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
          v18 = (_OWORD *)v99;
          v30 = (uint64_t *)(v28 + 56);
          do
          {
            v32 = *(v30 - 2);
            v31 = *(v30 - 1);
            v33 = *v30;
            v35 = *(_QWORD *)(v99 + 16);
            v34 = *(_QWORD *)(v99 + 24);
            swift_retain();
            swift_bridgeObjectRetain();
            if (v35 >= v34 >> 1)
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
            *(_QWORD *)(v99 + 16) = v35 + 1;
            v36 = (_QWORD *)(v99 + 24 * v35);
            v36[4] = v31;
            v36[5] = v33;
            v36[6] = v32;
            v30 += 7;
            --v29;
          }
          while (v29);
          swift_bridgeObjectRelease();
          a2 = v95;
        }
        v3 = swift_allocObject();
        *(_OWORD *)(v3 + 16) = xmmword_245FC2040;
        *(_OWORD *)(v3 + 32) = 0u;
        *(_OWORD *)(v3 + 48) = 0u;
        *(_OWORD *)(v3 + 64) = 0u;
        *(_BYTE *)(v3 + 80) = 6;
        if (one-time initialization token for string == -1)
          goto LABEL_37;
        goto LABEL_76;
      }
      v37 = v27;
    }
    else
    {
      v37 = v27;
    }
    outlined consume of NodePersonality(v37);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_76:
  swift_once();
LABEL_37:
  *(_QWORD *)(v3 + 88) = static MaterialXDataType.string;
  v38 = *(_QWORD *)(a2 + 40);
  swift_retain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v38, MEMORY[0x24BEE4AF8], (uint64_t)v18, v3, a2 + 64, a2, &v106);
  swift_bridgeObjectRelease();
  swift_release();
  v120 = v107;
  v39 = v87;
  v91 = *(_QWORD *)(v107 + 16);
  if (!v91)
    goto LABEL_54;
  v89 = v107 + 32;
  swift_bridgeObjectRetain();
  v40 = 0;
  while (2)
  {
    v42 = (uint64_t *)(v89 + 56 * v40);
    v43 = *v42;
    v44 = v42[1];
    v45 = v42[2];
    v46 = v42[3];
    v47 = v42[4];
    v48 = *((_BYTE *)v42 + 40);
    v49 = v42[6];
    *(_QWORD *)&v140 = v43;
    *((_QWORD *)&v140 + 1) = v44;
    v141 = v45;
    v142 = v46;
    v143 = v47;
    v144 = v48;
    v145 = v49;
    v50 = *(_QWORD *)(v39 + 16);
    if (!v50)
      goto LABEL_42;
    v93 = v40;
    v51 = (_QWORD *)(v87 + 80);
    do
    {
      v52 = *(v51 - 6);
      v53 = *(v51 - 5);
      v55 = *(v51 - 4);
      v54 = *(v51 - 3);
      v56 = *(v51 - 2);
      v57 = *((_BYTE *)v51 - 8);
      v58 = *v51;
      if (v55 == v45 && v54 == v46)
      {
        v41 = v46;
LABEL_40:
        v133 = v52;
        v134 = v53;
        v135 = v45;
        v136 = v41;
        v137 = v56;
        v138 = v57;
        v139 = v58;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdge(from:to:)((uint64_t)&v133, &v140);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_41;
      }
      v97 = *(v51 - 6);
      v153 = *v51;
      v60 = v53;
      v41 = v54;
      v61 = v45;
      v62 = v46;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v45 = v55;
        v53 = v60;
        v58 = v153;
        v52 = v97;
        goto LABEL_40;
      }
      v51 += 7;
      --v50;
      v46 = v62;
      v45 = v61;
    }
    while (v50);
    v133 = v97;
    v134 = v60;
    v135 = v55;
    v136 = v41;
    v137 = v56;
    v138 = v57;
    v139 = v153;
LABEL_41:
    v39 = v87;
    v40 = v93;
LABEL_42:
    if (++v40 != v91)
      continue;
    break;
  }
  outlined release of [Input]((uint64_t)&v120);
LABEL_54:
  v119 = v108;
  v92 = *(_QWORD *)(v108 + 16);
  if (!v92)
    goto LABEL_71;
  v90 = v108 + 32;
  swift_bridgeObjectRetain();
  v63 = 0;
  v64 = v88;
  while (2)
  {
    v66 = (uint64_t *)(v90 + 56 * v63);
    v67 = *v66;
    v68 = v66[1];
    v69 = v66[2];
    v70 = v66[3];
    v71 = v66[4];
    v72 = *((_BYTE *)v66 + 40);
    v73 = v66[6];
    v130[0] = v67;
    v130[1] = v68;
    v130[2] = v69;
    v130[3] = v70;
    v130[4] = v71;
    v131 = v72;
    v132 = v73;
    v74 = *(_QWORD *)(v64 + 16);
    if (!v74)
      goto LABEL_59;
    v94 = v63;
    v75 = (_QWORD *)(v88 + 80);
    while (2)
    {
      v76 = *(v75 - 6);
      v77 = *(v75 - 5);
      v79 = *(v75 - 4);
      v78 = *(v75 - 3);
      v80 = *(v75 - 2);
      v81 = *((_BYTE *)v75 - 8);
      v82 = *v75;
      if (v79 == v69 && v78 == v70)
      {
        v65 = v70;
LABEL_57:
        v123 = v76;
        v124 = v77;
        v125 = v69;
        v126 = v65;
        v127 = v80;
        v128 = v81;
        v129 = v82;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdges(from:to:)((uint64_t)&v123, (uint64_t)v130);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_58;
      }
      v98 = *(v75 - 6);
      v153 = *v75;
      v65 = v78;
      v84 = v69;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v69 = v79;
        v82 = v153;
        v76 = v98;
        goto LABEL_57;
      }
      v75 += 7;
      --v74;
      v69 = v84;
      if (v74)
        continue;
      break;
    }
    v123 = v98;
    v124 = v77;
    v125 = v79;
    v126 = v65;
    v127 = v80;
    v128 = v81;
    v129 = v153;
LABEL_58:
    v64 = v88;
    v63 = v94;
LABEL_59:
    if (++v63 != v92)
      continue;
    break;
  }
  outlined release of [Input]((uint64_t)&v119);
LABEL_71:
  specialized Graph.remove(_:)(v86);
  outlined consume of NodePersonality(v85);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of NodePersonality(&v106, &v118);
  outlined release of NodePersonality(&v118);
  outlined release of [Input]((uint64_t)&v120);
  v24 = &v119;
  return outlined release of [Input]((uint64_t)v24);
}

void closure #1 in Graph.resolvingNodegraphImplementations(nodeDefStore:)(uint64_t *a1, _QWORD *a2, void *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  int64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _QWORD *v30;
  uint64_t v31;
  __int128 v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int64_t *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  void *v53;
  uint64_t v54;
  Swift::String v55;
  __int128 v56;
  int64_t v57;
  _QWORD *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int64_t *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  int64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  char v106;
  void *v107;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  int64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  char v129;
  void *v130;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  int64_t *v141;
  int64_t *v142;
  uint64_t v143;
  int64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  _OWORD v150[9];
  _OWORD v151[4];
  _OWORD v152[9];
  _OWORD v153[2];
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  _OWORD v163[2];
  _OWORD v164[2];
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  _OWORD v172[2];
  _OWORD v173[9];
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _OWORD v180[9];
  _OWORD v181[2];
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  char v187;
  void *v188;
  _QWORD v189[5];
  char v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  char v197;
  void *v198;
  __int128 v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char v203;
  uint64_t v204;
  void *v205;
  ShaderGraph::NodeDefStore v206;

  v6 = v5;
  v205 = a3;
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NodeDef.Implementation?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v138 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for NodeDef.Implementation.Kind(0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (_OWORD *)((char *)&v138 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = *a1;
  if ((unint64_t)*a1 >> 61 != 5 || !a2[2])
    return;
  v149 = a4;
  v18 = (int64_t *)a1[1];
  v145 = a1[2];
  v146 = a5;
  v143 = a1[3];
  v19 = *(_QWORD *)(v17 + 24);
  v20 = *(_QWORD *)((v17 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  swift_bridgeObjectRetain();
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v19);
  if ((v22 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v23 = (_OWORD *)(a2[7] + 144 * v21);
  v173[0] = *v23;
  v24 = v23[4];
  v26 = v23[1];
  v25 = v23[2];
  v173[3] = v23[3];
  v173[4] = v24;
  v173[1] = v26;
  v173[2] = v25;
  v27 = v23[8];
  v29 = v23[5];
  v28 = v23[6];
  v173[7] = v23[7];
  v173[8] = v27;
  v173[5] = v29;
  v173[6] = v28;
  outlined retain of NodeDef((uint64_t)v173);
  swift_bridgeObjectRelease();
  v30 = v149;
  v31 = v149[2];
  v144 = v18;
  v147 = v6;
  if (v31)
  {
    v32 = v173[0];
    swift_bridgeObjectRetain();
    v33 = specialized __RawDictionaryStorage.find<A>(_:)(v32, *((uint64_t *)&v32 + 1));
    if ((v34 & 1) != 0)
    {
      v35 = *(_QWORD *)(v30[7] + 8 * v33);
      swift_bridgeObjectRetain();
    }
    else
    {
      v35 = MEMORY[0x24BEE4AF8];
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v35 = MEMORY[0x24BEE4AF8];
  }
  outlined release of NodeDef((uint64_t)v173);
  v36 = *(_QWORD *)(v35 + 16);
  v37 = type metadata accessor for NodeDef.Implementation(0);
  v38 = *(_QWORD *)(v37 - 8);
  if (v36)
  {
    outlined init with copy of NodeDef.Implementation.Kind(v35 + ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80)), (uint64_t)v13, type metadata accessor for NodeDef.Implementation);
    v39 = 0;
  }
  else
  {
    v39 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v13, v39, 1, v37);
  swift_bridgeObjectRelease();
  v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48))(v13, 1, v37);
  v41 = v144;
  if (v40 == 1)
  {
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for NodeDef.Implementation?);
    return;
  }
  outlined init with copy of NodeDef.Implementation.Kind((uint64_t)v13, (uint64_t)v16, type metadata accessor for NodeDef.Implementation.Kind);
  outlined destroy of NodeDef.Implementation((uint64_t)v13, type metadata accessor for NodeDef.Implementation);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of NodeDef.Implementation((uint64_t)v16, type metadata accessor for NodeDef.Implementation.Kind);
    return;
  }
  v42 = v16[7];
  v43 = v16[9];
  v171 = v16[8];
  v172[0] = v43;
  *(_OWORD *)((char *)v172 + 9) = *(_OWORD *)((char *)v16 + 153);
  v44 = v16[3];
  v45 = v16[5];
  v167 = v16[4];
  v168 = v45;
  v46 = v16[5];
  v47 = v16[7];
  v169 = v16[6];
  v170 = v47;
  v48 = v16[1];
  v164[0] = *v16;
  v164[1] = v48;
  v49 = v16[3];
  v51 = *v16;
  v50 = v16[1];
  v165 = v16[2];
  v166 = v49;
  v52 = v16[9];
  v162 = v171;
  v163[0] = v52;
  *(_OWORD *)((char *)v163 + 9) = *(_OWORD *)((char *)v16 + 153);
  v158 = v167;
  v159 = v46;
  v160 = v169;
  v161 = v42;
  v154 = v51;
  v155 = v50;
  v156 = v165;
  v157 = v44;
  outlined retain of Graph((uint64_t)v164);
  v206.nodeDefs._rawValue = a2;
  v206.geomPropDefs._rawValue = v205;
  v206.implementations._rawValue = v149;
  Graph.resolvingNodegraphImplementations(nodeDefStore:)(v206);
  if (v53)
  {
    v180[8] = v162;
    v181[0] = v163[0];
    *(_OWORD *)((char *)v181 + 9) = *(_OWORD *)((char *)v163 + 9);
    v180[4] = v158;
    v180[5] = v159;
    v180[7] = v161;
    v180[6] = v160;
    v180[0] = v154;
    v180[1] = v155;
    v180[3] = v157;
    v180[2] = v156;
    outlined release of Graph((uint64_t)v180);
    outlined release of Graph((uint64_t)v164);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v54 = swift_allocObject();
    *(_OWORD *)(v54 + 16) = xmmword_245FBECD0;
    *(_QWORD *)&v152[0] = 0;
    *((_QWORD *)&v152[0] + 1) = 0xE000000000000000;
    v55._countAndFlagsBits = 0x20524F525245;
    v55._object = (void *)0xE600000000000000;
    String.append(_:)(v55);
    *(_QWORD *)&v150[0] = v53;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)();
    v56 = v152[0];
    *(_QWORD *)(v54 + 56) = MEMORY[0x24BEE0D00];
    *(_OWORD *)(v54 + 32) = v56;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();

    return;
  }
  v57 = v41[2];
  v147 = 0;
  if (v57)
  {
    *(_QWORD *)&v180[0] = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v57, 0);
    v58 = *(_QWORD **)&v180[0];
    v59 = v41 + 7;
    do
    {
      v60 = *(v59 - 2);
      v61 = *(v59 - 1);
      v62 = *v59;
      *(_QWORD *)&v180[0] = v58;
      v64 = v58[2];
      v63 = v58[3];
      swift_retain();
      swift_bridgeObjectRetain();
      if (v64 >= v63 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v63 > 1, v64 + 1, 1);
        v58 = *(_QWORD **)&v180[0];
      }
      v58[2] = v64 + 1;
      v65 = &v58[3 * v64];
      v65[4] = v61;
      v65[5] = v62;
      v65[6] = v60;
      v59 += 7;
      --v57;
    }
    while (v57);
    v205 = v58;
    v41 = v144;
    swift_bridgeObjectRelease();
  }
  else
  {
    v205 = (void *)MEMORY[0x24BEE4AF8];
  }
  v66 = v145;
  v67 = *(_QWORD *)(v145 + 16);
  v68 = MEMORY[0x24BEE4AF8];
  if (v67)
  {
    *(_QWORD *)&v180[0] = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v67, 0);
    v68 = *(_QWORD *)&v180[0];
    v69 = (uint64_t *)(v66 + 56);
    do
    {
      v70 = *(v69 - 2);
      v71 = *(v69 - 1);
      v72 = *v69;
      *(_QWORD *)&v180[0] = v68;
      v74 = *(_QWORD *)(v68 + 16);
      v73 = *(_QWORD *)(v68 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v74 >= v73 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v73 > 1, v74 + 1, 1);
        v68 = *(_QWORD *)&v180[0];
      }
      *(_QWORD *)(v68 + 16) = v74 + 1;
      v75 = (_QWORD *)(v68 + 24 * v74);
      v75[4] = v71;
      v75[5] = v72;
      v75[6] = v70;
      v69 += 7;
      --v67;
    }
    while (v67);
    swift_bridgeObjectRelease();
    v41 = v144;
  }
  v76 = swift_allocObject();
  v77 = v163[0];
  v152[8] = v162;
  v153[0] = v163[0];
  *(_OWORD *)((char *)v153 + 9) = *(_OWORD *)((char *)v163 + 9);
  v78 = v158;
  v79 = v159;
  v152[4] = v158;
  v152[5] = v159;
  v81 = v160;
  v80 = v161;
  v152[6] = v160;
  v152[7] = v161;
  v82 = v154;
  v83 = v155;
  v152[0] = v154;
  v152[1] = v155;
  v85 = v156;
  v84 = v157;
  v152[2] = v156;
  v152[3] = v157;
  *(_OWORD *)(v76 + 144) = v162;
  *(_OWORD *)(v76 + 160) = v77;
  *(_OWORD *)(v76 + 169) = *(_OWORD *)((char *)v163 + 9);
  *(_OWORD *)(v76 + 80) = v78;
  *(_OWORD *)(v76 + 96) = v79;
  *(_OWORD *)(v76 + 112) = v81;
  *(_OWORD *)(v76 + 128) = v80;
  *(_OWORD *)(v76 + 16) = v82;
  *(_OWORD *)(v76 + 32) = v83;
  *(_OWORD *)(v76 + 48) = v85;
  *(_OWORD *)(v76 + 64) = v84;
  v86 = v76 | 0xC000000000000000;
  v87 = v146;
  v88 = *(_QWORD *)(v146 + 40);
  outlined retain of Graph((uint64_t)v152);
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v88, (uint64_t)v205, v68, v86, v87 + 64, v87, &v174);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v179 = v175;
  v141 = *(int64_t **)(v175 + 16);
  if (!v141)
    goto LABEL_50;
  v139 = (_QWORD *)(v175 + 32);
  swift_bridgeObjectRetain();
  v89 = 0;
  v138 = v41 + 10;
  while (2)
  {
    v91 = &v139[7 * (_QWORD)v89];
    v92 = *v91;
    v93 = v91[1];
    v94 = v91[2];
    v95 = v91[3];
    v96 = v91[4];
    v97 = *((_BYTE *)v91 + 40);
    v98 = v91[6];
    *(_QWORD *)&v199 = v92;
    *((_QWORD *)&v199 + 1) = v93;
    v200 = v94;
    v201 = v95;
    v202 = v96;
    v203 = v97;
    v204 = v98;
    v99 = v41[2];
    if (!v99)
      goto LABEL_38;
    v140 = v93;
    v142 = v89;
    v100 = v138;
    do
    {
      v101 = *(v100 - 6);
      v102 = *(v100 - 5);
      v104 = *(v100 - 4);
      v103 = *(v100 - 3);
      v105 = (_QWORD *)*(v100 - 2);
      v106 = *((_BYTE *)v100 - 8);
      v107 = (void *)*v100;
      if (v104 == v94 && v103 == v95)
      {
        v90 = v95;
LABEL_36:
        v192 = v101;
        v193 = v102;
        v194 = v94;
        v195 = v90;
        v196 = v105;
        v197 = v106;
        v198 = v107;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdge(from:to:)((uint64_t)&v192, &v199);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_37;
      }
      v148 = *(v100 - 6);
      v149 = v105;
      v205 = v107;
      v109 = v103;
      v110 = v94;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v94 = v104;
        v107 = v205;
        v90 = v109;
        v101 = v148;
        v105 = v149;
        goto LABEL_36;
      }
      v100 += 7;
      --v99;
      v94 = v110;
    }
    while (v99);
    v192 = v148;
    v193 = v102;
    v194 = v104;
    v195 = v109;
    v196 = v149;
    v197 = v106;
    v198 = v205;
LABEL_37:
    v41 = v144;
    v89 = v142;
LABEL_38:
    v89 = (int64_t *)((char *)v89 + 1);
    if (v89 != v141)
      continue;
    break;
  }
  outlined release of [Input]((uint64_t)&v179);
LABEL_50:
  v178 = v176;
  v111 = v145;
  v142 = *(int64_t **)(v176 + 16);
  if (!v142)
    goto LABEL_67;
  v140 = v176 + 32;
  swift_bridgeObjectRetain();
  v112 = 0;
  v139 = (_QWORD *)(v111 + 80);
  while (2)
  {
    v114 = (uint64_t *)(v140 + 56 * (_QWORD)v112);
    v115 = *v114;
    v116 = (int64_t *)v114[1];
    v117 = v114[2];
    v118 = v114[3];
    v119 = v114[4];
    v120 = *((_BYTE *)v114 + 40);
    v121 = v114[6];
    v189[0] = v115;
    v189[1] = v116;
    v189[2] = v117;
    v189[3] = v118;
    v189[4] = v119;
    v190 = v120;
    v191 = v121;
    v122 = *(_QWORD *)(v111 + 16);
    if (!v122)
      goto LABEL_55;
    v141 = v116;
    v144 = v112;
    v123 = v139;
    while (2)
    {
      v125 = *(v123 - 6);
      v124 = *(v123 - 5);
      v127 = *(v123 - 4);
      v126 = *(v123 - 3);
      v128 = (_QWORD *)*(v123 - 2);
      v129 = *((_BYTE *)v123 - 8);
      v130 = (void *)*v123;
      if (v127 == v117 && v126 == v118)
      {
        v113 = v118;
LABEL_53:
        v182 = v125;
        v183 = v124;
        v184 = v117;
        v185 = v113;
        v186 = v128;
        v187 = v129;
        v188 = v130;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdges(from:to:)((uint64_t)&v182, (uint64_t)v189);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_54;
      }
      v148 = *(v123 - 6);
      v149 = v128;
      v205 = v130;
      v132 = v124;
      v133 = v126;
      v134 = v117;
      v135 = v118;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v117 = v127;
        v124 = v132;
        v130 = v205;
        v113 = v133;
        v125 = v148;
        v128 = v149;
        goto LABEL_53;
      }
      v123 += 7;
      --v122;
      v118 = v135;
      v117 = v134;
      if (v122)
        continue;
      break;
    }
    v182 = v148;
    v183 = v132;
    v184 = v127;
    v185 = v133;
    v186 = v149;
    v187 = v129;
    v188 = v205;
LABEL_54:
    v112 = v144;
    v111 = v145;
LABEL_55:
    v112 = (int64_t *)((char *)v112 + 1);
    if (v112 != v142)
      continue;
    break;
  }
  outlined release of [Input]((uint64_t)&v178);
LABEL_67:
  specialized Graph.remove(_:)(v143);
  if (one-time initialization token for debugMode != -1)
    swift_once();
  swift_beginAccess();
  v136 = static DebugConfig.debugMode;
  if (*(_QWORD *)(static DebugConfig.debugMode + 16))
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v137 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v136 + 32));
    if (((*(_QWORD *)(v136 + 56 + ((v137 >> 3) & 0xFFFFFFFFFFFFF8)) >> v137) & 1) != 0)
      __asm { BR              X9 }
    swift_bridgeObjectRelease();
  }
  Graph.hoist(_:)(&v174);
  outlined init with take of NodePersonality(&v174, &v177);
  outlined release of NodePersonality(&v177);
  outlined release of [Input]((uint64_t)&v179);
  outlined release of [Input]((uint64_t)&v178);
  outlined release of Graph((uint64_t)v164);
  v150[8] = v162;
  v151[0] = v163[0];
  *(_OWORD *)((char *)v151 + 9) = *(_OWORD *)((char *)v163 + 9);
  v150[4] = v158;
  v150[5] = v159;
  v150[6] = v160;
  v150[7] = v161;
  v150[0] = v154;
  v150[1] = v155;
  v150[2] = v156;
  v150[3] = v157;
  outlined release of Graph((uint64_t)v150);
}

BOOL ShaderGraphNode.isMaterialXSwizzleNode.getter()
{
  return ShaderGraphNode.isMaterialXSwizzleNode.getter(0x7A7A6977735F444ELL, (void *)0xEA0000000000656CLL);
}

void closure #1 in Graph.resolveSwizzleNodes(nodeDefStore:)(__int128 *a1, unint64_t p_base_meths, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  void (*v7)(char *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _OWORD *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  _OWORD *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  void *v85;
  unint64_t v86;
  int v87;
  int v88;
  _OWORD *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _OWORD *v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  id v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  void *v116;
  uint64_t v117;
  unint64_t v118;
  _OWORD *v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  char *v129;
  char *v130;
  void (*v131)(char *, uint64_t);
  uint64_t v132;
  char *v133;
  void (*v134)(char *, uint64_t);
  char v135;
  id v136;
  void *v137;
  _OWORD *v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  id v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  uint64_t v157;
  char v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  _OWORD *v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 *v174;
  uint64_t v175;
  uint64_t v176;
  __objc2_meth_list *v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  _OWORD *v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _OWORD *v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  char v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _OWORD *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  uint64_t v223;
  char v224;
  uint64_t v225;
  _OWORD *v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _OWORD *v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  uint64_t v253;
  char v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _OWORD *v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  uint64_t v268;
  char v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _OWORD *v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  uint64_t v283;
  char v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _OWORD *v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  char v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  __objc2_meth_list *v303;
  char v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  _OWORD *v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  void *v319;
  id v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  uint64_t v327;
  char v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  char v332;
  uint64_t v333;
  unint64_t v334;
  int v335;
  int v336;
  int v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  unint64_t v347;
  uint64_t v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  char v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  char v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  id v364;
  void *v365;
  _OWORD *v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  uint64_t v376;
  char v377;
  uint64_t v378;
  char v379;
  uint64_t v380;
  char v381;
  uint64_t v382;
  char v383;
  uint64_t v384;
  char v385;
  int v386;
  _OWORD *v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  char v397;
  int v398;
  int v399;
  int v400;
  int v401;
  _OWORD *v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  char v412;
  char v413;
  uint64_t v414;
  uint64_t v415;
  int v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  __int128 *v424;
  uint64_t v425;
  uint64_t v426;
  int v427;
  uint64_t v428;
  uint64_t v429;
  unint64_t v430;
  unint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  void *v441;
  id v442;
  void (*v443)(char *, uint64_t);
  char *v444;
  char *v445;
  uint64_t v446;
  char *v447;
  __objc2_meth_list **v448;
  uint64_t v449;
  uint64_t v450;
  __int128 v451;
  uint64_t v452;
  uint64_t v453;
  unsigned int v454;
  __int128 v455;
  unint64_t v456;
  unint64_t v457;
  __int128 v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  char v462;
  char v463;
  uint64_t v464;
  unint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  char v469;
  uint64_t v470;
  __int128 v471;
  __int128 v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  _OWORD v484[3];
  _QWORD v485[7];
  uint64_t v486[14];
  _QWORD v487[2];
  __int128 v488;
  uint64_t v489;
  unsigned __int8 v490;
  uint64_t v491;
  _QWORD v492[7];
  unint64_t v493;
  uint64_t v494;
  uint64_t v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  uint64_t v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  uint64_t v503;
  _QWORD v504[14];
  _OWORD v505[3];
  uint64_t v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  uint64_t v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  unint64_t v555;
  __int128 v556;
  unint64_t v557;
  uint64_t v558;
  uint64_t v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  _QWORD v578[5];
  _QWORD v579[5];
  char v580;
  uint64_t v581;
  __int128 v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  char v586;
  uint64_t v587;
  __int128 v588;
  _OWORD v589[2];
  _OWORD v590[4];
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  _OWORD v596[2];
  _OWORD v597[9];
  _OWORD v598[2];
  unint64_t v599;
  uint64_t v600;
  unint64_t v601;
  uint64_t v602;
  unint64_t v603;
  uint64_t v604;
  unint64_t v605;
  uint64_t v606;
  unint64_t v607;
  uint64_t v608;
  unint64_t v609;
  uint64_t v610;
  unint64_t v611;
  uint64_t v612;
  unint64_t v613;
  uint64_t v614;
  unint64_t v615;
  uint64_t v616[3];
  uint64_t v617;

  v449 = a3;
  v450 = a4;
  v6 = type metadata accessor for CharacterSet();
  v7 = *(void (**)(char *, uint64_t))(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v414 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v414 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v414 - v14;
  v588 = *a1;
  v589[0] = a1[1];
  *(_OWORD *)((char *)v589 + 9) = *(__int128 *)((char *)a1 + 25);
  v16 = *((_QWORD *)a1 + 1);
  *(_QWORD *)&v451 = *(_QWORD *)a1;
  *((_QWORD *)&v451 + 1) = v16;
  v17 = *((_QWORD *)a1 + 3);
  v452 = *((_QWORD *)a1 + 2);
  v453 = v17;
  v617 = *((_QWORD *)a1 + 4);
  v454 = *((unsigned __int8 *)a1 + 40);
  *(_OWORD *)((char *)v598 + 9) = *(_OWORD *)(p_base_meths + 153);
  v18 = *(_OWORD *)(p_base_meths + 144);
  v597[8] = *(_OWORD *)(p_base_meths + 128);
  v598[0] = v18;
  v19 = *(_OWORD *)(p_base_meths + 112);
  v597[6] = *(_OWORD *)(p_base_meths + 96);
  v597[7] = v19;
  v20 = *(_OWORD *)(p_base_meths + 80);
  v597[4] = *(_OWORD *)(p_base_meths + 64);
  v597[5] = v20;
  v21 = *(_OWORD *)(p_base_meths + 16);
  v597[0] = *(_OWORD *)p_base_meths;
  v597[1] = v21;
  v22 = *(_OWORD *)(p_base_meths + 48);
  v597[2] = *(_OWORD *)(p_base_meths + 32);
  v597[3] = v22;
  outlined retain of Graph((uint64_t)v597);
  v23 = v455;
  ShaderGraphNode.out.getter((uint64_t)v484);
  if (v23)
  {
    outlined release of Graph((uint64_t)v597);
    return;
  }
  v443 = v7;
  v444 = v10;
  v445 = v13;
  v446 = v6;
  *(_QWORD *)&v455 = 0;
  v447 = v15;
  v448 = (__objc2_meth_list **)p_base_meths;
  v24 = Graph.edges(from:)((uint64_t)v484);
  swift_release();
  v577 = v484[1];
  outlined release of String((uint64_t)&v577);
  outlined release of Graph((uint64_t)v597);
  v25 = *(_QWORD *)(v24 + 16);
  swift_bridgeObjectRelease();
  if (v25)
  {
    v26 = *((_QWORD *)&v588 + 1);
    v27 = v455;
    specialized Sequence.first(where:)(*((uint64_t *)&v588 + 1), 0x736C656E6E616863, 0xE800000000000000, v485);
    outlined init with take of MetalFunctionNode?((uint64_t)v485, (uint64_t)v505, (uint64_t *)&demangling cache variable for type metadata for Input?);
    if (!*((_QWORD *)&v505[0] + 1))
    {
      outlined init with take of NodePersonality(&v588, &v599);
      v600 = *(_QWORD *)&v589[0];
      v458 = v451;
      v459 = v452;
      v460 = v453;
      v461 = v617;
      v462 = v454;
      v464 = 0x736C656E6E616863;
      v465 = 0xE800000000000000;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v458);
      outlined init with take of UserGraphError.ErrorType(&v458, (uint64_t)&v471);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      v483 = 0uLL;
      swift_allocError();
      *v47 = v471;
      v48 = v475;
      v50 = v472;
      v49 = v473;
      v47[3] = v474;
      v47[4] = v48;
      v47[1] = v50;
      v47[2] = v49;
      v51 = v479;
      v53 = v476;
      v52 = v477;
      v47[7] = v478;
      v47[8] = v51;
      v47[5] = v53;
      v47[6] = v52;
      v54 = v483;
      v56 = v480;
      v55 = v481;
      v47[11] = v482;
      v47[12] = v54;
      v47[9] = v56;
      v47[10] = v55;
      swift_bridgeObjectRetain();
      outlined retain of NodePersonality(&v599);
      outlined retain of [Input]((uint64_t)&v600);
      swift_willThrow();
      return;
    }
    v507 = v505[0];
    v508 = v505[1];
    v509 = v505[2];
    v510 = v506;
    v28 = *((_OWORD *)v448 + 9);
    v595 = *((_OWORD *)v448 + 8);
    v596[0] = v28;
    *(_OWORD *)((char *)v596 + 9) = *(_OWORD *)((char *)v448 + 153);
    v29 = *((_OWORD *)v448 + 5);
    v591 = *((_OWORD *)v448 + 4);
    v592 = v29;
    v30 = *((_OWORD *)v448 + 7);
    v593 = *((_OWORD *)v448 + 6);
    v594 = v30;
    v31 = *((_OWORD *)v448 + 1);
    v590[0] = *(_OWORD *)v448;
    v590[1] = v31;
    v32 = *((_OWORD *)v448 + 3);
    v590[2] = *((_OWORD *)v448 + 2);
    v590[3] = v32;
    outlined retain of Graph((uint64_t)v590);
    Graph.edge(to:)((uint64_t)&v507, v486);
    v33 = v486[0];
    v34 = outlined init with take of MetalFunctionNode?((uint64_t)v486, (uint64_t)v504, &demangling cache variable for type metadata for Edge?);
    v36 = v617;
    if (!v504[1])
    {
LABEL_8:
      outlined release of Graph((uint64_t)v590);
      *(_QWORD *)&v458 = 0xD000000000000018;
      *((_QWORD *)&v458 + 1) = 0x8000000245FCB7F0;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi4_((uint64_t)&v458);
      outlined init with take of UserGraphError.ErrorType(&v458, (uint64_t)&v471);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      v483 = 0uLL;
      swift_allocError();
      *v37 = v471;
      v38 = v475;
      v40 = v472;
      v39 = v473;
      v37[3] = v474;
      v37[4] = v38;
      v37[1] = v40;
      v37[2] = v39;
      v41 = v479;
      v43 = v476;
      v42 = v477;
      v37[7] = v478;
      v37[8] = v41;
      v37[5] = v43;
      v37[6] = v42;
      v44 = v483;
      v46 = v480;
      v45 = v481;
      v37[11] = v482;
      v37[12] = v44;
      v37[9] = v46;
      v37[10] = v45;
      swift_willThrow();
      swift_release();
      v511 = v508;
      outlined release of String((uint64_t)&v511);
      return;
    }
    if (v33 == -7)
    {
      outlined release of Edge?(v486);
      goto LABEL_8;
    }
    if ((v33 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v35 = *(_QWORD *)(v591 + 16);
      p_base_meths = v454;
      if (v33 < v35)
      {
        v57 = (_QWORD *)(v591 + 48 * v33);
        v59 = v57[4];
        v58 = v57[5];
        v60 = v57[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of NodePersonality(v59);
        outlined release of Edge?(v486);
        outlined release of Graph((uint64_t)v590);
        if (v59 >> 61)
        {
          outlined init with take of NodePersonality(&v588, &v601);
          v602 = *(_QWORD *)&v589[0];
          v458 = v451;
          v459 = v452;
          v460 = v453;
          v461 = v36;
          v462 = p_base_meths;
          v463 = 0;
          _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi31_((uint64_t)&v458);
          outlined init with take of UserGraphError.ErrorType(&v458, (uint64_t)&v471);
          lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
          v483 = 0uLL;
          swift_allocError();
          *v69 = v471;
          v70 = v475;
          v72 = v472;
          v71 = v473;
          v69[3] = v474;
          v69[4] = v70;
          v69[1] = v72;
          v69[2] = v71;
          v73 = v479;
          v75 = v476;
          v74 = v477;
          v69[7] = v478;
          v69[8] = v73;
          v69[5] = v75;
          v69[6] = v74;
          v76 = v483;
          v78 = v480;
          v77 = v481;
          v69[11] = v482;
          v69[12] = v76;
          v69[9] = v78;
          v69[10] = v77;
          swift_bridgeObjectRetain();
          outlined retain of NodePersonality(&v601);
          outlined retain of [Input]((uint64_t)&v602);
          swift_willThrow();
          outlined consume of NodePersonality(v59);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          v512 = v508;
          outlined release of String((uint64_t)&v512);
          return;
        }
        v435 = v26;
        v436 = v60;
        v437 = v58;
        v61 = *(void **)(v59 + 24);
        v62 = *(_QWORD *)(v59 + 32);
        v63 = *(_QWORD *)(v59 + 40);
        v64 = *(_QWORD *)(v59 + 48);
        v65 = *(_QWORD *)(v59 + 56);
        v67 = *(_QWORD *)(v59 + 64);
        v66 = *(_QWORD *)(v59 + 72);
        v68 = *(unsigned __int8 *)(v59 + 80);
        v412 = *(_BYTE *)(v59 + 80);
        v441 = *(void **)(v59 + 16);
        v442 = v61;
        v439 = v64;
        v440 = v62;
        v438 = v63;
        outlined copy of SGDataTypeStorage(v441, v61, v62, v63, v64, v65, v67, v66, v412);
        ShaderGraphNode.out.getter((uint64_t)v487);
        if (v27)
        {
          outlined consume of SGDataTypeStorage(v441, v442, v440, v438, v439, v65, v67, v66, v68);
          outlined consume of NodePersonality(v59);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          v531 = v508;
          outlined release of String((uint64_t)&v531);
          return;
        }
        LODWORD(v455) = v68;
        v431 = v59;
        v432 = v66;
        v433 = v65;
        v434 = v67;
        v79 = v487[0];
        v80 = v487[1];
        v81 = v488;
        v428 = v489;
        v429 = *((_QWORD *)&v488 + 1);
        v427 = v490;
        v426 = v491;
        specialized Sequence.first(where:)(v435, 28265, 0xE200000000000000, v492);
        outlined init with take of MetalFunctionNode?((uint64_t)v492, (uint64_t)&v496, (uint64_t *)&demangling cache variable for type metadata for Input?);
        if (!*((_QWORD *)&v496 + 1))
        {
          outlined init with take of NodePersonality(&v588, &v603);
          v604 = *(_QWORD *)&v589[0];
          v458 = v451;
          v459 = v452;
          v460 = v453;
          v461 = v617;
          v462 = v454;
          v464 = 28265;
          v465 = 0xE200000000000000;
          _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v458);
          outlined init with take of UserGraphError.ErrorType(&v458, (uint64_t)&v471);
          lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
          v483 = 0uLL;
          swift_allocError();
          *v99 = v471;
          v100 = v475;
          v102 = v472;
          v101 = v473;
          v99[3] = v474;
          v99[4] = v100;
          v99[1] = v102;
          v99[2] = v101;
          v103 = v479;
          v105 = v476;
          v104 = v477;
          v99[7] = v478;
          v99[8] = v103;
          v99[5] = v105;
          v99[6] = v104;
          v106 = v483;
          v108 = v480;
          v107 = v481;
          v99[11] = v482;
          v99[12] = v106;
          v99[9] = v108;
          v99[10] = v107;
          swift_bridgeObjectRetain();
          outlined retain of NodePersonality(&v603);
          outlined retain of [Input]((uint64_t)&v604);
          swift_willThrow();
          swift_release();
          v576 = v488;
          outlined release of String((uint64_t)&v576);
          outlined consume of SGDataTypeStorage(v441, v442, v440, v438, v439, v433, v434, v432, v455);
          outlined consume of NodePersonality(v431);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          v513 = v508;
          outlined release of String((uint64_t)&v513);
          return;
        }
        v422 = v81;
        v423 = 0;
        v430 = v80;
        v500 = v496;
        v501 = v497;
        v502 = v498;
        v503 = v499;
        v82 = *((_QWORD *)&v496 + 1);
        v83 = v455;
        v84 = v433;
        v85 = v441;
        if ((_DWORD)v455 != 6)
        {
          v109 = v434;
          outlined init with take of NodePersonality(&v588, &v605);
          v606 = *(_QWORD *)&v589[0];
          *(_QWORD *)&v471 = v85;
          *((_QWORD *)&v471 + 1) = v442;
          v424 = &v488;
          v425 = v82;
          v110 = v442;
          v111 = v439;
          v112 = v440;
          *(_QWORD *)&v472 = v440;
          v113 = v438;
          *((_QWORD *)&v472 + 1) = v438;
          *(_QWORD *)&v473 = v439;
          *((_QWORD *)&v473 + 1) = v84;
          *(_QWORD *)&v474 = v109;
          v114 = v84;
          v115 = v432;
          *((_QWORD *)&v474 + 1) = v432;
          LOBYTE(v475) = v83;
          swift_bridgeObjectRetain();
          v413 = v83;
          v116 = v441;
          outlined copy of SGDataTypeStorage(v441, v110, v112, v113, v111, v114, v109, v115, v413);
          swift_retain();
          swift_retain();
          outlined retain of NodePersonality(&v605);
          outlined retain of [Input]((uint64_t)&v606);
          v117 = String.init<A>(describing:)();
          v458 = v451;
          v459 = v452;
          v460 = v453;
          v461 = v617;
          v462 = v454;
          v464 = v117;
          v465 = v118;
          _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_((uint64_t)&v458);
          outlined init with take of UserGraphError.ErrorType(&v458, (uint64_t)&v471);
          lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
          v483 = 0uLL;
          swift_allocError();
          *v119 = v471;
          v120 = v475;
          v122 = v472;
          v121 = v473;
          v119[3] = v474;
          v119[4] = v120;
          v119[1] = v122;
          v119[2] = v121;
          v123 = v479;
          v125 = v476;
          v124 = v477;
          v119[7] = v478;
          v119[8] = v123;
          v119[5] = v125;
          v119[6] = v124;
          v126 = v483;
          v128 = v480;
          v127 = v481;
          v119[11] = v482;
          v119[12] = v126;
          v119[9] = v128;
          v119[10] = v127;
          swift_willThrow();
          swift_release_n();
          v534 = v501;
          outlined release of String((uint64_t)&v534);
          swift_release_n();
          v575 = *v424;
          outlined release of String((uint64_t)&v575);
          outlined consume of SGDataTypeStorage(v116, v442, v440, v113, v111, v433, v434, v115, v455);
          outlined consume of NodePersonality(v431);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          v514 = v508;
          outlined release of String((uint64_t)&v514);
          return;
        }
        v420 = v499;
        v421 = *((_QWORD *)&v496 + 1);
        v414 = v79;
        v415 = v496;
        v418 = *((_QWORD *)&v497 + 1);
        v419 = v497;
        v417 = v498;
        v416 = BYTE8(v498);
        v86 = (unint64_t)v442;
        v87 = v440;
        v88 = v432;
        outlined copy of SGDataTypeStorage(v441, v442, v440, v438, v439, v433, v434, v432, 6);
        swift_retain();
        swift_retain();
        if ((unint64_t)(String.count.getter() - 5) < 0xFFFFFFFFFFFFFFFCLL)
        {
          outlined init with take of NodePersonality(&v588, &v607);
          v608 = *(_QWORD *)&v589[0];
          v458 = v451;
          v459 = v452;
          v460 = v453;
          v461 = v617;
          v462 = v454;
          v464 = (uint64_t)v85;
          v465 = v86;
          _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_((uint64_t)&v458);
          outlined init with take of UserGraphError.ErrorType(&v458, (uint64_t)&v471);
          lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
          v483 = 0uLL;
          swift_allocError();
          *v89 = v471;
          v90 = v475;
          v92 = v472;
          v91 = v473;
          v89[3] = v474;
          v89[4] = v90;
          v89[1] = v92;
          v89[2] = v91;
          v93 = v479;
          v95 = v476;
          v94 = v477;
          v89[7] = v478;
          v89[8] = v93;
          v89[5] = v95;
          v89[6] = v94;
          v96 = v483;
          v98 = v480;
          v97 = v481;
          v89[11] = v482;
          v89[12] = v96;
          v89[9] = v98;
          v89[10] = v97;
          swift_bridgeObjectRetain();
          outlined retain of NodePersonality(&v607);
          outlined retain of [Input]((uint64_t)&v608);
          swift_willThrow();
          swift_release_n();
          v535 = v501;
          outlined release of String((uint64_t)&v535);
          swift_release_n();
          v553 = v488;
          outlined release of String((uint64_t)&v553);
          outlined consume of SGDataTypeStorage(v85, v442, v87, v438, v439, v433, v434, v88, 6);
          outlined consume of NodePersonality(v431);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          v515 = v508;
          outlined release of String((uint64_t)&v515);
          return;
        }
        v424 = &v488;
        v425 = v82;
        v129 = v447;
        CharacterSet.init(charactersIn:)();
        v131 = v443;
        v130 = v444;
        *(_QWORD *)&v455 = *((_QWORD *)v443 + 2);
        v132 = v446;
        ((void (*)(char *, char *, uint64_t))v455)(v444, v129, v446);
        lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x24BDCB778]);
        v133 = v445;
        dispatch thunk of SetAlgebra.intersection(_:)();
        lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet((unint64_t *)&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x24BDCB768]);
        LODWORD(v449) = dispatch thunk of static Equatable.== infix(_:_:)();
        v134 = (void (*)(char *, uint64_t))*((_QWORD *)v131 + 1);
        v134(v133, v132);
        ((void (*)(char *, char *, uint64_t))v455)(v130, v129, v132);
        dispatch thunk of SetAlgebra.intersection(_:)();
        v135 = dispatch thunk of static Equatable.== infix(_:_:)();
        v134(v133, v132);
        if ((v449 & 1) == 0 && (v135 & 1) == 0)
        {
          outlined init with take of NodePersonality(&v588, &v615);
          v616[0] = *(_QWORD *)&v589[0];
          v458 = v451;
          v459 = v452;
          v460 = v453;
          v461 = v617;
          v462 = v454;
          v137 = v441;
          v136 = v442;
          v464 = (uint64_t)v441;
          v465 = (unint64_t)v442;
          _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_((uint64_t)&v458);
          outlined init with take of UserGraphError.ErrorType(&v458, (uint64_t)&v471);
          lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
          v483 = 0uLL;
          swift_allocError();
          *v138 = v471;
          v139 = v475;
          v141 = v472;
          v140 = v473;
          v138[3] = v474;
          v138[4] = v139;
          v138[1] = v141;
          v138[2] = v140;
          v142 = v479;
          v144 = v476;
          v143 = v477;
          v138[7] = v478;
          v138[8] = v142;
          v138[5] = v144;
          v138[6] = v143;
          v145 = v483;
          v147 = v480;
          v146 = v481;
          v138[11] = v482;
          v138[12] = v145;
          v138[9] = v147;
          v138[10] = v146;
          swift_bridgeObjectRetain();
          outlined retain of NodePersonality(&v615);
          outlined retain of [Input]((uint64_t)v616);
          swift_willThrow();
          swift_release();
          v530 = v508;
          outlined release of String((uint64_t)&v530);
          outlined consume of NodePersonality(v431);
          swift_release();
          swift_release_n();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v574 = *v424;
          outlined release of String((uint64_t)&v574);
          swift_release();
          v550 = v501;
          outlined release of String((uint64_t)&v550);
          outlined consume of SGDataTypeStorage(v137, v136, v440, v438, v439, v433, v434, v432, 6);
          v134(v447, v132);
          return;
        }
        v149 = v441;
        v148 = v442;
        v150 = v423;
        v151 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS_SisAE_pTg508_sSJSis5C131_pIggdzo_SJSisAA_pIegnrzr_TR91_s11ShaderGraph0B0V19resolveSwizzleNodes12nodeDefStoreyAA04NodegH0V_tKF5indexL_3forSiSJ_tKFTf3nnnpf_nTf1cn_n();
        v152 = v434;
        *(_QWORD *)&v455 = v150;
        v443 = v134;
        if (v150)
        {
          swift_release();
          v532 = v508;
          outlined release of String((uint64_t)&v532);
          swift_release();
          v153 = v440;
          v154 = v438;
          v155 = v152;
          v156 = v432;
          outlined consume of SGDataTypeStorage(v149, v148, v440, v438, v439, v433, v155, v432, 6);
          swift_release_n();
          v551 = v501;
          outlined release of String((uint64_t)&v551);
          swift_release();
          v573 = *v424;
          outlined release of String((uint64_t)&v573);
          outlined consume of NodePersonality(v431);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v443(v447, v132);
          outlined consume of SGDataTypeStorage(v149, v148, v153, v154, v439, v433, v434, v156, 6);
          return;
        }
        v450 = v151;
        v6 = (*(uint64_t (**)(void))(*(_QWORD *)v425 + 144))();
        v157 = one-time initialization token for float;
        swift_retain();
        if (v157 == -1)
        {
          p_base_meths = 0x257526000;
          if (!v6)
            goto LABEL_42;
        }
        else
        {
          swift_once();
          p_base_meths = (unint64_t)&SGEdge__classData.base_meths;
          if (!v6)
            goto LABEL_42;
        }
        v158 = MetalDataType.isEqual(to:)();
        swift_release();
        if ((v158 & 1) != 0)
        {
          v15 = (char *)0xD000000000000030;
          v34 = swift_release();
          v456 = 0xD00000000000001ELL;
          v457 = 0x8000000245FCB970;
          v35 = *(_QWORD *)(v450 + 16);
          if (!v35)
            goto LABEL_160;
          if (*(uint64_t *)(v450 + 32) > 0)
          {
LABEL_32:
            v159 = v439;
            v160 = v438;
            v162 = v433;
            v161 = v434;
            v163 = v432;
            outlined consume of SGDataTypeStorage(v441, v442, v440, v438, v439, v433, v434, v432, 6);
            swift_bridgeObjectRelease();
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v458);
            outlined init with take of UserGraphError.ErrorType(&v458, (uint64_t)&v471);
            *(_QWORD *)&v483 = v15;
            *((_QWORD *)&v483 + 1) = 0x8000000245FCB830;
            lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
            swift_allocError();
            *v164 = v471;
            v165 = v475;
            v167 = v472;
            v166 = v473;
            v164[3] = v474;
            v164[4] = v165;
            v164[1] = v167;
            v164[2] = v166;
            v168 = v479;
            v170 = v476;
            v169 = v477;
            v164[7] = v478;
            v164[8] = v168;
            v164[5] = v170;
            v164[6] = v169;
            v171 = v483;
            v173 = v480;
            v172 = v481;
            v164[11] = v482;
            v164[12] = v171;
            v164[9] = v173;
            v164[10] = v172;
            swift_willThrow();
            swift_release();
            v516 = v508;
            outlined release of String((uint64_t)&v516);
            outlined consume of NodePersonality(v431);
            swift_release();
            swift_release_n();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v562 = *v424;
            outlined release of String((uint64_t)&v562);
            swift_release();
            v536 = v501;
            v174 = &v536;
LABEL_176:
            outlined release of String((uint64_t)v174);
            v319 = v441;
            v320 = v442;
            v321 = v440;
            v322 = v160;
LABEL_177:
            v323 = v159;
            v324 = v162;
            v325 = v161;
            v326 = v163;
LABEL_199:
            outlined consume of SGDataTypeStorage(v319, v320, v321, v322, v323, v324, v325, v326, 6);
LABEL_200:
            v443(v447, v446);
            return;
          }
          goto LABEL_35;
        }
LABEL_42:
        v177 = *(__objc2_meth_list **)(p_base_meths + 3376);
        swift_retain();
        if (v177 == (__objc2_meth_list *)-1)
        {
          if (!v6)
            goto LABEL_55;
        }
        else
        {
          swift_once();
          if (!v6)
            goto LABEL_55;
        }
        v178 = MetalDataType.isEqual(to:)();
        swift_release();
        if ((v178 & 1) != 0)
        {
          v34 = swift_release();
          v456 = 0xD00000000000001FLL;
          v457 = 0x8000000245FCB950;
          v179 = *(_QWORD *)(v450 + 16);
          if (!v179)
            goto LABEL_160;
          if (*(uint64_t *)(v450 + 32) > 1)
          {
LABEL_53:
            v159 = v439;
            v160 = v438;
            v162 = v433;
            v161 = v434;
            v163 = v432;
            outlined consume of SGDataTypeStorage(v441, v442, v440, v438, v439, v433, v434, v432, 6);
            swift_bridgeObjectRelease();
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v458);
            outlined init with take of UserGraphError.ErrorType(&v458, (uint64_t)&v471);
            *(_QWORD *)&v483 = 0xD000000000000030;
            *((_QWORD *)&v483 + 1) = 0x8000000245FCB830;
            lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
            swift_allocError();
            *v183 = v471;
            v184 = v475;
            v186 = v472;
            v185 = v473;
            v183[3] = v474;
            v183[4] = v184;
            v183[1] = v186;
            v183[2] = v185;
            v187 = v479;
            v189 = v476;
            v188 = v477;
            v183[7] = v478;
            v183[8] = v187;
            v183[5] = v189;
            v183[6] = v188;
            v190 = v483;
            v192 = v480;
            v191 = v481;
            v183[11] = v482;
            v183[12] = v190;
            v183[9] = v192;
            v183[10] = v191;
            swift_willThrow();
            swift_release();
            v517 = v508;
            outlined release of String((uint64_t)&v517);
            outlined consume of NodePersonality(v431);
            swift_release();
            swift_release_n();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v563 = *v424;
            outlined release of String((uint64_t)&v563);
            swift_release();
            v537 = v501;
            v174 = &v537;
            goto LABEL_176;
          }
          if (v179 == 1)
            goto LABEL_160;
          v180 = 5;
          v181 = v430;
          while (1)
          {
            v182 = v180 - 3;
            if (__OFADD__(v180 - 4, 1))
              goto LABEL_68;
            if (*(uint64_t *)(v450 + 8 * v180) > 1)
              goto LABEL_53;
            ++v180;
            if (v182 == v179)
              goto LABEL_161;
          }
        }
LABEL_55:
        v193 = one-time initialization token for float3;
        swift_retain();
        if (v193 == -1)
        {
          if (!v6)
            goto LABEL_70;
LABEL_57:
          v194 = MetalDataType.isEqual(to:)();
          swift_release();
          if ((v194 & 1) != 0)
          {
            v34 = swift_release();
            v456 = 0xD00000000000001FLL;
            v457 = 0x8000000245FCB930;
            v195 = *(_QWORD *)(v450 + 16);
            if (!v195)
              goto LABEL_160;
            if (*(uint64_t *)(v450 + 32) > 2)
            {
LABEL_66:
              v159 = v439;
              v160 = v438;
              v162 = v433;
              v161 = v434;
              v163 = v432;
              outlined consume of SGDataTypeStorage(v441, v442, v440, v438, v439, v433, v434, v432, 6);
              swift_bridgeObjectRelease();
              _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v458);
              outlined init with take of UserGraphError.ErrorType(&v458, (uint64_t)&v471);
              *(_QWORD *)&v483 = 0xD000000000000030;
              *((_QWORD *)&v483 + 1) = 0x8000000245FCB830;
              lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
              swift_allocError();
              *v198 = v471;
              v199 = v475;
              v201 = v472;
              v200 = v473;
              v198[3] = v474;
              v198[4] = v199;
              v198[1] = v201;
              v198[2] = v200;
              v202 = v479;
              v204 = v476;
              v203 = v477;
              v198[7] = v478;
              v198[8] = v202;
              v198[5] = v204;
              v198[6] = v203;
              v205 = v483;
              v207 = v480;
              v206 = v481;
              v198[11] = v482;
              v198[12] = v205;
              v198[9] = v207;
              v198[10] = v206;
              swift_willThrow();
              swift_release();
              v518 = v508;
              outlined release of String((uint64_t)&v518);
              outlined consume of NodePersonality(v431);
              swift_release();
              swift_release_n();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v564 = *v424;
              outlined release of String((uint64_t)&v564);
              swift_release();
              v538 = v501;
              v174 = &v538;
              goto LABEL_176;
            }
            if (v195 == 1)
              goto LABEL_160;
            v196 = 5;
            v181 = v430;
            while (1)
            {
              v197 = v196 - 3;
              if (__OFADD__(v196 - 4, 1))
                break;
              if (*(uint64_t *)(v450 + 8 * v196) > 2)
                goto LABEL_66;
              ++v196;
              if (v197 == v195)
                goto LABEL_161;
            }
            __break(1u);
            goto LABEL_83;
          }
LABEL_70:
          v208 = one-time initialization token for float4;
          swift_retain();
          if (v208 == -1)
          {
            if (!v6)
              goto LABEL_84;
LABEL_72:
            v209 = MetalDataType.isEqual(to:)();
            swift_release();
            if ((v209 & 1) != 0)
            {
              v34 = swift_release();
              v456 = 0xD00000000000001FLL;
              v457 = 0x8000000245FCB910;
              v210 = *(_QWORD *)(v450 + 16);
              if (!v210)
                goto LABEL_160;
              if (*(uint64_t *)(v450 + 32) > 3)
              {
LABEL_81:
                v159 = v439;
                v160 = v438;
                v162 = v433;
                v161 = v434;
                v163 = v432;
                outlined consume of SGDataTypeStorage(v441, v442, v440, v438, v439, v433, v434, v432, 6);
                swift_bridgeObjectRelease();
                _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v458);
                outlined init with take of UserGraphError.ErrorType(&v458, (uint64_t)&v471);
                *(_QWORD *)&v483 = 0xD000000000000030;
                *((_QWORD *)&v483 + 1) = 0x8000000245FCB830;
                lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
                swift_allocError();
                *v213 = v471;
                v214 = v475;
                v216 = v472;
                v215 = v473;
                v213[3] = v474;
                v213[4] = v214;
                v213[1] = v216;
                v213[2] = v215;
                v217 = v479;
                v219 = v476;
                v218 = v477;
                v213[7] = v478;
                v213[8] = v217;
                v213[5] = v219;
                v213[6] = v218;
                v220 = v483;
                v222 = v480;
                v221 = v481;
                v213[11] = v482;
                v213[12] = v220;
                v213[9] = v222;
                v213[10] = v221;
                swift_willThrow();
                swift_release();
                v519 = v508;
                outlined release of String((uint64_t)&v519);
                outlined consume of NodePersonality(v431);
                swift_release();
                swift_release_n();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v565 = *v424;
                outlined release of String((uint64_t)&v565);
                swift_release();
                v539 = v501;
                v174 = &v539;
                goto LABEL_176;
              }
              if (v210 == 1)
                goto LABEL_160;
              v211 = 5;
              v181 = v430;
              while (1)
              {
                v212 = v211 - 3;
                if (__OFADD__(v211 - 4, 1))
                  break;
                if (*(uint64_t *)(v450 + 8 * v211) > 3)
                  goto LABEL_81;
                ++v211;
                if (v212 == v210)
                  goto LABEL_161;
              }
              __break(1u);
              goto LABEL_97;
            }
LABEL_84:
            v223 = one-time initialization token for half;
            swift_retain();
            if (v223 == -1)
            {
              if (!v6)
                goto LABEL_98;
LABEL_86:
              v224 = MetalDataType.isEqual(to:)();
              swift_release();
              if ((v224 & 1) != 0)
              {
                v34 = swift_release();
                v456 = 0xD00000000000001DLL;
                v457 = 0x8000000245FCB8F0;
                v225 = *(_QWORD *)(v450 + 16);
                if (!v225)
                  goto LABEL_160;
                if (*(uint64_t *)(v450 + 32) > 0)
                {
LABEL_89:
                  v159 = v439;
                  v160 = v438;
                  v162 = v433;
                  v161 = v434;
                  v163 = v432;
                  outlined consume of SGDataTypeStorage(v441, v442, v440, v438, v439, v433, v434, v432, 6);
                  swift_bridgeObjectRelease();
                  _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v458);
                  outlined init with take of UserGraphError.ErrorType(&v458, (uint64_t)&v471);
                  *(_QWORD *)&v483 = 0xD000000000000030;
                  *((_QWORD *)&v483 + 1) = 0x8000000245FCB830;
                  lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
                  swift_allocError();
                  *v226 = v471;
                  v227 = v475;
                  v229 = v472;
                  v228 = v473;
                  v226[3] = v474;
                  v226[4] = v227;
                  v226[1] = v229;
                  v226[2] = v228;
                  v230 = v479;
                  v232 = v476;
                  v231 = v477;
                  v226[7] = v478;
                  v226[8] = v230;
                  v226[5] = v232;
                  v226[6] = v231;
                  v233 = v483;
                  v235 = v480;
                  v234 = v481;
                  v226[11] = v482;
                  v226[12] = v233;
                  v226[9] = v235;
                  v226[10] = v234;
                  swift_willThrow();
                  swift_release();
                  v520 = v508;
                  outlined release of String((uint64_t)&v520);
                  outlined consume of NodePersonality(v431);
                  swift_release();
                  swift_release_n();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v566 = *v424;
                  outlined release of String((uint64_t)&v566);
                  swift_release();
                  v540 = v501;
                  v174 = &v540;
                  goto LABEL_176;
                }
                if (v225 == 1)
                  goto LABEL_160;
                v236 = 5;
                v181 = v430;
                while (1)
                {
                  v237 = v236 - 3;
                  if (__OFADD__(v236 - 4, 1))
                    break;
                  if (*(uint64_t *)(v450 + 8 * v236) > 0)
                    goto LABEL_89;
                  ++v236;
                  if (v237 == v225)
                    goto LABEL_161;
                }
                __break(1u);
                goto LABEL_124;
              }
LABEL_98:
              v238 = one-time initialization token for half2;
              swift_retain();
              if (v238 == -1)
              {
                if (!v6)
                  goto LABEL_111;
              }
              else
              {
                swift_once();
                if (!v6)
                  goto LABEL_111;
              }
              v239 = MetalDataType.isEqual(to:)();
              swift_release();
              if ((v239 & 1) != 0)
              {
                v34 = swift_release();
                v456 = 0xD00000000000001ELL;
                v457 = 0x8000000245FCB8D0;
                v240 = *(_QWORD *)(v450 + 16);
                if (!v240)
                  goto LABEL_160;
                if (*(uint64_t *)(v450 + 32) > 1)
                {
LABEL_109:
                  v159 = v439;
                  v160 = v438;
                  v162 = v433;
                  v161 = v434;
                  v163 = v432;
                  outlined consume of SGDataTypeStorage(v441, v442, v440, v438, v439, v433, v434, v432, 6);
                  swift_bridgeObjectRelease();
                  _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v458);
                  outlined init with take of UserGraphError.ErrorType(&v458, (uint64_t)&v471);
                  *(_QWORD *)&v483 = 0xD000000000000030;
                  *((_QWORD *)&v483 + 1) = 0x8000000245FCB830;
                  lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
                  swift_allocError();
                  *v243 = v471;
                  v244 = v475;
                  v246 = v472;
                  v245 = v473;
                  v243[3] = v474;
                  v243[4] = v244;
                  v243[1] = v246;
                  v243[2] = v245;
                  v247 = v479;
                  v249 = v476;
                  v248 = v477;
                  v243[7] = v478;
                  v243[8] = v247;
                  v243[5] = v249;
                  v243[6] = v248;
                  v250 = v483;
                  v252 = v480;
                  v251 = v481;
                  v243[11] = v482;
                  v243[12] = v250;
                  v243[9] = v252;
                  v243[10] = v251;
                  swift_willThrow();
                  swift_release();
                  v521 = v508;
                  outlined release of String((uint64_t)&v521);
                  outlined consume of NodePersonality(v431);
                  swift_release();
                  swift_release_n();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v567 = *v424;
                  outlined release of String((uint64_t)&v567);
                  swift_release();
                  v541 = v501;
                  v174 = &v541;
                  goto LABEL_176;
                }
                if (v240 == 1)
                  goto LABEL_160;
                v241 = 5;
                v181 = v430;
                while (1)
                {
                  v242 = v241 - 3;
                  if (__OFADD__(v241 - 4, 1))
                    break;
                  if (*(uint64_t *)(v450 + 8 * v241) > 1)
                    goto LABEL_109;
                  ++v241;
                  if (v242 == v240)
                    goto LABEL_161;
                }
LABEL_124:
                __break(1u);
                goto LABEL_125;
              }
LABEL_111:
              v253 = one-time initialization token for half3;
              swift_retain();
              if (v253 == -1)
              {
                if (!v6)
                  goto LABEL_126;
LABEL_113:
                v254 = MetalDataType.isEqual(to:)();
                swift_release();
                if ((v254 & 1) != 0)
                {
                  v34 = swift_release();
                  v456 = 0xD00000000000001ELL;
                  v457 = 0x8000000245FCB8B0;
                  v255 = *(_QWORD *)(v450 + 16);
                  if (!v255)
                    goto LABEL_160;
                  if (*(uint64_t *)(v450 + 32) > 2)
                  {
LABEL_122:
                    v159 = v439;
                    v160 = v438;
                    v162 = v433;
                    v161 = v434;
                    v163 = v432;
                    outlined consume of SGDataTypeStorage(v441, v442, v440, v438, v439, v433, v434, v432, 6);
                    swift_bridgeObjectRelease();
                    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v458);
                    outlined init with take of UserGraphError.ErrorType(&v458, (uint64_t)&v471);
                    *(_QWORD *)&v483 = 0xD000000000000030;
                    *((_QWORD *)&v483 + 1) = 0x8000000245FCB830;
                    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
                    swift_allocError();
                    *v258 = v471;
                    v259 = v475;
                    v261 = v472;
                    v260 = v473;
                    v258[3] = v474;
                    v258[4] = v259;
                    v258[1] = v261;
                    v258[2] = v260;
                    v262 = v479;
                    v264 = v476;
                    v263 = v477;
                    v258[7] = v478;
                    v258[8] = v262;
                    v258[5] = v264;
                    v258[6] = v263;
                    v265 = v483;
                    v267 = v480;
                    v266 = v481;
                    v258[11] = v482;
                    v258[12] = v265;
                    v258[9] = v267;
                    v258[10] = v266;
                    swift_willThrow();
                    swift_release();
                    v522 = v508;
                    outlined release of String((uint64_t)&v522);
                    outlined consume of NodePersonality(v431);
                    swift_release();
                    swift_release_n();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    v568 = *v424;
                    outlined release of String((uint64_t)&v568);
                    swift_release();
                    v542 = v501;
                    v174 = &v542;
                    goto LABEL_176;
                  }
                  if (v255 == 1)
                    goto LABEL_160;
                  v256 = 5;
                  v181 = v430;
                  while (1)
                  {
                    v257 = v256 - 3;
                    if (__OFADD__(v256 - 4, 1))
                      break;
                    if (*(uint64_t *)(v450 + 8 * v256) > 2)
                      goto LABEL_122;
                    ++v256;
                    if (v257 == v255)
                      goto LABEL_161;
                  }
                  __break(1u);
                  goto LABEL_139;
                }
LABEL_126:
                v268 = one-time initialization token for half4;
                swift_retain();
                if (v268 == -1)
                {
                  if (!v6)
                    goto LABEL_140;
LABEL_128:
                  v269 = MetalDataType.isEqual(to:)();
                  swift_release();
                  if ((v269 & 1) != 0)
                  {
                    v34 = swift_release();
                    v456 = 0xD00000000000001ELL;
                    v457 = 0x8000000245FCB890;
                    v270 = *(_QWORD *)(v450 + 16);
                    if (!v270)
                      goto LABEL_160;
                    if (*(uint64_t *)(v450 + 32) > 3)
                    {
LABEL_137:
                      v159 = v439;
                      v160 = v438;
                      v162 = v433;
                      v161 = v434;
                      v163 = v432;
                      outlined consume of SGDataTypeStorage(v441, v442, v440, v438, v439, v433, v434, v432, 6);
                      swift_bridgeObjectRelease();
                      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v458);
                      outlined init with take of UserGraphError.ErrorType(&v458, (uint64_t)&v471);
                      *(_QWORD *)&v483 = 0xD000000000000030;
                      *((_QWORD *)&v483 + 1) = 0x8000000245FCB830;
                      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
                      swift_allocError();
                      *v273 = v471;
                      v274 = v475;
                      v276 = v472;
                      v275 = v473;
                      v273[3] = v474;
                      v273[4] = v274;
                      v273[1] = v276;
                      v273[2] = v275;
                      v277 = v479;
                      v279 = v476;
                      v278 = v477;
                      v273[7] = v478;
                      v273[8] = v277;
                      v273[5] = v279;
                      v273[6] = v278;
                      v280 = v483;
                      v282 = v480;
                      v281 = v481;
                      v273[11] = v482;
                      v273[12] = v280;
                      v273[9] = v282;
                      v273[10] = v281;
                      swift_willThrow();
                      swift_release();
                      v523 = v508;
                      outlined release of String((uint64_t)&v523);
                      outlined consume of NodePersonality(v431);
                      swift_release();
                      swift_release_n();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      v569 = *v424;
                      outlined release of String((uint64_t)&v569);
                      swift_release();
                      v543 = v501;
                      v174 = &v543;
                      goto LABEL_176;
                    }
                    if (v270 == 1)
                      goto LABEL_160;
                    v271 = 5;
                    v181 = v430;
                    while (1)
                    {
                      v272 = v271 - 3;
                      if (__OFADD__(v271 - 4, 1))
                        break;
                      if (*(uint64_t *)(v450 + 8 * v271) > 3)
                        goto LABEL_137;
                      ++v271;
                      if (v272 == v270)
                        goto LABEL_161;
                    }
                    __break(1u);
                    goto LABEL_153;
                  }
LABEL_140:
                  v283 = one-time initialization token for color3;
                  swift_retain();
                  if (v283 == -1)
                  {
                    if (!v6)
                      goto LABEL_154;
LABEL_142:
                    v284 = MetalDataType.isEqual(to:)();
                    swift_release();
                    if ((v284 & 1) != 0)
                    {
                      v34 = swift_release();
                      v456 = 0xD00000000000001FLL;
                      v457 = 0x8000000245FCB870;
                      v285 = *(_QWORD *)(v450 + 16);
                      if (v285)
                      {
                        if (*(uint64_t *)(v450 + 32) <= 2)
                        {
                          if (v285 == 1)
                            goto LABEL_160;
                          v286 = 5;
                          v181 = v430;
                          while (1)
                          {
                            v287 = v286 - 3;
                            if (__OFADD__(v286 - 4, 1))
                            {
                              __break(1u);
                              goto LABEL_227;
                            }
                            if (*(uint64_t *)(v450 + 8 * v286) > 2)
                              break;
                            ++v286;
                            if (v287 == v285)
                              goto LABEL_161;
                          }
                        }
                        v159 = v439;
                        v160 = v438;
                        v162 = v433;
                        v161 = v434;
                        v163 = v432;
                        outlined consume of SGDataTypeStorage(v441, v442, v440, v438, v439, v433, v434, v432, 6);
                        swift_bridgeObjectRelease();
                        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v458);
                        outlined init with take of UserGraphError.ErrorType(&v458, (uint64_t)&v471);
                        *(_QWORD *)&v483 = 0xD000000000000030;
                        *((_QWORD *)&v483 + 1) = 0x8000000245FCB830;
                        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
                        swift_allocError();
                        *v288 = v471;
                        v289 = v475;
                        v291 = v472;
                        v290 = v473;
                        v288[3] = v474;
                        v288[4] = v289;
                        v288[1] = v291;
                        v288[2] = v290;
                        v292 = v479;
                        v294 = v476;
                        v293 = v477;
                        v288[7] = v478;
                        v288[8] = v292;
                        v288[5] = v294;
                        v288[6] = v293;
                        v295 = v483;
                        v297 = v480;
                        v296 = v481;
                        v288[11] = v482;
                        v288[12] = v295;
                        v288[9] = v297;
                        v288[10] = v296;
                        swift_willThrow();
                        swift_release();
                        v524 = v508;
                        outlined release of String((uint64_t)&v524);
                        outlined consume of NodePersonality(v431);
                        swift_release();
                        swift_release_n();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        v570 = *v424;
                        outlined release of String((uint64_t)&v570);
                        swift_release();
                        v544 = v501;
                        v174 = &v544;
                        goto LABEL_176;
                      }
LABEL_160:
                      v181 = v430;
LABEL_161:
                      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v181 + 144))(v34);
                      if (v6 && (MetalDataType.isEqual(to:)() & 1) != 0)
                      {
                        swift_release();
                        v300 = 0x74616F6C66;
                        v301 = 0xE500000000000000;
LABEL_164:
                        String.append(_:)(*(Swift::String *)&v300);
                        v302 = 1;
                        while (1)
                        {
                          v335 = v432;
                          v337 = v438;
                          v336 = v439;
                          if (*(_QWORD *)(v450 + 16) != v302)
                          {
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            outlined init with take of NodePersonality(&v588, &v613);
                            v614 = *(_QWORD *)&v589[0];
                            v458 = v451;
                            v459 = v452;
                            v460 = v453;
                            v461 = v617;
                            v462 = v454;
                            v365 = v441;
                            v364 = v442;
                            v464 = (uint64_t)v441;
                            v465 = (unint64_t)v442;
                            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_((uint64_t)&v458);
                            outlined init with take of UserGraphError.ErrorType(&v458, (uint64_t)&v471);
                            lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
                            v483 = 0uLL;
                            swift_allocError();
                            *v366 = v471;
                            v367 = v475;
                            v369 = v472;
                            v368 = v473;
                            v366[3] = v474;
                            v366[4] = v367;
                            v366[1] = v369;
                            v366[2] = v368;
                            v370 = v479;
                            v372 = v476;
                            v371 = v477;
                            v366[7] = v478;
                            v366[8] = v370;
                            v366[5] = v372;
                            v366[6] = v371;
                            v373 = v483;
                            v375 = v480;
                            v374 = v481;
                            v366[11] = v482;
                            v366[12] = v373;
                            v366[9] = v375;
                            v366[10] = v374;
                            swift_bridgeObjectRetain();
                            outlined retain of NodePersonality(&v613);
                            outlined retain of [Input]((uint64_t)&v614);
                            swift_willThrow();
                            swift_release();
                            v529 = v508;
                            outlined release of String((uint64_t)&v529);
                            outlined consume of NodePersonality(v431);
                            swift_release();
                            swift_release_n();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            v560 = *v424;
                            outlined release of String((uint64_t)&v560);
                            swift_release();
                            v549 = v501;
                            outlined release of String((uint64_t)&v549);
                            v319 = v365;
                            v320 = v364;
                            v321 = v440;
                            v322 = v337;
                            v323 = v336;
                            v324 = v433;
                            v325 = v434;
                            v326 = v335;
                            goto LABEL_199;
                          }
                          outlined consume of SGDataTypeStorage(v441, v442, v440, v438, v439, v433, v434, v432, 6);
                          v338 = v425;
                          swift_retain();
                          v339 = swift_bridgeObjectRetain();
                          v340 = v455;
                          v341 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySiGG_11ShaderGraph9InputSpecVs5NeverOTg507_sS2i11f6Graph9hi32VIgyyo_Si6offset_Si7elementtACs5J126OIegnrzr_TR04_s11a79Graph0B0V19resolveSwizzleNodes12nodeDefStoreyAA04NodegH0V_tKFyAA0abI0VKXEfU_AA9cD13VSi_SitXEfU9_Tf3nnnpf_nTf1cn_n(v339);
                          v617 = v340;
                          swift_bridgeObjectRelease();
                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
                          v342 = swift_allocObject();
                          v455 = xmmword_245FBECD0;
                          *(_OWORD *)(v342 + 16) = xmmword_245FBECD0;
                          *(_QWORD *)(v342 + 32) = 0x726F74636576;
                          *(_QWORD *)(v342 + 40) = 0xE600000000000000;
                          *(_QWORD *)(v342 + 48) = v338;
                          *(_QWORD *)&v471 = v342;
                          v343 = v430;
                          swift_retain();
                          swift_retain();
                          specialized Array.append<A>(contentsOf:)(v341);
                          v344 = v471;
                          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
                          v6 = swift_allocObject();
                          *(_OWORD *)(v6 + 16) = v455;
                          *(_QWORD *)(v6 + 32) = 7632239;
                          *(_QWORD *)(v6 + 40) = 0xE300000000000000;
                          *(_QWORD *)(v6 + 48) = v343;
                          v345 = swift_allocObject();
                          v346 = v457;
                          *(_QWORD *)(v345 + 16) = v456;
                          *(_QWORD *)(v345 + 24) = v346;
                          *(_QWORD *)(v345 + 32) = v343;
                          v347 = v345 | 0x2000000000000000;
                          v348 = (uint64_t)v448;
                          v349 = (unint64_t)v448[5];
                          swift_retain_n();
                          specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v349, v344, v6, v347, v348 + 64, v348, &v493);
                          swift_release();
                          swift_setDeallocating();
                          swift_arrayDestroy();
                          swift_deallocClassInstance();
                          swift_bridgeObjectRelease();
                          v350 = v494;
                          v559 = v494;
                          if (!*(_QWORD *)(v494 + 16))
                            break;
                          v351 = *(_QWORD *)(v494 + 40);
                          v352 = *(_QWORD *)(v494 + 48);
                          v6 = *(_QWORD *)(v494 + 56);
                          v353 = *(_QWORD *)(v494 + 64);
                          v354 = *(_BYTE *)(v494 + 72);
                          v355 = *(_QWORD *)(v494 + 80);
                          *(_QWORD *)&v582 = *(_QWORD *)(v494 + 32);
                          *((_QWORD *)&v582 + 1) = v351;
                          v583 = v352;
                          v584 = v6;
                          v585 = v353;
                          v586 = v354;
                          v587 = v355;
                          swift_retain();
                          swift_bridgeObjectRetain();
                          Graph.moveEdge(from:to:)((uint64_t)&v500, &v582);
                          swift_bridgeObjectRelease();
                          swift_release();
                          v558 = v495;
                          if (!*(_QWORD *)(v495 + 16))
                            goto LABEL_204;
                          v356 = *(_QWORD *)(v495 + 40);
                          v357 = *(_QWORD *)(v495 + 48);
                          v6 = *(_QWORD *)(v495 + 56);
                          v358 = *(_QWORD *)(v495 + 64);
                          v359 = *(_BYTE *)(v495 + 72);
                          v360 = *(_QWORD *)(v495 + 80);
                          v579[0] = *(_QWORD *)(v495 + 32);
                          v579[1] = v356;
                          v579[2] = v357;
                          v579[3] = v6;
                          v579[4] = v358;
                          v580 = v359;
                          v581 = v360;
                          swift_retain();
                          swift_bridgeObjectRetain();
                          Graph.moveEdges(from:to:)((uint64_t)v487, (uint64_t)v579);
                          swift_bridgeObjectRelease();
                          v361 = swift_release();
                          v362 = *(_QWORD *)(v350 + 16);
                          if (v362)
                          {
                            v578[0] = v450;
                            v578[1] = v350;
                            v578[2] = v350 + 32;
                            v578[3] = 1;
                            v578[4] = (2 * v362) | 1;
                            MEMORY[0x24BDAC7A8](v361);
                            outlined retain of [Input]((uint64_t)&v559);
                            v363 = v617;
                            specialized Sequence.forEach(_:)(v578, (void (*)(uint64_t, _OWORD *))partial apply for closure #12 in closure #1 in Graph.resolveSwizzleNodes(nodeDefStore:));
                            *(_QWORD *)&v455 = v363;
                            if (v363)
                            {
                              swift_release();
                              v533 = v508;
                              outlined release of String((uint64_t)&v533);
                              outlined init with take of NodePersonality(&v493, &v557);
                              outlined release of NodePersonality(&v557);
                              outlined release of [Input]((uint64_t)&v559);
                              outlined release of [Input]((uint64_t)&v558);
                              outlined consume of NodePersonality(v431);
                              swift_release_n();
                              swift_release_n();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              v556 = *v424;
                              outlined release of String((uint64_t)&v556);
                              swift_release();
                              v552 = v501;
                              outlined release of String((uint64_t)&v552);
                              outlined consume of SGDataTypeStorage(v441, v442, v440, v438, v439, v433, v434, v432, 6);
                              swift_bridgeObjectRelease();
                              outlined release of [Input]((uint64_t)&v559);
                              v443(v447, v446);
                            }
                            else
                            {
                              swift_release();
                              v528 = v508;
                              outlined release of String((uint64_t)&v528);
                              outlined init with take of NodePersonality(&v493, &v555);
                              outlined release of NodePersonality(&v555);
                              outlined release of [Input]((uint64_t)&v559);
                              outlined release of [Input]((uint64_t)&v558);
                              outlined consume of NodePersonality(v431);
                              swift_release_n();
                              swift_release_n();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              v554 = *v424;
                              outlined release of String((uint64_t)&v554);
                              swift_release();
                              v548 = v501;
                              outlined release of String((uint64_t)&v548);
                              outlined consume of SGDataTypeStorage(v441, v442, v440, v438, v439, v433, v434, v432, 6);
                              swift_bridgeObjectRelease();
                              outlined release of [Input]((uint64_t)&v559);
                              v443(v447, v446);
                            }
                            return;
                          }
LABEL_205:
                          __break(1u);
LABEL_206:
                          swift_once();
                          if (v6)
                          {
LABEL_188:
                            v332 = MetalDataType.isEqual(to:)();
                            swift_release();
                            if ((v332 & 1) != 0)
                            {
                              swift_release();
                              v333 = 0x3474616F6C66;
LABEL_190:
                              v334 = 0xE600000000000000;
                              goto LABEL_191;
                            }
                          }
LABEL_207:
                          v376 = one-time initialization token for half;
                          swift_retain();
                          if (v376 == -1)
                          {
                            if (v6)
                              goto LABEL_209;
                          }
                          else
                          {
                            swift_once();
                            if (v6)
                            {
LABEL_209:
                              v377 = MetalDataType.isEqual(to:)();
                              swift_release();
                              if ((v377 & 1) != 0)
                              {
                                swift_release();
                                v300 = 1718378856;
                                v301 = 0xE400000000000000;
                                goto LABEL_164;
                              }
                            }
                          }
                          v378 = one-time initialization token for half2;
                          swift_retain();
                          if (v378 == -1)
                          {
                            if (!v6)
                              goto LABEL_217;
LABEL_214:
                            v379 = MetalDataType.isEqual(to:)();
                            swift_release();
                            if ((v379 & 1) == 0)
                              goto LABEL_217;
                            swift_release();
                            v305 = 0x32666C6168;
                            v306 = 0xE500000000000000;
LABEL_169:
                            String.append(_:)(*(Swift::String *)&v305);
                            v302 = 2;
                          }
                          else
                          {
                            swift_once();
                            if (v6)
                              goto LABEL_214;
LABEL_217:
                            v380 = one-time initialization token for half3;
                            swift_retain();
                            if (v380 == -1)
                            {
                              if (v6)
                                goto LABEL_219;
                            }
                            else
                            {
                              swift_once();
                              if (v6)
                              {
LABEL_219:
                                v381 = MetalDataType.isEqual(to:)();
                                swift_release();
                                if ((v381 & 1) != 0)
                                {
                                  swift_release();
                                  v329 = 0x33666C6168;
                                  v330 = 0xE500000000000000;
                                  goto LABEL_184;
                                }
                              }
                            }
                            v382 = one-time initialization token for half4;
                            swift_retain();
                            if (v382 == -1)
                            {
                              if (!v6)
                                goto LABEL_228;
LABEL_224:
                              v383 = MetalDataType.isEqual(to:)();
                              swift_release();
                              if ((v383 & 1) == 0)
                                goto LABEL_228;
                              swift_release();
                              v333 = 0x34666C6168;
                              v334 = 0xE500000000000000;
LABEL_191:
                              String.append(_:)(*(Swift::String *)&v333);
                              v302 = 4;
                            }
                            else
                            {
LABEL_227:
                              swift_once();
                              if (v6)
                                goto LABEL_224;
LABEL_228:
                              v384 = one-time initialization token for color3;
                              swift_retain();
                              if (v384 == -1)
                              {
                                if (!v6)
                                  goto LABEL_236;
                              }
                              else
                              {
LABEL_235:
                                swift_once();
                                if (!v6)
                                {
LABEL_236:
                                  if (one-time initialization token for color4 == -1)
                                  {
                                    if (!v6)
                                      goto LABEL_241;
                                  }
                                  else
                                  {
                                    swift_once();
                                    if (!v6)
                                    {
LABEL_241:
                                      swift_bridgeObjectRelease();
                                      v398 = v439;
                                      v399 = v440;
                                      v401 = v433;
                                      v400 = v434;
                                      outlined consume of SGDataTypeStorage(v441, v442, v440, v438, v439, v433, v434, v432, 6);
                                      swift_bridgeObjectRelease();
                                      outlined init with take of NodePersonality(&v588, &v611);
                                      v612 = *(_QWORD *)&v589[0];
                                      v561 = *v424;
                                      v458 = v451;
                                      v459 = v452;
                                      v460 = v453;
                                      v461 = v617;
                                      v462 = v454;
                                      v464 = v414;
                                      v465 = v430;
                                      v466 = v422;
                                      v467 = v429;
                                      v468 = v428;
                                      v469 = v427;
                                      v470 = v426;
                                      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi33_((uint64_t)&v458);
                                      outlined init with take of UserGraphError.ErrorType(&v458, (uint64_t)&v471);
                                      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
                                      v483 = 0uLL;
                                      swift_allocError();
                                      *v402 = v471;
                                      v403 = v475;
                                      v405 = v472;
                                      v404 = v473;
                                      v402[3] = v474;
                                      v402[4] = v403;
                                      v402[1] = v405;
                                      v402[2] = v404;
                                      v406 = v479;
                                      v408 = v476;
                                      v407 = v477;
                                      v402[7] = v478;
                                      v402[8] = v406;
                                      v402[5] = v408;
                                      v402[6] = v407;
                                      v409 = v483;
                                      v411 = v480;
                                      v410 = v481;
                                      v402[11] = v482;
                                      v402[12] = v409;
                                      v402[9] = v411;
                                      v402[10] = v410;
                                      swift_bridgeObjectRetain();
                                      swift_retain();
                                      outlined retain of NodePersonality(&v611);
                                      outlined retain of [Input]((uint64_t)&v612);
                                      outlined retain of String((uint64_t)&v561);
                                      swift_willThrow();
                                      swift_release();
                                      v527 = v508;
                                      outlined release of String((uint64_t)&v527);
                                      outlined consume of NodePersonality(v431);
                                      swift_release();
                                      swift_release_n();
                                      swift_bridgeObjectRelease();
                                      swift_bridgeObjectRelease();
                                      outlined release of String((uint64_t)&v561);
                                      swift_release();
                                      v547 = v501;
                                      outlined release of String((uint64_t)&v547);
                                      outlined consume of SGDataTypeStorage(v441, v442, v399, v438, v398, v401, v400, v432, 6);
                                      goto LABEL_200;
                                    }
                                  }
                                  v397 = MetalDataType.isEqual(to:)();
                                  swift_release();
                                  if ((v397 & 1) == 0)
                                    goto LABEL_241;
                                  v333 = 0x34726F6C6F63;
                                  goto LABEL_190;
                                }
                              }
                              v385 = MetalDataType.isEqual(to:)();
                              swift_release();
                              if ((v385 & 1) == 0)
                                goto LABEL_236;
                              swift_release();
                              v329 = 0x33726F6C6F63;
LABEL_183:
                              v330 = 0xE600000000000000;
LABEL_184:
                              String.append(_:)(*(Swift::String *)&v329);
                              v302 = 3;
                            }
                          }
                        }
                        __break(1u);
LABEL_204:
                        __break(1u);
                        goto LABEL_205;
                      }
                      v303 = *(__objc2_meth_list **)(p_base_meths + 3376);
                      swift_retain();
                      if (v303 == (__objc2_meth_list *)-1)
                      {
                        if (!v6)
                          goto LABEL_179;
                      }
                      else
                      {
                        swift_once();
                        if (!v6)
                          goto LABEL_179;
                      }
                      v304 = MetalDataType.isEqual(to:)();
                      swift_release();
                      if ((v304 & 1) != 0)
                      {
                        swift_release();
                        v305 = 0x3274616F6C66;
                        v306 = 0xE600000000000000;
                        goto LABEL_169;
                      }
LABEL_179:
                      v327 = one-time initialization token for float3;
                      swift_retain();
                      if (v327 == -1)
                      {
                        if (!v6)
                          goto LABEL_186;
                      }
                      else
                      {
                        swift_once();
                        if (!v6)
                          goto LABEL_186;
                      }
                      v328 = MetalDataType.isEqual(to:)();
                      swift_release();
                      if ((v328 & 1) != 0)
                      {
                        swift_release();
                        v329 = 0x3374616F6C66;
                        goto LABEL_183;
                      }
LABEL_186:
                      v331 = one-time initialization token for float4;
                      swift_retain();
                      if (v331 != -1)
                        goto LABEL_206;
                      if (!v6)
                        goto LABEL_207;
                      goto LABEL_188;
                    }
LABEL_154:
                    if (one-time initialization token for color4 == -1)
                    {
                      if (!v6)
                        goto LABEL_233;
                    }
                    else
                    {
                      swift_once();
                      if (!v6)
                        goto LABEL_233;
                    }
                    v298 = MetalDataType.isEqual(to:)();
                    v34 = swift_release();
                    if ((v298 & 1) != 0)
                    {
                      v456 = 0xD00000000000001FLL;
                      v457 = 0x8000000245FCB810;
                      v299 = *(_QWORD *)(v450 + 16);
                      if (v299)
                      {
                        if (*(uint64_t *)(v450 + 32) <= 3)
                        {
                          if (v299 == 1)
                            goto LABEL_160;
                          v307 = 5;
                          v181 = v430;
                          while (1)
                          {
                            v308 = v307 - 3;
                            if (__OFADD__(v307 - 4, 1))
                            {
                              __break(1u);
                              goto LABEL_235;
                            }
                            if (*(uint64_t *)(v450 + 8 * v307) > 3)
                              break;
                            ++v307;
                            if (v308 == v299)
                              goto LABEL_161;
                          }
                        }
                        v159 = v439;
                        v160 = v438;
                        v162 = v433;
                        v161 = v434;
                        v163 = v432;
                        outlined consume of SGDataTypeStorage(v441, v442, v440, v438, v439, v433, v434, v432, 6);
                        swift_bridgeObjectRelease();
                        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v458);
                        outlined init with take of UserGraphError.ErrorType(&v458, (uint64_t)&v471);
                        *(_QWORD *)&v483 = 0xD000000000000030;
                        *((_QWORD *)&v483 + 1) = 0x8000000245FCB830;
                        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
                        swift_allocError();
                        *v309 = v471;
                        v310 = v475;
                        v312 = v472;
                        v311 = v473;
                        v309[3] = v474;
                        v309[4] = v310;
                        v309[1] = v312;
                        v309[2] = v311;
                        v313 = v479;
                        v315 = v476;
                        v314 = v477;
                        v309[7] = v478;
                        v309[8] = v313;
                        v309[5] = v315;
                        v309[6] = v314;
                        v316 = v483;
                        v318 = v480;
                        v317 = v481;
                        v309[11] = v482;
                        v309[12] = v316;
                        v309[9] = v318;
                        v309[10] = v317;
                        swift_willThrow();
                        swift_release();
                        v525 = v508;
                        outlined release of String((uint64_t)&v525);
                        outlined consume of NodePersonality(v431);
                        swift_release();
                        swift_release_n();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        v571 = *v424;
                        outlined release of String((uint64_t)&v571);
                        swift_release();
                        v545 = v501;
                        v174 = &v545;
                        goto LABEL_176;
                      }
                      goto LABEL_160;
                    }
LABEL_233:
                    v159 = v439;
                    v386 = v440;
                    v162 = v433;
                    v161 = v434;
                    v163 = v432;
                    outlined consume of SGDataTypeStorage(v441, v442, v440, v438, v439, v433, v434, v432, 6);
                    swift_bridgeObjectRelease();
                    outlined init with take of NodePersonality(&v588, &v609);
                    v610 = *(_QWORD *)&v589[0];
                    v546 = v501;
                    v458 = v451;
                    v459 = v452;
                    v460 = v453;
                    v461 = v617;
                    v462 = v454;
                    v464 = v415;
                    v465 = v421;
                    v466 = v419;
                    v467 = v418;
                    v468 = v417;
                    v469 = v416;
                    v470 = v420;
                    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi32_((uint64_t)&v458);
                    outlined init with take of UserGraphError.ErrorType(&v458, (uint64_t)&v471);
                    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
                    v483 = 0uLL;
                    swift_allocError();
                    *v387 = v471;
                    v388 = v475;
                    v390 = v472;
                    v389 = v473;
                    v387[3] = v474;
                    v387[4] = v388;
                    v387[1] = v390;
                    v387[2] = v389;
                    v391 = v479;
                    v393 = v476;
                    v392 = v477;
                    v387[7] = v478;
                    v387[8] = v391;
                    v387[5] = v393;
                    v387[6] = v392;
                    v394 = v483;
                    v396 = v480;
                    v395 = v481;
                    v387[11] = v482;
                    v387[12] = v394;
                    v387[9] = v396;
                    v387[10] = v395;
                    swift_bridgeObjectRetain();
                    swift_retain();
                    outlined retain of NodePersonality(&v609);
                    outlined retain of [Input]((uint64_t)&v610);
                    outlined retain of String((uint64_t)&v546);
                    swift_willThrow();
                    swift_release();
                    v526 = v508;
                    outlined release of String((uint64_t)&v526);
                    outlined consume of NodePersonality(v431);
                    swift_release();
                    swift_release_n();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    v572 = *v424;
                    outlined release of String((uint64_t)&v572);
                    swift_release();
                    outlined release of String((uint64_t)&v546);
                    v319 = v441;
                    v320 = v442;
                    v321 = v386;
                    v322 = v438;
                    goto LABEL_177;
                  }
LABEL_153:
                  swift_once();
                  if (!v6)
                    goto LABEL_154;
                  goto LABEL_142;
                }
LABEL_139:
                swift_once();
                if (!v6)
                  goto LABEL_140;
                goto LABEL_128;
              }
LABEL_125:
              swift_once();
              if (!v6)
                goto LABEL_126;
              goto LABEL_113;
            }
LABEL_97:
            swift_once();
            if (!v6)
              goto LABEL_98;
            goto LABEL_86;
          }
LABEL_83:
          swift_once();
          if (!v6)
            goto LABEL_84;
          goto LABEL_72;
        }
LABEL_69:
        swift_once();
        if (!v6)
          goto LABEL_70;
        goto LABEL_57;
      }
    }
    __break(1u);
LABEL_35:
    if (v35 == 1)
      goto LABEL_160;
    v175 = 5;
    while (1)
    {
      v176 = v175 - 3;
      if (__OFADD__(v175 - 4, 1))
        break;
      if (*(uint64_t *)(v450 + 8 * v175) > 0)
        goto LABEL_32;
      ++v175;
      if (v176 == v35)
        goto LABEL_160;
    }
    __break(1u);
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
}

uint64_t closure #12 in closure #1 in Graph.resolveSwizzleNodes(nodeDefStore:)(Swift::Int a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;

  result = Graph.constantIntegerNode(for:)(a1, &v5);
  if (!v2)
  {
    ShaderGraphNode.out.getter((uint64_t)v7);
    Graph.connect(_:to:)((uint64_t)v7, a2);
    swift_release();
    v12 = v8;
    outlined release of String((uint64_t)&v12);
    outlined init with take of NodePersonality(&v5, &v11);
    outlined release of NodePersonality(&v11);
    v10 = *((_QWORD *)&v5 + 1);
    outlined release of [Input]((uint64_t)&v10);
    v9 = v6;
    return outlined release of [Input]((uint64_t)&v9);
  }
  return result;
}

uint64_t Graph.constantIntegerNode(for:)@<X0>(Swift::Int a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[2];

  v5 = constantFunction(for:)(a1);
  result = v5._countAndFlagsBits;
  if (!v6)
  {
    if (one-time initialization token for int32 != -1)
      swift_once();
    v7 = static MetalDataType.int32;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_245FBECD0;
    *(_QWORD *)(inited + 32) = 7632239;
    *(_QWORD *)(inited + 40) = 0xE300000000000000;
    *(_QWORD *)(inited + 48) = v7;
    v9 = swift_allocObject();
    *(Swift::String *)(v9 + 16) = v5;
    *(_QWORD *)(v9 + 32) = v7;
    v10 = v9 | 0x2000000000000000;
    v11 = *(_QWORD *)(v2 + 40);
    swift_retain_n();
    specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v11, MEMORY[0x24BEE4AF8], inited, v10, v2 + 64, v2, (unint64_t *)&v13);
    swift_release();
    swift_release();
    swift_setDeallocating();
    result = swift_arrayDestroy();
    v12 = v14[0];
    *a2 = v13;
    a2[1] = v12;
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v14 + 9);
  }
  return result;
}

double Graph.insertGetCustomUniformsStruct(type:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t inited;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  double result;
  __int128 v11;
  _OWORD v12[2];

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_245FBECD0;
  *(_QWORD *)(inited + 32) = 7632239;
  *(_QWORD *)(inited + 40) = 0xE300000000000000;
  *(_QWORD *)(inited + 48) = a1;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = 12580;
  *(_QWORD *)(v6 + 24) = 0xE200000000000000;
  v7 = v6 | 0x6000000000000000;
  v8 = *(_QWORD *)(v2 + 40);
  swift_retain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v8, MEMORY[0x24BEE4AF8], inited, v7, v2 + 64, v2, (unint64_t *)&v11);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  v9 = v12[0];
  *a2 = v11;
  a2[1] = v9;
  result = *(double *)((char *)v12 + 9);
  *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v12 + 9);
  return result;
}

uint64_t Output.getProperty(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t result;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  void *v41;
  uint64_t v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t (*v45)(uint64_t);
  uint64_t v46;
  Swift::String v47;
  Swift::String v48;
  __int128 v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _OWORD *v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _QWORD v89[6];
  _BYTE v90[41];
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  _QWORD v99[5];
  char v100;
  uint64_t v101;
  uint64_t v102;

  v9 = v4[1];
  v10 = (*(uint64_t (**)(void))(*(_QWORD *)v9 + 88))();
  specialized Sequence.first(where:)(v10, a2, (uint64_t)a3, v89);
  swift_bridgeObjectRelease();
  outlined init with take of MetalFunctionNode?((uint64_t)v89, (uint64_t)&v91, &demangling cache variable for type metadata for DataTypeProperty?);
  if (*((_QWORD *)&v91 + 1))
  {
    v61 = a4;
    v62 = (uint64_t)v4;
    v94 = v91;
    v11 = v92;
    v67 = v93;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v12 + 32) = 28265;
    v102 = v12 + 32;
    *(_QWORD *)(v12 + 40) = 0xE200000000000000;
    *(_QWORD *)(v12 + 48) = v9;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v13 + 32) = 7632239;
    *(_QWORD *)(v13 + 40) = 0xE300000000000000;
    *(_QWORD *)(v13 + 48) = v11;
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = a2;
    *(_QWORD *)(v14 + 24) = a3;
    v15 = v14 | 0x8000000000000000;
    v16 = *(_QWORD *)(a1 + 40);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v16, v12, v13, v15, a1 + 64, a1, (unint64_t *)v90);
    v68 = *(_OWORD *)&v90[8];
    v63 = *(_QWORD *)v90;
    v65 = *(_QWORD *)&v90[32];
    v66 = *(_QWORD *)&v90[24];
    v64 = v90[40];
    swift_release();
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    v17 = *(_QWORD *)(v68 + 16);
    if (v17)
    {
      v18 = (_QWORD *)(v68 + 80);
      while (1)
      {
        v20 = *(v18 - 6);
        v19 = *(v18 - 5);
        v22 = *(v18 - 4);
        v21 = *(v18 - 3);
        v23 = *(v18 - 2);
        v24 = *((_BYTE *)v18 - 8);
        v25 = *v18;
        if (v22 == 28265 && v21 == 0xE200000000000000)
          break;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_13;
        v18 += 7;
        if (!--v17)
          goto LABEL_10;
      }
      v21 = 0xE200000000000000;
LABEL_13:
      v99[0] = v20;
      v99[1] = v19;
      v99[2] = v22;
      v99[3] = v21;
      v99[4] = v23;
      v100 = v24;
      v101 = v25;
      swift_retain();
      swift_bridgeObjectRetain();
      Graph.connect(_:to:)(v62, (unint64_t)v99);
      swift_bridgeObjectRelease();
      swift_release();
      v95 = v94;
      outlined release of String((uint64_t)&v95);
      swift_release();
      v96 = v67;
      result = outlined release of [Input]((uint64_t)&v96);
      v60 = *(_OWORD *)&v90[16];
      *v61 = *(_OWORD *)v90;
      v61[1] = v60;
      *(_OWORD *)((char *)v61 + 25) = *(_OWORD *)&v90[25];
    }
    else
    {
LABEL_10:
      v69 = v63;
      v70 = v68;
      v71 = v66;
      v72 = v65;
      v73 = v64;
      v74 = 28265;
      v75 = 0xE200000000000000;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v69);
      outlined init with take of UserGraphError.ErrorType((__int128 *)&v69, (uint64_t)&v76);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      v88 = 0uLL;
      swift_allocError();
      *v27 = v76;
      v28 = v80;
      v30 = v77;
      v29 = v78;
      v27[3] = v79;
      v27[4] = v28;
      v27[1] = v30;
      v27[2] = v29;
      v31 = v84;
      v33 = v81;
      v32 = v82;
      v27[7] = v83;
      v27[8] = v31;
      v27[5] = v33;
      v27[6] = v32;
      v34 = v88;
      v36 = v85;
      v35 = v86;
      v27[11] = v87;
      v27[12] = v34;
      v27[9] = v36;
      v27[10] = v35;
      swift_willThrow();
      v97 = v94;
      outlined release of String((uint64_t)&v97);
      swift_release();
      v98 = v67;
      return outlined release of [Input]((uint64_t)&v98);
    }
  }
  else
  {
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi45_((uint64_t)&v69);
    *(_QWORD *)&v76 = 0;
    *((_QWORD *)&v76 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(53);
    v38._countAndFlagsBits = 0x79747265706F7250;
    v38._object = (void *)0xEA00000000002720;
    String.append(_:)(v38);
    v39._countAndFlagsBits = a2;
    v39._object = a3;
    String.append(_:)(v39);
    v40._object = (void *)0x8000000245FCB290;
    v40._countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v40);
    v42 = v4[2];
    v41 = (void *)v4[3];
    swift_bridgeObjectRetain();
    v43._countAndFlagsBits = v42;
    v43._object = v41;
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    v44._countAndFlagsBits = 0x7420687469772027;
    v44._object = (void *)0xED00002720657079;
    String.append(_:)(v44);
    v45 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 136);
    v46 = swift_retain();
    v47._countAndFlagsBits = v45(v46);
    String.append(_:)(v47);
    swift_release();
    swift_bridgeObjectRelease();
    v48._countAndFlagsBits = 39;
    v48._object = (void *)0xE100000000000000;
    String.append(_:)(v48);
    v49 = v76;
    outlined init with take of UserGraphError.ErrorType((__int128 *)&v69, (uint64_t)&v76);
    v88 = v49;
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    swift_allocError();
    *v50 = v76;
    v51 = v80;
    v53 = v77;
    v52 = v78;
    v50[3] = v79;
    v50[4] = v51;
    v50[1] = v53;
    v50[2] = v52;
    v54 = v84;
    v56 = v81;
    v55 = v82;
    v50[7] = v83;
    v50[8] = v54;
    v50[5] = v56;
    v50[6] = v55;
    v57 = v88;
    v59 = v85;
    v58 = v86;
    v50[11] = v87;
    v50[12] = v57;
    v50[9] = v59;
    v50[10] = v58;
    return swift_willThrow();
  }
  return result;
}

uint64_t closure #1 in Graph.resolveEnvironmentRadianceNode()(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  _OWORD *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  unint64_t v74;
  _OWORD *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  _OWORD *v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  _OWORD *v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v150;
  _OWORD *v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  _OWORD *v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  __int128 v183;
  unint64_t v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  unint64_t v209;
  unint64_t v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  unint64_t v224;
  __int128 v225;
  uint64_t v226;
  uint64_t v227;
  char v228;
  unint64_t v229;
  __int128 v230;
  uint64_t v231;
  uint64_t v232;
  char v233;
  unint64_t v234;
  __int128 v235;
  uint64_t v236;
  uint64_t v237;
  char v238;
  char v239[8];
  __int128 v240;
  char v241[8];
  __int128 v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char v246[8];
  __int128 v247;
  char v248[8];
  __int128 v249;
  _QWORD v250[7];
  _OWORD v251[3];
  uint64_t v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  uint64_t v256;
  __int128 v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  __int128 v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  __int128 v296;
  __int128 v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  __int128 v309;
  __int128 v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  __int128 v318;
  __int128 v319;
  uint64_t v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  __int128 v333;
  __int128 v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  char v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t v355;
  char v356;
  uint64_t v357;
  _QWORD v358[5];
  char v359;
  uint64_t v360;
  __int128 v361;
  unint64_t v362;
  unint64_t v363;
  uint64_t v364;
  char v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  char v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  char v379;
  uint64_t v380;
  uint64_t v381;

  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result >> 61 != 5)
    return result;
  v381 = a2;
  v5 = *(_QWORD *)(result + 8);
  v4 = *(_QWORD *)(result + 16);
  v6 = *(_QWORD *)(result + 24);
  v7 = *(_QWORD *)(result + 32);
  v8 = *(_BYTE *)(result + 40);
  if (*(_QWORD *)(v3 + 16) != 0xD000000000000022 || *(_QWORD *)(v3 + 24) != 0x8000000245FCB710)
  {
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) == 0)
      return result;
  }
  v193 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_245FC2030;
  if (one-time initialization token for surface_parameters_private != -1)
    swift_once();
  v189 = v2;
  v10 = static MetalDataType.re.surface_parameters_private;
  *(_QWORD *)(v9 + 32) = 0x736D61726170;
  *(_QWORD *)(v9 + 40) = 0xE600000000000000;
  *(_QWORD *)(v9 + 48) = v10;
  v11 = one-time initialization token for color3;
  swift_retain();
  if (v11 != -1)
    swift_once();
  v190 = v7;
  v198 = v4;
  v12 = static MetalDataType.color3;
  *(_QWORD *)(v9 + 56) = 0x6F6C6F4365736162;
  *(_QWORD *)(v9 + 64) = 0xE900000000000072;
  *(_QWORD *)(v9 + 72) = v12;
  v13 = one-time initialization token for half;
  swift_retain();
  if (v13 != -1)
    swift_once();
  v192 = v8;
  v14 = static MetalDataType.half;
  *(_QWORD *)(v9 + 80) = 0x73656E6867756F72;
  *(_QWORD *)(v9 + 88) = 0xE900000000000073;
  *(_QWORD *)(v9 + 96) = v14;
  *(_QWORD *)(v9 + 104) = 0x72616C7563657073;
  *(_QWORD *)(v9 + 112) = 0xE800000000000000;
  *(_QWORD *)(v9 + 120) = v14;
  *(_QWORD *)(v9 + 128) = 0x63696C6C6174656DLL;
  *(_QWORD *)(v9 + 136) = 0xE800000000000000;
  *(_QWORD *)(v9 + 144) = v14;
  v15 = one-time initialization token for float3;
  swift_retain_n();
  if (v15 != -1)
    swift_once();
  v16 = static MetalDataType.float3;
  *(_QWORD *)(v9 + 152) = 0x6C616D726F6ELL;
  *(_QWORD *)(v9 + 160) = 0xE600000000000000;
  *(_QWORD *)(v9 + 168) = v16;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_245FBECD0;
  v18 = one-time initialization token for EnvironmentRadianceResult;
  swift_retain();
  if (v18 != -1)
    swift_once();
  v195 = v6;
  v196 = v5;
  v19 = static MetalDataType.re.EnvironmentRadianceResult;
  *(_QWORD *)(v17 + 32) = 7632239;
  *(_QWORD *)(v17 + 40) = 0xE300000000000000;
  *(_QWORD *)(v17 + 48) = v19;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = 0xD00000000000002ALL;
  *(_QWORD *)(v20 + 24) = 0x8000000245FCB740;
  *(_QWORD *)(v20 + 32) = v19;
  v21 = v20 | 0x2000000000000000;
  v22 = v381;
  v23 = *(_QWORD *)(v381 + 40);
  swift_retain_n();
  v199 = v381 + 64;
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v23, v9, v17, v21, v22 + 64, v22, &v224);
  v184 = v224;
  v185 = v225;
  v186 = v226;
  v187 = v227;
  v188 = v228;
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_245FBECD0;
  *(_QWORD *)(v24 + 32) = 28265;
  v25 = static MetalDataType.re.EnvironmentRadianceResult;
  *(_QWORD *)(v24 + 40) = 0xE200000000000000;
  *(_QWORD *)(v24 + 48) = v25;
  v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_245FBECD0;
  v27 = one-time initialization token for half3;
  swift_retain();
  if (v27 != -1)
    swift_once();
  v28 = static MetalDataType.half3;
  *(_QWORD *)(v26 + 32) = 7632239;
  *(_QWORD *)(v26 + 40) = 0xE300000000000000;
  *(_QWORD *)(v26 + 48) = v28;
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = 0xD000000000000029;
  *(_QWORD *)(v29 + 24) = 0x8000000245FCB770;
  *(_QWORD *)(v29 + 32) = v28;
  v30 = v29 | 0x2000000000000000;
  v31 = v22;
  v32 = *(_QWORD *)(v22 + 40);
  swift_retain_n();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v32, v24, v26, v30, v199, v31, &v229);
  v183 = v230;
  v179 = v229;
  v181 = v232;
  v182 = v231;
  v180 = v233;
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_245FBECD0;
  v34 = static MetalDataType.re.EnvironmentRadianceResult;
  *(_QWORD *)(v33 + 32) = 28265;
  *(_QWORD *)(v33 + 40) = 0xE200000000000000;
  *(_QWORD *)(v33 + 48) = v34;
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_245FBECD0;
  v36 = static MetalDataType.half3;
  *(_QWORD *)(v35 + 32) = 7632239;
  *(_QWORD *)(v35 + 40) = 0xE300000000000000;
  *(_QWORD *)(v35 + 48) = v36;
  v37 = swift_allocObject();
  *(_QWORD *)(v37 + 16) = 0xD00000000000002ALL;
  *(_QWORD *)(v37 + 24) = 0x8000000245FCB7A0;
  *(_QWORD *)(v37 + 32) = v36;
  v38 = v37 | 0x2000000000000000;
  v39 = v381;
  v40 = *(_QWORD *)(v381 + 40);
  swift_retain_n();
  swift_retain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v40, v33, v35, v38, v199, v39, &v234);
  v197 = v235;
  v178 = v234;
  v41 = v236;
  v42 = v237;
  v43 = v238;
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v44 = v198;
  v45 = *(_QWORD *)(v198 + 16);
  if (!v45)
  {
LABEL_26:
    v204 = v193;
    *(_QWORD *)&v205 = v196;
    *((_QWORD *)&v205 + 1) = v44;
    v206 = v195;
    v207 = v190;
    v208 = v192;
    v209 = 0x5265737566666964;
    v210 = 0xEF65636E61696461;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_((uint64_t)&v204);
    outlined init with take of UserGraphError.ErrorType((__int128 *)&v204, (uint64_t)&v211);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v223 = 0uLL;
    swift_allocError();
    *v55 = v211;
    v56 = v215;
    v58 = v212;
    v57 = v213;
    v55[3] = v214;
    v55[4] = v56;
    v55[1] = v58;
    v55[2] = v57;
    v59 = v219;
    v61 = v216;
    v60 = v217;
    v55[7] = v218;
    v55[8] = v59;
    v55[5] = v61;
    v55[6] = v60;
    v62 = v223;
    v64 = v220;
    v63 = v221;
    v55[11] = v222;
    v55[12] = v62;
    v55[9] = v64;
    v55[10] = v63;
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v193);
    swift_bridgeObjectRetain();
    swift_willThrow();
    outlined init with take of NodePersonality(&v234, &v266);
    outlined release of NodePersonality(&v266);
    v265 = v235;
    outlined release of [Input]((uint64_t)&v265);
    v264 = *((_QWORD *)&v235 + 1);
    outlined release of [Input]((uint64_t)&v264);
    outlined init with take of NodePersonality(&v229, &v263);
    outlined release of NodePersonality(&v263);
    v262 = v230;
    outlined release of [Input]((uint64_t)&v262);
    v261 = *((_QWORD *)&v230 + 1);
    outlined release of [Input]((uint64_t)&v261);
    outlined init with take of NodePersonality(&v224, &v260);
    outlined release of NodePersonality(&v260);
    v259 = v225;
    outlined release of [Input]((uint64_t)&v259);
    v258 = *((_QWORD *)&v225 + 1);
    v65 = &v258;
    return outlined release of [Input]((uint64_t)v65);
  }
  v175 = v43;
  v176 = v42;
  v177 = v41;
  v46 = (_QWORD *)(v198 + 80);
  while (1)
  {
    v47 = *(v46 - 6);
    v48 = *(v46 - 5);
    v49 = *(v46 - 4);
    v50 = *(v46 - 3);
    v51 = *(v46 - 2);
    v52 = *((_BYTE *)v46 - 8);
    v53 = *v46;
    if (v49 == 0x5265737566666964 && v50 == 0xEF65636E61696461)
      break;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_28;
    v46 += 7;
    if (!--v45)
    {
      v374 = v47;
      v375 = v48;
      v376 = v49;
      v377 = v50;
      v378 = v51;
      v379 = v52;
      v380 = v53;
      v44 = v198;
      goto LABEL_26;
    }
  }
  v50 = 0xEF65636E61696461;
LABEL_28:
  v374 = v47;
  v375 = v48;
  v376 = v49;
  v377 = v50;
  v378 = v51;
  v379 = v52;
  v380 = v53;
  v66 = v198;
  v67 = *(_QWORD *)(v198 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  if (!v67)
  {
LABEL_35:
    v204 = v193;
    *(_QWORD *)&v205 = v196;
    *((_QWORD *)&v205 + 1) = v66;
    v206 = v195;
    v207 = v190;
    v208 = v192;
    v209 = 0xD000000000000010;
    v210 = 0x8000000245FCB7D0;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_((uint64_t)&v204);
    outlined init with take of UserGraphError.ErrorType((__int128 *)&v204, (uint64_t)&v211);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v223 = 0uLL;
    swift_allocError();
    *v75 = v211;
    v76 = v215;
    v78 = v212;
    v77 = v213;
    v75[3] = v214;
    v75[4] = v76;
    v75[1] = v78;
    v75[2] = v77;
    v79 = v219;
    v81 = v216;
    v80 = v217;
    v75[7] = v218;
    v75[8] = v79;
    v75[5] = v81;
    v75[6] = v80;
    v82 = v223;
    v84 = v220;
    v83 = v221;
    v75[11] = v222;
    v75[12] = v82;
    v75[9] = v84;
    v75[10] = v83;
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v193);
    swift_bridgeObjectRetain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    outlined init with take of NodePersonality(&v234, &v275);
    outlined release of NodePersonality(&v275);
    v274 = v235;
    outlined release of [Input]((uint64_t)&v274);
    v273 = *((_QWORD *)&v235 + 1);
    outlined release of [Input]((uint64_t)&v273);
    outlined init with take of NodePersonality(&v229, &v272);
    outlined release of NodePersonality(&v272);
    v271 = v230;
    outlined release of [Input]((uint64_t)&v271);
    v270 = *((_QWORD *)&v230 + 1);
    outlined release of [Input]((uint64_t)&v270);
    outlined init with take of NodePersonality(&v224, &v269);
    outlined release of NodePersonality(&v269);
    v268 = v225;
    outlined release of [Input]((uint64_t)&v268);
    v267 = *((_QWORD *)&v225 + 1);
    v65 = &v267;
    return outlined release of [Input]((uint64_t)v65);
  }
  v68 = (_QWORD *)(v198 + 80);
  while (1)
  {
    v69 = *(v68 - 6);
    v202 = *(v68 - 5);
    v70 = *(v68 - 4);
    v71 = *(v68 - 2);
    v72 = *((_BYTE *)v68 - 8);
    v73 = *v68;
    if (v70 == 0xD000000000000010 && *(v68 - 3) == 0x8000000245FCB7D0)
    {
      v85 = 0x8000000245FCB7D0;
      goto LABEL_38;
    }
    v74 = *(v68 - 3);
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      break;
    v68 += 7;
    if (!--v67)
    {
      v367 = v69;
      v368 = v202;
      v369 = v70;
      v370 = v74;
      v371 = v71;
      v372 = v72;
      v373 = v73;
      v66 = v198;
      goto LABEL_35;
    }
  }
  v85 = v74;
LABEL_38:
  v367 = v69;
  v368 = v202;
  v369 = v70;
  v370 = v85;
  v371 = v71;
  v372 = v72;
  v373 = v73;
  swift_retain();
  swift_bridgeObjectRetain();
  ShaderGraphNode.out.getter((uint64_t)v239);
  if (v189)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    outlined init with take of NodePersonality(&v234, &v343);
    outlined release of NodePersonality(&v343);
    v342 = v235;
    outlined release of [Input]((uint64_t)&v342);
    v341 = *((_QWORD *)&v235 + 1);
    outlined release of [Input]((uint64_t)&v341);
    outlined init with take of NodePersonality(&v229, &v340);
    outlined release of NodePersonality(&v340);
    v339 = v230;
    outlined release of [Input]((uint64_t)&v339);
    v338 = *((_QWORD *)&v230 + 1);
    outlined release of [Input]((uint64_t)&v338);
    outlined init with take of NodePersonality(&v224, &v337);
    outlined release of NodePersonality(&v337);
    v336 = v225;
    outlined release of [Input]((uint64_t)&v336);
    v335 = *((_QWORD *)&v225 + 1);
    v65 = &v335;
    return outlined release of [Input]((uint64_t)v65);
  }
  v86 = v381;
  Graph.moveEdges(from:to:)((uint64_t)&v374, (uint64_t)v239);
  swift_release();
  v334 = v240;
  outlined release of String((uint64_t)&v334);
  ShaderGraphNode.out.getter((uint64_t)v241);
  Graph.moveEdges(from:to:)((uint64_t)&v367, (uint64_t)v241);
  swift_release();
  v333 = v242;
  outlined release of String((uint64_t)&v333);
  v173 = *(_QWORD *)(v196 + 16);
  if (!v173)
  {
LABEL_58:
    v108 = static MetalDataType.re.surface_parameters_private;
    v109 = swift_allocObject();
    *(_OWORD *)(v109 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v109 + 32) = 7632239;
    *(_QWORD *)(v109 + 40) = 0xE300000000000000;
    *(_QWORD *)(v109 + 48) = v108;
    v110 = swift_allocObject();
    *(_QWORD *)(v110 + 16) = 12324;
    *(_QWORD *)(v110 + 24) = 0xE200000000000000;
    v111 = v110 | 0x6000000000000000;
    v112 = *(_QWORD *)(v86 + 40);
    swift_retain();
    specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v112, MEMORY[0x24BEE4AF8], v109, v111, v199, v86, &v243);
    swift_release();
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    ShaderGraphNode.out.getter((uint64_t)v246);
    v323 = v225;
    v124 = *(_QWORD *)(v225 + 16);
    if (v124)
    {
      v125 = (_QWORD *)(v225 + 80);
      while (1)
      {
        v126 = *(v125 - 6);
        v203 = *(v125 - 5);
        v127 = *(v125 - 4);
        v128 = *(v125 - 3);
        v129 = *(v125 - 2);
        v130 = *((_BYTE *)v125 - 8);
        v131 = *v125;
        if (v127 == 0x736D61726170 && v128 == 0xE600000000000000)
          break;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_71;
        v125 += 7;
        if (!--v124)
        {
          v351 = v126;
          v352 = v203;
          v353 = v127;
          v354 = v128;
          v355 = v129;
          v356 = v130;
          v357 = v131;
          goto LABEL_69;
        }
      }
      v128 = 0xE600000000000000;
LABEL_71:
      v351 = v126;
      v352 = v203;
      v353 = v127;
      v354 = v128;
      v355 = v129;
      v356 = v130;
      v357 = v131;
      swift_retain();
      swift_bridgeObjectRetain();
      Graph.connect(_:to:)((uint64_t)v246, (unint64_t)&v351);
      ShaderGraphNode.out.getter((uint64_t)v248);
      v322 = v230;
      v143 = *(_QWORD *)(v230 + 16);
      if (v143)
      {
        v144 = (_QWORD *)(v230 + 80);
        while (1)
        {
          v145 = *(v144 - 6);
          v146 = *(v144 - 5);
          v147 = *(v144 - 4);
          v148 = *(v144 - 2);
          v200 = *((_BYTE *)v144 - 8);
          v201 = *v144;
          if (v147 == 28265 && *(v144 - 3) == 0xE200000000000000)
            break;
          v150 = *(v144 - 3);
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_82;
          v144 += 7;
          if (!--v143)
          {
            v344 = v145;
            v345 = v146;
            v346 = v147;
            v347 = v150;
            v348 = v148;
            v349 = v200;
            v350 = v201;
            goto LABEL_80;
          }
        }
        v150 = 0xE200000000000000;
LABEL_82:
        v344 = v145;
        v345 = v146;
        v346 = v147;
        v347 = v150;
        v348 = v148;
        v349 = v200;
        v350 = v201;
        v161 = v235;
        swift_retain();
        swift_bridgeObjectRetain();
        specialized Sequence.first(where:)(v161, 28265, 0xE200000000000000, v250);
        outlined init with take of MetalFunctionNode?((uint64_t)v250, (uint64_t)v251, (uint64_t *)&demangling cache variable for type metadata for Input?);
        if (*((_QWORD *)&v251[0] + 1))
        {
          v253 = v251[0];
          v254 = v251[1];
          v255 = v251[2];
          v256 = v252;
          Graph.connect(_:to:)((uint64_t)v248, (unint64_t)&v344);
          Graph.connect(_:to:)((uint64_t)v248, (unint64_t)&v253);
          specialized Graph.remove(_:)(v195);
          swift_release();
          v257 = v254;
          outlined release of String((uint64_t)&v257);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          v310 = v249;
          outlined release of String((uint64_t)&v310);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          v309 = v247;
          outlined release of String((uint64_t)&v309);
          outlined init with take of NodePersonality(&v243, &v308);
          outlined release of NodePersonality(&v308);
          v307 = v244;
          outlined release of [Input]((uint64_t)&v307);
          v306 = v245;
          outlined release of [Input]((uint64_t)&v306);
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          outlined init with take of NodePersonality(&v234, &v305);
          outlined release of NodePersonality(&v305);
          swift_bridgeObjectRelease();
          v304 = *((_QWORD *)&v235 + 1);
          outlined release of [Input]((uint64_t)&v304);
          outlined init with take of NodePersonality(&v229, &v303);
          outlined release of NodePersonality(&v303);
          outlined release of [Input]((uint64_t)&v322);
          v302 = *((_QWORD *)&v230 + 1);
          outlined release of [Input]((uint64_t)&v302);
          outlined init with take of NodePersonality(&v224, &v301);
          outlined release of NodePersonality(&v301);
          outlined release of [Input]((uint64_t)&v323);
          v300 = *((_QWORD *)&v225 + 1);
          return outlined release of [Input]((uint64_t)&v300);
        }
        outlined init with take of NodePersonality(&v234, &v321);
        v320 = *((_QWORD *)&v235 + 1);
        v204 = v178;
        v205 = v197;
        v206 = v177;
        v207 = v176;
        v208 = v175;
        v209 = 28265;
        v210 = 0xE200000000000000;
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v204);
        outlined init with take of UserGraphError.ErrorType((__int128 *)&v204, (uint64_t)&v211);
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        v223 = 0uLL;
        swift_allocError();
        *v162 = v211;
        v163 = v215;
        v165 = v212;
        v164 = v213;
        v162[3] = v214;
        v162[4] = v163;
        v162[1] = v165;
        v162[2] = v164;
        v166 = v219;
        v168 = v216;
        v167 = v217;
        v162[7] = v218;
        v162[8] = v166;
        v162[5] = v168;
        v162[6] = v167;
        v169 = v223;
        v171 = v220;
        v170 = v221;
        v162[11] = v222;
        v162[12] = v169;
        v162[9] = v171;
        v162[10] = v170;
        swift_bridgeObjectRetain();
        outlined retain of NodePersonality(&v321);
        outlined retain of [Input]((uint64_t)&v320);
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v319 = v249;
        outlined release of String((uint64_t)&v319);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v318 = v247;
        outlined release of String((uint64_t)&v318);
        outlined init with take of NodePersonality(&v243, &v317);
        outlined release of NodePersonality(&v317);
        v316 = v244;
        outlined release of [Input]((uint64_t)&v316);
        v315 = v245;
        outlined release of [Input]((uint64_t)&v315);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        outlined release of NodePersonality(&v321);
        swift_bridgeObjectRelease();
        outlined release of [Input]((uint64_t)&v320);
        outlined init with take of NodePersonality(&v229, &v314);
        outlined release of NodePersonality(&v314);
        outlined release of [Input]((uint64_t)&v322);
        v313 = *((_QWORD *)&v230 + 1);
        outlined release of [Input]((uint64_t)&v313);
        outlined init with take of NodePersonality(&v224, &v312);
        outlined release of NodePersonality(&v312);
        outlined release of [Input]((uint64_t)&v323);
        v311 = *((_QWORD *)&v225 + 1);
        v65 = &v311;
      }
      else
      {
LABEL_80:
        outlined init with take of NodePersonality(&v229, &v299);
        v298 = *((_QWORD *)&v230 + 1);
        v204 = v179;
        v205 = v183;
        v206 = v182;
        v207 = v181;
        v208 = v180;
        v209 = 28265;
        v210 = 0xE200000000000000;
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v204);
        outlined init with take of UserGraphError.ErrorType((__int128 *)&v204, (uint64_t)&v211);
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        v223 = 0uLL;
        swift_allocError();
        *v151 = v211;
        v152 = v215;
        v154 = v212;
        v153 = v213;
        v151[3] = v214;
        v151[4] = v152;
        v151[1] = v154;
        v151[2] = v153;
        v155 = v219;
        v157 = v216;
        v156 = v217;
        v151[7] = v218;
        v151[8] = v155;
        v151[5] = v157;
        v151[6] = v156;
        v158 = v223;
        v160 = v220;
        v159 = v221;
        v151[11] = v222;
        v151[12] = v158;
        v151[9] = v160;
        v151[10] = v159;
        outlined retain of [Input]((uint64_t)&v322);
        outlined retain of NodePersonality(&v299);
        outlined retain of [Input]((uint64_t)&v298);
        swift_willThrow();
        swift_release();
        v297 = v249;
        outlined release of String((uint64_t)&v297);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v296 = v247;
        outlined release of String((uint64_t)&v296);
        outlined init with take of NodePersonality(&v243, &v295);
        outlined release of NodePersonality(&v295);
        v294 = v244;
        outlined release of [Input]((uint64_t)&v294);
        v293 = v245;
        outlined release of [Input]((uint64_t)&v293);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        outlined init with take of NodePersonality(&v234, &v292);
        outlined release of NodePersonality(&v292);
        v291 = v235;
        outlined release of [Input]((uint64_t)&v291);
        v290 = *((_QWORD *)&v235 + 1);
        outlined release of [Input]((uint64_t)&v290);
        outlined release of NodePersonality(&v299);
        outlined release of [Input]((uint64_t)&v322);
        outlined release of [Input]((uint64_t)&v298);
        outlined init with take of NodePersonality(&v224, &v289);
        outlined release of NodePersonality(&v289);
        outlined release of [Input]((uint64_t)&v323);
        v288 = *((_QWORD *)&v225 + 1);
        v65 = &v288;
      }
    }
    else
    {
LABEL_69:
      outlined init with take of NodePersonality(&v224, &v287);
      v286 = *((_QWORD *)&v225 + 1);
      v204 = v184;
      v205 = v185;
      v206 = v186;
      v207 = v187;
      v208 = v188;
      v209 = 0x736D61726170;
      v210 = 0xE600000000000000;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v204);
      outlined init with take of UserGraphError.ErrorType((__int128 *)&v204, (uint64_t)&v211);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      v223 = 0uLL;
      swift_allocError();
      *v133 = v211;
      v134 = v215;
      v136 = v212;
      v135 = v213;
      v133[3] = v214;
      v133[4] = v134;
      v133[1] = v136;
      v133[2] = v135;
      v137 = v219;
      v139 = v216;
      v138 = v217;
      v133[7] = v218;
      v133[8] = v137;
      v133[5] = v139;
      v133[6] = v138;
      v140 = v223;
      v142 = v220;
      v141 = v221;
      v133[11] = v222;
      v133[12] = v140;
      v133[9] = v142;
      v133[10] = v141;
      outlined retain of [Input]((uint64_t)&v323);
      outlined retain of NodePersonality(&v287);
      outlined retain of [Input]((uint64_t)&v286);
      swift_willThrow();
      swift_release();
      v285 = v247;
      outlined release of String((uint64_t)&v285);
      outlined init with take of NodePersonality(&v243, &v284);
      outlined release of NodePersonality(&v284);
      v283 = v244;
      outlined release of [Input]((uint64_t)&v283);
      v282 = v245;
      outlined release of [Input]((uint64_t)&v282);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      outlined init with take of NodePersonality(&v234, &v281);
      outlined release of NodePersonality(&v281);
      v280 = v235;
      outlined release of [Input]((uint64_t)&v280);
      v279 = *((_QWORD *)&v235 + 1);
      outlined release of [Input]((uint64_t)&v279);
      outlined init with take of NodePersonality(&v229, &v278);
      outlined release of NodePersonality(&v278);
      v277 = v230;
      outlined release of [Input]((uint64_t)&v277);
      v276 = *((_QWORD *)&v230 + 1);
      outlined release of [Input]((uint64_t)&v276);
      outlined release of NodePersonality(&v287);
      outlined release of [Input]((uint64_t)&v323);
      v65 = &v286;
    }
    return outlined release of [Input]((uint64_t)v65);
  }
  v87 = v196 + 32;
  v88 = v225;
  v332 = v225;
  swift_bridgeObjectRetain_n();
  v89 = 0;
  v174 = (_QWORD *)(v88 + 80);
  v172 = v88;
  while (1)
  {
    v90 = v87 + 56 * v89;
    v91 = *(_QWORD *)(v90 + 16);
    v92 = *(_QWORD *)(v90 + 24);
    v93 = *(_QWORD *)(v90 + 48);
    v94 = *(_BYTE *)(v90 + 40);
    v95 = *(_QWORD *)(v90 + 32);
    v96 = *(_QWORD *)(v90 + 8);
    v358[0] = *(_QWORD *)v90;
    v358[1] = v96;
    v358[2] = v91;
    v358[3] = v92;
    v358[4] = v95;
    v359 = v94;
    v360 = v93;
    v97 = *(_QWORD *)(v88 + 16);
    if (!v97)
      break;
    v191 = v89 + 1;
    v98 = v174;
    while (1)
    {
      v99 = *(v98 - 6);
      v100 = *(v98 - 5);
      v101 = *(v98 - 4);
      v102 = *(v98 - 2);
      v103 = *((_BYTE *)v98 - 8);
      v104 = *v98;
      if (v101 == v91 && *(v98 - 3) == v92)
      {
        v106 = v92;
        goto LABEL_56;
      }
      v194 = *(v98 - 6);
      v106 = *(v98 - 3);
      v107 = v91;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        break;
      v98 += 7;
      --v97;
      v91 = v107;
      if (!v97)
      {
        *(_QWORD *)&v361 = v194;
        *((_QWORD *)&v361 + 1) = v100;
        v362 = v101;
        v363 = v106;
        v364 = v102;
        v365 = v103;
        v366 = v104;
        goto LABEL_59;
      }
    }
    v91 = v101;
    v99 = v194;
LABEL_56:
    *(_QWORD *)&v361 = v99;
    *((_QWORD *)&v361 + 1) = v100;
    v362 = v91;
    v363 = v106;
    v364 = v102;
    v365 = v103;
    v366 = v104;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    Graph.moveEdge(from:to:)((uint64_t)v358, &v361);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    v88 = v172;
    v89 = v191;
    v87 = v196 + 32;
    if (v191 == v173)
    {
      swift_bridgeObjectRelease_n();
      v86 = v381;
      goto LABEL_58;
    }
  }
LABEL_59:
  v113 = v91;
  swift_bridgeObjectRetain();
  outlined init with take of NodePersonality(&v224, &v331);
  v330 = *((_QWORD *)&v225 + 1);
  v204 = v184;
  v205 = v185;
  v206 = v186;
  v207 = v187;
  v208 = v188;
  v209 = v113;
  v210 = v92;
  _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v204);
  outlined init with take of UserGraphError.ErrorType((__int128 *)&v204, (uint64_t)&v211);
  lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
  v223 = 0uLL;
  swift_allocError();
  *v114 = v211;
  v115 = v215;
  v117 = v212;
  v116 = v213;
  v114[3] = v214;
  v114[4] = v115;
  v114[1] = v117;
  v114[2] = v116;
  v118 = v219;
  v120 = v216;
  v119 = v217;
  v114[7] = v218;
  v114[8] = v118;
  v114[5] = v120;
  v114[6] = v119;
  v121 = v223;
  v123 = v220;
  v122 = v221;
  v114[11] = v222;
  v114[12] = v121;
  v114[9] = v123;
  v114[10] = v122;
  outlined retain of [Input]((uint64_t)&v332);
  outlined retain of NodePersonality(&v331);
  outlined retain of [Input]((uint64_t)&v330);
  swift_willThrow();
  swift_bridgeObjectRelease();
  outlined init with take of NodePersonality(&v234, &v329);
  outlined release of NodePersonality(&v329);
  v328 = v235;
  outlined release of [Input]((uint64_t)&v328);
  v327 = *((_QWORD *)&v235 + 1);
  outlined release of [Input]((uint64_t)&v327);
  outlined init with take of NodePersonality(&v229, &v326);
  outlined release of NodePersonality(&v326);
  v325 = v230;
  outlined release of [Input]((uint64_t)&v325);
  v324 = *((_QWORD *)&v230 + 1);
  outlined release of [Input]((uint64_t)&v324);
  swift_bridgeObjectRelease();
  swift_release();
  outlined release of NodePersonality(&v331);
  outlined release of [Input]((uint64_t)&v332);
  outlined release of [Input]((uint64_t)&v330);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t swizzleFunction #1 (for:) in Graph.replaceMultiOutputNodes()(uint64_t a1)
{
  uint64_t v3;
  Swift::String v4;
  __int128 v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16[12];
  _OWORD v17[12];
  __int128 v18;

  if (one-time initialization token for float2 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 0xD000000000000024;
  if (one-time initialization token for float3 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 0xD000000000000024;
  if (one-time initialization token for float4 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 0xD000000000000024;
  _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)v16);
  *(_QWORD *)&v17[0] = 0;
  *((_QWORD *)&v17[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  v3 = swift_bridgeObjectRelease();
  *(_QWORD *)&v17[0] = 0xD000000000000029;
  *((_QWORD *)&v17[0] + 1) = 0x8000000245FCBA90;
  v4._countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5 = v17[0];
  outlined init with take of UserGraphError.ErrorType(v16, (uint64_t)v17);
  v18 = v5;
  lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
  swift_allocError();
  *v6 = v17[0];
  v7 = v17[4];
  v9 = v17[1];
  v8 = v17[2];
  v6[3] = v17[3];
  v6[4] = v7;
  v6[1] = v9;
  v6[2] = v8;
  v10 = v17[8];
  v12 = v17[5];
  v11 = v17[6];
  v6[7] = v17[7];
  v6[8] = v10;
  v6[5] = v12;
  v6[6] = v11;
  v13 = v18;
  v15 = v17[9];
  v14 = v17[10];
  v6[11] = v17[11];
  v6[12] = v13;
  v6[9] = v15;
  v6[10] = v14;
  return swift_willThrow();
}

uint64_t closure #1 in Graph.replaceMultiOutputNodes()(uint64_t result, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  char v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  BOOL v41;
  BOOL v42;
  uint64_t v43[14];
  _OWORD v44[7];
  _OWORD v45[7];
  _QWORD v46[5];
  char v47;
  uint64_t v48;
  _QWORD v49[5];
  char v50;
  uint64_t v51;
  _OWORD v52[9];
  _OWORD v53[3];
  uint64_t v54;

  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result >> 61 != 5)
    return result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_QWORD *)(v3 + 16);
  v8 = *(_QWORD *)(v3 + 24);
  if (v7 == 0xD000000000000014 && v8 == 0x8000000245FCB9F0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    if (one-time initialization token for float2 != -1)
      swift_once();
    v9 = &static MetalDataType.float2;
  }
  else if (v7 == 0xD000000000000013 && v8 == 0x8000000245FCBA10
         || ((v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), v7 == 0xD000000000000014)
           ? (v11 = v8 == 0x8000000245FCBA30)
           : (v11 = 0),
             !v11 ? (v12 = 0) : (v12 = 1),
             (v10 & 1) != 0 || (v12 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (one-time initialization token for float3 != -1)
      swift_once();
    v9 = &static MetalDataType.float3;
  }
  else
  {
    if (v7 != 0xD000000000000013 || v8 != 0x8000000245FCBA50)
    {
      v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v41 = v7 == 0xD000000000000014 && v8 == 0x8000000245FCBA70;
      v42 = v41;
      if ((v40 & 1) == 0 && !v42)
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
          return result;
      }
    }
    if (one-time initialization token for float4 != -1)
      swift_once();
    v9 = &static MetalDataType.float4;
  }
  v13 = *v9;
  v14 = swift_retain();
  v15 = swizzleFunction #1 (for:) in Graph.replaceMultiOutputNodes()(v14);
  if (v2)
    return swift_release();
  v17 = v16;
  if (!*(_QWORD *)(v5 + 16))
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  v54 = v15;
  v18 = *(_QWORD *)(v5 + 40);
  v19 = *(_QWORD *)(v5 + 48);
  v20 = *(_QWORD *)(v5 + 56);
  v21 = *(_QWORD *)(v5 + 64);
  v22 = *(_BYTE *)(v5 + 72);
  v23 = *(_QWORD *)(v5 + 80);
  v49[0] = *(_QWORD *)(v5 + 32);
  v49[1] = v18;
  v49[2] = v19;
  v49[3] = v20;
  v49[4] = v21;
  v50 = v22;
  v51 = v23;
  v24 = a2[9];
  v52[8] = a2[8];
  v53[0] = v24;
  *(_OWORD *)((char *)v53 + 9) = *(_OWORD *)((char *)a2 + 153);
  v25 = a2[5];
  v52[4] = a2[4];
  v52[5] = v25;
  v26 = a2[7];
  v52[6] = a2[6];
  v52[7] = v26;
  v27 = a2[3];
  v52[2] = a2[2];
  v52[3] = v27;
  v28 = a2[1];
  v52[0] = *a2;
  v52[1] = v28;
  swift_retain();
  swift_bridgeObjectRetain();
  outlined retain of Graph((uint64_t)v52);
  Graph.edge(to:)((uint64_t)v49, v43);
  outlined release of Graph((uint64_t)v52);
  outlined init with take of MetalFunctionNode?((uint64_t)v43, (uint64_t)v44, &demangling cache variable for type metadata for Edge?);
  if (!*((_QWORD *)&v44[0] + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  v45[4] = v44[4];
  v45[5] = v44[5];
  v45[6] = v44[6];
  v45[0] = v44[0];
  v45[1] = v44[1];
  v45[2] = v44[2];
  v45[3] = v44[3];
  Graph.remove(_:)((uint64_t)v45);
  v29 = v6;
  v30 = *(_QWORD *)(v6 + 16);
  if (v30)
  {
    v31 = v17;
    swift_bridgeObjectRetain_n();
    v32 = 0;
    v33 = (_QWORD *)(v29 + 80);
    do
    {
      v34 = *(v33 - 5);
      v35 = *(v33 - 4);
      v36 = *(v33 - 3);
      v37 = *(v33 - 2);
      v38 = *((_BYTE *)v33 - 8);
      v39 = *v33;
      v46[0] = *(v33 - 6);
      v46[1] = v34;
      v46[2] = v35;
      v46[3] = v36;
      v46[4] = v37;
      v47 = v38;
      v48 = v39;
      swift_retain();
      swift_bridgeObjectRetain();
      closure #1 in closure #1 in Graph.replaceMultiOutputNodes()(v32, (uint64_t)v46, (uint64_t)a2, v13, v54, v31, (uint64_t)v45);
      v33 += 7;
      ++v32;
      swift_bridgeObjectRelease();
      swift_release();
    }
    while (v30 != v32);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return (uint64_t)outlined release of Edge?(v43);
}

uint64_t closure #1 in closure #1 in Graph.replaceMultiOutputNodes()(Swift::Int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  _BYTE v47[8];
  __int128 v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD v59[3];
  uint64_t v60;
  _QWORD v61[5];
  char v62;
  uint64_t v63;
  _QWORD v64[5];
  char v65;
  uint64_t v66;
  _QWORD v67[5];
  char v68;
  uint64_t v69;

  result = Graph.constantIntegerNode(for:)(a1, &v45);
  if (!v7)
  {
    ShaderGraphNode.out.getter((uint64_t)v47);
    v43 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 32) = 28265;
    *(_OWORD *)(inited + 16) = xmmword_245FBECE0;
    *(_QWORD *)(inited + 40) = 0xE200000000000000;
    *(_QWORD *)(inited + 48) = a4;
    v16 = one-time initialization token for int32;
    swift_retain();
    if (v16 != -1)
      swift_once();
    v17 = static MetalDataType.int32;
    *(_QWORD *)(inited + 56) = 0x7865646E69;
    *(_QWORD *)(inited + 64) = 0xE500000000000000;
    *(_QWORD *)(inited + 72) = v17;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
    v18 = swift_initStackObject();
    *(_OWORD *)(v18 + 16) = xmmword_245FBECD0;
    v19 = one-time initialization token for float;
    swift_retain();
    if (v19 != -1)
      swift_once();
    v20 = static MetalDataType.float;
    *(_QWORD *)(v18 + 32) = 7632239;
    *(_QWORD *)(v18 + 40) = 0xE300000000000000;
    *(_QWORD *)(v18 + 48) = v20;
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = a5;
    *(_QWORD *)(v21 + 24) = a6;
    *(_QWORD *)(v21 + 32) = v20;
    v44 = v21 | 0x2000000000000000;
    v22 = *(_QWORD *)(a3 + 40);
    swift_retain_n();
    swift_bridgeObjectRetain();
    specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v22, inited, v18, v44, a3 + 64, a3, &v49);
    swift_release();
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_setDeallocating();
    result = swift_arrayDestroy();
    v23 = *(_OWORD *)(a7 + 16);
    v59[0] = *(_OWORD *)a7;
    v59[1] = v23;
    v59[2] = *(_OWORD *)(a7 + 32);
    v60 = *(_QWORD *)(a7 + 48);
    v24 = v50;
    v58 = v50;
    if (*(_QWORD *)(v50 + 16))
    {
      v25 = *(_QWORD *)(v50 + 40);
      v26 = *(_QWORD *)(v50 + 48);
      v27 = *(_QWORD *)(v50 + 56);
      v28 = *(_QWORD *)(v50 + 64);
      v29 = *(_BYTE *)(v50 + 72);
      v30 = *(_QWORD *)(v50 + 80);
      v67[0] = *(_QWORD *)(v50 + 32);
      v67[1] = v25;
      v67[2] = v26;
      v67[3] = v27;
      v67[4] = v28;
      v68 = v29;
      v69 = v30;
      swift_retain();
      swift_bridgeObjectRetain();
      Graph.connect(_:to:)((uint64_t)v59, (unint64_t)v67);
      swift_bridgeObjectRelease();
      result = swift_release();
      if (*(_QWORD *)(v24 + 16) >= 2uLL)
      {
        v31 = *(_QWORD *)(v24 + 96);
        v32 = *(_QWORD *)(v24 + 104);
        v33 = *(_QWORD *)(v24 + 112);
        v34 = *(_QWORD *)(v24 + 120);
        v35 = *(_BYTE *)(v24 + 128);
        v36 = *(_QWORD *)(v24 + 136);
        v64[0] = *(_QWORD *)(v24 + 88);
        v64[1] = v31;
        v64[2] = v32;
        v64[3] = v33;
        v64[4] = v34;
        v65 = v35;
        v66 = v36;
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.connect(_:to:)((uint64_t)v47, (unint64_t)v64);
        swift_bridgeObjectRelease();
        result = swift_release();
        v57 = v51;
        if (*(_QWORD *)(v51 + 16))
        {
          v37 = *(_QWORD *)(v51 + 40);
          v38 = *(_QWORD *)(v51 + 48);
          v39 = *(_QWORD *)(v51 + 56);
          v40 = *(_QWORD *)(v51 + 64);
          v41 = *(_BYTE *)(v51 + 72);
          v42 = *(_QWORD *)(v51 + 80);
          v61[0] = *(_QWORD *)(v51 + 32);
          v61[1] = v37;
          v61[2] = v38;
          v61[3] = v39;
          v61[4] = v40;
          v62 = v41;
          v63 = v42;
          swift_retain();
          swift_bridgeObjectRetain();
          Graph.moveEdges(from:to:)(v43, (uint64_t)v61);
          swift_release();
          v56 = v48;
          outlined release of String((uint64_t)&v56);
          outlined init with take of NodePersonality(&v45, &v55);
          outlined release of NodePersonality(&v55);
          v54 = *((_QWORD *)&v45 + 1);
          outlined release of [Input]((uint64_t)&v54);
          v53 = v46;
          outlined release of [Input]((uint64_t)&v53);
          outlined init with take of NodePersonality(&v49, &v52);
          outlined release of NodePersonality(&v52);
          outlined release of [Input]((uint64_t)&v58);
          outlined release of [Input]((uint64_t)&v57);
          swift_bridgeObjectRelease();
          return swift_release();
        }
LABEL_13:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> constantFunction(for:)(Swift::Int a1)
{
  unint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  Swift::String result;
  __int128 v18[3];
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[12];
  __int128 v22;

  v3 = 0xD000000000000026;
  v4 = (void *)0x8000000245FCB340;
  switch(a1)
  {
    case 0:
      break;
    case 1:
      v5 = "ND_appleinternal_constant_one_integer";
      goto LABEL_5;
    case 2:
      v5 = "ND_appleinternal_constant_two_integer";
LABEL_5:
      v4 = (void *)((unint64_t)(v5 - 32) | 0x8000000000000000);
      v3 = 0xD000000000000025;
      break;
    case 3:
      v3 = 0xD000000000000027;
      v4 = (void *)0x8000000245FCB2B0;
      break;
    default:
      *(_QWORD *)&v21[0] = a1;
      memset(v18, 0, 41);
      v19 = dispatch thunk of CustomStringConvertible.description.getter();
      v20 = v6;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_((uint64_t)v18);
      outlined init with take of UserGraphError.ErrorType(v18, (uint64_t)v21);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      v22 = 0uLL;
      swift_allocError();
      *v7 = v21[0];
      v8 = v21[4];
      v10 = v21[1];
      v9 = v21[2];
      v7[3] = v21[3];
      v7[4] = v8;
      v7[1] = v10;
      v7[2] = v9;
      v11 = v21[8];
      v13 = v21[5];
      v12 = v21[6];
      v7[7] = v21[7];
      v7[8] = v11;
      v7[5] = v13;
      v7[6] = v12;
      v14 = v22;
      v16 = v21[9];
      v15 = v21[10];
      v7[11] = v21[11];
      v7[12] = v14;
      v7[9] = v16;
      v7[10] = v15;
      v3 = swift_willThrow();
      break;
  }
  result._object = v4;
  result._countAndFlagsBits = v3;
  return result;
}

unint64_t *closure #2 in Graph.splitSharedNodes(nodeDefStore:surfaceShader:geometryModifier:)(unint64_t *result, uint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD **a5, _QWORD **a6)
{
  unint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 v27;
  __int128 v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  __int128 v32;
  __int128 v33;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v35;
  int v36;
  _QWORD *v37;
  uint64_t v39;
  _BYTE v41[8];
  _BYTE v42[8];
  _BYTE v43[8];
  _BYTE v44[8];
  unint64_t v45[6];
  unint64_t v46[6];
  unint64_t v47;
  _OWORD v48[3];
  uint64_t v49;
  _OWORD v50[3];
  uint64_t v51;
  _OWORD v52[3];
  uint64_t v53;
  _OWORD v54[3];
  uint64_t v55;
  unint64_t v56;

  v6 = *result;
  if (*result != 0xE000000000000000)
  {
    v10 = result[2];
    v39 = result[3];
    v11 = result[1];
    v12 = swift_bridgeObjectRetain();
    v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph5InputVG_AF0F4SpecVs5NeverOTg504_s11d111Graph0B0V16splitSharedNodes12nodeDefStore07surfaceA016geometryModifieryAA04NodegH0V_AA0abL0VAKSgtKFyAKXEfU0_AA9fG59VAA0M0Vcfu_33_15bdc1b17c00ea157f8d68df2a99b331ApNTf3nnnpk_nTf1cn_nTm(v12, (uint64_t)v44, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
    swift_bridgeObjectRelease();
    v14 = swift_bridgeObjectRetain();
    v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph5InputVG_AF0F4SpecVs5NeverOTg504_s11d111Graph0B0V16splitSharedNodes12nodeDefStore07surfaceA016geometryModifieryAA04NodegH0V_AA0abL0VAKSgtKFyAKXEfU0_AA9fG59VAA0M0Vcfu_33_15bdc1b17c00ea157f8d68df2a99b331ApNTf3nnnpk_nTf1cn_nTm(v14, (uint64_t)v43, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
    swift_bridgeObjectRelease();
    specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(*(_QWORD *)(a2 + 40), v13, v15, v6, a2 + 64, a2, v45);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized Set._Variant.insert(_:)((Swift::UInt *)v54, v45[3]);
    v16 = swift_bridgeObjectRetain();
    v17 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph5InputVG_AF0F4SpecVs5NeverOTg504_s11d111Graph0B0V16splitSharedNodes12nodeDefStore07surfaceA016geometryModifieryAA04NodegH0V_AA0abL0VAKSgtKFyAKXEfU0_AA9fG59VAA0M0Vcfu_33_15bdc1b17c00ea157f8d68df2a99b331ApNTf3nnnpk_nTf1cn_nTm(v16, (uint64_t)v42, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
    swift_bridgeObjectRelease();
    v18 = swift_bridgeObjectRetain();
    v19 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph5InputVG_AF0F4SpecVs5NeverOTg504_s11d111Graph0B0V16splitSharedNodes12nodeDefStore07surfaceA016geometryModifieryAA04NodegH0V_AA0abL0VAKSgtKFyAKXEfU0_AA9fG59VAA0M0Vcfu_33_15bdc1b17c00ea157f8d68df2a99b331ApNTf3nnnpk_nTf1cn_nTm(v18, (uint64_t)v41, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
    swift_bridgeObjectRelease();
    specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(*(_QWORD *)(a2 + 40), v17, v19, v6, a2 + 64, a2, v46);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized Set._Variant.insert(_:)((Swift::UInt *)v54, v46[3]);
    v20 = v45[2];
    v21 = v46[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v10, v20, v21, (_OWORD *)a2, a3, a4, a5, a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22 = v45[1];
    v23 = v46[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v11, v22, v23, (_OWORD *)a2, a3, a4, a5, a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v24 = *a5;
    v25 = (*a5)[2];
    if (v25)
    {
      swift_bridgeObjectRetain();
      v26 = v24 + 11;
      do
      {
        v27 = *(_OWORD *)(v26 - 5);
        v52[0] = *(_OWORD *)(v26 - 7);
        v52[1] = v27;
        v52[2] = *(_OWORD *)(v26 - 3);
        v53 = *(v26 - 1);
        v28 = *((_OWORD *)v26 + 1);
        v54[0] = *(_OWORD *)v26;
        v54[1] = v28;
        v54[2] = *((_OWORD *)v26 + 2);
        v55 = v26[6];
        Graph.connect(_:to:)((uint64_t)v52, (unint64_t)v54);
        v26 += 14;
        --v25;
      }
      while (v25);
      swift_bridgeObjectRelease();
    }
    v29 = *a6;
    v30 = (*a6)[2];
    if (v30)
    {
      swift_bridgeObjectRetain();
      v31 = v29 + 11;
      do
      {
        v32 = *(_OWORD *)(v31 - 5);
        v48[0] = *(_OWORD *)(v31 - 7);
        v48[1] = v32;
        v48[2] = *(_OWORD *)(v31 - 3);
        v49 = *(v31 - 1);
        v33 = *((_OWORD *)v31 + 1);
        v50[0] = *(_OWORD *)v31;
        v50[1] = v33;
        v50[2] = *((_OWORD *)v31 + 2);
        v51 = v31[6];
        Graph.connect(_:to:)((uint64_t)v48, (unint64_t)v50);
        v31 += 14;
        --v30;
      }
      while (v30);
      swift_bridgeObjectRelease();
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v35 = *a5;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, v35[2]);
    }
    else
    {
      *a5 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, v35[3] >> 1);
      swift_bridgeObjectRelease();
    }
    v36 = swift_isUniquelyReferenced_nonNull_native();
    v37 = *a6;
    if (v36)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, v37[2]);
    }
    else
    {
      *a6 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, v37[3] >> 1);
      swift_bridgeObjectRelease();
    }
    specialized Graph.remove(_:)(v39);
    outlined init with take of NodePersonality(v46, &v56);
    outlined release of NodePersonality(&v56);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with take of NodePersonality(v45, &v47);
    outlined release of NodePersonality(&v47);
    swift_bridgeObjectRelease();
    return (unint64_t *)swift_bridgeObjectRelease();
  }
  return result;
}

void closure #2 in closure #2 in Graph.splitSharedNodes(nodeDefStore:surfaceShader:geometryModifier:)(uint64_t a1, _OWORD *a2, uint64_t *a3, uint64_t *a4, _QWORD **a5, _QWORD **a6)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  Swift::UInt v28;
  BOOL v29;
  BOOL v30;
  _QWORD *v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62[14];
  _OWORD v63[7];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  char v79;
  uint64_t v80;
  _OWORD v81[2];
  uint64_t v82;
  char v83;
  uint64_t v84;
  _OWORD v85[2];
  uint64_t v86;
  char v87;
  uint64_t v88;
  _OWORD v89[9];
  _OWORD v90[2];
  _OWORD v91[2];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;

  v7 = *(_OWORD *)(a1 + 144);
  v98 = *(_OWORD *)(a1 + 128);
  v99 = v7;
  v100 = *(_QWORD *)(a1 + 160);
  v8 = *(_OWORD *)(a1 + 80);
  v94 = *(_OWORD *)(a1 + 64);
  v95 = v8;
  v9 = *(_OWORD *)(a1 + 112);
  v96 = *(_OWORD *)(a1 + 96);
  v97 = v9;
  v10 = *(_OWORD *)(a1 + 16);
  v91[0] = *(_OWORD *)a1;
  v91[1] = v10;
  v11 = *(_OWORD *)(a1 + 48);
  v92 = *(_OWORD *)(a1 + 32);
  v93 = v11;
  v85[0] = v91[0];
  v85[1] = v10;
  v86 = v92;
  v87 = BYTE8(v92);
  v88 = v11;
  v12 = v94;
  v13 = v95;
  v14 = *((_QWORD *)&v97 + 1);
  v15 = *((_QWORD *)&v98 + 1);
  v50 = *((_QWORD *)&v94 + 1);
  v51 = *((_QWORD *)&v11 + 1);
  v76 = *((_QWORD *)&v11 + 1);
  v77 = v94;
  v49 = *((_QWORD *)&v95 + 1);
  v78 = v95;
  v48 = v96;
  v79 = v96;
  v47 = *((_QWORD *)&v96 + 1);
  v80 = *((_QWORD *)&v96 + 1);
  v56 = v98;
  v57 = v97;
  v81[0] = v97;
  v81[1] = v98;
  v55 = v99;
  v82 = v99;
  v54 = BYTE8(v99);
  v83 = BYTE8(v99);
  v53 = v100;
  v84 = v100;
  v16 = a2[1];
  v89[0] = *a2;
  v89[1] = v16;
  v17 = a2[2];
  v18 = a2[3];
  v19 = a2[5];
  v89[4] = a2[4];
  v89[5] = v19;
  v89[2] = v17;
  v89[3] = v18;
  v20 = a2[6];
  v21 = a2[7];
  *(_OWORD *)((char *)v90 + 9) = *(_OWORD *)((char *)a2 + 153);
  v22 = a2[9];
  v89[8] = a2[8];
  v90[0] = v22;
  v89[6] = v20;
  v89[7] = v21;
  outlined retain of (Input, (Input, Input))((uint64_t)v91);
  outlined retain of Graph((uint64_t)v89);
  Graph.edge(to:)((uint64_t)v85, v62);
  outlined release of Graph((uint64_t)v89);
  outlined init with take of MetalFunctionNode?((uint64_t)v62, (uint64_t)v63, &demangling cache variable for type metadata for Edge?);
  if (!*((_QWORD *)&v63[0] + 1))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
LABEL_14:
    swift_release();
    return;
  }
  v59 = v13;
  v60 = v12;
  v68 = v63[4];
  v69 = v63[5];
  v70 = v63[6];
  v64 = v63[0];
  v65 = v63[1];
  v66 = v63[2];
  v67 = v63[3];
  Graph.remove(_:)((uint64_t)&v64);
  v23 = *a3;
  v71 = v64;
  v72 = v65;
  v73 = v66;
  v24 = v67;
  v74 = v67;
  v25 = v64;
  v26 = v65;
  v27 = v66;
  v46 = BYTE8(v66);
  v28 = v64;
  v29 = specialized Set.contains(_:)(v64, v23);
  v30 = specialized Set.contains(_:)(v28, *a4);
  if (v29)
  {
    if (v30)
    {
      v75 = v72;
      v31 = *a5;
      swift_retain();
      outlined retain of String((uint64_t)&v75);
      swift_retain();
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a5 = v31;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
        *a5 = v31;
      }
      v34 = v31[2];
      v33 = v31[3];
      if (v34 >= v33 >> 1)
      {
        v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v33 > 1), v34 + 1, 1, v31);
        *a5 = v31;
      }
      v31[2] = v34 + 1;
      v35 = &v31[14 * v34];
      *((_OWORD *)v35 + 2) = v25;
      *((_OWORD *)v35 + 3) = v26;
      v35[8] = v27;
      *((_BYTE *)v35 + 72) = v46;
      v35[10] = v24;
      v35[11] = v51;
      v35[12] = v60;
      v35[13] = v50;
      v35[14] = v59;
      v35[15] = v49;
      *((_BYTE *)v35 + 128) = v48;
      v35[17] = v47;
      v36 = *a6;
      swift_retain();
      outlined retain of String((uint64_t)&v75);
      swift_retain();
      swift_bridgeObjectRetain();
      v37 = swift_isUniquelyReferenced_nonNull_native();
      *a6 = v36;
      if ((v37 & 1) == 0)
      {
        v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
        *a6 = v36;
      }
      v39 = v36[2];
      v38 = v36[3];
      if (v39 >= v38 >> 1)
      {
        v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v38 > 1), v39 + 1, 1, v36);
        *a6 = v36;
      }
      v36[2] = v39 + 1;
      v40 = &v36[14 * v39];
      *((_OWORD *)v40 + 2) = v25;
      *((_OWORD *)v40 + 3) = v26;
      v40[8] = v27;
      *((_BYTE *)v40 + 72) = v46;
      v40[10] = v24;
      v40[11] = v57;
      v40[12] = v14;
      v40[13] = v56;
      v40[14] = v15;
      v40[15] = v55;
      *((_BYTE *)v40 + 128) = v54;
      v40[17] = v53;
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    v41 = &v76;
LABEL_18:
    Graph.connect(_:to:)((uint64_t)&v71, (unint64_t)v41);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
LABEL_19:
    swift_release();
    outlined release of Edge?(v62);
    return;
  }
  if (v30)
  {
    v41 = (uint64_t *)v81;
    goto LABEL_18;
  }
  if (one-time initialization token for logger != -1)
    swift_once();
  v42 = type metadata accessor for Logger();
  __swift_project_value_buffer(v42, (uint64_t)logger);
  v43 = Logger.logObject.getter();
  v44 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v45 = 0;
    _os_log_impl(&dword_245E46000, v43, v44, "Edge destination node isn't a surface node or geometry modifier node.", v45, 2u);
    MEMORY[0x24954C33C](v45, -1, -1);

    swift_bridgeObjectRelease();
    swift_release();
    outlined release of Edge?(v62);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  outlined release of Edge?(v62);

}

uint64_t closure #1 in Graph.insertConversionFromFloatColorToHalfColor(for:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  unint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  _OWORD *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  _OWORD *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  char v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  char v98;
  uint64_t v99;
  unint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  _BYTE v114[48];
  _BYTE v115[48];
  _QWORD v116[5];
  char v117;
  uint64_t v118;
  _QWORD v119[5];
  char v120;
  uint64_t v121;
  _QWORD v122[5];
  char v123;
  uint64_t v124;
  uint64_t v125;

  v2 = *(_QWORD *)(a2 + 96);
  v3 = (uint64_t *)(*a1 + OBJC_IVAR___SGInput_name);
  v4 = *v3;
  v5 = v3[1];
  v6 = *(_QWORD *)(v2 + 16);
  if (!v6)
  {
LABEL_10:
    v15 = *(_QWORD *)(a2 + 88);
    v17 = *(_BYTE *)(a2 + 120);
    *(_QWORD *)&v95 = *(_QWORD *)(a2 + 80);
    v16 = v95;
    *((_QWORD *)&v95 + 1) = v15;
    v96 = v2;
    v97 = *(_OWORD *)(a2 + 104);
    v98 = v17;
    v99 = v4;
    v100 = v5;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_((uint64_t)&v95);
    outlined init with take of UserGraphError.ErrorType(&v95, (uint64_t)&v101);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v113 = 0uLL;
    swift_allocError();
    *v18 = v101;
    v19 = v105;
    v21 = v102;
    v20 = v103;
    v18[3] = v104;
    v18[4] = v19;
    v18[1] = v21;
    v18[2] = v20;
    v22 = v109;
    v24 = v106;
    v23 = v107;
    v18[7] = v108;
    v18[8] = v22;
    v18[5] = v24;
    v18[6] = v23;
    v25 = v113;
    v27 = v110;
    v26 = v111;
    v18[11] = v112;
    v18[12] = v25;
    v18[9] = v27;
    v18[10] = v26;
    outlined copy of NodePersonality(v16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  v89 = (uint64_t *)(*a1 + OBJC_IVAR___SGInput_name);
  v91 = *a1;
  v92 = a2;
  v7 = (_QWORD *)(v2 + 80);
  while (1)
  {
    v93 = *(v7 - 6);
    v8 = *(v7 - 4);
    v125 = *(v7 - 5);
    v9 = *(v7 - 2);
    v10 = *((_BYTE *)v7 - 8);
    v11 = *v7;
    if (v8 == v4 && *(v7 - 3) == v5)
      break;
    v13 = v4;
    v14 = v5;
    v5 = *(v7 - 3);
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_12;
    v7 += 7;
    --v6;
    v5 = v14;
    v4 = v13;
    if (!v6)
    {
      a2 = v92;
      v2 = *(_QWORD *)(v92 + 96);
      v4 = *v89;
      v5 = v89[1];
      goto LABEL_10;
    }
  }
  v8 = v4;
LABEL_12:
  v116[0] = v93;
  v116[1] = v125;
  v116[2] = v8;
  v116[3] = v5;
  v116[4] = v9;
  v117 = v10;
  v118 = v11;
  v29 = (_QWORD *)(v91 + OBJC_IVAR___SGInput_type);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_beginAccess();
  if (*v29 == 41)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
    v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_245FBECD0;
    if (one-time initialization token for float3 != -1)
      swift_once();
    v42 = static MaterialXDataType.float3;
    *(_QWORD *)(v30 + 32) = 28265;
    *(_QWORD *)(v30 + 40) = 0xE200000000000000;
    *(_QWORD *)(v30 + 48) = v42;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
    v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_245FBECD0;
    v43 = one-time initialization token for color3;
    swift_retain();
    if (v43 != -1)
      swift_once();
    v44 = static MaterialXDataType.color3;
    *(_QWORD *)(v32 + 32) = 7632239;
    *(_QWORD *)(v32 + 40) = 0xE300000000000000;
    *(_QWORD *)(v32 + 48) = v44;
    v45 = swift_allocObject();
    *(_QWORD *)(v45 + 16) = 0xD000000000000019;
    *(_QWORD *)(v45 + 24) = 0x8000000245FCB4D0;
    v36 = v45 | 0xA000000000000000;
    v37 = v92;
    v38 = *(_QWORD *)(v92 + 40);
    v39 = v92 + 64;
    swift_retain();
    v40 = v114;
    v41 = (unint64_t *)v114;
  }
  else
  {
    if (*v29 != 44)
    {
LABEL_43:
      swift_bridgeObjectRelease();
      return swift_release();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
    v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_245FBECD0;
    if (one-time initialization token for float4 != -1)
      swift_once();
    v31 = static MaterialXDataType.float4;
    *(_QWORD *)(v30 + 32) = 28265;
    *(_QWORD *)(v30 + 40) = 0xE200000000000000;
    *(_QWORD *)(v30 + 48) = v31;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
    v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_245FBECD0;
    v33 = one-time initialization token for color4;
    swift_retain();
    if (v33 != -1)
      swift_once();
    v34 = static MaterialXDataType.color4;
    *(_QWORD *)(v32 + 32) = 7632239;
    *(_QWORD *)(v32 + 40) = 0xE300000000000000;
    *(_QWORD *)(v32 + 48) = v34;
    v35 = swift_allocObject();
    *(_QWORD *)(v35 + 16) = 0xD000000000000019;
    *(_QWORD *)(v35 + 24) = 0x8000000245FCB4B0;
    v36 = v35 | 0xA000000000000000;
    v37 = v92;
    v38 = *(_QWORD *)(v92 + 40);
    v39 = v92 + 64;
    swift_retain();
    v40 = v115;
    v41 = (unint64_t *)v115;
  }
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v38, v30, v32, v36, v39, v37, v41);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v86 = v40[40];
  v85 = *(_OWORD *)(v40 + 24);
  v88 = *((_QWORD *)v40 + 2);
  v90 = *((_QWORD *)v40 + 1);
  v87 = *(_QWORD *)v40;
  v46 = *(_QWORD *)(v88 + 16);
  if (!v46)
  {
LABEL_32:
    *(_QWORD *)&v95 = v87;
    *((_QWORD *)&v95 + 1) = v90;
    v96 = v88;
    v97 = v85;
    v98 = v86;
    v99 = 7632239;
    v100 = 0xE300000000000000;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_((uint64_t)&v95);
    outlined init with take of UserGraphError.ErrorType(&v95, (uint64_t)&v101);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v113 = 0uLL;
    swift_allocError();
    *v55 = v101;
    v56 = v105;
    v58 = v102;
    v57 = v103;
    v55[3] = v104;
    v55[4] = v56;
    v55[1] = v58;
    v55[2] = v57;
    v59 = v109;
    v61 = v106;
    v60 = v107;
    v55[7] = v108;
    v55[8] = v59;
    v55[5] = v61;
    v55[6] = v60;
    v62 = v113;
    v64 = v110;
    v63 = v111;
    v55[11] = v112;
    v55[12] = v62;
    v55[9] = v64;
    v55[10] = v63;
    swift_willThrow();
    goto LABEL_43;
  }
  v47 = (_QWORD *)(v88 + 80);
  while (1)
  {
    v48 = *(v47 - 6);
    v94 = *(v47 - 5);
    v49 = *(v47 - 4);
    v50 = *(v47 - 3);
    v51 = *(v47 - 2);
    v52 = *((_BYTE *)v47 - 8);
    v53 = *v47;
    if (v49 == 7632239 && v50 == 0xE300000000000000)
      break;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_34;
    v47 += 7;
    if (!--v46)
      goto LABEL_32;
  }
  v50 = 0xE300000000000000;
LABEL_34:
  v122[0] = v48;
  v122[1] = v94;
  v122[2] = v49;
  v122[3] = v50;
  v122[4] = v51;
  v123 = v52;
  v124 = v53;
  v65 = *(_QWORD *)(v90 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  if (!v65)
  {
LABEL_42:
    *(_QWORD *)&v95 = v87;
    *((_QWORD *)&v95 + 1) = v90;
    v96 = v88;
    v97 = v85;
    v98 = v86;
    v99 = 28265;
    v100 = 0xE200000000000000;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v95);
    outlined init with take of UserGraphError.ErrorType(&v95, (uint64_t)&v101);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v113 = 0uLL;
    swift_allocError();
    *v75 = v101;
    v76 = v105;
    v78 = v102;
    v77 = v103;
    v75[3] = v104;
    v75[4] = v76;
    v75[1] = v78;
    v75[2] = v77;
    v79 = v109;
    v81 = v106;
    v80 = v107;
    v75[7] = v108;
    v75[8] = v79;
    v75[5] = v81;
    v75[6] = v80;
    v82 = v113;
    v84 = v110;
    v83 = v111;
    v75[11] = v112;
    v75[12] = v82;
    v75[9] = v84;
    v75[10] = v83;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_43;
  }
  v66 = (_QWORD *)(v90 + 80);
  while (1)
  {
    v68 = *(v66 - 6);
    v67 = *(v66 - 5);
    v69 = *(v66 - 4);
    v70 = *(v66 - 3);
    v71 = *(v66 - 2);
    v72 = *((_BYTE *)v66 - 8);
    v73 = *v66;
    if (v69 == 28265 && v70 == 0xE200000000000000)
      break;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_45;
    v66 += 7;
    if (!--v65)
      goto LABEL_42;
  }
  v70 = 0xE200000000000000;
LABEL_45:
  v119[0] = v68;
  v119[1] = v67;
  v119[2] = v69;
  v119[3] = v70;
  v119[4] = v71;
  v120 = v72;
  v121 = v73;
  swift_retain();
  swift_bridgeObjectRetain();
  Graph.moveEdges(from:to:)((uint64_t)v116, (uint64_t)v122);
  Graph.connect(_:to:)((uint64_t)v116, (unint64_t)v119);
  outlined consume of NodePersonality(v87);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in Graph.resolveMaterialXEnums()(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  int v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  Swift::String v60;
  Swift::String_optional v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  Swift::String v70;
  Swift::String v71;
  __int128 v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  unint64_t v86;
  unint64_t v87;
  _OWORD *v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  Swift::String v98;
  Swift::String v99;
  __int128 v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _OWORD *v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  Swift::String v118;
  Swift::String v119;
  __int128 v120;
  uint64_t v121;
  NSObject *v122;
  os_log_type_t v123;
  uint8_t *v124;
  uint64_t v125;
  _OWORD *v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  unint64_t v136;
  _OWORD *v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  char v147;
  char v148;
  unint64_t v149;
  int v150[2];
  int v151[2];
  void *v152;
  uint64_t v153;
  int v154[2];
  int v155[2];
  int v156[2];
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char log;
  NSObject *loga;
  uint64_t v174;
  uint64_t v175;
  os_log_type_t type[8];
  os_log_type_t typea;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  void *v183;
  void *v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198[14];
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char v202[8];
  __int128 v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  char v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  __int128 v214;
  uint64_t v215;
  uint64_t v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  unint64_t v220;
  _QWORD v221[5];
  char v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char v229;
  unint64_t v230;
  _OWORD v231[9];
  _OWORD v232[2];
  __int128 v233;
  unint64_t v234;

  v4 = a1[1];
  v217 = *a1;
  v218 = v4;
  v219 = a1[2];
  v5 = *((_QWORD *)a1 + 6);
  v220 = v5;
  v7 = *(_QWORD *)a1;
  v6 = *((_QWORD *)a1 + 1);
  v8 = *((_QWORD *)a1 + 3);
  v174 = *((_QWORD *)a1 + 4);
  *(_QWORD *)type = *((_QWORD *)a1 + 2);
  log = *((_BYTE *)a1 + 40);
  v9 = type metadata accessor for MaterialXDataType();
  result = swift_dynamicCastClass();
  if (result)
  {
    v171 = v7;
    v11 = *(_QWORD **)(result + 24);
    if (v11)
    {
      v170 = v8;
      v12 = *(_OWORD *)(a2 + 144);
      v231[8] = *(_OWORD *)(a2 + 128);
      v232[0] = v12;
      *(_OWORD *)((char *)v232 + 9) = *(_OWORD *)(a2 + 153);
      v13 = *(_OWORD *)(a2 + 80);
      v231[4] = *(_OWORD *)(a2 + 64);
      v231[5] = v13;
      v14 = *(_OWORD *)(a2 + 96);
      v231[7] = *(_OWORD *)(a2 + 112);
      v231[6] = v14;
      v15 = *(_OWORD *)(a2 + 16);
      v231[0] = *(_OWORD *)a2;
      v231[1] = v15;
      v16 = *(_OWORD *)(a2 + 32);
      v231[3] = *(_OWORD *)(a2 + 48);
      v231[2] = v16;
      swift_retain();
      swift_bridgeObjectRetain();
      outlined retain of Graph((uint64_t)v231);
      Graph.edge(to:)((uint64_t)&v217, v198);
      outlined init with take of MetalFunctionNode?((uint64_t)v198, (uint64_t)&v204, &demangling cache variable for type metadata for Edge?);
      v17 = v205;
      if (!v205)
      {
        outlined release of Graph((uint64_t)v231);
        goto LABEL_7;
      }
      v18 = v204;
      v167 = v206;
      v168 = v6;
      v19 = v207;
      v164 = v209;
      v165 = v208;
      v166 = v210;
      swift_retain();
      swift_bridgeObjectRetain();
      outlined release of Edge?(v198);
      outlined release of Graph((uint64_t)v231);
      if (v18 == -7)
      {
        swift_bridgeObjectRelease();
        swift_release();
LABEL_7:
        swift_release();
        return swift_bridgeObjectRelease();
      }
      v163 = v19;
      if ((v18 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else
      {
        v162 = v2;
        v20 = *(_QWORD *)(a2 + 64);
        if (v18 < *(_QWORD *)(v20 + 16))
        {
          v21 = v20 + 48 * v18;
          v19 = *(_QWORD *)(v21 + 32);
          v169 = *(_QWORD *)(v21 + 40);
          if (v19 >> 61)
          {
            outlined copy of NodePersonality(v19);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_release();
            swift_bridgeObjectRelease();
            outlined consume of NodePersonality(v19);
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
          v161 = *(_QWORD *)(v21 + 48);
          v158 = *(_QWORD *)(v21 + 56);
          v159 = *(_QWORD *)(v21 + 64);
          v160 = *(_BYTE *)(v21 + 72);
          v22 = swift_dynamicCastClass();
          if (!v22)
          {
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return swift_release();
          }
          v157 = v17;
          if (*(_BYTE *)(v19 + 80) == 6)
          {
            v23 = *(_QWORD *)(v19 + 16);
            v24 = *(_QWORD **)(v22 + 24);
            *(_QWORD *)v151 = *(_QWORD *)(v19 + 64);
            v152 = (void *)v23;
            *(_QWORD *)v150 = *(_QWORD *)(v19 + 72);
            v153 = *(_QWORD *)(v19 + 56);
            *(_QWORD *)v154 = *(_QWORD *)(v19 + 40);
            *(_QWORD *)v155 = *(_QWORD *)(v19 + 48);
            *(_QWORD *)v156 = *(_QWORD *)(v19 + 32);
            if (v24)
            {
              v25 = *(_QWORD *)(v19 + 24);
              if ((specialized static Array<A>.== infix(_:_:)(v11, v24) & 1) == 0)
              {
                swift_retain();
                outlined copy of NodePersonality(v19);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_retain();
                v66 = MEMORY[0x24BEE0D00];
                v67 = MEMORY[0x24954B1D8](v11, MEMORY[0x24BEE0D00]);
                v69 = v68;
                swift_bridgeObjectRelease();
                *(_QWORD *)&v185 = v67;
                *((_QWORD *)&v185 + 1) = v69;
                v70._countAndFlagsBits = 540877088;
                v70._object = (void *)0xE400000000000000;
                String.append(_:)(v70);
                v71._countAndFlagsBits = MEMORY[0x24954B1D8](v24, v66);
                String.append(_:)(v71);
                swift_bridgeObjectRelease();
                v72 = v185;
                if (one-time initialization token for logger != -1)
                  swift_once();
                v73 = type metadata accessor for Logger();
                __swift_project_value_buffer(v73, (uint64_t)logger);
                swift_bridgeObjectRetain_n();
                v74 = Logger.logObject.getter();
                v75 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v74, v75))
                {
                  v76 = (uint8_t *)swift_slowAlloc();
                  v77 = v19;
                  v78 = swift_slowAlloc();
                  *(_QWORD *)&v185 = v78;
                  *(_DWORD *)v76 = 136315138;
                  swift_bridgeObjectRetain();
                  *(_QWORD *)&v178 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, *((unint64_t *)&v72 + 1), (uint64_t *)&v185);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease_n();
                  _os_log_impl(&dword_245E46000, v74, v75, "%s", v76, 0xCu);
                  swift_arrayDestroy();
                  v79 = v78;
                  v19 = v77;
                  MEMORY[0x24954C33C](v79, -1, -1);
                  MEMORY[0x24954C33C](v76, -1, -1);

                }
                else
                {

                  swift_bridgeObjectRelease_n();
                }
                _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v178);
                outlined init with take of UserGraphError.ErrorType(&v178, (uint64_t)&v185);
                v197 = v72;
                lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
                swift_allocError();
                *v88 = v185;
                v89 = v189;
                v91 = v186;
                v90 = v187;
                v88[3] = v188;
                v88[4] = v89;
                v88[1] = v91;
                v88[2] = v90;
                v92 = v193;
                v94 = v190;
                v93 = v191;
                v88[7] = v192;
                v88[8] = v92;
                v88[5] = v94;
                v88[6] = v93;
                v95 = v197;
                v97 = v194;
                v96 = v195;
                v88[11] = v196;
                v88[12] = v95;
                v88[9] = v97;
                v88[10] = v96;
                swift_willThrow();
                swift_release_n();
                outlined consume of NodePersonality(v19);
LABEL_57:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_58;
              }
              v26 = (void *)v25;
              v148 = specialized Sequence<>.contains(_:)((uint64_t)v152, v25, v11);
              swift_retain();
              outlined copy of NodePersonality(v19);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_retain();
              v27 = v150[0];
              outlined copy of SGDataTypeStorage(v152, v26, v156[0], v154[0], v155[0], v153, v151[0], v150[0], 6);
              swift_bridgeObjectRelease();
              if ((v148 & 1) == 0)
              {
                *(_QWORD *)&v178 = v19;
                *((_QWORD *)&v178 + 1) = v169;
                v179 = v161;
                v180 = v158;
                v181 = v159;
                v182 = v160;
                v183 = v152;
                v184 = v26;
                _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_((uint64_t)&v178);
                outlined init with take of UserGraphError.ErrorType(&v178, (uint64_t)&v185);
                lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
                v197 = 0uLL;
                swift_allocError();
                *v28 = v185;
                v29 = v189;
                v31 = v186;
                v30 = v187;
                v28[3] = v188;
                v28[4] = v29;
                v28[1] = v31;
                v28[2] = v30;
                v32 = v193;
                v34 = v190;
                v33 = v191;
                v28[7] = v192;
                v28[8] = v32;
                v28[5] = v34;
                v28[6] = v33;
                v35 = v197;
                v37 = v194;
                v36 = v195;
                v28[11] = v196;
                v28[12] = v35;
                v28[9] = v37;
                v28[10] = v36;
                outlined copy of NodePersonality(v19);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_willThrow();
                swift_release_n();
                outlined consume of NodePersonality(v19);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
LABEL_58:
                swift_release();
                swift_bridgeObjectRelease();
                return swift_release();
              }
            }
            else
            {
              v55 = *(void **)(v19 + 24);
              specialized Sequence<>.contains(_:)(v23, (uint64_t)v55, v11);
              swift_retain();
              outlined copy of NodePersonality(v19);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_retain();
              v56 = (void *)v23;
              v27 = v150[0];
              outlined copy of SGDataTypeStorage(v56, v55, v156[0], v154[0], v155[0], v153, v151[0], v150[0], 6);
              v26 = v55;
              if ((v147 & 1) == 0)
              {
                if (one-time initialization token for logger != -1)
                  swift_once();
                v80 = type metadata accessor for Logger();
                __swift_project_value_buffer(v80, (uint64_t)logger);
                outlined copy of SGDataTypeStorage(v152, v55, v156[0], v154[0], v155[0], v153, v151[0], v150[0], 6);
                swift_bridgeObjectRetain();
                outlined copy of SGDataTypeStorage(v152, v55, v156[0], v154[0], v155[0], v153, v151[0], v150[0], 6);
                v81 = Logger.logObject.getter();
                typea = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v81, typea))
                {
                  loga = v81;
                  v82 = swift_slowAlloc();
                  v175 = swift_slowAlloc();
                  *(_QWORD *)&v185 = v175;
                  *(_DWORD *)v82 = 136315394;
                  swift_bridgeObjectRetain();
                  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v152, (unint64_t)v26, (uint64_t *)&v185);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  outlined consume of SGDataTypeStorage(v152, v26, v156[0], v154[0], v155[0], v153, v151[0], v150[0], 6);
                  outlined consume of SGDataTypeStorage(v152, v26, v156[0], v154[0], v155[0], v153, v151[0], v150[0], 6);
                  swift_bridgeObjectRelease();
                  *(_WORD *)(v82 + 12) = 2080;
                  v83 = swift_bridgeObjectRetain();
                  v84 = MEMORY[0x24954B1D8](v83, MEMORY[0x24BEE0D00]);
                  v85 = v152;
                  v87 = v86;
                  swift_bridgeObjectRelease();
                  *(_QWORD *)&v178 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v87, (uint64_t *)&v185);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease();
                  _os_log_impl(&dword_245E46000, loga, typea, "Enum value %s not a memeber of enum set %s", (uint8_t *)v82, 0x16u);
                  swift_arrayDestroy();
                  MEMORY[0x24954C33C](v175, -1, -1);
                  MEMORY[0x24954C33C](v82, -1, -1);

                }
                else
                {
                  outlined consume of SGDataTypeStorage(v152, v26, v156[0], v154[0], v155[0], v153, v151[0], v150[0], 6);
                  outlined consume of SGDataTypeStorage(v152, v26, v156[0], v154[0], v155[0], v153, v151[0], v150[0], 6);

                  swift_bridgeObjectRelease_n();
                  v85 = v152;
                }
                *(_QWORD *)&v178 = v19;
                *((_QWORD *)&v178 + 1) = v169;
                v179 = v161;
                v180 = v158;
                v181 = v159;
                v182 = v160;
                v183 = v85;
                v184 = v26;
                _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_((uint64_t)&v178);
                outlined init with take of UserGraphError.ErrorType(&v178, (uint64_t)&v185);
                lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
                v197 = 0uLL;
                swift_allocError();
                *v108 = v185;
                v109 = v189;
                v111 = v186;
                v110 = v187;
                v108[3] = v188;
                v108[4] = v109;
                v108[1] = v111;
                v108[2] = v110;
                v112 = v193;
                v114 = v190;
                v113 = v191;
                v108[7] = v192;
                v108[8] = v112;
                v108[5] = v114;
                v108[6] = v113;
                v115 = v197;
                v117 = v194;
                v116 = v195;
                v108[11] = v196;
                v108[12] = v115;
                v108[9] = v117;
                v108[10] = v116;
                outlined copy of NodePersonality(v19);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_willThrow();
                swift_release_n();
                outlined consume of NodePersonality(v19);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_58;
              }
              swift_bridgeObjectRelease();
            }
            v57 = v26;
            v58 = MaterialXDataType.asMetalDataType.getter();
            if (v58)
            {
              v59 = v58;
              v149 = v19;
              v60._countAndFlagsBits = (uint64_t)v152;
              v60._object = v57;
              v61 = MetalDataType.convertEnumConstant(_:)(v60);
              if (v61.value._object)
              {
                outlined consume of SGDataTypeStorage(v152, v57, v156[0], v154[0], v155[0], v153, v151[0], v27, 6);
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
                v62 = v59;
                v63 = swift_allocObject();
                *(_OWORD *)(v63 + 16) = xmmword_245FBECD0;
                *(_QWORD *)(v63 + 32) = 7632239;
                *(_QWORD *)(v63 + 40) = 0xE300000000000000;
                *(_QWORD *)(v63 + 48) = v62;
                v64 = swift_allocObject();
                *(Swift::String_optional *)(v64 + 16) = v61;
                *(_OWORD *)(v64 + 32) = 0u;
                *(_OWORD *)(v64 + 48) = 0u;
                *(_OWORD *)(v64 + 64) = 0u;
                *(_BYTE *)(v64 + 80) = 6;
                *(_QWORD *)(v64 + 88) = v62;
                v65 = *(_QWORD *)(a2 + 40);
                swift_retain_n();
                swift_bridgeObjectRetain();
                specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v65, MEMORY[0x24BEE4AF8], v63, v64, a2 + 64, a2, &v199);
                swift_release();
                swift_setDeallocating();
                swift_arrayDestroy();
                swift_deallocClassInstance();
                swift_bridgeObjectRelease();
                v233 = v218;
                v221[0] = v18;
                v221[1] = v157;
                v221[2] = v167;
                v221[3] = v163;
                v221[4] = v165;
                v222 = v164 & 1;
                v223 = v166;
                v224 = v171;
                v225 = v168;
                v226 = *(_QWORD *)type;
                v227 = v170;
                v228 = v174;
                v229 = log;
                v230 = v5;
                swift_retain();
                swift_retain();
                swift_bridgeObjectRetain();
                outlined retain of String((uint64_t)&v233);
                Graph.remove(_:)((uint64_t)v221);
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
                ShaderGraphNode.out.getter((uint64_t)v202);
                if (!v162)
                {
                  Graph.connect(_:to:)((uint64_t)v202, (unint64_t)&v217);
                  swift_release();
                  swift_release();
                  v214 = v203;
                  outlined release of String((uint64_t)&v214);
                  outlined init with take of NodePersonality(&v199, &v213);
                  outlined release of NodePersonality(&v213);
                  v212 = v200;
                  outlined release of [Input]((uint64_t)&v212);
                  v211 = v201;
                  outlined release of [Input]((uint64_t)&v211);
                  swift_release_n();
                  swift_release();
                  outlined consume of NodePersonality(v19);
                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_bridgeObjectRelease();
                  return swift_bridgeObjectRelease();
                }
                outlined init with take of NodePersonality(&v199, &v234);
                outlined release of NodePersonality(&v234);
                v216 = v200;
                outlined release of [Input]((uint64_t)&v216);
                v215 = v201;
                outlined release of [Input]((uint64_t)&v215);
                swift_release_n();
                swift_release();
                outlined consume of NodePersonality(v19);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_58;
              }
              _StringGuts.grow(_:)(39);
              swift_bridgeObjectRelease();
              *(_QWORD *)&v185 = 0xD000000000000012;
              *((_QWORD *)&v185 + 1) = 0x8000000245FCB990;
              v118._countAndFlagsBits = (uint64_t)v152;
              v118._object = v57;
              String.append(_:)(v118);
              outlined consume of SGDataTypeStorage(v152, v57, v156[0], v154[0], v155[0], v153, v151[0], v27, 6);
              v119._countAndFlagsBits = 0xD000000000000013;
              v119._object = (void *)0x8000000245FCB9D0;
              String.append(_:)(v119);
              v120 = v185;
              if (one-time initialization token for logger != -1)
                swift_once();
              v121 = type metadata accessor for Logger();
              __swift_project_value_buffer(v121, (uint64_t)logger);
              swift_bridgeObjectRetain_n();
              v122 = Logger.logObject.getter();
              v123 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v122, v123))
              {
                v124 = (uint8_t *)swift_slowAlloc();
                v125 = swift_slowAlloc();
                *(_QWORD *)&v185 = v125;
                *(_DWORD *)v124 = 136315138;
                swift_bridgeObjectRetain();
                *(_QWORD *)&v178 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v120, *((unint64_t *)&v120 + 1), (uint64_t *)&v185);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                _os_log_impl(&dword_245E46000, v122, v123, "%s", v124, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x24954C33C](v125, -1, -1);
                MEMORY[0x24954C33C](v124, -1, -1);

              }
              else
              {

                swift_bridgeObjectRelease_n();
              }
              _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v178);
              outlined init with take of UserGraphError.ErrorType(&v178, (uint64_t)&v185);
              v197 = v120;
              lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
              swift_allocError();
              *v137 = v185;
              v138 = v189;
              v140 = v186;
              v139 = v187;
              v137[3] = v188;
              v137[4] = v138;
              v137[1] = v140;
              v137[2] = v139;
              v141 = v193;
              v143 = v190;
              v142 = v191;
              v137[7] = v192;
              v137[8] = v141;
              v137[5] = v143;
              v137[6] = v142;
              v144 = v197;
              v146 = v194;
              v145 = v195;
              v137[11] = v196;
              v137[12] = v144;
              v137[9] = v146;
              v137[10] = v145;
              swift_willThrow();
              swift_release_n();
              swift_release();
              v136 = v149;
            }
            else
            {
              outlined consume of SGDataTypeStorage(v152, v26, v156[0], v154[0], v155[0], v153, v151[0], v27, 6);
              _StringGuts.grow(_:)(39);
              swift_bridgeObjectRelease();
              *(_QWORD *)&v185 = 0xD000000000000012;
              *((_QWORD *)&v185 + 1) = 0x8000000245FCB990;
              v98._countAndFlagsBits = MaterialXDataType.description.getter();
              String.append(_:)(v98);
              swift_bridgeObjectRelease();
              v99._countAndFlagsBits = 0xD000000000000013;
              v99._object = (void *)0x8000000245FCB9B0;
              String.append(_:)(v99);
              v100 = v185;
              if (one-time initialization token for logger != -1)
                swift_once();
              v101 = type metadata accessor for Logger();
              __swift_project_value_buffer(v101, (uint64_t)logger);
              swift_bridgeObjectRetain_n();
              v102 = Logger.logObject.getter();
              v103 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v102, v103))
              {
                v104 = (uint8_t *)swift_slowAlloc();
                v105 = v19;
                v106 = swift_slowAlloc();
                *(_QWORD *)&v185 = v106;
                *(_DWORD *)v104 = 136315138;
                swift_bridgeObjectRetain();
                *(_QWORD *)&v178 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v100, *((unint64_t *)&v100 + 1), (uint64_t *)&v185);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                _os_log_impl(&dword_245E46000, v102, v103, "%s", v104, 0xCu);
                swift_arrayDestroy();
                v107 = v106;
                v19 = v105;
                MEMORY[0x24954C33C](v107, -1, -1);
                MEMORY[0x24954C33C](v104, -1, -1);

              }
              else
              {

                swift_bridgeObjectRelease_n();
              }
              _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v178);
              outlined init with take of UserGraphError.ErrorType(&v178, (uint64_t)&v185);
              v197 = v100;
              lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
              swift_allocError();
              *v126 = v185;
              v127 = v189;
              v129 = v186;
              v128 = v187;
              v126[3] = v188;
              v126[4] = v127;
              v126[1] = v129;
              v126[2] = v128;
              v130 = v193;
              v132 = v190;
              v131 = v191;
              v126[7] = v192;
              v126[8] = v130;
              v126[5] = v132;
              v126[6] = v131;
              v133 = v197;
              v135 = v194;
              v134 = v195;
              v126[11] = v196;
              v126[12] = v133;
              v126[9] = v135;
              v126[10] = v134;
              swift_willThrow();
              swift_release_n();
              v136 = v19;
            }
            outlined consume of NodePersonality(v136);
            goto LABEL_57;
          }
          swift_retain();
          outlined copy of NodePersonality(v19);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v178 = 0;
          *((_QWORD *)&v178 + 1) = 0xE000000000000000;
          *(_QWORD *)&v185 = v19;
          *((_QWORD *)&v185 + 1) = v169;
          *(_QWORD *)&v186 = v161;
          *((_QWORD *)&v186 + 1) = v158;
          *(_QWORD *)&v187 = v159;
          BYTE8(v187) = v160;
          _print_unlocked<A, B>(_:_:)();
          v9 = 0;
          v5 = 0xE000000000000000;
          if (one-time initialization token for logger == -1)
          {
LABEL_21:
            v38 = type metadata accessor for Logger();
            __swift_project_value_buffer(v38, (uint64_t)logger);
            swift_bridgeObjectRetain();
            v39 = Logger.logObject.getter();
            v40 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v39, v40))
            {
              v41 = (uint8_t *)swift_slowAlloc();
              v42 = v19;
              v43 = swift_slowAlloc();
              *(_QWORD *)&v185 = v43;
              *(_DWORD *)v41 = 136315138;
              swift_bridgeObjectRetain();
              *(_QWORD *)&v178 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v5, (uint64_t *)&v185);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_245E46000, v39, v40, "enum value isn't a string %s", v41, 0xCu);
              swift_arrayDestroy();
              v44 = v43;
              v19 = v42;
              MEMORY[0x24954C33C](v44, -1, -1);
              MEMORY[0x24954C33C](v41, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v178);
            outlined init with take of UserGraphError.ErrorType(&v178, (uint64_t)&v185);
            lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
            v197 = 0uLL;
            swift_allocError();
            *v45 = v185;
            v46 = v189;
            v48 = v186;
            v47 = v187;
            v45[3] = v188;
            v45[4] = v46;
            v45[1] = v48;
            v45[2] = v47;
            v49 = v193;
            v51 = v190;
            v50 = v191;
            v45[7] = v192;
            v45[8] = v49;
            v45[5] = v51;
            v45[6] = v50;
            v52 = v197;
            v54 = v194;
            v53 = v195;
            v45[11] = v196;
            v45[12] = v52;
            v45[9] = v54;
            v45[10] = v53;
            swift_willThrow();
            swift_release_n();
            outlined consume of NodePersonality(v19);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_58;
          }
LABEL_61:
          swift_once();
          goto LABEL_21;
        }
      }
      __break(1u);
      goto LABEL_61;
    }
  }
  return result;
}

double Graph.insertGeomPropGetter(_:outputType:nodeDefStore:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  double result;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];

  specialized Graph.insertGeomPropGetter(_:outputType:nodeDefStore:)(a1, a2, a3, &v8);
  if (!v4)
  {
    v7 = v9[0];
    *a4 = v8;
    a4[1] = v7;
    result = *(double *)((char *)v9 + 9);
    *(_OWORD *)((char *)a4 + 25) = *(_OWORD *)((char *)v9 + 9);
  }
  return result;
}

uint64_t Graph.insertParamsInputs(surface:type:nodeDefStore:)(uint64_t a1, char a2)
{
  return specialized Graph.insertParamsInputs(surface:type:nodeDefStore:)(a1, a2 & 1);
}

uint64_t closure #1 in Graph.insertParamsInputs(surface:type:nodeDefStore:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, _QWORD **a7)
{
  int64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t inited;
  uint64_t v24;
  int64_t *v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  int64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v66;
  Swift::String v67;
  __int128 v68;
  _OWORD *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v95;
  uint64_t v96;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD **v102;
  Swift::UInt v103;
  _QWORD *v104;
  int64_t *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  __int128 v122;
  _QWORD *v123;
  Swift::UInt v124;
  uint64_t v125;
  char v126;
  _OWORD v127[12];
  __int128 v128;
  unint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  _QWORD v141[5];
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  unint64_t v150;
  __int128 v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  _QWORD *v157;

  v12 = *(_QWORD *)a1;
  v11 = *(int64_t **)(a1 + 8);
  v13 = *(_QWORD **)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 32);
  LODWORD(v121) = *(unsigned __int8 *)(a1 + 40);
  v103 = *(_QWORD *)(a1 + 24);
  result = specialized Set.contains(_:)(v103, a2);
  if ((result & 1) == 0 || (v12 & 0xE000000000000000) != 0xA000000000000000)
    return result;
  v114 = v14;
  v104 = v13;
  v105 = v11;
  v16 = *(_QWORD *)(v12 + 16);
  v17 = *(_QWORD *)(v12 + 24);
  v118 = v12;
  v18 = one-time initialization token for realityKitParamGetterFuncs;
  swift_bridgeObjectRetain();
  if (v18 != -1)
    swift_once();
  v19 = static ShaderGraphNode.realityKitParamGetterFuncs;
  swift_bridgeObjectRetain();
  v20 = specialized Set.contains(_:)(v16, v17, v19);
  swift_bridgeObjectRelease();
  if ((v20 & 1) == 0)
    return swift_bridgeObjectRelease();
  *(_QWORD *)&v127[0] = v16;
  *((_QWORD *)&v127[0] + 1) = v17;
  swift_bridgeObjectRetain();
  v21._countAndFlagsBits = 95;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = a3;
  v22._object = a4;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v109 = v127[0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
  inited = swift_initStackObject();
  v24 = inited;
  *(_OWORD *)(inited + 16) = xmmword_245FBECD0;
  *(_QWORD *)(inited + 32) = 12324;
  *(_QWORD *)(inited + 40) = 0xE200000000000000;
  *(_QWORD *)(inited + 48) = a5;
  v25 = v105;
  v26 = v105[2];
  v102 = a7;
  if (v26)
  {
    v106 = inited;
    *(_QWORD *)&v127[0] = MEMORY[0x24BEE4AF8];
    swift_retain_n();
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 0);
    v27 = *(_QWORD *)&v127[0];
    v28 = v105 + 7;
    do
    {
      v30 = *(v28 - 2);
      v29 = *(v28 - 1);
      v31 = *v28;
      *(_QWORD *)&v127[0] = v27;
      v33 = *(_QWORD *)(v27 + 16);
      v32 = *(_QWORD *)(v27 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v33 >= v32 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
        v27 = *(_QWORD *)&v127[0];
      }
      *(_QWORD *)(v27 + 16) = v33 + 1;
      v34 = (_QWORD *)(v27 + 24 * v33);
      v34[4] = v29;
      v34[5] = v31;
      v34[6] = v30;
      v28 += 7;
      --v26;
    }
    while (v26);
    v25 = v105;
    swift_bridgeObjectRelease();
    v24 = v106;
  }
  else
  {
    swift_retain_n();
    v27 = MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)&v127[0] = v24;
  specialized Array.append<A>(contentsOf:)(v27);
  v35 = v24;
  if (v104[2] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v122 = v118;
    *((_QWORD *)&v122 + 1) = v25;
    v123 = v104;
    v124 = v103;
    v125 = v114;
    v126 = v121;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi30_((uint64_t)&v122);
    *(_QWORD *)&v127[0] = 0;
    *((_QWORD *)&v127[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v118);
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v127[0] = 0xD000000000000029;
    *((_QWORD *)&v127[0] + 1) = 0x8000000245FCB6C0;
    swift_bridgeObjectRetain_n();
    v67._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v67);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v68 = v127[0];
    outlined init with take of UserGraphError.ErrorType(&v122, (uint64_t)v127);
    v128 = v68;
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    swift_allocError();
    *v69 = v127[0];
    v70 = v127[4];
    v72 = v127[1];
    v71 = v127[2];
    v69[3] = v127[3];
    v69[4] = v70;
    v69[1] = v72;
    v69[2] = v71;
    v73 = v127[8];
    v75 = v127[5];
    v74 = v127[6];
    v69[7] = v127[7];
    v69[8] = v73;
    v69[5] = v75;
    v69[6] = v74;
    v76 = v128;
    v78 = v127[9];
    v77 = v127[10];
    v69[11] = v127[11];
    v69[12] = v76;
    v69[9] = v78;
    v69[10] = v77;
    swift_willThrow();
    return swift_release();
  }
  v36 = v104[5];
  *(_QWORD *)&v127[0] = MEMORY[0x24BEE4AF8];
  swift_retain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0);
  v37 = *(_QWORD *)&v127[0];
  v38 = v104[5];
  v39 = v104[6];
  v40 = v104[7];
  v42 = *(_QWORD *)(*(_QWORD *)&v127[0] + 16);
  v41 = *(_QWORD *)(*(_QWORD *)&v127[0] + 24);
  LOBYTE(v43) = (_BYTE)v104;
  swift_retain();
  swift_bridgeObjectRetain();
  if (v42 >= v41 >> 1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1);
    v37 = *(_QWORD *)&v127[0];
  }
  *(_QWORD *)(v37 + 16) = v42 + 1;
  v44 = (_QWORD *)(v37 + 24 * v42);
  v44[4] = v39;
  v44[5] = v40;
  v44[6] = v38;
  swift_bridgeObjectRelease();
  v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = v109;
  *(_QWORD *)(v45 + 32) = v36;
  v46 = v45 | 0x2000000000000000;
  v47 = a6;
  v48 = *(_QWORD *)(a6 + 40);
  swift_retain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v48, v35, v37, v46, a6 + 64, a6, &v129);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v49 = v130;
  v157 = v130;
  v112 = v130[2];
  v101 = v130;
  if (!v112)
    goto LABEL_35;
  v107 = v130 + 4;
  swift_bridgeObjectRetain();
  v50 = 0;
  v51 = v105;
  while (2)
  {
    v52 = &v107[7 * v50];
    v53 = *v52;
    v54 = v52[1];
    v55 = v52[2];
    v56 = v52[3];
    v57 = v52[4];
    v58 = *((_BYTE *)v52 + 40);
    v59 = v52[6];
    *(_QWORD *)&v151 = v53;
    *((_QWORD *)&v151 + 1) = v54;
    v152 = v55;
    v153 = v56;
    v154 = v57;
    v155 = v58;
    v156 = v59;
    v36 = v51[2];
    if (!v36)
      goto LABEL_22;
    v110 = v54;
    v115 = v50;
    v60 = v105 + 10;
    do
    {
      v61 = *(v60 - 6);
      v62 = *(v60 - 5);
      v42 = *(v60 - 4);
      v63 = *(v60 - 2);
      v47 = *((unsigned __int8 *)v60 - 8);
      v64 = *v60;
      if (v42 == v55 && *(v60 - 3) == v56)
      {
        v43 = v56;
LABEL_20:
        v144 = v61;
        v145 = v62;
        v146 = v55;
        v147 = v43;
        v148 = v63;
        v149 = v47;
        v150 = v64;
        v35 = v110;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdge(from:to:)((uint64_t)&v144, &v151);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_21;
      }
      v119 = *(v60 - 6);
      v121 = *v60;
      v35 = *(v60 - 5);
      v43 = *(v60 - 3);
      v66 = v55;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v55 = v42;
        v61 = v119;
        v64 = v121;
        goto LABEL_20;
      }
      v60 += 7;
      --v36;
      v55 = v66;
    }
    while (v36);
    v144 = v119;
    v145 = v62;
    v146 = v42;
    v147 = v43;
    v148 = v63;
    v149 = v47;
    v150 = v121;
LABEL_21:
    v51 = v105;
    v50 = v115;
LABEL_22:
    if (++v50 != v112)
      continue;
    break;
  }
  outlined release of [Input]((uint64_t)&v157);
  v49 = v101;
LABEL_35:
  v133 = v131;
  v79 = v104;
  v113 = *(_QWORD *)(v131 + 16);
  if (!v113)
    goto LABEL_52;
  v108 = v131 + 32;
  swift_bridgeObjectRetain();
  v80 = 0;
  while (2)
  {
    v82 = (uint64_t *)(v108 + 56 * v80);
    v83 = *v82;
    v84 = v82[1];
    v85 = v82[2];
    v86 = v82[3];
    v87 = v82[4];
    v88 = *((_BYTE *)v82 + 40);
    v89 = v82[6];
    v141[0] = v83;
    v141[1] = v84;
    v141[2] = v85;
    v141[3] = v86;
    v141[4] = v87;
    v142 = v88;
    v143 = v89;
    v36 = v79[2];
    if (!v36)
      goto LABEL_40;
    v111 = v84;
    v116 = v80;
    v90 = v104 + 10;
    while (2)
    {
      v91 = *(v90 - 6);
      v43 = *(v90 - 5);
      v92 = *(v90 - 4);
      v47 = *(v90 - 2);
      v93 = *((_BYTE *)v90 - 8);
      v35 = *v90;
      if (v92 == v85 && *(v90 - 3) == v86)
      {
        v81 = v86;
        v42 = v86;
LABEL_38:
        v134 = v91;
        v135 = v43;
        v136 = v85;
        v137 = v81;
        v138 = v47;
        v139 = v93;
        v140 = v35;
        v35 = v111;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdges(from:to:)((uint64_t)&v134, (uint64_t)v141);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_39;
      }
      v120 = *(v90 - 6);
      v121 = *(v90 - 3);
      v95 = v85;
      v42 = v86;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v85 = v92;
        v91 = v120;
        v81 = v121;
        goto LABEL_38;
      }
      v90 += 7;
      --v36;
      v86 = v42;
      v85 = v95;
      if (v36)
        continue;
      break;
    }
    v134 = v120;
    v135 = v43;
    v136 = v92;
    v137 = v121;
    v138 = v47;
    v139 = v93;
    v140 = v35;
LABEL_39:
    v79 = v104;
    v80 = v116;
LABEL_40:
    if (++v80 != v113)
      continue;
    break;
  }
  outlined release of [Input]((uint64_t)&v133);
  v49 = v101;
LABEL_52:
  v96 = a6;
  specialized Graph.remove(_:)(v103);
  if (v49[2])
  {
    v35 = v49[5];
    v121 = v49[4];
    v47 = v49[6];
    v96 = v49[7];
    v42 = v49[8];
    LOBYTE(v43) = *((_BYTE *)v49 + 72);
    v36 = v49[10];
    v49 = *v102;
    swift_retain();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v102 = v49;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_54;
  }
  else
  {
    __break(1u);
  }
  v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49[2] + 1, 1, v49);
  *v102 = v49;
LABEL_54:
  v99 = v49[2];
  v98 = v49[3];
  if (v99 >= v98 >> 1)
  {
    v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v98 > 1), v99 + 1, 1, v49);
    *v102 = v49;
  }
  v49[2] = v99 + 1;
  v100 = &v49[7 * v99];
  v100[4] = v121;
  v100[5] = v35;
  v100[6] = v47;
  v100[7] = v96;
  v100[8] = v42;
  *((_BYTE *)v100 + 72) = v43;
  v100[10] = v36;
  swift_release();
  swift_release();
  outlined init with take of NodePersonality(&v129, &v132);
  outlined release of NodePersonality(&v132);
  outlined release of [Input]((uint64_t)&v157);
  outlined release of [Input]((uint64_t)&v133);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t Graph.materialXImageNodes.getter()
{
  return Graph.materialXImageNodes.getter(0x6567616D695F444ELL, (void *)0xE800000000000000);
}

uint64_t Graph.materialXTiledimageNodes.getter()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  Swift::Bool v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 64);
  v25 = v1;
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v1 + 32;
    v4 = v1 + 56;
    result = swift_bridgeObjectRetain();
    v6 = 0;
    v7 = result + 104;
    v8 = MEMORY[0x24BEE4AF8];
    v24 = v4;
    while (v6 < v2)
    {
      v9 = 48 * v6;
      if (*(_QWORD *)(v4 + 48 * v6) == -7)
      {
        if ((uint64_t)(v6 + 1) >= v2)
        {
LABEL_22:
          outlined release of [Input]((uint64_t)&v25);
          return v8;
        }
        v10 = 48 * v6++;
        while (1)
        {
          if (*(_QWORD *)(v7 + v10) != -7)
          {
            v9 = v10 + 48;
            goto LABEL_15;
          }
          v11 = v6 + 1;
          if (__OFADD__(v6, 1))
            break;
          ++v6;
          v10 += 48;
          if (v11 >= v2)
            goto LABEL_22;
        }
        __break(1u);
        break;
      }
LABEL_15:
      v12 = v3 + v9;
      v13 = *(_QWORD *)v12;
      if (*(_QWORD *)v12 >> 61 == 5)
      {
        v14 = *(_QWORD *)(v12 + 8);
        v15 = *(_QWORD *)(v12 + 16);
        v23 = *(_OWORD *)(v12 + 24);
        v22 = *(_BYTE *)(v12 + 40);
        outlined copy of NodePersonality(v13);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v16._countAndFlagsBits = 0x64656C69745F444ELL;
        v16._object = (void *)0xED00006567616D69;
        v17 = String.hasPrefix(_:)(v16);
        swift_bridgeObjectRelease();
        if (v17)
        {
          result = swift_isUniquelyReferenced_nonNull_native();
          v21 = v3;
          if ((result & 1) == 0)
            result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v8 + 16) + 1, 1);
          v19 = *(_QWORD *)(v8 + 16);
          v18 = *(_QWORD *)(v8 + 24);
          if (v19 >= v18 >> 1)
            result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
          *(_QWORD *)(v8 + 16) = v19 + 1;
          v20 = v8 + 48 * v19;
          *(_QWORD *)(v20 + 32) = v13;
          *(_QWORD *)(v20 + 40) = v14;
          *(_QWORD *)(v20 + 48) = v15;
          *(_OWORD *)(v20 + 56) = v23;
          *(_BYTE *)(v20 + 72) = v22;
          v3 = v21;
        }
        else
        {
          outlined consume of NodePersonality(v13);
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
        }
        v4 = v24;
      }
      if ((uint64_t)++v6 >= v2)
        goto LABEL_22;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

BOOL ShaderGraphNode.isMaterialXTiledimageNode.getter()
{
  return ShaderGraphNode.isMaterialXSwizzleNode.getter(0x64656C69745F444ELL, (void *)0xED00006567616D69);
}

BOOL ShaderGraphNode.isMaterialXSwizzleNode.getter(uint64_t a1, void *a2)
{
  _QWORD *v2;
  Swift::String v5;
  Swift::Bool v6;
  uint64_t v8;
  unint64_t v9;

  outlined init with take of NodePersonality(v2, &v8);
  outlined init with take of NodePersonality(&v8, &v9);
  if (v9 >> 61 == 5)
  {
    v9 &= 0x1FFFFFFFFFFFFFFFuLL;
    swift_bridgeObjectRetain();
    v5._countAndFlagsBits = a1;
    v5._object = a2;
    v6 = String.hasPrefix(_:)(v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    return 0;
  }
  return v6;
}

uint64_t Graph.materialXCubeimageNodes.getter()
{
  return Graph.materialXImageNodes.getter(0xD000000000000017, (void *)0x8000000245FC8310);
}

uint64_t Graph.materialXImageNodes.getter(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Bool v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;

  v25._countAndFlagsBits = a1;
  v25._object = a2;
  v3 = *(_QWORD *)(v2 + 64);
  v26 = v3;
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = v3 + 32;
    v6 = v3 + 56;
    result = swift_bridgeObjectRetain();
    v8 = 0;
    v9 = result + 104;
    v10 = MEMORY[0x24BEE4AF8];
    v24 = v6;
    while (v8 < v4)
    {
      v11 = 48 * v8;
      if (*(_QWORD *)(v6 + 48 * v8) == -7)
      {
        if ((uint64_t)(v8 + 1) >= v4)
        {
LABEL_22:
          outlined release of [Input]((uint64_t)&v26);
          return v10;
        }
        v12 = 48 * v8++;
        while (1)
        {
          if (*(_QWORD *)(v9 + v12) != -7)
          {
            v11 = v12 + 48;
            goto LABEL_15;
          }
          v13 = v8 + 1;
          if (__OFADD__(v8, 1))
            break;
          ++v8;
          v12 += 48;
          if (v13 >= v4)
            goto LABEL_22;
        }
        __break(1u);
        break;
      }
LABEL_15:
      v14 = v5 + v11;
      v15 = *(_QWORD *)v14;
      if (*(_QWORD *)v14 >> 61 == 5)
      {
        v16 = *(_QWORD *)(v14 + 8);
        v17 = *(_QWORD *)(v14 + 16);
        v23 = *(_OWORD *)(v14 + 24);
        v22 = *(_BYTE *)(v14 + 40);
        outlined copy of NodePersonality(v15);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v18 = String.hasPrefix(_:)(v25);
        swift_bridgeObjectRelease();
        if (v18)
        {
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
            result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1);
          v20 = *(_QWORD *)(v10 + 16);
          v19 = *(_QWORD *)(v10 + 24);
          if (v20 >= v19 >> 1)
            result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
          *(_QWORD *)(v10 + 16) = v20 + 1;
          v21 = v10 + 48 * v20;
          *(_QWORD *)(v21 + 32) = v15;
          *(_QWORD *)(v21 + 40) = v16;
          *(_QWORD *)(v21 + 48) = v17;
          *(_OWORD *)(v21 + 56) = v23;
          *(_BYTE *)(v21 + 72) = v22;
        }
        else
        {
          outlined consume of NodePersonality(v15);
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
        }
        v6 = v24;
      }
      if ((uint64_t)++v8 >= v4)
        goto LABEL_22;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

BOOL ShaderGraphNode.isModernRealityKitTextureNode.getter()
{
  return ShaderGraphNode.isMaterialXSwizzleNode.getter(0xD000000000000014, (void *)0x8000000245FCB370);
}

BOOL ShaderGraphNode.isRealityKit2DImageArrayNode.getter()
{
  return ShaderGraphNode.isMaterialXSwizzleNode.getter(0xD00000000000001DLL, (void *)0x8000000245FCB390);
}

BOOL ShaderGraphNode.isRealityKit3DImageNode.getter()
{
  return ShaderGraphNode.isMaterialXSwizzleNode.getter(0xD000000000000018, (void *)0x8000000245FCB3B0);
}

BOOL ShaderGraphNode.isModernRealityKitTextureCubeNode.getter()
{
  return ShaderGraphNode.isMaterialXSwizzleNode.getter(0xD000000000000018, (void *)0x8000000245FCB3D0);
}

uint64_t one-time initialization function for realityKitSurfaceParamNodes()
{
  uint64_t result;

  result = Set.init(minimumCapacity:)();
  static ShaderGraphNode.realityKitSurfaceParamNodes = result;
  return result;
}

uint64_t *ShaderGraphNode.realityKitSurfaceParamNodes.unsafeMutableAddressor()
{
  if (one-time initialization token for realityKitSurfaceParamNodes != -1)
    swift_once();
  return &static ShaderGraphNode.realityKitSurfaceParamNodes;
}

uint64_t static ShaderGraphNode.realityKitSurfaceParamNodes.getter()
{
  return static ShaderGraphNode.realityKitSurfaceParamNodes.getter(&one-time initialization token for realityKitSurfaceParamNodes);
}

uint64_t static ShaderGraphNode.realityKitSurfaceParamNodes.setter(uint64_t a1)
{
  return static ShaderGraphNode.realityKitSurfaceParamNodes.setter(a1, &one-time initialization token for realityKitSurfaceParamNodes, &static ShaderGraphNode.realityKitSurfaceParamNodes);
}

uint64_t (*static ShaderGraphNode.realityKitSurfaceParamNodes.modify())()
{
  if (one-time initialization token for realityKitSurfaceParamNodes != -1)
    swift_once();
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t one-time initialization function for realityKitBackgroundBlurNodes()
{
  uint64_t v0;
  uint64_t result;

  v0 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for realityKitBackgroundBlurNodes);
  result = swift_arrayDestroy();
  static ShaderGraphNode.realityKitBackgroundBlurNodes = v0;
  return result;
}

uint64_t static ShaderGraphNode.realityKitBackgroundBlurNodes.getter()
{
  return static ShaderGraphNode.realityKitSurfaceParamNodes.getter(&one-time initialization token for realityKitBackgroundBlurNodes);
}

uint64_t static ShaderGraphNode.realityKitBackgroundBlurNodes.setter(uint64_t a1)
{
  return static ShaderGraphNode.realityKitSurfaceParamNodes.setter(a1, &one-time initialization token for realityKitBackgroundBlurNodes, &static ShaderGraphNode.realityKitBackgroundBlurNodes);
}

uint64_t (*static ShaderGraphNode.realityKitBackgroundBlurNodes.modify())()
{
  if (one-time initialization token for realityKitBackgroundBlurNodes != -1)
    swift_once();
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t one-time initialization function for realityKitLightSpillNodes()
{
  uint64_t v0;
  uint64_t result;

  v0 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for realityKitLightSpillNodes);
  result = swift_arrayDestroy();
  static ShaderGraphNode.realityKitLightSpillNodes = v0;
  return result;
}

uint64_t *ShaderGraphNode.realityKitLightSpillNodes.unsafeMutableAddressor()
{
  if (one-time initialization token for realityKitLightSpillNodes != -1)
    swift_once();
  return &static ShaderGraphNode.realityKitLightSpillNodes;
}

uint64_t static ShaderGraphNode.realityKitLightSpillNodes.getter()
{
  return static ShaderGraphNode.realityKitSurfaceParamNodes.getter(&one-time initialization token for realityKitLightSpillNodes);
}

uint64_t static ShaderGraphNode.realityKitLightSpillNodes.setter(uint64_t a1)
{
  return static ShaderGraphNode.realityKitSurfaceParamNodes.setter(a1, &one-time initialization token for realityKitLightSpillNodes, &static ShaderGraphNode.realityKitLightSpillNodes);
}

uint64_t (*static ShaderGraphNode.realityKitLightSpillNodes.modify())()
{
  if (one-time initialization token for realityKitLightSpillNodes != -1)
    swift_once();
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t one-time initialization function for realityKitHoverStateNodes()
{
  uint64_t v0;
  uint64_t result;

  v0 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for realityKitHoverStateNodes);
  result = swift_arrayDestroy();
  static ShaderGraphNode.realityKitHoverStateNodes = v0;
  return result;
}

uint64_t *ShaderGraphNode.realityKitHoverStateNodes.unsafeMutableAddressor()
{
  if (one-time initialization token for realityKitHoverStateNodes != -1)
    swift_once();
  return &static ShaderGraphNode.realityKitHoverStateNodes;
}

uint64_t static ShaderGraphNode.realityKitHoverStateNodes.getter()
{
  return static ShaderGraphNode.realityKitSurfaceParamNodes.getter(&one-time initialization token for realityKitHoverStateNodes);
}

uint64_t static ShaderGraphNode.realityKitSurfaceParamNodes.getter(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static ShaderGraphNode.realityKitHoverStateNodes.setter(uint64_t a1)
{
  return static ShaderGraphNode.realityKitSurfaceParamNodes.setter(a1, &one-time initialization token for realityKitHoverStateNodes, &static ShaderGraphNode.realityKitHoverStateNodes);
}

uint64_t static ShaderGraphNode.realityKitSurfaceParamNodes.setter(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (*a2 != -1)
    swift_once();
  swift_beginAccess();
  *a3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static ShaderGraphNode.realityKitHoverStateNodes.modify())()
{
  if (one-time initialization token for realityKitHoverStateNodes != -1)
    swift_once();
  swift_beginAccess();
  return XMLParserDelegate.StringNode.children.modify;
}

uint64_t one-time initialization function for realityKitParamGetterFuncs()
{
  uint64_t result;

  result = closure #1 in variable initialization expression of static ShaderGraphNode.realityKitParamGetterFuncs();
  static ShaderGraphNode.realityKitParamGetterFuncs = result;
  return result;
}

uint64_t closure #1 in variable initialization expression of static ShaderGraphNode.realityKitParamGetterFuncs()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (one-time initialization token for realityKitGeometryGetterFuncs != -1)
    swift_once();
  v0 = realityKitGeometryGetterFuncs;
  v1 = one-time initialization token for realityKitSurfaceGetterFuncs;
  swift_bridgeObjectRetain();
  if (v1 != -1)
    swift_once();
  v2 = swift_bridgeObjectRetain();
  v3 = specialized Set.union<A>(_:)(v2, v0);
  if (one-time initialization token for realityKitSurfaceParamNodes != -1)
    swift_once();
  swift_beginAccess();
  v4 = swift_bridgeObjectRetain();
  v5 = specialized Set.union<A>(_:)(v4, v3);
  if (one-time initialization token for realityKitBackgroundBlurNodes != -1)
    swift_once();
  swift_beginAccess();
  v6 = swift_bridgeObjectRetain();
  v7 = specialized Set.union<A>(_:)(v6, v5);
  if (one-time initialization token for realityKitLightSpillNodes != -1)
    swift_once();
  swift_beginAccess();
  v8 = swift_bridgeObjectRetain();
  v9 = specialized Set.union<A>(_:)(v8, v7);
  if (one-time initialization token for realityKitHoverStateNodes != -1)
    swift_once();
  swift_beginAccess();
  v10 = swift_bridgeObjectRetain();
  return specialized Set.union<A>(_:)(v10, v9);
}

double Graph.getArgument(name:type:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t inited;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  double result;
  __int128 v15;
  _OWORD v16[2];

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_245FBECD0;
  *(_QWORD *)(inited + 32) = 7632239;
  *(_QWORD *)(inited + 40) = 0xE300000000000000;
  *(_QWORD *)(inited + 48) = a3;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  v11 = v10 | 0x6000000000000000;
  v12 = *(_QWORD *)(v4 + 40);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v12, MEMORY[0x24BEE4AF8], inited, v11, v4 + 64, v4, (unint64_t *)&v15);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  v13 = v16[0];
  *a4 = v15;
  a4[1] = v13;
  result = *(double *)((char *)v16 + 9);
  *(_OWORD *)((char *)a4 + 25) = *(_OWORD *)((char *)v16 + 9);
  return result;
}

uint64_t Graph.insertGetTexture(_:textureAssignments:customUniformsType:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v5;
  void *v6;
  void *v10;
  uint64_t v11;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t result;
  __int128 v40;
  _OWORD *v41;
  __int128 v42;
  _OWORD v43[12];
  __int128 v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[8];
  __int128 v49;
  __int128 v50;
  _OWORD v51[2];
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58[3];
  uint64_t v59;

  if (!*(_QWORD *)(a3 + 16))
    goto LABEL_6;
  v10 = v6;
  v11 = v5;
  swift_bridgeObjectRetain();
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)a2);
  if ((v15 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi47_((uint64_t)&v42);
    *(_QWORD *)&v43[0] = 0;
    *((_QWORD *)&v43[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v43[0] = 0xD00000000000002CLL;
    *((_QWORD *)&v43[0] + 1) = 0x8000000245FCB3F0;
    v23._countAndFlagsBits = a1;
    v23._object = a2;
    String.append(_:)(v23);
    v26 = 39;
    v27 = 0xE100000000000000;
    goto LABEL_8;
  }
  v41 = a5;
  v16 = (uint64_t *)(*(_QWORD *)(a3 + 56) + 24 * v14);
  v17 = (void *)v16[1];
  v59 = *v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_245FBECD0;
  *(_QWORD *)(v18 + 32) = 7632239;
  *(_QWORD *)(v18 + 40) = 0xE300000000000000;
  *(_QWORD *)(v18 + 48) = a4;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = 12580;
  *(_QWORD *)(v19 + 24) = 0xE200000000000000;
  v20 = v19 | 0x6000000000000000;
  v21 = *(_QWORD *)(v11 + 40);
  swift_retain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v21, MEMORY[0x24BEE4AF8], v18, v20, v11 + 64, v11, &v45);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  ShaderGraphNode.out.getter((uint64_t)v48);
  if (!v10)
  {
    outlined init with take of NodePersonality(&v45, &v55);
    outlined release of NodePersonality(&v55);
    v54 = v46;
    outlined release of [Input]((uint64_t)&v54);
    v53 = v47;
    outlined release of [Input]((uint64_t)&v53);
    Output.getProperty(_:_:)(v11, v59, v17, &v50);
    swift_bridgeObjectRelease();
    swift_release();
    v52 = v49;
    result = outlined release of String((uint64_t)&v52);
    v40 = v51[0];
    *v41 = v50;
    v41[1] = v40;
    *(_OWORD *)((char *)v41 + 25) = *(_OWORD *)((char *)v51 + 9);
    return result;
  }

  outlined init with take of NodePersonality(&v45, v58);
  outlined release of NodePersonality(v58);
  v57 = v46;
  outlined release of [Input]((uint64_t)&v57);
  v56 = v47;
  outlined release of [Input]((uint64_t)&v56);
  v22 = v59;
  _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi47_((uint64_t)&v42);
  *(_QWORD *)&v43[0] = 0;
  *((_QWORD *)&v43[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(51);
  v24._countAndFlagsBits = 0xD00000000000002FLL;
  v24._object = (void *)0x8000000245FCB420;
  String.append(_:)(v24);
  v25._countAndFlagsBits = v22;
  v25._object = v17;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26 = 11815;
  v27 = 0xE200000000000000;
LABEL_8:
  String.append(_:)(*(Swift::String *)&v26);
  v28 = v43[0];
  outlined init with take of UserGraphError.ErrorType(&v42, (uint64_t)v43);
  v44 = v28;
  lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
  swift_allocError();
  *v29 = v43[0];
  v30 = v43[4];
  v31 = v43[2];
  v32 = v43[1];
  v29[3] = v43[3];
  v29[4] = v30;
  v29[1] = v32;
  v29[2] = v31;
  v33 = v43[8];
  v34 = v43[6];
  v35 = v43[5];
  v29[7] = v43[7];
  v29[8] = v33;
  v29[5] = v35;
  v29[6] = v34;
  v36 = v44;
  v37 = v43[10];
  v38 = v43[9];
  v29[11] = v43[11];
  v29[12] = v36;
  v29[9] = v38;
  v29[10] = v37;
  return swift_willThrow();
}

double Input.prependFunction(_:label:arguments:in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, _OWORD *a5@<X8>)
{
  uint64_t v5;
  double result;
  __int128 v8;
  __int128 v9;
  _OWORD v10[2];

  result = specialized Input.prependFunction(_:label:arguments:in:)(a1, a2, a3, a4, &v9);
  if (!v5)
  {
    v8 = v10[0];
    *a5 = v9;
    a5[1] = v8;
    result = *(double *)((char *)v10 + 9);
    *(_OWORD *)((char *)a5 + 25) = *(_OWORD *)((char *)v10 + 9);
  }
  return result;
}

double Output.appendUnaryFunction(_:resultType:in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  double result;
  __int128 v37;
  uint64_t v38;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  _OWORD v52[12];
  __int128 v53;
  _BYTE v54[41];
  _QWORD v55[5];
  char v56;
  uint64_t v57;
  uint64_t v58;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_245FBECD0;
  v38 = v5;
  v11 = *(_QWORD *)(v5 + 8);
  *(_QWORD *)(inited + 32) = 28265;
  v58 = inited + 32;
  *(_QWORD *)(inited + 40) = 0xE200000000000000;
  *(_QWORD *)(inited + 48) = v11;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  v12 = swift_initStackObject();
  *(_OWORD *)(v12 + 16) = xmmword_245FBECD0;
  *(_QWORD *)(v12 + 32) = 7632239;
  *(_QWORD *)(v12 + 40) = 0xE300000000000000;
  *(_QWORD *)(v12 + 48) = a3;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a1;
  *(_QWORD *)(v13 + 24) = a2;
  *(_QWORD *)(v13 + 32) = a3;
  v14 = v13 | 0x2000000000000000;
  v15 = *(_QWORD *)(a4 + 40);
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v15, inited, v12, v14, a4 + 64, a4, (unint64_t *)v54);
  v44 = *(_OWORD *)&v54[8];
  v40 = *(_QWORD *)v54;
  v42 = *(_QWORD *)&v54[32];
  v43 = *(_QWORD *)&v54[24];
  v41 = v54[40];
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_setDeallocating();
  swift_arrayDestroy();
  v16 = *(_QWORD *)(v44 + 16);
  if (v16)
  {
    v17 = (_QWORD *)(v44 + 80);
    while (1)
    {
      v19 = *(v17 - 6);
      v18 = *(v17 - 5);
      v21 = *(v17 - 4);
      v20 = *(v17 - 3);
      v22 = *(v17 - 2);
      v23 = *((_BYTE *)v17 - 8);
      v24 = *v17;
      if (v21 == 28265 && v20 == 0xE200000000000000)
        break;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_11;
      v17 += 7;
      if (!--v16)
        goto LABEL_9;
    }
    v20 = 0xE200000000000000;
LABEL_11:
    v55[0] = v19;
    v55[1] = v18;
    v55[2] = v21;
    v55[3] = v20;
    v55[4] = v22;
    v56 = v23;
    v57 = v24;
    swift_retain();
    swift_bridgeObjectRetain();
    Graph.connect(_:to:)(v38, (unint64_t)v55);
    swift_bridgeObjectRelease();
    swift_release();
    v37 = *(_OWORD *)&v54[16];
    *a5 = *(_OWORD *)v54;
    a5[1] = v37;
    result = *(double *)&v54[25];
    *(_OWORD *)((char *)a5 + 25) = *(_OWORD *)&v54[25];
  }
  else
  {
LABEL_9:
    v45 = v40;
    v46 = v44;
    v47 = v43;
    v48 = v42;
    v49 = v41;
    v50 = 28265;
    v51 = 0xE200000000000000;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v45);
    outlined init with take of UserGraphError.ErrorType((__int128 *)&v45, (uint64_t)v52);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v53 = 0uLL;
    swift_allocError();
    *v26 = v52[0];
    v27 = v52[4];
    v29 = v52[1];
    v28 = v52[2];
    v26[3] = v52[3];
    v26[4] = v27;
    v26[1] = v29;
    v26[2] = v28;
    v30 = v52[8];
    v32 = v52[5];
    v31 = v52[6];
    v26[7] = v52[7];
    v26[8] = v30;
    v26[5] = v32;
    v26[6] = v31;
    v33 = v53;
    v35 = v52[9];
    v34 = v52[10];
    v26[11] = v52[11];
    v26[12] = v33;
    v26[9] = v35;
    v26[10] = v34;
    swift_willThrow();
  }
  return result;
}

unint64_t specialized OrderedDictionary.subscript.modify(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;

  v5 = malloc(0x58uLL);
  *a1 = v5;
  v5[6] = a2;
  v5[7] = v2;
  v6 = specialized OrderedSet._find(_:)(a2, *(_QWORD *)v2, *(_QWORD **)(v2 + 8));
  v8 = v7;
  v5[8] = v6;
  *((_BYTE *)v5 + 80) = v9;
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  *((_OWORD *)v5 + 2) = 0u;
  if ((v9 & 1) != 0)
    goto LABEL_7;
  v11 = *(_QWORD *)(v2 + 16);
  v10 = (uint64_t *)(v2 + 16);
  result = specialized MutableCollection.swapAt(_:_:)(v6, *(_QWORD *)(v11 + 16) - 1);
  v13 = *v10;
  if (*(_QWORD *)(*v10 + 16))
  {
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v13);
      v13 = result;
    }
    v14 = *(_QWORD *)(v13 + 16);
    if (v14)
    {
      v15 = v14 - 1;
      v16 = v13 + 48 * v15;
      v17 = *(_QWORD *)(v16 + 48);
      v18 = *(_QWORD *)(v16 + 56);
      v19 = *(_OWORD *)(v16 + 64);
      v20 = *(_OWORD *)(v16 + 32);
      *(_QWORD *)(v13 + 16) = v15;
      *v10 = v13;
      outlined consume of Graph.Adjacent?(0, 0);
      *(_OWORD *)v5 = v20;
      v5[2] = v17;
      v5[3] = v18;
      *((_OWORD *)v5 + 2) = v19;
LABEL_7:
      v5[9] = v8;
      return (unint64_t)OrderedDictionary.subscript.modifyspecialized ;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void OrderedDictionary.subscript.modifyspecialized (uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  specialized $defer #1 <A, B>() in OrderedDictionary.subscript.modify((*a1)[8], (*a1)[10] & 1, v1, v1[7], v1[9], v1[6]);
  outlined consume of Graph.Adjacent?(*v1, v1[1]);
  free(v1);
}

unint64_t specialized OrderedDictionary.subscript.modify(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t result;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[2] = a2;
  v5[3] = v2;
  v7 = *v2;
  v6 = v2[1];
  v8 = v6 + 32;
  v9 = *(_QWORD *)(v6 + 16);
  if (*v2)
  {
    swift_retain();
    v10 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)a2, v8, v9, (_QWORD *)(v7 + 16), v7 + 32);
    v12 = v11;
    v14 = v13;
    swift_release();
    v5[1] = 0;
    v15 = (char *)(v5 + 1);
    *v5 = 0;
    if ((v12 & 1) == 0)
      goto LABEL_3;
LABEL_9:
    v25 = 1;
    goto LABEL_10;
  }
  v10 = specialized Collection<>.firstIndex(of:)(a2, v6 + 32, *(_QWORD *)(v6 + 16));
  v14 = 0;
  v5[1] = 0;
  v15 = (char *)(v5 + 1);
  *v5 = 0;
  if ((v26 & 1) != 0)
    goto LABEL_9;
LABEL_3:
  v17 = v2[2];
  v16 = v2 + 2;
  result = specialized MutableCollection.swapAt(_:_:)(v10, *(_QWORD *)(v17 + 16) - 1);
  v19 = (_QWORD *)*v16;
  if (*(_QWORD *)(*v16 + 16))
  {
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v19);
      v19 = (_QWORD *)result;
    }
    v20 = v19[2];
    if (v20)
    {
      v21 = v20 - 1;
      v22 = &v19[2 * v21];
      v23 = v22[4];
      v24 = v22[5];
      v19[2] = v21;
      *v16 = v19;
      outlined consume of OrderedSet<Input>?(0, v5[1]);
      v25 = 0;
      *v5 = v23;
      v5[1] = v24;
LABEL_10:
      v5[5] = v10;
      v5[6] = v14;
      *((_BYTE *)v5 + 56) = v25;
      v5[4] = v15;
      return (unint64_t)OrderedDictionary.subscript.modifyspecialized ;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void OrderedDictionary.subscript.modifyspecialized (uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v2;

  v1 = *a1;
  v2 = *(uint64_t **)(*a1 + 32);
  specialized $defer #1 <A, B>() in OrderedDictionary.subscript.modify(*(_QWORD *)(*a1 + 40), *(_BYTE *)(v1 + 56), (uint64_t *)v1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 48), *(__int128 **)(v1 + 16));
  outlined consume of OrderedSet<Input>?(*(_QWORD *)v1, *v2);
  free((void *)v1);
}

unint64_t specialized OrderedSet._appendNew(_:in:)(uint64_t a1, uint64_t a2)
{
  return specialized OrderedSet._appendNew(_:in:)(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(uint64_t, int64_t, _QWORD, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  unint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[24];

  v3 = v2;
  outlined init with copy of WeakBox<SGEdge>(a1, (uint64_t)v18);
  v7 = v2[1];
  v5 = v2 + 1;
  v6 = v7;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v5 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
    v6 = *v5;
  }
  v10 = *(_QWORD *)(v6 + 16);
  v9 = *(_QWORD *)(v6 + 24);
  if (v10 >= v9 >> 1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
    v6 = *v5;
  }
  *(_QWORD *)(v6 + 16) = v10 + 1;
  result = outlined init with take of MetalFunctionNode?((uint64_t)v18, v6 + 8 * v10 + 32, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
  v3[1] = v6;
  v12 = *(_QWORD *)(v6 + 16);
  v13 = *v3;
  if (*v3)
  {
    swift_beginAccess();
    if (specialized static _HashTable.maximumCapacity(forScale:)(*(_QWORD *)(v13 + 16) & 0x3FLL) >= v12)
    {
      result = swift_isUniquelyReferenced_native();
      v14 = *v3;
      if (!(_DWORD)result)
      {
        if (!v14)
        {
LABEL_16:
          __break(1u);
          return result;
        }
        v14 = _HashTable.copy()((_QWORD *)*v3);
        result = swift_release();
        *v3 = v14;
      }
      if (v14)
      {
        v16 = *(_QWORD *)(v14 + 16);
        v15 = (_QWORD *)(v14 + 16);
        v17 = *(_QWORD *)(*v5 + 16) + ~((uint64_t)v15[1] >> 6);
        return _HashTable.UnsafeHandle.subscript.setter((-1 << v16) ^ ~(((v17 >> 63) & ~(-1 << v16)) + v17), a2, v15, (uint64_t)(v15 + 2));
      }
      __break(1u);
      goto LABEL_16;
    }
  }
  else if ((unint64_t)v12 < 0x10)
  {
    return result;
  }
  return specialized OrderedSet._regenerateHashTable()((uint64_t (*)(uint64_t, int64_t, _QWORD, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v3 = v2;
  v8 = v2[1];
  v6 = v2 + 1;
  v7 = v8;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v6 = v8;
  if ((result & 1) == 0)
  {
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v7 + 16) + 1, 1);
    v7 = *v6;
  }
  v11 = *(_QWORD *)(v7 + 16);
  v10 = *(_QWORD *)(v7 + 24);
  if (v11 >= v10 >> 1)
  {
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
    v7 = *v6;
  }
  *(_QWORD *)(v7 + 16) = v11 + 1;
  *(_QWORD *)(v7 + 8 * v11 + 32) = a1;
  v3[1] = v7;
  v12 = *v3;
  if (*v3)
  {
    swift_beginAccess();
    if (specialized static _HashTable.maximumCapacity(forScale:)(*(_QWORD *)(v12 + 16) & 0x3FLL) > (uint64_t)v11)
    {
      result = swift_isUniquelyReferenced_native();
      v13 = *v3;
      if (!(_DWORD)result)
      {
        if (!v13)
        {
LABEL_16:
          __break(1u);
          return result;
        }
        v13 = _HashTable.copy()((_QWORD *)*v3);
        result = swift_release();
        *v3 = v13;
      }
      if (v13)
      {
        v15 = *(_QWORD *)(v13 + 16);
        v14 = (_QWORD *)(v13 + 16);
        v16 = *(_QWORD *)(*v6 + 16) + ~((uint64_t)v14[1] >> 6);
        return _HashTable.UnsafeHandle.subscript.setter((-1 << v15) ^ ~(((v16 >> 63) & ~(-1 << v15)) + v16), a2, v14, (uint64_t)(v14 + 2));
      }
      __break(1u);
      goto LABEL_16;
    }
  }
  else if (v11 < 0xF)
  {
    return result;
  }
  return specialized OrderedSet._regenerateHashTable()((uint64_t (*)(uint64_t, int64_t, _QWORD, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

{
  return specialized OrderedSet._appendNew(_:in:)(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(uint64_t, int64_t, _QWORD, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

unint64_t specialized OrderedSet._appendNew(_:in:)(__int128 *a1, uint64_t a2)
{
  return specialized OrderedSet._appendNew(_:in:)(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(uint64_t, int64_t, _QWORD, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

{
  return specialized OrderedSet._appendNew(_:in:)(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(uint64_t, int64_t, _QWORD, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

unint64_t specialized OrderedSet._appendNew(_:in:)(__int128 *a1, uint64_t a2, uint64_t (*a3)(BOOL, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, int64_t, _QWORD, uint64_t))
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;

  v7 = v4;
  v26 = a1[1];
  v12 = v4[1];
  v10 = v4 + 1;
  v11 = v12;
  swift_retain();
  outlined retain of String((uint64_t)&v26);
  result = swift_isUniquelyReferenced_nonNull_native();
  *v10 = v12;
  if ((result & 1) == 0)
  {
    result = a3(0, *(_QWORD *)(v11 + 16) + 1, 1);
    v11 = *v10;
  }
  v15 = *(_QWORD *)(v11 + 16);
  v14 = *(_QWORD *)(v11 + 24);
  if (v15 >= v14 >> 1)
  {
    result = a3(v14 > 1, v15 + 1, 1);
    v11 = *v10;
  }
  *(_QWORD *)(v11 + 16) = v15 + 1;
  v16 = v11 + 56 * v15;
  v17 = *a1;
  v18 = a1[1];
  v19 = a1[2];
  *(_QWORD *)(v16 + 80) = *((_QWORD *)a1 + 6);
  *(_OWORD *)(v16 + 48) = v18;
  *(_OWORD *)(v16 + 64) = v19;
  *(_OWORD *)(v16 + 32) = v17;
  v7[1] = v11;
  v20 = *(_QWORD *)(v11 + 16);
  v21 = *v7;
  if (*v7)
  {
    swift_beginAccess();
    if (specialized static _HashTable.maximumCapacity(forScale:)(*(_QWORD *)(v21 + 16) & 0x3FLL) >= v20)
    {
      result = swift_isUniquelyReferenced_native();
      v22 = *v7;
      if (!(_DWORD)result)
      {
        if (!v22)
        {
LABEL_16:
          __break(1u);
          return result;
        }
        v22 = _HashTable.copy()((_QWORD *)*v7);
        result = swift_release();
        *v7 = v22;
      }
      if (v22)
      {
        v24 = *(_QWORD *)(v22 + 16);
        v23 = (_QWORD *)(v22 + 16);
        v25 = *(_QWORD *)(*v10 + 16) + ~((uint64_t)v23[1] >> 6);
        return _HashTable.UnsafeHandle.subscript.setter((-1 << v24) ^ ~(((v25 >> 63) & ~(-1 << v24)) + v25), a2, v23, (uint64_t)(v23 + 2));
      }
      __break(1u);
      goto LABEL_16;
    }
  }
  else if ((unint64_t)v20 < 0x10)
  {
    return result;
  }
  return specialized OrderedSet._regenerateHashTable()(a4);
}

unint64_t specialized OrderedSet._appendNew(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = v3;
  v10 = v3[1];
  v8 = v3 + 1;
  v9 = v10;
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  *v8 = v10;
  if ((result & 1) == 0)
  {
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1);
    v9 = *v8;
  }
  v13 = *(_QWORD *)(v9 + 16);
  v12 = *(_QWORD *)(v9 + 24);
  if (v13 >= v12 >> 1)
  {
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
    v9 = *v8;
  }
  *(_QWORD *)(v9 + 16) = v13 + 1;
  v14 = v9 + 16 * v13;
  *(_QWORD *)(v14 + 32) = a1;
  *(_QWORD *)(v14 + 40) = a2;
  v4[1] = v9;
  v15 = *(_QWORD *)(v9 + 16);
  v16 = *v4;
  if (*v4)
  {
    swift_beginAccess();
    if (specialized static _HashTable.maximumCapacity(forScale:)(*(_QWORD *)(v16 + 16) & 0x3FLL) >= v15)
    {
      result = swift_isUniquelyReferenced_native();
      v17 = *v4;
      if (!(_DWORD)result)
      {
        if (!v17)
        {
LABEL_16:
          __break(1u);
          return result;
        }
        v17 = _HashTable.copy()((_QWORD *)*v4);
        result = swift_release();
        *v4 = v17;
      }
      if (v17)
      {
        v19 = *(_QWORD *)(v17 + 16);
        v18 = (_QWORD *)(v17 + 16);
        v20 = *(_QWORD *)(*v8 + 16) + ~((uint64_t)v18[1] >> 6);
        return _HashTable.UnsafeHandle.subscript.setter((-1 << v19) ^ ~(((v20 >> 63) & ~(-1 << v19)) + v20), a3, v18, (uint64_t)(v18 + 2));
      }
      __break(1u);
      goto LABEL_16;
    }
  }
  else if ((unint64_t)v15 < 0x10)
  {
    return result;
  }
  return specialized OrderedSet._regenerateHashTable()((uint64_t (*)(uint64_t, int64_t, _QWORD, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

unint64_t specialized OrderedSet._appendNew(_:in:)(void *a1, uint64_t a2)
{
  return specialized OrderedSet._appendNew(_:in:)(a1, a2, (uint64_t (*)(uint64_t, int64_t, _QWORD, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

unint64_t specialized OrderedSet._appendNew(_:in:)(void *a1, uint64_t a2, uint64_t (*a3)(uint64_t, int64_t, _QWORD, uint64_t))
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t *v7;
  id v8;
  unint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = v3;
  v7 = v3 + 1;
  v8 = a1;
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  result = specialized ContiguousArray._endMutation()();
  v10 = *v5;
  v11 = *(_QWORD *)(v5[1] + 16);
  if (*v5)
  {
    swift_beginAccess();
    if (specialized static _HashTable.maximumCapacity(forScale:)(*(_QWORD *)(v10 + 16) & 0x3FLL) >= v11)
    {
      result = swift_isUniquelyReferenced_native();
      v12 = *v5;
      if (!(_DWORD)result)
      {
        if (!v12)
        {
LABEL_12:
          __break(1u);
          return result;
        }
        v12 = _HashTable.copy()((_QWORD *)*v5);
        result = swift_release();
        *v5 = v12;
      }
      if (v12)
      {
        v14 = *(_QWORD *)(v12 + 16);
        v13 = (_QWORD *)(v12 + 16);
        v15 = *(_QWORD *)(*v7 + 16) + ~((uint64_t)v13[1] >> 6);
        return _HashTable.UnsafeHandle.subscript.setter((-1 << v14) ^ ~(((v15 >> 63) & ~(-1 << v14)) + v15), a2, v13, (uint64_t)(v13 + 2));
      }
      __break(1u);
      goto LABEL_12;
    }
  }
  else if ((unint64_t)v11 < 0x10)
  {
    return result;
  }
  return specialized OrderedSet._regenerateHashTable()(a3);
}

unint64_t specialized OrderedSet._appendNew(_:in:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v5 = v4;
  v12 = v4[1];
  v10 = v4 + 1;
  v11 = v12;
  outlined copy of TextureSource();
  result = swift_isUniquelyReferenced_nonNull_native();
  *v10 = v12;
  if ((result & 1) == 0)
  {
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v11 + 16) + 1, 1);
    v11 = *v10;
  }
  v15 = *(_QWORD *)(v11 + 16);
  v14 = *(_QWORD *)(v11 + 24);
  if (v15 >= v14 >> 1)
  {
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
    v11 = *v10;
  }
  *(_QWORD *)(v11 + 16) = v15 + 1;
  v16 = v11 + 24 * v15;
  *(_QWORD *)(v16 + 32) = a1;
  *(_QWORD *)(v16 + 40) = a2;
  *(_BYTE *)(v16 + 48) = a3 & 1;
  v5[1] = v11;
  v17 = *(_QWORD *)(v11 + 16);
  v18 = *v5;
  if (*v5)
  {
    swift_beginAccess();
    if (specialized static _HashTable.maximumCapacity(forScale:)(*(_QWORD *)(v18 + 16) & 0x3FLL) >= v17)
    {
      result = swift_isUniquelyReferenced_native();
      v19 = *v5;
      if (!(_DWORD)result)
      {
        if (!v19)
        {
LABEL_16:
          __break(1u);
          return result;
        }
        v19 = _HashTable.copy()((_QWORD *)*v5);
        result = swift_release();
        *v5 = v19;
      }
      if (v19)
      {
        v21 = *(_QWORD *)(v19 + 16);
        v20 = (_QWORD *)(v19 + 16);
        v22 = *(_QWORD *)(*v10 + 16) + ~((uint64_t)v20[1] >> 6);
        return _HashTable.UnsafeHandle.subscript.setter((-1 << v21) ^ ~(((v22 >> 63) & ~(-1 << v21)) + v22), a4, v20, (uint64_t)(v20 + 2));
      }
      __break(1u);
      goto LABEL_16;
    }
  }
  else if ((unint64_t)v17 < 0x10)
  {
    return result;
  }
  return specialized OrderedSet._regenerateHashTable()((uint64_t (*)(uint64_t, int64_t, _QWORD, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

unint64_t specialized OrderedSet._appendNew(_:in:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(BOOL, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, int64_t, _QWORD, uint64_t))
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v7 = v4;
  v12 = v4[1];
  v10 = v4 + 1;
  v11 = v12;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v10 = v12;
  if ((result & 1) == 0)
  {
    result = a3(0, *(_QWORD *)(v11 + 16) + 1, 1);
    v11 = *v10;
  }
  v15 = *(_QWORD *)(v11 + 16);
  v14 = *(_QWORD *)(v11 + 24);
  if (v15 >= v14 >> 1)
  {
    result = a3(v14 > 1, v15 + 1, 1);
    v11 = *v10;
  }
  *(_QWORD *)(v11 + 16) = v15 + 1;
  *(_QWORD *)(v11 + 8 * v15 + 32) = a1;
  v7[1] = v11;
  v16 = *(_QWORD *)(v11 + 16);
  v17 = *v7;
  if (*v7)
  {
    swift_beginAccess();
    if (specialized static _HashTable.maximumCapacity(forScale:)(*(_QWORD *)(v17 + 16) & 0x3FLL) >= v16)
    {
      result = swift_isUniquelyReferenced_native();
      v18 = *v7;
      if (!(_DWORD)result)
      {
        if (!v18)
        {
LABEL_16:
          __break(1u);
          return result;
        }
        v18 = _HashTable.copy()((_QWORD *)*v7);
        result = swift_release();
        *v7 = v18;
      }
      if (v18)
      {
        v20 = *(_QWORD *)(v18 + 16);
        v19 = (_QWORD *)(v18 + 16);
        v21 = *(_QWORD *)(*v10 + 16) + ~((uint64_t)v19[1] >> 6);
        return _HashTable.UnsafeHandle.subscript.setter((-1 << v20) ^ ~(((v21 >> 63) & ~(-1 << v20)) + v21), a2, v19, (uint64_t)(v19 + 2));
      }
      __break(1u);
      goto LABEL_16;
    }
  }
  else if ((unint64_t)v16 < 0x10)
  {
    return result;
  }
  return specialized OrderedSet._regenerateHashTable()(a4);
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  char v13;
  char v14;
  char v15;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a3)
  {
    v4 = 0;
    v5 = *a1;
    v6 = (uint64_t *)(a2 + 24);
    v18 = *a1;
    v19 = a3;
    do
    {
      if (*(v6 - 3) == v5)
      {
        v7 = *(v6 - 1);
        v8 = *v6;
        v20 = v6[1];
        v9 = *((_BYTE *)v6 + 16);
        v10 = v6[3];
        v11 = a1[1];
        v12 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*(v6 - 2) + 128);
        swift_retain();
        swift_bridgeObjectRetain();
        if ((v12(v11) & 1) != 0)
        {
          v17 = v9;
          if (v7 == a1[2] && v8 == a1[3])
          {
            swift_bridgeObjectRelease();
            swift_release();
            v5 = v18;
            a3 = v19;
            v13 = v17;
          }
          else
          {
            v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_release();
            v5 = v18;
            a3 = v19;
            v13 = v17;
            if ((v14 & 1) == 0)
              goto LABEL_4;
          }
          v15 = *((_BYTE *)a1 + 40);
          if ((v13 & 1) != 0)
          {
            if (!*((_BYTE *)a1 + 40))
              goto LABEL_4;
          }
          else
          {
            if (v20 != a1[4])
              v15 = 1;
            if ((v15 & 1) != 0)
              goto LABEL_4;
          }
          if (v10 == a1[6])
            return v4;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_release();
          v5 = v18;
          a3 = v19;
        }
      }
LABEL_4:
      v6 += 7;
      ++v4;
    }
    while (a3 != v4);
  }
  return 0;
}

void specialized Collection<>.firstIndex(of:)(uint64_t a1, unint64_t a2)
{
  specialized Collection<>.firstIndex(of:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for SGEdge);
}

{
  specialized Collection<>.firstIndex(of:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for SGNode);
}

void specialized Collection<>.firstIndex(of:)(uint64_t a1, unint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;
  id v6;
  void *v7;
  char v8;
  uint64_t i;
  id v10;
  void *v11;
  char v12;
  unint64_t v13;

  if (a2 >> 62)
    goto LABEL_20;
  v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v5)
  {
    while (1)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        v6 = (id)MEMORY[0x24954B748](0, a2);
      }
      else
      {
        if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        v6 = *(id *)(a2 + 32);
      }
      v7 = v6;
      a3 = (uint64_t (*)(_QWORD))a3(0);
      v8 = static NSObject.== infix(_:_:)();

      if ((v8 & 1) == 0)
      {
        for (i = 0; ; ++i)
        {
          v13 = i + 1;
          if (__OFADD__(i, 1))
            break;
          if (v13 == v5)
            return;
          if ((a2 & 0xC000000000000001) != 0)
          {
            v10 = (id)MEMORY[0x24954B748](i + 1, a2);
          }
          else
          {
            if ((v13 & 0x8000000000000000) != 0)
              goto LABEL_18;
            if (v13 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_19;
            v10 = *(id *)(a2 + 32 + 8 * v13);
          }
          v11 = v10;
          v12 = static NSObject.== infix(_:_:)();

          if ((v12 & 1) != 0)
            return;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        swift_bridgeObjectRetain();
        v5 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v5)
          continue;
      }
      return;
    }
  }
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == a1)
    return 0;
  result = 0;
  v5 = v2 - 1;
  while (v5 != result)
  {
    v6 = *(_QWORD *)(a2 + 40 + 8 * result++);
    if (v6 == a1)
      return result;
  }
  return 0;
}

int64_t specialized $defer #1 <A, B>() in OrderedDictionary.subscript.modify(int64_t result, char a2, uint64_t *a3, uint64_t a4, uint64_t a5, __int128 *a6)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37[8];
  __int128 v38;
  __int128 v39;

  v8 = *a3;
  v9 = a3[1];
  if ((a2 & 1) != 0)
  {
    if (!v9)
      return result;
    swift_retain();
    swift_retain();
    specialized OrderedSet._appendNew(_:in:)(a6, a5, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(uint64_t, int64_t, _QWORD, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
    v20 = *(_QWORD *)(a4 + 16);
    v18 = (uint64_t *)(a4 + 16);
    v19 = v20;
    swift_retain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v18 = v20;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1);
      v19 = *v18;
    }
    v23 = *(_QWORD *)(v19 + 16);
    v22 = *(_QWORD *)(v19 + 24);
    if (v23 >= v22 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
      v19 = *v18;
    }
    *(_QWORD *)(v19 + 16) = v23 + 1;
    v24 = v19 + 16 * v23;
    *(_QWORD *)(v24 + 32) = v8;
    *(_QWORD *)(v24 + 40) = v9;
    goto LABEL_14;
  }
  v10 = result;
  if (v9)
  {
    v11 = (uint64_t *)(a4 + 16);
    v12 = *(_QWORD *)(a4 + 16);
    outlined copy of OrderedSet<Input>?(*a3, a3[1]);
    swift_retain();
    swift_retain();
    v13 = swift_isUniquelyReferenced_nonNull_native();
    *v11 = v12;
    if ((v13 & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v12 + 16) + 1, 1);
      v12 = *v11;
    }
    v15 = *(_QWORD *)(v12 + 16);
    v14 = *(_QWORD *)(v12 + 24);
    if (v15 >= v14 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      v12 = *v11;
    }
    *(_QWORD *)(v12 + 16) = v15 + 1;
    v16 = v12 + 16 * v15;
    *(_QWORD *)(v16 + 32) = v8;
    *(_QWORD *)(v16 + 40) = v9;
    specialized MutableCollection.swapAt(_:_:)(v10, *(_QWORD *)(*v11 + 16) - 1);
LABEL_14:
    swift_release();
    return swift_release();
  }
  v25 = (uint64_t *)(a4 + 16);
  if (*(_QWORD *)(*(_QWORD *)(a4 + 16) + 16) > result)
  {
    v26 = specialized ContiguousArray.remove(at:)(result);
    v28 = v27;
    v29 = *v25;
    swift_retain();
    swift_retain();
    v30 = swift_isUniquelyReferenced_nonNull_native();
    *v25 = v29;
    if ((v30 & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v29 + 16) + 1, 1);
      v29 = *v25;
    }
    v31 = *(_QWORD *)(v29 + 16);
    v32 = *(_QWORD *)(v29 + 24);
    v33 = v31 + 1;
    if (v31 >= v32 >> 1)
    {
      v35 = v31 + 1;
      v36 = v31;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v31 + 1, 1);
      v31 = v36;
      v33 = v35;
      v29 = *v25;
    }
    *(_QWORD *)(v29 + 16) = v33;
    v34 = v29 + 16 * v31;
    *(_QWORD *)(v34 + 32) = v26;
    *(_QWORD *)(v34 + 40) = v28;
    swift_release();
    swift_release();
  }
  specialized OrderedSet._removeExistingMember(at:in:)(v10, a5, (uint64_t)v37);
  swift_release();
  v39 = v38;
  return outlined release of String((uint64_t)&v39);
}

int64_t specialized $defer #1 <A, B>() in OrderedDictionary.subscript.modify(int64_t result, char a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  __int128 v40;
  _BYTE v41[32];
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  _BYTE v45[8];
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  _BYTE v49[8];

  v8 = *a3;
  v9 = a3[1];
  v10 = a3[2];
  v11 = a3[3];
  v12 = a3[4];
  v13 = a3[5];
  if ((a2 & 1) != 0)
  {
    if (!v9)
      return result;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    specialized OrderedSet._appendNew(_:in:)(a6, a5, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(uint64_t, int64_t, _QWORD, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
    v24 = *(_QWORD *)(a4 + 16);
    v22 = (uint64_t *)(a4 + 16);
    v23 = v24;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v22 = v24;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v23 + 16) + 1, 1);
      v23 = *v22;
    }
    v27 = *(_QWORD *)(v23 + 16);
    v26 = *(_QWORD *)(v23 + 24);
    if (v27 >= v26 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
      v23 = *v22;
    }
    *(_QWORD *)(v23 + 16) = v27 + 1;
    v28 = (_QWORD *)(v23 + 48 * v27);
    v28[4] = v8;
    v28[5] = v9;
    v28[6] = v10;
    v28[7] = v11;
    v28[8] = v12;
    v28[9] = v13;
    goto LABEL_14;
  }
  v14 = result;
  if (v9)
  {
    v15 = (uint64_t *)(a4 + 16);
    v16 = *(_QWORD *)(a4 + 16);
    outlined copy of Graph.Adjacent?(*a3, a3[1]);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v17 = swift_isUniquelyReferenced_nonNull_native();
    *v15 = v16;
    v39 = v14;
    if ((v17 & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v16 + 16) + 1, 1);
      v16 = *v15;
    }
    v19 = *(_QWORD *)(v16 + 16);
    v18 = *(_QWORD *)(v16 + 24);
    if (v19 >= v18 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
      v16 = *v15;
    }
    *(_QWORD *)(v16 + 16) = v19 + 1;
    v20 = (_QWORD *)(v16 + 48 * v19);
    v20[4] = v8;
    v20[5] = v9;
    v20[6] = v10;
    v20[7] = v11;
    v20[8] = v12;
    v20[9] = v13;
    specialized MutableCollection.swapAt(_:_:)(v39, *(_QWORD *)(*v15 + 16) - 1);
LABEL_14:
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  v29 = (uint64_t *)(a4 + 16);
  if (*(_QWORD *)(*(_QWORD *)(a4 + 16) + 16) > result)
  {
    v30 = result;
    specialized ContiguousArray.remove(at:)(result, (uint64_t)&v40);
    v47 = v40;
    v31 = *(_QWORD *)&v41[24];
    v46 = *(_QWORD *)v41;
    outlined init with take of MetalFunctionNode?((uint64_t)&v47, (uint64_t)v49, &demangling cache variable for type metadata for _HashTable.Storage?);
    v48 = *((_QWORD *)&v47 + 1);
    v43 = *(_OWORD *)&v41[8];
    v42 = v31;
    outlined init with take of MetalFunctionNode?((uint64_t)&v43, (uint64_t)v45, &demangling cache variable for type metadata for _HashTable.Storage?);
    v44 = *((_QWORD *)&v43 + 1);
    v32 = *v29;
    outlined retain of _HashTable.Storage?((uint64_t)v49);
    outlined retain of _HashTable.Storage?((uint64_t)&v48);
    outlined retain of _HashTable.Storage?((uint64_t)&v46);
    outlined retain of _HashTable.Storage?((uint64_t)v45);
    outlined retain of _HashTable.Storage?((uint64_t)&v44);
    outlined retain of _HashTable.Storage?((uint64_t)&v42);
    v33 = swift_isUniquelyReferenced_nonNull_native();
    *v29 = v32;
    if ((v33 & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v32 + 16) + 1, 1);
      v32 = *v29;
    }
    v35 = *(_QWORD *)(v32 + 16);
    v34 = *(_QWORD *)(v32 + 24);
    if (v35 >= v34 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
      v32 = *v29;
    }
    *(_QWORD *)(v32 + 16) = v35 + 1;
    v36 = (_OWORD *)(v32 + 48 * v35);
    v37 = v40;
    v38 = *(_OWORD *)&v41[16];
    v36[3] = *(_OWORD *)v41;
    v36[4] = v38;
    v36[2] = v37;
    outlined release of _HashTable.Storage?((uint64_t)v49);
    outlined release of _HashTable.Storage?((uint64_t)&v48);
    outlined release of _HashTable.Storage?((uint64_t)&v46);
    outlined release of _HashTable.Storage?((uint64_t)v45);
    outlined release of _HashTable.Storage?((uint64_t)&v44);
    outlined release of _HashTable.Storage?((uint64_t)&v42);
    v14 = v30;
  }
  return specialized OrderedSet._removeExistingMember(at:in:)(v14, a5);
}

uint64_t specialized static Array._adoptStorage(_:count:)(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = 2 * a2;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
  JUMPOUT(0x24954BAD8);
}

uint64_t specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v5;
  v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
      return result;
    v7 = 1;
  }
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1)
    v9 = a1;
  else
    v9 = v8;
  result = MEMORY[0x24954B754](v7, v9, a2 & 1, v5);
  *v2 = result;
  return result;
}

void (*specialized Array.subscript.read(void (**a1)(void **a1), unint64_t a2, uint64_t a3))(void **a1)
{
  void (*result)(void **);
  void (*v7)(void **);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  result = (void (*)(void **))malloc(0x38uLL);
  *a1 = result;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a3 + 16) > a2)
  {
    v7 = result;
    v8 = a3 + 56 * a2;
    v10 = *(_QWORD *)(v8 + 32);
    v9 = *(_QWORD *)(v8 + 40);
    v11 = *(_QWORD *)(v8 + 48);
    v12 = *(_QWORD *)(v8 + 56);
    v13 = *(_QWORD *)(v8 + 64);
    v14 = *(_BYTE *)(v8 + 72);
    v15 = *(_QWORD *)(v8 + 80);
    *(_QWORD *)v7 = v10;
    *((_QWORD *)v7 + 1) = v9;
    *((_QWORD *)v7 + 2) = v11;
    *((_QWORD *)v7 + 3) = v12;
    *((_QWORD *)v7 + 4) = v13;
    *((_BYTE *)v7 + 40) = v14;
    *((_QWORD *)v7 + 6) = v15;
    swift_retain();
    swift_bridgeObjectRetain();
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void Array.subscript.readspecialized (void **a1)
{
  void *v1;

  v1 = *a1;
  swift_release();
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t v5;

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a3 + 16) > a2)
  {
    v3 = result;
    v4 = a3 + 16 * a2;
    v5 = *(_QWORD *)(v4 + 40);
    *(_QWORD *)v3 = *(_QWORD *)(v4 + 32);
    *((_QWORD *)v3 + 1) = v5;
    swift_bridgeObjectRetain();
    return destroy for IOAttachment;
  }
  __break(1u);
  return result;
}

{
  uint64_t (*v3)();
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x24954B748](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x24954B748](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_unknownObjectRetain();
LABEL_5:
    *v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x24954B748](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x24954B748](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_unknownObjectRetain();
LABEL_5:
    *v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x24954B748](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void (*specialized Array.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x24954B748](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void Array.subscript.readspecialized (id *a1)
{

}

uint64_t Array.subscript.readspecialized ()
{
  return swift_unknownObjectRelease();
}

{
  return swift_release();
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v18 = a4;
    v7 = (uint64_t *)(result + 80);
    while (1)
    {
      v8 = *(v7 - 5);
      v20 = *(v7 - 6);
      v9 = *(v7 - 4);
      v10 = *(v7 - 3);
      v19 = *(v7 - 2);
      v11 = *((unsigned __int8 *)v7 - 8);
      v12 = *v7;
      if (v9 == a2 && v10 == a3)
        break;
      v14 = a2;
      v15 = a3;
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0)
        goto LABEL_12;
      v7 += 7;
      --v4;
      a3 = v15;
      a2 = v14;
      if (!v4)
      {
        v16 = 0;
        v9 = 0;
        v10 = 0;
        v17 = 0;
        v11 = 0;
        v12 = 0;
        a4 = v18;
        goto LABEL_13;
      }
    }
    v9 = a2;
    v10 = a3;
LABEL_12:
    v4 = v8;
    swift_retain();
    result = swift_bridgeObjectRetain();
    a4 = v18;
    v16 = v20;
    v17 = v19;
  }
  else
  {
    v16 = 0;
    v9 = 0;
    v10 = 0;
    v17 = 0;
    v11 = 0;
    v12 = 0;
  }
LABEL_13:
  *a4 = v16;
  a4[1] = v4;
  a4[2] = v9;
  a4[3] = v10;
  a4[4] = v17;
  a4[5] = v11;
  a4[6] = v12;
  return result;
}

{
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v17 = a4;
    v7 = (uint64_t *)(result + 72);
    while (1)
    {
      v8 = *(v7 - 5);
      v9 = *(v7 - 4);
      v11 = *(v7 - 3);
      v10 = *(v7 - 2);
      v18 = *((unsigned __int8 *)v7 - 8);
      v12 = *v7;
      if (v8 == a2 && v9 == a3)
        break;
      v14 = a2;
      v15 = a3;
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0)
        goto LABEL_12;
      v7 += 6;
      --v4;
      a3 = v15;
      a2 = v14;
      if (!v4)
      {
        v8 = 0;
        v9 = 0;
        v11 = 0;
        v10 = 0;
        v16 = 0;
        v12 = 0;
        a4 = v17;
        goto LABEL_13;
      }
    }
    v8 = a2;
    v9 = a3;
LABEL_12:
    swift_bridgeObjectRetain();
    swift_retain();
    result = swift_bridgeObjectRetain();
    a4 = v17;
    v16 = v18;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v11 = 0;
    v10 = 0;
    v16 = 0;
    v12 = 0;
  }
LABEL_13:
  *a4 = v8;
  a4[1] = v9;
  a4[2] = v11;
  a4[3] = v10;
  a4[4] = v16;
  a4[5] = v12;
  return result;
}

unint64_t specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _BYTE v41[72];

  v1 = result;
  v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v5)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MaterialXTarget>);
      result = static _SetStorage.allocate(capacity:)();
      v3 = result;
      if (!v2)
        goto LABEL_4;
LABEL_8:
      swift_bridgeObjectRetain();
      v4 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v4)
        return v3;
      goto LABEL_9;
    }
  }
  else if (*(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v3 = MEMORY[0x24BEE4B08];
  if (v2)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return v3;
LABEL_9:
  v6 = v3 + 56;
  v40 = v4;
  if ((v1 & 0xC000000000000001) != 0)
  {
    v7 = 0;
    while (1)
    {
      while (1)
      {
        result = MEMORY[0x24954B748](v7, v1);
        v8 = __OFADD__(v7++, 1);
        if (v8)
        {
          __break(1u);
          goto LABEL_35;
        }
        v9 = (_QWORD *)result;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v10 = v9[4];
        swift_retain();
        specialized Optional<A>.hash(into:)((uint64_t)v41, v10);
        swift_release();
        result = Hasher._finalize()();
        v11 = -1 << *(_BYTE *)(v3 + 32);
        v12 = result & ~v11;
        v13 = v12 >> 6;
        v14 = *(_QWORD *)(v6 + 8 * (v12 >> 6));
        v15 = 1 << v12;
        if (((1 << v12) & v14) != 0)
          break;
LABEL_19:
        *(_QWORD *)(v6 + 8 * v13) = v15 | v14;
        *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v12) = v9;
        v21 = *(_QWORD *)(v3 + 16);
        v8 = __OFADD__(v21, 1);
        v22 = v21 + 1;
        if (v8)
          goto LABEL_36;
        *(_QWORD *)(v3 + 16) = v22;
        if (v7 == v40)
          return v3;
      }
      v16 = (_QWORD *)swift_retain();
      v17 = specialized static MaterialXTarget.== infix(_:_:)(v16, v9);
      result = swift_release();
      if (!v17)
      {
        v18 = ~v11;
        do
        {
          v12 = (v12 + 1) & v18;
          v13 = v12 >> 6;
          v14 = *(_QWORD *)(v6 + 8 * (v12 >> 6));
          v15 = 1 << v12;
          if ((v14 & (1 << v12)) == 0)
            goto LABEL_19;
          v19 = (_QWORD *)swift_retain();
          v20 = specialized static MaterialXTarget.== infix(_:_:)(v19, v9);
          result = swift_release();
        }
        while (!v20);
      }
      swift_unknownObjectRelease();
      if (v7 == v40)
        return v3;
    }
  }
  v23 = 0;
  v39 = v1 + 32;
  v24 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v23 != v24)
  {
    v25 = *(_QWORD **)(v39 + 8 * v23);
    Hasher.init(_seed:)();
    swift_retain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v26 = v25[4];
    swift_retain();
    specialized Optional<A>.hash(into:)((uint64_t)v41, v26);
    swift_release();
    result = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v3 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    v30 = *(_QWORD *)(v6 + 8 * (v28 >> 6));
    v31 = 1 << v28;
    if (((1 << v28) & v30) != 0)
    {
      v32 = (_QWORD *)swift_retain();
      v33 = specialized static MaterialXTarget.== infix(_:_:)(v32, v25);
      result = swift_release();
      if (v33)
      {
LABEL_23:
        result = swift_release();
        goto LABEL_24;
      }
      v34 = ~v27;
      while (1)
      {
        v28 = (v28 + 1) & v34;
        v29 = v28 >> 6;
        v30 = *(_QWORD *)(v6 + 8 * (v28 >> 6));
        v31 = 1 << v28;
        if ((v30 & (1 << v28)) == 0)
          break;
        v35 = (_QWORD *)swift_retain();
        v36 = specialized static MaterialXTarget.== infix(_:_:)(v35, v25);
        result = swift_release();
        if (v36)
          goto LABEL_23;
      }
    }
    *(_QWORD *)(v6 + 8 * v29) = v31 | v30;
    *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v28) = v25;
    v37 = *(_QWORD *)(v3 + 16);
    v8 = __OFADD__(v37, 1);
    v38 = v37 + 1;
    if (v8)
      goto LABEL_37;
    *(_QWORD *)(v3 + 16) = v38;
LABEL_24:
    if (++v23 == v40)
      return v3;
  }
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

Swift::Int specialized _ArrayProtocol.filter(_:)(Swift::Int result, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  char v20;
  __int128 v22;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = 0;
    v19 = result + 32;
    v4 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      v5 = v3 <= v2 ? v2 : v3;
      while (1)
      {
        if (v3 == v5)
        {
          __break(1u);
          return result;
        }
        v6 = v3++;
        v7 = *a2;
        if (*(_QWORD *)(*a2 + 16))
        {
          v8 = v19 + 48 * v6;
          v9 = *(_QWORD *)v8;
          v10 = *(_QWORD *)(v8 + 8);
          v11 = *(_QWORD *)(v8 + 16);
          v22 = *(_OWORD *)(v8 + 24);
          v20 = *(_BYTE *)(v8 + 40);
          Hasher.init(_seed:)();
          Hasher._combine(_:)(v22);
          result = Hasher._finalize()();
          v12 = -1 << *(_BYTE *)(v7 + 32);
          v13 = result & ~v12;
          if (((*(_QWORD *)(v7 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
            break;
        }
LABEL_6:
        if (v3 == v2)
          return v4;
      }
      v14 = *(_QWORD *)(v7 + 48);
      if (*(_QWORD *)(v14 + 8 * v13) != (_QWORD)v22)
        break;
LABEL_14:
      outlined copy of NodePersonality(v9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v4 + 16) + 1, 1);
      v17 = *(_QWORD *)(v4 + 16);
      v16 = *(_QWORD *)(v4 + 24);
      if (v17 >= v16 >> 1)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
      *(_QWORD *)(v4 + 16) = v17 + 1;
      v18 = v4 + 48 * v17;
      *(_QWORD *)(v18 + 32) = v9;
      *(_QWORD *)(v18 + 40) = v10;
      *(_QWORD *)(v18 + 48) = v11;
      *(_OWORD *)(v18 + 56) = v22;
      *(_BYTE *)(v18 + 72) = v20;
      if (v3 == v2)
        return v4;
    }
    v15 = ~v12;
    while (1)
    {
      v13 = (v13 + 1) & v15;
      if (((*(_QWORD *)(v7 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
        goto LABEL_6;
      if (*(_QWORD *)(v14 + 8 * v13) == (_QWORD)v22)
        goto LABEL_14;
    }
  }
  return MEMORY[0x24BEE4AF8];
}

unint64_t specialized _ArrayProtocol.filter(_:)(unint64_t result, __int128 *a2)
{
  unint64_t v2;
  __int128 *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::UInt v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t (*v42)(uint64_t);
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _OWORD v77[2];
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    return MEMORY[0x24BEE4AF8];
  v3 = a2;
  v4 = 0;
  v60 = result + 32;
  v5 = MEMORY[0x24BEE4AF8];
  v58 = *(_QWORD *)(result + 16);
LABEL_3:
  v55 = v5;
  if (v4 <= v2)
    v6 = v2;
  else
    v6 = v4;
  v61 = v6;
  while (1)
  {
    if (v4 == v61)
    {
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
    v7 = v60 + 56 * v4;
    v9 = *(_QWORD *)v7;
    v8 = *(_QWORD *)(v7 + 8);
    v10 = *(_QWORD *)(v7 + 16);
    v11 = *(_QWORD *)(v7 + 24);
    v12 = *(_QWORD *)(v7 + 32);
    v13 = *(_BYTE *)(v7 + 40);
    v14 = *(_QWORD *)(v7 + 48);
    *(_QWORD *)&v79 = v9;
    *((_QWORD *)&v79 + 1) = v8;
    v83 = v8;
    v67 = v10;
    *(_QWORD *)&v80 = v10;
    *((_QWORD *)&v80 + 1) = v11;
    v62 = v12;
    v63 = v14;
    *(_QWORD *)&v81 = v12;
    v64 = v13;
    BYTE8(v81) = v13;
    v82 = v14;
    v15 = v3[1];
    v68 = *v3;
    v69 = v15;
    v16 = v3[2];
    v17 = v3[3];
    v18 = v3[5];
    v72 = v3[4];
    v73 = v18;
    v70 = v16;
    v71 = v17;
    v19 = v3[6];
    v20 = v3[7];
    *(_OWORD *)((char *)v77 + 9) = *(__int128 *)((char *)v3 + 153);
    v21 = v3[9];
    v76 = v3[8];
    v77[0] = v21;
    v74 = v19;
    v75 = v20;
    v22 = v69;
    v23 = (_QWORD *)(*((_QWORD *)&v68 + 1) + 32);
    v24 = *(_QWORD *)(*((_QWORD *)&v68 + 1) + 16);
    if (!(_QWORD)v68)
      break;
    result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v9, (uint64_t)v23, v24, (_QWORD *)(v68 + 16), v68 + 32);
    if ((v25 & 1) == 0)
    {
      if ((result & 0x8000000000000000) != 0)
        goto LABEL_68;
      goto LABEL_15;
    }
LABEL_47:
    swift_retain();
    swift_bridgeObjectRetain();
    v35 = MEMORY[0x24BEE4AF8];
LABEL_48:
    ++v4;
    v45 = *(_QWORD *)(v35 + 16);
    swift_bridgeObjectRelease();
    if (v45)
    {
      v5 = v55;
      result = swift_isUniquelyReferenced_nonNull_native();
      v78 = v55;
      v48 = v4;
      if ((result & 1) == 0)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v55 + 16) + 1, 1);
        v5 = v78;
      }
      v50 = *(_QWORD *)(v5 + 16);
      v49 = *(_QWORD *)(v5 + 24);
      if (v50 >= v49 >> 1)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1);
        v5 = v78;
      }
      *(_QWORD *)(v5 + 16) = v50 + 1;
      v51 = v5 + 56 * v50;
      v52 = v79;
      v53 = v80;
      v54 = v81;
      *(_QWORD *)(v51 + 80) = v82;
      *(_OWORD *)(v51 + 48) = v53;
      *(_OWORD *)(v51 + 64) = v54;
      *(_OWORD *)(v51 + 32) = v52;
      v4 = v48;
      if (v48 == v2)
        return v5;
      goto LABEL_3;
    }
    swift_bridgeObjectRelease();
    result = swift_release();
    if (v4 == v2)
      return v55;
  }
  if (!v24)
    goto LABEL_47;
  if (*v23 == v9)
  {
    result = 0;
    goto LABEL_15;
  }
  if (v24 == 1)
    goto LABEL_47;
  if (*(_QWORD *)(*((_QWORD *)&v68 + 1) + 40) == v9)
  {
    result = 1;
    goto LABEL_15;
  }
  if (v24 == 2)
    goto LABEL_47;
  if (*(_QWORD *)(*((_QWORD *)&v68 + 1) + 48) == v9)
  {
    result = 2;
  }
  else
  {
    v46 = 0;
    do
    {
      if (v24 - 3 == v46)
        goto LABEL_47;
      v47 = *(_QWORD *)(*((_QWORD *)&v68 + 1) + 56 + 8 * v46++);
    }
    while (v47 != v9);
    result = v46 + 2;
    if (v46 + 2 < 0)
      goto LABEL_68;
  }
LABEL_15:
  if (result >= *(_QWORD *)(v22 + 16))
    goto LABEL_67;
  v26 = (_QWORD *)(v22 + 48 * result);
  v28 = v26[4];
  v27 = v26[5];
  v29 = v26[6];
  v30 = *(_QWORD *)(v27 + 16);
  if (v28)
  {
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined retain of Graph((uint64_t)&v68);
    result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v79, v27 + 32, v30, (_QWORD *)(v28 + 16), v28 + 32);
    if ((v31 & 1) == 0)
    {
      v32 = result;
      v59 = v29;
      v33 = v58;
      if ((result & 0x8000000000000000) == 0)
        goto LABEL_19;
      goto LABEL_69;
    }
    swift_release();
    swift_release();
    v2 = v58;
    goto LABEL_42;
  }
  v57 = v4;
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain();
  v59 = v29;
  swift_retain();
  outlined retain of Graph((uint64_t)&v68);
  if (!v30)
  {
LABEL_40:
    swift_release();
    v3 = a2;
    v4 = v57;
    v2 = v58;
LABEL_42:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    outlined release of Graph((uint64_t)&v68);
    v35 = MEMORY[0x24BEE4AF8];
    goto LABEL_48;
  }
  v36 = v30;
  v32 = 0;
  v37 = (_QWORD *)(v27 + 80);
  while (2)
  {
    if (*(v37 - 6) != v9)
      goto LABEL_24;
    v38 = v11;
    v39 = *(v37 - 4);
    v40 = *(v37 - 3);
    v41 = *((_BYTE *)v37 - 8);
    v65 = *(v37 - 2);
    v66 = *v37;
    v42 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*(v37 - 5) + 128);
    swift_retain();
    swift_bridgeObjectRetain();
    if ((v42(v83) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v11 = v38;
      goto LABEL_24;
    }
    if (v39 == v67 && v40 == v38)
    {
      swift_bridgeObjectRelease();
      result = swift_release();
      v11 = v38;
      break;
    }
    v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    result = swift_release();
    v11 = v38;
    if ((v43 & 1) == 0)
    {
LABEL_24:
      v37 += 7;
      if (v36 == ++v32)
        goto LABEL_40;
      continue;
    }
    break;
  }
  if ((v41 & 1) == 0)
  {
    if ((v64 & 1) == 0 && v65 == v62 && v66 == v63)
      goto LABEL_39;
    goto LABEL_24;
  }
  v44 = v64;
  if (v66 != v63)
    v44 = 0;
  if ((v44 & 1) == 0)
    goto LABEL_24;
LABEL_39:
  v3 = a2;
  v4 = v57;
  v33 = v58;
LABEL_19:
  if (v32 < *(_QWORD *)(v59 + 16))
  {
    v34 = *(_QWORD *)(v59 + 16 * v32 + 40);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_retain();
    swift_bridgeObjectRetain();
    v35 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_n(v34, (uint64_t *)&v79);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v2 = v33;
    swift_release();
    outlined release of Graph((uint64_t)&v68);
    goto LABEL_48;
  }
LABEL_70:
  __break(1u);
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay11ShaderGraph5InputVGSayAH7NodeDefV6IOSpecVGG_AH0H4SpecVs5NeverOTg504_s11f6Graph5h4VAA7ij2V6k6VAA0C4l17VIgggo_AC_AGtAIs5M11OIegnrzr_TRAjoSIgggo_Tf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD *, _OWORD *))
{
  int64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[5];
  char v60;
  uint64_t v61;
  _OWORD v62[2];
  _OWORD v63[2];
  _QWORD v64[5];
  char v65;
  int v66;
  __int16 v67;
  char v68;
  uint64_t v69;
  _QWORD v70[7];
  char v71;
  uint64_t v72;

  v41 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(a2 + 16) >= v41)
    v5 = *(_QWORD *)(a1 + 16);
  else
    v5 = *(_QWORD *)(a2 + 16);
  v57 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
  v6 = v57;
  v42 = a2;
  v39 = v5;
  if (v5)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = (uint64_t *)(a1 + 40);
    v8 = (_BYTE *)(a2 + 88);
    while (1)
    {
      v55 = v5;
      v72 = v6;
      v9 = *v7;
      v10 = v7[2];
      v45 = v7[1];
      v46 = *(v7 - 1);
      v44 = v7[3];
      v52 = *v8;
      v11 = *((_QWORD *)v8 - 1);
      v48 = v7[5];
      v50 = *((_QWORD *)v8 - 2);
      v12 = *((_QWORD *)v8 - 3);
      v47 = *((_QWORD *)v8 - 4);
      v13 = *((_QWORD *)v8 - 6);
      v14 = *((_QWORD *)v8 - 5);
      v15 = *((_QWORD *)v8 - 7);
      LOBYTE(v62[0]) = *((_BYTE *)v7 + 32);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRetain();
      if (!v9)
        break;
      v64[0] = v46;
      v64[1] = v9;
      v64[2] = v45;
      v64[3] = v10;
      v64[4] = v44;
      v65 = v62[0];
      v68 = 0;
      v67 = 0;
      v66 = 0;
      v69 = v48;
      v70[0] = v15;
      v70[1] = v13;
      v70[2] = v14;
      v70[3] = v47;
      v70[4] = v12;
      v70[5] = v50;
      v70[6] = v11;
      v71 = v52;
      v17 = a3(v64, v70);
      v51 = v18;
      v53 = v17;
      v49 = v19;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_release();
      v6 = v72;
      v58 = v72;
      v21 = *(_QWORD *)(v72 + 16);
      v20 = *(_QWORD *)(v72 + 24);
      if (v21 >= v20 >> 1)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        v6 = v58;
      }
      *(_QWORD *)(v6 + 16) = v21 + 1;
      v22 = (_QWORD *)(v6 + 24 * v21);
      v22[4] = v53;
      v22[5] = v51;
      v22[6] = v49;
      v7 += 7;
      v8 += 64;
      v5 = v55 - 1;
      if (v55 == 1)
        goto LABEL_12;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
LABEL_12:
    if (v41 <= v40)
    {
LABEL_19:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6;
    }
    v23 = v40 - v39;
    v24 = v41 - v39;
    v25 = v42 + (v39 << 6) + 40;
    v26 = a1 + 56 * v39 + 40;
    while (v24)
    {
      if (v23)
      {
        v27 = *(_QWORD *)(v26 + 40);
        v28 = *(_BYTE *)(v26 + 32);
        v30 = *(_QWORD *)(v26 + 16);
        v29 = *(_QWORD *)(v26 + 24);
        v32 = *(_QWORD *)v26;
        v31 = *(_QWORD *)(v26 + 8);
        v59[0] = *(_QWORD *)(v26 - 8);
        v59[1] = v32;
        v59[2] = v31;
        v59[3] = v30;
        v59[4] = v29;
        v60 = v28;
        v61 = v27;
        v33 = *(_OWORD *)(v25 + 8);
        v62[0] = *(_OWORD *)(v25 - 8);
        v62[1] = v33;
        v63[0] = *(_OWORD *)(v25 + 24);
        *(_OWORD *)((char *)v63 + 9) = *(_OWORD *)(v25 + 33);
        swift_retain();
        swift_bridgeObjectRetain();
        outlined retain of NodeDef.IOSpec((uint64_t)v62);
        v72 = a3(v59, v62);
        v54 = v35;
        v56 = v34;
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v36 = *(_QWORD *)(v6 + 16);
        v37 = *(_QWORD *)(v6 + 24);
        if (v36 >= v37 >> 1)
          result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v36 + 1, 1);
        *(_QWORD *)(v6 + 16) = v36 + 1;
        v38 = (_QWORD *)(v6 + 24 * v36);
        v38[4] = v72;
        v38[5] = v56;
        v38[6] = v54;
        --v23;
        v25 += 64;
        v26 += 56;
        if (--v24)
          continue;
      }
      goto LABEL_19;
    }
    __break(1u);
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Int specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void (*v12)(char *);
  Swift::Int result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  char v28;
  char v29;
  uint64_t v31;
  Swift::UInt v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::UInt v40;
  char v41;
  Swift::UInt v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Swift::UInt v47;
  char v48[80];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<Input>);
    v3 = static _SetStorage.allocate(capacity:)();
    v4 = 0;
    v5 = v3 + 56;
    v37 = v1;
    v38 = a1 + 32;
    while (1)
    {
      v6 = v38 + 56 * v4;
      v7 = *(_QWORD *)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = *(_QWORD *)(v6 + 16);
      v9 = *(_QWORD *)(v6 + 24);
      v40 = *(_QWORD *)(v6 + 32);
      v11 = *(unsigned __int8 *)(v6 + 40);
      v42 = *(_QWORD *)(v6 + 48);
      Hasher.init(_seed:)();
      v47 = v7;
      Hasher._combine(_:)(v7);
      v12 = *(void (**)(char *))(*(_QWORD *)v8 + 120);
      swift_retain_n();
      swift_bridgeObjectRetain();
      v12(v48);
      v46 = v8;
      swift_release();
      swift_bridgeObjectRetain();
      v43 = v10;
      String.hash(into:)();
      v44 = v9;
      swift_bridgeObjectRelease();
      v41 = v11;
      if (v11 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v40);
      }
      Hasher._combine(_:)(v42);
      result = Hasher._finalize()();
      v14 = ~(-1 << *(_BYTE *)(v3 + 32));
      v15 = result & v14;
      v16 = (result & (unint64_t)v14) >> 6;
      v17 = *(_QWORD *)(v5 + 8 * v16);
      v18 = 1 << (result & v14);
      if ((v18 & v17) != 0)
        break;
      v32 = v40;
      v31 = v37;
LABEL_32:
      *(_QWORD *)(v5 + 8 * v16) = v18 | v17;
      v33 = *(_QWORD *)(v3 + 48) + 56 * v15;
      *(_QWORD *)v33 = v47;
      *(_QWORD *)(v33 + 8) = v46;
      *(_QWORD *)(v33 + 16) = v43;
      *(_QWORD *)(v33 + 24) = v44;
      *(_QWORD *)(v33 + 32) = v32;
      *(_BYTE *)(v33 + 40) = v41;
      *(_QWORD *)(v33 + 48) = v42;
      v34 = *(_QWORD *)(v3 + 16);
      v35 = __OFADD__(v34, 1);
      v36 = v34 + 1;
      if (v35)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v36;
LABEL_34:
      if (++v4 == v31)
        return v3;
    }
    v39 = v4;
    while (1)
    {
      v19 = *(_QWORD *)(v3 + 48) + 56 * v15;
      if (*(_QWORD *)v19 == v47)
      {
        v20 = v5;
        v21 = v3;
        v22 = *(_QWORD *)(v19 + 16);
        v23 = *(_QWORD *)(v19 + 24);
        v45 = *(_QWORD *)(v19 + 32);
        v24 = *(_BYTE *)(v19 + 40);
        v25 = *(_QWORD *)(v19 + 48);
        v26 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v19 + 8) + 128);
        swift_retain();
        swift_bridgeObjectRetain();
        if ((v26(v46) & 1) != 0)
        {
          if (v22 == v43 && v23 == v44)
          {
            swift_bridgeObjectRelease();
            result = swift_release();
            v3 = v21;
            v5 = v20;
            if ((v24 & 1) == 0)
            {
LABEL_23:
              if ((v41 & 1) == 0 && v45 == v40 && v25 == v42)
              {
LABEL_29:
                swift_bridgeObjectRelease();
                swift_release();
                v31 = v37;
                v4 = v39;
                goto LABEL_34;
              }
              goto LABEL_9;
            }
            goto LABEL_18;
          }
          v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          result = swift_release();
          v3 = v21;
          v5 = v20;
          if ((v28 & 1) != 0)
          {
            if ((v24 & 1) == 0)
              goto LABEL_23;
LABEL_18:
            v29 = v41;
            if (v25 != v42)
              v29 = 0;
            if ((v29 & 1) != 0)
              goto LABEL_29;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          result = swift_release();
          v3 = v21;
          v5 = v20;
        }
      }
LABEL_9:
      v15 = (v15 + 1) & v14;
      v16 = v15 >> 6;
      v17 = *(_QWORD *)(v5 + 8 * (v15 >> 6));
      v18 = 1 << v15;
      if ((v17 & (1 << v15)) == 0)
      {
        v31 = v37;
        v4 = v39;
        v32 = v40;
        goto LABEL_32;
      }
    }
  }
  return MEMORY[0x24BEE4B08];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
    v3 = static _SetStorage.allocate(capacity:)();
    v4 = 0;
    v5 = v3 + 56;
    v25 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v25 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v18 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v18;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v19 = (_QWORD *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v21 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v21 = v8;
      v21[1] = v7;
      v22 = *(_QWORD *)(v3 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x24BEE4B08];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  Swift::Int result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<SGDataType>);
    v3 = static _SetStorage.allocate(capacity:)();
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(_QWORD *)(v6 + 8 * v4);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v7);
      result = Hasher._finalize()();
      v9 = -1 << *(_BYTE *)(v3 + 32);
      v10 = result & ~v9;
      v11 = v10 >> 6;
      v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
      v13 = 1 << v10;
      v14 = *(_QWORD *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(_QWORD *)(v14 + 8 * v10) == v7)
          goto LABEL_3;
        v15 = ~v9;
        while (1)
        {
          v10 = (v10 + 1) & v15;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            break;
          if (*(_QWORD *)(v14 + 8 * v10) == v7)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
      *(_QWORD *)(v14 + 8 * v10) = v7;
      v16 = *(_QWORD *)(v3 + 16);
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x24BEE4B08];
}

uint64_t specialized ContiguousArray.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v2 = v4;
  if (!isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1);
    v4 = *v2;
  }
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = *(_QWORD *)(v4 + 16);
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (const void *)(v4 + 32 + 56 * a2);
    if (a1 != a2 || v4 + 32 + 56 * a1 >= (unint64_t)v16 + 56 * v15)
      result = (uint64_t)memmove((void *)(v4 + 32 + 56 * a1), v16, 56 * v15);
    v17 = *(_QWORD *)(v4 + 16);
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      *(_QWORD *)(v4 + 16) = v18;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v2 = v4;
  if (!isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1);
    v4 = *v2;
  }
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = *(_QWORD *)(v4 + 16);
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (const void *)(v4 + 32 + 16 * a2);
    if (a1 != a2 || v4 + 32 + 16 * a1 >= (unint64_t)v16 + 16 * v15)
      result = (uint64_t)memmove((void *)(v4 + 32 + 16 * a1), v16, 16 * v15);
    v17 = *(_QWORD *)(v4 + 16);
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      *(_QWORD *)(v4 + 16) = v18;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Graph.splitSharedNodes(nodeDefStore:surfaceShader:geometryModifier:)(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  _OWORD *v3;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  Swift::Int v21;
  char v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  _OWORD v32[2];
  __int128 v33;
  _OWORD v34[2];
  unint64_t v35;
  uint64_t v36;
  _OWORD v37[9];
  _OWORD v38[3];
  Swift::Int v39;

  v3 = v2;
  result = outlined init with take of MetalFunctionNode?(a2, (uint64_t)&v31, &demangling cache variable for type metadata for ShaderGraphNode?);
  if (*((_QWORD *)&v31 + 1))
  {
    v33 = v31;
    v34[0] = v32[0];
    *(_OWORD *)((char *)v34 + 9) = *(_OWORD *)((char *)v32 + 9);
    v7 = v3[8];
    v8 = v3[9];
    v9 = v3[6];
    v37[7] = v3[7];
    v37[8] = v7;
    v38[0] = v8;
    *(_OWORD *)((char *)v38 + 9) = *(_OWORD *)((char *)v3 + 153);
    v10 = v3[5];
    v37[4] = v3[4];
    v37[5] = v10;
    v37[6] = v9;
    v11 = v3[1];
    v37[0] = *v3;
    v37[1] = v11;
    v12 = v3[3];
    v37[2] = v3[2];
    v37[3] = v12;
    outlined retain of ShaderGraphNode?(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of ShaderGraphNode?);
    outlined retain of Graph((uint64_t)v37);
    Graph.connectedBreathFirstUpstreamSubgraph(rootedAt:)(a1, (uint64_t)&v27);
    v39 = v27;
    outlined release of Graph((uint64_t)v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    outlined retain of Graph((uint64_t)v37);
    Graph.connectedBreathFirstUpstreamSubgraph(rootedAt:)((uint64_t)&v33, (uint64_t)&v27);
    v13 = v27;
    outlined release of Graph((uint64_t)v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_AH2IDVs5NeverOTg504_s11D159Graph0B0V16splitSharedNodes12nodeDefStore07surfaceA016geometryModifieryAA04NodegH0V_AA0abL0VAKSgtKFAK2IDVAKcfu_33_300d98c1e43c0bc1dedcebf2cdbfb115AkNTf3nnnpk_nTf1cn_nTm(v13);
    swift_bridgeObjectRelease();
    v15 = specialized Set.init<A>(_:)(v14);
    swift_bridgeObjectRelease();
    v26 = v15;
    v16 = v39;
    v17 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_AH2IDVs5NeverOTg504_s11D159Graph0B0V16splitSharedNodes12nodeDefStore07surfaceA016geometryModifieryAA04NodegH0V_AA0abL0VAKSgtKFAK2IDVAKcfu_33_300d98c1e43c0bc1dedcebf2cdbfb115AkNTf3nnnpk_nTf1cn_nTm(v39);
    v18 = specialized Set.init<A>(_:)(v17);
    swift_bridgeObjectRelease();
    v25 = v18;
    v19 = specialized _ArrayProtocol.filter(_:)(v16, &v26);
    swift_bridgeObjectRelease();
    v23 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v24 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v20 = *(_QWORD *)(v19 + 16);
    if (v20)
    {
      v21 = v19 + 40;
      do
      {
        v22 = *(_BYTE *)(v21 + 32);
        v27 = *(_QWORD *)(v21 - 8);
        v28 = *(_OWORD *)v21;
        v29 = *(_OWORD *)(v21 + 16);
        LOBYTE(v30) = v22;
        closure #2 in Graph.splitSharedNodes(nodeDefStore:surfaceShader:geometryModifier:)((unint64_t *)&v27, (uint64_t)v3, &v25, &v26, &v24, &v23);
        v21 += 48;
        --v20;
      }
      while (v20);
    }
    outlined init with take of NodePersonality(&v33, &v35);
    outlined release of NodePersonality(&v35);
    v36 = *((_QWORD *)&v33 + 1);
    outlined release of [Input]((uint64_t)&v36);
    v27 = *(_QWORD *)&v34[0];
    outlined release of [Input]((uint64_t)&v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *specialized closure #1 in Graph.mapStringInputs(nodeDefStore:)(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;
  unint64_t v8;
  char v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  __int128 v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35[12];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  v2 = *result;
  if ((unint64_t)*result >> 61 == 5)
  {
    v4 = result[1];
    v5 = *(_QWORD *)(v2 + 16);
    v6 = *(void **)(v2 + 24);
    swift_bridgeObjectRetain();
    v7._countAndFlagsBits = 0x736E6172745F444ELL;
    v7._object = (void *)0xEC0000006D726F66;
    if (!String.hasPrefix(_:)(v7))
      return (uint64_t *)swift_bridgeObjectRelease();
    if (*(_QWORD *)(a2 + 16))
    {
      swift_bridgeObjectRetain();
      v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5, (uint64_t)v6);
      if ((v9 & 1) != 0)
      {
        v10 = (__int128 *)(*(_QWORD *)(a2 + 56) + 144 * v8);
        v36 = *v10;
        v11 = v10[4];
        v13 = v10[1];
        v12 = v10[2];
        v39 = v10[3];
        v40 = v11;
        v37 = v13;
        v38 = v12;
        v14 = v10[8];
        v16 = v10[5];
        v15 = v10[6];
        v43 = v10[7];
        v44 = v14;
        v41 = v16;
        v42 = v15;
        outlined retain of NodeDef((uint64_t)&v36);
        swift_bridgeObjectRelease_n();
        v17 = v44;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v18 = outlined release of NodeDef((uint64_t)&v36);
        MEMORY[0x24BDAC7A8](v18);
        _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay11ShaderGraph5InputVGSayAH7NodeDefV6IOSpecVGG_AH0H4SpecVs5NeverOTg504_s11f6Graph5h4VAA7ij2V6k6VAA0C4l17VIgggo_AC_AGtAIs5M11OIegnrzr_TRAjoSIgggo_Tf1cn_nTf4ng_n(v4, v17, (uint64_t (*)(_QWORD *, _OWORD *))partial apply for closure #1 in closure #1 in Graph.mapStringInputs(nodeDefStore:));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (uint64_t *)swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    *(_QWORD *)&v35[0] = v5;
    *((_QWORD *)&v35[0] + 1) = v6;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi18_((uint64_t)v35);
    *(_QWORD *)&v36 = 0;
    *((_QWORD *)&v36 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v36 = 0xD000000000000020;
    *((_QWORD *)&v36 + 1) = 0x8000000245FCBB70;
    v19._countAndFlagsBits = v5;
    v19._object = v6;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 0x6F6E20726F662027;
    v20._object = (void *)0xEC00000027206564;
    String.append(_:)(v20);
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 1701080942;
    v22._object = (void *)0xE400000000000000;
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 39;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    v24 = v36;
    outlined init with take of UserGraphError.ErrorType(v35, (uint64_t)&v36);
    v48 = v24;
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    swift_allocError();
    *v25 = v36;
    v26 = v40;
    v28 = v37;
    v27 = v38;
    v25[3] = v39;
    v25[4] = v26;
    v25[1] = v28;
    v25[2] = v27;
    v29 = v44;
    v31 = v41;
    v30 = v42;
    v25[7] = v43;
    v25[8] = v29;
    v25[5] = v31;
    v25[6] = v30;
    v32 = v48;
    v34 = v45;
    v33 = v46;
    v25[11] = v47;
    v25[12] = v32;
    v25[9] = v34;
    v25[10] = v33;
    return (uint64_t *)swift_willThrow();
  }
  return result;
}

uint64_t specialized Graph.mapStringInputs(nodeDefStore:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14[5];
  char v15;
  uint64_t v16;

  v16 = a1;
  result = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v5 = result + 32;
    swift_bridgeObjectRetain_n();
    v6 = 0;
    while (1)
    {
      v7 = v5 + 48 * v6;
      v8 = *(_QWORD *)(v7 + 24);
      if (v8 == -7)
      {
        if ((uint64_t)++v6 >= v4)
          return swift_bridgeObjectRelease_n();
      }
      else
      {
        v10 = *(_QWORD *)v7;
        v9 = *(_QWORD *)(v7 + 8);
        v11 = *(_QWORD *)(v7 + 16);
        v12 = *(_BYTE *)(v7 + 40);
        v13 = *(_QWORD *)(v7 + 32);
        v14[0] = v10;
        v14[1] = v9;
        v14[2] = v11;
        v14[3] = v8;
        v14[4] = v13;
        v15 = v12;
        outlined copy of NodePersonality(v10);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized closure #1 in Graph.mapStringInputs(nodeDefStore:)(v14, v16);
        if (v2)
        {
          outlined consume of NodePersonality(v10);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        ++v6;
        outlined consume of NodePersonality(v10);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((uint64_t)v6 >= v4)
          return swift_bridgeObjectRelease_n();
      }
      if (v6 >= v4)
      {
        __break(1u);
        return swift_bridgeObjectRelease_n();
      }
    }
  }
  return result;
}

void specialized Graph.insertGeomPropGetter(_:outputType:nodeDefStore:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  unint64_t v17;
  char v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  __int128 v61;
  uint64_t v62;
  _OWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  _OWORD v68[12];
  __int128 v69;
  __int128 v70;
  _OWORD v71[2];
  unint64_t v72[6];
  _BYTE v73[8];
  __int128 v74;
  char v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  __int128 v79;
  _BYTE v80[16];
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  _OWORD v96[9];
  uint64_t v97;
  char v98;
  _BYTE v99[17];
  uint64_t v100;

  GeomPropDef.GeomProp.paramGetterNodeDefName(type:)(a2, *(_QWORD *)(a1 + 24), *(void **)(a1 + 32), *(_BYTE *)(a1 + 40));
  if (v5)
    return;
  v11 = v9;
  v12 = v10;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v68[0] = 0xD000000000000011;
  *((_QWORD *)&v68[0] + 1) = 0x8000000245FCB450;
  v13 = *(_QWORD *)a1;
  v14 = *(void **)(a1 + 8);
  v100 = a1;
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = v13;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 39;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  if (!*(_QWORD *)(a3 + 16))
  {
LABEL_14:
    *(_QWORD *)&v67 = v11;
    *((_QWORD *)&v67 + 1) = v12;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi18_((uint64_t)&v67);
    outlined init with take of UserGraphError.ErrorType(&v67, (uint64_t)v68);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v69 = 0uLL;
    swift_allocError();
    *v36 = v68[0];
    v37 = v68[4];
    v38 = v68[2];
    v39 = v68[1];
    v36[3] = v68[3];
    v36[4] = v37;
    v36[1] = v39;
    v36[2] = v38;
    v40 = v68[8];
    v41 = v68[6];
    v42 = v68[5];
    v36[7] = v68[7];
    v36[8] = v40;
    v36[5] = v42;
    v36[6] = v41;
    v43 = v69;
    v44 = v68[10];
    v45 = v68[9];
    v36[11] = v68[11];
    v36[12] = v43;
    v36[9] = v45;
    v36[10] = v44;
    swift_bridgeObjectRetain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12);
  if ((v18 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  v63 = a4;
  v19 = (_OWORD *)(*(_QWORD *)(a3 + 56) + 144 * v17);
  v96[0] = *v19;
  v20 = v19[4];
  v22 = v19[1];
  v21 = v19[2];
  v96[3] = v19[3];
  v96[4] = v20;
  v96[1] = v22;
  v96[2] = v21;
  v23 = v19[8];
  v25 = v19[5];
  v24 = v19[6];
  v96[7] = v19[7];
  v96[8] = v23;
  v96[5] = v25;
  v96[6] = v24;
  outlined retain of NodeDef((uint64_t)v96);
  swift_bridgeObjectRelease();
  v62 = v4;
  specialized NodeDefStore.createNode(in:from:label:)(v4, v96, &v70);
  outlined release of NodeDef((uint64_t)v96);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v81 = *((_QWORD *)&v70 + 1);
  v26 = *(_QWORD *)(*((_QWORD *)&v70 + 1) + 16);
  if (v26)
  {
    v65 = *((_QWORD *)&v70 + 1);
    v27 = (_QWORD *)(*((_QWORD *)&v70 + 1) + 80);
    while (1)
    {
      v28 = *(v27 - 6);
      v29 = *(v27 - 5);
      v30 = *(v27 - 4);
      v31 = *(v27 - 3);
      v32 = *(v27 - 2);
      v33 = *((_BYTE *)v27 - 8);
      v34 = *v27;
      if (v30 == 0x7865646E69 && v31 == 0xE500000000000000)
        break;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_16;
      v27 += 7;
      if (!--v26)
      {
        v89 = v28;
        v90 = v29;
        v91 = v30;
        v92 = v31;
        v93 = v32;
        v94 = v33;
        v95 = v34;
        goto LABEL_20;
      }
    }
    v31 = 0xE500000000000000;
LABEL_16:
    v89 = v28;
    v90 = v29;
    v91 = v30;
    v92 = v31;
    v93 = v32;
    v94 = v33;
    v95 = v34;
    outlined init with take of MetalFunctionNode?(v100 + 48, (uint64_t)v80, &demangling cache variable for type metadata for Int?);
    outlined init with take of MetalFunctionNode?((uint64_t)v80, (uint64_t)&v97, &demangling cache variable for type metadata for Int?);
    if ((v98 & 1) == 0)
    {
      if (v97 < (uint64_t)0xFFFFFFFF80000000)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      if (v97 > 0x7FFFFFFF)
      {
LABEL_36:
        __break(1u);
        JUMPOUT(0x245F06BD0);
      }
      v46 = v97;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
      v47 = swift_allocObject();
      *(_OWORD *)(v47 + 16) = xmmword_245FBECD0;
      *(_QWORD *)(v47 + 32) = 7632239;
      *(_QWORD *)(v47 + 40) = 0xE300000000000000;
      *(_QWORD *)(v47 + 48) = v29;
      v48 = swift_allocObject();
      *(_QWORD *)(v48 + 16) = v46;
      *(_OWORD *)(v48 + 24) = 0u;
      *(_OWORD *)(v48 + 40) = 0u;
      *(_OWORD *)(v48 + 56) = 0u;
      *(_QWORD *)(v48 + 72) = 0;
      *(_BYTE *)(v48 + 80) = 2;
      *(_QWORD *)(v48 + 88) = v29;
      v49 = *(_QWORD *)(v62 + 40);
      swift_retain_n();
      swift_bridgeObjectRetain();
      specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v49, MEMORY[0x24BEE4AF8], v47, v48, v62 + 64, v62, v72);
      swift_release();
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      ShaderGraphNode.out.getter((uint64_t)v73);
      Graph.connect(_:to:)((uint64_t)v73, (unint64_t)&v89);
      swift_release();
      v79 = v74;
      outlined release of String((uint64_t)&v79);
      outlined init with take of NodePersonality(v72, &v78);
      outlined release of NodePersonality(&v78);
      v77 = v72[1];
      outlined release of [Input]((uint64_t)&v77);
      v76 = v72[2];
      outlined release of [Input]((uint64_t)&v76);
      swift_bridgeObjectRelease();
      swift_release();
    }
LABEL_20:
    v50 = v65;
    v66 = *(_QWORD *)(v65 + 16);
    if (v66)
    {
      v51 = 0;
      v52 = (_QWORD *)(v50 + 80);
      while (1)
      {
        v53 = v51 + 1;
        if (__OFADD__(v51, 1))
          break;
        v55 = *(v52 - 6);
        v54 = *(v52 - 5);
        v57 = *(v52 - 4);
        v56 = *(v52 - 3);
        v58 = *(v52 - 2);
        v59 = *((_BYTE *)v52 - 8);
        v64 = *v52;
        if (v57 == 0x6563617073 && v56 == 0xE500000000000000)
        {
          v56 = 0xE500000000000000;
          v57 = 0x6563617073;
LABEL_31:
          v82 = v55;
          v83 = v54;
          v84 = v57;
          v85 = v56;
          v86 = v58;
          v87 = v59;
          v88 = v64;
          outlined init with take of MetalFunctionNode?(v100 + 41, (uint64_t)&v75, (uint64_t *)&demangling cache variable for type metadata for GeomPropDef.Space?);
          outlined init with take of MetalFunctionNode?((uint64_t)&v75, (uint64_t)v99, (uint64_t *)&demangling cache variable for type metadata for GeomPropDef.Space?);
          __asm { BR              X10 }
        }
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_31;
        v52 += 7;
        ++v51;
        if (v53 == v66)
          goto LABEL_32;
      }
      __break(1u);
      goto LABEL_35;
    }
  }
LABEL_32:
  v61 = v71[0];
  *v63 = v70;
  v63[1] = v61;
  *(_OWORD *)((char *)v63 + 25) = *(_OWORD *)((char *)v71 + 9);
}

uint64_t specialized closure #1 in closure #1 in Graph.insertMaterialXDefaultValues(nodeDefStore:)(__int128 *a1, _OWORD *a2, unint64_t a3, _OWORD *a4, uint64_t a5, uint64_t a6)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v69;
  uint64_t v71;
  unint64_t v72;
  _BYTE v73[32];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95[14];
  _QWORD v96[2];
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  _OWORD v105[9];
  _OWORD v106[2];
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  unint64_t v116;

  v6 = a2[7];
  v113 = a2[6];
  v114 = v6;
  v115 = a2[8];
  v7 = a2[3];
  v109 = a2[2];
  v110 = v7;
  v8 = a2[5];
  v111 = a2[4];
  v112 = v8;
  v9 = a2[1];
  v107 = *a2;
  v108 = v9;
  v65 = *(_OWORD *)(a3 + 8);
  v63 = *(_QWORD *)(a3 + 24);
  v64 = *(_QWORD *)a3;
  v62 = *(_QWORD *)(a3 + 32);
  v61 = *(_BYTE *)(a3 + 40);
  v10 = a1[1];
  v101 = *a1;
  v102 = v10;
  v103 = a1[2];
  v66 = *((_QWORD *)a1 + 6);
  v67 = a3;
  v104 = v66;
  v11 = *((_QWORD *)a2 + 16);
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
  {
LABEL_9:
    v78 = v113;
    v79 = v114;
    v80 = v115;
    v74 = v109;
    v75 = v110;
    v76 = v111;
    v77 = v112;
    *(_OWORD *)v73 = v107;
    *(_OWORD *)&v73[16] = v108;
    v81 = v102;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi8_((uint64_t)v73);
    outlined init with take of UserGraphError.ErrorType((__int128 *)v73, (uint64_t)&v82);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v94 = 0uLL;
    swift_allocError();
    *v19 = v82;
    v20 = v86;
    v22 = v83;
    v21 = v84;
    v19[3] = v85;
    v19[4] = v20;
    v19[1] = v22;
    v19[2] = v21;
    v23 = v90;
    v25 = v87;
    v24 = v88;
    v19[7] = v89;
    v19[8] = v23;
    v19[5] = v25;
    v19[6] = v24;
    v26 = v94;
    v28 = v91;
    v27 = v92;
    v19[11] = v93;
    v19[12] = v26;
    v19[9] = v28;
    v19[10] = v27;
    outlined retain of NodeDef((uint64_t)a2);
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  v57 = *((_QWORD *)a1 + 1);
  v58 = *(_QWORD *)a1;
  v55 = *((_QWORD *)a1 + 3);
  v56 = *((_QWORD *)a1 + 2);
  v54 = *((_QWORD *)a1 + 4);
  v13 = (uint64_t *)(v11 + 80);
  v53 = *((_BYTE *)a1 + 40);
  while (1)
  {
    result = *(v13 - 6);
    v72 = *(v13 - 3);
    v15 = *(v13 - 2);
    v16 = *(v13 - 1);
    v17 = *v13;
    if (result == (_QWORD)v102 && *(v13 - 5) == *((_QWORD *)&v102 + 1))
      break;
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) != 0)
      break;
    v13 += 8;
    if (!--v12)
      goto LABEL_9;
  }
  if (!(v15 | v17))
    return result;
  v29 = v15;
  type metadata accessor for MaterialXDataType();
  v30 = swift_dynamicCastClass();
  if (!v30)
  {
    outlined init with take of NodePersonality((_QWORD *)v67, &v116);
    v38 = *(_QWORD *)(v67 + 16);
    v100 = *(_QWORD *)(v67 + 8);
    v99 = v38;
    *(_QWORD *)v73 = v64;
    *(_OWORD *)&v73[8] = v65;
    *(_QWORD *)&v73[24] = v63;
    *(_QWORD *)&v74 = v62;
    BYTE8(v74) = v61 & 1;
    *(_QWORD *)&v75 = v58;
    *((_QWORD *)&v75 + 1) = v57;
    *(_QWORD *)&v76 = v56;
    *((_QWORD *)&v76 + 1) = v55;
    *(_QWORD *)&v77 = v54;
    BYTE8(v77) = v53;
    *(_QWORD *)&v78 = v66;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi32_((uint64_t)v73);
    outlined init with take of UserGraphError.ErrorType((__int128 *)v73, (uint64_t)&v82);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v94 = 0uLL;
    swift_allocError();
    *v39 = v82;
    v40 = v86;
    v42 = v83;
    v41 = v84;
    v39[3] = v85;
    v39[4] = v40;
    v39[1] = v42;
    v39[2] = v41;
    v43 = v90;
    v45 = v87;
    v44 = v88;
    v39[7] = v89;
    v39[8] = v43;
    v39[5] = v45;
    v39[6] = v44;
    v46 = v94;
    v48 = v91;
    v47 = v92;
    v39[11] = v93;
    v39[12] = v46;
    v39[9] = v48;
    v39[10] = v47;
    swift_bridgeObjectRetain();
    swift_retain();
    outlined retain of NodePersonality(&v116);
    outlined retain of [Input]((uint64_t)&v100);
    outlined retain of [Input]((uint64_t)&v99);
    return swift_willThrow();
  }
  v71 = v30;
  v31 = a4[9];
  v105[8] = a4[8];
  v106[0] = v31;
  *(_OWORD *)((char *)v106 + 9) = *(_OWORD *)((char *)a4 + 153);
  v32 = a4[5];
  v105[4] = a4[4];
  v105[5] = v32;
  v33 = a4[7];
  v105[6] = a4[6];
  v105[7] = v33;
  v34 = a4[1];
  v105[0] = *a4;
  v105[1] = v34;
  v35 = a4[3];
  v105[2] = a4[2];
  v105[3] = v35;
  swift_bridgeObjectRetain_n();
  swift_retain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined retain of Graph((uint64_t)v105);
  Graph.edge(to:)((uint64_t)&v101, v95);
  outlined init with take of MetalFunctionNode?((uint64_t)v95, (uint64_t)v96, &demangling cache variable for type metadata for Edge?);
  if (!v96[1])
  {
    outlined release of Graph((uint64_t)v105);
    v37 = v17;
    if (!v29)
      goto LABEL_16;
    goto LABEL_21;
  }
  v36 = v96[0];
  v98 = v97;
  swift_retain();
  outlined retain of String((uint64_t)&v98);
  outlined release of Edge?(v95);
  outlined release of Graph((uint64_t)v105);
  if (v36 == -7)
  {
    swift_release();
    outlined release of String((uint64_t)&v98);
    v37 = v17;
    if (!v29)
    {
LABEL_16:
      if (!v17)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        return swift_release();
      }
      specialized Graph.insertMaterialXDefaultGeomProp(_:ofType:toFeedInput:fromNodeDefStore:)(v16, v37, v71, (unint64_t)&v101, a5, a6);
      if (v69)
        goto LABEL_22;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      goto LABEL_39;
    }
LABEL_21:
    swift_bridgeObjectRelease();
    Graph.insertMaterialXDefaultValue(_:ofType:toFeedInput:)(v72, v29, v71, (unint64_t)&v101);
    if (v69)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      return swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
LABEL_39:
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  if ((v36 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v49 = *((_QWORD *)a4 + 8);
    if (v36 < *(_QWORD *)(v49 + 16))
    {
      v50 = v49 + 48 * v36;
      v64 = *(_QWORD *)(v50 + 56);
      v67 = *(_QWORD *)(v50 + 32);
      outlined copy of NodePersonality(v67);
      v51 = one-time initialization token for string;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v51 == -1)
        goto LABEL_26;
      goto LABEL_44;
    }
  }
  __break(1u);
LABEL_44:
  swift_once();
LABEL_26:
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0 || *(_QWORD *)(v71 + 24))
  {
    if (!(v67 >> 61)
      && *(_BYTE *)(v67 + 80) == 6
      && (!*(_QWORD *)(v67 + 16) && *(_QWORD *)(v67 + 24) == 0xE000000000000000
       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      specialized Graph.remove(_:)(v64);
      outlined consume of NodePersonality(v67);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of String((uint64_t)&v98);
      v29 = v15;
      v37 = v17;
      if (!v29)
        goto LABEL_16;
      goto LABEL_21;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    outlined release of String((uint64_t)&v98);
    v52 = v67;
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of String((uint64_t)&v98);
    v52 = v67;
  }
  outlined consume of NodePersonality(v52);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized Graph.insertMaterialXDefaultValues(nodeDefStore:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  __int128 v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54[12];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _OWORD v68[9];
  __int128 v69;
  _BYTE v70[25];
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74[3];
  unint64_t v75;

  v4 = v3;
  v5 = v2;
  result = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(result + 16);
  if (!v8)
    return result;
  v10 = result + 32;
  swift_bridgeObjectRetain_n();
  v11 = 0;
  v75 = v8;
  v53 = v10;
  while (1)
  {
    v12 = v10 + 48 * v11;
    if (*(_QWORD *)(v12 + 24) == -7)
      goto LABEL_13;
    v13 = *(_OWORD *)v12;
    v14 = *(_OWORD *)(v12 + 16);
    *(_OWORD *)&v70[9] = *(_OWORD *)(v12 + 25);
    v69 = v13;
    *(_OWORD *)v70 = v14;
    outlined init with take of NodePersonality(&v69, &v71);
    outlined init with take of NodePersonality(&v71, v74);
    v15 = v74[0];
    if (v74[0] >> 61 != 5)
      goto LABEL_13;
    v72 = *((_QWORD *)&v69 + 1);
    v73 = *(_QWORD *)v70;
    v74[0] &= 0x1FFFFFFFFFFFFFFFuLL;
    v17 = *(_QWORD *)(v15 + 16);
    v16 = *(void **)(v15 + 24);
    v18 = *(_QWORD *)(a1 + 16);
    swift_bridgeObjectRetain();
    if (!v18)
    {
      outlined retain of [Input]((uint64_t)&v73);
      outlined retain of NodePersonality(&v71);
      outlined retain of [Input]((uint64_t)&v72);
      goto LABEL_22;
    }
    swift_bridgeObjectRetain();
    outlined retain of [Input]((uint64_t)&v73);
    outlined retain of NodePersonality(&v71);
    outlined retain of [Input]((uint64_t)&v72);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(v17, (uint64_t)v16);
    if ((v20 & 1) == 0)
      break;
    v21 = v72;
    v22 = (_OWORD *)(*(_QWORD *)(a1 + 56) + 144 * v19);
    v68[0] = *v22;
    v23 = v22[4];
    v25 = v22[1];
    v24 = v22[2];
    v68[3] = v22[3];
    v68[4] = v23;
    v68[1] = v25;
    v68[2] = v24;
    v26 = v22[8];
    v28 = v22[5];
    v27 = v22[6];
    v68[7] = v22[7];
    v68[8] = v26;
    v68[5] = v28;
    v68[6] = v27;
    outlined retain of NodeDef((uint64_t)v68);
    swift_bridgeObjectRelease_n();
    v29 = *(_QWORD *)(v21 + 16);
    if (v29)
    {
      swift_bridgeObjectRetain_n();
      v30 = (_QWORD *)(v21 + 80);
      while (1)
      {
        v31 = *v30;
        v32 = *((_BYTE *)v30 - 8);
        v34 = *(v30 - 3);
        v33 = *(v30 - 2);
        v36 = *(v30 - 5);
        v35 = *(v30 - 4);
        *(_QWORD *)&v55 = *(v30 - 6);
        *((_QWORD *)&v55 + 1) = v36;
        *(_QWORD *)&v56 = v35;
        *((_QWORD *)&v56 + 1) = v34;
        *(_QWORD *)&v57 = v33;
        BYTE8(v57) = v32;
        *(_QWORD *)&v58 = v31;
        swift_retain();
        swift_bridgeObjectRetain();
        specialized closure #1 in closure #1 in Graph.insertMaterialXDefaultValues(nodeDefStore:)(&v55, v68, (unint64_t)&v69, (_OWORD *)v5, a1, a2);
        if (v4)
          goto LABEL_16;
        v30 += 7;
        swift_bridgeObjectRelease();
        swift_release();
        if (!--v29)
        {
          outlined release of [Input]((uint64_t)&v72);
          outlined release of [Input]((uint64_t)&v72);
          break;
        }
      }
    }
    outlined release of NodeDef((uint64_t)v68);
    outlined release of NodePersonality(&v71);
    outlined release of [Input]((uint64_t)&v72);
    outlined release of [Input]((uint64_t)&v73);
    v8 = v75;
    v10 = v53;
LABEL_13:
    if ((uint64_t)++v11 >= (uint64_t)v8)
      return swift_bridgeObjectRelease_n();
    if (v11 >= v8)
    {
      __break(1u);
LABEL_16:
      swift_bridgeObjectRelease();
      swift_release();
      outlined release of [Input]((uint64_t)&v72);
      outlined release of [Input]((uint64_t)&v72);
      outlined release of NodeDef((uint64_t)v68);
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease();
LABEL_22:
  *(_QWORD *)&v54[0] = v17;
  *((_QWORD *)&v54[0] + 1) = v16;
  _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi18_((uint64_t)v54);
  *(_QWORD *)&v55 = 0;
  *((_QWORD *)&v55 + 1) = 0xE000000000000000;
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v55 = 0xD000000000000020;
  *((_QWORD *)&v55 + 1) = 0x8000000245FCBB70;
  v37._countAndFlagsBits = v17;
  v37._object = v16;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  v38._countAndFlagsBits = 0x6F6E20726F662027;
  v38._object = (void *)0xEC00000027206564;
  String.append(_:)(v38);
  v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  v40._countAndFlagsBits = 1701080942;
  v40._object = (void *)0xE400000000000000;
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  v41._countAndFlagsBits = 39;
  v41._object = (void *)0xE100000000000000;
  String.append(_:)(v41);
  v42 = v55;
  outlined init with take of UserGraphError.ErrorType(v54, (uint64_t)&v55);
  v67 = v42;
  lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
  swift_allocError();
  *v43 = v55;
  v44 = v59;
  v46 = v56;
  v45 = v57;
  v43[3] = v58;
  v43[4] = v44;
  v43[1] = v46;
  v43[2] = v45;
  v47 = v63;
  v49 = v60;
  v48 = v61;
  v43[7] = v62;
  v43[8] = v47;
  v43[5] = v49;
  v43[6] = v48;
  v50 = v67;
  v52 = v64;
  v51 = v65;
  v43[11] = v66;
  v43[12] = v50;
  v43[9] = v52;
  v43[10] = v51;
  swift_willThrow();
LABEL_17:
  outlined release of NodePersonality(&v71);
  outlined release of [Input]((uint64_t)&v72);
  outlined release of [Input]((uint64_t)&v73);
  return swift_bridgeObjectRelease_n();
}

uint64_t specialized Graph.removePassthroughNodes(nodeDefStore:)(uint64_t result)
{
  uint64_t *v1;
  _QWORD *v2;
  int64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD *rawValue;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  _QWORD *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  _OWORD *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _OWORD *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _OWORD *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  unint64_t v106;
  uint64_t *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  char v115;
  char v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  unint64_t v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146[14];
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  _OWORD v151[3];
  uint64_t v152;
  __int128 v153;
  _QWORD v154[5];
  char v155;
  uint64_t v156;
  _QWORD v157[5];
  char v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  __int128 v164;
  _QWORD *v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  char v169;
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  char v173;
  uint64_t v174;

  v2 = (_QWORD *)v1[8];
  v3 = v2[2];
  if (!v3)
    return result;
  v4 = result;
  v5 = v2 + 4;
  v6 = v2 + 7;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  v107 = v1;
  v108 = v2;
  v110 = v3;
  v111 = v2 + 7;
  v112 = v2 + 4;
  while (1)
  {
    if (v7 >= v3)
      goto LABEL_73;
    v8 = 48 * v7;
    if (v6[6 * v7] == -7)
      break;
LABEL_15:
    v11 = (uint64_t)v5 + v8;
    v12 = *(_QWORD *)v11;
    if (*(_QWORD *)v11 >> 61 != 5)
      goto LABEL_5;
    v13 = *(_QWORD *)(v11 + 8);
    v14 = *(_QWORD *)(v11 + 16);
    v106 = *(_QWORD *)(v11 + 24);
    v104 = *(_QWORD *)(v11 + 32);
    v105 = *(_BYTE *)(v11 + 40);
    v16 = *(_QWORD *)(v12 + 16);
    v15 = *(_QWORD *)(v12 + 24);
    v17 = *(_QWORD *)(v4 + 16);
    swift_bridgeObjectRetain();
    if (!v17)
    {
      outlined copy of NodePersonality(v12);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_69:
      *(_QWORD *)&v126 = v16;
      *((_QWORD *)&v126 + 1) = v15;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi18_((uint64_t)&v126);
      outlined init with take of UserGraphError.ErrorType(&v126, (uint64_t)&v133);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      v145 = 0uLL;
      swift_allocError();
      *v90 = v133;
      v91 = v137;
      v93 = v134;
      v92 = v135;
      v90[3] = v136;
      v90[4] = v91;
      v90[1] = v93;
      v90[2] = v92;
      v94 = v141;
      v96 = v138;
      v95 = v139;
      v90[7] = v140;
      v90[8] = v94;
      v90[5] = v96;
      v90[6] = v95;
      v97 = v145;
      v99 = v142;
      v98 = v143;
      v90[11] = v144;
      v90[12] = v97;
      v90[9] = v99;
      v90[10] = v98;
      swift_willThrow();
      outlined consume of NodePersonality(v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v12);
    v18 = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v15);
    if ((v20 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_69;
    }
    v109 = v4;
    v21 = (__int128 *)(*(_QWORD *)(v4 + 56) + 144 * v19);
    v117 = *v21;
    v22 = v21[4];
    v24 = v21[1];
    v23 = v21[2];
    v120 = v21[3];
    v121 = v22;
    v118 = v24;
    v119 = v23;
    v25 = v21[8];
    v27 = v21[5];
    v26 = v21[6];
    v124 = v21[7];
    v125 = v25;
    v122 = v27;
    v123 = v26;
    outlined retain of NodeDef((uint64_t)&v117);
    swift_bridgeObjectRelease_n();
    if (one-time initialization token for passthroughNodeNames != -1)
      swift_once();
    rawValue = passthroughNodeNames._rawValue;
    v29 = *((_QWORD *)&v118 + 1);
    if (!*((_QWORD *)passthroughNodeNames._rawValue + 2))
    {
      swift_bridgeObjectRetain();
LABEL_4:
      outlined release of NodeDef((uint64_t)&v117);
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(v12);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v3 = v110;
      v6 = v111;
      v5 = v112;
      goto LABEL_5;
    }
    v30 = v118;
    swift_bridgeObjectRetain();
    v31 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v29);
    if ((v32 & 1) == 0)
      goto LABEL_4;
    v100 = v12;
    v101 = v2;
    v102 = v14;
    v33 = (uint64_t *)(rawValue[7] + 16 * v31);
    v34 = v33[1];
    v174 = *v33;
    swift_bridgeObjectRetain();
    outlined release of NodeDef((uint64_t)&v117);
    swift_bridgeObjectRelease();
    v103 = v18;
    v35 = *(_QWORD *)(v18 + 16);
    if (!v35)
    {
LABEL_63:
      *(_QWORD *)&v126 = v100;
      *((_QWORD *)&v126 + 1) = v103;
      v127 = v102;
      v128 = v106;
      v129 = v104;
      v130 = v105;
      v131 = v174;
      v132 = v34;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v126);
      outlined init with take of UserGraphError.ErrorType(&v126, (uint64_t)&v133);
      v145 = 0uLL;
      outlined copy of NodePersonality(v100);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined release of UserGraphError((unint64_t *)&v133);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      swift_allocError();
      *v70 = v133;
      v71 = v137;
      v73 = v134;
      v72 = v135;
      v70[3] = v136;
      v70[4] = v71;
      v70[1] = v73;
      v70[2] = v72;
      v74 = v141;
      v76 = v138;
      v75 = v139;
      v70[7] = v140;
      v70[8] = v74;
      v70[5] = v76;
      v70[6] = v75;
      v77 = v145;
      v79 = v142;
      v78 = v143;
      v70[11] = v144;
      v70[12] = v77;
      v70[9] = v79;
      v70[10] = v78;
      swift_willThrow();
      return swift_bridgeObjectRelease();
    }
    v36 = (_QWORD *)(v18 + 80);
    v113 = v34;
    while (1)
    {
      v37 = *(v36 - 6);
      v114 = *(v36 - 5);
      v38 = *(v36 - 4);
      v39 = *(v36 - 2);
      v40 = *((_BYTE *)v36 - 8);
      v41 = *v36;
      if (v38 == v174 && *(v36 - 3) == v34)
        break;
      v34 = *(v36 - 3);
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_32;
      v36 += 7;
      --v35;
      v34 = v113;
      if (!v35)
        goto LABEL_63;
    }
    v38 = v174;
LABEL_32:
    v157[0] = v37;
    v157[1] = v114;
    v157[2] = v38;
    v157[3] = v34;
    v157[4] = v39;
    v158 = v40;
    v159 = v41;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v43 = v108;
    v44 = *v107;
    v45 = *(_OWORD *)(v107 + 3);
    v46 = v107[5];
    v47 = v107[16];
    v116 = *((_BYTE *)v107 + 120);
    v115 = *((_BYTE *)v107 + 168);
    v161 = *(_OWORD *)(v107 + 1);
    v162 = v45;
    v160 = v44;
    v163 = v46;
    v164 = *((_OWORD *)v107 + 3);
    v165 = v108;
    v166 = *(_OWORD *)(v107 + 9);
    v167 = *(_OWORD *)(v107 + 11);
    v168 = *(_OWORD *)(v107 + 13);
    v169 = v116;
    v170 = v47;
    v171 = *(_OWORD *)(v107 + 17);
    v172 = *(_OWORD *)(v107 + 19);
    v173 = v115;
    Graph.edge(to:)((uint64_t)v157, v146);
    outlined init with take of MetalFunctionNode?((uint64_t)v146, (uint64_t)&v147, &demangling cache variable for type metadata for Edge?);
    if (*((_QWORD *)&v147 + 1))
    {
      v151[0] = v147;
      v151[1] = v148;
      v151[2] = v149;
      v152 = v150;
      v153 = v148;
      swift_retain();
      outlined retain of String((uint64_t)&v153);
      outlined release of Edge?(v146);
      v48 = *(_QWORD *)(v102 + 16);
      if (!v48)
      {
LABEL_64:
        *(_QWORD *)&v126 = v100;
        *((_QWORD *)&v126 + 1) = v103;
        v127 = v102;
        v128 = v106;
        v129 = v104;
        v130 = v105;
        v131 = 7632239;
        v132 = 0xE300000000000000;
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_((uint64_t)&v126);
        outlined init with take of UserGraphError.ErrorType(&v126, (uint64_t)&v133);
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        v145 = 0uLL;
        swift_allocError();
        *v80 = v133;
        v81 = v137;
        v83 = v134;
        v82 = v135;
        v80[3] = v136;
        v80[4] = v81;
        v80[1] = v83;
        v80[2] = v82;
        v84 = v141;
        v86 = v138;
        v85 = v139;
        v80[7] = v140;
        v80[8] = v84;
        v80[5] = v86;
        v80[6] = v85;
        v87 = v145;
        v89 = v142;
        v88 = v143;
        v80[11] = v144;
        v80[12] = v87;
        v80[9] = v89;
        v80[10] = v88;
        outlined copy of NodePersonality(v100);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_willThrow();
        swift_release();
        swift_bridgeObjectRelease();
        outlined release of String((uint64_t)&v153);
        swift_bridgeObjectRelease();
        swift_release();
        outlined consume of NodePersonality(v100);
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      v49 = (_QWORD *)(v102 + 80);
      while (1)
      {
        v50 = *(v49 - 5);
        v174 = *(v49 - 6);
        v51 = *(v49 - 4);
        v52 = *(v49 - 3);
        v53 = *(v49 - 2);
        v54 = *((_BYTE *)v49 - 8);
        v55 = *v49;
        if (v51 == 7632239 && v52 == 0xE300000000000000)
          break;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_43;
        v49 += 7;
        if (!--v48)
          goto LABEL_64;
      }
      v52 = 0xE300000000000000;
LABEL_43:
      v154[0] = v174;
      v154[1] = v50;
      v154[2] = v51;
      v154[3] = v52;
      v154[4] = v53;
      v155 = v54;
      v156 = v55;
      swift_retain();
      swift_bridgeObjectRetain();
      Graph.moveEdges(from:to:)((uint64_t)v154, (uint64_t)v151);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      outlined release of String((uint64_t)&v153);
      v43 = v108;
    }
    specialized Graph.removeEdges(connectedTo:)(v106);
    result = swift_isUniquelyReferenced_nonNull_native();
    v6 = v111;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v43);
      v43 = (_QWORD *)result;
    }
    v5 = v112;
    if ((v106 & 0x8000000000000000) != 0)
      goto LABEL_74;
    if (v106 >= v43[2])
      goto LABEL_75;
    v57 = &v43[6 * v106];
    v58 = v57 + 4;
    v57[7] = -7;
    v59 = *(_QWORD *)(v57[5] + 16);
    v108 = v43;
    if (v59)
    {
      v60 = v59;
      swift_bridgeObjectRetain();
      v61 = 0;
      v62 = 0;
      while (1)
      {
        v63 = (_QWORD *)v58[1];
        swift_retain();
        swift_bridgeObjectRetain();
        result = swift_isUniquelyReferenced_nonNull_native();
        v58[1] = v63;
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v63);
          v63 = (_QWORD *)result;
          v58[1] = result;
        }
        if (v62 >= v63[2])
          goto LABEL_71;
        ++v62;
        v63[v61 + 4] = -7;
        swift_bridgeObjectRelease();
        swift_release();
        v61 += 7;
        if (v60 == v62)
        {
          swift_bridgeObjectRelease();
          v6 = v111;
          v5 = v112;
          v43 = v108;
          break;
        }
      }
    }
    v64 = v58[2];
    v65 = v107;
    if (*(_QWORD *)(v64 + 16))
    {
      v66 = *(_QWORD *)(v64 + 16);
      swift_bridgeObjectRetain();
      v67 = 0;
      v68 = 0;
      while (1)
      {
        v69 = (_QWORD *)v58[2];
        swift_retain();
        swift_bridgeObjectRetain();
        result = swift_isUniquelyReferenced_nonNull_native();
        v58[2] = v69;
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v69);
          v69 = (_QWORD *)result;
          v58[2] = result;
        }
        if (v68 >= v69[2])
          goto LABEL_72;
        ++v68;
        v69[v67 + 4] = -7;
        swift_bridgeObjectRelease();
        swift_release();
        v67 += 7;
        if (v66 == v68)
        {
          swift_bridgeObjectRelease();
          v6 = v111;
          v5 = v112;
          v65 = v107;
          v43 = v108;
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of NodePersonality(v100);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v65[8] = (uint64_t)v43;
    v2 = v101;
    v3 = v110;
    v4 = v109;
LABEL_5:
    if ((uint64_t)++v7 >= v3)
      return swift_bridgeObjectRelease();
  }
  if ((uint64_t)(v7 + 1) >= v3)
    return swift_bridgeObjectRelease();
  for (i = 48 * v7++ + 104; ; i += 48)
  {
    if (*(_QWORD *)((char *)v2 + i) != -7)
    {
      v8 = i - 56;
      goto LABEL_15;
    }
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
      break;
    ++v7;
    if (v10 >= v3)
      return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
  return result;
}

uint64_t outlined consume of Graph.Adjacent?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized Sequence.forEach(_:)(_QWORD *a1, void (*a2)(uint64_t, _OWORD *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _OWORD v17[3];
  uint64_t v18;
  __int128 v19;
  void (*v20)(uint64_t, _OWORD *);

  v3 = v2;
  v20 = a2;
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 16);
  if (v5 && (v6 = a1[3], v7 = a1[4] >> 1, v7 != v6))
  {
    v16 = v7 - v6;
    v9 = a1[2];
    v10 = *(_QWORD *)(v4 + 32);
    if (v6 <= v7)
      v11 = a1[4] >> 1;
    else
      v11 = a1[3];
    swift_bridgeObjectRetain();
    result = swift_unknownObjectRetain();
    v12 = 0;
    v13 = v9 + 56 * v6;
    v14 = v11 - v6;
    while (v14 != v12)
    {
      v15 = *(_OWORD *)(v13 + 16);
      v17[0] = *(_OWORD *)v13;
      v17[1] = v15;
      v17[2] = *(_OWORD *)(v13 + 32);
      v18 = *(_QWORD *)(v13 + 48);
      v19 = v15;
      swift_retain();
      outlined retain of String((uint64_t)&v19);
      v20(v10, v17);
      swift_release();
      result = outlined release of String((uint64_t)&v19);
      if (!v3 && v5 - 1 != v12)
      {
        v10 = *(_QWORD *)(v4 + 8 * v12++ + 40);
        v13 += 56;
        if (v16 != v12)
          continue;
      }
      goto LABEL_4;
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
LABEL_4:
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized Graph.resolveSwizzleNodes(nodeDefStore:)()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  Swift::Bool v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  int v45;
  __int128 v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  char v57;
  unint64_t v58;

  v2 = v1;
  v3 = v0;
  v4 = type metadata accessor for CharacterSet();
  v51 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v44 - v8;
  *(_QWORD *)&v54 = &outlined read-only object #0 of Graph.resolveSwizzleNodes(nodeDefStore:);
  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x24BDCB778]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Unicode.Scalar]);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [Unicode.Scalar] and conformance [A], &demangling cache variable for type metadata for [Unicode.Scalar], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(_QWORD *)&v54 = &outlined read-only object #1 of Graph.resolveSwizzleNodes(nodeDefStore:);
  v52 = v4;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v10 = *(_QWORD *)(v0 + 64);
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v12 = v10 + 32;
    v13 = v10 + 56;
    result = swift_bridgeObjectRetain();
    v15 = 0;
    v44 = result;
    v16 = result + 104;
    v17 = MEMORY[0x24BEE4AF8];
    v53 = v3;
    v49 = v13;
    v50 = v12;
    v47 = v7;
    v48 = v9;
    while (1)
    {
      if (v15 >= v11)
        goto LABEL_33;
      v18 = 48 * v15;
      if (*(_QWORD *)(v13 + 48 * v15) == -7)
        break;
LABEL_15:
      v21 = v12 + v18;
      v22 = *(_QWORD *)v21;
      if (*(_QWORD *)v21 >> 61 == 5)
      {
        v58 = v17;
        v24 = *(_QWORD *)(v21 + 8);
        v23 = *(_QWORD *)(v21 + 16);
        v46 = *(_OWORD *)(v21 + 24);
        v45 = *(unsigned __int8 *)(v21 + 40);
        outlined copy of NodePersonality(v22);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of NodePersonality(v22);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v25._countAndFlagsBits = 0x7A7A6977735F444ELL;
        v25._object = (void *)0xEA0000000000656CLL;
        v26 = String.hasPrefix(_:)(v25);
        v27 = v24;
        swift_bridgeObjectRelease();
        outlined consume of NodePersonality(v22);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v26)
        {
          v28 = v23;
          v29 = v27;
          v30 = v58;
          result = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)&v54 = v30;
          if ((result & 1) == 0)
          {
            result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v30 + 16) + 1, 1);
            v30 = v54;
          }
          v32 = *(_QWORD *)(v30 + 16);
          v31 = *(_QWORD *)(v30 + 24);
          v33 = v32 + 1;
          if (v32 >= v31 >> 1)
          {
            v58 = v32 + 1;
            result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
            v33 = v58;
            v30 = v54;
          }
          *(_QWORD *)(v30 + 16) = v33;
          v34 = v30 + 48 * v32;
          *(_QWORD *)(v34 + 32) = v22;
          *(_QWORD *)(v34 + 40) = v29;
          *(_QWORD *)(v34 + 48) = v28;
          *(_OWORD *)(v34 + 56) = v46;
          *(_BYTE *)(v34 + 72) = v45;
          v17 = v30;
        }
        else
        {
          outlined consume of NodePersonality(v22);
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          v17 = v58;
        }
        v13 = v49;
        v12 = v50;
        v7 = v47;
        v9 = v48;
      }
      ++v15;
      v3 = v53;
      if ((uint64_t)v15 >= v11)
        goto LABEL_22;
    }
    if ((uint64_t)(v15 + 1) < v11)
    {
      v19 = 48 * v15++;
      while (1)
      {
        if (*(_QWORD *)(v16 + v19) != -7)
        {
          v18 = v19 + 48;
          goto LABEL_15;
        }
        v20 = v15 + 1;
        if (__OFADD__(v15, 1))
          break;
        ++v15;
        v19 += 48;
        if (v20 >= v11)
          goto LABEL_22;
      }
      __break(1u);
LABEL_33:
      __break(1u);
      return result;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    v35 = *(_QWORD *)(v17 + 16);
    if (v35)
      goto LABEL_25;
  }
  else
  {
    v17 = MEMORY[0x24BEE4AF8];
    v35 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (v35)
    {
LABEL_25:
      swift_retain();
      v58 = v17;
      v36 = (uint64_t *)(v17 + 40);
      while (1)
      {
        v38 = *(v36 - 1);
        v37 = *v36;
        v39 = v36[1];
        v40 = *((_BYTE *)v36 + 32);
        v41 = *((_OWORD *)v36 + 1);
        *(_QWORD *)&v54 = v38;
        *((_QWORD *)&v54 + 1) = v37;
        v55 = v39;
        v56 = v41;
        v57 = v40;
        outlined copy of NodePersonality(v38);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        closure #1 in Graph.resolveSwizzleNodes(nodeDefStore:)(&v54, v3, (uint64_t)v9, (uint64_t)v7);
        if (v2)
          break;
        outlined consume of NodePersonality(v38);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v36 += 6;
        if (!--v35)
        {
          swift_release();
          goto LABEL_29;
        }
      }
      outlined consume of NodePersonality(v38);
      swift_release_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }
  }
LABEL_29:
  swift_release();
LABEL_31:
  v42 = v52;
  v43 = *(void (**)(char *, uint64_t))(v51 + 8);
  v43(v7, v52);
  return ((uint64_t (*)(char *, uint64_t))v43)(v9, v42);
}

uint64_t specialized ShaderGraphNode.metalTextureType.getter(unint64_t a1)
{
  Swift::String v1;
  Swift::Bool v2;
  Swift::String v3;
  Swift::Bool v4;
  Swift::String v5;
  Swift::Bool v6;
  Swift::String v7;
  Swift::String v8;
  Swift::Bool v9;
  uint64_t *v10;
  Swift::String v11;
  Swift::Bool v12;
  Swift::String v13;
  Swift::String v14;
  Swift::Bool v15;
  Swift::String v16;
  Swift::String v17;
  Swift::Bool v18;
  Swift::String v19;
  Swift::Bool v20;
  Swift::String v21;
  Swift::Bool v22;
  Swift::String v23;
  Swift::String v24;
  Swift::Bool v25;
  Swift::String v26;
  Swift::Bool v27;

  if (a1 >> 61 != 5)
    goto LABEL_37;
  swift_bridgeObjectRetain_n();
  v1._countAndFlagsBits = 0x6567616D695F444ELL;
  v1._object = (void *)0xE800000000000000;
  v2 = String.hasPrefix(_:)(v1);
  swift_bridgeObjectRelease();
  if (v2)
    goto LABEL_5;
  swift_bridgeObjectRetain();
  v3._object = (void *)0x8000000245FC82F0;
  v3._countAndFlagsBits = 0xD000000000000014;
  v4 = String.hasPrefix(_:)(v3);
  swift_bridgeObjectRelease();
  if (v4
    || (swift_bridgeObjectRetain(),
        v5._object = (void *)0x8000000245FCB370,
        v5._countAndFlagsBits = 0xD000000000000014,
        v6 = String.hasPrefix(_:)(v5),
        swift_bridgeObjectRelease(),
        v6))
  {
LABEL_5:
    v7._countAndFlagsBits = 0x33726F6C6F63;
    v7._object = (void *)0xE600000000000000;
    if (String.hasSuffix(_:)(v7))
    {
      swift_bridgeObjectRelease();
LABEL_8:
      if (one-time initialization token for texture2d_half != -1)
        swift_once();
      v10 = &static MetalDataType.texture2d_half;
      return *v10;
    }
    v8._countAndFlagsBits = 0x34726F6C6F63;
    v8._object = (void *)0xE600000000000000;
    v9 = String.hasSuffix(_:)(v8);
    swift_bridgeObjectRelease();
    if (v9)
      goto LABEL_8;
    goto LABEL_37;
  }
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = 0xD00000000000001DLL;
  v11._object = (void *)0x8000000245FCB390;
  v12 = String.hasPrefix(_:)(v11);
  swift_bridgeObjectRelease();
  if (!v12)
  {
    swift_bridgeObjectRetain();
    v14._countAndFlagsBits = 0xD000000000000018;
    v14._object = (void *)0x8000000245FCB3B0;
    v15 = String.hasPrefix(_:)(v14);
    swift_bridgeObjectRelease();
    if (v15)
    {
      v16._countAndFlagsBits = 0x33726F6C6F63;
      v16._object = (void *)0xE600000000000000;
      if (String.hasSuffix(_:)(v16))
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v24._countAndFlagsBits = 0x34726F6C6F63;
        v24._object = (void *)0xE600000000000000;
        v25 = String.hasSuffix(_:)(v24);
        swift_bridgeObjectRelease();
        if (!v25)
        {
          if (one-time initialization token for texture3d_float != -1)
            swift_once();
          v10 = &static MetalDataType.texture3d_float;
          return *v10;
        }
      }
      if (one-time initialization token for texture3d_half != -1)
        swift_once();
      v10 = &static MetalDataType.texture3d_half;
      return *v10;
    }
    swift_bridgeObjectRetain();
    v19._countAndFlagsBits = 0xD000000000000017;
    v19._object = (void *)0x8000000245FC8310;
    v20 = String.hasPrefix(_:)(v19);
    swift_bridgeObjectRelease();
    if (v20
      || (swift_bridgeObjectRetain(),
          v21._countAndFlagsBits = 0xD000000000000018,
          v21._object = (void *)0x8000000245FCB3D0,
          v22 = String.hasPrefix(_:)(v21),
          swift_bridgeObjectRelease(),
          v22))
    {
      v23._countAndFlagsBits = 0x33726F6C6F63;
      v23._object = (void *)0xE600000000000000;
      if (String.hasSuffix(_:)(v23))
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v26._countAndFlagsBits = 0x34726F6C6F63;
        v26._object = (void *)0xE600000000000000;
        v27 = String.hasSuffix(_:)(v26);
        swift_bridgeObjectRelease();
        if (!v27)
        {
          if (one-time initialization token for texturecube_float != -1)
            swift_once();
          v10 = &static MetalDataType.texturecube_float;
          return *v10;
        }
      }
      if (one-time initialization token for texturecube_half != -1)
        swift_once();
      v10 = &static MetalDataType.texturecube_half;
      return *v10;
    }
    swift_bridgeObjectRelease();
LABEL_37:
    if (one-time initialization token for texture2d_float != -1)
      swift_once();
    v10 = &static MetalDataType.texture2d_float;
    return *v10;
  }
  v13._countAndFlagsBits = 0x33726F6C6F63;
  v13._object = (void *)0xE600000000000000;
  if (String.hasSuffix(_:)(v13))
  {
    swift_bridgeObjectRelease();
LABEL_18:
    if (one-time initialization token for texture2darray_half != -1)
      swift_once();
    v10 = &static MetalDataType.texture2darray_half;
    return *v10;
  }
  v17._countAndFlagsBits = 0x34726F6C6F63;
  v17._object = (void *)0xE600000000000000;
  v18 = String.hasSuffix(_:)(v17);
  swift_bridgeObjectRelease();
  if (v18)
    goto LABEL_18;
  if (one-time initialization token for texture2darray_float != -1)
    swift_once();
  v10 = &static MetalDataType.texture2darray_float;
  return *v10;
}

double specialized Graph.insertCreateSampler(label:)@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  double result;
  __int128 v32;
  _OWORD v33[2];

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_245FC2050;
  if (one-time initialization token for coord != -1)
    swift_once();
  v5 = static MetalDataType.coord;
  *(_QWORD *)(inited + 32) = 0x64726F6F63;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  *(_QWORD *)(inited + 48) = v5;
  v6 = one-time initialization token for address;
  swift_retain();
  if (v6 != -1)
    swift_once();
  v7 = static MetalDataType.address;
  *(_QWORD *)(inited + 56) = 0x73736572646461;
  *(_QWORD *)(inited + 64) = 0xE700000000000000;
  *(_QWORD *)(inited + 72) = v7;
  v8 = one-time initialization token for s_address;
  swift_retain();
  if (v8 != -1)
    swift_once();
  v9 = static MetalDataType.s_address;
  *(_QWORD *)(inited + 80) = 0x7365726464615F73;
  *(_QWORD *)(inited + 88) = 0xE900000000000073;
  *(_QWORD *)(inited + 96) = v9;
  v10 = one-time initialization token for t_address;
  swift_retain();
  if (v10 != -1)
    swift_once();
  v11 = static MetalDataType.t_address;
  *(_QWORD *)(inited + 104) = 0x7365726464615F74;
  *(_QWORD *)(inited + 112) = 0xE900000000000073;
  *(_QWORD *)(inited + 120) = v11;
  v12 = one-time initialization token for r_address;
  swift_retain();
  if (v12 != -1)
    swift_once();
  v13 = static MetalDataType.r_address;
  *(_QWORD *)(inited + 128) = 0x7365726464615F72;
  *(_QWORD *)(inited + 136) = 0xE900000000000073;
  *(_QWORD *)(inited + 144) = v13;
  v14 = one-time initialization token for border_color;
  swift_retain();
  if (v14 != -1)
    swift_once();
  v15 = static MetalDataType.border_color;
  strcpy((char *)(inited + 152), "border_color");
  *(_BYTE *)(inited + 165) = 0;
  *(_WORD *)(inited + 166) = -5120;
  *(_QWORD *)(inited + 168) = v15;
  v16 = one-time initialization token for mag_filter;
  swift_retain();
  if (v16 != -1)
    swift_once();
  v17 = static MetalDataType.mag_filter;
  *(_QWORD *)(inited + 176) = 0x746C69665F67616DLL;
  *(_QWORD *)(inited + 184) = 0xEA00000000007265;
  *(_QWORD *)(inited + 192) = v17;
  v18 = one-time initialization token for min_filter;
  swift_retain();
  if (v18 != -1)
    swift_once();
  v19 = static MetalDataType.min_filter;
  *(_QWORD *)(inited + 200) = 0x746C69665F6E696DLL;
  *(_QWORD *)(inited + 208) = 0xEA00000000007265;
  *(_QWORD *)(inited + 216) = v19;
  v20 = one-time initialization token for mip_filter;
  swift_retain();
  if (v20 != -1)
    swift_once();
  v21 = static MetalDataType.mip_filter;
  *(_QWORD *)(inited + 224) = 0x746C69665F70696DLL;
  *(_QWORD *)(inited + 232) = 0xEA00000000007265;
  *(_QWORD *)(inited + 240) = v21;
  v22 = one-time initialization token for max_anisotropy;
  swift_retain();
  if (v22 != -1)
    swift_once();
  v23 = static MetalDataType.max_anisotropy;
  strcpy((char *)(inited + 248), "max_anisotropy");
  *(_BYTE *)(inited + 263) = -18;
  *(_QWORD *)(inited + 264) = v23;
  v24 = one-time initialization token for lod_clamp;
  swift_retain();
  if (v24 != -1)
    swift_once();
  v25 = static MetalDataType.lod_clamp;
  *(_QWORD *)(inited + 272) = 0x6D616C635F646F6CLL;
  *(_QWORD *)(inited + 280) = 0xE900000000000070;
  *(_QWORD *)(inited + 288) = v25;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  v26 = swift_initStackObject();
  *(_OWORD *)(v26 + 16) = xmmword_245FBECD0;
  v27 = one-time initialization token for sampler;
  swift_retain();
  if (v27 != -1)
    swift_once();
  *(_QWORD *)(v26 + 32) = 7632239;
  v28 = static MetalDataType.sampler;
  *(_QWORD *)(v26 + 40) = 0xE300000000000000;
  *(_QWORD *)(v26 + 48) = v28;
  v29 = *(_QWORD *)(v2 + 40);
  swift_retain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v29, inited, v26, 0xE000000000000008, v2 + 64, v2, (unint64_t *)&v32);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_setDeallocating();
  swift_arrayDestroy();
  v30 = v33[0];
  *a1 = v32;
  a1[1] = v30;
  result = *(double *)((char *)v33 + 9);
  *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)v33 + 9);
  return result;
}

double specialized Input.prependFunction(_:label:arguments:in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  unint64_t v5;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double result;
  __int128 v15;
  uint64_t v18;
  __int128 v19;
  _OWORD v20[2];
  _BYTE v21[8];
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_245FBECD0;
  v10 = *(_QWORD *)(v5 + 8);
  *(_QWORD *)(inited + 32) = 7632239;
  *(_QWORD *)(inited + 40) = 0xE300000000000000;
  *(_QWORD *)(inited + 48) = v10;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  *(_QWORD *)(v11 + 32) = v10;
  v12 = v11 | 0x2000000000000000;
  v13 = *(_QWORD *)(a4 + 40);
  swift_retain_n();
  swift_bridgeObjectRetain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v13, a3, inited, v12, a4 + 64, a4, (unint64_t *)&v19);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  ShaderGraphNode.out.getter((uint64_t)v21);
  if (v18)
  {
    outlined init with take of NodePersonality(&v19, &v26);
    outlined release of NodePersonality(&v26);
    v25 = *((_QWORD *)&v19 + 1);
    outlined release of [Input]((uint64_t)&v25);
    v24 = *(_QWORD *)&v20[0];
    outlined release of [Input]((uint64_t)&v24);
  }
  else
  {
    Graph.connect(_:to:)((uint64_t)v21, v5);
    swift_release();
    v23 = v22;
    outlined release of String((uint64_t)&v23);
    v15 = v20[0];
    *a5 = v19;
    a5[1] = v15;
    result = *(double *)((char *)v20 + 9);
    *(_OWORD *)((char *)a5 + 25) = *(_OWORD *)((char *)v20 + 9);
  }
  return result;
}

void specialized closure #1 in Graph.transformGeomPropValueNodes(surface:geometryModifier:nodeDefStore:)(__int128 *a1, NSObject *a2, uint64_t a3, _OWORD *a4)
{
  void *v4;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  unint64_t v18;
  char v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  Swift::String v36;
  uint64_t *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  char v50;
  uint64_t v51;
  void *v53;
  _OWORD *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  id v65;
  id v66;
  os_log_type_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  unint64_t v72;
  Swift::String v73;
  unint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  __int128 *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  void *v84;
  int v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  Swift::String v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  Swift::String v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  os_log_type_t type;
  int v110;
  id v111;
  id v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  os_log_t log;
  NSObject *loga;
  os_log_t logb;
  os_log_type_t v119[8];
  os_log_type_t v120;
  int v121[2];
  int v122[2];
  int v123[2];
  int v124[2];
  os_log_t v125;
  NSObject *v126;
  int v127[4];
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  unint64_t v135;
  __int128 v136;
  __int128 v137;
  _BYTE v138[32];
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  _BYTE v144[32];
  __int128 v145;
  __int128 v146;
  _OWORD v147[8];
  __int128 v148;
  uint64_t v149[14];
  uint64_t v150;
  __int128 v151;
  _OWORD v152[2];
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  _OWORD v157[3];
  uint64_t v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  _OWORD v162[2];
  __int128 v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  char v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  void *v173;
  char v174;
  uint64_t v175;
  _OWORD v176[4];
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  _OWORD v182[2];
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD v187[3];
  uint64_t v188;

  v8 = *a1;
  v9 = a1[1];
  *(_OWORD *)((char *)v162 + 9) = *(__int128 *)((char *)a1 + 25);
  v162[0] = v9;
  v161 = v8;
  v10 = *(_QWORD *)a1;
  *(_OWORD *)v127 = *(__int128 *)((char *)a1 + 8);
  v11 = *((_QWORD *)a1 + 3);
  v12 = *((_QWORD *)a1 + 4);
  v13 = *((unsigned __int8 *)a1 + 40);
  outlined init with take of NodePersonality(&v161, &v184);
  outlined init with take of NodePersonality(&v184, v187);
  v14 = v187[0];
  if (v187[0] >> 61 == 5)
  {
    LODWORD(v188) = v13;
    v187[0] &= 0x1FFFFFFFFFFFFFFFuLL;
    v15 = *(_QWORD *)(v14 + 16);
    v16 = *(_QWORD *)(v14 + 24);
    swift_bridgeObjectRetain();
    v17._object = (void *)0x8000000245FCB6F0;
    v17._countAndFlagsBits = 0xD000000000000011;
    if (!String.hasPrefix(_:)(v17))
    {
      swift_bridgeObjectRelease();
      return;
    }
    if (a2[2].isa)
    {
      swift_bridgeObjectRetain();
      v18 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
      if ((v19 & 1) != 0)
      {
        v20 = (_OWORD *)((char *)a2[7].isa + 144 * v18);
        v147[0] = *v20;
        v21 = v20[4];
        v23 = v20[1];
        v22 = v20[2];
        v147[3] = v20[3];
        v147[4] = v21;
        v147[1] = v23;
        v147[2] = v22;
        v24 = v20[8];
        v26 = v20[5];
        v25 = v20[6];
        v147[7] = v20[7];
        v148 = v24;
        v147[5] = v26;
        v147[6] = v25;
        outlined retain of NodeDef((uint64_t)v147);
        swift_bridgeObjectRelease_n();
        v27 = *(_QWORD *)(*((_QWORD *)&v148 + 1) + 16);
        if (v27)
        {
          *(_QWORD *)v121 = v12;
          *(_QWORD *)v122 = v11;
          *(_QWORD *)v123 = v10;
          v125 = (os_log_t)a4;
          log = a2;
          *(_QWORD *)v119 = a3;
          v28 = (_QWORD *)(*((_QWORD *)&v148 + 1) + 40);
          while (1)
          {
            v29 = v28[1];
            v30 = *(v28 - 1) == 7632239 && *v28 == 0xE300000000000000;
            if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              break;
            v28 += 8;
            if (!--v27)
              goto LABEL_13;
          }
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          outlined release of NodeDef((uint64_t)v147);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v38 = a4[4];
          v178 = a4[5];
          v177 = v38;
          v39 = a4[3];
          v176[2] = a4[2];
          v176[3] = v39;
          *(_OWORD *)((char *)v182 + 9) = *(_OWORD *)((char *)a4 + 153);
          v40 = a4[8];
          v182[0] = a4[9];
          v181 = v40;
          v41 = a4[7];
          v179 = a4[6];
          v180 = v41;
          v42 = *a4;
          v176[1] = a4[1];
          v176[0] = v42;
          v183 = *((_QWORD *)&v161 + 1);
          v43 = *(_QWORD *)(*((_QWORD *)&v161 + 1) + 16);
          if (!v43)
          {
LABEL_34:
            *(_QWORD *)&v153 = *(_QWORD *)&v162[0];
            v129 = *(_QWORD *)v123;
            v130 = *(_OWORD *)v127;
            v131 = *(_QWORD *)v122;
            v132 = *(_QWORD *)v121;
            v133 = v188;
            v134 = 0x706F72706D6F6567;
            v135 = 0xE800000000000000;
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v129);
            outlined init with take of UserGraphError.ErrorType((__int128 *)&v129, (uint64_t)&v136);
            lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
            v146 = 0uLL;
            v53 = (void *)swift_allocError();
            *v54 = v136;
            v55 = v139;
            v57 = v137;
            v56 = *(_OWORD *)v138;
            v54[3] = *(_OWORD *)&v138[16];
            v54[4] = v55;
            v54[1] = v57;
            v54[2] = v56;
            v58 = v143;
            v60 = v140;
            v59 = v141;
            v54[7] = v142;
            v54[8] = v58;
            v54[5] = v60;
            v54[6] = v59;
            v61 = v146;
            v63 = *(_OWORD *)v144;
            v62 = *(_OWORD *)&v144[16];
            v54[11] = v145;
            v54[12] = v61;
            v54[9] = v63;
            v54[10] = v62;
            outlined retain of [Input]((uint64_t)&v183);
            outlined retain of NodePersonality(&v184);
            outlined retain of [Input]((uint64_t)&v153);
            swift_willThrow();
LABEL_35:
            swift_release();
LABEL_36:
            if (one-time initialization token for logger != -1)
              swift_once();
            v64 = type metadata accessor for Logger();
            __swift_project_value_buffer(v64, (uint64_t)logger);
            v186 = *(_QWORD *)&v162[0];
            outlined retain of [Input]((uint64_t)&v183);
            outlined retain of NodePersonality(&v184);
            v65 = v53;
            outlined retain of [Input]((uint64_t)&v186);
            outlined retain of [Input]((uint64_t)&v183);
            outlined retain of NodePersonality(&v184);
            v66 = v53;
            outlined retain of [Input]((uint64_t)&v186);
            v32 = Logger.logObject.getter();
            v67 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v32, v67))
            {
              v68 = swift_slowAlloc();
              v69 = swift_slowAlloc();
              v128 = v69;
              *(_DWORD *)v68 = 136315394;
              *(_QWORD *)&v160 = v53;
              v70 = v53;
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
              v71 = String.init<A>(describing:)();
              *(_QWORD *)&v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, &v128);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();

              *(_WORD *)(v68 + 12) = 2080;
              *(_QWORD *)&v160 = 1701080942;
              *((_QWORD *)&v160 + 1) = 0xE400000000000000;
              v73._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v73);
              swift_bridgeObjectRelease();
              *(_QWORD *)&v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v160, *((unint64_t *)&v160 + 1), &v128);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              outlined release of NodePersonality(&v184);
              outlined release of [Input]((uint64_t)&v183);
              outlined release of [Input]((uint64_t)&v186);
              outlined release of NodePersonality(&v184);
              outlined release of [Input]((uint64_t)&v183);
              outlined release of [Input]((uint64_t)&v186);
              _os_log_impl(&dword_245E46000, v32, v67, "Got error '%s' attempting to convert a geompropvalue node ('%s') to an equivalent built-in geom prop node. Skipping conversion.", (uint8_t *)v68, 0x16u);
              swift_arrayDestroy();
              MEMORY[0x24954C33C](v69, -1, -1);
              MEMORY[0x24954C33C](v68, -1, -1);

              return;
            }

            outlined release of NodePersonality(&v184);
            outlined release of [Input]((uint64_t)&v183);
            outlined release of [Input]((uint64_t)&v186);
            outlined release of NodePersonality(&v184);
            outlined release of [Input]((uint64_t)&v183);
            v37 = &v186;
            goto LABEL_22;
          }
          v114 = *((_QWORD *)&v161 + 1);
          v115 = v29;
          v44 = (_QWORD *)(*((_QWORD *)&v161 + 1) + 80);
          while (1)
          {
            v46 = *(v44 - 6);
            v45 = *(v44 - 5);
            v47 = *(v44 - 4);
            v48 = *(v44 - 3);
            v49 = (void *)*(v44 - 2);
            v50 = *((_BYTE *)v44 - 8);
            v51 = *v44;
            if (v47 == 0x706F72706D6F6567 && v48 == 0xE800000000000000)
              break;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              goto LABEL_42;
            v44 += 7;
            if (!--v43)
            {
              v169 = v46;
              v170 = v45;
              v171 = v47;
              v172 = v48;
              v173 = v49;
              v174 = v50;
              v175 = v51;
              goto LABEL_34;
            }
          }
          v48 = 0xE800000000000000;
LABEL_42:
          v169 = v46;
          v170 = v45;
          v171 = v47;
          v172 = v48;
          v173 = v49;
          v174 = v50;
          v175 = v51;
          swift_retain();
          swift_bridgeObjectRetain();
          outlined retain of Graph((uint64_t)v176);
          Graph.edge(to:)((uint64_t)&v169, v149);
          v74 = v149[0];
          outlined init with take of MetalFunctionNode?((uint64_t)v149, (uint64_t)&v129, &demangling cache variable for type metadata for Edge?);
          if (!(_QWORD)v130)
            goto LABEL_45;
          if (v74 == -7)
          {
            outlined release of Edge?(v149);
LABEL_45:
            swift_bridgeObjectRelease();
            swift_release();
            outlined release of Graph((uint64_t)v176);
LABEL_56:
            swift_release();
            goto LABEL_17;
          }
          if ((v74 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v74 < *(_QWORD *)(v177 + 16))
          {
            v75 = *(_QWORD *)(v177 + 48 * v74 + 32);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined copy of NodePersonality(v75);
            outlined release of Edge?(v149);
            swift_bridgeObjectRelease();
            swift_release();
            outlined release of Graph((uint64_t)v176);
            if (v75 >> 61 || *(_BYTE *)(v75 + 80) != 6)
            {
              outlined consume of NodePersonality(v75);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_56;
            }
            v76 = *(void **)(v75 + 16);
            v49 = *(void **)(v75 + 24);
            v74 = *(_QWORD *)(v75 + 48);
            v44 = *(_QWORD **)(v75 + 56);
            v77 = *(_QWORD *)(v75 + 72);
            *(_QWORD *)v122 = *(_QWORD *)(v75 + 40);
            *(_QWORD *)v124 = *(_QWORD *)(v75 + 32);
            v188 = *(_QWORD *)(v75 + 64);
            v127[0] = v77;
            outlined copy of SGDataTypeStorage(v76, v49, v124[0], v122[0], v74, (int)v44, v188, v77, 6);
            outlined consume of NodePersonality(v75);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (*(_QWORD *)(*(_QWORD *)v119 + 16))
            {
              swift_bridgeObjectRetain();
              v78 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v76, (uint64_t)v49);
              if ((v79 & 1) != 0)
              {
                v80 = (__int128 *)(*(_QWORD *)(*(_QWORD *)v119 + 56) + (v78 << 6));
                v82 = v80[1];
                v81 = v80[2];
                v83 = *v80;
                *(_OWORD *)&v138[9] = *(__int128 *)((char *)v80 + 41);
                v137 = v82;
                *(_OWORD *)v138 = v81;
                v136 = v83;
                outlined retain of GeomPropDef((uint64_t)&v136);
                v84 = v49;
                v111 = v49;
                v85 = v188;
                outlined consume of SGDataTypeStorage(v76, v84, v124[0], v122[0], v74, (int)v44, v188, v127[0], 6);
                outlined consume of SGDataTypeStorage(v76, v111, v124[0], v122[0], v74, (int)v44, v85, v127[0], 6);
                specialized Graph.insertGeomPropGetter(_:outputType:nodeDefStore:)((uint64_t)&v136, v115, (uint64_t)log, &v163);
                v53 = v4;
                if (!v4)
                {
                  ShaderGraphNode.out.getter((uint64_t)&v150);
                  ShaderGraphNode.out.getter((uint64_t)&v153);
                  Graph.moveEdges(from:to:)((uint64_t)&v150, (uint64_t)&v153);
                  swift_release();
                  swift_release();
                  v157[0] = v154;
                  outlined release of String((uint64_t)v157);
                  swift_release();
                  v152[0] = v151;
                  outlined release of String((uint64_t)v152);
                  outlined init with take of NodePersonality(&v163, &v160);
                  outlined release of NodePersonality((unint64_t *)&v160);
                  *(_QWORD *)&v159 = *((_QWORD *)&v163 + 1);
                  outlined release of [Input]((uint64_t)&v159);
                  v186 = v164;
                  outlined release of [Input]((uint64_t)&v186);
                  outlined release of GeomPropDef((uint64_t)&v136);
                  return;
                }
                outlined release of GeomPropDef((uint64_t)&v136);
                goto LABEL_35;
              }
              outlined consume of SGDataTypeStorage(v76, v49, v124[0], v122[0], v74, (int)v44, v188, v127[0], 6);
            }
            v113 = v76;
            v86 = *(_QWORD *)(v114 + 16);
            LODWORD(v46) = v124[0];
            v121[0] = (int)v44;
            if (v86)
            {
              v110 = v74;
              v112 = v49;
              v87 = (_QWORD *)(v114 + 80);
              while (1)
              {
                v88 = *(v87 - 6);
                v89 = *(v87 - 5);
                v90 = *(v87 - 4);
                v44 = (_QWORD *)*(v87 - 3);
                v46 = *(v87 - 2);
                v91 = *((_BYTE *)v87 - 8);
                v74 = *v87;
                if (v90 == 0x746C7561666564 && v44 == (_QWORD *)0xE700000000000000)
                  break;
                if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  goto LABEL_68;
                v87 += 7;
                if (!--v86)
                {
                  *(_QWORD *)&v163 = v88;
                  *((_QWORD *)&v163 + 1) = v89;
                  v164 = v90;
                  v165 = v44;
                  v166 = v46;
                  v167 = v91;
                  v168 = v74;
                  LODWORD(v44) = v121[0];
                  LODWORD(v74) = v110;
                  v49 = v112;
                  LODWORD(v46) = v124[0];
                  goto LABEL_74;
                }
              }
              v44 = (_QWORD *)0xE700000000000000;
LABEL_68:
              *(_QWORD *)&v163 = v88;
              *((_QWORD *)&v163 + 1) = v89;
              v164 = v90;
              v165 = v44;
              v166 = v46;
              v167 = v91;
              v168 = v74;
              v93 = *(_OWORD *)&v125[18].isa;
              v143 = *(_OWORD *)&v125[16].isa;
              *(_OWORD *)v144 = v93;
              *(_OWORD *)&v144[9] = *(_OWORD *)((char *)&v125[19].isa + 1);
              v94 = *(_OWORD *)&v125[10].isa;
              v139 = *(_OWORD *)&v125[8].isa;
              v140 = v94;
              v95 = *(_OWORD *)&v125[14].isa;
              v141 = *(_OWORD *)&v125[12].isa;
              v142 = v95;
              v96 = *(_OWORD *)&v125[2].isa;
              v136 = *(_OWORD *)&v125->isa;
              v137 = v96;
              v97 = *(_OWORD *)&v125[6].isa;
              *(_OWORD *)v138 = *(_OWORD *)&v125[4].isa;
              *(_OWORD *)&v138[16] = v97;
              swift_retain();
              swift_bridgeObjectRetain();
              outlined retain of Graph((uint64_t)&v136);
              Graph.edge(to:)((uint64_t)&v163, &v150);
              outlined init with take of MetalFunctionNode?((uint64_t)&v150, (uint64_t)&v153, &demangling cache variable for type metadata for Edge?);
              if (*((_QWORD *)&v153 + 1))
              {
                v157[0] = v153;
                v157[1] = v154;
                v157[2] = v155;
                v158 = v156;
                v159 = v154;
                swift_retain();
                outlined retain of String((uint64_t)&v159);
                outlined release of Edge?(&v150);
                outlined release of Graph((uint64_t)&v136);
                if (one-time initialization token for logger != -1)
                  swift_once();
                v98 = type metadata accessor for Logger();
                __swift_project_value_buffer(v98, (uint64_t)logger);
                v185 = *(_QWORD *)&v162[0];
                outlined retain of [Input]((uint64_t)&v183);
                outlined retain of NodePersonality(&v184);
                outlined retain of [Input]((uint64_t)&v185);
                outlined retain of [Input]((uint64_t)&v183);
                outlined retain of NodePersonality(&v184);
                outlined copy of SGDataTypeStorage(v113, v112, v124[0], v122[0], v110, v121[0], v188, v127[0], 6);
                outlined retain of [Input]((uint64_t)&v185);
                loga = Logger.logObject.getter();
                type = static os_log_type_t.error.getter();
                if (os_log_type_enabled(loga, type))
                {
                  v99 = swift_slowAlloc();
                  v108 = swift_slowAlloc();
                  *(_QWORD *)&v160 = v108;
                  *(_DWORD *)v99 = 136315394;
                  *(_QWORD *)&v152[0] = 1701080942;
                  *((_QWORD *)&v152[0] + 1) = 0xE400000000000000;
                  v186 = *((_QWORD *)&v162[0] + 1);
                  v100._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                  String.append(_:)(v100);
                  swift_bridgeObjectRelease();
                  *(_QWORD *)&v152[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(uint64_t *)&v152[0], *((unint64_t *)&v152[0] + 1), (uint64_t *)&v160);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  outlined release of NodePersonality(&v184);
                  outlined release of [Input]((uint64_t)&v183);
                  outlined release of [Input]((uint64_t)&v185);
                  outlined release of NodePersonality(&v184);
                  outlined release of [Input]((uint64_t)&v183);
                  outlined release of [Input]((uint64_t)&v185);
                  *(_WORD *)(v99 + 12) = 2080;
                  swift_bridgeObjectRetain();
                  *(_QWORD *)&v152[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v113, (unint64_t)v112, (uint64_t *)&v160);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  v101 = v188;
                  outlined consume of SGDataTypeStorage(v113, v112, v124[0], v122[0], v110, v121[0], v188, v127[0], 6);
                  outlined consume of SGDataTypeStorage(v113, v112, v124[0], v122[0], v110, v121[0], v101, v127[0], 6);
                  outlined consume of SGDataTypeStorage(v113, v112, v124[0], v122[0], v110, v121[0], v101, v127[0], 6);
                  _os_log_impl(&dword_245E46000, loga, type, "Failed to find valid geompropvalue name for %s, given value: %s, using default value.", (uint8_t *)v99, 0x16u);
                  swift_arrayDestroy();
                  MEMORY[0x24954C33C](v108, -1, -1);
                  MEMORY[0x24954C33C](v99, -1, -1);
                }
                else
                {
                  outlined release of NodePersonality(&v184);
                  outlined release of [Input]((uint64_t)&v183);
                  outlined release of [Input]((uint64_t)&v185);
                  outlined release of NodePersonality(&v184);
                  outlined release of [Input]((uint64_t)&v183);
                  outlined release of [Input]((uint64_t)&v185);
                  v107 = v188;
                  outlined consume of SGDataTypeStorage(v113, v112, v124[0], v122[0], v110, v121[0], v188, v127[0], 6);
                  outlined consume of SGDataTypeStorage(v113, v112, v124[0], v122[0], v110, v121[0], v107, v127[0], 6);
                }

                ShaderGraphNode.out.getter((uint64_t)v152);
                if (!v4)
                {
                  Graph.moveEdges(from:to:)((uint64_t)v152, (uint64_t)v157);
                  swift_release();
                  swift_release();
                  v160 = v152[1];
                  outlined release of String((uint64_t)&v160);
                  swift_release();
                  outlined release of String((uint64_t)&v159);
                  swift_bridgeObjectRelease();
                  swift_release();
                  return;
                }
                swift_release();
                outlined release of String((uint64_t)&v159);
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
                v53 = v4;
                goto LABEL_36;
              }
              outlined release of Graph((uint64_t)&v136);
              swift_bridgeObjectRelease();
              swift_release();
              LODWORD(v44) = v121[0];
              LODWORD(v74) = v110;
              LODWORD(v46) = v124[0];
              v49 = v112;
            }
LABEL_74:
            if (one-time initialization token for logger == -1)
              goto LABEL_75;
            goto LABEL_84;
          }
          __break(1u);
LABEL_84:
          swift_once();
LABEL_75:
          v102 = type metadata accessor for Logger();
          __swift_project_value_buffer(v102, (uint64_t)logger);
          *(_QWORD *)&v152[0] = *(_QWORD *)&v162[0];
          outlined retain of [Input]((uint64_t)&v183);
          outlined retain of NodePersonality(&v184);
          outlined retain of [Input]((uint64_t)v152);
          outlined retain of [Input]((uint64_t)&v183);
          outlined retain of NodePersonality(&v184);
          outlined copy of SGDataTypeStorage(v113, v49, v46, v122[0], v74, (int)v44, v188, v127[0], 6);
          outlined retain of [Input]((uint64_t)v152);
          v126 = Logger.logObject.getter();
          v120 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v126, v120))
          {
            v103 = swift_slowAlloc();
            logb = (os_log_t)swift_slowAlloc();
            *(_QWORD *)&v160 = logb;
            *(_DWORD *)v103 = 136315394;
            *(_QWORD *)&v157[0] = 1701080942;
            *((_QWORD *)&v157[0] + 1) = 0xE400000000000000;
            *(_QWORD *)&v159 = *((_QWORD *)&v162[0] + 1);
            v104._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v104);
            swift_bridgeObjectRelease();
            *(_QWORD *)&v157[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(uint64_t *)&v157[0], *((unint64_t *)&v157[0] + 1), (uint64_t *)&v160);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            outlined release of NodePersonality(&v184);
            outlined release of [Input]((uint64_t)&v183);
            outlined release of [Input]((uint64_t)v152);
            outlined release of NodePersonality(&v184);
            outlined release of [Input]((uint64_t)&v183);
            outlined release of [Input]((uint64_t)v152);
            *(_WORD *)(v103 + 12) = 2080;
            swift_bridgeObjectRetain();
            *(_QWORD *)&v157[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v113, (unint64_t)v49, (uint64_t *)&v160);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            v105 = v188;
            outlined consume of SGDataTypeStorage(v113, v49, v46, v122[0], v74, v121[0], v188, v127[0], 6);
            outlined consume of SGDataTypeStorage(v113, v49, v46, v122[0], v74, v121[0], v105, v127[0], 6);
            outlined consume of SGDataTypeStorage(v113, v49, v46, v122[0], v74, v121[0], v105, v127[0], 6);
            _os_log_impl(&dword_245E46000, v126, v120, "Failed to find valid geomprop for node %s, given value: %s, and no default was found.", (uint8_t *)v103, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x24954C33C](logb, -1, -1);
            MEMORY[0x24954C33C](v103, -1, -1);

            swift_release();
          }
          else
          {
            swift_release();
            outlined release of NodePersonality(&v184);
            outlined release of [Input]((uint64_t)&v183);
            outlined release of [Input]((uint64_t)v152);
            outlined release of NodePersonality(&v184);
            outlined release of [Input]((uint64_t)&v183);
            outlined release of [Input]((uint64_t)v152);
            v106 = v188;
            outlined consume of SGDataTypeStorage(v113, v49, v46, v122[0], v74, v121[0], v188, v127[0], 6);
            outlined consume of SGDataTypeStorage(v113, v49, v46, v122[0], v74, v121[0], v106, v127[0], 6);

          }
          return;
        }
LABEL_13:
        outlined release of NodeDef((uint64_t)v147);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
LABEL_17:
    if (one-time initialization token for logger != -1)
      swift_once();
    v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)logger);
    *(_QWORD *)&v153 = *((_QWORD *)&v161 + 1);
    *(_QWORD *)&v147[0] = *(_QWORD *)&v162[0];
    outlined retain of NodePersonality(&v184);
    outlined retain of [Input]((uint64_t)&v153);
    outlined retain of [Input]((uint64_t)v147);
    outlined retain of NodePersonality(&v184);
    outlined retain of [Input]((uint64_t)&v153);
    outlined retain of [Input]((uint64_t)v147);
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      v35 = swift_slowAlloc();
      v150 = v35;
      *(_DWORD *)v34 = 136315138;
      *(_QWORD *)&v136 = 1701080942;
      *((_QWORD *)&v136 + 1) = 0xE400000000000000;
      *(_QWORD *)&v163 = *((_QWORD *)&v162[0] + 1);
      v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v36);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v136 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v136, *((unint64_t *)&v136 + 1), &v150);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of NodePersonality(&v184);
      outlined release of [Input]((uint64_t)&v153);
      outlined release of [Input]((uint64_t)v147);
      outlined release of NodePersonality(&v184);
      outlined release of [Input]((uint64_t)&v153);
      outlined release of [Input]((uint64_t)v147);
      _os_log_impl(&dword_245E46000, v32, v33, "Failed to transform geompropvalue node %s", v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v35, -1, -1);
      MEMORY[0x24954C33C](v34, -1, -1);
LABEL_23:

      return;
    }
    outlined release of NodePersonality(&v184);
    outlined release of [Input]((uint64_t)&v153);
    outlined release of [Input]((uint64_t)v147);
    outlined release of NodePersonality(&v184);
    outlined release of [Input]((uint64_t)&v153);
    v37 = (uint64_t *)v147;
LABEL_22:
    outlined release of [Input]((uint64_t)v37);
    goto LABEL_23;
  }
}

uint64_t specialized Graph.transformGeomPropValueNodes(surface:geometryModifier:nodeDefStore:)(NSObject *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v5;
  _OWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v21 = a2;
  result = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(result + 16);
  if (v5)
  {
    v6 = (_OWORD *)v2;
    v7 = (_BYTE *)(swift_bridgeObjectRetain() + 72);
    v8 = 1;
    while (1)
    {
      v9 = *((_QWORD *)v7 - 2);
      if (v9 != -7)
      {
        v10 = *v7;
        v11 = *((_QWORD *)v7 - 1);
        v13 = *((_QWORD *)v7 - 4);
        v12 = *((_QWORD *)v7 - 3);
        v14 = *((_QWORD *)v7 - 5);
        *(_QWORD *)&v16 = v14;
        *((_QWORD *)&v16 + 1) = v13;
        v17 = v12;
        v18 = v9;
        v19 = v11;
        v20 = v10;
        outlined copy of NodePersonality(v14);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized closure #1 in Graph.transformGeomPropValueNodes(surface:geometryModifier:nodeDefStore:)(&v16, a1, v21, v6);
        outlined consume of NodePersonality(v14);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (v8 >= v5)
        break;
      v7 += 48;
      if (v8++ >= v5)
      {
        __break(1u);
        return swift_bridgeObjectRelease();
      }
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized Graph.insertParamsInputs(surface:type:nodeDefStore:)(uint64_t a1, char a2)
{
  _OWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t inited;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  __int128 v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD *v80;
  unint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  _BYTE v86[8];
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _QWORD v95[5];
  char v96;
  uint64_t v97;
  _OWORD v98[4];
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  _OWORD v104[2];
  _QWORD v105[3];
  uint64_t v106;

  v4 = v3;
  v5 = (uint64_t)v2;
  v8 = v2[9];
  v103 = v2[8];
  v104[0] = v8;
  *(_OWORD *)((char *)v104 + 9) = *(_OWORD *)((char *)v2 + 153);
  v9 = v2[5];
  v99 = v2[4];
  v100 = v9;
  v10 = v2[7];
  v101 = v2[6];
  v102 = v10;
  v11 = v2[1];
  v98[0] = *v2;
  v98[1] = v11;
  v12 = v2[3];
  v98[2] = v2[2];
  v98[3] = v12;
  outlined retain of Graph((uint64_t)v98);
  Graph.connectedUpstreamSubgraph(rootedAt:)(a1, (uint64_t)&v67);
  v13 = v67;
  outlined release of Graph((uint64_t)v98);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_AH2IDVs5NeverOTg504_s11D159Graph0B0V16splitSharedNodes12nodeDefStore07surfaceA016geometryModifieryAA04NodegH0V_AA0abL0VAKSgtKFAK2IDVAKcfu_33_300d98c1e43c0bc1dedcebf2cdbfb115AkNTf3nnnpk_nTf1cn_nTm(v13);
  swift_bridgeObjectRelease();
  v58 = specialized Set.init<A>(_:)(v14);
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    v54 = 0x797274656D6F6567;
    if (one-time initialization token for geometry_parameters_private != -1)
      swift_once();
    v56 = (void *)0xE800000000000000;
    v15 = &static MetalDataType.re.geometry_parameters_private;
    goto LABEL_7;
  }
  v54 = 0x65636166727573;
  if (one-time initialization token for surface_parameters_private != -1)
    goto LABEL_28;
  while (1)
  {
    v56 = (void *)0xE700000000000000;
    v15 = &static MetalDataType.re.surface_parameters_private;
LABEL_7:
    v16 = *v15;
    swift_retain();
    v105[0] = v99;
    v80 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v17 = *(_QWORD *)(v99 + 16);
    v106 = v16;
    if (!v17)
      break;
    v18 = v99 + 32;
    swift_bridgeObjectRetain_n();
    v19 = 0;
    do
    {
      v20 = v18 + 48 * v19;
      v21 = *(_QWORD *)(v20 + 24);
      if (v21 == -7)
      {
        if ((uint64_t)++v19 >= v17)
          goto LABEL_14;
      }
      else
      {
        v23 = *(_QWORD *)v20;
        v22 = *(_QWORD *)(v20 + 8);
        v24 = *(_QWORD *)(v20 + 16);
        v25 = *(_BYTE *)(v20 + 40);
        v26 = *(_QWORD *)(v20 + 32);
        *(_QWORD *)&v67 = v23;
        *((_QWORD *)&v67 + 1) = v22;
        *(_QWORD *)&v68 = v24;
        *((_QWORD *)&v68 + 1) = v21;
        *(_QWORD *)&v69 = v26;
        BYTE8(v69) = v25;
        outlined copy of NodePersonality(v23);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        closure #1 in Graph.insertParamsInputs(surface:type:nodeDefStore:)((uint64_t)&v67, v58, v54, v56, v106, v5, &v80);
        if (v3)
        {
          outlined consume of NodePersonality(v23);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined release of [Input]((uint64_t)v105);
          outlined release of [Input]((uint64_t)v105);
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        ++v19;
        outlined consume of NodePersonality(v23);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((uint64_t)v19 >= v17)
        {
LABEL_14:
          outlined release of [Input]((uint64_t)v105);
          outlined release of [Input]((uint64_t)v105);
          v16 = v106;
          goto LABEL_15;
        }
      }
    }
    while (v19 < v17);
    __break(1u);
LABEL_28:
    swift_once();
  }
LABEL_15:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v80[2])
  {
    v59 = v80;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_245FBECD0;
    *(_QWORD *)(inited + 32) = 7632239;
    *(_QWORD *)(inited + 40) = 0xE300000000000000;
    *(_QWORD *)(inited + 48) = v16;
    v28 = swift_allocObject();
    *(_QWORD *)(v28 + 16) = 12324;
    *(_QWORD *)(v28 + 24) = 0xE200000000000000;
    v29 = v28 | 0x6000000000000000;
    v30 = *(_QWORD *)(v5 + 40);
    swift_retain();
    specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v30, MEMORY[0x24BEE4AF8], inited, v29, v5 + 64, v5, &v81);
    v57 = v82;
    v31 = v81;
    v32 = v83;
    v55 = v84;
    v33 = v85;
    swift_release();
    swift_setDeallocating();
    swift_arrayDestroy();
    ShaderGraphNode.out.getter((uint64_t)v86);
    if (v4)
    {

      outlined init with take of NodePersonality(&v81, &v94);
      v92 = *((_QWORD *)&v82 + 1);
      v93 = v82;
      v60 = v31;
      v61 = v57;
      v62 = v32;
      v63 = v55;
      v64 = v33;
      v65 = 7632239;
      v66 = 0xE300000000000000;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_((uint64_t)&v60);
      outlined init with take of UserGraphError.ErrorType((__int128 *)&v60, (uint64_t)&v67);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      v79 = 0uLL;
      swift_allocError();
      *v34 = v67;
      v35 = v71;
      v37 = v68;
      v36 = v69;
      v34[3] = v70;
      v34[4] = v35;
      v34[1] = v37;
      v34[2] = v36;
      v38 = v75;
      v40 = v72;
      v39 = v73;
      v34[7] = v74;
      v34[8] = v38;
      v34[5] = v40;
      v34[6] = v39;
      v41 = v79;
      v43 = v76;
      v42 = v77;
      v34[11] = v78;
      v34[12] = v41;
      v34[9] = v43;
      v34[10] = v42;
      outlined retain of NodePersonality(&v94);
      outlined retain of [Input]((uint64_t)&v93);
      outlined retain of [Input]((uint64_t)&v92);
      swift_willThrow();
      swift_release();
      outlined release of NodePersonality(&v94);
      outlined release of [Input]((uint64_t)&v93);
      outlined release of [Input]((uint64_t)&v92);
    }
    else
    {
      v45 = v59[2];
      if (v45)
      {
        swift_bridgeObjectRetain();
        v46 = v59 + 10;
        do
        {
          v47 = *(v46 - 6);
          v48 = *(v46 - 5);
          v49 = *(v46 - 4);
          v50 = *(v46 - 3);
          v51 = *(v46 - 2);
          v52 = *((_BYTE *)v46 - 8);
          v53 = *v46;
          v46 += 7;
          v95[0] = v47;
          v95[1] = v48;
          v95[2] = v49;
          v95[3] = v50;
          v95[4] = v51;
          v96 = v52;
          v97 = v53;
          swift_retain();
          swift_bridgeObjectRetain();
          Graph.connect(_:to:)((uint64_t)v86, (unint64_t)v95);
          swift_bridgeObjectRelease();
          swift_release();
          --v45;
        }
        while (v45);
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      swift_release();
      outlined init with take of NodePersonality(&v81, &v91);
      outlined release of NodePersonality(&v91);
      v90 = v82;
      outlined release of [Input]((uint64_t)&v90);
      v89 = *((_QWORD *)&v82 + 1);
      outlined release of [Input]((uint64_t)&v89);
      swift_bridgeObjectRelease();
      swift_release();
      v88 = v87;
      outlined release of String((uint64_t)&v88);
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

uint64_t sub_245F0B21C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

_QWORD *specialized closure #1 in Graph.resolveMaterialXNodeDefs(connectedTo:nodeDefStore:shaderType:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD *result;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  char *v57;
  Swift::UInt v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  _OWORD v87[12];
  __int128 v88;
  uint64_t v89;
  uint64_t v90[4];
  unint64_t v91;
  _OWORD v92[10];
  unint64_t v93;

  v61 = a7;
  v62 = a3;
  v63 = a4;
  v64 = a6;
  v10 = *a1;
  v67 = a5;
  *(_QWORD *)&v68 = v10;
  v11 = a1[2];
  *((_QWORD *)&v68 + 1) = a1[1];
  v69 = v11;
  v12 = a1[4];
  v70 = a1[3];
  v71 = v12;
  v72 = *((unsigned __int8 *)a1 + 40);
  v65 = type metadata accessor for NodeDef.Implementation.Kind(0);
  v13 = MEMORY[0x24BDAC7A8](v65);
  v66 = (uint64_t)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (uint64_t *)((char *)&v58 - v15);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NodeDef.Implementation?);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for NodeDef.Implementation(0);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with take of NodePersonality(a1, &v91);
  result = outlined init with take of NodePersonality(&v91, &v93);
  v25 = v93;
  if (v93 >> 61 != 5)
    return result;
  v93 &= 0x1FFFFFFFFFFFFFFFuLL;
  if (!*(_QWORD *)(a2 + 16))
  {
LABEL_8:
    v82 = v68;
    v83 = v69;
    v84 = v70;
    v85 = v71;
    v86 = v72 & 1;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi17_((uint64_t)&v82);
    outlined init with take of UserGraphError.ErrorType(&v82, (uint64_t)v87);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v88 = 0uLL;
    swift_allocError();
    *v46 = v87[0];
    v47 = v87[4];
    v49 = v87[1];
    v48 = v87[2];
    v46[3] = v87[3];
    v46[4] = v47;
    v46[1] = v49;
    v46[2] = v48;
    v50 = v87[8];
    v52 = v87[5];
    v51 = v87[6];
    v46[7] = v87[7];
    v46[8] = v50;
    v46[5] = v52;
    v46[6] = v51;
    v53 = v88;
    v55 = v87[9];
    v54 = v87[10];
    v46[11] = v87[11];
    v46[12] = v53;
    v46[9] = v55;
    v46[10] = v54;
    v56 = a1[2];
    v90[0] = a1[1];
    v89 = v56;
    outlined retain of NodePersonality(&v91);
    outlined retain of [Input]((uint64_t)v90);
    outlined retain of [Input]((uint64_t)&v89);
    return (_QWORD *)swift_willThrow();
  }
  v59 = v23;
  v60 = v7;
  v26 = *(_QWORD *)(v25 + 24);
  v27 = *(_QWORD *)((v25 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  swift_bridgeObjectRetain_n();
  v28 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v26);
  if ((v29 & 1) == 0)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_8;
  }
  v30 = (_OWORD *)(*(_QWORD *)(a2 + 56) + 144 * v28);
  v92[0] = *v30;
  v31 = v30[4];
  v33 = v30[1];
  v32 = v30[2];
  v92[3] = v30[3];
  v92[4] = v31;
  v92[1] = v33;
  v92[2] = v32;
  v34 = v30[8];
  v36 = v30[5];
  v35 = v30[6];
  v92[7] = v30[7];
  v92[8] = v34;
  v92[5] = v36;
  v92[6] = v35;
  v37 = v30[7];
  v79 = v30[6];
  v80 = v37;
  v81 = v30[8];
  v38 = v30[3];
  v75 = v30[2];
  v76 = v38;
  v39 = v30[5];
  v77 = v30[4];
  v78 = v39;
  v40 = v30[1];
  v73 = *v30;
  v74 = v40;
  outlined retain of NodeDef((uint64_t)v92);
  swift_bridgeObjectRelease_n();
  v58 = a1[3];
  if (specialized Set.contains(_:)(v58, v67))
  {
    v41 = v64;
    NodeDefStore.implementation(for:target:)((uint64_t *)v92, v64, v63, (uint64_t)v19);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
    {
      v42 = v92[0];
      swift_retain();
      *v16 = specialized static NodeDefStore.inferLibraryFunctionName(forNodeDefName:)(v42, *((void **)&v42 + 1));
      v16[1] = v43;
      swift_storeEnumTagMultiPayload();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v44 = swift_allocObject();
      *(_OWORD *)(v44 + 16) = xmmword_245FBF370;
      *(_QWORD *)(v44 + 32) = v41;
      *(_QWORD *)&v87[0] = v44;
      specialized Array._endMutation()();
      v67 = specialized Set.init<A>(_:)(*(unint64_t *)&v87[0]);
      swift_bridgeObjectRelease();
      v45 = (uint64_t)v59;
      outlined init with take of NodeDef.Implementation.Kind((uint64_t)v16, (uint64_t)v59, type metadata accessor for NodeDef.Implementation.Kind);
      *(_QWORD *)(v45 + *(int *)(v20 + 20)) = v67;
      outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for NodeDef.Implementation?);
    }
    else
    {
      v45 = (uint64_t)v59;
      outlined init with take of NodeDef.Implementation.Kind((uint64_t)v19, (uint64_t)v59, type metadata accessor for NodeDef.Implementation);
    }
    outlined init with copy of NodeDef.Implementation.Kind(v45, v66, type metadata accessor for NodeDef.Implementation.Kind);
    v57 = (char *)&loc_245F0B694 + *((int *)qword_245F0BCB0 + swift_getEnumCaseMultiPayload());
    __asm { BR              X10 }
  }
  return (_QWORD *)outlined release of NodeDef((uint64_t)v92);
}

void sub_245F0B6A4()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  outlined release of NodeDef(v3 - 240);
  v4 = v1[9];
  *(_OWORD *)(v0 + 256) = v1[8];
  *(_OWORD *)(v0 + 272) = v4;
  *(_OWORD *)(v0 + 281) = *(_OWORD *)((char *)v1 + 153);
  v5 = v1[5];
  *(_OWORD *)(v0 + 192) = v1[4];
  *(_OWORD *)(v0 + 208) = v5;
  v6 = v1[7];
  *(_OWORD *)(v0 + 224) = v1[6];
  *(_OWORD *)(v0 + 240) = v6;
  v7 = v1[1];
  *(_OWORD *)(v0 + 128) = *v1;
  *(_OWORD *)(v0 + 144) = v7;
  v8 = v1[3];
  *(_OWORD *)(v0 + 160) = v1[2];
  *(_OWORD *)(v0 + 176) = v8;
  outlined release of Graph(v0 + 128);
  _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi47_(v0 + 464);
  *(_QWORD *)(v0 + 656) = 0;
  *(_QWORD *)(v0 + 664) = 0xE000000000000000;
  _StringGuts.grow(_:)(87);
  v9 = *(_QWORD *)(v0 + 664);
  *(_QWORD *)(v0 + 656) = *(_QWORD *)(v0 + 656);
  *(_QWORD *)(v0 + 664) = v9;
  v10._countAndFlagsBits = 0xD00000000000004ALL;
  v10._object = (void *)0x8000000245FCB630;
  String.append(_:)(v10);
  v11._countAndFlagsBits = 0xD00000000000003ELL;
  v11._object = (void *)0x8000000245FCB680;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 0x6C6C616320736920;
  v12._object = (void *)0xEB000000002E6465;
  String.append(_:)(v12);
  v13 = *(_QWORD *)(v0 + 656);
  v14 = *(_QWORD *)(v0 + 664);
  outlined init with take of UserGraphError.ErrorType((__int128 *)(v0 + 464), v0 + 656);
  *(_QWORD *)(v0 + 848) = v13;
  *(_QWORD *)(v0 + 856) = v14;
  lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
  swift_allocError();
  *v15 = *(_OWORD *)(v0 + 656);
  v16 = *(_OWORD *)(v0 + 720);
  v18 = *(_OWORD *)(v0 + 672);
  v17 = *(_OWORD *)(v0 + 688);
  v15[3] = *(_OWORD *)(v0 + 704);
  v15[4] = v16;
  v15[1] = v18;
  v15[2] = v17;
  v19 = *(_OWORD *)(v0 + 784);
  v21 = *(_OWORD *)(v0 + 736);
  v20 = *(_OWORD *)(v0 + 752);
  v15[7] = *(_OWORD *)(v0 + 768);
  v15[8] = v19;
  v15[5] = v21;
  v15[6] = v20;
  v22 = *(_OWORD *)(v0 + 848);
  v24 = *(_OWORD *)(v0 + 800);
  v23 = *(_OWORD *)(v0 + 816);
  v15[11] = *(_OWORD *)(v0 + 832);
  v15[12] = v22;
  v15[9] = v24;
  v15[10] = v23;
  swift_willThrow();
  outlined destroy of NodeDef.Implementation(v2, type metadata accessor for NodeDef.Implementation);
  JUMPOUT(0x245F0B61CLL);
}

uint64_t sub_245F0BCC0()
{
  uint64_t v0;

  outlined consume of SGDataTypeStorage(*(void **)(v0 + 16), *(id *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80));
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_245F0BD08()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t *outlined release of Input?(uint64_t *a1)
{
  outlined consume of Input?(*a1, a1[1]);
  return a1;
}

uint64_t outlined retain of SGDataTypeStorage(uint64_t a1)
{
  outlined copy of SGDataTypeStorage(*(id *)a1, *(id *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  return a1;
}

uint64_t specialized ContiguousArray.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (__OFADD__(v5, v8))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v2 = v4;
  if (!isUniquelyReferenced_nonNull_native || v5 - v7 > *(_QWORD *)(v4 + 24) >> 1)
  {
    MEMORY[0x24954B7FC]();
    v4 = *v2;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MTLLibrary);
  swift_arrayDestroy();
  if (!v7)
    return specialized ContiguousArray._endMutation()();
  v10 = *(_QWORD *)(v4 + 16);
  v11 = __OFSUB__(v10, a2);
  v12 = v10 - a2;
  if (v11)
    goto LABEL_23;
  if ((v12 & 0x8000000000000000) == 0)
  {
    v13 = (const void *)(v4 + 32 + 8 * a2);
    if (a1 != a2 || v4 + 32 + 8 * a1 >= (unint64_t)v13 + 8 * v12)
      memmove((void *)(v4 + 32 + 8 * a1), v13, 8 * v12);
    v14 = *(_QWORD *)(v4 + 16);
    v11 = __OFADD__(v14, v8);
    v15 = v14 - v7;
    if (!v11)
    {
      *(_QWORD *)(v4 + 16) = v15;
      return specialized ContiguousArray._endMutation()();
    }
    goto LABEL_24;
  }
LABEL_25:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_245F0C1C4()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_245F0C1F0()
{
  uint64_t v0;

  outlined consume of NodePersonality(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for implicit closure #8 in closure #1 in Graph.transformRealityKitImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 40);
}

uint64_t sub_245F0C230()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)()
{
  uint64_t v0;

  return specialized implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_245F0C25C()
{
  return swift_deallocObject();
}

uint64_t sub_245F0C26C()
{
  return swift_deallocObject();
}

uint64_t sub_245F0C27C()
{
  return swift_deallocObject();
}

uint64_t sub_245F0C28C()
{
  return swift_deallocObject();
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi17_(uint64_t result)
{
  *(_QWORD *)(result + 168) = *(_QWORD *)(result + 168) & 1 | 0x4800000000000000;
  return result;
}

uint64_t outlined init with take of NodeDef.Implementation.Kind(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined consume of OrderedSet<Input>?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined copy of OrderedSet<Input>?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined retain of GeomPropDef(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 40);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of GeomPropDef.GeomProp(v2, v3, v4);
  return a1;
}

uint64_t outlined release of GeomPropDef(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 40);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of GeomPropDef.GeomProp(v2, v3, v4);
  return a1;
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi31_(uint64_t result)
{
  *(_QWORD *)(result + 168) = *(_QWORD *)(result + 168) & 1 | 0x8000000000000000;
  return result;
}

uint64_t lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for CharacterSet();
    result = MEMORY[0x24954C264](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi32_(uint64_t result)
{
  *(_QWORD *)(result + 168) = *(_QWORD *)(result + 168) & 1 | 0x8400000000000000;
  return result;
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi33_(uint64_t result)
{
  *(_QWORD *)(result + 168) = *(_QWORD *)(result + 168) & 1 | 0x8800000000000000;
  return result;
}

uint64_t partial apply for closure #12 in closure #1 in Graph.resolveSwizzleNodes(nodeDefStore:)(Swift::Int a1, unint64_t a2)
{
  return closure #12 in closure #1 in Graph.resolveSwizzleNodes(nodeDefStore:)(a1, a2);
}

uint64_t outlined copy of Graph.Adjacent?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined init with copy of NodeDef.Implementation.Kind(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of NodeDef.Implementation(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_245F0C588()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(*(_QWORD *)(v0 + 96));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(*(_QWORD *)(v0 + 144));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi8_(uint64_t result)
{
  *(_QWORD *)(result + 168) = *(_QWORD *)(result + 168) & 1 | 0x2400000000000000;
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in Graph.mapStringInputs(nodeDefStore:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in Graph.mapStringInputs(nodeDefStore:)(a1, a2, *(_BYTE **)(v2 + 16));
}

uint64_t outlined retain of NodeDef.IOSpec(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined retain of (Input, (Input, Input))(uint64_t a1)
{
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of (Input, (Input, Input))(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

Swift::Void __swiftcall OrderedSet.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for ContiguousArray();
  ContiguousArray.removeAll(keepingCapacity:)(keepingCapacity);
  if (!keepingCapacity)
  {
    swift_release();
    *v1 = 0;
    return;
  }
  if (!*v1)
    return;
  OrderedSet._ensureUnique()();
  v3 = *v1;
  if (!*v1)
  {
LABEL_14:
    __break(1u);
    return;
  }
  v4 = (*(_QWORD *)(v3 + 16) & 0x3FLL) << *(_QWORD *)(v3 + 16);
  v5 = __OFADD__(v4, 64);
  v6 = v4 + 64;
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v7 = v6 - 1;
  if (v6 < 1)
    v7 = v6 + 62;
  if (v6 < -62)
    goto LABEL_13;
  if ((unint64_t)(v6 + 62) >= 0x7F)
    bzero((void *)(v3 + 32), 8 * (v7 >> 6));
}

void OrderedSet.remove(at:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;

  v5 = OrderedSet._bucket(for:)(a1, *v2, v2[1], *(_QWORD *)(a2 + 16));
  OrderedSet._removeExistingMember(at:in:)(a1, v5, a2);
}

void OrderedSet.removeSubrange(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = v3;
  v8 = *v3;
  if (!*v3)
    goto LABEL_14;
  v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    return;
  }
  if (v9 < 1)
    return;
  v10 = *(char **)(a3 + 16);
  swift_retain();
  v11 = ContiguousArray.count.getter();
  swift_release();
  v12 = __OFSUB__(v11, v9);
  v13 = v11 - v9;
  if (v12)
    goto LABEL_17;
  swift_retain();
  swift_retain();
  v14 = ContiguousArray.count.getter();
  swift_release();
  swift_release();
  if (v14 >= 0)
    v15 = v14;
  else
    v15 = v14 + 1;
  if (v13 <= v15 >> 1 || (v16 = *(_QWORD *)(a3 + 24), v13 < OrderedSet._minimumCapacity.getter(v8)))
  {
    v17 = type metadata accessor for ContiguousArray();
    MEMORY[0x24954C264](MEMORY[0x24BEE2A68], v17);
    RangeReplaceableCollection.removeSubrange(_:)();
    OrderedSet._regenerateHashTable()();
    return;
  }
  OrderedSet._ensureUnique()();
  v18 = *v3;
  if (!*v4)
    goto LABEL_18;
  swift_retain();
  closure #1 in OrderedSet.removeSubrange(_:)((uint64_t *)(v18 + 16), v18 + 32, (uint64_t)v4, a1, a2, v10, v16);
  swift_release();
LABEL_14:
  v19 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A68], v19);
  RangeReplaceableCollection.removeSubrange(_:)();
}

Swift::Void __swiftcall OrderedSet.removeLast(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  v2 = v1;
  if (ContiguousArray.count.getter() < a1)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v4 = ContiguousArray.count.getter();
  v5 = __OFSUB__(v4, a1);
  v6 = v4 - a1;
  if (v5)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v7 = ContiguousArray.count.getter();
  if (v7 >= v6)
  {
    OrderedSet.removeSubrange(_:)(v6, v7, v2);
    return;
  }
LABEL_9:
  __break(1u);
}

Swift::Void __swiftcall OrderedSet.removeFirst(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v2;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = v1;
    if (ContiguousArray.count.getter() >= a1)
    {
      OrderedSet.removeSubrange(_:)(0, a1, v2);
      return;
    }
  }
  __break(1u);
}

void closure #1 in OrderedSet.removeSubrange(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  uint64_t v60;

  v58 = a7;
  v10 = a1;
  v46 = *((_QWORD *)a6 - 1);
  MEMORY[0x24BDAC7A8](a1);
  v44 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = v12;
  v48 = v13;
  v14 = ContiguousArray.subscript.getter();
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v21 = ArraySlice.startIndex.getter();
  v45 = v16;
  v49 = a6;
  if (v21 == ArraySlice.endIndex.getter())
  {
    v22 = a3;
    v23 = a2;
    swift_unknownObjectRelease();
    v24 = v58;
LABEL_9:
    v59[0] = v47;
    v59[1] = v48;
    v60 = *(_QWORD *)(v22 + 8);
    v42 = type metadata accessor for ContiguousArray();
    v43 = MEMORY[0x24954C264](MEMORY[0x24BEE2A58], v42);
    _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)((uint64_t)v59, (uint64_t)&v60, v10, v23, v42, v43, v24);
  }
  else
  {
    v56 = v10;
    v57 = a2;
    v25 = a3;
    v54 = v20 >> 1;
    v55 = v21;
    v26 = v21;
    v27 = (uint64_t)v44;
    v28 = v14;
    v29 = v49;
    v31 = v45;
    v30 = v46;
    v52 = v18;
    v53 = v28;
    v50 = v25;
    v51 = v20;
    while (1)
    {
      ArraySlice._hoistableIsNativeTypeChecked()();
      if (v55 < v18 || v54 <= v26)
        break;
      (*(void (**)(uint64_t, uint64_t, char *))(v30 + 16))(v27, v31 + *(_QWORD *)(v30 + 72) * v26, v29);
      v59[0] = *(_QWORD *)(v25 + 8);
      v32 = type metadata accessor for ContiguousArray();
      v33 = MEMORY[0x24954C264](MEMORY[0x24BEE2A58], v32);
      v34 = v57;
      v35 = v56;
      v36 = v58;
      v37 = _HashTable.UnsafeHandle._find<A>(_:in:)(v27, (uint64_t)v59, v56, v57, v32, v33, v58);
      if ((v38 & 1) != 0)
        goto LABEL_11;
      ++v26;
      MEMORY[0x24BDAC7A8](v37);
      *(&v44 - 4) = v29;
      *(&v44 - 3) = (char *)v36;
      *(&v44 - 2) = v39;
      _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(v40, (uint64_t (*)(unint64_t, uint64_t))partial apply for closure #1 in closure #1 in OrderedSet.removeSubrange(_:), (uint64_t)(&v44 - 6), v35, v34);
      (*(void (**)(uint64_t, char *))(v30 + 8))(v27, v29);
      v18 = v52;
      v41 = ArraySlice.endIndex.getter();
      v25 = v50;
      if (v26 == v41)
      {
        v22 = v50;
        v10 = v56;
        v23 = v57;
        swift_unknownObjectRelease();
        v24 = v58;
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
  }
}

void OrderedSet.removeSubrange<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x24954C264](&protocol conformance descriptor for OrderedSet<A>);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  OrderedSet.removeSubrange(_:)(v3, v4, a2);
}

void OrderedSet.removeLast()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = v2;
  v6 = *(_QWORD *)(a1 + 16);
  v19 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  v20 = v2[1];
  v10 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A60], v10);
  if ((Collection.isEmpty.getter() & 1) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return;
  }
  if (!v9)
  {
    MEMORY[0x24954C264](MEMORY[0x24BEE2A38], v10);
    MEMORY[0x24954C264](MEMORY[0x24BEE2A68], v10);
    RangeReplaceableCollection<>.removeLast()();
    return;
  }
  v18 = a2;
  swift_retain();
  v11 = ContiguousArray.count.getter();
  swift_release();
  v12 = v11 - 1;
  if (__OFSUB__(v11, 1))
    goto LABEL_11;
  v13 = v9;
  v14 = *(_QWORD *)(a1 + 24);
  v15 = OrderedSet._minimumCapacity.getter(v13);
  MEMORY[0x24954C264](MEMORY[0x24BEE2A38], v10);
  MEMORY[0x24954C264](MEMORY[0x24BEE2A68], v10);
  if (v12 < v15)
  {
    RangeReplaceableCollection<>.removeLast()();
    OrderedSet._regenerateHashTable()();
    return;
  }
  RangeReplaceableCollection<>.removeLast()();
  OrderedSet._ensureUnique()();
  v16 = *v3;
  v17 = v18;
  if (!*v3)
    goto LABEL_12;
  swift_retain();
  closure #1 in OrderedSet.removeLast()((_QWORD *)(v16 + 16), v16 + 32, (uint64_t)v8, (uint64_t)v3, v6, v14);
  swift_release();
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v17, v8, v6);
}

unint64_t closure #1 in OrderedSet.removeLast()(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[7];
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  result = dispatch thunk of Hashable._rawHashValue(seed:)();
  v12 = 1 << *a1;
  v13 = __OFSUB__(v12, 1);
  v14 = v12 - 1;
  if (v13)
  {
    __break(1u);
  }
  else
  {
    v15 = v14 & result;
    v16 = _HashTable.UnsafeHandle._startIterator(bucket:)(v14 & result, a1, a2);
    v25 = a1;
    v26 = a2;
    v27 = v15;
    v28 = v16;
    v29 = v17;
    v30 = v18;
    v31 = 0;
    swift_retain();
    v19 = ContiguousArray.count.getter();
    v20 = swift_release();
    if (v16)
    {
      do
      {
        v21 = -1 << *v25;
        v22 = (v21 ^ ~v16) + ((uint64_t)v25[1] >> 6);
        if (v22 >= ~v21)
          v23 = ~v21;
        else
          v23 = 0;
        if (v22 - v23 == v19)
          break;
        _HashTable.BucketIterator.advance()();
        v16 = v28;
      }
      while (v28);
      v15 = v27;
    }
    MEMORY[0x24BDAC7A8](v20);
    v24[2] = a5;
    v24[3] = a6;
    v24[4] = a4;
    return _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(v15, (uint64_t (*)(unint64_t, uint64_t))partial apply for closure #1 in closure #1 in OrderedSet.removeLast(), (uint64_t)v24, a1, a2);
  }
  return result;
}

uint64_t closure #1 in closure #1 in OrderedSet.removeSubrange(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v5 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  ContiguousArray.subscript.getter();
  v8 = dispatch thunk of Hashable._rawHashValue(seed:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a4);
  return v8;
}

void OrderedSet.removeFirst()(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A60], v2);
  if ((Collection.isEmpty.getter() & 1) != 0)
    __break(1u);
  else
    OrderedSet.remove(at:)(0, a1);
}

void OrderedSet.removeAll(where:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A40], v5);
  MEMORY[0x24954C264](MEMORY[0x24BEE2A68], v5);
  RangeReplaceableCollection<>.removeAll(where:)();
  type metadata accessor for OrderedSet(0, v4, *(_QWORD *)(a3 + 24), v6);
  OrderedSet._regenerateHashTable()();
}

uint64_t partial apply for closure #1 in closure #1 in OrderedSet.removeLast()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in OrderedSet.removeSubrange(_:)(a1, a2, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 16));
}

uint64_t MaterialXDataType.nodeDefinitionMaterialXDataType.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = swift_bridgeObjectRetain();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t GeomPropDef.GeomProp.nodeDefinitionGeomProp.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  if ((a3 & 1) == 0)
    return ((uint64_t (*)(void))((char *)&loc_245F0D4D4 + 4 * byte_245FC2080[a1]))();
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = 1;
  return swift_bridgeObjectRetain();
}

void sub_245F0D4F4(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_245FC1E10;
  *(_BYTE *)(a1 + 16) = 0;
}

uint64_t GeomPropDef.BuiltinGeomProp.nodeDefinitionBuiltinGeomProp.getter@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t MaterialXAvailability.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = 0x7461636572706564;
  if (a2 == 2)
    v2 = 0x726F707075736E75;
  if (a2 == 1)
    return 0x6574726F70707573;
  else
    return v2;
}

uint64_t MaterialXAvailability.availabilityMessage.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if ((unint64_t)(a2 - 1) < 2)
    return 0;
  v2 = a1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MaterialXAvailability()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = 0x7461636572706564;
  if (v1 == 2)
    v2 = 0x726F707075736E75;
  if (v1 == 1)
    return 0x6574726F70707573;
  else
    return v2;
}

uint64_t NodeDefinitionStore.TypeStorage.init(materialXValue:type:)(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  unint64_t v5[10];
  uint64_t v6;

  result = specialized SGDataTypeStorage.init(materialXValue:type:)(a1, a2, a3, v5);
  if (!v3)
  {
    outlined init with take of SGDataTypeStorage((uint64_t)v5, (uint64_t)&v6);
    __asm { BR              X10 }
  }
  return result;
}

void sub_245F0D784()
{
  JUMPOUT(0x245F0D758);
}

uint64_t specialized static NodeDefinitionStore.MaterialXDataType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;
  char v5;
  uint64_t result;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8) && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    if (v2)
    {
      if (v3)
        return specialized static Array<A>.== infix(_:_:)(v2, v3);
      return 0;
    }
    if (v3)
      return 0;
    swift_bridgeObjectRelease_n();
    return 1;
  }
  return result;
}

uint64_t OrderedSet.init(arrayLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(char *, uint64_t, uint64_t);
  uint64_t v8;

  v8 = a1;
  v5 = type metadata accessor for Array();
  v6 = (uint64_t (*)(char *, uint64_t, uint64_t))MEMORY[0x24954C264](MEMORY[0x24BEE12D8], v5);
  return OrderedSet.init<A>(_:)((uint64_t)&v8, a2, v5, a3, v6);
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance OrderedSet<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = OrderedSet.init(arrayLiteral:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t one-time initialization function for wellKnownConstantMap()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(type: MetalDataType, value: SGDataTypeStorage, key: String)>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_245FC2130;
  if (one-time initialization token for BOOL != -1)
    swift_once();
  v1 = static MetalDataType.BOOL;
  *(_QWORD *)(v0 + 32) = static MetalDataType.BOOL;
  *(_QWORD *)(v0 + 48) = 1;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 97) = 0u;
  strcpy((char *)(v0 + 120), "constant_true");
  *(_WORD *)(v0 + 134) = -4864;
  *(_QWORD *)(v0 + 144) = v1;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + 192) = 0u;
  *(_OWORD *)(v0 + 208) = 0u;
  *(_BYTE *)(v0 + 224) = 0;
  strcpy((char *)(v0 + 232), "constant_false");
  *(_BYTE *)(v0 + 247) = -18;
  v2 = one-time initialization token for int32;
  swift_retain_n();
  if (v2 != -1)
    swift_once();
  v3 = static MetalDataType.int32;
  *(_QWORD *)(v0 + 256) = static MetalDataType.int32;
  *(_OWORD *)(v0 + 272) = 0u;
  *(_OWORD *)(v0 + 288) = 0u;
  *(_OWORD *)(v0 + 304) = 0u;
  *(_OWORD *)(v0 + 320) = 0u;
  *(_BYTE *)(v0 + 336) = 2;
  strcpy((char *)(v0 + 344), "constant_int_0");
  *(_BYTE *)(v0 + 359) = -18;
  *(_QWORD *)(v0 + 368) = v3;
  *(_QWORD *)(v0 + 384) = 1;
  *(_QWORD *)(v0 + 440) = 0;
  *(_OWORD *)(v0 + 392) = 0u;
  *(_OWORD *)(v0 + 408) = 0u;
  *(_OWORD *)(v0 + 424) = 0u;
  *(_BYTE *)(v0 + 448) = 2;
  strcpy((char *)(v0 + 456), "constant_int_1");
  *(_BYTE *)(v0 + 471) = -18;
  *(_QWORD *)(v0 + 480) = v3;
  *(_QWORD *)(v0 + 496) = 2;
  *(_QWORD *)(v0 + 552) = 0;
  *(_OWORD *)(v0 + 520) = 0u;
  *(_OWORD *)(v0 + 536) = 0u;
  *(_OWORD *)(v0 + 504) = 0u;
  *(_BYTE *)(v0 + 560) = 2;
  strcpy((char *)(v0 + 568), "constant_int_2");
  *(_BYTE *)(v0 + 583) = -18;
  *(_QWORD *)(v0 + 592) = v3;
  *(_QWORD *)(v0 + 608) = 3;
  *(_OWORD *)(v0 + 616) = 0u;
  *(_OWORD *)(v0 + 632) = 0u;
  *(_OWORD *)(v0 + 648) = 0u;
  *(_QWORD *)(v0 + 664) = 0;
  *(_BYTE *)(v0 + 672) = 2;
  strcpy((char *)(v0 + 680), "constant_int_3");
  *(_BYTE *)(v0 + 695) = -18;
  v4 = one-time initialization token for float;
  swift_retain_n();
  if (v4 != -1)
    swift_once();
  v5 = static MetalDataType.float;
  *(_QWORD *)(v0 + 704) = static MetalDataType.float;
  *(_QWORD *)(v0 + 720) = 3212836864;
  *(_QWORD *)(v0 + 776) = 0;
  *(_OWORD *)(v0 + 728) = 0u;
  *(_OWORD *)(v0 + 744) = 0u;
  *(_OWORD *)(v0 + 760) = 0u;
  *(_BYTE *)(v0 + 784) = 5;
  *(_QWORD *)(v0 + 792) = 0xD000000000000023;
  *(_QWORD *)(v0 + 800) = 0x8000000245FCBBA0;
  *(_QWORD *)(v0 + 816) = v5;
  *(_OWORD *)(v0 + 832) = 0u;
  *(_OWORD *)(v0 + 848) = 0u;
  *(_OWORD *)(v0 + 864) = 0u;
  *(_OWORD *)(v0 + 880) = 0u;
  *(_BYTE *)(v0 + 896) = 5;
  *(_QWORD *)(v0 + 904) = 0xD00000000000001ELL;
  *(_QWORD *)(v0 + 912) = 0x8000000245FCBBD0;
  *(_QWORD *)(v0 + 928) = v5;
  *(_QWORD *)(v0 + 944) = 925353388;
  *(_QWORD *)(v0 + 1000) = 0;
  *(_OWORD *)(v0 + 968) = 0u;
  *(_OWORD *)(v0 + 984) = 0u;
  *(_OWORD *)(v0 + 952) = 0u;
  *(_BYTE *)(v0 + 1008) = 5;
  *(_QWORD *)(v0 + 1016) = 0xD000000000000031;
  *(_QWORD *)(v0 + 1024) = 0x8000000245FCBBF0;
  *(_QWORD *)(v0 + 1040) = v5;
  *(_QWORD *)(v0 + 1056) = 1008981770;
  *(_OWORD *)(v0 + 1064) = 0u;
  *(_OWORD *)(v0 + 1080) = 0u;
  *(_OWORD *)(v0 + 1096) = 0u;
  *(_QWORD *)(v0 + 1112) = 0;
  *(_BYTE *)(v0 + 1120) = 5;
  *(_QWORD *)(v0 + 1128) = 0xD000000000000022;
  *(_QWORD *)(v0 + 1136) = 0x8000000245FCBC30;
  *(_QWORD *)(v0 + 1152) = v5;
  *(_QWORD *)(v0 + 1168) = 1036831949;
  *(_QWORD *)(v0 + 1224) = 0;
  *(_OWORD *)(v0 + 1192) = 0u;
  *(_OWORD *)(v0 + 1208) = 0u;
  *(_OWORD *)(v0 + 1176) = 0u;
  *(_BYTE *)(v0 + 1232) = 5;
  *(_QWORD *)(v0 + 1240) = 0xD00000000000001DLL;
  *(_QWORD *)(v0 + 1248) = 0x8000000245FCBC60;
  *(_QWORD *)(v0 + 1264) = v5;
  *(_QWORD *)(v0 + 1280) = 1048576000;
  *(_OWORD *)(v0 + 1288) = 0u;
  *(_OWORD *)(v0 + 1304) = 0u;
  *(_OWORD *)(v0 + 1320) = 0u;
  *(_QWORD *)(v0 + 1336) = 0;
  *(_BYTE *)(v0 + 1344) = 5;
  *(_QWORD *)(v0 + 1352) = 0xD000000000000022;
  *(_QWORD *)(v0 + 1360) = 0x8000000245FCBC80;
  *(_QWORD *)(v0 + 1376) = v5;
  *(_QWORD *)(v0 + 1392) = 1051372203;
  *(_QWORD *)(v0 + 1448) = 0;
  *(_OWORD *)(v0 + 1416) = 0u;
  *(_OWORD *)(v0 + 1432) = 0u;
  *(_OWORD *)(v0 + 1400) = 0u;
  *(_BYTE *)(v0 + 1456) = 5;
  *(_QWORD *)(v0 + 1464) = 0xD00000000000001DLL;
  *(_QWORD *)(v0 + 1472) = 0x8000000245FCBCB0;
  *(_QWORD *)(v0 + 1488) = v5;
  *(_QWORD *)(v0 + 1504) = 1056964608;
  *(_QWORD *)(v0 + 1560) = 0;
  *(_OWORD *)(v0 + 1528) = 0u;
  *(_OWORD *)(v0 + 1544) = 0u;
  *(_OWORD *)(v0 + 1512) = 0u;
  *(_BYTE *)(v0 + 1568) = 5;
  *(_QWORD *)(v0 + 1576) = 0xD00000000000001BLL;
  *(_QWORD *)(v0 + 1584) = 0x8000000245FCBCD0;
  *(_QWORD *)(v0 + 1600) = v5;
  *(_QWORD *)(v0 + 1616) = 1059760811;
  *(_QWORD *)(v0 + 1672) = 0;
  *(_OWORD *)(v0 + 1640) = 0u;
  *(_OWORD *)(v0 + 1656) = 0u;
  *(_OWORD *)(v0 + 1624) = 0u;
  *(_BYTE *)(v0 + 1680) = 5;
  *(_QWORD *)(v0 + 1688) = 0xD00000000000001DLL;
  *(_QWORD *)(v0 + 1696) = 0x8000000245FCBCF0;
  *(_QWORD *)(v0 + 1712) = v5;
  *(_QWORD *)(v0 + 1728) = 1061158912;
  *(_QWORD *)(v0 + 1784) = 0;
  *(_OWORD *)(v0 + 1752) = 0u;
  *(_OWORD *)(v0 + 1768) = 0u;
  *(_OWORD *)(v0 + 1736) = 0u;
  *(_BYTE *)(v0 + 1792) = 5;
  *(_QWORD *)(v0 + 1800) = 0xD00000000000001ELL;
  *(_QWORD *)(v0 + 1808) = 0x8000000245FCBD10;
  *(_QWORD *)(v0 + 1824) = v5;
  *(_QWORD *)(v0 + 1840) = 1065353216;
  *(_QWORD *)(v0 + 1896) = 0;
  *(_OWORD *)(v0 + 1864) = 0u;
  *(_OWORD *)(v0 + 1880) = 0u;
  *(_OWORD *)(v0 + 1848) = 0u;
  *(_BYTE *)(v0 + 1904) = 5;
  *(_QWORD *)(v0 + 1912) = 0xD00000000000001DLL;
  *(_QWORD *)(v0 + 1920) = 0x8000000245FCBD30;
  *(_QWORD *)(v0 + 1936) = v5;
  *(_QWORD *)(v0 + 1952) = 1069547520;
  *(_QWORD *)(v0 + 2008) = 0;
  *(_OWORD *)(v0 + 1976) = 0u;
  *(_OWORD *)(v0 + 1992) = 0u;
  *(_OWORD *)(v0 + 1960) = 0u;
  *(_BYTE *)(v0 + 2016) = 5;
  *(_QWORD *)(v0 + 2024) = 0xD00000000000001DLL;
  *(_QWORD *)(v0 + 2032) = 0x8000000245FCBD50;
  v6 = one-time initialization token for float2;
  swift_retain_n();
  if (v6 != -1)
    swift_once();
  v7 = static MetalDataType.float2;
  *(_QWORD *)(v0 + 2048) = static MetalDataType.float2;
  *(_OWORD *)(v0 + 2064) = 0u;
  *(_OWORD *)(v0 + 2080) = 0u;
  *(_OWORD *)(v0 + 2096) = 0u;
  *(_OWORD *)(v0 + 2112) = 0u;
  *(_BYTE *)(v0 + 2128) = 7;
  *(_QWORD *)(v0 + 2136) = 0xD000000000000019;
  *(_QWORD *)(v0 + 2144) = 0x8000000245FCBD70;
  *(_QWORD *)(v0 + 2160) = v7;
  *(_QWORD *)(v0 + 2176) = 1065353216;
  *(_QWORD *)(v0 + 2232) = 0;
  *(_OWORD *)(v0 + 2184) = 0u;
  *(_OWORD *)(v0 + 2200) = 0u;
  *(_OWORD *)(v0 + 2216) = 0u;
  *(_BYTE *)(v0 + 2240) = 7;
  *(_QWORD *)(v0 + 2248) = 0xD000000000000018;
  *(_QWORD *)(v0 + 2256) = 0x8000000245FCBD90;
  *(_QWORD *)(v0 + 2272) = v7;
  *(_QWORD *)(v0 + 2288) = 0x3F80000000000000;
  *(_QWORD *)(v0 + 2344) = 0;
  *(_OWORD *)(v0 + 2312) = 0u;
  *(_OWORD *)(v0 + 2328) = 0u;
  *(_OWORD *)(v0 + 2296) = 0u;
  *(_BYTE *)(v0 + 2352) = 7;
  *(_QWORD *)(v0 + 2360) = 0xD000000000000018;
  *(_QWORD *)(v0 + 2368) = 0x8000000245FCBDB0;
  *(_QWORD *)(v0 + 2384) = v7;
  *(_QWORD *)(v0 + 2400) = 0x3F8000003F800000;
  *(_OWORD *)(v0 + 2408) = 0u;
  *(_OWORD *)(v0 + 2424) = 0u;
  *(_OWORD *)(v0 + 2440) = 0u;
  *(_QWORD *)(v0 + 2456) = 0;
  *(_BYTE *)(v0 + 2464) = 7;
  *(_QWORD *)(v0 + 2472) = 0xD000000000000017;
  *(_QWORD *)(v0 + 2480) = 0x8000000245FCBDD0;
  *(_QWORD *)(v0 + 2496) = v7;
  *(_QWORD *)(v0 + 2512) = 0x3F0000003F000000;
  *(_QWORD *)(v0 + 2568) = 0;
  *(_OWORD *)(v0 + 2536) = 0u;
  *(_OWORD *)(v0 + 2552) = 0u;
  *(_OWORD *)(v0 + 2520) = 0u;
  *(_BYTE *)(v0 + 2576) = 7;
  *(_QWORD *)(v0 + 2584) = 0xD00000000000002FLL;
  *(_QWORD *)(v0 + 2592) = 0x8000000245FCBDF0;
  v8 = one-time initialization token for float3;
  swift_retain_n();
  if (v8 != -1)
    swift_once();
  v9 = static MetalDataType.float3;
  *(_QWORD *)(v0 + 2608) = static MetalDataType.float3;
  *(_OWORD *)(v0 + 2624) = 0u;
  *(_OWORD *)(v0 + 2640) = 0u;
  *(_OWORD *)(v0 + 2656) = 0u;
  *(_OWORD *)(v0 + 2672) = 0u;
  *(_BYTE *)(v0 + 2688) = 8;
  *(_QWORD *)(v0 + 2696) = 0xD00000000000001ELL;
  *(_QWORD *)(v0 + 2704) = 0x8000000245FCBE20;
  *(_QWORD *)(v0 + 2720) = v9;
  *(_QWORD *)(v0 + 2736) = 1065353216;
  *(_QWORD *)(v0 + 2792) = 0;
  *(_OWORD *)(v0 + 2744) = 0u;
  *(_OWORD *)(v0 + 2760) = 0u;
  *(_OWORD *)(v0 + 2776) = 0u;
  *(_BYTE *)(v0 + 2800) = 8;
  *(_QWORD *)(v0 + 2808) = 0xD00000000000001DLL;
  *(_QWORD *)(v0 + 2816) = 0x8000000245FCBE40;
  *(_QWORD *)(v0 + 2832) = v9;
  *(_QWORD *)(v0 + 2848) = 0x3F80000000000000;
  *(_QWORD *)(v0 + 2904) = 0;
  *(_OWORD *)(v0 + 2872) = 0u;
  *(_OWORD *)(v0 + 2888) = 0u;
  *(_OWORD *)(v0 + 2856) = 0u;
  *(_BYTE *)(v0 + 2912) = 8;
  *(_QWORD *)(v0 + 2920) = 0xD00000000000001DLL;
  *(_QWORD *)(v0 + 2928) = 0x8000000245FCBE60;
  *(_QWORD *)(v0 + 2944) = v9;
  *(_OWORD *)(v0 + 2960) = xmmword_245FC2140;
  *(_OWORD *)(v0 + 2976) = 0u;
  *(_OWORD *)(v0 + 2992) = 0u;
  *(_OWORD *)(v0 + 3008) = 0u;
  *(_BYTE *)(v0 + 3024) = 8;
  *(_QWORD *)(v0 + 3032) = 0xD00000000000001DLL;
  *(_QWORD *)(v0 + 3040) = 0x8000000245FCBE80;
  *(_QWORD *)(v0 + 3056) = v9;
  *(_QWORD *)(v0 + 3072) = 0x3F8000003F800000;
  *(_OWORD *)(v0 + 3080) = 0u;
  *(_OWORD *)(v0 + 3096) = 0u;
  *(_OWORD *)(v0 + 3112) = 0u;
  *(_QWORD *)(v0 + 3128) = 0;
  *(_BYTE *)(v0 + 3136) = 8;
  *(_QWORD *)(v0 + 3144) = 0xD00000000000001CLL;
  *(_QWORD *)(v0 + 3152) = 0x8000000245FCBEA0;
  *(_QWORD *)(v0 + 3168) = v9;
  *(_OWORD *)(v0 + 3184) = xmmword_245FC2150;
  *(_OWORD *)(v0 + 3200) = 0u;
  *(_OWORD *)(v0 + 3216) = 0u;
  *(_OWORD *)(v0 + 3232) = 0u;
  *(_BYTE *)(v0 + 3248) = 8;
  *(_QWORD *)(v0 + 3256) = 0xD00000000000001CLL;
  *(_QWORD *)(v0 + 3264) = 0x8000000245FCBEC0;
  *(_QWORD *)(v0 + 3280) = v9;
  *(int64x2_t *)(v0 + 3296) = vdupq_n_s64(0x3F800000uLL);
  *(_OWORD *)(v0 + 3312) = 0u;
  *(_OWORD *)(v0 + 3328) = 0u;
  *(_OWORD *)(v0 + 3344) = 0u;
  *(_BYTE *)(v0 + 3360) = 8;
  *(_QWORD *)(v0 + 3368) = 0xD00000000000001CLL;
  *(_QWORD *)(v0 + 3376) = 0x8000000245FCBEE0;
  *(_QWORD *)(v0 + 3392) = v9;
  *(_OWORD *)(v0 + 3408) = xmmword_245FC2160;
  *(_OWORD *)(v0 + 3456) = 0u;
  *(_OWORD *)(v0 + 3440) = 0u;
  *(_OWORD *)(v0 + 3424) = 0u;
  *(_BYTE *)(v0 + 3472) = 8;
  *(_QWORD *)(v0 + 3480) = 0xD00000000000001BLL;
  *(_QWORD *)(v0 + 3488) = 0x8000000245FCBF00;
  *(_QWORD *)(v0 + 3504) = v9;
  *(_OWORD *)(v0 + 3520) = xmmword_245FC2170;
  *(_OWORD *)(v0 + 3568) = 0u;
  *(_OWORD *)(v0 + 3552) = 0u;
  *(_OWORD *)(v0 + 3536) = 0u;
  *(_BYTE *)(v0 + 3584) = 8;
  *(_QWORD *)(v0 + 3592) = 0xD000000000000024;
  *(_QWORD *)(v0 + 3600) = 0x8000000245FCBF20;
  v10 = one-time initialization token for float4;
  swift_retain_n();
  if (v10 != -1)
    swift_once();
  v11 = static MetalDataType.float4;
  *(_QWORD *)(v0 + 3616) = static MetalDataType.float4;
  *(_OWORD *)(v0 + 3632) = 0u;
  *(_OWORD *)(v0 + 3648) = 0u;
  *(_OWORD *)(v0 + 3664) = 0u;
  *(_OWORD *)(v0 + 3680) = 0u;
  *(_BYTE *)(v0 + 3696) = 9;
  *(_QWORD *)(v0 + 3704) = 0xD000000000000023;
  *(_QWORD *)(v0 + 3712) = 0x8000000245FCBF50;
  *(_QWORD *)(v0 + 3728) = v11;
  *(_OWORD *)(v0 + 3744) = xmmword_245FC2180;
  *(_OWORD *)(v0 + 3760) = 0u;
  *(_OWORD *)(v0 + 3776) = 0u;
  *(_OWORD *)(v0 + 3792) = 0u;
  *(_BYTE *)(v0 + 3808) = 9;
  *(_QWORD *)(v0 + 3816) = 0xD000000000000022;
  *(_QWORD *)(v0 + 3824) = 0x8000000245FCBF80;
  *(_QWORD *)(v0 + 3840) = v11;
  *(_OWORD *)(v0 + 3856) = xmmword_245FC2190;
  *(_OWORD *)(v0 + 3904) = 0u;
  *(_OWORD *)(v0 + 3888) = 0u;
  *(_OWORD *)(v0 + 3872) = 0u;
  *(_BYTE *)(v0 + 3920) = 9;
  *(_QWORD *)(v0 + 3928) = 0xD000000000000021;
  *(_QWORD *)(v0 + 3936) = 0x8000000245FCBFB0;
  *(_QWORD *)(v0 + 3952) = v11;
  *(int64x2_t *)(v0 + 3968) = vdupq_n_s64(0x3F80000000000000uLL);
  *(_OWORD *)(v0 + 3984) = 0u;
  *(_OWORD *)(v0 + 4000) = 0u;
  *(_OWORD *)(v0 + 4016) = 0u;
  *(_BYTE *)(v0 + 4032) = 9;
  *(_QWORD *)(v0 + 4040) = 0xD000000000000021;
  *(_QWORD *)(v0 + 4048) = 0x8000000245FCBFE0;
  *(_QWORD *)(v0 + 4064) = v11;
  *(_OWORD *)(v0 + 4080) = xmmword_245FC21A0;
  *(_OWORD *)(v0 + 4128) = 0u;
  *(_OWORD *)(v0 + 4112) = 0u;
  *(_OWORD *)(v0 + 4096) = 0u;
  *(_BYTE *)(v0 + 4144) = 9;
  *(_QWORD *)(v0 + 4152) = 0xD000000000000021;
  *(_QWORD *)(v0 + 4160) = 0x8000000245FCC010;
  *(_QWORD *)(v0 + 4176) = v11;
  *(_OWORD *)(v0 + 4192) = xmmword_245FC21B0;
  *(_OWORD *)(v0 + 4208) = 0u;
  *(_OWORD *)(v0 + 4224) = 0u;
  *(_OWORD *)(v0 + 4240) = 0u;
  *(_BYTE *)(v0 + 4256) = 9;
  *(_QWORD *)(v0 + 4264) = 0xD000000000000020;
  *(_QWORD *)(v0 + 4272) = 0x8000000245FCC040;
  *(_QWORD *)(v0 + 4288) = v11;
  *(_OWORD *)(v0 + 4304) = xmmword_245FC21C0;
  *(_OWORD *)(v0 + 4320) = 0u;
  *(_OWORD *)(v0 + 4336) = 0u;
  *(_OWORD *)(v0 + 4352) = 0u;
  *(_BYTE *)(v0 + 4368) = 9;
  *(_QWORD *)(v0 + 4376) = 0xD000000000000020;
  *(_QWORD *)(v0 + 4384) = 0x8000000245FCC070;
  *(_QWORD *)(v0 + 4400) = v11;
  *(_OWORD *)(v0 + 4416) = xmmword_245FC21D0;
  *(_OWORD *)(v0 + 4464) = 0u;
  *(_OWORD *)(v0 + 4448) = 0u;
  *(_OWORD *)(v0 + 4432) = 0u;
  *(_BYTE *)(v0 + 4480) = 9;
  *(_QWORD *)(v0 + 4488) = 0xD000000000000020;
  *(_QWORD *)(v0 + 4496) = 0x8000000245FCC0A0;
  *(_QWORD *)(v0 + 4512) = v11;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v0 + 4528) = _Q0;
  *(_OWORD *)(v0 + 4576) = 0u;
  *(_OWORD *)(v0 + 4560) = 0u;
  *(_OWORD *)(v0 + 4544) = 0u;
  *(_BYTE *)(v0 + 4592) = 9;
  *(_QWORD *)(v0 + 4600) = 0xD00000000000001FLL;
  *(_QWORD *)(v0 + 4608) = 0x8000000245FCC0D0;
  v17 = one-time initialization token for float3x3;
  swift_retain_n();
  if (v17 != -1)
    swift_once();
  *(_QWORD *)(v0 + 4624) = static MetalDataType.float3x3;
  *(_OWORD *)(v0 + 4640) = xmmword_245FC21E0;
  *(_QWORD *)(v0 + 4656) = 0x3F80000000000000;
  *(_OWORD *)(v0 + 4664) = 0u;
  *(_QWORD *)(v0 + 4680) = 1065353216;
  *(_OWORD *)(v0 + 4688) = 0u;
  *(_BYTE *)(v0 + 4704) = 17;
  *(_QWORD *)(v0 + 4712) = 0xD00000000000001ALL;
  *(_QWORD *)(v0 + 4720) = 0x8000000245FCC0F0;
  v18 = one-time initialization token for float4x4;
  swift_retain();
  if (v18 != -1)
    swift_once();
  *(_QWORD *)(v0 + 4736) = static MetalDataType.float4x4;
  *(_OWORD *)(v0 + 4752) = xmmword_245FC21E0;
  *(_QWORD *)(v0 + 4768) = 0x3F80000000000000;
  *(_OWORD *)(v0 + 4776) = 0u;
  *(_QWORD *)(v0 + 4792) = 1065353216;
  *(_OWORD *)(v0 + 4800) = xmmword_245FC2180;
  *(_BYTE *)(v0 + 4816) = 18;
  *(_QWORD *)(v0 + 4824) = 0xD00000000000001ALL;
  *(_QWORD *)(v0 + 4832) = 0x8000000245FCC110;
  v19 = one-time initialization token for space;
  swift_retain();
  if (v19 != -1)
    swift_once();
  v20 = static MetalDataType.MaterialX.space;
  *(_QWORD *)(v0 + 4848) = static MetalDataType.MaterialX.space;
  *(_OWORD *)(v0 + 4864) = xmmword_245FC21F0;
  *(_OWORD *)(v0 + 4880) = 0u;
  *(_OWORD *)(v0 + 4896) = 0u;
  *(_OWORD *)(v0 + 4912) = 0u;
  *(_BYTE *)(v0 + 4928) = 6;
  *(_QWORD *)(v0 + 4936) = 0xD000000000000014;
  *(_QWORD *)(v0 + 4944) = 0x8000000245FCC130;
  *(_QWORD *)(v0 + 4960) = v20;
  *(_OWORD *)(v0 + 4976) = xmmword_245FC2200;
  *(_OWORD *)(v0 + 4992) = 0u;
  *(_OWORD *)(v0 + 5008) = 0u;
  *(_OWORD *)(v0 + 5024) = 0u;
  *(_BYTE *)(v0 + 5040) = 6;
  *(_QWORD *)(v0 + 5048) = 0xD000000000000015;
  *(_QWORD *)(v0 + 5056) = 0x8000000245FCC150;
  *(_QWORD *)(v0 + 5072) = v20;
  *(_OWORD *)(v0 + 5088) = xmmword_245FC2210;
  *(_OWORD *)(v0 + 5136) = 0u;
  *(_OWORD *)(v0 + 5120) = 0u;
  *(_OWORD *)(v0 + 5104) = 0u;
  *(_BYTE *)(v0 + 5152) = 6;
  *(_QWORD *)(v0 + 5160) = 0xD000000000000014;
  *(_QWORD *)(v0 + 5168) = 0x8000000245FCC170;
  *(_QWORD *)(v0 + 5184) = v20;
  *(_OWORD *)(v0 + 5200) = xmmword_245FC2220;
  *(_OWORD *)(v0 + 5216) = 0u;
  *(_OWORD *)(v0 + 5232) = 0u;
  *(_OWORD *)(v0 + 5248) = 0u;
  *(_BYTE *)(v0 + 5264) = 6;
  *(_QWORD *)(v0 + 5272) = 0xD000000000000016;
  *(_QWORD *)(v0 + 5280) = 0x8000000245FCC190;
  wellKnownConstantMap._rawValue = (void *)v0;
  return swift_retain_n();
}

Swift::OpaquePointer *wellKnownConstantMap.unsafeMutableAddressor()
{
  if (one-time initialization token for wellKnownConstantMap != -1)
    swift_once();
  return &wellKnownConstantMap;
}

__n128 UserGraphError.init(_:details:)@<Q0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  __int128 v13[12];
  __int128 v14[12];
  _OWORD v15[12];
  __int128 v16;

  outlined init with take of UserGraphError.ErrorType(a1, (uint64_t)v13);
  outlined init with take of UserGraphError.ErrorType(v13, (uint64_t)v14);
  outlined init with take of UserGraphError.ErrorType(v14, (uint64_t)v15);
  *(_QWORD *)&v16 = a2;
  *((_QWORD *)&v16 + 1) = a3;
  v7 = v15[11];
  *(_OWORD *)(a4 + 160) = v15[10];
  *(_OWORD *)(a4 + 176) = v7;
  *(_OWORD *)(a4 + 192) = v16;
  v8 = v15[7];
  *(_OWORD *)(a4 + 96) = v15[6];
  *(_OWORD *)(a4 + 112) = v8;
  v9 = v15[9];
  *(_OWORD *)(a4 + 128) = v15[8];
  *(_OWORD *)(a4 + 144) = v9;
  v10 = v15[3];
  *(_OWORD *)(a4 + 32) = v15[2];
  *(_OWORD *)(a4 + 48) = v10;
  v11 = v15[5];
  *(_OWORD *)(a4 + 64) = v15[4];
  *(_OWORD *)(a4 + 80) = v11;
  result = (__n128)v15[1];
  *(_OWORD *)a4 = v15[0];
  *(__n128 *)(a4 + 16) = result;
  return result;
}

uint64_t *UserGraphError.type.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return outlined init with copy of UserGraphError.ErrorType(v1, a1);
}

uint64_t *outlined init with copy of UserGraphError.ErrorType(uint64_t *a1, uint64_t *a2)
{
  initializeWithCopy for UserGraphError.ErrorType(a2, a1);
  return a2;
}

uint64_t UserGraphError.details.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 192);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UserGraphError.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD v9[24];
  uint64_t v10;
  unint64_t v11;
  __int128 v12[12];

  *(_QWORD *)&v12[0] = 0;
  *((_QWORD *)&v12[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(28);
  v10 = 0;
  v11 = 0xE000000000000000;
  v1._object = (void *)0x8000000245FCC1B0;
  v1._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v1);
  outlined init with take of UserGraphError.ErrorType((__int128 *)v0, (uint64_t)v12);
  outlined init with take of UserGraphError.ErrorType(v12, (uint64_t)v9);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 2112041;
  v2._object = (void *)0xE300000000000000;
  String.append(_:)(v2);
  v3 = *(_QWORD *)(v0 + 200);
  if (v3)
  {
    v9[0] = *(_QWORD *)(v0 + 192);
    v9[1] = v3;
    swift_bridgeObjectRetain_n();
    v4 = String.init<A>(describing:)();
    v6 = v5;
  }
  else
  {
    v6 = 0xE500000000000000;
    v4 = 0x3E6C696E3CLL;
  }
  v7 = v6;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UserGraphError()
{
  return UserGraphError.description.getter();
}

uint64_t outlined copy of UserGraphError.ErrorType(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unint64_t a22)
{
  switch(a22 >> 58)
  {
    case 0uLL:
    case 1uLL:
    case 4uLL:
    case 5uLL:
    case 0xCuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x13uLL:
    case 0x15uLL:
    case 0x1AuLL:
      goto LABEL_13;
    case 2uLL:
    case 3uLL:
    case 0x21uLL:
    case 0x22uLL:
      outlined copy of NodePersonality(result);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      goto LABEL_13;
    case 6uLL:
    case 7uLL:
    case 0xAuLL:
      outlined copy of NodePersonality(result);
      swift_bridgeObjectRetain();
      goto LABEL_10;
    case 8uLL:
    case 0xBuLL:
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of NodePersonality(a11);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of NodePersonality(a17);
      swift_bridgeObjectRetain();
      goto LABEL_10;
    case 9uLL:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of MaterialXAvailability(a15, a16);
      swift_bridgeObjectRetain();
      goto LABEL_10;
    case 0xDuLL:
    case 0xEuLL:
      goto LABEL_10;
    case 0x11uLL:
      outlined copy of ShaderGraphNode?(result, a2);
      goto LABEL_13;
    case 0x12uLL:
    case 0x17uLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x20uLL:
      outlined copy of NodePersonality(result);
LABEL_10:
      swift_bridgeObjectRetain();
      goto LABEL_13;
    case 0x14uLL:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of MaterialXAvailability(a15, a16);
      swift_bridgeObjectRetain();
      goto LABEL_13;
    case 0x16uLL:
      outlined copy of GeomPropDef.GeomProp(result, a2, a3 & 1);
      goto LABEL_15;
    case 0x18uLL:
    case 0x19uLL:
      return outlined copy of Output?(result, a2);
    case 0x1BuLL:
    case 0x1CuLL:
      swift_retain();
      swift_bridgeObjectRetain();
      outlined copy of NodePersonality(a8);
      swift_bridgeObjectRetain();
LABEL_13:
      result = swift_bridgeObjectRetain();
      break;
    case 0x1DuLL:
LABEL_15:
      result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for UserGraphError(unint64_t *a1)
{
  outlined consume of UserGraphError.ErrorType(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21]);
  return swift_bridgeObjectRelease();
}

uint64_t *initializeWithCopy for UserGraphError(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = a2[5];
  v5 = a2[6];
  v14 = a2[8];
  v15 = a2[9];
  v16 = a2[10];
  v17 = a2[11];
  v18 = a2[12];
  v19 = a2[13];
  v20 = a2[14];
  v21 = a2[15];
  v22 = a2[16];
  v23 = a2[17];
  v24 = a2[18];
  v25 = a2[19];
  v26 = a2[20];
  v27 = a2[21];
  v28 = a2[22];
  v29 = a2[23];
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = a2[4];
  v11 = a2[7];
  outlined copy of UserGraphError.ErrorType(*a2, v7, v8, v9, v10, v4, v5, v11, a2[8], a2[9], a2[10], a2[11], a2[12], a2[13], a2[14], a2[15], a2[16], a2[17], a2[18],
    a2[19],
    a2[20],
    a2[21]);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v10;
  a1[5] = v4;
  a1[6] = v5;
  a1[7] = v11;
  a1[8] = v14;
  a1[9] = v15;
  a1[10] = v16;
  a1[11] = v17;
  a1[12] = v18;
  a1[13] = v19;
  a1[14] = v20;
  a1[15] = v21;
  a1[16] = v22;
  a1[17] = v23;
  a1[18] = v24;
  a1[19] = v25;
  a1[20] = v26;
  a1[21] = v27;
  a1[22] = v28;
  a1[23] = v29;
  v12 = a2[25];
  a1[24] = a2[24];
  a1[25] = v12;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UserGraphError(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = a2[5];
  v5 = a2[6];
  v28 = a2[8];
  v29 = a2[9];
  v30 = a2[10];
  v31 = a2[11];
  v32 = a2[12];
  v33 = a2[13];
  v34 = a2[14];
  v35 = a2[15];
  v36 = a2[16];
  v37 = a2[17];
  v38 = a2[18];
  v39 = a2[19];
  v40 = a2[20];
  v41 = a2[21];
  v42 = a2[22];
  v43 = a2[23];
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = a2[4];
  v11 = a2[7];
  outlined copy of UserGraphError.ErrorType(*a2, v7, v8, v9, v10, v4, v5, v11, a2[8], a2[9], a2[10], a2[11], a2[12], a2[13], a2[14], a2[15], a2[16], a2[17], a2[18],
    a2[19],
    a2[20],
    a2[21]);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v4;
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v11;
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v28;
  *(_QWORD *)(a1 + 72) = v29;
  *(_QWORD *)(a1 + 80) = v30;
  *(_QWORD *)(a1 + 88) = v31;
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = v32;
  *(_QWORD *)(a1 + 104) = v33;
  *(_QWORD *)(a1 + 112) = v34;
  *(_QWORD *)(a1 + 120) = v35;
  v24 = *(_OWORD *)(a1 + 128);
  v25 = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 128) = v36;
  *(_QWORD *)(a1 + 136) = v37;
  *(_QWORD *)(a1 + 144) = v38;
  *(_QWORD *)(a1 + 152) = v39;
  v26 = *(_OWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v40;
  *(_QWORD *)(a1 + 168) = v41;
  *(_QWORD *)(a1 + 176) = v42;
  *(_QWORD *)(a1 + 184) = v43;
  outlined consume of UserGraphError.ErrorType(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((unint64_t *)&v26 + 1));
  *(_QWORD *)(a1 + 192) = a2[24];
  *(_QWORD *)(a1 + 200) = a2[25];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy208_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t assignWithTake for UserGraphError(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = *(_OWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a1 + 112);
  v16 = *(_OWORD *)(a1 + 128);
  v17 = *(_OWORD *)(a1 + 144);
  v18 = *(_OWORD *)(a1 + 160);
  v19 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v19;
  v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v20;
  v21 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v21;
  v22 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v22;
  v23 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v23;
  v24 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v24;
  outlined consume of UserGraphError.ErrorType(v4, v5, v6, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((unint64_t *)&v18 + 1));
  v25 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v25;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UserGraphError(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 208))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 168) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for UserGraphError(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 200) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 208) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 128) = 0u;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 160) = 0;
      *(_QWORD *)(a1 + 168) = 2 * -a2;
      *(_QWORD *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 184) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 208) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UserGraphError()
{
  return &type metadata for UserGraphError;
}

uint64_t destroy for UserGraphError.ErrorType(unint64_t *a1)
{
  return outlined consume of UserGraphError.ErrorType(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
           a1[19],
           a1[20],
           a1[21]);
}

uint64_t *initializeWithCopy for UserGraphError.ErrorType(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = a2[5];
  v4 = a2[6];
  v5 = a2[7];
  v13 = a2[9];
  v14 = a2[10];
  v15 = a2[11];
  v16 = a2[12];
  v17 = a2[13];
  v18 = a2[14];
  v19 = a2[15];
  v20 = a2[16];
  v21 = a2[17];
  v22 = a2[18];
  v23 = a2[19];
  v24 = a2[20];
  v25 = a2[21];
  v26 = a2[22];
  v27 = a2[23];
  v6 = a2[8];
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[3];
  v11 = a2[4];
  outlined copy of UserGraphError.ErrorType(*a2, v8, v9, v10, v11, v3, v4, v5, v6, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25);
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v9;
  a1[3] = v10;
  a1[4] = v11;
  a1[5] = v3;
  a1[6] = v4;
  a1[7] = v5;
  a1[8] = v6;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  a1[17] = v21;
  a1[18] = v22;
  a1[19] = v23;
  a1[20] = v24;
  a1[21] = v25;
  a1[22] = v26;
  a1[23] = v27;
  return a1;
}

uint64_t assignWithCopy for UserGraphError.ErrorType(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = a2[5];
  v4 = a2[6];
  v5 = a2[7];
  v28 = a2[9];
  v29 = a2[10];
  v30 = a2[11];
  v31 = a2[12];
  v32 = a2[13];
  v33 = a2[14];
  v34 = a2[15];
  v35 = a2[16];
  v36 = a2[17];
  v37 = a2[18];
  v38 = a2[19];
  v39 = a2[20];
  v40 = a2[21];
  v41 = a2[22];
  v42 = a2[23];
  v6 = a2[8];
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[3];
  v11 = a2[4];
  outlined copy of UserGraphError.ErrorType(*a2, v8, v9, v10, v11, v3, v4, v5, v6, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37,
    v38,
    v39,
    v40);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v10;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = v3;
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = v5;
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 72) = v28;
  *(_QWORD *)(a1 + 80) = v29;
  *(_QWORD *)(a1 + 88) = v30;
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = v31;
  *(_QWORD *)(a1 + 104) = v32;
  *(_QWORD *)(a1 + 112) = v33;
  *(_QWORD *)(a1 + 120) = v34;
  v24 = *(_OWORD *)(a1 + 128);
  v25 = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 128) = v35;
  *(_QWORD *)(a1 + 136) = v36;
  *(_QWORD *)(a1 + 144) = v37;
  *(_QWORD *)(a1 + 152) = v38;
  v26 = *(_OWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v39;
  *(_QWORD *)(a1 + 168) = v40;
  *(_QWORD *)(a1 + 176) = v41;
  *(_QWORD *)(a1 + 184) = v42;
  outlined consume of UserGraphError.ErrorType(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((unint64_t *)&v26 + 1));
  return a1;
}

__n128 __swift_memcpy192_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t assignWithTake for UserGraphError.ErrorType(uint64_t a1, _OWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v3 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_OWORD *)(a1 + 64);
  v12 = *(_OWORD *)(a1 + 80);
  v13 = *(_OWORD *)(a1 + 96);
  v14 = *(_OWORD *)(a1 + 112);
  v15 = *(_OWORD *)(a1 + 128);
  v16 = *(_OWORD *)(a1 + 144);
  v17 = *(_OWORD *)(a1 + 160);
  v18 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v18;
  v19 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v19;
  v20 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v20;
  v21 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v21;
  v22 = a2[9];
  *(_OWORD *)(a1 + 128) = a2[8];
  *(_OWORD *)(a1 + 144) = v22;
  v23 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v23;
  outlined consume of UserGraphError.ErrorType(v3, v5, v4, v6, v7, v8, v9, v10, v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16,
    *((uint64_t *)&v16 + 1),
    v17,
    *((unint64_t *)&v17 + 1));
  return a1;
}

uint64_t getEnumTagSinglePayload for UserGraphError.ErrorType(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 192))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 168) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for UserGraphError.ErrorType(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 184) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 192) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 128) = 0u;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 160) = 0;
      *(_QWORD *)(a1 + 168) = 2 * -a2;
      *(_QWORD *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 184) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 192) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTag for UserGraphError.ErrorType(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 168) >> 58;
  if (v1 <= 0x22)
    return v1;
  else
    return (*(_DWORD *)a1 + 35);
}

uint64_t destructiveProjectEnumData for UserGraphError.ErrorType(uint64_t result)
{
  *(_QWORD *)(result + 168) &= 0x3FFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t destructiveInjectEnumTag for UserGraphError.ErrorType(uint64_t result, uint64_t a2)
{
  if (a2 < 0x23)
  {
    *(_QWORD *)(result + 168) = *(_QWORD *)(result + 168) & 1 | (a2 << 58);
  }
  else
  {
    *(_QWORD *)result = (a2 - 35);
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_QWORD *)(result + 176) = 0;
    *(_QWORD *)(result + 184) = 0;
    *(_QWORD *)(result + 168) = 0x8C00000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for UserGraphError.ErrorType()
{
  return &type metadata for UserGraphError.ErrorType;
}

uint64_t NodeDef.IOSpec.init(name:type:isUniform:defaultValue:defaultGeomProp:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  *(_QWORD *)a9 = result;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a5;
  *(_QWORD *)(a9 + 32) = a6;
  *(_QWORD *)(a9 + 40) = a7;
  *(_QWORD *)(a9 + 48) = a8;
  *(_BYTE *)(a9 + 56) = a4;
  return result;
}

__n128 NodeDef.init(name:nodeName:inherit:nodegroup:version:isdefaultversion:targets:uiName:inputs:outputs:available:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, __int128 a13, uint64_t a14, uint64_t a15, uint64_t a16, __n128 a17)
{
  __n128 result;

  result = a17;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(_QWORD *)(a9 + 64) = a10;
  *(_QWORD *)(a9 + 72) = a11;
  *(_BYTE *)(a9 + 80) = a12;
  *(_OWORD *)(a9 + 88) = a13;
  *(_QWORD *)(a9 + 104) = a14;
  *(__n128 *)(a9 + 112) = a17;
  *(_QWORD *)(a9 + 128) = a15;
  *(_QWORD *)(a9 + 136) = a16;
  return result;
}

uint64_t static MaterialXTarget.target(named:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;

  if (one-time initialization token for allTargets != -1)
    swift_once();
  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  v5 = specialized Sequence.first(where:)(v4, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t NodeDef.Implementation.init(kind:targets:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  outlined init with take of NodeDef.Implementation.Kind(a1, a3);
  result = type metadata accessor for NodeDef.Implementation(0);
  *(_QWORD *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t NodeDef.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  v4 = *(_QWORD *)(v3 + 128);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v7 = result;
    v17 = a3;
    v8 = (uint64_t *)(v4 + 48);
    while (1)
    {
      v9 = *(v8 - 2);
      v10 = *(v8 - 1);
      v11 = *v8;
      v12 = v8[1];
      v18 = *((_OWORD *)v8 + 1);
      v13 = v8[4];
      v14 = *((_BYTE *)v8 + 40);
      if (v9 == v7 && v10 == a2)
        break;
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0)
        goto LABEL_12;
      v8 += 8;
      if (!--v5)
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v16 = 0uLL;
        goto LABEL_13;
      }
    }
    v9 = v7;
    v10 = a2;
LABEL_12:
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v16 = v18;
LABEL_13:
    a3 = v17;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v16 = 0uLL;
  }
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 16) = v11;
  *(_QWORD *)(a3 + 24) = v12;
  *(_OWORD *)(a3 + 32) = v16;
  *(_QWORD *)(a3 + 48) = v13;
  *(_BYTE *)(a3 + 56) = v14;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  v4 = *(_QWORD *)(v3 + 136);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v7 = result;
    v17 = a3;
    v8 = (uint64_t *)(v4 + 48);
    while (1)
    {
      v9 = *(v8 - 2);
      v10 = *(v8 - 1);
      v11 = *v8;
      v12 = v8[1];
      v18 = *((_OWORD *)v8 + 1);
      v13 = v8[4];
      v14 = *((_BYTE *)v8 + 40);
      if (v9 == v7 && v10 == a2)
        break;
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0)
        goto LABEL_12;
      v8 += 8;
      if (!--v5)
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v16 = 0uLL;
        goto LABEL_13;
      }
    }
    v9 = v7;
    v10 = a2;
LABEL_12:
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v16 = v18;
LABEL_13:
    a3 = v17;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v16 = 0uLL;
  }
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 16) = v11;
  *(_QWORD *)(a3 + 24) = v12;
  *(_OWORD *)(a3 + 32) = v16;
  *(_QWORD *)(a3 + 48) = v13;
  *(_BYTE *)(a3 + 56) = v14;
  return result;
}

uint64_t *MaterialXTarget.realitykit_geometryModifier.unsafeMutableAddressor()
{
  if (one-time initialization token for realitykit_geometryModifier != -1)
    swift_once();
  return &static MaterialXTarget.realitykit_geometryModifier;
}

uint64_t *MaterialXTarget.realitykit_surfaceShader.unsafeMutableAddressor()
{
  if (one-time initialization token for realitykit_surfaceShader != -1)
    swift_once();
  return &static MaterialXTarget.realitykit_surfaceShader;
}

uint64_t MaterialXTarget.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MaterialXTarget.parent.getter()
{
  return swift_retain();
}

uint64_t MaterialXTarget.conformsTo(_:)(uint64_t a1)
{
  _QWORD *v1;
  BOOL v3;

  while (1)
  {
    v3 = v1[2] == *(_QWORD *)(a1 + 16) && v1[3] == *(_QWORD *)(a1 + 24);
    if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      break;
    v1 = (_QWORD *)v1[4];
    if (!v1)
      return 0;
  }
  return 1;
}

uint64_t MaterialXTarget.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 32) = 0;
  if (v1)
  {
    do
    {
      if (!swift_isUniquelyReferenced_native())
        break;
      v2 = *(_QWORD *)(v1 + 32);
      swift_retain();
      swift_release();
      v1 = v2;
    }
    while (v2);
  }
  swift_release();
  return v0;
}

uint64_t MaterialXTarget.__deallocating_deinit()
{
  MaterialXTarget.deinit();
  return swift_deallocClassInstance();
}

uint64_t MaterialXTarget.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v1 + 32);
  swift_retain();
  specialized Optional<A>.hash(into:)(a1, v3);
  return swift_release();
}

Swift::Int MaterialXTarget.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[72];

  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 32);
  swift_retain();
  specialized Optional<A>.hash(into:)((uint64_t)v3, v1);
  swift_release();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MaterialXTarget()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v1 + 32);
  swift_retain();
  specialized Optional<A>.hash(into:)((uint64_t)v4, v2);
  swift_release();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MaterialXTarget(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v3 + 32);
  swift_retain();
  specialized Optional<A>.hash(into:)(a1, v4);
  return swift_release();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MaterialXTarget()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v1 + 32);
  swift_retain();
  specialized Optional<A>.hash(into:)((uint64_t)v4, v2);
  swift_release();
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MaterialXTarget(_QWORD **a1, _QWORD **a2)
{
  return specialized static MaterialXTarget.== infix(_:_:)(*a1, *a2);
}

uint64_t one-time initialization function for realitykit()
{
  uint64_t result;

  type metadata accessor for MaterialXTarget();
  result = swift_initStaticObject();
  static MaterialXTarget.realitykit = result;
  return result;
}

uint64_t *MaterialXTarget.realitykit.unsafeMutableAddressor()
{
  if (one-time initialization token for realitykit != -1)
    swift_once();
  return &static MaterialXTarget.realitykit;
}

uint64_t static MaterialXTarget.realitykit.getter()
{
  return swift_initStaticObject();
}

_QWORD *one-time initialization function for realitykit_geometryModifier()
{
  uint64_t inited;
  _QWORD *result;

  type metadata accessor for MaterialXTarget();
  inited = swift_initStaticObject();
  result = (_QWORD *)swift_allocObject();
  result[2] = 0xD00000000000001CLL;
  result[3] = 0x8000000245FCC200;
  result[4] = inited;
  static MaterialXTarget.realitykit_geometryModifier = (uint64_t)result;
  return result;
}

uint64_t static MaterialXTarget.realitykit_geometryModifier.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for realitykit_geometryModifier);
}

_QWORD *one-time initialization function for realitykit_surfaceShader()
{
  uint64_t inited;
  _QWORD *result;

  type metadata accessor for MaterialXTarget();
  inited = swift_initStaticObject();
  result = (_QWORD *)swift_allocObject();
  result[2] = 0xD000000000000019;
  result[3] = 0x8000000245FCC220;
  result[4] = inited;
  static MaterialXTarget.realitykit_surfaceShader = (uint64_t)result;
  return result;
}

uint64_t static MaterialXTarget.realitykit_surfaceShader.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for realitykit_surfaceShader);
}

uint64_t one-time initialization function for allTargets()
{
  uint64_t v0;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_245FC2320;
  type metadata accessor for MaterialXTarget();
  *(_QWORD *)(v0 + 32) = swift_initStaticObject();
  if (one-time initialization token for realitykit_geometryModifier != -1)
    swift_once();
  *(_QWORD *)(v0 + 40) = static MaterialXTarget.realitykit_geometryModifier;
  v1 = one-time initialization token for realitykit_surfaceShader;
  swift_retain();
  if (v1 != -1)
    swift_once();
  *(_QWORD *)(v0 + 48) = static MaterialXTarget.realitykit_surfaceShader;
  specialized Array._endMutation()();
  static MaterialXTarget.allTargets = v0;
  return swift_retain();
}

uint64_t *MaterialXTarget.allTargets.unsafeMutableAddressor()
{
  if (one-time initialization token for allTargets != -1)
    swift_once();
  return &static MaterialXTarget.allTargets;
}

uint64_t static MaterialXTarget.allTargets.getter()
{
  if (one-time initialization token for allTargets != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

void MaterialXAvailability.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::UInt v4;

  if (a3 == 2)
  {
    v4 = 1;
    goto LABEL_5;
  }
  if (a3 == 1)
  {
    v4 = 0;
LABEL_5:
    Hasher._combine(_:)(v4);
    return;
  }
  Hasher._combine(_:)(2uLL);
  if (a3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of MaterialXAvailability(a2, a3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int MaterialXAvailability.hashValue.getter(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;

  Hasher.init(_seed:)();
  if (a2 == 2)
  {
    v4 = 1;
    goto LABEL_5;
  }
  if (a2 == 1)
  {
    v4 = 0;
LABEL_5:
    Hasher._combine(_:)(v4);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(2uLL);
  if (a2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of MaterialXAvailability(a1, a2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MaterialXAvailability()
{
  uint64_t *v0;

  return MaterialXAvailability.hashValue.getter(*v0, v0[1]);
}

void protocol witness for Hashable.hash(into:) in conformance MaterialXAvailability()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt v2;
  uint64_t v3;

  v1 = v0[1];
  if (v1 == 2)
  {
    v2 = 1;
    goto LABEL_5;
  }
  if (v1 == 1)
  {
    v2 = 0;
LABEL_5:
    Hasher._combine(_:)(v2);
    return;
  }
  v3 = *v0;
  Hasher._combine(_:)(2uLL);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of MaterialXAvailability(v3, v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MaterialXAvailability()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt v3;

  v2 = *v0;
  v1 = v0[1];
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    v3 = 1;
    goto LABEL_5;
  }
  if (v1 == 1)
  {
    v3 = 0;
LABEL_5:
    Hasher._combine(_:)(v3);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(2uLL);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of MaterialXAvailability(v2, v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MaterialXAvailability(uint64_t *a1, uint64_t *a2)
{
  return specialized static MaterialXAvailability.== infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

uint64_t NodeDef.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDef.nodeName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDef.inherit.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDef.nodegroup.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDef.version.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDef.isdefaultversion.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t NodeDef.targets.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NodeDef.uiName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDef.available.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  outlined copy of MaterialXAvailability(v1, *(_QWORD *)(v0 + 120));
  return v1;
}

uint64_t NodeDef.inputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NodeDef.outputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NodeDef.IOSpec.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDef.IOSpec.type.getter()
{
  return swift_retain();
}

uint64_t NodeDef.IOSpec.defaultValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDef.IOSpec.defaultGeomProp.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDef.IOSpec.isUniform.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 56);
}

void NodeDef.IOSpec.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = v1;
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v2 + 16);
  swift_beginAccess();
  v5 = *(_QWORD *)(v4 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v5);
  swift_release();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v2 + 32))
  {
    Hasher._combine(_:)(0);
    if (*(_QWORD *)(v2 + 48))
      goto LABEL_3;
LABEL_5:
    Hasher._combine(_:)(0);
    goto LABEL_6;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v2 + 48))
    goto LABEL_5;
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_6:
  Hasher._combine(_:)(*(_BYTE *)(v2 + 56) & 1);
}

Swift::Int NodeDef.IOSpec.hashValue.getter()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  NodeDef.IOSpec.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NodeDef.IOSpec()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  NodeDef.IOSpec.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NodeDef.IOSpec()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  NodeDef.IOSpec.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NodeDef.IOSpec(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  _OWORD v6[2];
  _OWORD v7[2];
  _OWORD v8[2];

  v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  v6[0] = a1[2];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)a1 + 41);
  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v8[0] = a2[2];
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)a2 + 41);
  return specialized static NodeDef.IOSpec.== infix(_:_:)((uint64_t)v5, (uint64_t)v7) & 1;
}

uint64_t NodeDef.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  Swift::UInt8 v5;
  uint64_t v6;
  Swift::UInt v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v2 + 40))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v2 + 56))
      goto LABEL_3;
LABEL_6:
    Hasher._combine(_:)(0);
    if (*(_QWORD *)(v2 + 72))
      goto LABEL_4;
    goto LABEL_7;
  }
  Hasher._combine(_:)(0);
  if (!*(_QWORD *)(v2 + 56))
    goto LABEL_6;
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v2 + 72))
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
LABEL_7:
  Hasher._combine(_:)(0);
LABEL_8:
  v4 = *(unsigned __int8 *)(v2 + 80);
  if (v4 == 2)
  {
    v5 = 0;
  }
  else
  {
    v5 = v4 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v5);
  v6 = *(_QWORD *)(v2 + 88);
  v17 = v6;
  v7 = *(_QWORD *)(v6 + 16);
  Hasher._combine(_:)(v7);
  if (v7)
  {
    swift_bridgeObjectRetain();
    v8 = v6 + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v8 += 16;
      --v7;
    }
    while (v7);
    outlined release of [Input]((uint64_t)&v17);
  }
  if (*(_QWORD *)(v2 + 104))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v9 = *(_QWORD *)(v2 + 120);
  if (v9 == 2)
  {
    v10 = 1;
    goto LABEL_22;
  }
  if (v9 == 1)
  {
    v10 = 0;
LABEL_22:
    Hasher._combine(_:)(v10);
    goto LABEL_27;
  }
  v11 = *(_QWORD *)(v2 + 112);
  Hasher._combine(_:)(2uLL);
  if (v9)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v12 = v11;
    v13 = v9;
  }
  else
  {
    Hasher._combine(_:)(0);
    v12 = v11;
    v13 = 0;
  }
  outlined consume of MaterialXAvailability(v12, v13);
LABEL_27:
  v14 = *(_QWORD *)(v2 + 128);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v14);
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v2 + 136);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v15);
  return swift_bridgeObjectRelease();
}

Swift::Int NodeDef.hashValue.getter()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  NodeDef.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NodeDef()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  NodeDef.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NodeDef()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  NodeDef.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NodeDef(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[9];
  _OWORD v12[9];

  v2 = a1[7];
  v11[6] = a1[6];
  v11[7] = v2;
  v11[8] = a1[8];
  v3 = a1[3];
  v11[2] = a1[2];
  v11[3] = v3;
  v4 = a1[5];
  v11[4] = a1[4];
  v11[5] = v4;
  v5 = a1[1];
  v11[0] = *a1;
  v11[1] = v5;
  v6 = a2[7];
  v12[6] = a2[6];
  v12[7] = v6;
  v12[8] = a2[8];
  v7 = a2[3];
  v12[2] = a2[2];
  v12[3] = v7;
  v8 = a2[5];
  v12[4] = a2[4];
  v12[5] = v8;
  v9 = a2[1];
  v12[0] = *a2;
  v12[1] = v9;
  return specialized static NodeDef.== infix(_:_:)((uint64_t)v11, (uint64_t)v12) & 1;
}

uint64_t NodeDef.Implementation.kind.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of NodeDef.Implementation.Kind(v1, a1);
}

uint64_t NodeDef.Implementation.targets.getter()
{
  type metadata accessor for NodeDef.Implementation(0);
  return swift_bridgeObjectRetain();
}

uint64_t NodeDef.Implementation.isAvailableFor(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for NodeDef.Implementation(0) + 20));
  if ((v1 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(v1 + 16))
      goto LABEL_3;
LABEL_5:
    v3 = 1;
    return v3 & 1;
  }
  if (!__CocoaSet.count.getter())
    goto LABEL_5;
LABEL_3:
  swift_retain();
  v2 = swift_bridgeObjectRetain();
  v3 = specialized Sequence.contains(where:)(v2);
  swift_bridgeObjectRelease();
  swift_release();
  return v3 & 1;
}

uint64_t NodeDef.Implementation.hash(into:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  NodeDef.Implementation.Kind.hash(into:)();
  v3 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for NodeDef.Implementation(0) + 20));
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t static NodeDef.Implementation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;

  specialized static NodeDef.Implementation.Kind.== infix(_:_:)(a1, a2);
  if ((v4 & 1) == 0)
    return 0;
  v5 = *(int *)(type metadata accessor for NodeDef.Implementation(0) + 20);
  return specialized static Set.== infix(_:_:)(*(_QWORD *)(a1 + v5), *(_QWORD *)(a2 + v5));
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t j;
  uint64_t v29;
  _QWORD *v30;
  BOOL v31;
  int64_t v32;
  uint64_t v33;
  int64_t v34;
  char v35[72];

  v3 = result;
  v4 = a2 & 0xC000000000000001;
  if ((result & 0xC000000000000001) != 0)
  {
    if (result < 0)
      v5 = result;
    else
      v5 = result & 0xFFFFFFFFFFFFFF8;
    if (v4)
      return __CocoaSet.isEqual(to:)();
    v6 = v5;
    v7 = a2;
    return specialized _NativeSet.isEqual(to:)(v6, v7);
  }
  if (v4)
  {
    if (a2 < 0)
      v6 = a2;
    else
      v6 = a2 & 0xFFFFFFFFFFFFFF8;
    v7 = v3;
    return specialized _NativeSet.isEqual(to:)(v6, v7);
  }
  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v8 = 0;
  v9 = result + 56;
  v10 = 1 << *(_BYTE *)(result + 32);
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(result + 56);
  v32 = (unint64_t)(v10 + 63) >> 6;
  v13 = a2 + 56;
  if (!v12)
    goto LABEL_21;
LABEL_20:
  v33 = (v12 - 1) & v12;
  v34 = v8;
  for (i = __clz(__rbit64(v12)) | (v8 << 6); ; i = __clz(__rbit64(v16)) + (v17 << 6))
  {
    v19 = *(_QWORD **)(*(_QWORD *)(v3 + 48) + 8 * i);
    Hasher.init(_seed:)();
    swift_retain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v20 = v19[4];
    swift_retain();
    specialized Optional<A>.hash(into:)((uint64_t)v35, v20);
    swift_release();
    v21 = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(a2 + 32);
    v23 = v21 & ~v22;
    if (((*(_QWORD *)(v13 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
      goto LABEL_48;
    v24 = (_QWORD *)swift_retain();
    v25 = specialized static MaterialXTarget.== infix(_:_:)(v24, v19);
    swift_release();
    if (!v25)
    {
      v26 = v9;
      v27 = ~v22;
      for (j = v23 + 1; ; j = v29 + 1)
      {
        v29 = j & v27;
        if (((*(_QWORD *)(v13 + (((j & v27) >> 3) & 0xFFFFFFFFFFFFF8)) >> (j & v27)) & 1) == 0)
          break;
        v30 = (_QWORD *)swift_retain();
        v31 = specialized static MaterialXTarget.== infix(_:_:)(v30, v19);
        swift_release();
        if (v31)
        {
          result = swift_release();
          v9 = v26;
          goto LABEL_45;
        }
      }
LABEL_48:
      swift_release();
      return 0;
    }
    result = swift_release();
LABEL_45:
    v12 = v33;
    v8 = v34;
    if (v33)
      goto LABEL_20;
LABEL_21:
    v15 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_51;
    }
    if (v15 >= v32)
      return 1;
    v16 = *(_QWORD *)(v9 + 8 * v15);
    v17 = v8 + 1;
    if (!v16)
    {
      v17 = v15 + 1;
      if (v15 + 1 >= v32)
        return 1;
      v16 = *(_QWORD *)(v9 + 8 * v17);
      if (!v16)
      {
        v17 = v15 + 2;
        if (v15 + 2 >= v32)
          return 1;
        v16 = *(_QWORD *)(v9 + 8 * v17);
        if (!v16)
        {
          v17 = v15 + 3;
          if (v15 + 3 >= v32)
            return 1;
          v16 = *(_QWORD *)(v9 + 8 * v17);
          if (!v16)
            break;
        }
      }
    }
LABEL_36:
    v33 = (v16 - 1) & v16;
    v34 = v17;
  }
  v18 = v15 + 4;
  if (v18 >= v32)
    return 1;
  v16 = *(_QWORD *)(v9 + 8 * v18);
  if (v16)
  {
    v17 = v18;
    goto LABEL_36;
  }
  while (1)
  {
    v17 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v17 >= v32)
      return 1;
    v16 = *(_QWORD *)(v9 + 8 * v17);
    ++v18;
    if (v16)
      goto LABEL_36;
  }
LABEL_51:
  __break(1u);
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  unint64_t i;
  uint64_t v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v29 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(result + 56);
  v30 = (unint64_t)(v4 + 63) >> 6;
  v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v31 = v3;
      v9 = v8 | (v3 << 6);
      goto LABEL_26;
    }
    v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v10 >= v30)
      return 1;
    v11 = *(_QWORD *)(v29 + 8 * v10);
    v12 = v3 + 1;
    if (!v11)
    {
      v12 = v3 + 2;
      if (v3 + 2 >= v30)
        return 1;
      v11 = *(_QWORD *)(v29 + 8 * v12);
      if (!v11)
      {
        v12 = v3 + 3;
        if (v3 + 3 >= v30)
          return 1;
        v11 = *(_QWORD *)(v29 + 8 * v12);
        if (!v11)
        {
          v12 = v3 + 4;
          if (v3 + 4 >= v30)
            return 1;
          v11 = *(_QWORD *)(v29 + 8 * v12);
          if (!v11)
            break;
        }
      }
    }
LABEL_25:
    v6 = (v11 - 1) & v11;
    v31 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_26:
    v14 = result;
    v15 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v9);
    v17 = *v15;
    v16 = v15[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v18 = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(a2 + 32);
    v20 = v18 & ~v19;
    if (((*(_QWORD *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      goto LABEL_41;
    v21 = *(_QWORD *)(a2 + 48);
    v22 = (_QWORD *)(v21 + 16 * v20);
    v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v24 = ~v19;
      for (i = v20 + 1; ; i = v26 + 1)
      {
        v26 = i & v24;
        if (((*(_QWORD *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0)
          break;
        v27 = (_QWORD *)(v21 + 16 * v26);
        v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_7;
      }
LABEL_41:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    result = v14;
    v3 = v31;
  }
  v13 = v3 + 5;
  if (v3 + 5 >= v30)
    return 1;
  v11 = *(_QWORD *)(v29 + 8 * v13);
  if (v11)
  {
    v12 = v3 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v30)
      return 1;
    v11 = *(_QWORD *)(v29 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_25;
  }
LABEL_45:
  __break(1u);
  return result;
}

Swift::Int NodeDef.Implementation.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v3[4];

  Hasher.init(_seed:)();
  NodeDef.Implementation.Kind.hash(into:)();
  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for NodeDef.Implementation(0) + 20));
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NodeDef.Implementation(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v5[4];

  Hasher.init(_seed:)();
  NodeDef.Implementation.Kind.hash(into:)();
  v3 = *(_QWORD *)(v1 + *(int *)(a1 + 20));
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v5, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NodeDef.Implementation(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  NodeDef.Implementation.Kind.hash(into:)();
  v5 = *(_QWORD *)(v2 + *(int *)(a2 + 20));
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v5);
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NodeDef.Implementation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  __int128 v6[4];

  Hasher.init(_seed:)();
  NodeDef.Implementation.Kind.hash(into:)();
  v4 = *(_QWORD *)(v2 + *(int *)(a2 + 20));
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v6, v4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NodeDef.Implementation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;

  specialized static NodeDef.Implementation.Kind.== infix(_:_:)(a1, a2);
  if ((v6 & 1) != 0)
    return specialized static Set.== infix(_:_:)(*(_QWORD *)(a1 + *(int *)(a3 + 20)), *(_QWORD *)(a2 + *(int *)(a3 + 20)));
  else
    return 0;
}

void NodeDef.Implementation.Kind.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for URL();
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for NodeDef.Implementation.Kind(0);
  MEMORY[0x24BDAC7A8](v2);
  outlined init with copy of NodeDef.Implementation.Kind(v0, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = (char *)sub_245F1167C + 4 * byte_245FC2330[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_245F1167C()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = v1[9];
  *(_OWORD *)(v2 - 112) = v1[8];
  *(_OWORD *)(v2 - 96) = v3;
  *(_OWORD *)(v2 - 87) = *(_OWORD *)((char *)v1 + 153);
  v4 = v1[5];
  *(_OWORD *)(v2 - 176) = v1[4];
  *(_OWORD *)(v2 - 160) = v4;
  v5 = v1[7];
  *(_OWORD *)(v2 - 144) = v1[6];
  *(_OWORD *)(v2 - 128) = v5;
  v6 = v1[1];
  *(_OWORD *)(v2 - 240) = *v1;
  *(_OWORD *)(v2 - 224) = v6;
  v7 = v1[3];
  *(_OWORD *)(v2 - 208) = v1[2];
  *(_OWORD *)(v2 - 192) = v7;
  Hasher._combine(_:)(0);
  Graph.hash(into:)(v0);
  return outlined release of Graph(v2 - 240);
}

Swift::Int NodeDef.Implementation.Kind.hashValue.getter()
{
  Hasher.init(_seed:)();
  NodeDef.Implementation.Kind.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NodeDef.Implementation.Kind()
{
  Hasher.init(_seed:)();
  NodeDef.Implementation.Kind.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NodeDef.Implementation.Kind()
{
  Hasher.init(_seed:)();
  NodeDef.Implementation.Kind.hash(into:)();
  return Hasher._finalize()();
}

uint64_t specialized _NativeSet.isEqual(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  char v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;

  v3 = *(_QWORD *)(a2 + 16);
  result = __CocoaSet.count.getter();
  if (v3 != result)
    return 0;
  v5 = 0;
  v6 = a2 + 56;
  v7 = 1 << *(_BYTE *)(a2 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (v9)
  {
    v9 &= v9 - 1;
LABEL_6:
    swift_retain();
    v11 = __CocoaSet.contains(_:)();
    result = swift_release();
    if ((v11 & 1) == 0)
      return 0;
  }
  v12 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v12 >= v10)
    return 1;
  v13 = *(_QWORD *)(v6 + 8 * v12);
  ++v5;
  if (v13)
    goto LABEL_19;
  v5 = v12 + 1;
  if (v12 + 1 >= v10)
    return 1;
  v13 = *(_QWORD *)(v6 + 8 * v5);
  if (v13)
  {
LABEL_19:
    v9 = (v13 - 1) & v13;
    goto LABEL_6;
  }
  v14 = v12 + 2;
  if (v14 >= v10)
    return 1;
  v13 = *(_QWORD *)(v6 + 8 * v14);
  if (v13)
  {
    v5 = v14;
    goto LABEL_19;
  }
  while (1)
  {
    v5 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v5 >= v10)
      return 1;
    v13 = *(_QWORD *)(v6 + 8 * v5);
    ++v14;
    if (v13)
      goto LABEL_19;
  }
LABEL_23:
  __break(1u);
  return result;
}

void specialized Optional<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a2)
  {
    Hasher._combine(_:)(1u);
    swift_retain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v4 = *(_QWORD *)(a2 + 32);
    swift_retain();
    specialized Optional<A>.hash(into:)(a1, v4);
    swift_release();
    swift_release();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

void specialized Set.hash(into:)(__int128 *a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::UInt v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25[9];
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  unint64_t v36;

  v3 = *((_QWORD *)a1 + 8);
  v4 = a1[1];
  v27 = *a1;
  v28 = v4;
  v5 = a1[3];
  v29 = a1[2];
  v30 = v5;
  v31 = v3;
  Hasher._finalize()();
  if ((a2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for MaterialXTarget();
    lazy protocol witness table accessor for type SGOutput and conformance SGOutput((unint64_t *)&lazy protocol witness table cache variable for type MaterialXTarget and conformance MaterialXTarget, v6, (uint64_t (*)(uint64_t))type metadata accessor for MaterialXTarget, (uint64_t)&protocol conformance descriptor for MaterialXTarget);
    Set.Iterator.init(_cocoa:)();
    a2 = v32;
    v7 = v33;
    v8 = v34;
    v9 = v35;
    v10 = v36;
  }
  else
  {
    v11 = -1 << *(_BYTE *)(a2 + 32);
    v7 = a2 + 56;
    v8 = ~v11;
    v12 = -v11;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v10 = v13 & *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain();
    v9 = 0;
  }
  v14 = 0;
  v15 = (unint64_t)(v8 + 64) >> 6;
  while (a2 < 0)
  {
    v24 = __CocoaSet.Iterator.next()();
    if (!v24)
      goto LABEL_26;
    v25[0] = v24;
    type metadata accessor for MaterialXTarget();
    swift_dynamicCast();
    v19 = v26;
    if (!v26)
      goto LABEL_27;
    v18 = v9;
    v16 = v10;
LABEL_10:
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v20 = *(_QWORD *)(v19 + 32);
    swift_retain();
    specialized Optional<A>.hash(into:)((uint64_t)v25, v20);
    swift_release();
    v21 = Hasher._finalize()();
    swift_release();
    v14 ^= v21;
    v9 = v18;
    v10 = v16;
  }
  if (v10)
  {
    v16 = (v10 - 1) & v10;
    v17 = __clz(__rbit64(v10)) | (v9 << 6);
    v18 = v9;
LABEL_9:
    v26 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v17);
    v19 = v26;
    swift_retain();
    if (!v19)
      goto LABEL_27;
    goto LABEL_10;
  }
  v18 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v18 >= v15)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v18);
    if (!v22)
    {
      v18 = v9 + 2;
      if (v9 + 2 >= v15)
        goto LABEL_26;
      v22 = *(_QWORD *)(v7 + 8 * v18);
      if (!v22)
      {
        v23 = v9 + 3;
        while (v15 != v23)
        {
          v22 = *(_QWORD *)(v7 + 8 * v23++);
          if (v22)
          {
            v18 = v23 - 1;
            goto LABEL_22;
          }
        }
LABEL_26:
        v26 = 0;
LABEL_27:
        outlined consume of [String : InputSpec].Iterator._Variant();
        Hasher._combine(_:)(v14);
        return;
      }
    }
LABEL_22:
    v16 = (v22 - 1) & v22;
    v17 = __clz(__rbit64(v22)) + (v18 << 6);
    goto LABEL_9;
  }
  __break(1u);
}

BOOL specialized static MaterialXTarget.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  char v11;

  v4 = a1[2] == a2[2] && a1[3] == a2[3];
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    v7 = a1[4];
    v8 = a2[4];
    result = (v7 | v8) == 0;
    if (v7)
      v9 = v8 == 0;
    else
      v9 = 1;
    if (!v9)
    {
      swift_retain();
      v10 = swift_retain();
      v11 = specialized static MaterialXTarget.== infix(_:_:)(v10, v8);
      swift_release();
      swift_release();
      return v11 & 1;
    }
  }
  return result;
}

uint64_t specialized static MaterialXAvailability.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == 2)
    return a4 == 2;
  if (a2 != 1)
  {
    if ((unint64_t)(a4 - 1) < 2)
      return 0;
    if (a2)
      return a4 && (a1 == a3 && a2 == a4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0);
    if (a4)
    {
      outlined consume of MaterialXAvailability(a1, 0);
      return 0;
    }
    return 1;
  }
  return a4 == 1;
}

void specialized static NodeDef.Implementation.Kind.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD v17[50];

  v4 = type metadata accessor for URL();
  v17[2] = *(_QWORD *)(v4 - 8);
  v17[3] = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v17[0] = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v17[1] = (char *)v17 - v7;
  v8 = type metadata accessor for NodeDef.Implementation.Kind(0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v11 = MEMORY[0x24BDAC7A8](v10);
  MEMORY[0x24BDAC7A8](v11);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NodeDef.Implementation.Kind, NodeDef.Implementation.Kind));
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v17 + *(int *)(v13 + 48) - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NodeDef.Implementation.Kind(a1, (uint64_t)v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of NodeDef.Implementation.Kind(a2, (uint64_t)v15);
  v16 = (char *)sub_245F12000 + 4 * byte_245FC2334[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_245F12000()
{
  _OWORD *v0;
  uint64_t v1;
  _OWORD *v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;

  outlined init with copy of NodeDef.Implementation.Kind(v1, (uint64_t)v2);
  v4 = v2[9];
  v0[10] = v2[8];
  v0[11] = v4;
  *(_OWORD *)((char *)v0 + 185) = *(_OWORD *)((char *)v2 + 153);
  v5 = v2[5];
  v0[6] = v2[4];
  v0[7] = v5;
  v6 = v2[7];
  v0[8] = v2[6];
  v0[9] = v6;
  v7 = v2[1];
  v0[2] = *v2;
  v0[3] = v7;
  v8 = v2[3];
  v0[4] = v2[2];
  v0[5] = v8;
  if (swift_getEnumCaseMultiPayload())
  {
    outlined release of Graph((uint64_t)(v0 + 2));
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)(v1, &demangling cache variable for type metadata for (NodeDef.Implementation.Kind, NodeDef.Implementation.Kind));
    v14 = 0;
  }
  else
  {
    v9 = v3[9];
    v0[21] = v3[8];
    v0[22] = v9;
    *(_OWORD *)((char *)v0 + 361) = *(_OWORD *)((char *)v3 + 153);
    v10 = v3[5];
    v0[17] = v3[4];
    v0[18] = v10;
    v11 = v3[7];
    v0[19] = v3[6];
    v0[20] = v11;
    v12 = v3[1];
    v0[13] = *v3;
    v0[14] = v12;
    v13 = v3[3];
    v0[15] = v3[2];
    v0[16] = v13;
    v14 = specialized static Graph.== infix(_:_:)((uint64_t)(v0 + 2), (uint64_t)(v0 + 13));
    outlined release of Graph((uint64_t)(v0 + 13));
    outlined release of Graph((uint64_t)(v0 + 2));
    outlined destroy of NodeDef.Implementation.Kind(v1);
  }
  return v14 & 1;
}

uint64_t specialized static NodeDef.IOSpec.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (*(_QWORD *)a1 != *(_QWORD *)a2 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v6 = 0;
    if ((v5 & 1) == 0)
      return v6 & 1;
  }
  if ((MaterialXDataType.isEqual(to:)() & 1) == 0)
    goto LABEL_21;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a2 + 32);
  if (!v7)
  {
    if (v8)
      goto LABEL_21;
LABEL_14:
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a2 + 48);
    if (v10)
    {
      if (v11)
      {
        if (*(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40) || v10 != v11)
        {
          v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v6 = 0;
          if ((v12 & 1) == 0)
            return v6 & 1;
        }
LABEL_23:
        v6 = ((*(_BYTE *)(a1 + 56) & 1) == 0) ^ *(_BYTE *)(a2 + 56);
        return v6 & 1;
      }
    }
    else if (!v11)
    {
      goto LABEL_23;
    }
LABEL_21:
    v6 = 0;
    return v6 & 1;
  }
  if (!v8)
    goto LABEL_21;
  if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24) && v7 == v8)
    goto LABEL_14;
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v6 = 0;
  if ((v9 & 1) != 0)
    goto LABEL_14;
  return v6 & 1;
}

uint64_t specialized static NodeDef.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  char v5;
  char v6;
  BOOL v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  int v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  __n128 v28;
  __n128 v29;

  v4 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), v6 = 0, (v5 & 1) != 0))
  {
    v7 = *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
    if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), v6 = 0, (v8 & 1) != 0))
    {
      v9 = *(_QWORD *)(a1 + 40);
      v10 = *(_QWORD *)(a2 + 40);
      if (v9)
      {
        if (!v10)
          goto LABEL_53;
        if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32) || v9 != v10)
        {
          v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v6 = 0;
          if ((v11 & 1) == 0)
            return v6 & 1;
        }
      }
      else if (v10)
      {
        goto LABEL_53;
      }
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_QWORD *)(a2 + 56);
      if (v12)
      {
        if (!v13)
          goto LABEL_53;
        if (*(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48) || v12 != v13)
        {
          v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v6 = 0;
          if ((v14 & 1) == 0)
            return v6 & 1;
        }
      }
      else if (v13)
      {
        goto LABEL_53;
      }
      v15 = *(_QWORD *)(a1 + 72);
      v16 = *(_QWORD *)(a2 + 72);
      if (v15)
      {
        if (!v16)
          goto LABEL_53;
        if (*(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64) || v15 != v16)
        {
          v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v6 = 0;
          if ((v17 & 1) == 0)
            return v6 & 1;
        }
      }
      else if (v16)
      {
        goto LABEL_53;
      }
      v18 = *(unsigned __int8 *)(a1 + 80);
      v19 = *(unsigned __int8 *)(a2 + 80);
      if (v18 == 2)
      {
        if (v19 != 2)
          goto LABEL_53;
      }
      else
      {
        v6 = 0;
        v20 = (v18 & 1) == 0;
        if (v19 == 2 || ((v20 ^ v19) & 1) == 0)
          return v6 & 1;
      }
      if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(a1 + 88), *(_QWORD **)(a2 + 88)) & 1) != 0)
      {
        v21 = *(_QWORD *)(a1 + 104);
        v22 = *(_QWORD *)(a2 + 104);
        if (v21)
        {
          if (!v22)
            goto LABEL_53;
          if (*(_QWORD *)(a1 + 96) != *(_QWORD *)(a2 + 96) || v21 != v22)
          {
            v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
            v6 = 0;
            if ((v23 & 1) == 0)
              return v6 & 1;
          }
        }
        else if (v22)
        {
          goto LABEL_53;
        }
        outlined init with take of MaterialXAvailability((__n128 *)(a1 + 112), &v28);
        v25 = *(_QWORD *)(a2 + 112);
        v24 = *(_QWORD *)(a2 + 120);
        outlined init with take of MaterialXAvailability(&v28, &v29);
        if (v29.n128_u64[1] == 2)
        {
          if (v24 != 2)
            goto LABEL_53;
        }
        else if (v29.n128_u64[1] == 1)
        {
          if (v24 != 1)
            goto LABEL_53;
        }
        else
        {
          if ((unint64_t)(v24 - 1) < 2)
            goto LABEL_53;
          if (v29.n128_u64[1])
          {
            if (!v24)
              goto LABEL_53;
            if (v29.n128_u64[0] != v25 || v29.n128_u64[1] != v24)
            {
              v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
              v6 = 0;
              if ((v27 & 1) == 0)
                return v6 & 1;
            }
          }
          else if (v24)
          {
            outlined release of MaterialXAvailability((uint64_t *)&v28);
            goto LABEL_53;
          }
        }
        if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 128), *(_QWORD *)(a2 + 128)) & 1) != 0)
        {
          v6 = specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 136), *(_QWORD *)(a2 + 136));
          return v6 & 1;
        }
      }
LABEL_53:
      v6 = 0;
    }
  }
  return v6 & 1;
}

uint64_t specialized Sequence.first(where:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;

  if (a1 >> 62)
  {
LABEL_19:
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6)
      goto LABEL_3;
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      v7 = 4;
      do
      {
        v8 = v7 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          v9 = MEMORY[0x24954B748](v7 - 4, a1);
          v10 = __OFADD__(v8, 1);
          v11 = v7 - 3;
          if (v10)
            goto LABEL_18;
        }
        else
        {
          v9 = *(_QWORD *)(a1 + 8 * v7);
          swift_retain();
          v10 = __OFADD__(v8, 1);
          v11 = v7 - 3;
          if (v10)
          {
LABEL_18:
            __break(1u);
            goto LABEL_19;
          }
        }
        v12 = *(_QWORD *)(v9 + 16) == a2 && *(_QWORD *)(v9 + 24) == a3;
        if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return v9;
        }
        swift_release();
        ++v7;
      }
      while (v11 != v6);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized MaterialXAvailability.init(_:message:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;

  if (!a2)
    goto LABEL_10;
  if ((a1 != 0x726F707075736E75 || a2 != 0xEB00000000646574)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (a1 == 0x7461636572706564 && a2 == 0xEA00000000006465)
    {
      swift_bridgeObjectRelease();
      return a3;
    }
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return a3;
LABEL_10:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t outlined init with take of NodeDef.Implementation.Kind(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NodeDef.Implementation.Kind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for NodeDef.Implementation.Kind(uint64_t a1)
{
  return type metadata accessor for NodeDef.Implementation.Kind(a1, (uint64_t *)&type metadata singleton initialization cache for NodeDef.Implementation.Kind);
}

uint64_t type metadata accessor for NodeDef.Implementation(uint64_t a1)
{
  return type metadata accessor for NodeDef.Implementation.Kind(a1, (uint64_t *)&type metadata singleton initialization cache for NodeDef.Implementation);
}

uint64_t type metadata accessor for NodeDef.Implementation.Kind(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of NodeDef.Implementation.Kind(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NodeDef.Implementation.Kind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t base witness table accessor for Equatable in MaterialXTarget(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type SGOutput and conformance SGOutput(&lazy protocol witness table cache variable for type MaterialXTarget and conformance MaterialXTarget, a2, (uint64_t (*)(uint64_t))type metadata accessor for MaterialXTarget, (uint64_t)&protocol conformance descriptor for MaterialXTarget);
}

uint64_t type metadata accessor for MaterialXTarget()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type MaterialXAvailability and conformance MaterialXAvailability()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MaterialXAvailability and conformance MaterialXAvailability;
  if (!lazy protocol witness table cache variable for type MaterialXAvailability and conformance MaterialXAvailability)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for MaterialXAvailability, &type metadata for MaterialXAvailability);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialXAvailability and conformance MaterialXAvailability);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NodeDef.IOSpec and conformance NodeDef.IOSpec()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NodeDef.IOSpec and conformance NodeDef.IOSpec;
  if (!lazy protocol witness table cache variable for type NodeDef.IOSpec and conformance NodeDef.IOSpec)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for NodeDef.IOSpec, &type metadata for NodeDef.IOSpec);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDef.IOSpec and conformance NodeDef.IOSpec);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NodeDef and conformance NodeDef()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NodeDef and conformance NodeDef;
  if (!lazy protocol witness table cache variable for type NodeDef and conformance NodeDef)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for NodeDef, &type metadata for NodeDef);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDef and conformance NodeDef);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in NodeDef.Implementation()
{
  return lazy protocol witness table accessor for type SGOutput and conformance SGOutput(&lazy protocol witness table cache variable for type NodeDef.Implementation and conformance NodeDef.Implementation, 255, type metadata accessor for NodeDef.Implementation, (uint64_t)&protocol conformance descriptor for NodeDef.Implementation);
}

uint64_t base witness table accessor for Equatable in NodeDef.Implementation.Kind()
{
  return lazy protocol witness table accessor for type SGOutput and conformance SGOutput(&lazy protocol witness table cache variable for type NodeDef.Implementation.Kind and conformance NodeDef.Implementation.Kind, 255, type metadata accessor for NodeDef.Implementation.Kind, (uint64_t)&protocol conformance descriptor for NodeDef.Implementation.Kind);
}

uint64_t method lookup function for MaterialXTarget()
{
  return swift_lookUpClassMethod();
}

unint64_t destroy for MaterialXAvailability(uint64_t a1)
{
  unint64_t result;
  int v2;

  result = *(_QWORD *)(a1 + 8);
  v2 = -1;
  if (result < 0xFFFFFFFF)
    v2 = result;
  if ((v2 + 1) <= 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MaterialXAvailability(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF)
    v4 = *(_QWORD *)(a2 + 8);
  if ((v4 + 1) > 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for MaterialXAvailability(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  LODWORD(v4) = -1;
  if (a1[1] >= 0xFFFFFFFFuLL)
    LODWORD(v5) = -1;
  else
    v5 = a1[1];
  v6 = v5 + 1;
  if (a2[1] < 0xFFFFFFFFuLL)
    v4 = a2[1];
  v7 = v4 + 1;
  if (v6 > 1)
  {
    if (v7 <= 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_12:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v7 > 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MaterialXAvailability(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = -1;
  if (v4 < 0xFFFFFFFF)
    v5 = v4;
  if ((v5 + 1) > 1)
    goto LABEL_9;
  v6 = *(_QWORD *)(a2 + 8);
  LODWORD(v7) = -1;
  if (v6 < 0xFFFFFFFF)
    v7 = *(_QWORD *)(a2 + 8);
  if ((v7 + 1) > 1)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MaterialXAvailability(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) < 2)
    LODWORD(v3) = 0;
  if (v3 >= 3)
    return (v3 - 2);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MaterialXAvailability(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for MaterialXAvailability(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  if ((v1 + 1) >= 2)
    return v1;
  else
    return 0;
}

_QWORD *destructiveInjectEnumTag for MaterialXAvailability(_QWORD *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *result = 0;
    result[1] = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
  }
  else if (a2)
  {
    result[1] = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MaterialXAvailability()
{
  return &type metadata for MaterialXAvailability;
}

uint64_t destroy for NodeDef(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((unint64_t)(*(_QWORD *)(a1 + 120) - 1) >= 2)
    swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NodeDef(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v9 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v9;
  v14 = (_QWORD *)(a2 + 112);
  v10 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((unint64_t)(v10 - 1) >= 2)
  {
    *(_QWORD *)(a1 + 112) = *v14;
    *(_QWORD *)(a1 + 120) = v10;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)v14;
  }
  v11 = *(_QWORD *)(a2 + 128);
  v12 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v11;
  *(_QWORD *)(a1 + 136) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NodeDef(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 120) - 1;
  if ((unint64_t)(*(_QWORD *)(a1 + 120) - 1) >= 2)
  {
    if (v4 >= 2)
    {
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)(a1 + 112, &demangling cache variable for type metadata for String?);
    goto LABEL_6;
  }
  if (v4 < 2)
  {
LABEL_6:
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
LABEL_8:
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy144_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t assignWithTake for NodeDef(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v9;
  swift_bridgeObjectRelease();
  v10 = (_QWORD *)(a2 + 112);
  if ((unint64_t)(*(_QWORD *)(a1 + 120) - 1) >= 2)
  {
    v11 = *(_QWORD *)(a2 + 120);
    if ((unint64_t)(v11 - 1) >= 2)
    {
      *(_QWORD *)(a1 + 112) = *v10;
      *(_QWORD *)(a1 + 120) = v11;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)(a1 + 112, &demangling cache variable for type metadata for String?);
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)v10;
LABEL_6:
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NodeDef(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 144))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NodeDef(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NodeDef()
{
  return &type metadata for NodeDef;
}

uint64_t destroy for NodeDef.IOSpec()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NodeDef.IOSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NodeDef.IOSpec(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for NodeDef.IOSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

ValueMetadata *type metadata accessor for NodeDef.IOSpec()
{
  return &type metadata for NodeDef.IOSpec;
}

uint64_t initializeBufferWithCopyOfBuffer for NodeDef.Implementation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    type metadata accessor for NodeDef.Implementation.Kind(0);
    v5 = (char *)&loc_245F13588 + 4 * byte_245FC233F[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for NodeDef.Implementation(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for NodeDef.Implementation.Kind(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(*(_QWORD *)(a1 + 80));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(*(_QWORD *)(a1 + 128));
      swift_bridgeObjectRelease();
      goto LABEL_3;
    case 1u:
      swift_bridgeObjectRelease();
      v2 = a1
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (functionName: String?, file: URL))
                  + 48);
      v3 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
      break;
    case 2u:
    case 3u:
LABEL_3:
      swift_bridgeObjectRelease();
      break;
    default:
      return swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

void initializeWithCopy for NodeDef.Implementation()
{
  char *v0;

  type metadata accessor for NodeDef.Implementation.Kind(0);
  v0 = (char *)sub_245F13884 + 4 * byte_245FC234E[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_QWORD *sub_245F13884()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v1[1];
  *v0 = *v1;
  v0[1] = v3;
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)((char *)v0 + *(int *)(v2 + 20)) = *(_QWORD *)((char *)v1 + *(int *)(v2 + 20));
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t assignWithCopy for NodeDef.Implementation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v4;

  if (a1 != a2)
  {
    outlined destroy of NodeDef.Implementation.Kind(a1);
    type metadata accessor for NodeDef.Implementation.Kind(0);
    v4 = (char *)&loc_245F13A64 + 4 * byte_245FC2352[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of NodeDef.Implementation.Kind(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NodeDef.Implementation.Kind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *initializeWithTake for NodeDef.Implementation(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = type metadata accessor for NodeDef.Implementation.Kind(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (functionName: String?, file: URL))
                + 48);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

_OWORD *assignWithTake for NodeDef.Implementation(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  if (a1 != a2)
  {
    outlined destroy of NodeDef.Implementation.Kind((uint64_t)a1);
    v6 = type metadata accessor for NodeDef.Implementation.Kind(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (functionName: String?, file: URL))
                  + 48);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NodeDef.Implementation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_245F13E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for NodeDef.Implementation.Kind(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for NodeDef.Implementation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_245F13EB0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for NodeDef.Implementation.Kind(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for NodeDef.Implementation()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for NodeDef.Implementation.Kind(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for NodeDef.Implementation.Kind(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_245F13FF8 + 4 * byte_245FC2356[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for NodeDef.Implementation.Kind(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(*(_QWORD *)(a1 + 80));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(*(_QWORD *)(a1 + 128));
      swift_bridgeObjectRelease();
      goto LABEL_3;
    case 1:
      swift_bridgeObjectRelease();
      v3 = a1
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (functionName: String?, file: URL))
                  + 48);
      v4 = type metadata accessor for URL();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
      break;
    case 2:
    case 3:
LABEL_3:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void initializeWithCopy for NodeDef.Implementation.Kind()
{
  char *v0;

  v0 = (char *)sub_245F142EC + 4 * byte_245FC235E[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_QWORD *sub_245F142EC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *v0 = *v1;
  v0[1] = v2;
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithCopy for NodeDef.Implementation.Kind(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    outlined destroy of NodeDef.Implementation.Kind(result);
    v2 = (char *)&loc_245F144A8 + 4 * byte_245FC2362[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

_OWORD *initializeWithTake for NodeDef.Implementation.Kind(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (functionName: String?, file: URL))
                + 48);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *assignWithTake for NodeDef.Implementation.Kind(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  if (a1 != a2)
  {
    outlined destroy of NodeDef.Implementation.Kind((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (functionName: String?, file: URL))
                  + 48);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for NodeDef.Implementation.Kind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for NodeDef.Implementation.Kind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for NodeDef.Implementation.Kind()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for NodeDef.Implementation.Kind()
{
  uint64_t result;
  unint64_t v1;
  _QWORD v2[8];

  v2[4] = &unk_245FC26C0;
  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v2[5] = v2;
    v2[6] = &unk_245FC26F0;
    v2[7] = &unk_245FC26F0;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

id SGError.__allocating_init(_:)(void *a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  unint64_t v20;
  id v22[2];
  char v23;
  id v24;

  v24 = a1;
  v2 = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    v3 = SGError.__allocating_init(_:)(v22[0], v22[1], v23);

    v4 = v24;
    goto LABEL_14;
  }

  v22[0] = a1;
  v5 = a1;
  if (swift_dynamicCast())
  {
    v6 = SGError.__allocating_init(_:)((unint64_t)v24);
LABEL_7:
    v3 = v6;

    v4 = v22[0];
    goto LABEL_14;
  }

  v22[0] = a1;
  v7 = a1;
  if (swift_dynamicCast())
  {
    v6 = SGError.__allocating_init(_:)(v24);
    goto LABEL_7;
  }

  v22[0] = a1;
  v8 = a1;
  v9 = String.init<A>(describing:)();
  v11 = v10;
  if (one-time initialization token for logger != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)logger);
  swift_bridgeObjectRetain();
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v16 = (void *)swift_slowAlloc();
    v22[0] = v16;
    *(_DWORD *)v15 = 136315138;
    swift_bridgeObjectRetain();
    v24 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, (uint64_t *)v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_245E46000, v13, v14, "ShaderGraph threw an unwrapped error: %s", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24954C33C](v16, -1, -1);
    MEMORY[0x24954C33C](v15, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  lazy protocol witness table accessor for type APIError and conformance APIError();
  v17 = swift_allocError();
  *(_OWORD *)v18 = xmmword_245FBFF40;
  *(_BYTE *)(v18 + 16) = 21;
  v19 = a1;
  v20 = specialized NestedError.init(_:_:)(v17, a1);
  v3 = SGError.__allocating_init(_:)(v20);
  v4 = a1;
LABEL_14:

  return v3;
}

{
  objc_class *v1;
  objc_class *v2;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  Class isa;
  id v10;

  v2 = v1;
  v4 = objc_msgSend(a1, sel_domain);
  if (!v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v4 = (id)MEMORY[0x24954AF98](v5);
    swift_bridgeObjectRelease();
  }
  v6 = objc_allocWithZone(v2);
  v7 = objc_msgSend(a1, sel_code);
  v8 = objc_msgSend(a1, sel_userInfo);
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v6, sel_initWithDomain_code_userInfo_, v4, v7, isa);

  return v10;
}

id SGError.__allocating_init(_:)(void *a1, void *a2, char a3)
{
  objc_class *v3;
  objc_class *v4;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Class isa;
  id v16;

  v4 = v3;
  v8 = objc_allocWithZone(v4);
  v9 = (void *)MEMORY[0x24954AF98](0xD000000000000015, 0x8000000245FC83C0);
  v10 = APIError.nsErrorCode.getter((uint64_t)a1, (uint64_t)a2, a3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_245FBECD0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 40) = v12;
  APIError.description.getter((uint64_t)a1, (uint64_t)a2, a3);
  *(_QWORD *)(inited + 72) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 48) = v13;
  *(_QWORD *)(inited + 56) = v14;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v16 = objc_msgSend(v8, sel_initWithDomain_code_userInfo_, v9, v10, isa);
  outlined consume of APIError(a1, a2, a3);

  return v16;
}

id SGError.__allocating_init(_:)(unint64_t a1)
{
  id v2;
  id v3;
  id v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t i;
  unint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t j;
  unint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  uint64_t inited;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  uint64_t v53;
  id v54;
  void *v55;
  Class isa;
  id v57;
  uint64_t v59;
  objc_class *v60;
  void *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  char v66;
  void *v67;
  uint64_t v68;

  if ((a1 & 0x8000000000000000) != 0)
    v2 = *(id *)(a1 + 16);
  else
    v2 = (id)a1;
  v67 = v2;
  v3 = v2;
  v4 = v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  v5 = swift_dynamicCast();
  v6 = MEMORY[0x24BEE4AF8];
  v61 = v2;
  if (v5)
  {
    v59 = APIError.nsErrorCode.getter((uint64_t)v63, (uint64_t)v65, v66);
    v62 = v6;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = a1;
    v8 = (unint64_t *)(v7 + 16);
    swift_retain();
    outlined copy of NestedError(a1);
    swift_beginAccess();
    for (i = *v8; (~*v8 & 0xF000000000000007) != 0; i = *v8)
    {
      if ((i & 0x8000000000000000) != 0)
      {
        v11 = *(void **)(i + 16);
        v10 = *(_QWORD *)(i + 24);
        *v8 = v10;
        v12 = v11;
      }
      else
      {
        *v8 = 0xF000000000000007;
        v10 = i;
      }
      outlined copy of NestedError(v10);
      outlined consume of NestedError?(i);
      v13 = String.init<A>(describing:)();
      v15 = v14;
      v16 = v62;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v62 + 16) + 1, 1);
        v16 = v62;
      }
      v18 = *(_QWORD *)(v16 + 16);
      v17 = *(_QWORD *)(v16 + 24);
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        v16 = v62;
      }
      *(_QWORD *)(v16 + 16) = v18 + 1;
      v19 = v16 + 16 * v18;
      *(_QWORD *)(v19 + 32) = v13;
      *(_QWORD *)(v19 + 40) = v15;
    }
    swift_release_n();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v33 = BidirectionalCollection<>.joined(separator:)();
    v35 = v34;
    swift_release();
    outlined consume of APIError(v63, v65, v66);

    v36 = v59;
  }
  else
  {

    v68 = v6;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = a1;
    v21 = (unint64_t *)(v20 + 16);
    outlined copy of NestedError(a1);
    swift_retain();
    swift_beginAccess();
    for (j = *v21; (~*v21 & 0xF000000000000007) != 0; j = *v21)
    {
      if ((j & 0x8000000000000000) != 0)
      {
        v24 = *(void **)(j + 16);
        v23 = *(_QWORD *)(j + 24);
        *v21 = v23;
        v25 = v24;
      }
      else
      {
        *v21 = 0xF000000000000007;
        v23 = j;
      }
      outlined copy of NestedError(v23);
      outlined consume of NestedError?(j);
      v26 = String.init<A>(describing:)();
      v28 = v27;
      v29 = v68;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v68 + 16) + 1, 1);
        v29 = v68;
      }
      v31 = *(_QWORD *)(v29 + 16);
      v30 = *(_QWORD *)(v29 + 24);
      if (v31 >= v30 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
        v29 = v68;
      }
      *(_QWORD *)(v29 + 16) = v31 + 1;
      v32 = v29 + 16 * v31;
      *(_QWORD *)(v32 + 32) = v26;
      *(_QWORD *)(v32 + 40) = v28;
    }
    swift_release_n();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v37 = BidirectionalCollection<>.joined(separator:)();
    v39 = v38;
    swift_release();
    v40._countAndFlagsBits = v37;
    v40._object = v39;
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v41._countAndFlagsBits = 41;
    v41._object = (void *)0xE100000000000000;
    String.append(_:)(v41);
    v42._countAndFlagsBits = 10272;
    v42._object = (void *)0xE200000000000000;
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    v33 = 0xD000000000000029;
    v35 = 0x8000000245FCC240;
    v36 = -1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_245FBECE0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 40) = v44;
  *(_QWORD *)(inited + 72) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 48) = v33;
  *(_QWORD *)(inited + 56) = v35;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 88) = v45;
  outlined copy of NestedError(a1);
  specialized _copySequenceToContiguousArray<A>(_:)(a1, 1);
  v47 = v46;
  outlined consume of NestedError(a1);
  v48 = *(_QWORD *)(v47 + 16);
  if (v48)
  {
    v64 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v49 = 0;
    do
    {
      v50 = v49 + 1;
      v51 = *(void **)(v47 + 8 * v49 + 32);
      v52 = v51;
      _convertErrorToNSError(_:)();

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v49 = v50;
    }
    while (v48 != v50);
    v53 = v64;
    swift_release();
  }
  else
  {
    swift_release();
    v53 = MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)(inited + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSError]);
  *(_QWORD *)(inited + 96) = v53;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  v54 = objc_allocWithZone(v60);
  v55 = (void *)MEMORY[0x24954AF98](0xD000000000000015, 0x8000000245FC83C0);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v57 = objc_msgSend(v54, sel_initWithDomain_code_userInfo_, v55, v36, isa);
  outlined consume of NestedError(a1);

  return v57;
}

uint64_t APIError.nsErrorCode.getter(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_245F15464 + 4 * byte_245FC2708[a3]))(18);
}

uint64_t sub_245F15464()
{
  return 1;
}

uint64_t sub_245F1546C()
{
  return 2;
}

uint64_t sub_245F15474()
{
  return 3;
}

uint64_t sub_245F1547C()
{
  return 4;
}

uint64_t sub_245F15484()
{
  return 5;
}

uint64_t sub_245F1548C()
{
  return 6;
}

uint64_t sub_245F15494()
{
  return 7;
}

uint64_t sub_245F1549C()
{
  return 8;
}

uint64_t sub_245F154A4()
{
  return 9;
}

uint64_t sub_245F154AC()
{
  return 10;
}

uint64_t sub_245F154B4()
{
  return 13;
}

uint64_t sub_245F154BC()
{
  return 15;
}

uint64_t sub_245F154C4()
{
  return 19;
}

uint64_t sub_245F154CC()
{
  return 20;
}

uint64_t sub_245F154D4()
{
  return 21;
}

uint64_t sub_245F154DC()
{
  return 22;
}

uint64_t sub_245F154E4()
{
  return 23;
}

uint64_t sub_245F154EC()
{
  return 25;
}

uint64_t sub_245F154F4()
{
  return 27;
}

uint64_t sub_245F154FC()
{
  return 28;
}

uint64_t sub_245F15504@<X0>(uint64_t a1@<X8>)
{
  return qword_245FC28E0[a1];
}

void APIError.description.getter(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

unint64_t sub_245F15550()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
  return 0xD000000000000021;
}

void sub_245F15BF4()
{
  JUMPOUT(0x245F15BDCLL);
}

void sub_245F15C04()
{
  JUMPOUT(0x245F15BDCLL);
}

void sub_245F15C14()
{
  JUMPOUT(0x245F15BDCLL);
}

void sub_245F15C24()
{
  JUMPOUT(0x245F15BDCLL);
}

void sub_245F15C34()
{
  JUMPOUT(0x245F15BDCLL);
}

void sub_245F15C44()
{
  JUMPOUT(0x245F15BDCLL);
}

void sub_245F15C54()
{
  JUMPOUT(0x245F15C60);
}

uint64_t static SGError.supportsSecureCoding.getter()
{
  return 1;
}

id SGError.__allocating_init(domain:code:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_class *v4;
  objc_class *v5;
  void *v8;
  NSDictionary v9;
  id v10;

  v5 = v4;
  v8 = (void *)MEMORY[0x24954AF98]();
  swift_bridgeObjectRelease();
  if (a4)
  {
    v9.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v9.super.isa = 0;
  }
  v10 = objc_msgSend(objc_allocWithZone(v5), sel_initWithDomain_code_userInfo_, v8, a3, v9.super.isa);

  return v10;
}

id SGError.init(domain:code:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  objc_class *ObjectType;
  void *v10;
  NSDictionary v11;
  id v12;
  objc_super v14;

  ObjectType = (objc_class *)swift_getObjectType();
  v10 = (void *)MEMORY[0x24954AF98](a1, a2);
  swift_bridgeObjectRelease();
  if (a4)
  {
    v11.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v11.super.isa = 0;
  }
  v14.receiver = v4;
  v14.super_class = ObjectType;
  v12 = objc_msgSendSuper2(&v14, sel_initWithDomain_code_userInfo_, v10, a3, v11.super.isa);

  return v12;
}

id SGError.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id SGError.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  objc_super v5;

  v5.receiver = v1;
  v5.super_class = (Class)swift_getObjectType();
  v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id SGError.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t *SGInternalError.type.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return outlined init with copy of SGInternalError.ErrorType(v1, a1);
}

uint64_t SGInternalError.details.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 208);
  swift_bridgeObjectRetain();
  return v1;
}

double SGInternalError.init(_:details:)@<D0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double result;
  __int128 v14;
  _OWORD v15[13];
  _OWORD v16[13];
  _OWORD v17[13];
  __int128 v18;

  outlined init with take of SGInternalError.ErrorType(a1, v15);
  outlined init with take of SGInternalError.ErrorType(v15, v16);
  outlined init with take of SGInternalError.ErrorType(v16, v17);
  *(_QWORD *)&v18 = a2;
  *((_QWORD *)&v18 + 1) = a3;
  v7 = v17[11];
  a4[10] = v17[10];
  a4[11] = v7;
  v8 = v18;
  a4[12] = v17[12];
  a4[13] = v8;
  v9 = v17[7];
  a4[6] = v17[6];
  a4[7] = v9;
  v10 = v17[9];
  a4[8] = v17[8];
  a4[9] = v10;
  v11 = v17[3];
  a4[2] = v17[2];
  a4[3] = v11;
  v12 = v17[5];
  a4[4] = v17[4];
  a4[5] = v12;
  result = *(double *)v17;
  v14 = v17[1];
  *a4 = v17[0];
  a4[1] = v14;
  return result;
}

void SGInternalError.ErrorType.errorDescription.getter()
{
  _OWORD *v0;
  char *v1;
  _OWORD v2[13];
  _OWORD v3[26];
  _OWORD v4[13];

  outlined init with take of SGInternalError.ErrorType(v0, v2);
  outlined init with take of SGInternalError.ErrorType(v2, v4);
  outlined init with take of SGInternalError.ErrorType(v0, v3);
  v1 = (char *)sub_245F1615C
     + 4 * byte_245FC2753[_s11ShaderGraph15SGInternalErrorV0D4TypeOWOg((uint64_t)v3)];
  __asm { BR              X10 }
}

uint64_t sub_245F1615C()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  _OWORD v5[27];
  _OWORD v6[26];
  __int128 v7;

  v1 = (_OWORD *)_s11ShaderGraph15SGInternalErrorV0D4TypeOWOj0_((uint64_t)v6);
  v6[22] = v1[9];
  v6[23] = v1[10];
  v6[24] = v1[11];
  v6[25] = v1[12];
  v6[18] = v1[5];
  v6[19] = v1[6];
  v6[20] = v1[7];
  v6[21] = v1[8];
  v6[14] = v1[1];
  v6[15] = v1[2];
  v6[16] = v1[3];
  v6[17] = v1[4];
  v6[13] = *v1;
  outlined init with take of SGInternalError.ErrorType(&v7, v5);
  v2 = (uint64_t *)_s11ShaderGraph15SGInternalErrorV0D4TypeOWOj0_((uint64_t)v5);
  outlined retain of UserGraphError(v2);
  v3 = UserGraphError.description.getter();
  outlined release of SGInternalError.ErrorType(v0);
  return v3;
}

void protocol witness for CustomStringConvertible.description.getter in conformance APIError()
{
  uint64_t v0;

  APIError.description.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t *v26;
  int64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  const void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;

  v5 = (unint64_t *)result;
  if (a3 <= 0)
  {
    v6 = (unint64_t *)MEMORY[0x24BEE4AF8];
    v8 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 24);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v6 = (unint64_t *)swift_allocObject();
    result = _swift_stdlib_malloc_size(v6);
    v7 = result - 32;
    if (result < 32)
      v7 = result - 25;
    v8 = 2 * (v7 >> 3);
    v6[2] = a3;
    v6[3] = v8;
  }
  v9 = v6 + 4;
  v10 = v8 >> 1;
  if (a2 > 0)
  {
    if (a3 < 0)
      goto LABEL_67;
    v11 = *v5;
    if (!a3)
    {
      v12 = 0;
      if (!v11)
        goto LABEL_32;
LABEL_28:
      v18 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v19 = v18 | (v12 << 6);
      if (!v10)
      {
        while (1)
        {
          v23 = v6[3];
          if ((uint64_t)((v23 >> 1) + 0x4000000000000000) < 0)
            break;
          v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
          if (v24 <= 1)
            v25 = 1;
          else
            v25 = v24;
          v26 = v6;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          v6 = (unint64_t *)swift_allocObject();
          v27 = _swift_stdlib_malloc_size(v6);
          v29 = v27 - 32;
          v28 = v27 < 32;
          v30 = v27 - 25;
          v31 = v26;
          if (v28)
            v29 = v30;
          v32 = v29 >> 3;
          v6[2] = v25;
          v6[3] = 2 * (v29 >> 3);
          v33 = (unint64_t)(v6 + 4);
          v34 = v26[3] >> 1;
          if (v26[2])
          {
            v35 = v26 + 4;
            if (v6 != v26 || v33 >= (unint64_t)v35 + 8 * v34)
            {
              memmove(v6 + 4, v35, 8 * v34);
              v31 = v26;
            }
            v31[2] = 0;
          }
          v9 = (unint64_t *)(v33 + 8 * v34);
          v36 = (v32 & 0x7FFFFFFFFFFFFFFFLL) - v34;
          result = swift_release();
          v20 = __OFSUB__(v36, 1);
          v10 = v36 - 1;
          if (v20)
            goto LABEL_62;
LABEL_52:
          *v9++ = v19;
          if (v11)
            goto LABEL_28;
LABEL_32:
          v21 = v12 + 1;
          if (__OFADD__(v12, 1))
            goto LABEL_65;
          if (v21 >= a2)
          {
LABEL_54:
            v37 = v6[3];
            if (v37 >= 2)
            {
              v38 = v37 >> 1;
              v20 = __OFSUB__(v38, v10);
              v39 = v38 - v10;
              if (v20)
                goto LABEL_68;
              v6[2] = v39;
            }
            return (uint64_t)v6;
          }
          v22 = v5[v21];
          if (!v22)
          {
            while (1)
            {
              v12 = v21 + 1;
              if (__OFADD__(v21, 1))
                goto LABEL_60;
              if (v12 >= a2)
                goto LABEL_54;
              v22 = v5[v12];
              ++v21;
              if (v22)
                goto LABEL_39;
            }
          }
          ++v12;
LABEL_39:
          v11 = (v22 - 1) & v22;
          v19 = __clz(__rbit64(v22)) + (v12 << 6);
          if (v10)
            goto LABEL_29;
        }
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
LABEL_29:
      v20 = __OFSUB__(v10--, 1);
      if (!v20)
        goto LABEL_52;
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
LABEL_13:
    v13 = 0;
    v12 = 0;
    v10 -= a3;
    while (v13 != a3)
    {
      if (v11)
      {
        v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
          goto LABEL_63;
        if (v16 >= a2)
          goto LABEL_64;
        v17 = v5[v16];
        if (!v17)
        {
          while (1)
          {
            v12 = v16 + 1;
            if (__OFADD__(v16, 1))
              break;
            if (v12 >= a2)
              goto LABEL_59;
            v17 = v5[v12];
            ++v16;
            if (v17)
              goto LABEL_25;
          }
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
          break;
        }
        ++v12;
LABEL_25:
        v11 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      ++v13;
      *v9++ = v15;
      if (v13 == a3)
        goto LABEL_27;
    }
    __break(1u);
    goto LABEL_62;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v11 = 0;
    if (!a3)
    {
      v12 = 0;
LABEL_27:
      if (!v11)
        goto LABEL_32;
      goto LABEL_28;
    }
    goto LABEL_13;
  }
LABEL_69:
  __break(1u);
  return result;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t result)
{
  unint64_t v1;
  uint8x8_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  const void *v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;

  if (result)
  {
    v1 = result;
    v2 = (uint8x8_t)vcnt_s8((int8x8_t)result);
    v2.i16[0] = vaddlv_u8(v2);
    v3 = v2.u32[0];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v4 = (_QWORD *)swift_allocObject();
    result = _swift_stdlib_malloc_size(v4);
    v5 = result - 32;
    if (result < 32)
      v5 = result - 25;
    v6 = v5 >> 3;
    v4[2] = v3;
    v4[3] = 2 * v6;
    v7 = v4 + 4;
    v8 = (v6 & 0x7FFFFFFFFFFFFFFFLL) - v3;
    v9 = v6 | 0x8000000000000000;
    do
    {
      if (!v1)
      {
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      if (!v9)
        goto LABEL_31;
      v10 = (v1 - 1) & v1;
      *v7++ = __clz(__rbit64(v1));
      --v9;
      v1 = v10;
      --v3;
    }
    while (v3);
    if (!v10)
      goto LABEL_26;
    while (1)
    {
      if (!v8)
      {
        v11 = v4[3];
        if ((uint64_t)((v11 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_33;
        v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
        if (v12 <= 1)
          v13 = 1;
        else
          v13 = v12;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
        v14 = (_QWORD *)swift_allocObject();
        v15 = _swift_stdlib_malloc_size(v14);
        v16 = v15 - 32;
        if (v15 < 32)
          v16 = v15 - 25;
        v17 = v16 >> 3;
        v14[2] = v13;
        v14[3] = 2 * (v16 >> 3);
        v18 = (unint64_t)(v14 + 4);
        v19 = v4[3] >> 1;
        if (v4[2])
        {
          v20 = v4 + 4;
          if (v14 != v4 || v18 >= (unint64_t)v20 + 8 * v19)
            memmove(v14 + 4, v20, 8 * v19);
          v4[2] = 0;
        }
        v7 = (_QWORD *)(v18 + 8 * v19);
        v8 = (v17 & 0x7FFFFFFFFFFFFFFFLL) - v19;
        result = swift_release();
        v4 = v14;
      }
      v21 = __OFSUB__(v8--, 1);
      if (v21)
        break;
      *v7++ = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      if (!v10)
        goto LABEL_26;
    }
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v8 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 24) >> 1;
LABEL_26:
  v22 = v4[3];
  if (v22 < 2)
    return (uint64_t)v4;
  v23 = v22 >> 1;
  v21 = __OFSUB__(v23, v8);
  v24 = v23 - v8;
  if (!v21)
  {
    v4[2] = v24;
    return (uint64_t)v4;
  }
LABEL_34:
  __break(1u);
  return result;
}

void specialized _copySequenceToContiguousArray<A>(_:)(unint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  void *v8;
  id v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  const void *v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = a1;
  swift_retain();
  outlined copy of NestedError(a1);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if ((~v3 & 0xF000000000000007) != 0)
  {
    v5 = 0;
    v6 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
    while (1)
    {
      if ((v3 & 0x8000000000000000) != 0)
      {
        v8 = *(void **)(v3 + 16);
        v7 = *(_QWORD *)(v3 + 24);
        *(_QWORD *)(v2 + 16) = v7;
        v9 = v8;
      }
      else
      {
        *(_QWORD *)(v2 + 16) = 0xF000000000000007;
        v7 = v3;
        v8 = (void *)v3;
      }
      outlined copy of NestedError(v7);
      outlined consume of NestedError?(v3);
      if (!v5)
      {
        v10 = v4[3];
        if ((uint64_t)((v10 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_27;
        v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
        if (v11 <= 1)
          v12 = 1;
        else
          v12 = v11;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Error>);
        v13 = (_QWORD *)swift_allocObject();
        v14 = _swift_stdlib_malloc_size(v13);
        v15 = v14 - 32;
        if (v14 < 32)
          v15 = v14 - 25;
        v16 = v15 >> 3;
        v13[2] = v12;
        v13[3] = 2 * (v15 >> 3);
        v17 = (unint64_t)(v13 + 4);
        v18 = v4[3] >> 1;
        if (v4[2])
        {
          v19 = v4 + 4;
          if (v13 != v4 || v17 >= (unint64_t)v19 + 8 * v18)
            memmove(v13 + 4, v19, 8 * v18);
          v4[2] = 0;
        }
        v6 = (_QWORD *)(v17 + 8 * v18);
        v5 = (v16 & 0x7FFFFFFFFFFFFFFFLL) - v18;
        swift_release();
        v4 = v13;
      }
      v20 = __OFSUB__(v5--, 1);
      if (v20)
        break;
      *v6++ = v8;
      v3 = *(_QWORD *)(v2 + 16);
      if ((~v3 & 0xF000000000000007) == 0)
        goto LABEL_22;
    }
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v5 = 0;
LABEL_22:
  swift_release_n();
  v21 = v4[3];
  if (v21 >= 2)
  {
    v22 = v21 >> 1;
    v20 = __OFSUB__(v22, v5);
    v23 = v22 - v5;
    if (!v20)
    {
      v4[2] = v23;
      return;
    }
LABEL_28:
    __break(1u);
  }
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(__int128 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;
  BOOL v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  int64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _QWORD *v38;
  uint64_t v39[5];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[8];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  _BYTE v57[16];

  v55 = *a1;
  v2 = *((_QWORD *)a1 + 2);
  outlined init with take of MetalFunctionNode?((uint64_t)&v55, (uint64_t)v57, &demangling cache variable for type metadata for _HashTable.Storage?);
  v56 = *((_QWORD *)&v55 + 1);
  v3 = *((_QWORD *)a1 + 4);
  v53 = *((_QWORD *)a1 + 3);
  v54 = v2;
  v51 = *((_QWORD *)a1 + 5);
  v52 = v3;
  outlined retain of _HashTable.Storage?((uint64_t)v57);
  outlined retain of _HashTable.Storage?((uint64_t)&v56);
  outlined retain of _HashTable.Storage?((uint64_t)&v54);
  outlined retain of [Input]((uint64_t)&v53);
  outlined retain of [Input]((uint64_t)&v52);
  outlined retain of [Input]((uint64_t)&v51);
  v4 = 0;
  v38 = (_QWORD *)MEMORY[0x24BEE4AF8];
  for (i = MEMORY[0x24BEE4AF8] + 32; ; i += 112)
  {
    Graph.BreathFirstEdgeIterator.next()(v39);
    v7 = v39[0];
    v6 = v39[1];
    v8 = v39[2];
    v9 = v39[3];
    v10 = v39[4];
    v11 = v40;
    v12 = v42;
    v35 = v43;
    v36 = v41;
    v33 = v45;
    v34 = v44;
    v32 = v46;
    v13 = v48;
    v37 = v47;
    result = outlined init with take of MetalFunctionNode?((uint64_t)v39, (uint64_t)v49, &demangling cache variable for type metadata for Edge?);
    if (!v50)
      break;
    v31 = v13;
    if (v4)
    {
      v15 = v38;
      v16 = __OFSUB__(v4--, 1);
      if (v16)
        goto LABEL_25;
    }
    else
    {
      v17 = v38[3];
      if ((uint64_t)((v17 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_26;
      v18 = v17 & 0xFFFFFFFFFFFFFFFELL;
      if (v18 <= 1)
        v19 = 1;
      else
        v19 = v18;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Edge>);
      v15 = (_QWORD *)swift_allocObject();
      v20 = _swift_stdlib_malloc_size(v15) - 32;
      v21 = v38;
      v22 = v20 / 112;
      v15[2] = v19;
      v15[3] = 2 * (v20 / 112);
      v23 = (unint64_t)(v15 + 4);
      v24 = v38[3] >> 1;
      if (v38[2])
      {
        if (v15 != v38 || v23 >= (unint64_t)&v38[14 * v24 + 4])
        {
          v30 = v20 / 112;
          memmove(v15 + 4, v38 + 4, 112 * v24);
          v22 = v30;
          v21 = v38;
        }
        v21[2] = 0;
      }
      i = v23 + 112 * v24;
      v26 = (v22 & 0x7FFFFFFFFFFFFFFFLL) - v24;
      result = swift_release();
      v16 = __OFSUB__(v26, 1);
      v4 = v26 - 1;
      if (v16)
      {
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
    }
    v38 = v15;
    *(_QWORD *)i = v7;
    *(_QWORD *)(i + 8) = v6;
    *(_QWORD *)(i + 16) = v8;
    *(_QWORD *)(i + 24) = v9;
    *(_QWORD *)(i + 32) = v10;
    *(_BYTE *)(i + 40) = v11 & 1;
    *(_QWORD *)(i + 48) = v36;
    *(_QWORD *)(i + 56) = v12;
    *(_QWORD *)(i + 64) = v35;
    *(_QWORD *)(i + 72) = v34;
    *(_QWORD *)(i + 80) = v33;
    *(_QWORD *)(i + 88) = v32;
    *(_BYTE *)(i + 96) = v37 & 1;
    *(_QWORD *)(i + 104) = v31;
  }
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = (uint64_t)v38;
  v27 = v38[3];
  if (v27 < 2)
    return result;
  v28 = v27 >> 1;
  v16 = __OFSUB__(v28, v4);
  v29 = v28 - v4;
  if (!v16)
  {
    v38[2] = v29;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *);
  __int128 v16;
  Swift::UInt v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  char v31;
  char v32;
  uint64_t v34;
  char v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  unint64_t v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  const void *v66;
  unint64_t v67;
  unint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  Swift::UInt v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  Swift::UInt v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100[8];
  uint64_t v101;
  _QWORD *v102;
  _QWORD v103[6];
  __int128 v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  char v111[8];
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  char v116[8];
  uint64_t v117;
  _QWORD *v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  Swift::UInt v122;
  _OWORD v123[2];

  v1 = *a1;
  v2 = (_QWORD *)a1[1];
  v3 = a1[2];
  v4 = (_QWORD *)a1[3];
  v117 = a1[4];
  v118 = v4;
  v101 = v117;
  v102 = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  outlined retain of [Input]((uint64_t)&v118);
  outlined retain of [Input]((uint64_t)&v117);
  v76 = v3;
  if (!v4[2])
  {
    v72 = 0;
    v73 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_89;
  }
  v72 = 0;
  v73 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v78 = (_QWORD *)(v1 + 16);
  v79 = v2 + 4;
  v77 = v1 + 32;
  v5 = MEMORY[0x24BEE4AF8] + 32;
  v74 = v2 + 7;
  v75 = v3 + 32;
  v89 = v1;
  v80 = v2;
  do
  {
    v71 = v5;
    while (1)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
        v7 = v4[2];
        if (!v7)
          goto LABEL_93;
      }
      else
      {
        result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
        v4 = (_QWORD *)result;
        v7 = *(_QWORD *)(result + 16);
        if (!v7)
        {
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
          goto LABEL_98;
        }
      }
      v8 = v7 - 1;
      v9 = &v4[7 * v8];
      v10 = *((_OWORD *)v9 + 2);
      v11 = *((_OWORD *)v9 + 3);
      v12 = *((_OWORD *)v9 + 4);
      v122 = v9[10];
      v120 = v11;
      v121 = v12;
      v119 = v10;
      v87 = v9[5];
      v88 = v9[4];
      v85 = v9[7];
      v86 = v9[6];
      v84 = v9[8];
      v83 = *((_BYTE *)v9 + 72);
      v82 = v9[10];
      v4[2] = v8;
      v13 = v101;
      if (*(_QWORD *)(v101 + 16))
      {
        Hasher.init(_seed:)();
        v98 = v119;
        Hasher._combine(_:)(v119);
        v14 = *((_QWORD *)&v119 + 1);
        v15 = *(void (**)(char *))(**((_QWORD **)&v119 + 1) + 120);
        swift_retain();
        v15(v100);
        swift_release();
        v16 = v120;
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v17 = v121;
        v93 = BYTE8(v121);
        if (BYTE8(v121) == 1)
        {
          Hasher._combine(_:)(0);
        }
        else
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v17);
        }
        v92 = v122;
        Hasher._combine(_:)(v122);
        v18 = Hasher._finalize()();
        v19 = -1 << *(_BYTE *)(v13 + 32);
        v20 = v18 & ~v19;
        v21 = v13 + 56;
        if (((*(_QWORD *)(v13 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) != 0)
        {
          v81 = v17;
          v97 = v14;
          v90 = v4;
          v22 = ~v19;
          while (1)
          {
            v23 = *(_QWORD *)(v13 + 48) + 56 * v20;
            if (*(_QWORD *)v23 == v98)
            {
              v24 = v13;
              v25 = *(_QWORD *)(v23 + 16);
              v26 = *(_QWORD *)(v23 + 24);
              v95 = *(_QWORD *)(v23 + 32);
              v27 = *(_BYTE *)(v23 + 40);
              v28 = *(_QWORD *)(v23 + 48);
              v29 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v23 + 8) + 128);
              swift_retain();
              swift_bridgeObjectRetain();
              if ((v29(v97) & 1) != 0)
              {
                if (v25 == (_QWORD)v16 && v26 == *((_QWORD *)&v16 + 1))
                {
                  swift_bridgeObjectRelease();
                  swift_release();
                  v13 = v24;
                  if ((v27 & 1) != 0)
                  {
LABEL_25:
                    v32 = v93;
                    if (v28 != v92)
                      v32 = 0;
                    if ((v32 & 1) != 0)
                    {
LABEL_36:
                      swift_bridgeObjectRelease();
                      swift_release();
                      v1 = v89;
                      v4 = v90;
                      v2 = v80;
                      goto LABEL_5;
                    }
                    goto LABEL_16;
                  }
                  goto LABEL_30;
                }
                v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_release();
                v13 = v24;
                if ((v31 & 1) != 0)
                {
                  if ((v27 & 1) != 0)
                    goto LABEL_25;
LABEL_30:
                  if ((v93 & 1) == 0 && v95 == v81 && v28 == v92)
                    goto LABEL_36;
                }
              }
              else
              {
                swift_bridgeObjectRelease();
                swift_release();
                v13 = v24;
              }
            }
LABEL_16:
            v20 = (v20 + 1) & v22;
            if (((*(_QWORD *)(v21 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
            {
              v1 = v89;
              v4 = v90;
              v2 = v80;
              goto LABEL_39;
            }
          }
        }
        v1 = v89;
      }
LABEL_39:
      v123[0] = v120;
      swift_retain();
      outlined retain of String((uint64_t)v123);
      specialized Set._Variant.insert(_:)((uint64_t)v100, (Swift::Int)&v119);
      swift_release();
      swift_bridgeObjectRelease();
      v34 = v2[2];
      if (v1)
        break;
      if (v34)
      {
        if (*v79 == (_QWORD)v119)
        {
          result = 0;
LABEL_46:
          v36 = v76;
          goto LABEL_47;
        }
        if (v34 != 1)
        {
          if (v2[5] == (_QWORD)v119)
          {
            result = 1;
            goto LABEL_46;
          }
          if (v34 != 2)
          {
            if (v2[6] == (_QWORD)v119)
            {
              result = 2;
              goto LABEL_46;
            }
            v51 = 0;
            while (v34 - 3 != v51)
            {
              v52 = v74[v51++];
              if (v52 == (_QWORD)v119)
              {
                result = v51 + 2;
                v36 = v76;
                if ((result & 0x8000000000000000) == 0)
                  goto LABEL_47;
                goto LABEL_94;
              }
            }
          }
        }
      }
LABEL_4:
      swift_release();
      outlined release of String((uint64_t)v123);
LABEL_5:
      if (!v4[2])
        goto LABEL_89;
    }
    result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v119, (uint64_t)v79, v34, v78, v77);
    if ((v35 & 1) != 0)
      goto LABEL_4;
    v36 = v76;
    if ((result & 0x8000000000000000) != 0)
      goto LABEL_94;
LABEL_47:
    if (result >= *(_QWORD *)(v36 + 16))
      goto LABEL_95;
    v37 = (_QWORD *)(v75 + 48 * result);
    v38 = v37[3];
    v39 = v37[4];
    v40 = v37[5];
    v41 = *(_QWORD *)(v39 + 16);
    if (v38)
    {
      swift_retain();
      outlined retain of String((uint64_t)v123);
      swift_retain();
      swift_retain();
      swift_retain();
      v1 = v89;
      result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v119, v39 + 32, v41, (_QWORD *)(v38 + 16), v38 + 32);
      if ((v42 & 1) != 0)
        goto LABEL_59;
    }
    else
    {
      swift_retain();
      outlined retain of String((uint64_t)v123);
      swift_retain();
      swift_retain();
      result = specialized Collection<>.firstIndex(of:)(&v119, v39 + 32, v41);
      if ((v43 & 1) != 0)
      {
LABEL_59:
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        outlined release of String((uint64_t)v123);
        swift_release();
        outlined release of String((uint64_t)v123);
        v2 = v80;
        goto LABEL_5;
      }
    }
    if ((result & 0x8000000000000000) != 0)
      goto LABEL_96;
    if (result >= *(_QWORD *)(v40 + 16))
      goto LABEL_97;
    v91 = v4;
    v44 = (_QWORD *)(v40 + 56 * result);
    v45 = v44[5];
    v47 = v44[6];
    v46 = v44[7];
    v49 = v44[8];
    v48 = v44[9];
    v50 = v44[10];
    v96 = v44[4];
    outlined copy of Output?(v96, v45);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined release of String((uint64_t)v123);
    if (!v45)
    {
      swift_release();
      outlined release of String((uint64_t)v123);
      v2 = v80;
      v1 = v89;
      v4 = v91;
      goto LABEL_5;
    }
    v94 = v49;
    v99 = v46;
    v102 = v91;
    specialized OrderedDictionary.subscript.getter(v96, v89, v80, v76, v103);
    outlined init with take of MetalFunctionNode?((uint64_t)v103, (uint64_t)&v104, &demangling cache variable for type metadata for Graph.Adjacent?);
    if (*((_QWORD *)&v104 + 1))
    {
      v112 = v104;
      v109 = v106;
      v53 = v105;
      v54 = v107;
      outlined init with take of MetalFunctionNode?((uint64_t)&v109, (uint64_t)v111, &demangling cache variable for type metadata for _HashTable.Storage?);
      v55 = *((_QWORD *)&v109 + 1);
      v110 = *((_QWORD *)&v109 + 1);
      v108 = v54;
      v114 = v112;
      outlined init with take of MetalFunctionNode?((uint64_t)&v114, (uint64_t)v116, &demangling cache variable for type metadata for _HashTable.Storage?);
      swift_retain();
      outlined retain of String((uint64_t)v123);
      outlined retain of _HashTable.Storage?((uint64_t)v111);
      outlined retain of _HashTable.Storage?((uint64_t)&v110);
      outlined retain of _HashTable.Storage?((uint64_t)&v108);
      outlined release of _HashTable.Storage?((uint64_t)v116);
      v115 = *((_QWORD *)&v114 + 1);
      outlined release of _HashTable.Storage?((uint64_t)&v115);
      v113 = v53;
      outlined release of _HashTable.Storage?((uint64_t)&v113);
      outlined release of _HashTable.Storage?((uint64_t)v111);
      outlined release of _HashTable.Storage?((uint64_t)&v110);
      outlined release of _HashTable.Storage?((uint64_t)&v108);
      outlined release of _HashTable.Storage?((uint64_t)&v108);
      outlined release of _HashTable.Storage?((uint64_t)v111);
    }
    else
    {
      swift_retain();
      outlined retain of String((uint64_t)v123);
      v55 = MEMORY[0x24BEE4AF8];
    }
    v56 = v45;
    specialized Array.append<A>(contentsOf:)(v55);
    swift_release();
    result = outlined release of String((uint64_t)v123);
    v57 = v72;
    if (v72)
    {
      v2 = v80;
      v58 = v73;
      goto LABEL_85;
    }
    v59 = v73;
    v60 = v73[3];
    if ((uint64_t)((v60 >> 1) + 0x4000000000000000) < 0)
      goto LABEL_100;
    v61 = v60 & 0xFFFFFFFFFFFFFFFELL;
    if (v61 <= 1)
      v62 = 1;
    else
      v62 = v61;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Edge>);
    v58 = (_QWORD *)swift_allocObject();
    v63 = (uint64_t)(_swift_stdlib_malloc_size(v58) - 32) / 112;
    v58[2] = v62;
    v58[3] = 2 * v63;
    v64 = (unint64_t)(v58 + 4);
    v65 = v73[3] >> 1;
    if (v73[2])
    {
      v66 = v73 + 4;
      if (v58 != v73 || v64 >= (unint64_t)v66 + 112 * v65)
      {
        memmove(v58 + 4, v66, 112 * v65);
        v59 = v73;
      }
      v59[2] = 0;
    }
    v71 = v64 + 112 * v65;
    result = swift_release();
    v57 = (v63 & 0x7FFFFFFFFFFFFFFFLL) - v65;
    v2 = v80;
LABEL_85:
    v72 = v57 - 1;
    v73 = v58;
    if (__OFSUB__(v57, 1))
      goto LABEL_99;
    *(_QWORD *)v71 = v96;
    *(_QWORD *)(v71 + 8) = v56;
    *(_QWORD *)(v71 + 16) = v47;
    *(_QWORD *)(v71 + 24) = v99;
    *(_QWORD *)(v71 + 32) = v94;
    *(_BYTE *)(v71 + 40) = v48 & 1;
    v1 = v89;
    *(_QWORD *)(v71 + 48) = v50;
    *(_QWORD *)(v71 + 56) = v88;
    *(_QWORD *)(v71 + 64) = v87;
    *(_QWORD *)(v71 + 72) = v86;
    *(_QWORD *)(v71 + 80) = v85;
    *(_QWORD *)(v71 + 88) = v84;
    *(_BYTE *)(v71 + 96) = v83;
    *(_QWORD *)(v71 + 104) = v82;
    v5 = v71 + 112;
    v4 = v102;
  }
  while (v102[2]);
LABEL_89:
  v102 = v4;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  result = (unint64_t)v73;
  v67 = v73[3];
  if (v67 < 2)
    return result;
  v68 = v67 >> 1;
  v69 = __OFSUB__(v68, v72);
  v70 = v68 - v72;
  if (v69)
  {
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    return result;
  }
  v73[2] = v70;
  return result;
}

void specialized _copySequenceToContiguousArray<A>(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  void *v12;
  id v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  const void *v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  outlined copy of NestedError(a1);
  if (a2 < 1)
  {
    swift_retain();
  }
  else
  {
    outlined copy of NestedError(a1);
    swift_retain();
    do
    {
      v6 = *(_QWORD *)(v4 + 16);
      if ((~v6 & 0xF000000000000007) == 0)
        break;
      if ((v6 & 0x8000000000000000) != 0)
      {
        v5 = *(_QWORD *)(v6 + 24);
        *(_QWORD *)(v4 + 16) = v5;
        outlined copy of NestedError(v5);
      }
      else
      {
        *(_QWORD *)(v4 + 16) = 0xF000000000000007;
      }
      outlined consume of NestedError?(v6);
      --a2;
    }
    while (a2);
    outlined consume of NestedError(a1);
  }
  v7 = *(_QWORD *)(v4 + 16);
  v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if ((~v7 & 0xF000000000000007) != 0)
  {
    v9 = 0;
    v10 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
    while (1)
    {
      if ((v7 & 0x8000000000000000) != 0)
      {
        v12 = *(void **)(v7 + 16);
        v11 = *(_QWORD *)(v7 + 24);
        *(_QWORD *)(v4 + 16) = v11;
        v13 = v12;
      }
      else
      {
        *(_QWORD *)(v4 + 16) = 0xF000000000000007;
        v11 = v7;
        v12 = (void *)v7;
      }
      outlined copy of NestedError(v11);
      outlined consume of NestedError?(v7);
      if (!v9)
      {
        v14 = v8[3];
        if ((uint64_t)((v14 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_36;
        v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
        if (v15 <= 1)
          v16 = 1;
        else
          v16 = v15;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Error>);
        v17 = (_QWORD *)swift_allocObject();
        v18 = _swift_stdlib_malloc_size(v17);
        v19 = v18 - 32;
        if (v18 < 32)
          v19 = v18 - 25;
        v20 = v19 >> 3;
        v17[2] = v16;
        v17[3] = 2 * (v19 >> 3);
        v21 = (unint64_t)(v17 + 4);
        v22 = v8[3] >> 1;
        if (v8[2])
        {
          v23 = v8 + 4;
          if (v17 != v8 || v21 >= (unint64_t)v23 + 8 * v22)
            memmove(v17 + 4, v23, 8 * v22);
          v8[2] = 0;
        }
        v10 = (_QWORD *)(v21 + 8 * v22);
        v9 = (v20 & 0x7FFFFFFFFFFFFFFFLL) - v22;
        swift_release();
        v8 = v17;
      }
      v24 = __OFSUB__(v9--, 1);
      if (v24)
        break;
      *v10++ = v12;
      v7 = *(_QWORD *)(v4 + 16);
      if ((~v7 & 0xF000000000000007) == 0)
        goto LABEL_31;
    }
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v9 = 0;
LABEL_31:
  swift_release_n();
  v25 = v8[3];
  if (v25 >= 2)
  {
    v26 = v25 >> 1;
    v24 = __OFSUB__(v26, v9);
    v27 = v26 - v9;
    if (!v24)
    {
      v8[2] = v27;
      return;
    }
LABEL_37:
    __break(1u);
  }
}

void outlined consume of APIError(void *a1, id a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      swift_bridgeObjectRelease();
      break;
    case 13:

      break;
    default:
      return;
  }
}

uint64_t sub_245F17A20()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  if ((~v1 & 0xF000000000000007) != 0)
    outlined consume of NestedError(v1);
  return swift_deallocObject();
}

uint64_t *outlined init with copy of SGInternalError.ErrorType(uint64_t *a1, uint64_t *a2)
{
  initializeWithCopy for SGInternalError.ErrorType(a2, a1);
  return a2;
}

_OWORD *outlined init with take of SGInternalError.ErrorType(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  *a2 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[4];
  a2[3] = a1[3];
  a2[4] = v4;
  a2[1] = v2;
  a2[2] = v3;
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[8];
  a2[7] = a1[7];
  a2[8] = v7;
  a2[5] = v5;
  a2[6] = v6;
  v8 = a1[9];
  v9 = a1[10];
  v10 = a1[12];
  a2[11] = a1[11];
  a2[12] = v10;
  a2[9] = v8;
  a2[10] = v9;
  return a2;
}

uint64_t _s11ShaderGraph15SGInternalErrorV0D4TypeOWOg(uint64_t a1)
{
  if (((*(_QWORD *)(a1 + 168) >> 55) & 4) != 0)
    return (*(_DWORD *)a1 + 4);
  else
    return (*(_QWORD *)(a1 + 168) >> 55) & 7;
}

uint64_t _s11ShaderGraph15SGInternalErrorV0D4TypeOWOj0_(uint64_t result)
{
  *(_QWORD *)(result + 168) &= 0xFC7FFFFFFFFFFFFFLL;
  return result;
}

uint64_t outlined copy of MetalFunctionGraphError.ErrorType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (a5 == 3)
  {
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  else
  {
    if (a5 != 1)
    {
      if (a5)
        return result;
      swift_bridgeObjectRetain();
    }
    return swift_bridgeObjectRetain();
  }
}

uint64_t outlined release of SGInternalError.ErrorType(uint64_t a1)
{
  outlined consume of SGInternalError.ErrorType(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168));
  return a1;
}

uint64_t outlined consume of SGInternalError.ErrorType(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unint64_t a22)
{
  uint64_t v22;

  v22 = (a22 >> 55) & 7;
  if ((_DWORD)v22 == 2)
  {
    swift_bridgeObjectRelease();
  }
  else if ((_DWORD)v22 == 1)
  {
    outlined consume of MetalFunctionGraphError.ErrorType(result, a2, a3, a4, a5);
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((_DWORD)v22)
      return result;
    outlined consume of UserGraphError.ErrorType(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22);
  }
  return swift_bridgeObjectRelease();
}

uint64_t outlined consume of MetalFunctionGraphError.ErrorType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (a5 == 3)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    if (a5 != 1)
    {
      if (a5)
        return result;
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
}

uint64_t *outlined retain of UserGraphError(uint64_t *a1)
{
  outlined copy of UserGraphError.ErrorType(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t type metadata accessor for SGError()
{
  return objc_opt_self();
}

id outlined copy of APIError(id result, id a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      result = (id)swift_bridgeObjectRetain();
      break;
    case 13:
      result = result;
      break;
    default:
      return result;
  }
  return result;
}

void destroy for APIError(uint64_t a1)
{
  outlined consume of APIError(*(void **)a1, *(id *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for APIError(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  char v5;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of APIError(*(id *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for APIError(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of APIError(*(id *)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of APIError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for APIError(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  void *v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of APIError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for APIError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xEB && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 235);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 0x15)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for APIError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xEA)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 235;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xEB)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xEB)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for APIError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 0x14u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 21);
}

uint64_t destructiveInjectEnumTag for APIError(uint64_t result, unsigned int a2)
{
  if (a2 >= 0x15)
  {
    *(_QWORD *)result = a2 - 21;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 21;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for APIError()
{
  return &type metadata for APIError;
}

uint64_t outlined copy of SGInternalError.ErrorType(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unint64_t a22)
{
  uint64_t v22;

  v22 = (a22 >> 55) & 7;
  if ((_DWORD)v22 == 2)
  {
    swift_bridgeObjectRetain();
  }
  else if ((_DWORD)v22 == 1)
  {
    outlined copy of MetalFunctionGraphError.ErrorType(result, a2, a3, a4, a5);
    swift_bridgeObjectRetain();
  }
  else
  {
    if ((_DWORD)v22)
      return result;
    outlined copy of UserGraphError.ErrorType(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22);
  }
  return swift_bridgeObjectRetain();
}

uint64_t destroy for SGInternalError(uint64_t a1)
{
  outlined consume of SGInternalError.ErrorType(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168));
  return swift_bridgeObjectRelease();
}

uint64_t *initializeWithCopy for SGInternalError(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v14 = a2[8];
  v15 = a2[9];
  v16 = a2[10];
  v17 = a2[11];
  v18 = a2[12];
  v19 = a2[13];
  v20 = a2[14];
  v21 = a2[15];
  v22 = a2[16];
  v23 = a2[17];
  v24 = a2[18];
  v25 = a2[19];
  v26 = a2[20];
  v27 = a2[21];
  v28 = a2[22];
  v29 = a2[23];
  v30 = a2[24];
  v31 = a2[25];
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  v10 = a2[6];
  v11 = a2[7];
  outlined copy of SGInternalError.ErrorType(*a2, v5, v6, v7, v8, v9, v10, v11, a2[8], a2[9], a2[10], a2[11], a2[12], a2[13], a2[14], a2[15], a2[16], a2[17], a2[18],
    a2[19],
    a2[20],
    a2[21]);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  a1[7] = v11;
  a1[8] = v14;
  a1[9] = v15;
  a1[10] = v16;
  a1[11] = v17;
  a1[12] = v18;
  a1[13] = v19;
  a1[14] = v20;
  a1[15] = v21;
  a1[16] = v22;
  a1[17] = v23;
  a1[18] = v24;
  a1[19] = v25;
  a1[20] = v26;
  a1[21] = v27;
  a1[22] = v28;
  a1[23] = v29;
  a1[24] = v30;
  a1[25] = v31;
  v12 = a2[27];
  a1[26] = a2[26];
  a1[27] = v12;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SGInternalError(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v28 = a2[8];
  v29 = a2[9];
  v30 = a2[10];
  v31 = a2[11];
  v32 = a2[12];
  v33 = a2[13];
  v34 = a2[14];
  v35 = a2[15];
  v36 = a2[16];
  v37 = a2[17];
  v38 = a2[18];
  v39 = a2[19];
  v40 = a2[20];
  v41 = a2[21];
  v42 = a2[22];
  v43 = a2[23];
  v44 = a2[24];
  v45 = a2[25];
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  v10 = a2[6];
  v11 = a2[7];
  outlined copy of SGInternalError.ErrorType(*a2, v5, v6, v7, v8, v9, v10, v11, a2[8], a2[9], a2[10], a2[11], a2[12], a2[13], a2[14], a2[15], a2[16], a2[17], a2[18],
    a2[19],
    a2[20],
    a2[21]);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v28;
  *(_QWORD *)(a1 + 72) = v29;
  *(_QWORD *)(a1 + 80) = v30;
  *(_QWORD *)(a1 + 88) = v31;
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = v32;
  *(_QWORD *)(a1 + 104) = v33;
  *(_QWORD *)(a1 + 112) = v34;
  *(_QWORD *)(a1 + 120) = v35;
  v24 = *(_OWORD *)(a1 + 128);
  v25 = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 128) = v36;
  *(_QWORD *)(a1 + 136) = v37;
  *(_QWORD *)(a1 + 144) = v38;
  *(_QWORD *)(a1 + 152) = v39;
  v26 = *(_OWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v40;
  *(_QWORD *)(a1 + 168) = v41;
  *(_QWORD *)(a1 + 176) = v42;
  *(_QWORD *)(a1 + 184) = v43;
  *(_QWORD *)(a1 + 192) = v44;
  *(_QWORD *)(a1 + 200) = v45;
  outlined consume of SGInternalError.ErrorType(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((unint64_t *)&v26 + 1));
  *(_QWORD *)(a1 + 208) = a2[26];
  *(_QWORD *)(a1 + 216) = a2[27];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy224_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v11;
  *(__n128 *)(a1 + 160) = result;
  *(_OWORD *)(a1 + 176) = v10;
  return result;
}

uint64_t assignWithTake for SGInternalError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = *(_OWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a1 + 112);
  v16 = *(_OWORD *)(a1 + 128);
  v17 = *(_OWORD *)(a1 + 144);
  v18 = *(_OWORD *)(a1 + 160);
  v19 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v19;
  v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v20;
  v21 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v21;
  v22 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v22;
  v23 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v23;
  v24 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v24;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  outlined consume of SGInternalError.ErrorType(v4, v5, v6, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((unint64_t *)&v18 + 1));
  v25 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v25;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SGInternalError(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 224))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 168) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for SGInternalError(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 216) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 224) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 128) = 0u;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 160) = 0;
      *(_QWORD *)(a1 + 168) = 2 * -a2;
      *(_OWORD *)(a1 + 176) = 0u;
      *(_OWORD *)(a1 + 192) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 224) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SGInternalError()
{
  return &type metadata for SGInternalError;
}

uint64_t destroy for SGInternalError.ErrorType(uint64_t a1)
{
  return outlined consume of SGInternalError.ErrorType(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
           *(_QWORD *)(a1 + 152),
           *(_QWORD *)(a1 + 160),
           *(_QWORD *)(a1 + 168));
}

uint64_t *initializeWithCopy for SGInternalError.ErrorType(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = a2[7];
  v13 = a2[9];
  v14 = a2[10];
  v15 = a2[11];
  v16 = a2[12];
  v17 = a2[13];
  v18 = a2[14];
  v19 = a2[15];
  v20 = a2[16];
  v21 = a2[17];
  v22 = a2[18];
  v23 = a2[19];
  v24 = a2[20];
  v25 = a2[21];
  v26 = a2[22];
  v27 = a2[23];
  v28 = a2[24];
  v29 = a2[25];
  v4 = a2[8];
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  v9 = a2[4];
  v10 = a2[5];
  v11 = a2[6];
  outlined copy of SGInternalError.ErrorType(*a2, v6, v7, v8, v9, v10, v11, v3, v4, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25);
  *a1 = v5;
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v9;
  a1[5] = v10;
  a1[6] = v11;
  a1[7] = v3;
  a1[8] = v4;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  a1[17] = v21;
  a1[18] = v22;
  a1[19] = v23;
  a1[20] = v24;
  a1[21] = v25;
  a1[22] = v26;
  a1[23] = v27;
  a1[24] = v28;
  a1[25] = v29;
  return a1;
}

uint64_t assignWithCopy for SGInternalError.ErrorType(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v3 = a2[7];
  v28 = a2[9];
  v29 = a2[10];
  v30 = a2[11];
  v31 = a2[12];
  v32 = a2[13];
  v33 = a2[14];
  v34 = a2[15];
  v35 = a2[16];
  v36 = a2[17];
  v37 = a2[18];
  v38 = a2[19];
  v39 = a2[20];
  v40 = a2[21];
  v41 = a2[22];
  v42 = a2[23];
  v43 = a2[24];
  v44 = a2[25];
  v4 = a2[8];
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  v9 = a2[4];
  v10 = a2[5];
  v11 = a2[6];
  outlined copy of SGInternalError.ErrorType(*a2, v6, v7, v8, v9, v10, v11, v3, v4, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37,
    v38,
    v39,
    v40);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v3;
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 72) = v28;
  *(_QWORD *)(a1 + 80) = v29;
  *(_QWORD *)(a1 + 88) = v30;
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = v31;
  *(_QWORD *)(a1 + 104) = v32;
  *(_QWORD *)(a1 + 112) = v33;
  *(_QWORD *)(a1 + 120) = v34;
  v24 = *(_OWORD *)(a1 + 128);
  v25 = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 128) = v35;
  *(_QWORD *)(a1 + 136) = v36;
  *(_QWORD *)(a1 + 144) = v37;
  *(_QWORD *)(a1 + 152) = v38;
  v26 = *(_OWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v39;
  *(_QWORD *)(a1 + 168) = v40;
  *(_QWORD *)(a1 + 176) = v41;
  *(_QWORD *)(a1 + 184) = v42;
  *(_QWORD *)(a1 + 192) = v43;
  *(_QWORD *)(a1 + 200) = v44;
  outlined consume of SGInternalError.ErrorType(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((unint64_t *)&v26 + 1));
  return a1;
}

uint64_t assignWithTake for SGInternalError.ErrorType(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v3 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_OWORD *)(a1 + 64);
  v12 = *(_OWORD *)(a1 + 80);
  v13 = *(_OWORD *)(a1 + 96);
  v14 = *(_OWORD *)(a1 + 112);
  v15 = *(_OWORD *)(a1 + 128);
  v16 = *(_OWORD *)(a1 + 144);
  v17 = *(_OWORD *)(a1 + 160);
  v18 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v18;
  v19 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v19;
  v20 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v20;
  v21 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v21;
  v22 = a2[9];
  *(_OWORD *)(a1 + 128) = a2[8];
  *(_OWORD *)(a1 + 144) = v22;
  v23 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v23;
  *(_OWORD *)(a1 + 192) = a2[12];
  outlined consume of SGInternalError.ErrorType(v3, v5, v4, v6, v7, v8, v9, v10, v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16,
    *((uint64_t *)&v16 + 1),
    v17,
    *((unint64_t *)&v17 + 1));
  return a1;
}

double storeEnumTagSinglePayload for SGInternalError.ErrorType(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 200) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 208) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 128) = 0u;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 160) = 0;
      *(_QWORD *)(a1 + 168) = 2 * -a2;
      *(_OWORD *)(a1 + 176) = 0u;
      *(_OWORD *)(a1 + 192) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 208) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t destructiveInjectEnumTag for SGInternalError.ErrorType(uint64_t result, uint64_t a2)
{
  if (a2 < 4)
  {
    *(_QWORD *)(result + 168) = *(_QWORD *)(result + 168) & 0xFC00000000000001 | (a2 << 55);
  }
  else
  {
    *(_QWORD *)result = (a2 - 4);
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_QWORD *)(result + 168) = 0x200000000000000;
    *(_OWORD *)(result + 176) = 0u;
    *(_OWORD *)(result + 192) = 0u;
  }
  return result;
}

ValueMetadata *type metadata accessor for SGInternalError.ErrorType()
{
  return &type metadata for SGInternalError.ErrorType;
}

unint64_t specialized Sequence.allSatisfy(_:)(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  Swift::UInt *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  Swift::UInt *v13;
  Swift::UInt v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t result;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t);
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  Swift::UInt *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  Swift::UInt v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _OWORD v78[2];
  uint64_t v79[5];
  char v80;
  uint64_t v81;
  uint64_t v82;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 1;
  v4 = (Swift::UInt *)(a1 + 32);
  v5 = swift_bridgeObjectRetain();
  v6 = (uint64_t *)(v5 + 40);
  v7 = (uint64_t *)(v5 + 48);
  v8 = (uint64_t *)(v5 + 56);
  v9 = (uint64_t *)(v5 + 64);
  v10 = (char *)(v5 + 72);
  v58 = a2;
  v11 = (uint64_t *)(v5 + 80);
  v12 = 1;
  v13 = v4;
  v59 = v4;
  v60 = v2;
  while (1)
  {
    v14 = *v13;
    v15 = *v6;
    v16 = *v7;
    v17 = *v8;
    v18 = *v9;
    v19 = *v10;
    v20 = *v11;
    v79[0] = *v13;
    v79[1] = v15;
    v82 = v15;
    v68 = v16;
    v79[2] = v16;
    v79[3] = v17;
    v62 = v18;
    v63 = v20;
    v79[4] = v18;
    v64 = v19;
    v80 = v19;
    v81 = v20;
    v21 = a2[1];
    v69 = *a2;
    v70 = v21;
    v22 = a2[2];
    v23 = a2[3];
    v24 = a2[5];
    v73 = a2[4];
    v74 = v24;
    v71 = v22;
    v72 = v23;
    v25 = a2[6];
    v26 = a2[7];
    *(_OWORD *)((char *)v78 + 9) = *(_OWORD *)((char *)a2 + 153);
    v27 = a2[9];
    v77 = a2[8];
    v78[0] = v27;
    v75 = v25;
    v76 = v26;
    v28 = v70;
    v29 = (_QWORD *)(*((_QWORD *)&v69 + 1) + 32);
    v30 = *(_QWORD *)(*((_QWORD *)&v69 + 1) + 16);
    v67 = v12;
    if ((_QWORD)v69)
    {
      result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v14, (uint64_t)v29, v30, (_QWORD *)(v69 + 16), v69 + 32);
      if ((v32 & 1) != 0)
        goto LABEL_42;
      if ((result & 0x8000000000000000) != 0)
        goto LABEL_53;
    }
    else
    {
      if (!v30)
        goto LABEL_42;
      if (*v29 == v14)
      {
        result = 0;
      }
      else
      {
        if (v30 == 1)
          goto LABEL_42;
        if (*(_QWORD *)(*((_QWORD *)&v69 + 1) + 40) == v14)
        {
          result = 1;
        }
        else
        {
          if (v30 == 2)
          {
LABEL_42:
            swift_retain();
            swift_bridgeObjectRetain();
            outlined retain of Graph((uint64_t)&v69);
            goto LABEL_43;
          }
          if (*(_QWORD *)(*((_QWORD *)&v69 + 1) + 48) == v14)
          {
            result = 2;
          }
          else
          {
            v56 = 0;
            do
            {
              if (v30 - 3 == v56)
                goto LABEL_42;
              v57 = *(_QWORD *)(*((_QWORD *)&v69 + 1) + 56 + 8 * v56++);
            }
            while (v57 != v14);
            result = v56 + 2;
            if (v56 + 2 < 0)
            {
LABEL_53:
              __break(1u);
              return 1;
            }
          }
        }
      }
    }
    if (result >= *(_QWORD *)(v28 + 16))
    {
      __break(1u);
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    v33 = (_QWORD *)(v28 + 48 * result);
    v35 = v33[4];
    v34 = v33[5];
    v36 = v33[6];
    v37 = *(_QWORD *)(v34 + 16);
    if (v35)
    {
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      outlined retain of Graph((uint64_t)&v69);
      swift_retain();
      swift_retain();
      swift_retain();
      result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v79, v34 + 32, v37, (_QWORD *)(v35 + 16), v35 + 32);
      if ((v38 & 1) == 0)
      {
        v39 = result;
        v61 = v36;
        v2 = v60;
        if ((result & 0x8000000000000000) == 0)
          goto LABEL_14;
        goto LABEL_58;
      }
      swift_release();
      swift_release();
      v4 = v59;
      v2 = v60;
      goto LABEL_37;
    }
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    outlined retain of Graph((uint64_t)&v69);
    swift_retain();
    v61 = v36;
    swift_retain();
    if (v37)
      break;
LABEL_35:
    swift_release();
    a2 = v58;
    v4 = v59;
    v2 = v60;
LABEL_37:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
LABEL_43:
    v41 = MEMORY[0x24BEE4AF8];
LABEL_44:
    outlined release of Graph((uint64_t)&v69);
    v55 = *(_QWORD *)(v41 + 16);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    if (v55)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    if (v67 == v2)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    v13 = &v4[7 * v67];
    v6 = (uint64_t *)(v13 + 1);
    v7 = (uint64_t *)(v13 + 2);
    v8 = (uint64_t *)(v13 + 3);
    v9 = (uint64_t *)(v13 + 4);
    v10 = (char *)(v13 + 5);
    v11 = (uint64_t *)(v13 + 6);
    v12 = v67 + 1;
  }
  v39 = 0;
  v42 = (_QWORD *)(v34 + 80);
  v65 = v14;
  v66 = v37;
  while (1)
  {
    if (*(v42 - 6) != v14)
      goto LABEL_19;
    v43 = v17;
    v44 = *(v42 - 4);
    v46 = *(v42 - 3);
    v45 = *(v42 - 2);
    v47 = *((_BYTE *)v42 - 8);
    v48 = *v42;
    v49 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*(v42 - 5) + 128);
    swift_retain();
    swift_bridgeObjectRetain();
    if ((v49(v82) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v17 = v43;
      v14 = v65;
      v37 = v66;
      goto LABEL_19;
    }
    if (v44 == v68 && v46 == v43)
    {
      swift_bridgeObjectRelease();
      result = swift_release();
      v17 = v43;
      v14 = v65;
      v37 = v66;
      v51 = v45;
      v50 = v48;
      v52 = v47;
    }
    else
    {
      v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      result = swift_release();
      v17 = v43;
      v14 = v65;
      v37 = v66;
      v51 = v45;
      v50 = v48;
      v52 = v47;
      if ((v53 & 1) == 0)
        goto LABEL_19;
    }
    if ((v52 & 1) != 0)
      break;
    if ((v64 & 1) == 0 && v51 == v62 && v50 == v63)
      goto LABEL_34;
LABEL_19:
    v42 += 7;
    if (v37 == ++v39)
      goto LABEL_35;
  }
  v54 = v64;
  if (v50 != v63)
    v54 = 0;
  if ((v54 & 1) == 0)
    goto LABEL_19;
LABEL_34:
  a2 = v58;
  v2 = v60;
LABEL_14:
  if (v39 < *(_QWORD *)(v61 + 16))
  {
    v40 = *(_QWORD *)(v61 + 16 * v39 + 40);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_retain();
    swift_bridgeObjectRetain();
    v41 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_nTm(v40, v79);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    v4 = v59;
    goto LABEL_44;
  }
LABEL_59:
  __break(1u);
  return result;
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  Swift::UInt *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  uint64_t v12;
  Swift::UInt *v13;
  Swift::UInt v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t result;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  Swift::UInt v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t);
  char v58;
  char v59;
  char v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  Swift::UInt v69;
  Swift::UInt *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _OWORD v90[2];
  _QWORD v91[5];
  char v92;
  uint64_t v93;
  uint64_t v94;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return MEMORY[0x24BEE4AF8];
  v4 = (Swift::UInt *)(a1 + 32);
  v5 = swift_bridgeObjectRetain();
  v6 = (uint64_t *)(v5 + 40);
  v7 = (uint64_t *)(v5 + 48);
  v8 = (uint64_t *)(v5 + 56);
  v9 = (uint64_t *)(v5 + 64);
  v10 = (unsigned __int8 *)(v5 + 72);
  v66 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v11 = (uint64_t *)(v5 + 80);
  v12 = 1;
  v13 = v4;
  v64 = a2;
  v68 = v2;
  v70 = v4;
LABEL_3:
  v14 = *v13;
  v15 = *v6;
  v16 = *v7;
  v17 = *v8;
  v18 = *v9;
  v19 = *v10;
  v20 = *v11;
  v91[0] = *v13;
  v91[1] = v15;
  v80 = v16;
  v91[2] = v16;
  v91[3] = v17;
  v73 = v18;
  v91[4] = v18;
  v75 = v19;
  v92 = v19;
  v77 = v20;
  v93 = v20;
  v21 = a2[1];
  v81 = *a2;
  v82 = v21;
  v22 = a2[2];
  v23 = a2[3];
  v24 = a2[5];
  v85 = a2[4];
  v86 = v24;
  v83 = v22;
  v84 = v23;
  v25 = a2[6];
  v26 = a2[7];
  *(_OWORD *)((char *)v90 + 9) = *(_OWORD *)((char *)a2 + 153);
  v27 = a2[9];
  v89 = a2[8];
  v90[0] = v27;
  v87 = v25;
  v88 = v26;
  v28 = v82;
  v29 = (_QWORD *)(*((_QWORD *)&v81 + 1) + 32);
  v30 = *(_QWORD *)(*((_QWORD *)&v81 + 1) + 16);
  if ((_QWORD)v81)
  {
    result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v14, (uint64_t)v29, v30, (_QWORD *)(v81 + 16), v81 + 32);
    if ((v32 & 1) != 0)
      goto LABEL_50;
    if ((result & 0x8000000000000000) != 0)
      goto LABEL_64;
  }
  else
  {
    if (!v30)
      goto LABEL_50;
    if (*v29 == v14)
    {
      result = 0;
    }
    else
    {
      if (v30 == 1)
        goto LABEL_50;
      if (*(_QWORD *)(*((_QWORD *)&v81 + 1) + 40) == v14)
      {
        result = 1;
      }
      else
      {
        if (v30 == 2)
          goto LABEL_50;
        if (*(_QWORD *)(*((_QWORD *)&v81 + 1) + 48) == v14)
        {
          result = 2;
        }
        else
        {
          v62 = 0;
          do
          {
            if (v30 - 3 == v62)
              goto LABEL_50;
            v63 = *(_QWORD *)(*((_QWORD *)&v81 + 1) + 56 + 8 * v62++);
          }
          while (v63 != v14);
          result = v62 + 2;
          if (v62 + 2 < 0)
            goto LABEL_64;
        }
      }
    }
  }
  if (result >= *(_QWORD *)(v28 + 16))
  {
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  v33 = (_QWORD *)(v28 + 48 * result);
  v34 = v33[7];
  v35 = v33[8];
  v36 = v33[9];
  v37 = *(_QWORD *)(v35 + 16);
  v76 = v17;
  v71 = v12;
  v94 = v15;
  v69 = v14;
  if (!v34)
  {
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    outlined retain of Graph((uint64_t)&v81);
    v65 = v36;
    if (!v37)
    {
      swift_retain();
      swift_retain();
LABEL_46:
      swift_release();
      a2 = v64;
      v2 = v68;
      v4 = v70;
      goto LABEL_47;
    }
    v49 = v37;
    swift_retain();
    swift_retain();
    v39 = 0;
    v50 = (_QWORD *)(v35 + 80);
    v79 = v37;
    while (1)
    {
      if (*(v50 - 6) == v14)
      {
        v51 = v14;
        v52 = *(v50 - 4);
        v53 = *(v50 - 3);
        v54 = *(v50 - 2);
        v55 = *((_BYTE *)v50 - 8);
        v56 = *v50;
        v57 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*(v50 - 5) + 128);
        swift_retain();
        swift_bridgeObjectRetain();
        if ((v57(v94) & 1) != 0)
        {
          if (v52 == v80 && v53 == v76)
          {
            swift_bridgeObjectRelease();
            result = swift_release();
            v14 = v51;
            v49 = v79;
            v58 = v55;
          }
          else
          {
            v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            result = swift_release();
            v14 = v51;
            v49 = v79;
            v58 = v55;
            if ((v59 & 1) == 0)
              goto LABEL_24;
          }
          if ((v58 & 1) != 0)
          {
            v60 = v75;
            if (v56 != v77)
              v60 = 0;
            if ((v60 & 1) != 0)
              goto LABEL_40;
          }
          else
          {
            v61 = v75 ^ 1;
            if (v54 != v73)
              v61 = 0;
            if (v61 == 1 && v56 == v77)
            {
LABEL_40:
              a2 = v64;
              v36 = v65;
              v2 = v68;
              v4 = v70;
LABEL_14:
              if (v39 >= *(_QWORD *)(v36 + 16))
                goto LABEL_66;
              v40 = (_QWORD *)(v36 + 56 * v39);
              v42 = v40[4];
              v41 = v40[5];
              v43 = v40[6];
              v72 = v40[7];
              v67 = v40[8];
              v74 = v40[9];
              v78 = v40[10];
              outlined copy of Output?(v42, v41);
              swift_bridgeObjectRelease();
              v44 = v94;
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              outlined release of Graph((uint64_t)&v81);
              if (!v41)
                goto LABEL_48;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                v45 = v66;
              else
                v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v66[2] + 1, 1, v66);
              v47 = v45[2];
              v46 = v45[3];
              if (v47 >= v46 >> 1)
                v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v46 > 1), v47 + 1, 1, v45);
              v45[2] = v47 + 1;
              v66 = v45;
              v48 = &v45[14 * v47];
              v48[4] = v42;
              v48[5] = v41;
              v48[6] = v43;
              v48[7] = v72;
              v48[8] = v67;
              *((_BYTE *)v48 + 72) = v74 & 1;
              v4 = v70;
              v48[10] = v78;
              v48[11] = v69;
              v48[12] = v44;
              v48[13] = v80;
              v48[14] = v76;
              v48[15] = v73;
              *((_BYTE *)v48 + 128) = v75;
              v48[17] = v77;
LABEL_49:
              v12 = v71;
LABEL_50:
              if (v12 == v2)
              {
                swift_bridgeObjectRelease();
                return (unint64_t)v66;
              }
              v13 = &v4[7 * v12];
              v6 = (uint64_t *)(v13 + 1);
              v7 = (uint64_t *)(v13 + 2);
              v8 = (uint64_t *)(v13 + 3);
              v9 = (uint64_t *)(v13 + 4);
              v10 = (unsigned __int8 *)(v13 + 5);
              v11 = (uint64_t *)(v13 + 6);
              ++v12;
              goto LABEL_3;
            }
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_release();
          v14 = v51;
          v49 = v79;
        }
      }
LABEL_24:
      v50 += 7;
      if (v49 == ++v39)
        goto LABEL_46;
    }
  }
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  outlined retain of Graph((uint64_t)&v81);
  swift_retain();
  swift_retain();
  swift_retain();
  result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v91, v35 + 32, v37, (_QWORD *)(v34 + 16), v34 + 32);
  if ((v38 & 1) != 0)
  {
    swift_release();
    swift_release();
    v2 = v68;
    v4 = v70;
LABEL_47:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    outlined release of Graph((uint64_t)&v81);
LABEL_48:
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_49;
  }
  v39 = result;
  v2 = v68;
  v4 = v70;
  if ((result & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  Swift::UInt *v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  uint64_t v12;
  Swift::UInt *v13;
  Swift::UInt v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t result;
  char v32;
  Swift::UInt *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t (*v50)(unint64_t);
  char v51;
  char v52;
  int v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  Swift::UInt *v64;
  _OWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _OWORD v85[2];
  _QWORD v86[5];
  char v87;
  uint64_t v88;
  unint64_t v89;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return MEMORY[0x24BEE4AF8];
  v4 = (Swift::UInt *)(a1 + 32);
  v5 = swift_bridgeObjectRetain();
  v6 = (unint64_t *)(v5 + 40);
  v7 = (uint64_t *)(v5 + 48);
  v8 = (uint64_t *)(v5 + 56);
  v9 = (uint64_t *)(v5 + 64);
  v10 = (unsigned __int8 *)(v5 + 72);
  v63 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v64 = v4;
  v11 = (uint64_t *)(v5 + 80);
  v12 = 1;
  v13 = v4;
  v65 = a2;
  v66 = v2;
LABEL_6:
  v14 = *v13;
  v15 = *v6;
  v16 = *v7;
  v17 = *v8;
  v18 = *v9;
  v19 = *v10;
  v20 = *v11;
  v86[0] = *v13;
  v86[1] = v15;
  v89 = v15;
  v75 = v16;
  v86[2] = v16;
  v86[3] = v17;
  v69 = v18;
  v86[4] = v18;
  v70 = v19;
  v87 = v19;
  v71 = v20;
  v88 = v20;
  v21 = a2[1];
  v76 = *a2;
  v77 = v21;
  v22 = a2[2];
  v23 = a2[3];
  v24 = a2[5];
  v80 = a2[4];
  v81 = v24;
  v78 = v22;
  v79 = v23;
  v25 = a2[6];
  v26 = a2[7];
  *(_OWORD *)((char *)v85 + 9) = *(_OWORD *)((char *)a2 + 153);
  v27 = a2[9];
  v84 = a2[8];
  v85[0] = v27;
  v82 = v25;
  v83 = v26;
  v28 = v77;
  v29 = (_QWORD *)(*((_QWORD *)&v76 + 1) + 32);
  v30 = *(_QWORD *)(*((_QWORD *)&v76 + 1) + 16);
  if ((_QWORD)v76)
  {
    result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v14, (uint64_t)v29, v30, (_QWORD *)(v76 + 16), v76 + 32);
    if ((v32 & 1) != 0)
      goto LABEL_3;
    if ((result & 0x8000000000000000) != 0)
      goto LABEL_74;
  }
  else
  {
    if (!v30)
      goto LABEL_3;
    if (*v29 == v14)
    {
      result = 0;
    }
    else
    {
      if (v30 == 1)
        goto LABEL_3;
      if (*(_QWORD *)(*((_QWORD *)&v76 + 1) + 40) == v14)
      {
        result = 1;
      }
      else
      {
        if (v30 == 2)
        {
LABEL_3:
          swift_bridgeObjectRetain();
          goto LABEL_4;
        }
        if (*(_QWORD *)(*((_QWORD *)&v76 + 1) + 48) == v14)
        {
          result = 2;
        }
        else
        {
          v61 = 0;
          do
          {
            if (v30 - 3 == v61)
              goto LABEL_3;
            v62 = *(_QWORD *)(*((_QWORD *)&v76 + 1) + 56 + 8 * v61++);
          }
          while (v62 != v14);
          result = v61 + 2;
          if (v61 + 2 < 0)
            goto LABEL_74;
        }
      }
    }
  }
  if (result >= *(_QWORD *)(v28 + 16))
  {
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  v68 = v12;
  v33 = v4;
  v34 = (_QWORD *)(v28 + 48 * result);
  v36 = v34[7];
  v35 = v34[8];
  v37 = v34[9];
  v38 = *(_QWORD *)(v35 + 16);
  v74 = v17;
  if (!v36)
  {
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    outlined retain of Graph((uint64_t)&v76);
    v67 = v37;
    if (!v38)
    {
      swift_retain();
      swift_retain();
LABEL_46:
      swift_release();
      v4 = v64;
      a2 = v65;
      v2 = v66;
      v12 = v68;
      goto LABEL_47;
    }
    swift_retain();
    swift_retain();
    v40 = 0;
    v44 = (_QWORD *)(v35 + 80);
    while (1)
    {
      if (*(v44 - 6) == v14)
      {
        v45 = v38;
        v46 = *(v44 - 4);
        v47 = *(v44 - 3);
        v72 = *(v44 - 2);
        v48 = *((_BYTE *)v44 - 8);
        v49 = *v44;
        v50 = *(uint64_t (**)(unint64_t))(*(_QWORD *)*(v44 - 5) + 128);
        swift_retain();
        swift_bridgeObjectRetain();
        if ((v50(v89) & 1) != 0)
        {
          if (v46 == v75 && v47 == v74)
          {
            swift_bridgeObjectRelease();
            result = swift_release();
            v38 = v45;
          }
          else
          {
            v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            result = swift_release();
            v38 = v45;
            if ((v51 & 1) == 0)
              goto LABEL_27;
          }
          if ((v48 & 1) != 0)
          {
            v52 = v70;
            if (v49 != v71)
              v52 = 0;
            if ((v52 & 1) != 0)
              goto LABEL_43;
          }
          else
          {
            v53 = v70 ^ 1;
            if (v72 != v69)
              v53 = 0;
            if (v53 == 1 && v49 == v71)
            {
LABEL_43:
              v4 = v64;
              a2 = v65;
              v2 = v66;
              v12 = v68;
LABEL_20:
              if (v40 >= *(_QWORD *)(v67 + 16))
                goto LABEL_75;
              v41 = v67 + 56 * v40;
              v43 = *(_QWORD *)(v41 + 32);
              v42 = *(_QWORD *)(v41 + 40);
              outlined copy of Output?(v43, v42);
              swift_bridgeObjectRelease();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              if (!v42)
              {
                outlined release of Graph((uint64_t)&v76);
LABEL_49:
                swift_release();
LABEL_4:
                swift_bridgeObjectRelease();
                if (v12 == v2)
                  goto LABEL_71;
                goto LABEL_5;
              }
              if (v43 == -7)
              {
                swift_retain();
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
                outlined release of Graph((uint64_t)&v76);
                goto LABEL_49;
              }
              result = v89;
              if ((v43 & 0x8000000000000000) != 0)
                goto LABEL_77;
              if (v43 >= *(_QWORD *)(v80 + 16))
                goto LABEL_78;
              v54 = *(_QWORD *)(v80 + 48 * v43 + 32);
              swift_retain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              outlined copy of NodePersonality(v54);
              swift_bridgeObjectRelease();
              swift_release();
              swift_bridgeObjectRelease();
              swift_release();
              outlined release of Graph((uint64_t)&v76);
              if (v54 >> 61 || *(_BYTE *)(v54 + 80) != 6)
              {
                outlined consume of NodePersonality(v54);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
              }
              else
              {
                v55 = *(void **)(v54 + 16);
                v73 = *(void **)(v54 + 24);
                outlined copy of SGDataTypeStorage(v55, v73, *(_QWORD *)(v54 + 32), *(_QWORD *)(v54 + 40), *(_QWORD *)(v54 + 48), *(_QWORD *)(v54 + 56), *(_QWORD *)(v54 + 64), *(_QWORD *)(v54 + 72), 6);
                outlined consume of NodePersonality(v54);
                swift_release();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v56 = v12;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                  v57 = v63;
                else
                  v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v63[2] + 1, 1, v63);
                v59 = v57[2];
                v58 = v57[3];
                if (v59 >= v58 >> 1)
                  v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v58 > 1), v59 + 1, 1, v57);
                v57[2] = v59 + 1;
                v63 = v57;
                v60 = &v57[4 * v59];
                v60[4] = v75;
                v60[5] = v74;
                v60[6] = v55;
                v60[7] = v73;
                v12 = v56;
              }
              if (v12 == v2)
              {
LABEL_71:
                swift_bridgeObjectRelease();
                return (unint64_t)v63;
              }
LABEL_5:
              v13 = &v4[7 * v12];
              v6 = v13 + 1;
              v7 = (uint64_t *)(v13 + 2);
              v8 = (uint64_t *)(v13 + 3);
              v9 = (uint64_t *)(v13 + 4);
              v10 = (unsigned __int8 *)(v13 + 5);
              v11 = (uint64_t *)(v13 + 6);
              ++v12;
              goto LABEL_6;
            }
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_release();
          v38 = v45;
        }
      }
LABEL_27:
      v44 += 7;
      if (v38 == ++v40)
        goto LABEL_46;
    }
  }
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  outlined retain of Graph((uint64_t)&v76);
  swift_retain();
  swift_retain();
  swift_retain();
  result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v86, v35 + 32, v38, (_QWORD *)(v36 + 16), v36 + 32);
  if ((v39 & 1) != 0)
  {
    swift_release();
    swift_release();
    v4 = v33;
    v2 = v66;
    v12 = v68;
LABEL_47:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    outlined release of Graph((uint64_t)&v76);
    swift_release();
    goto LABEL_4;
  }
  v40 = result;
  v67 = v37;
  v4 = v33;
  v2 = v66;
  v12 = v68;
  if ((result & 0x8000000000000000) == 0)
    goto LABEL_20;
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_SayAH2IDVGs5NeverOTg504_s11d57Graph0B0V30removeUnconnectedNodesAndEdges5rootsySayAA0aB4F22VG_tFSayAG2IDVGAGXEfU_AF0E0VTf1cn_n(uint64_t a1, _OWORD *a2)
{
  int64_t v3;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23[3];
  __int128 v24;
  char v25;
  _OWORD v26[9];
  _OWORD v27[3];
  uint64_t v28;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v28 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    result = v28;
    v6 = a1 + 40;
    do
    {
      v20 = result;
      v21 = v3;
      v7 = *(_QWORD *)v6;
      v9 = *(_QWORD *)(v6 + 8);
      v10 = *(_BYTE *)(v6 + 32);
      v23[0] = *(_QWORD *)(v6 - 8);
      v8 = v23[0];
      v23[1] = v7;
      v23[2] = v9;
      v24 = *(_OWORD *)(v6 + 16);
      v25 = v10;
      v11 = a2[9];
      v26[8] = a2[8];
      v27[0] = v11;
      *(_OWORD *)((char *)v27 + 9) = *(_OWORD *)((char *)a2 + 153);
      v12 = a2[5];
      v26[4] = a2[4];
      v26[5] = v12;
      v13 = a2[7];
      v26[6] = a2[6];
      v26[7] = v13;
      v14 = a2[1];
      v26[0] = *a2;
      v26[1] = v14;
      v15 = a2[3];
      v26[2] = a2[2];
      v26[3] = v15;
      outlined copy of NodePersonality(v23[0]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined retain of Graph((uint64_t)v26);
      Graph.connectedUpstreamSubgraph(rootedAt:)((uint64_t)v23, (uint64_t)&v22);
      v16 = v22;
      outlined release of Graph((uint64_t)v26);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      v17 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_AH2IDVs5NeverOTg504_s11D159Graph0B0V16splitSharedNodes12nodeDefStore07surfaceA016geometryModifieryAA04NodegH0V_AA0abL0VAKSgtKFAK2IDVAKcfu_33_300d98c1e43c0bc1dedcebf2cdbfb115AkNTf3nnnpk_nTf1cn_nTm(v16);
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = v20;
      v28 = v20;
      v19 = *(_QWORD *)(v20 + 16);
      v18 = *(_QWORD *)(v20 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        result = v28;
      }
      *(_QWORD *)(result + 16) = v19 + 1;
      *(_QWORD *)(result + 8 * v19 + 32) = v17;
      v6 += 48;
      v3 = v21 - 1;
    }
    while (v21 != 1);
  }
  return result;
}

unint64_t Graph.edge(to:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  _OWORD *v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[7];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD v43[2];

  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_OWORD *)(a1 + 16);
  v32 = *(_QWORD *)(a1 + 24);
  v33 = *(_QWORD *)(a1 + 16);
  v7 = *(_BYTE *)(a1 + 40);
  v30 = *(_QWORD *)(a1 + 48);
  v31 = *(_QWORD *)(a1 + 32);
  v8 = *v2;
  v9 = (_QWORD *)v2[1];
  v10 = v2[2];
  v34 = *(_QWORD *)a1;
  result = specialized OrderedSet._find(_:)(*(_QWORD *)a1, v8, v9, (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
  if ((v12 & 1) != 0)
    goto LABEL_6;
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)(v10 + 16))
  {
    v13 = (_QWORD *)(v10 + 48 * result);
    v14 = v13[7];
    v15 = v13[8];
    v16 = v13[9];
    v43[0] = *v6;
    swift_retain();
    swift_retain();
    swift_retain();
    outlined retain of String((uint64_t)v43);
    swift_retain();
    specialized OrderedDictionary.subscript.getter(a1, v14, v15, v16, v35);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined release of String((uint64_t)v43);
    result = outlined init with take of MetalFunctionNode?((uint64_t)v35, (uint64_t)&v36, &demangling cache variable for type metadata for Output??);
    v17 = v37;
    if (!v37)
    {
      result = (unint64_t)outlined release of Output??(v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Output??);
      v18 = 0;
      goto LABEL_7;
    }
    if (v37 != 1)
    {
      v28 = v7 & 1;
      v23 = v42;
      v20 = v39;
      v21 = v40;
      v19 = v38;
      v18 = v36;
      v22 = v41 & 1;
      swift_retain();
      result = outlined retain of String((uint64_t)v43);
      v25 = v33;
      v24 = v34;
      v27 = v31;
      v26 = v32;
      v29 = v30;
      goto LABEL_8;
    }
LABEL_6:
    v18 = 0;
    v17 = 0;
LABEL_7:
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v5 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
LABEL_8:
    *a2 = v18;
    a2[1] = v17;
    a2[2] = v19;
    a2[3] = v20;
    a2[4] = v21;
    a2[5] = v22;
    a2[6] = v23;
    a2[7] = v24;
    a2[8] = v5;
    a2[9] = v25;
    a2[10] = v26;
    a2[11] = v27;
    a2[12] = v28;
    a2[13] = v29;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t **specialized Sequence._copyContents(initializing:)(unint64_t **result, unint64_t *a2, uint64_t a3, unint64_t *a4, uint64_t a5, unint64_t *a6)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  if (a5 >= 1)
  {
    v6 = *a4;
    if (a2)
      goto LABEL_3;
LABEL_18:
    v7 = 0;
    a3 = 0;
LABEL_21:
    *result = a4;
    result[1] = (unint64_t *)a5;
    result[2] = a6;
    result[3] = (unint64_t *)v7;
    result[4] = (unint64_t *)v6;
    return (unint64_t **)a3;
  }
  v6 = 0;
  if (!a2)
    goto LABEL_18;
LABEL_3:
  if (!a3)
  {
    v7 = 0;
    goto LABEL_21;
  }
  if (a3 < 0)
    goto LABEL_25;
  v7 = 0;
  v8 = 0;
  while (v6)
  {
    v9 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v10 = v9 | (v7 << 6);
LABEL_7:
    ++v8;
    *a2++ = v10;
    if (v8 == a3)
      goto LABEL_21;
  }
  v11 = v7 + 1;
  if (__OFADD__(v7, 1))
    goto LABEL_24;
  if (v11 >= a5)
  {
    v6 = 0;
    a3 = v8;
    goto LABEL_21;
  }
  v12 = a4[v11];
  if (v12)
  {
    ++v7;
LABEL_16:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v7 << 6);
    goto LABEL_7;
  }
  while (1)
  {
    v7 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v7 >= a5)
    {
      v6 = 0;
      v7 = a5 - 1;
      a3 = v8;
      goto LABEL_21;
    }
    v12 = a4[v7];
    ++v11;
    if (v12)
      goto LABEL_16;
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

unint64_t *specialized Sequence._copyContents(initializing:)(unint64_t *result, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  if (!a2)
  {
LABEL_11:
    a3 = 0;
    goto LABEL_12;
  }
  if (!a3)
  {
LABEL_12:
    *result = a4;
    return (unint64_t *)a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (a4)
    {
      v4 = __clz(__rbit64(a4));
      a4 &= a4 - 1;
      *a2 = v4;
      if (a3 != 1)
      {
        if (a4)
        {
          v5 = 0;
          while (1)
          {
            v6 = __clz(__rbit64(a4));
            a4 &= a4 - 1;
            a2[v5 + 1] = v6;
            if (a3 - 2 == v5)
              break;
            ++v5;
            if (!a4)
            {
              a3 = v5 + 1;
              goto LABEL_12;
            }
          }
        }
        else
        {
          a3 = 1;
        }
      }
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copyContents(initializing:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<Error>>);
  result = swift_allocObject();
  v10 = result;
  v11 = 0;
  *(_QWORD *)(result + 16) = partial apply for closure #1 in NestedError.makeIterator();
  *(_QWORD *)(result + 24) = v8;
  if (!a2 || !a3)
  {
LABEL_11:
    *a1 = v10;
    return v11;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    closure #1 in NestedError.makeIterator()(v8, &v13);
    v12 = v13;
    if (v13)
    {
      v11 = 0;
      while (1)
      {
        *(_QWORD *)(a2 + 8 * v11) = v12;
        if (a3 - 1 == v11)
          break;
        closure #1 in NestedError.makeIterator()(v8, &v13);
        v12 = v13;
        ++v11;
        if (!v13)
          goto LABEL_11;
      }
      v11 = a3;
    }
    else
    {
      v11 = 0;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

_OWORD *specialized Sequence._copyContents(initializing:)(_OWORD *result, uint64_t a2, uint64_t a3)
{
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[48];
  uint64_t v26[5];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[8];
  uint64_t v37;

  *(_OWORD *)v25 = *v3;
  *(_OWORD *)&v25[16] = v3[1];
  *(_OWORD *)&v25[32] = v3[2];
  if (!a2)
  {
    a3 = 0;
    v16 = v3[1];
    *result = *v3;
    result[1] = v16;
    result[2] = v3[2];
    return (_OWORD *)a3;
  }
  v17 = result;
  if (!a3)
  {
LABEL_7:
    v15 = *(_QWORD *)v25;
LABEL_10:
    *(_QWORD *)v17 = v15;
    *(_OWORD *)((char *)v17 + 8) = *(_OWORD *)&v25[8];
    *(_OWORD *)((char *)v17 + 24) = *(_OWORD *)&v25[24];
    *((_QWORD *)v17 + 5) = *(_QWORD *)&v25[40];
    return (_OWORD *)a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v4 = a2;
    v5 = 0;
    v18 = a3;
    while (1)
    {
      v24 = v5;
      Graph.BreathFirstEdgeIterator.next()(v26);
      v6 = v26[0];
      v7 = v26[1];
      v8 = v26[2];
      v9 = v26[3];
      v10 = v26[4];
      v11 = v27;
      v12 = v28;
      v13 = v29;
      v14 = v30;
      v20 = v32;
      v21 = v31;
      v19 = v33;
      v22 = v34;
      v23 = v35;
      outlined init with take of MetalFunctionNode?((uint64_t)v26, (uint64_t)v36, &demangling cache variable for type metadata for Edge?);
      if (!v37)
        break;
      v5 = v24 + 1;
      *(_QWORD *)v4 = v6;
      *(_QWORD *)(v4 + 8) = v7;
      *(_QWORD *)(v4 + 16) = v8;
      *(_QWORD *)(v4 + 24) = v9;
      *(_QWORD *)(v4 + 32) = v10;
      *(_BYTE *)(v4 + 40) = v11 & 1;
      *(_QWORD *)(v4 + 48) = v12;
      *(_QWORD *)(v4 + 56) = v13;
      *(_QWORD *)(v4 + 64) = v14;
      *(_QWORD *)(v4 + 72) = v21;
      a3 = v18;
      *(_QWORD *)(v4 + 80) = v20;
      *(_QWORD *)(v4 + 88) = v19;
      *(_BYTE *)(v4 + 96) = v22 & 1;
      *(_QWORD *)(v4 + 104) = v23;
      v4 += 112;
      if (v18 == v24 + 1)
        goto LABEL_7;
    }
    a3 = v24;
    v15 = *(_QWORD *)v25;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

unint64_t specialized Sequence._copyContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *);
  __int128 v25;
  Swift::UInt v26;
  Swift::Int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  char v38;
  char v39;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  Swift::UInt v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  Swift::UInt v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89[8];
  uint64_t v90;
  _QWORD *v91;
  _QWORD v92[6];
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char v100[8];
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  char v105[8];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  Swift::UInt v109;
  _OWORD v110[2];

  v78 = *v3;
  v80 = (_QWORD *)v3[1];
  v68 = v3[2];
  v4 = v3[3];
  v5 = v3[4];
  v90 = v5;
  v91 = (_QWORD *)v4;
  if (!a2)
  {
    a3 = 0;
    v61 = *((_OWORD *)v3 + 1);
    *(_OWORD *)result = *(_OWORD *)v3;
    *(_OWORD *)(result + 16) = v61;
    *(_QWORD *)(result + 32) = v3[4];
    return a3;
  }
  if (!a3)
    goto LABEL_85;
  if (a3 < 0)
  {
LABEL_89:
    __break(1u);
    return result;
  }
  v6 = v91;
  if (!v91[2])
  {
    v7 = 0;
    goto LABEL_80;
  }
  v7 = 0;
  v69 = v80 + 4;
  v63 = a3;
  v8 = 1;
  v67 = result;
LABEL_6:
  v65 = a2;
  v66 = v7;
  v64 = v8;
  while ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v9 = v6[2];
    if (!v9)
      goto LABEL_81;
LABEL_11:
    v10 = v9 - 1;
    v11 = &v6[7 * v10];
    v12 = *((_OWORD *)v11 + 2);
    v13 = *((_OWORD *)v11 + 3);
    v14 = *((_OWORD *)v11 + 4);
    v109 = v11[10];
    v107 = v13;
    v108 = v14;
    v106 = v12;
    v15 = v11[4];
    v16 = v11[5];
    v17 = v11[6];
    v18 = v11[7];
    v19 = v11[8];
    v20 = *((_BYTE *)v11 + 72);
    v21 = v11[10];
    v6[2] = v10;
    v22 = v90;
    v76 = v16;
    v77 = v15;
    v74 = v18;
    v75 = v17;
    v73 = v19;
    v72 = v20;
    v71 = v21;
    if (*(_QWORD *)(v90 + 16))
    {
      Hasher.init(_seed:)();
      v87 = v106;
      Hasher._combine(_:)(v106);
      v23 = *((_QWORD *)&v106 + 1);
      v24 = *(void (**)(char *))(**((_QWORD **)&v106 + 1) + 120);
      swift_retain();
      v24(v89);
      swift_release();
      v25 = v107;
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v26 = v108;
      v82 = BYTE8(v108);
      if (BYTE8(v108) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v26);
      }
      v81 = v109;
      Hasher._combine(_:)(v109);
      v27 = Hasher._finalize()();
      v28 = -1 << *(_BYTE *)(v22 + 32);
      v29 = v27 & ~v28;
      if (((*(_QWORD *)(v22 + 56 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) != 0)
      {
        v70 = v26;
        v85 = v23;
        v79 = v6;
        v30 = ~v28;
        while (1)
        {
          v31 = *(_QWORD *)(v22 + 48) + 56 * v29;
          if (*(_QWORD *)v31 == v87)
          {
            v32 = *(_QWORD *)(v31 + 16);
            v33 = *(_QWORD *)(v31 + 24);
            v84 = *(_QWORD *)(v31 + 32);
            v34 = *(_BYTE *)(v31 + 40);
            v35 = *(_QWORD *)(v31 + 48);
            v36 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v31 + 8) + 128);
            swift_retain();
            swift_bridgeObjectRetain();
            if ((v36(v85) & 1) != 0)
            {
              if (v32 == (_QWORD)v25 && v33 == *((_QWORD *)&v25 + 1))
              {
                swift_bridgeObjectRelease();
                swift_release();
                if ((v34 & 1) != 0)
                {
LABEL_28:
                  v39 = v82;
                  if (v35 != v81)
                    v39 = 0;
                  if ((v39 & 1) != 0)
                  {
LABEL_39:
                    swift_bridgeObjectRelease();
                    swift_release();
                    goto LABEL_67;
                  }
                  goto LABEL_19;
                }
                goto LABEL_33;
              }
              v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_release();
              if ((v38 & 1) != 0)
              {
                if ((v34 & 1) != 0)
                  goto LABEL_28;
LABEL_33:
                if ((v82 & 1) == 0 && v84 == v70 && v35 == v81)
                  goto LABEL_39;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
          }
LABEL_19:
          v29 = (v29 + 1) & v30;
          if (((*(_QWORD *)(v22 + 56 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
          {
            v6 = v79;
            break;
          }
        }
      }
    }
    v110[0] = v107;
    swift_retain();
    outlined retain of String((uint64_t)v110);
    specialized Set._Variant.insert(_:)((uint64_t)v89, (Swift::Int)&v106, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<Input>);
    swift_release();
    swift_bridgeObjectRelease();
    a3 = v80[2];
    if (v78)
    {
      v41 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v106, (uint64_t)v69, a3, (_QWORD *)(v78 + 16), v78 + 32);
      if ((v42 & 1) != 0)
        goto LABEL_8;
      if ((v41 & 0x8000000000000000) != 0)
        goto LABEL_82;
    }
    else
    {
      if (!a3)
        goto LABEL_8;
      if (*v69 == (_QWORD)v106)
      {
        v41 = 0;
      }
      else
      {
        if (a3 == 1)
          goto LABEL_8;
        if (v80[5] == (_QWORD)v106)
        {
          v41 = 1;
        }
        else
        {
          if (a3 == 2)
            goto LABEL_8;
          if (v80[6] != (_QWORD)v106)
          {
            v43 = 0;
            while (a3 - 3 != v43)
            {
              v44 = v80[v43++ + 7];
              if (v44 == (_QWORD)v106)
              {
                v41 = v43 + 2;
                if (v43 + 2 < 0)
                  goto LABEL_82;
                goto LABEL_58;
              }
            }
            goto LABEL_8;
          }
          v41 = 2;
        }
      }
    }
LABEL_58:
    if (v41 >= *(_QWORD *)(v68 + 16))
      goto LABEL_83;
    v45 = (_QWORD *)(v68 + 32 + 48 * v41);
    v47 = v45[3];
    v46 = v45[4];
    v48 = v45[5];
    v49 = *(_QWORD *)(v46 + 16);
    if (!v47)
    {
      swift_retain();
      outlined retain of String((uint64_t)v110);
      swift_retain();
      swift_retain();
      result = specialized Collection<>.firstIndex(of:)(&v106, v46 + 32, v49);
      if ((v51 & 1) == 0)
        goto LABEL_63;
      goto LABEL_7;
    }
    swift_retain();
    outlined retain of String((uint64_t)v110);
    swift_retain();
    swift_retain();
    swift_retain();
    result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v106, v46 + 32, v49, (_QWORD *)(v47 + 16), v47 + 32);
    if ((v50 & 1) != 0)
    {
LABEL_7:
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined release of String((uint64_t)v110);
LABEL_8:
      swift_release();
      outlined release of String((uint64_t)v110);
      if (!v6[2])
        goto LABEL_78;
    }
    else
    {
LABEL_63:
      if ((result & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_88:
        __break(1u);
        goto LABEL_89;
      }
      if (result >= *(_QWORD *)(v48 + 16))
        goto LABEL_88;
      v79 = v6;
      v52 = (_QWORD *)(v48 + 56 * result);
      v86 = v52[4];
      v88 = v52[5];
      v53 = v52[6];
      v54 = v52[7];
      v55 = v52[8];
      v56 = v52[9];
      v57 = v52[10];
      outlined copy of Output?(v86, v88);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined release of String((uint64_t)v110);
      if (v88)
      {
        v83 = v55;
        v91 = v79;
        specialized OrderedDictionary.subscript.getter(v86, v78, v80, v68, v92);
        outlined init with take of MetalFunctionNode?((uint64_t)v92, (uint64_t)&v93, &demangling cache variable for type metadata for Graph.Adjacent?);
        if (*((_QWORD *)&v93 + 1))
        {
          v101 = v93;
          v98 = v95;
          v58 = v94;
          v59 = v96;
          outlined init with take of MetalFunctionNode?((uint64_t)&v98, (uint64_t)v100, &demangling cache variable for type metadata for _HashTable.Storage?);
          v60 = *((_QWORD *)&v98 + 1);
          v99 = *((_QWORD *)&v98 + 1);
          v97 = v59;
          v103 = v101;
          outlined init with take of MetalFunctionNode?((uint64_t)&v103, (uint64_t)v105, &demangling cache variable for type metadata for _HashTable.Storage?);
          swift_retain();
          outlined retain of String((uint64_t)v110);
          outlined retain of _HashTable.Storage?((uint64_t)v100);
          outlined retain of _HashTable.Storage?((uint64_t)&v99);
          outlined retain of _HashTable.Storage?((uint64_t)&v97);
          outlined release of _HashTable.Storage?((uint64_t)v105);
          v104 = *((_QWORD *)&v103 + 1);
          outlined release of _HashTable.Storage?((uint64_t)&v104);
          v102 = v58;
          outlined release of _HashTable.Storage?((uint64_t)&v102);
          outlined release of _HashTable.Storage?((uint64_t)v100);
          outlined release of _HashTable.Storage?((uint64_t)&v99);
          outlined release of _HashTable.Storage?((uint64_t)&v97);
          outlined release of _HashTable.Storage?((uint64_t)&v97);
          outlined release of _HashTable.Storage?((uint64_t)v100);
        }
        else
        {
          swift_retain();
          outlined retain of String((uint64_t)v110);
          v60 = MEMORY[0x24BEE4AF8];
        }
        specialized Array.append<A>(contentsOf:)(v60);
        swift_release();
        outlined release of String((uint64_t)v110);
        *(_QWORD *)v65 = v86;
        *(_QWORD *)(v65 + 8) = v88;
        *(_QWORD *)(v65 + 16) = v53;
        *(_QWORD *)(v65 + 24) = v54;
        *(_QWORD *)(v65 + 32) = v83;
        *(_BYTE *)(v65 + 40) = v56 & 1;
        *(_QWORD *)(v65 + 48) = v57;
        *(_QWORD *)(v65 + 56) = v77;
        *(_QWORD *)(v65 + 64) = v76;
        *(_QWORD *)(v65 + 72) = v75;
        *(_QWORD *)(v65 + 80) = v74;
        *(_QWORD *)(v65 + 88) = v73;
        *(_BYTE *)(v65 + 96) = v72;
        *(_QWORD *)(v65 + 104) = v71;
        a3 = v63;
        v7 = v64;
        if (v64 == v63)
          goto LABEL_84;
        a2 = v65 + 112;
        v8 = v64 + 1;
        v6 = v91;
        result = v67;
        if (!v91[2])
        {
LABEL_80:
          v62 = v90;
          *(_QWORD *)result = v78;
          *(_QWORD *)(result + 8) = v80;
          *(_QWORD *)(result + 16) = v68;
          *(_QWORD *)(result + 24) = v6;
          *(_QWORD *)(result + 32) = v62;
          return v7;
        }
        goto LABEL_6;
      }
      swift_release();
      outlined release of String((uint64_t)v110);
LABEL_67:
      v6 = v79;
      if (!v79[2])
      {
LABEL_78:
        v7 = v66;
        result = v67;
        goto LABEL_80;
      }
    }
  }
  v6 = specialized _ArrayBuffer._consumeAndCreateNew()(v6);
  v9 = v6[2];
  if (v9)
    goto LABEL_11;
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  v5 = v90;
  v4 = (uint64_t)v91;
  result = v67;
LABEL_85:
  *(_QWORD *)result = v78;
  *(_QWORD *)(result + 8) = v80;
  *(_QWORD *)(result + 16) = v68;
  *(_QWORD *)(result + 24) = v4;
  *(_QWORD *)(result + 32) = v5;
  return a3;
}

Swift::Void __swiftcall Graph.flatten()()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  char v28;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = 0;
    v4 = MEMORY[0x24BEE4AF8];
    do
    {
      if (v3 <= (unint64_t)v2)
        v5 = v2;
      else
        v5 = v3;
      v6 = 48 * v3;
      while (1)
      {
        if (v5 == v3)
        {
          __break(1u);
          return;
        }
        v7 = v1 + v6;
        v8 = *(_QWORD *)(v1 + v6 + 56);
        if (v8 != -7)
          break;
        ++v3;
        v6 += 48;
        if (v3 >= v2)
          goto LABEL_18;
      }
      v9 = *(_QWORD *)(v7 + 32);
      if (v9 >> 61 == 6)
      {
        v10 = *(_QWORD *)(v7 + 40);
        v11 = *(_QWORD *)(v7 + 48);
        v25 = *(_QWORD *)(v7 + 64);
        v24 = *(_BYTE *)(v7 + 72);
        outlined copy of NodePersonality(v9);
        v23 = v10;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v26[0] = v4;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v4 + 16) + 1, 1);
          v4 = v26[0];
        }
        v13 = *(_QWORD *)(v4 + 16);
        v12 = *(_QWORD *)(v4 + 24);
        v14 = v13 + 1;
        if (v13 >= v12 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
          v14 = v13 + 1;
          v4 = v26[0];
        }
        *(_QWORD *)(v4 + 16) = v14;
        v15 = v4 + 48 * v13;
        *(_QWORD *)(v15 + 32) = v9;
        *(_QWORD *)(v15 + 40) = v23;
        *(_QWORD *)(v15 + 48) = v11;
        *(_QWORD *)(v15 + 56) = v8;
        *(_QWORD *)(v15 + 64) = v25;
        *(_BYTE *)(v15 + 72) = v24;
      }
      ++v3;
    }
    while (v3 < v2);
LABEL_18:
    swift_bridgeObjectRelease();
    v16 = *(_QWORD *)(v4 + 16);
    if (v16)
      goto LABEL_21;
  }
  else
  {
    v4 = MEMORY[0x24BEE4AF8];
    v16 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (v16)
    {
LABEL_21:
      swift_retain();
      v17 = (uint64_t *)(v4 + 40);
      do
      {
        v18 = *(v17 - 1);
        v19 = *v17;
        v20 = v17[1];
        v21 = *((_BYTE *)v17 + 32);
        v22 = *((_OWORD *)v17 + 1);
        v26[0] = v18;
        v26[1] = v19;
        v26[2] = v20;
        v27 = v22;
        v28 = v21;
        outlined copy of NodePersonality(v18);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        Graph.hoist(_:)(v26);
        outlined consume of NodePersonality(v18);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v17 += 6;
        --v16;
      }
      while (v16);
      swift_release();
    }
  }
  swift_release();
}

Swift::Void __swiftcall Graph.removeUnconnectedNodesAndEdges(roots:)(Swift::OpaquePointer roots)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  Swift::UInt v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t (*v31)(_QWORD);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(_QWORD *, _QWORD);
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  int64_t v57;
  void (*v58)(_QWORD *, _QWORD);
  uint64_t v59;
  int isUniquelyReferenced_nonNull_native;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int64_t v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  int64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  Swift::UInt i;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  Swift::Int v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  BOOL v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  BOOL v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t (*v141)(_QWORD);
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  char v149;
  uint64_t (*v150)(_QWORD);
  _QWORD *v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t (*v157)(_QWORD);
  unint64_t v158;
  char *v159;
  uint64_t v160;
  void (*v161)(_QWORD, _QWORD);
  uint64_t (*v162)(_QWORD);
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  unint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  uint64_t v181;
  uint64_t (*v182)(uint64_t);
  char v183;
  char v184;
  int v185;
  uint64_t v186;
  char v187;
  int v188;
  void (*v189)(_QWORD *, _QWORD);
  _QWORD *v190;
  void (*v191)(_QWORD *, _QWORD);
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  unint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  uint64_t v215;
  uint64_t (*v216)(uint64_t);
  char v217;
  int v218;
  int v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  double v223;
  char isUniquelyReferenced_native;
  uint64_t v225;
  unint64_t v226;
  int64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  int64_t v235;
  int64_t v236;
  uint64_t v237;
  _QWORD *v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  Swift::UInt v246;
  _QWORD *v247;
  _QWORD *v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  _QWORD *v252;
  char v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  _QWORD *v257;
  char v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  uint64_t v264;
  char v265;
  uint64_t v266;
  int v267;
  __int128 *v268;
  uint64_t v269;
  void (*v270)(_QWORD *, _QWORD);
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  uint64_t *v275;
  uint64_t *v276;
  char *v277;
  uint64_t v278;
  unint64_t v279;
  unint64_t v280;
  Swift::UInt v281;
  uint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  _OWORD *v295;
  uint64_t v296;
  uint64_t (*v297)(_QWORD);
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  char *v303;
  _QWORD *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t *v307;
  char *v308;
  uint64_t (*v309)(_QWORD);
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  _QWORD *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  Swift::UInt v320;
  uint64_t v321;
  _QWORD v322[4];
  _QWORD v323[3];
  unint64_t v324;
  unint64_t v325;
  uint64_t v326;
  char v327;
  char v328[8];
  uint64_t v329;
  __int128 v330;
  _QWORD v331[5];
  char v332;
  uint64_t v333;
  __int128 v334;
  _OWORD v335[2];
  uint64_t v336;
  uint64_t v337[5];
  char v338;
  uint64_t v339;
  _OWORD v340[2];

  v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_SayAH2IDVGs5NeverOTg504_s11d57Graph0B0V30removeUnconnectedNodesAndEdges5rootsySayAA0aB4F22VG_tFSayAG2IDVGAGXEfU_AF0E0VTf1cn_n((uint64_t)roots._rawValue, (_OWORD *)v1);
  v288 = 0;
  v3 = specialized Set.init<A>(_:)(v2);
  v313 = (_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    goto LABEL_294;
  v282 = v4 + 32;
  v286 = v3 + 56;
  v295 = v335;
  v268 = (__int128 *)&v329;
  v269 = v4;
  v279 = v5;
  swift_bridgeObjectRetain_n();
  v6 = v279;
  v7 = 0;
  v278 = v3;
  while (2)
  {
    v8 = (unint64_t *)(v282 + 48 * v7);
    v9 = v8[3];
    if (v9 == -7)
      goto LABEL_268;
    v10 = *v8;
    v12 = v8[1];
    v11 = v8[2];
    v285 = v12;
    v283 = v10;
    v284 = v11;
    v13 = *(_QWORD *)(v3 + 16);
    v280 = v7;
    if (v13)
    {
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v9);
      v14 = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v3 + 32);
      v16 = v14 & ~v15;
      if (((*(_QWORD *)(v286 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        v17 = *(_QWORD *)(v3 + 48);
        if (*(_QWORD *)(v17 + 8 * v16) == v9)
          goto LABEL_267;
        v18 = ~v15;
        while (1)
        {
          v16 = (v16 + 1) & v18;
          if (((*(_QWORD *)(v286 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            break;
          if (*(_QWORD *)(v17 + 8 * v16) == v9)
            goto LABEL_267;
        }
      }
    }
    v20 = *v313;
    v19 = (_QWORD *)v313[1];
    v21 = v313[2];
    v22 = v19 + 4;
    v23 = v19[2];
    v281 = v9;
    if (v20)
    {
      v24 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v9, (uint64_t)v22, v23, (_QWORD *)(v20 + 16), v20 + 32);
      if ((v25 & 1) != 0)
        goto LABEL_63;
      if ((v24 & 0x8000000000000000) != 0)
        goto LABEL_315;
    }
    else
    {
      if (!v23)
        goto LABEL_63;
      if (*v22 == v9)
      {
        v24 = 0;
      }
      else
      {
        if (v23 == 1)
          goto LABEL_63;
        if (v19[5] == v9)
        {
          v24 = 1;
        }
        else
        {
          if (v23 == 2)
          {
LABEL_63:
            outlined copy of NodePersonality(v283);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            goto LABEL_64;
          }
          if (v19[6] == v9)
          {
            v24 = 2;
          }
          else
          {
            v259 = 0;
            v260 = v19 + 7;
            do
            {
              if (v23 - 3 == v259)
                goto LABEL_63;
              v261 = v260[v259++];
            }
            while (v261 != v9);
            v24 = v259 + 2;
            if (v259 + 2 < 0)
              goto LABEL_315;
          }
        }
      }
    }
    if (v24 >= *(_QWORD *)(v21 + 16))
      goto LABEL_316;
    v26 = (_QWORD *)(v21 + 48 * v24);
    v27 = v26[4];
    v28 = v26[5];
    v29 = (_QWORD *)v26[7];
    v31 = (uint64_t (*)(_QWORD))v26[8];
    v30 = v26[9];
    outlined copy of NodePersonality(v283);
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined consume of Graph.Adjacent?(v27, v28);
    v32 = *(_QWORD *)(v30 + 16);
    if (!v32)
      goto LABEL_61;
    v303 = &v265;
    v304 = v29;
    v33 = *((_QWORD *)v31 + 2);
    swift_retain();
    swift_retain();
    swift_retain();
    v34 = 0;
    v309 = v31;
    v310 = v30;
    do
    {
      if (!v33)
        goto LABEL_304;
      v318 = v33;
      v36 = *(_OWORD *)((char *)v31 + v34 + 48);
      v334 = *(_OWORD *)((char *)v31 + v34 + 32);
      v335[0] = v36;
      v335[1] = *(_OWORD *)((char *)v31 + v34 + 64);
      v336 = *(_QWORD *)((char *)v31 + v34 + 80);
      v37 = *(_QWORD *)((char *)v31 + v34 + 40);
      v38 = *(_QWORD *)((char *)v31 + v34 + 56);
      v340[0] = *v295;
      v39 = (_QWORD *)(v30 + v34);
      v41 = *(_QWORD *)(v30 + v34 + 32);
      v40 = v39[5];
      v43 = v39[6];
      v42 = v39[7];
      v45 = v39[8];
      v44 = v39[9];
      v46 = v39[10];
      v320 = v41;
      v321 = v44;
      v319 = v43;
      v317 = v45;
      v315 = v34;
      v316 = v46;
      if (!v40)
      {
        swift_retain();
        outlined retain of String((uint64_t)v340);
        swift_bridgeObjectRelease();
        swift_release();
        v35 = 0;
        v30 = v310;
LABEL_22:
        v31 = v309;
        goto LABEL_23;
      }
      v314 = v38;
      v311 = v32;
      v312 = v37;
      v337[0] = v41;
      v337[1] = v40;
      v337[2] = v43;
      v337[3] = v42;
      v337[4] = v45;
      v338 = v44 & 1;
      v339 = v46;
      v308 = (char *)*((_QWORD *)&v334 + 1);
      swift_retain();
      outlined retain of String((uint64_t)v340);
      swift_retain();
      swift_bridgeObjectRetain();
      outlined copy of Output?(v41, v40);
      v47 = (void (*)(_QWORD *, _QWORD))specialized OrderedDictionary.subscript.modify(v323, v41);
      if (!*(_QWORD *)(v48 + 8))
      {
        v47(v323, 0);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        v30 = v310;
        v32 = v311;
        v35 = v40;
        goto LABEL_22;
      }
      swift_retain();
      swift_retain();
      swift_release();
      swift_release();
      swift_retain();
      swift_bridgeObjectRetain();
      v49 = (char *)specialized OrderedDictionary.subscript.modify(v322, v337);
      v307 = v50;
      v51 = v50 + 1;
      v35 = v40;
      if (!v50[1])
      {
        ((void (*)(_QWORD *, _QWORD))v49)(v322, 0);
        swift_bridgeObjectRelease();
        swift_release();
        v47(v323, 0);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        v30 = v310;
        v32 = v311;
        goto LABEL_22;
      }
      v306 = v42;
      swift_retain();
      outlined retain of String((uint64_t)v340);
      v52 = v288;
      v53 = specialized MutableCollection._halfStablePartition(isSuffixElement:)(v51, (uint64_t *)&v334);
      if (v52)
        goto LABEL_330;
      v54 = v53;
      v55 = *v51;
      v56 = *(_QWORD *)(*v51 + 16);
      v57 = v56 - v53;
      if (v56 < v53)
        goto LABEL_307;
      if (v53 < 0)
        goto LABEL_308;
      v308 = v49;
      v58 = v47;
      v59 = v53;
      if (__OFADD__(v56, v53 - v56))
        goto LABEL_309;
      v305 = v53 - v56;
      v288 = 0;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v51 = v55;
      if (!isUniquelyReferenced_nonNull_native || v59 > *(_QWORD *)(v55 + 24) >> 1)
      {
        if (v56 <= v59)
          v61 = v56 - v57;
        else
          v61 = v56;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v61, 1);
        v55 = *v51;
      }
      swift_arrayDestroy();
      v30 = v310;
      if (v56 != v54)
      {
        v62 = *(_QWORD *)(v55 + 16) - v56;
        if (v62 < 0)
          goto LABEL_329;
        memmove((void *)(v55 + 32 + 56 * v54), (const void *)(v55 + 32 + 56 * v56), 56 * v62);
        v63 = *(_QWORD *)(v55 + 16);
        v64 = __OFADD__(v63, v305);
        v65 = v63 + v305;
        if (v64)
          goto LABEL_310;
        *(_QWORD *)(v55 + 16) = v65;
      }
      v66 = v307;
      v307[1] = v55;
      v67 = *v66;
      if (*v66)
      {
        swift_beginAccess();
        v68 = *(_QWORD *)(v67 + 24) & 0x3FLL;
        v69 = *(_QWORD *)(v55 + 16);
        if (v69 > 0xF)
          goto LABEL_49;
        v70 = *(_QWORD *)(v67 + 24) & 0x3FLL;
        if (v68)
          goto LABEL_58;
        v71 = 0;
      }
      else
      {
        v68 = 0;
        v71 = 0;
        v69 = *(_QWORD *)(v55 + 16);
        if (v69 > 0xF)
        {
LABEL_49:
          v72 = ceil((double)(uint64_t)v69 / 0.75);
          if ((~*(_QWORD *)&v72 & 0x7FF0000000000000) == 0)
            goto LABEL_311;
          if (v72 <= -9.22337204e18)
            goto LABEL_312;
          if (v72 >= 9.22337204e18)
            goto LABEL_313;
          if ((uint64_t)(v69 + 1) > (uint64_t)v72)
            v73 = v69 + 1;
          else
            v73 = (uint64_t)v72;
          v74 = 64 - __clz(v73 - 1);
          if (v68 <= v74)
            v70 = v74;
          else
            v70 = v68;
LABEL_58:
          v71 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v55, v70, 0, v68);
        }
      }
      swift_release();
      *v66 = v71;
      ((void (*)(_QWORD *, _QWORD))v308)(v322, 0);
      swift_bridgeObjectRelease();
      swift_release();
      v58(v323, 0);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      v31 = v309;
      v32 = v311;
LABEL_23:
      outlined consume of Input?(v320, v35);
      v33 = v318 - 1;
      v34 = v315 + 56;
      --v32;
    }
    while (v32);
    swift_release();
    swift_release();
    swift_release();
LABEL_61:
    swift_release();
    swift_release();
    swift_release();
LABEL_64:
    v75 = (_QWORD *)v313[1];
    v76 = v313[2];
    v77 = v75 + 4;
    v78 = v75[2];
    if (*v313)
    {
      v79 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v281, (uint64_t)v77, v78, (_QWORD *)(*v313 + 16), *v313 + 32);
      if ((v80 & 1) == 0)
      {
        if ((v79 & 0x8000000000000000) != 0)
          goto LABEL_317;
        goto LABEL_71;
      }
LABEL_249:
      v245 = (_QWORD *)v313[8];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v246 = v281;
        if ((v281 & 0x8000000000000000) == 0)
          goto LABEL_251;
LABEL_293:
        __break(1u);
LABEL_294:
        swift_bridgeObjectRelease();
        return;
      }
      v245 = specialized _ArrayBuffer._consumeAndCreateNew()(v245);
      v246 = v281;
      if ((v281 & 0x8000000000000000) != 0)
        goto LABEL_293;
LABEL_251:
      if (v246 >= v245[2])
      {
LABEL_314:
        __break(1u);
LABEL_315:
        __break(1u);
LABEL_316:
        __break(1u);
        goto LABEL_317;
      }
      v247 = &v245[6 * v246];
      v248 = v247 + 4;
      v247[7] = -7;
      v249 = *(_QWORD *)(v247[5] + 16);
      if (v249)
      {
        swift_bridgeObjectRetain();
        v250 = 0;
        v251 = 0;
        while (1)
        {
          v252 = (_QWORD *)v248[1];
          swift_retain();
          swift_bridgeObjectRetain();
          v253 = swift_isUniquelyReferenced_nonNull_native();
          v248[1] = v252;
          if ((v253 & 1) == 0)
          {
            v252 = specialized _ArrayBuffer._consumeAndCreateNew()(v252);
            v248[1] = v252;
          }
          if (v251 >= v252[2])
            goto LABEL_300;
          ++v251;
          v252[v250 + 4] = -7;
          swift_bridgeObjectRelease();
          swift_release();
          v250 += 7;
          if (v249 == v251)
          {
            swift_bridgeObjectRelease();
            break;
          }
        }
      }
      v254 = *(_QWORD *)(v248[2] + 16);
      if (v254)
      {
        swift_bridgeObjectRetain();
        v255 = 0;
        v256 = 0;
        while (1)
        {
          v257 = (_QWORD *)v248[2];
          swift_retain();
          swift_bridgeObjectRetain();
          v258 = swift_isUniquelyReferenced_nonNull_native();
          v248[2] = v257;
          if ((v258 & 1) == 0)
          {
            v257 = specialized _ArrayBuffer._consumeAndCreateNew()(v257);
            v248[2] = v257;
          }
          if (v256 >= v257[2])
            goto LABEL_301;
          ++v256;
          v257[v255 + 4] = -7;
          swift_bridgeObjectRelease();
          swift_release();
          v255 += 7;
          if (v254 == v256)
          {
            swift_bridgeObjectRelease();
            break;
          }
        }
      }
      outlined consume of NodePersonality(v283);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v313[8] = v245;
      v3 = v278;
LABEL_267:
      v6 = v279;
      v7 = v280;
LABEL_268:
      if ((uint64_t)++v7 >= (uint64_t)v6)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        return;
      }
      if (v7 >= v6)
      {
LABEL_306:
        __break(1u);
LABEL_307:
        __break(1u);
LABEL_308:
        __break(1u);
LABEL_309:
        __break(1u);
LABEL_310:
        __break(1u);
LABEL_311:
        __break(1u);
LABEL_312:
        __break(1u);
LABEL_313:
        __break(1u);
        goto LABEL_314;
      }
      continue;
    }
    break;
  }
  if (!v78)
    goto LABEL_249;
  if (*v77 == v281)
  {
    v79 = 0;
    goto LABEL_71;
  }
  if (v78 == 1)
    goto LABEL_249;
  if (v75[5] == v281)
  {
    v79 = 1;
    goto LABEL_71;
  }
  if (v78 == 2)
    goto LABEL_249;
  if (v75[6] == v281)
  {
    v79 = 2;
    goto LABEL_71;
  }
  v262 = 0;
  v263 = v75 + 7;
  do
  {
    if (v78 - 3 == v262)
      goto LABEL_249;
    v264 = v263[v262++];
  }
  while (v264 != v281);
  v79 = v262 + 2;
  if (v262 + 2 < 0)
  {
LABEL_317:
    __break(1u);
LABEL_318:
    __break(1u);
LABEL_319:
    __break(1u);
LABEL_320:
    __break(1u);
LABEL_321:
    __break(1u);
    goto LABEL_322;
  }
LABEL_71:
  if (v79 >= *(_QWORD *)(v76 + 16))
    goto LABEL_318;
  v81 = (_QWORD *)(v76 + 48 * v79);
  v83 = v81[4];
  v82 = v81[5];
  v84 = v81[6];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  outlined consume of Graph.Adjacent?(v83, v82);
  v277 = &v265;
  v292 = *(_QWORD *)(v84 + 16);
  if (!v292)
  {
LABEL_248:
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_249;
  }
  v289 = v84 + 32;
  v290 = v82 + 32;
  v291 = *(_QWORD *)(v82 + 16);
  v272 = v83;
  swift_retain();
  v273 = v82;
  swift_retain();
  v271 = v84;
  swift_retain();
  v85 = 0;
  while (2)
  {
    if (v85 == v291)
      goto LABEL_305;
    v87 = v290 + 56 * v85;
    v88 = *(_QWORD *)(v87 + 8);
    v89 = *(_QWORD *)(v87 + 24);
    v298 = v85;
    v90 = (uint64_t *)(v289 + 16 * v85);
    v92 = *v90;
    v91 = v90[1];
    v93 = *(_QWORD *)(v91 + 16);
    if (!v93)
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
LABEL_75:
      v86 = v298 + 1;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      v85 = v86;
      if (v86 == v292)
      {
        swift_release();
        swift_release();
        swift_release();
        goto LABEL_248;
      }
      continue;
    }
    break;
  }
  v94 = *(_QWORD *)v87;
  v302 = v88;
  v303 = (char *)v94;
  v95 = *(_QWORD *)(v87 + 16);
  v297 = *(uint64_t (**)(_QWORD))(v87 + 32);
  v96 = *(unsigned __int8 *)(v87 + 40);
  v310 = v91 + 32;
  v299 = *(_QWORD *)(v87 + 48);
  v300 = v95;
  swift_retain_n();
  v301 = v89;
  swift_bridgeObjectRetain_n();
  v294 = v92;
  swift_retain_n();
  v293 = v91;
  swift_retain_n();
  v97 = 0;
  v296 = v96;
  v287 = v96 ^ 1;
  v305 = v93;
  while (2)
  {
    v98 = v310 + 56 * v97;
    i = *(_QWORD *)v98;
    v99 = *(_QWORD *)(v98 + 8);
    v101 = *(_QWORD *)(v98 + 16);
    v102 = *(_QWORD *)(v98 + 24);
    v103 = *(_QWORD *)(v98 + 32);
    v104 = *(unsigned __int8 *)(v98 + 40);
    v105 = *(_QWORD *)(v98 + 48);
    v331[0] = i;
    v320 = i;
    v321 = v99;
    v331[1] = v99;
    v319 = v101;
    v331[2] = v101;
    v331[3] = v102;
    v314 = v103;
    v331[4] = v103;
    LODWORD(v315) = v104;
    v332 = v104;
    v316 = v105;
    v333 = v105;
    v107 = *v313;
    v106 = (_QWORD *)v313[1];
    v108 = v313[2];
    v109 = v106 + 4;
    if (!*v313)
    {
      v131 = v106[2];
      if (v131)
      {
        v318 = v97;
        if (*v109 == i)
        {
          v132 = 0;
        }
        else
        {
          if (v131 == 1)
            goto LABEL_81;
          if (v106[5] == i)
          {
            v132 = 1;
          }
          else
          {
            if (v131 == 2)
              goto LABEL_81;
            if (v106[6] == i)
            {
              v132 = 2;
            }
            else
            {
              v205 = 0;
              v206 = v131 - 3;
              v207 = v106 + 7;
              do
              {
                if (v206 == v205)
                  goto LABEL_81;
                v208 = v207[v205++];
              }
              while (v208 != i);
              v132 = v205 + 2;
              if (v205 + 2 < 0)
                goto LABEL_297;
            }
          }
        }
        goto LABEL_118;
      }
LABEL_82:
      if (++v97 == v93)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        goto LABEL_75;
      }
      continue;
    }
    break;
  }
  v318 = v97;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(i);
  v110 = Hasher._finalize()();
  v111 = *(_QWORD *)(v107 + 16);
  v112 = (1 << v111) - 1;
  if (__OFSUB__(1 << v111, 1))
  {
    __break(1u);
LABEL_297:
    __break(1u);
LABEL_298:
    __break(1u);
LABEL_299:
    __break(1u);
LABEL_300:
    __break(1u);
LABEL_301:
    __break(1u);
    goto LABEL_302;
  }
  v113 = v107 + 32;
  v114 = *(_QWORD *)(v107 + 16) & 0x3FLL;
  v115 = v112 & v110;
  v116 = (v112 & v110) * v114;
  v117 = v116 >> 6;
  v118 = v116 & 0x3F;
  v119 = v118 + v114;
  if ((unint64_t)(v118 + v114) < 0x41)
  {
    v133 = *(_QWORD *)(v113 + 8 * v117);
    v128 = (v133 >> v118) & v112;
    v134 = v117 == 2 && v114 == 5;
    v135 = 64;
    if (v134)
      v135 = 32;
    v130 = v135 - v119;
    v129 = v133 >> v119;
    if (!v130)
      v129 = 0;
  }
  else
  {
    if (__OFADD__(v114 << v114, 64))
      goto LABEL_299;
    v120 = *(_QWORD *)(v113 + 8 * v117);
    v121 = (v114 << v114) + 126;
    if ((v114 << v114) + 64 >= 1)
      v121 = (v114 << v114) + 63;
    v122 = v121 >> 6;
    if (v117 + 1 == v122)
      v123 = 0;
    else
      v123 = v117 + 1;
    v124 = *(_QWORD *)(v113 + 8 * v123);
    v125 = v114 - (64 - v118);
    v126 = v123 == v122 - 1 && v114 == 5;
    v127 = 32;
    if (!v126)
      v127 = 64;
    v128 = ((v124 << (64 - v118)) | (v120 >> v118)) & v112;
    v129 = v124 >> v125;
    v130 = v127 - v125;
  }
  v323[0] = v107 + 16;
  v323[1] = v107 + 32;
  v323[2] = v115;
  v324 = v128;
  v325 = v129;
  v326 = v130;
  v327 = 0;
  if (!v128)
  {
LABEL_81:
    v97 = v318;
    goto LABEL_82;
  }
  v136 = (v128 ^ v112) + (*(uint64_t *)(v107 + 24) >> 6);
  if (v136 < v112)
    v112 = 0;
  v132 = v136 - v112;
  for (i = v320; v109[v132] != i; v132 = v138 - v139)
  {
    _HashTable.BucketIterator.advance()();
    if (!v324)
      goto LABEL_81;
    v137 = -1 << *(_QWORD *)v323[0];
    v138 = (v137 ^ ~v324) + (*(uint64_t *)(v323[0] + 8) >> 6);
    if (v138 >= ~v137)
      v139 = ~v137;
    else
      v139 = 0;
  }
  if ((v132 & 0x8000000000000000) != 0)
    goto LABEL_297;
LABEL_118:
  if (v132 >= *(_QWORD *)(v108 + 16))
    goto LABEL_298;
  v140 = (_QWORD *)(v108 + 48 * v132);
  v141 = (uint64_t (*)(_QWORD))v140[4];
  v142 = (uint64_t *)v140[6];
  v143 = v140[7];
  v144 = v140[8];
  v145 = v140[9];
  v146 = *(_QWORD *)(v144 + 16);
  v308 = (char *)v140[5];
  v309 = v141;
  v306 = v143;
  v307 = v142;
  v311 = v144;
  v312 = v145;
  if (v143)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain_n();
    swift_retain();
    swift_retain();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    v147 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v331, v144 + 32, v146, (_QWORD *)(v143 + 16), v143 + 32);
    v149 = v148;
    swift_release();
    if ((v149 & 1) == 0)
    {
      v150 = v309;
      if ((v147 & 0x8000000000000000) == 0)
        goto LABEL_122;
LABEL_302:
      __break(1u);
LABEL_303:
      __break(1u);
LABEL_304:
      __break(1u);
LABEL_305:
      __break(1u);
      goto LABEL_306;
    }
LABEL_80:
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of Graph.Adjacent?((uint64_t)v309, (uint64_t)v308);
    swift_bridgeObjectRelease();
    swift_release();
    v93 = v305;
    goto LABEL_81;
  }
  if (!v146)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    goto LABEL_80;
  }
  LODWORD(v304) = v315 ^ 1;
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain();
  swift_retain();
  swift_retain();
  v173 = v311;
  swift_retain();
  swift_retain();
  v147 = 0;
  v174 = (_QWORD *)(v173 + 80);
  while (2)
  {
    if (*(v174 - 6) != i)
      goto LABEL_132;
    v175 = v146;
    v176 = v102;
    v177 = *(v174 - 5);
    v178 = *(v174 - 4);
    v179 = *(v174 - 3);
    v317 = *(v174 - 2);
    v180 = *((_BYTE *)v174 - 8);
    v181 = *v174;
    v182 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v177 + 128);
    swift_retain();
    swift_bridgeObjectRetain();
    if ((v182(v321) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v102 = v176;
      i = v320;
      v146 = v175;
      goto LABEL_132;
    }
    v102 = v176;
    if (v178 == v319 && v179 == v176)
    {
      swift_bridgeObjectRelease();
      swift_release();
      i = v320;
      v146 = v175;
      break;
    }
    v183 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_release();
    i = v320;
    v146 = v175;
    if ((v183 & 1) == 0)
    {
LABEL_132:
      v174 += 7;
      if (v146 == ++v147)
        goto LABEL_80;
      continue;
    }
    break;
  }
  if ((v180 & 1) != 0)
  {
    v184 = v315;
    if (v181 != v316)
      v184 = 0;
    if ((v184 & 1) != 0)
      goto LABEL_148;
    goto LABEL_132;
  }
  v185 = (int)v304;
  if (v317 != v314)
    v185 = 0;
  if (v185 != 1 || v181 != v316)
    goto LABEL_132;
LABEL_148:
  v150 = v309;
  v145 = v312;
LABEL_122:
  if (v147 >= *(_QWORD *)(v145 + 16))
    goto LABEL_303;
  v151 = (_QWORD *)(v145 + 56 * v147);
  v152 = (char *)v151[4];
  v153 = (char *)v151[5];
  v155 = v151[6];
  v154 = v151[7];
  v157 = (uint64_t (*)(_QWORD))v151[8];
  v156 = (uint64_t *)v151[9];
  v158 = v151[10];
  outlined copy of Output?((uint64_t)v152, (uint64_t)v153);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of Graph.Adjacent?((uint64_t)v150, (uint64_t)v308);
  if (!v153)
  {
    v186 = v302;
    swift_retain();
    swift_bridgeObjectRetain();
    outlined consume of Input?((uint64_t)v152, 0);
    outlined consume of Input?((uint64_t)v303, v186);
    swift_bridgeObjectRelease();
    swift_release();
    v97 = v318;
    v93 = v305;
    goto LABEL_82;
  }
  v159 = v153;
  v311 = v102;
  v312 = v158;
  v317 = v155;
  v160 = (uint64_t)v303;
  v161 = (void (*)(_QWORD, _QWORD))v152;
  if (v152 != v303)
  {
    v93 = v305;
    goto LABEL_158;
  }
  v162 = *(uint64_t (**)(_QWORD))(*(_QWORD *)v153 + 128);
  v308 = v152;
  v309 = v162;
  v163 = v154;
  v164 = v302;
  swift_retain();
  v165 = v156;
  v166 = v163;
  v167 = v301;
  swift_bridgeObjectRetain();
  v168 = v317;
  outlined copy of Output?(v160, (uint64_t)v153);
  if ((v309(v164) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of Input?(v160, (uint64_t)v153);
    v159 = v153;
    v93 = v305;
    v161 = (void (*)(_QWORD, _QWORD))v308;
    goto LABEL_158;
  }
  v308 = v153;
  v309 = v157;
  v307 = v165;
  if (v168 == v300 && v163 == v167)
  {
    v169 = v163;
    swift_bridgeObjectRelease();
    swift_release();
    v170 = (uint64_t)v303;
    v171 = (char)v307;
    v172 = v312;
    outlined consume of Input?((uint64_t)v303, (uint64_t)v308);
    v93 = v305;
    goto LABEL_161;
  }
  v187 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_release();
  v170 = (uint64_t)v303;
  v169 = v166;
  v171 = (char)v307;
  v172 = v312;
  outlined consume of Input?((uint64_t)v303, (uint64_t)v308);
  v93 = v305;
  if ((v187 & 1) == 0)
  {
    outlined consume of Input?(v170, (uint64_t)v308);
    swift_bridgeObjectRelease();
LABEL_159:
    swift_release();
    goto LABEL_81;
  }
LABEL_161:
  if ((v171 & 1) != 0)
  {
    v161 = (void (*)(_QWORD, _QWORD))v170;
    v159 = v308;
    if (!v296)
      goto LABEL_158;
  }
  else
  {
    v159 = v308;
    v188 = v287;
    if (v309 != v297)
      v188 = 0;
    v161 = (void (*)(_QWORD, _QWORD))v170;
    if (v188 != 1)
    {
LABEL_158:
      outlined consume of Input?((uint64_t)v161, (uint64_t)v159);
      swift_bridgeObjectRelease();
      goto LABEL_159;
    }
  }
  v161 = (void (*)(_QWORD, _QWORD))v303;
  if (v172 != v299)
    goto LABEL_158;
  v189 = (void (*)(_QWORD *, _QWORD))specialized OrderedDictionary.subscript.modify(v323, v320);
  v191 = v189;
  if (!v190[1])
  {
    v189(v323, 0);
    v161 = (void (*)(_QWORD, _QWORD))v303;
    v159 = v308;
    goto LABEL_158;
  }
  v306 = v169;
  v192 = v190[3];
  v193 = v190[4];
  v194 = *(_QWORD *)(v193 + 16);
  if (v192)
  {
    v275 = v190 + 3;
    v276 = v190 + 4;
    v304 = v190;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v312 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v331, v193 + 32, v194, (_QWORD *)(v192 + 16), v192 + 32);
    v196 = v195;
    v198 = v197;
    swift_release();
    swift_release();
    if ((v196 & 1) == 0)
      goto LABEL_171;
    swift_bridgeObjectRelease();
    swift_release();
    v93 = v305;
LABEL_244:
    v191(v323, 0);
    goto LABEL_245;
  }
  v270 = v189;
  if (!v194)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
LABEL_205:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v93 = v305;
    v270(v323, 0);
LABEL_245:
    v161 = (void (*)(_QWORD, _QWORD))v303;
    v159 = v308;
    goto LABEL_158;
  }
  v275 = v190 + 3;
  v276 = v190 + 4;
  v304 = v190;
  v274 = v315 ^ 1;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v209 = 0;
  v210 = (_QWORD *)(v193 + 80);
  while (2)
  {
    if (*(v210 - 6) != v320)
      goto LABEL_186;
    v312 = v209;
    v211 = *(v210 - 4);
    v212 = *(v210 - 3);
    v213 = *(v210 - 2);
    v214 = *((_BYTE *)v210 - 8);
    v215 = *v210;
    v216 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*(v210 - 5) + 128);
    swift_retain();
    swift_bridgeObjectRetain();
    if ((v216(v321) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v209 = v312;
      goto LABEL_186;
    }
    if (v211 == v319 && v212 == v311)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v209 = v312;
      break;
    }
    v217 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_release();
    v209 = v312;
    if ((v217 & 1) == 0)
    {
LABEL_186:
      v210 += 7;
      if (v194 == ++v209)
        goto LABEL_205;
      continue;
    }
    break;
  }
  if ((v214 & 1) != 0)
  {
    v218 = v315;
    if (v215 != v316)
      v218 = 0;
    if (v218 == 1)
      goto LABEL_202;
    goto LABEL_186;
  }
  v219 = v274;
  if (v213 != v314)
    v219 = 0;
  if (v219 != 1 || v215 != v316)
    goto LABEL_186;
LABEL_202:
  swift_release();
  v198 = 0;
  v191 = v270;
LABEL_171:
  v200 = v275;
  v199 = v276;
  v201 = *v276;
  v202 = *(_QWORD *)(*v276 + 16);
  v203 = (_QWORD *)*v275;
  if (!*v275)
  {
    if (!v202)
      goto LABEL_223;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v201 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v201);
    v220 = *(_QWORD *)(v201 + 16);
    if (v312 < v220)
    {
      v221 = v220 - 1;
      v222 = v220 - 1 - v312;
      if (v222 >= 0)
      {
        memmove((void *)(v201 + 56 * v312 + 32), (const void *)(v201 + 56 * v312 + 88), 56 * v222);
        *(_QWORD *)(v201 + 16) = v221;
        *v199 = v201;
        swift_bridgeObjectRelease();
        goto LABEL_238;
      }
      goto LABEL_329;
    }
LABEL_323:
    __break(1u);
    goto LABEL_324;
  }
  swift_beginAccess();
  v204 = v203[2] & 0x3FLL;
  if (v204 != (v203[3] & 0x3FLL) && v204 >= 5)
  {
    v223 = (double)(1 << v204) * 0.25;
    if ((~*(_QWORD *)&v223 & 0x7FF0000000000000) == 0)
    {
LABEL_324:
      __break(1u);
      goto LABEL_325;
    }
    if (v223 <= -9.22337204e18)
    {
LABEL_325:
      __break(1u);
      goto LABEL_326;
    }
    if (v223 >= 9.22337204e18)
    {
LABEL_326:
      __break(1u);
      goto LABEL_327;
    }
    if (v202 <= (uint64_t)v223)
      goto LABEL_223;
    goto LABEL_216;
  }
  if (v202)
  {
LABEL_216:
    isUniquelyReferenced_native = swift_isUniquelyReferenced_native();
    v225 = *v200;
    if ((isUniquelyReferenced_native & 1) == 0)
    {
      if (!v225)
      {
LABEL_328:
        __break(1u);
        goto LABEL_329;
      }
      v225 = _HashTable.copy()((_QWORD *)*v200);
      swift_release();
      *v200 = v225;
    }
    if (!v225)
    {
LABEL_327:
      __break(1u);
      goto LABEL_328;
    }
    swift_retain();
    specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(v198, v225 + 16, v225 + 32, v200);
    v226 = v312;
    v227 = v312 + 1;
    if (__OFADD__(v312, 1))
      goto LABEL_321;
    if (v227 >= (uint64_t)v312)
    {
      v228 = *v199;
      swift_retain();
      specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(v226, v227, v228, (_QWORD *)(v225 + 16), v225 + 32);
      swift_release();
      swift_release();
      specialized ContiguousArray.remove(at:)(v226, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (uint64_t)v328);
      v330 = *v268;
      swift_release();
      outlined release of String((uint64_t)&v330);
      goto LABEL_239;
    }
LABEL_322:
    __break(1u);
    goto LABEL_323;
  }
LABEL_223:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v201 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v201);
  v229 = *(_QWORD *)(v201 + 16);
  if (v312 >= v229)
    goto LABEL_320;
  v230 = v229 - 1;
  v231 = v229 - 1 - v312;
  if (v231 < 0)
    goto LABEL_329;
  memmove((void *)(v201 + 32 + 56 * v312), (const void *)(v201 + 32 + 56 * v312 + 56), 56 * v231);
  *(_QWORD *)(v201 + 16) = v230;
  *v199 = v201;
  v232 = *v200;
  if (*v200)
  {
    swift_beginAccess();
    v233 = *(_QWORD *)(v232 + 24) & 0x3FLL;
    v234 = *(_QWORD *)(v201 + 16);
    if (v233)
    {
LABEL_233:
      v235 = specialized static _HashTable.scale(forCapacity:)(v234);
      if (v233 <= v235)
        v236 = v235;
      else
        v236 = v233;
      v237 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v201, v236, 0, v233);
      swift_release();
      *v200 = v237;
      goto LABEL_237;
    }
  }
  else
  {
    v233 = 0;
    v234 = *(_QWORD *)(v201 + 16);
  }
  if (v234 >= 0x10)
    goto LABEL_233;
  swift_release();
  *v200 = 0;
LABEL_237:
  swift_bridgeObjectRelease();
LABEL_238:
  swift_release();
LABEL_239:
  v238 = (_QWORD *)v304[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v238 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v238);
  v239 = v238[2];
  if (v312 >= v239)
    goto LABEL_319;
  v240 = v239 - 1;
  v241 = v239 - 1 - v312;
  if (v241 >= 0)
  {
    v242 = &v238[7 * v312];
    v243 = v242[4];
    v242 += 4;
    v244 = v242[1];
    memmove(v242, v242 + 7, 56 * v241);
    v238[2] = v240;
    v304[5] = v238;
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of Input?(v243, v244);
    v93 = v305;
    goto LABEL_244;
  }
LABEL_329:
  v267 = 0;
  v266 = 1046;
  v265 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_330:
  specialized OrderedSet._regenerateHashTable()();
  __break(1u);
}

uint64_t Graph.nodes.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 64);
  v3 = (2 * *(_QWORD *)(v2 + 16)) | 1;
  *a1 = 0;
  a1[1] = v2;
  a1[2] = v2 + 32;
  a1[3] = 0;
  a1[4] = v3;
  a1[5] = closure #1 in Graph.nodes.getter;
  a1[6] = 0;
  return swift_bridgeObjectRetain();
}

uint64_t specialized Sequence.forEach(_:)(uint64_t result, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18[5];
  char v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v5 = result;
    swift_bridgeObjectRetain();
    for (i = 0; ; i += 112)
    {
      v7 = *(_QWORD *)(v5 + i + 136);
      v8 = *(_BYTE *)(v5 + i + 128);
      v10 = *(_QWORD *)(v5 + i + 112);
      v9 = *(_QWORD *)(v5 + i + 120);
      v12 = *(_QWORD *)(v5 + i + 96);
      v11 = *(_QWORD *)(v5 + i + 104);
      v13 = *(_BYTE *)(v5 + i + 72);
      v15 = *(_QWORD *)(v5 + i + 56);
      v14 = *(_QWORD *)(v5 + i + 64);
      v17 = *(_QWORD *)(v5 + i + 40);
      v16 = *(_QWORD *)(v5 + i + 48);
      v18[0] = *(_QWORD *)(v5 + i + 32);
      v18[1] = v17;
      v18[2] = v16;
      v18[3] = v15;
      v18[4] = v14;
      v19 = v13;
      v20 = *(_OWORD *)(v5 + i + 80);
      v21 = v12;
      v22 = v11;
      v23 = v10;
      v24 = v9;
      v25 = v8;
      v26 = v7;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      closure #3 in Graph.prune(_:)(v18, a2);
      if (v2)
        break;
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      if (!--v3)
        return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

unint64_t Graph.connectedUpstreamSubgraph(rootedAt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  _OWORD *inited;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t *);
  __int128 v22;
  Swift::UInt v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  char v37;
  char v38;
  uint64_t v40;
  uint64_t v41;
  unint64_t result;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t EdgeIteratorV5edgestAG_tFA2G2IDVXEfU0_AF0E0VTf1cn_nTf4xg_nTm;
  _OWORD *v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  _OWORD *v71;
  uint64_t *v72;
  uint64_t *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  Swift::UInt v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  Swift::UInt v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t *v97;
  _QWORD v98[3];
  _QWORD *v99;
  uint64_t v100;
  _QWORD v101[6];
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  char v109[8];
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  char v114[8];
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  Swift::UInt v123;
  _OWORD v124[2];

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ShaderGraphNode>);
  inited = (_OWORD *)swift_initStackObject();
  inited[1] = xmmword_245FBECD0;
  outlined init with take of NodePersonality((_QWORD *)a1, &v119);
  v5 = *(_QWORD *)(a1 + 8);
  v117 = *(_QWORD *)(a1 + 16);
  v118 = v5;
  v6 = *(_OWORD *)(a1 + 25);
  v7 = *(_OWORD *)(a1 + 16);
  v71 = (_OWORD *)a1;
  inited[2] = *(_OWORD *)a1;
  inited[3] = v7;
  *(_OWORD *)((char *)inited + 57) = v6;
  outlined retain of Graph((uint64_t)v2);
  outlined retain of NodePersonality(&v119);
  outlined retain of [Input]((uint64_t)&v118);
  outlined retain of [Input]((uint64_t)&v117);
  specialized Graph.DepthFirstEdgeIterator.init(_:initial:)(v2, (uint64_t)inited, v98);
  v72 = v2;
  outlined release of Graph((uint64_t)v2);
  v8 = (uint64_t *)MEMORY[0x24BEE4AF8];
  v96 = 0;
  v97 = (uint64_t *)MEMORY[0x24BEE4AF8];
  v9 = v98[0];
  v10 = (_QWORD *)v98[1];
  v11 = v98[2];
  v12 = v99;
  v115 = v100;
  v116 = v99;
  v94 = v100;
  v95 = v99;
  swift_retain();
  swift_retain();
  swift_retain();
  outlined retain of [Input]((uint64_t)&v116);
  outlined retain of [Input]((uint64_t)&v115);
  v77 = v11;
  if (!v12[2])
  {
LABEL_77:
    v74 = v8;
LABEL_78:
    v95 = v12;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined retain of Graph((uint64_t)v72);
    EdgeIteratorV5edgestAG_tFA2G2IDVXEfU0_AF0E0VTf1cn_nTf4xg_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF0dE4NodeV2IDVG_AJs5NeverOTg504_s11d54Graph0B0V25connectedUpstreamSubgraph8rootedAtSayAA0aB4H61VG5nodes_AC22DepthFirstEdgeIteratorV5edgestAG_tFA2G2IDVXEfU0_AF0E0VTf1cn_nTf4xg_nTm((uint64_t)v74, (uint64_t)v72);
    outlined release of Graph((uint64_t)v72);
    swift_release();
    swift_release();
    v65 = (_OWORD *)swift_initStackObject();
    v65[1] = xmmword_245FBECD0;
    v66 = *(_OWORD *)((char *)v71 + 25);
    v67 = v71[1];
    v65[2] = *v71;
    v65[3] = v67;
    *(_OWORD *)((char *)v65 + 57) = v66;
    outlined retain of Graph((uint64_t)v72);
    outlined retain of NodePersonality(&v119);
    outlined retain of [Input]((uint64_t)&v118);
    outlined retain of [Input]((uint64_t)&v117);
    specialized Graph.DepthFirstEdgeIterator.init(_:initial:)(v72, (uint64_t)v65, &v91);
    v68 = v91;
    outlined release of Graph((uint64_t)v72);
    swift_release();
    swift_release();
    swift_release();
    outlined release of [Input]((uint64_t)&v116);
    result = outlined release of [Input]((uint64_t)&v115);
    v69 = v92;
    v70 = v93;
    *(_QWORD *)a2 = EdgeIteratorV5edgestAG_tFA2G2IDVXEfU0_AF0E0VTf1cn_nTf4xg_nTm;
    *(_QWORD *)(a2 + 8) = v68;
    *(_OWORD *)(a2 + 16) = v69;
    *(_OWORD *)(a2 + 32) = v70;
    return result;
  }
  v81 = v10 + 4;
  v78 = v9 + 32;
  v79 = (_QWORD *)(v9 + 16);
  v75 = v10 + 7;
  v76 = v11 + 32;
  v74 = (uint64_t *)MEMORY[0x24BEE4AF8];
  v83 = v9;
  v80 = v10;
  while (1)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v13 = v12[2];
      if (!v13)
        goto LABEL_76;
    }
    else
    {
      v12 = specialized _ArrayBuffer._consumeAndCreateNew()(v12);
      v13 = v12[2];
      if (!v13)
      {
LABEL_76:
        __break(1u);
        goto LABEL_77;
      }
    }
    v14 = v13 - 1;
    v15 = &v12[7 * v14];
    v16 = *((_OWORD *)v15 + 2);
    v17 = *((_OWORD *)v15 + 3);
    v18 = *((_OWORD *)v15 + 4);
    v123 = v15[10];
    v121 = v17;
    v122 = v18;
    v120 = v16;
    v12[2] = v14;
    v19 = v94;
    if (*(_QWORD *)(v94 + 16))
    {
      Hasher.init(_seed:)();
      v90 = v120;
      Hasher._combine(_:)(v120);
      v20 = *((_QWORD *)&v120 + 1);
      v21 = *(void (**)(uint64_t *))(**((_QWORD **)&v120 + 1) + 120);
      swift_retain();
      v21(&v91);
      swift_release();
      v22 = v121;
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v23 = v122;
      v87 = BYTE8(v122);
      v89 = v20;
      if (BYTE8(v122) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v23);
      }
      v86 = v123;
      Hasher._combine(_:)(v123);
      v24 = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v19 + 32);
      v26 = v24 & ~v25;
      v27 = v19 + 56;
      if (((*(_QWORD *)(v19 + 56 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) != 0)
      {
        v82 = v23;
        v84 = v12;
        v28 = ~v25;
        while (1)
        {
          v29 = *(_QWORD *)(v19 + 48) + 56 * v26;
          if (*(_QWORD *)v29 == v90)
          {
            v30 = v19;
            v8 = *(uint64_t **)(v29 + 8);
            v31 = *(_QWORD *)(v29 + 16);
            v32 = *(_QWORD *)(v29 + 24);
            v88 = *(_QWORD *)(v29 + 32);
            v33 = *(_BYTE *)(v29 + 40);
            v34 = *(_QWORD *)(v29 + 48);
            v35 = *(uint64_t (**)(uint64_t))(*v8 + 128);
            swift_retain();
            swift_bridgeObjectRetain();
            if ((v35(v89) & 1) != 0)
            {
              if (v31 == (_QWORD)v22 && v32 == *((_QWORD *)&v22 + 1))
              {
                swift_bridgeObjectRelease();
                swift_release();
                v19 = v30;
                if ((v33 & 1) != 0)
                {
LABEL_24:
                  v38 = v87;
                  if (v34 != v86)
                    v38 = 0;
                  if ((v38 & 1) != 0)
                  {
LABEL_35:
                    swift_bridgeObjectRelease();
                    swift_release();
                    v9 = v83;
                    v12 = v84;
                    v10 = v80;
                    goto LABEL_4;
                  }
                  goto LABEL_15;
                }
                goto LABEL_29;
              }
              v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_release();
              v19 = v30;
              if ((v37 & 1) != 0)
              {
                if ((v33 & 1) != 0)
                  goto LABEL_24;
LABEL_29:
                if ((v87 & 1) == 0 && v88 == v82 && v34 == v86)
                  goto LABEL_35;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_release();
              v19 = v30;
            }
          }
LABEL_15:
          v26 = (v26 + 1) & v28;
          if (((*(_QWORD *)(v27 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
          {
            v9 = v83;
            v12 = v84;
            v10 = v80;
            goto LABEL_38;
          }
        }
      }
      v9 = v83;
    }
LABEL_38:
    v124[0] = v121;
    swift_retain();
    outlined retain of String((uint64_t)v124);
    v8 = &v94;
    specialized Set._Variant.insert(_:)((uint64_t)&v91, (Swift::Int)&v120, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<Input>);
    swift_release();
    swift_bridgeObjectRelease();
    v40 = v120;
    v41 = v10[2];
    if (v9)
      break;
    if (v41)
    {
      if (*v81 == (_QWORD)v120)
      {
        result = 0;
        v44 = v77;
        goto LABEL_55;
      }
      if (v41 != 1)
      {
        if (v10[5] == (_QWORD)v120)
        {
          result = 1;
          v44 = v77;
          goto LABEL_55;
        }
        if (v41 != 2)
        {
          if (v10[6] == (_QWORD)v120)
          {
            result = 2;
            v44 = v77;
LABEL_55:
            if (result >= *(_QWORD *)(v44 + 16))
              goto LABEL_80;
            v85 = v12;
            v47 = (_QWORD *)(v76 + 48 * result);
            v8 = (uint64_t *)v47[3];
            v48 = v47[4];
            v49 = v47[5];
            v50 = *(_QWORD *)(v48 + 16);
            if (v8)
            {
              swift_retain();
              outlined retain of String((uint64_t)v124);
              swift_retain();
              swift_retain();
              swift_retain();
              v10 = v80;
              result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v120, v48 + 32, v50, v8 + 2, (uint64_t)(v8 + 4));
              if ((v51 & 1) != 0)
              {
LABEL_66:
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                outlined release of String((uint64_t)v124);
LABEL_67:
                swift_release();
                outlined release of String((uint64_t)v124);
                v9 = v83;
                v12 = v85;
                goto LABEL_4;
              }
            }
            else
            {
              swift_retain();
              outlined retain of String((uint64_t)v124);
              swift_retain();
              swift_retain();
              result = specialized Collection<>.firstIndex(of:)(&v120, v48 + 32, v50);
              if ((v52 & 1) != 0)
              {
                v8 = 0;
                goto LABEL_66;
              }
            }
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_81;
            if (result >= *(_QWORD *)(v49 + 16))
              goto LABEL_82;
            v53 = v49 + 56 * result;
            v55 = *(_QWORD *)(v53 + 32);
            v54 = *(_QWORD *)(v53 + 40);
            outlined copy of Output?(v55, v54);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            outlined release of String((uint64_t)v124);
            if (v54)
            {
              v9 = v83;
              v95 = v85;
              specialized OrderedDictionary.subscript.getter(v55, v83, v10, v77, v101);
              outlined init with take of MetalFunctionNode?((uint64_t)v101, (uint64_t)&v102, &demangling cache variable for type metadata for Graph.Adjacent?);
              if (*((_QWORD *)&v102 + 1))
              {
                v110 = v102;
                v107 = v104;
                v56 = v103;
                v57 = v105;
                outlined init with take of MetalFunctionNode?((uint64_t)&v107, (uint64_t)v109, &demangling cache variable for type metadata for _HashTable.Storage?);
                v58 = *((_QWORD *)&v107 + 1);
                v108 = *((_QWORD *)&v107 + 1);
                v106 = v57;
                v112 = v110;
                outlined init with take of MetalFunctionNode?((uint64_t)&v112, (uint64_t)v114, &demangling cache variable for type metadata for _HashTable.Storage?);
                swift_retain();
                outlined retain of String((uint64_t)v124);
                outlined retain of _HashTable.Storage?((uint64_t)v109);
                outlined retain of _HashTable.Storage?((uint64_t)&v108);
                outlined retain of _HashTable.Storage?((uint64_t)&v106);
                outlined release of _HashTable.Storage?((uint64_t)v114);
                v113 = *((_QWORD *)&v112 + 1);
                outlined release of _HashTable.Storage?((uint64_t)&v113);
                v111 = v56;
                outlined release of _HashTable.Storage?((uint64_t)&v111);
                outlined release of _HashTable.Storage?((uint64_t)v109);
                outlined release of _HashTable.Storage?((uint64_t)&v108);
                outlined release of _HashTable.Storage?((uint64_t)&v106);
                outlined release of _HashTable.Storage?((uint64_t)&v106);
                outlined release of _HashTable.Storage?((uint64_t)v109);
              }
              else
              {
                swift_retain();
                outlined retain of String((uint64_t)v124);
                v58 = MEMORY[0x24BEE4AF8];
              }
              v59 = v74;
              v8 = (uint64_t *)&v95;
              specialized Array.append<A>(contentsOf:)(v58);
              swift_release();
              outlined release of String((uint64_t)v124);
              specialized OrderedSet._find(_:)(v40, v96, v74, (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
              if ((v61 & 1) != 0)
              {
                v8 = &v96;
                specialized OrderedSet._appendNew(_:in:)(v40, v60);
                v59 = v97;
              }
              v74 = v59;
              specialized OrderedSet._find(_:)(v55, v96, v59, (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
              v10 = v80;
              if ((v63 & 1) != 0)
              {
                v8 = &v96;
                specialized OrderedSet._appendNew(_:in:)(v55, v62);
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
                v74 = v97;
              }
              else
              {
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
              }
              v12 = v95;
              goto LABEL_4;
            }
            goto LABEL_67;
          }
          v45 = 0;
          while (v41 - 3 != v45)
          {
            v46 = v75[v45++];
            if (v46 == (_QWORD)v120)
            {
              result = v45 + 2;
              v44 = v77;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_79;
              goto LABEL_55;
            }
          }
        }
      }
    }
LABEL_3:
    swift_release();
    outlined release of String((uint64_t)v124);
LABEL_4:
    if (!v12[2])
      goto LABEL_78;
  }
  result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v120, (uint64_t)v81, v41, v79, v78);
  if ((v43 & 1) != 0)
    goto LABEL_3;
  v44 = v77;
  if ((result & 0x8000000000000000) == 0)
    goto LABEL_55;
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::UInt v9;
  uint64_t v10;

  lazy protocol witness table accessor for type ShaderGraphNode.ID and conformance ShaderGraphNode.ID();
  result = Set.init(minimumCapacity:)();
  v3 = 0;
  v10 = result;
  while (1)
  {
LABEL_6:
    v7 = *(_QWORD *)(a1 + 16);
    if (v3 == v7)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10;
    }
    if (v3 >= v7)
      break;
    v8 = *(_QWORD *)(a1 + 32 + 8 * v3);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRelease();
    ++v3;
    if (v8)
    {
      v4 = *(_QWORD *)(v8 + 16);
      if (v4)
      {
        v5 = 0;
        while (v5 < v4)
        {
          v6 = v5 + 1;
          result = specialized Set._Variant.insert(_:)(&v9, *(_QWORD *)(v8 + 32 + 8 * v5), &demangling cache variable for type metadata for _SetStorage<ShaderGraphNode.ID>);
          v4 = *(_QWORD *)(v8 + 16);
          v5 = v6;
          if (v6 == v4)
            goto LABEL_6;
        }
        __break(1u);
        break;
      }
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  Swift::Int *v4;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)();
  v8 = result;
  if (v2)
  {
    v4 = (Swift::Int *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  char *v4;
  char v5;
  char v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type DebugConfig.Group and conformance DebugConfig.Group();
  result = Set.init(minimumCapacity:)();
  v7 = result;
  if (v2)
  {
    v4 = (char *)(a1 + 32);
    do
    {
      v5 = *v4++;
      specialized Set._Variant.insert(_:)((uint64_t)&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  return specialized Set.init<A>(_:)(a1, (void (*)(void))lazy protocol witness table accessor for type ShaderGraphNode.ID and conformance ShaderGraphNode.ID, (uint64_t)&type metadata for ShaderGraphNode.ID, &demangling cache variable for type metadata for _SetStorage<ShaderGraphNode.ID>);
}

{
  return specialized Set.init<A>(_:)(a1, (void (*)(void))lazy protocol witness table accessor for type FunctionNodeID and conformance FunctionNodeID, (uint64_t)&type metadata for FunctionNodeID, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<FunctionNodeID>);
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  Swift::Int *v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a2 + 16);
  result = Set.init(minimumCapacity:)();
  v11 = result;
  if (v3)
  {
    v5 = 0;
    v6 = (Swift::Int *)(a2 + 40);
    while (v5 < *(_QWORD *)(a2 + 16))
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      ++v5;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v10, v7, v8);
      result = swift_bridgeObjectRelease();
      v6 += 2;
      if (v3 == v5)
      {
        swift_release();
        swift_release();
        return v11;
      }
    }
    __break(1u);
  }
  else
  {
    v9 = result;
    swift_release();
    swift_release();
    return v9;
  }
  return result;
}

double Graph.insertNode(inputs:outputs:shaderGraphData:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  __int128 v6;
  double result;
  __int128 v8;
  _OWORD v9[2];

  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(*(_QWORD *)(v4 + 40), a1, a2, a3, v4 + 64, v4, (unint64_t *)&v8);
  v6 = v9[0];
  *a4 = v8;
  a4[1] = v6;
  result = *(double *)((char *)v9 + 9);
  *(_OWORD *)((char *)a4 + 25) = *(_OWORD *)((char *)v9 + 9);
  return result;
}

uint64_t Graph.replace(_:with:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  _QWORD v75[5];
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;

  v3 = *(_QWORD *)(a2 + 8);
  v67 = v3;
  v60 = *(_QWORD *)(v3 + 16);
  v53 = a1;
  if (!v60)
    goto LABEL_18;
  v52 = a2;
  v58 = v3 + 32;
  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRetain();
  v6 = 0;
  v54 = (_QWORD *)(v4 + 80);
  v56 = v5;
  while (2)
  {
    v8 = (uint64_t *)(v58 + 56 * v6);
    v9 = *v8;
    v10 = v8[1];
    v11 = v8[2];
    v12 = v8[3];
    v13 = v8[4];
    v14 = *((_BYTE *)v8 + 40);
    v15 = v8[6];
    *(_QWORD *)&v85 = v9;
    *((_QWORD *)&v85 + 1) = v10;
    v86 = v11;
    v87 = v12;
    v88 = v13;
    v89 = v14;
    v90 = v15;
    if (!v5)
      goto LABEL_6;
    v62 = v6;
    v16 = v54;
    do
    {
      v18 = *(v16 - 6);
      v17 = *(v16 - 5);
      v19 = *(v16 - 4);
      v20 = *(v16 - 2);
      v21 = *((_BYTE *)v16 - 8);
      v22 = *v16;
      if (v19 == v11 && *(v16 - 3) == v12)
      {
        v7 = v12;
LABEL_4:
        v78 = v18;
        v79 = v17;
        v80 = v11;
        v81 = v7;
        v82 = v20;
        v83 = v21;
        v84 = v22;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdge(from:to:)((uint64_t)&v78, &v85);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_5;
      }
      v64 = *v16;
      v24 = *(v16 - 5);
      v7 = *(v16 - 3);
      v25 = v11;
      v26 = v12;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v11 = v19;
        v17 = v24;
        v22 = v64;
        goto LABEL_4;
      }
      v16 += 7;
      --v5;
      v12 = v26;
      v11 = v25;
    }
    while (v5);
    v78 = v18;
    v79 = v24;
    v80 = v19;
    v81 = v7;
    v82 = v20;
    v83 = v21;
    v84 = v64;
LABEL_5:
    v5 = v56;
    v6 = v62;
LABEL_6:
    if (++v6 != v60)
      continue;
    break;
  }
  outlined release of [Input]((uint64_t)&v67);
  a2 = v52;
  a1 = v53;
LABEL_18:
  v27 = *(_QWORD *)(a2 + 16);
  v66 = v27;
  v61 = *(_QWORD *)(v27 + 16);
  if (!v61)
    return specialized Graph.remove(_:)(a1[3]);
  v59 = v27 + 32;
  v28 = a1[2];
  v29 = *(_QWORD *)(v28 + 16);
  swift_bridgeObjectRetain();
  v30 = 0;
  v55 = (_QWORD *)(v28 + 80);
  v57 = v29;
  while (2)
  {
    v32 = (uint64_t *)(v59 + 56 * v30);
    v33 = *v32;
    v34 = v32[1];
    v35 = v32[2];
    v36 = v32[3];
    v37 = v32[4];
    v38 = *((_BYTE *)v32 + 40);
    v39 = v32[6];
    v75[0] = v33;
    v75[1] = v34;
    v75[2] = v35;
    v75[3] = v36;
    v75[4] = v37;
    v76 = v38;
    v77 = v39;
    if (!v29)
      goto LABEL_23;
    v63 = v30;
    v40 = v55;
    while (2)
    {
      v42 = *(v40 - 6);
      v41 = *(v40 - 5);
      v43 = *(v40 - 4);
      v44 = *(v40 - 2);
      v45 = *((_BYTE *)v40 - 8);
      v46 = *v40;
      if (v43 == v35 && *(v40 - 3) == v36)
      {
        v31 = v36;
LABEL_21:
        v68 = v42;
        v69 = v41;
        v70 = v35;
        v71 = v31;
        v72 = v44;
        v73 = v45;
        v74 = v46;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdges(from:to:)((uint64_t)&v68, (uint64_t)v75);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_22;
      }
      v65 = *v40;
      v48 = *(v40 - 5);
      v31 = *(v40 - 3);
      v49 = v35;
      v50 = v36;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v35 = v43;
        v41 = v48;
        v46 = v65;
        goto LABEL_21;
      }
      v40 += 7;
      --v29;
      v36 = v50;
      v35 = v49;
      if (v29)
        continue;
      break;
    }
    v68 = v42;
    v69 = v48;
    v70 = v43;
    v71 = v31;
    v72 = v44;
    v73 = v45;
    v74 = v65;
LABEL_22:
    v29 = v57;
    v30 = v63;
LABEL_23:
    if (++v30 != v61)
      continue;
    break;
  }
  outlined release of [Input]((uint64_t)&v66);
  a1 = v53;
  return specialized Graph.remove(_:)(a1[3]);
}

uint64_t ShaderGraphNode.out.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t result;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  _OWORD v38[12];
  __int128 v39;
  uint64_t v40;
  unint64_t v41[2];
  uint64_t v42;

  v27 = v1[1];
  v28 = *v1;
  v25 = v1[4];
  v26 = v1[3];
  v30 = v1[2];
  v24 = *((_BYTE *)v1 + 40);
  v42 = v30;
  v2 = *(_QWORD *)(v30 + 16);
  if (v2)
  {
    v3 = (_QWORD *)(v30 + 80);
    while (1)
    {
      v4 = *(v3 - 6);
      v5 = *(v3 - 5);
      v6 = *(v3 - 4);
      v7 = *(v3 - 3);
      v8 = *(v3 - 2);
      v9 = *((_BYTE *)v3 - 8);
      v10 = *v3;
      if (v6 == 7632239 && v7 == 0xE300000000000000)
        break;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_11;
      v3 += 7;
      if (!--v2)
        goto LABEL_9;
    }
    v7 = 0xE300000000000000;
LABEL_11:
    swift_retain();
    result = swift_bridgeObjectRetain();
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v8;
    *(_BYTE *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = v10;
  }
  else
  {
LABEL_9:
    outlined init with take of NodePersonality(v29, v41);
    v40 = v29[1];
    *(_QWORD *)&v31 = v28;
    *((_QWORD *)&v31 + 1) = v27;
    v32 = v30;
    v33 = v26;
    v34 = v25;
    v35 = v24 & 1;
    v36 = 7632239;
    v37 = 0xE300000000000000;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_((uint64_t)&v31);
    outlined init with take of UserGraphError.ErrorType(&v31, (uint64_t)v38);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v39 = 0uLL;
    swift_allocError();
    *v12 = v38[0];
    v13 = v38[4];
    v14 = v38[2];
    v15 = v38[1];
    v12[3] = v38[3];
    v12[4] = v13;
    v12[1] = v15;
    v12[2] = v14;
    v16 = v38[8];
    v17 = v38[6];
    v18 = v38[5];
    v12[7] = v38[7];
    v12[8] = v16;
    v12[5] = v18;
    v12[6] = v17;
    v19 = v39;
    v20 = v38[10];
    v21 = v38[9];
    v12[11] = v38[11];
    v12[12] = v19;
    v12[9] = v21;
    v12[10] = v20;
    outlined retain of [Input]((uint64_t)&v42);
    outlined retain of NodePersonality(v41);
    outlined retain of [Input]((uint64_t)&v40);
    return swift_willThrow();
  }
  return result;
}

uint64_t ShaderGraphNode.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t result;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  _QWORD *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[12];
  __int128 v47;
  uint64_t v48;
  unint64_t v49[2];
  uint64_t v50;

  v6 = *(_OWORD *)(v3 + 1);
  v33 = v3[3];
  v34 = *v3;
  v32 = v3[4];
  v31 = *((_BYTE *)v3 + 40);
  v35 = v6;
  v50 = v3[1];
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (_QWORD *)(v6 + 80);
    while (1)
    {
      v9 = *(v8 - 6);
      v10 = *(v8 - 5);
      v11 = *(v8 - 4);
      v12 = *(v8 - 3);
      v38 = *(v8 - 2);
      v37 = *((_BYTE *)v8 - 8);
      v13 = *v8;
      if (v11 == a1 && v12 == a2)
        break;
      v15 = a1;
      v16 = a2;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_11;
      v8 += 7;
      --v7;
      a2 = v16;
      a1 = v15;
      if (!v7)
        goto LABEL_9;
    }
    v11 = a1;
    v12 = a2;
LABEL_11:
    swift_retain();
    result = swift_bridgeObjectRetain();
    *(_QWORD *)a3 = v9;
    *(_QWORD *)(a3 + 8) = v10;
    *(_QWORD *)(a3 + 16) = v11;
    *(_QWORD *)(a3 + 24) = v12;
    *(_QWORD *)(a3 + 32) = v38;
    *(_BYTE *)(a3 + 40) = v37;
    *(_QWORD *)(a3 + 48) = v13;
  }
  else
  {
LABEL_9:
    v17 = a2;
    v18 = a1;
    outlined init with take of NodePersonality(v36, v49);
    v48 = v36[2];
    v39 = v34;
    v40 = v35;
    v41 = v33;
    v42 = v32;
    v43 = v31 & 1;
    v44 = v18;
    v45 = v17;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v39);
    outlined init with take of UserGraphError.ErrorType((__int128 *)&v39, (uint64_t)v46);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v47 = 0uLL;
    swift_allocError();
    *v19 = v46[0];
    v20 = v46[4];
    v21 = v46[2];
    v22 = v46[1];
    v19[3] = v46[3];
    v19[4] = v20;
    v19[1] = v22;
    v19[2] = v21;
    v23 = v46[8];
    v24 = v46[6];
    v25 = v46[5];
    v19[7] = v46[7];
    v19[8] = v23;
    v19[5] = v25;
    v19[6] = v24;
    v26 = v47;
    v27 = v46[10];
    v28 = v46[9];
    v19[11] = v46[11];
    v19[12] = v26;
    v19[9] = v28;
    v19[10] = v27;
    outlined retain of [Input]((uint64_t)&v50);
    outlined retain of NodePersonality(v49);
    outlined retain of [Input]((uint64_t)&v48);
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t result;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[12];
  __int128 v47;
  uint64_t v48;
  unint64_t v49[2];
  uint64_t v50;

  v33 = v3[1];
  v34 = *v3;
  v32 = v3[3];
  v31 = v3[4];
  v36 = v3[2];
  v30 = *((_BYTE *)v3 + 40);
  v50 = v36;
  v6 = *(_QWORD *)(v36 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v36 + 80);
    while (1)
    {
      v9 = *(v7 - 6);
      v8 = *(v7 - 5);
      v10 = *(v7 - 4);
      v11 = *(v7 - 3);
      v38 = *(v7 - 2);
      v37 = *((_BYTE *)v7 - 8);
      v12 = *v7;
      if (v10 == a1 && v11 == a2)
        break;
      v14 = a1;
      v15 = a2;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_11;
      v7 += 7;
      --v6;
      a2 = v15;
      a1 = v14;
      if (!v6)
        goto LABEL_9;
    }
    v10 = a1;
    v11 = a2;
LABEL_11:
    swift_retain();
    result = swift_bridgeObjectRetain();
    *(_QWORD *)a3 = v9;
    *(_QWORD *)(a3 + 8) = v8;
    *(_QWORD *)(a3 + 16) = v10;
    *(_QWORD *)(a3 + 24) = v11;
    *(_QWORD *)(a3 + 32) = v38;
    *(_BYTE *)(a3 + 40) = v37;
    *(_QWORD *)(a3 + 48) = v12;
  }
  else
  {
LABEL_9:
    v16 = a2;
    v17 = a1;
    outlined init with take of NodePersonality(v35, v49);
    v48 = v35[1];
    *(_QWORD *)&v39 = v34;
    *((_QWORD *)&v39 + 1) = v33;
    v40 = v36;
    v41 = v32;
    v42 = v31;
    v43 = v30 & 1;
    v44 = v17;
    v45 = v16;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_((uint64_t)&v39);
    outlined init with take of UserGraphError.ErrorType(&v39, (uint64_t)v46);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v47 = 0uLL;
    swift_allocError();
    *v18 = v46[0];
    v19 = v46[4];
    v20 = v46[2];
    v21 = v46[1];
    v18[3] = v46[3];
    v18[4] = v19;
    v18[1] = v21;
    v18[2] = v20;
    v22 = v46[8];
    v23 = v46[6];
    v24 = v46[5];
    v18[7] = v46[7];
    v18[8] = v22;
    v18[5] = v24;
    v18[6] = v23;
    v25 = v47;
    v26 = v46[10];
    v27 = v46[9];
    v18[11] = v46[11];
    v18[12] = v25;
    v18[9] = v27;
    v18[10] = v26;
    outlined retain of [Input]((uint64_t)&v50);
    outlined retain of NodePersonality(v49);
    outlined retain of [Input]((uint64_t)&v48);
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  return result;
}

uint64_t Graph.connect(_:to:)(uint64_t a1, unint64_t a2)
{
  uint64_t (*v2)(_QWORD, _QWORD);
  uint64_t (*v3)(_QWORD *, _QWORD);
  void (*v6)(_QWORD *, _QWORD);
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t **v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v24;
  uint64_t *v25;
  _QWORD *v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  _QWORD *v41;
  _QWORD *v42;
  char v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  void (*v51)(_QWORD *, _QWORD);
  char v52;
  __int128 *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[4];
  __int128 v61;

  v3 = v2;
  v57 = *(_QWORD *)(a1 + 16);
  v58 = *(_QWORD *)(a1 + 8);
  v55 = *(_QWORD *)(a1 + 32);
  v56 = *(_QWORD *)(a1 + 24);
  v52 = *(_BYTE *)(a1 + 40);
  v53 = (__int128 *)(a1 + 16);
  v54 = *(_QWORD *)(a1 + 48);
  v59 = *(_QWORD *)a1;
  v6 = (void (*)(_QWORD, _QWORD))specialized OrderedDictionary.subscript.modify(v60, *(_QWORD *)a1);
  if (!v7[1])
  {
    v6(v60, 0);
    goto LABEL_20;
  }
  v8 = v7;
  v51 = v6;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  v10 = *v8;
  v9 = v8[1];
  v11 = *(_QWORD *)(v9 + 16);
  if (*v8)
  {
    swift_retain();
    swift_retain();
    v12 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(a1, v9 + 32, v11, (_QWORD *)(v10 + 16), v10 + 32);
    v14 = v13;
    v16 = v15;
  }
  else
  {
    swift_retain();
    v12 = specialized Collection<>.firstIndex(of:)(a1, v9 + 32, v11);
    v14 = v17;
    v16 = 0;
  }
  v18 = (uint64_t **)(v8 + 2);
  swift_release();
  swift_release();
  if ((v14 & 1) != 0)
  {
LABEL_12:
    specialized OrderedSet._appendNew(_:in:)((__int128 *)a1, v16);
    v12 = specialized OrderedSet.init<A>(_:)(MEMORY[0x24BEE4AF8]);
    v9 = v21;
    v22 = (uint64_t *)v8[2];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8[2] = (uint64_t)v22;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1);
      v22 = *v18;
    }
    v16 = v22[2];
    v20 = v22[3];
    v14 = v16 + 1;
    if (v16 < v20 >> 1)
    {
LABEL_15:
      v22[2] = v14;
      v24 = &v22[2 * v16];
      v24[4] = v12;
      v24[5] = v9;
      v25 = *v18;
      v26 = (_QWORD *)(*v18)[2];
      v27 = swift_isUniquelyReferenced_nonNull_native();
      *v18 = v25;
      if ((v27 & 1) == 0)
      {
        v25 = (uint64_t *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v25);
        *v18 = v25;
      }
      if (v26)
      {
        v28 = v25[2];
        if ((unint64_t)v26 <= v28)
          goto LABEL_19;
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_44;
    }
LABEL_41:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v14, 1);
    v22 = *v18;
    goto LABEL_15;
  }
  v8 = *v18;
  v19 = swift_isUniquelyReferenced_nonNull_native();
  *v18 = v8;
  if ((v19 & 1) == 0)
  {
    v8 = (uint64_t *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v8);
    *v18 = v8;
  }
  if ((v12 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_41;
  }
  if (v12 >= v8[2])
  {
    __break(1u);
    goto LABEL_12;
  }
LABEL_19:
  specialized OrderedSet._append(_:)((__int128 *)a2);
  v51(v60, 0);
LABEL_20:
  v3 = (uint64_t (*)(_QWORD, _QWORD))specialized OrderedDictionary.subscript.modify(v60, *(_QWORD *)a2);
  if (!*(_QWORD *)(v29 + 8))
    return v3(v60, 0);
  v30 = (uint64_t *)(v29 + 24);
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  v32 = *v30;
  v31 = v30[1];
  v33 = *(_QWORD *)(v31 + 16);
  if (*v30)
  {
    swift_retain();
    swift_retain();
    v34 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(a2, v31 + 32, v33, (_QWORD *)(v32 + 16), v32 + 32);
    v36 = v35;
    v38 = v37;
  }
  else
  {
    swift_retain();
    v34 = specialized Collection<>.firstIndex(of:)(a2, v31 + 32, v33);
    v36 = v39;
    v38 = 0;
  }
  v16 = (unint64_t)(v30 + 2);
  swift_release();
  swift_release();
  if ((v36 & 1) == 0)
  {
    v26 = *(_QWORD **)v16;
    v40 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v16 = v26;
    if ((v40 & 1) == 0)
    {
      v26 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v26);
      *(_QWORD *)v16 = v26;
    }
    if ((v34 & 0x8000000000000000) == 0)
    {
      v28 = v26[2];
      if (v34 < v28)
      {
        v41 = &v26[7 * v34];
LABEL_38:
        v48 = v41[4];
        v49 = v41[5];
        v50 = v41 + 4;
        outlined consume of Input?(v48, v49);
        v61 = *v53;
        *v50 = v59;
        v50[1] = v58;
        v50[2] = v57;
        v50[3] = v56;
        v50[4] = v55;
        v50[5] = v52 & 1;
        v50[6] = v54;
        swift_retain();
        outlined retain of String((uint64_t)&v61);
        return v3(v60, 0);
      }
      goto LABEL_45;
    }
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, (int64_t)v26, 1);
    v42 = *(_QWORD **)v16;
    goto LABEL_33;
  }
  specialized OrderedSet._appendNew(_:in:)((__int128 *)a2, v38);
  v42 = *(_QWORD **)v16;
  v43 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)v16 = v42;
  if ((v43 & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42[2] + 1, 1);
    v42 = *(_QWORD **)v16;
  }
  a2 = v42[2];
  v28 = v42[3];
  v26 = (_QWORD *)(a2 + 1);
  if (a2 >= v28 >> 1)
    goto LABEL_46;
LABEL_33:
  v42[2] = v26;
  v44 = &v42[7 * a2];
  *((_OWORD *)v44 + 2) = 0u;
  *((_OWORD *)v44 + 3) = 0u;
  *((_OWORD *)v44 + 4) = 0u;
  v44[10] = 0;
  v45 = *(_QWORD **)v16;
  v46 = *(_QWORD *)(*(_QWORD *)v16 + 16);
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)v16 = v45;
  if ((result & 1) == 0)
  {
    result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v45);
    v45 = (_QWORD *)result;
    *(_QWORD *)v16 = result;
  }
  if (v46)
  {
    if (v46 <= v45[2])
    {
      v41 = &v45[7 * v46 - 7];
      goto LABEL_38;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t ShaderGraphNode.output(labeled:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v7 = result;
    v19 = a3;
    v8 = (uint64_t *)(v4 + 80);
    while (1)
    {
      v9 = *(v8 - 5);
      v20 = *(v8 - 6);
      v10 = *(v8 - 4);
      v11 = *(v8 - 3);
      v12 = *(v8 - 2);
      v13 = *((unsigned __int8 *)v8 - 8);
      v14 = *v8;
      if (v10 == v7 && v11 == a2)
        break;
      v16 = v7;
      v17 = a2;
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0)
        goto LABEL_12;
      v8 += 7;
      --v5;
      a2 = v17;
      v7 = v16;
      if (!v5)
      {
        v18 = 0;
        v9 = 0;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        a3 = v19;
        goto LABEL_13;
      }
    }
    v10 = v7;
    v11 = a2;
LABEL_12:
    swift_retain();
    result = swift_bridgeObjectRetain();
    a3 = v19;
    v18 = v20;
  }
  else
  {
    v18 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
  }
LABEL_13:
  *a3 = v18;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  a3[4] = v12;
  a3[5] = v13;
  a3[6] = v14;
  return result;
}

unint64_t Graph.edges(from:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v3 = *v1;
  v4 = (_QWORD *)v1[1];
  v5 = v1[2];
  result = specialized OrderedSet._find(_:)(*(_QWORD *)a1, v3, v4, (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
  if ((v7 & 1) != 0)
    return MEMORY[0x24BEE4AF8];
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)(v5 + 16))
  {
    v8 = (_QWORD *)(v5 + 48 * result);
    v9 = v8[4];
    v10 = v8[5];
    v11 = v8[6];
    v15 = *(_OWORD *)(a1 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    outlined retain of String((uint64_t)&v15);
    swift_retain();
    specialized OrderedDictionary.subscript.getter(a1, v9, v10, v11);
    v13 = v12;
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined release of String((uint64_t)&v15);
    if (v13)
    {
      swift_retain();
      outlined retain of String((uint64_t)&v15);
      v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_nTm(v13, (uint64_t *)a1);
      swift_release();
      outlined release of String((uint64_t)&v15);
      swift_release();
      swift_release();
      return v14;
    }
    return MEMORY[0x24BEE4AF8];
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t result;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v1 + 16);
  result = specialized OrderedSet._find(_:)(*(_QWORD *)(a1 + 24), *(_QWORD *)v1, *(_QWORD **)(v1 + 8), (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
  if ((v4 & 1) != 0)
    return MEMORY[0x24BEE4AF8];
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)(v2 + 16))
  {
    v5 = (_QWORD *)(v2 + 48 * result);
    v6 = v5[4];
    v7 = v5[5];
    v8 = v5[6];
    swift_retain();
    swift_retain();
    swift_retain();
    v9 = specialized Sequence.flatMap<A>(_:)(v6, v7, v8);
    swift_release();
    swift_release();
    swift_release();
    return v9;
  }
  __break(1u);
  return result;
}

unint64_t Graph.node(connectedTo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t result;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20[7];
  unint64_t v21;
  uint64_t v22;
  __int128 v23;

  v5 = *(_QWORD *)(v2 + 16);
  result = specialized OrderedSet._find(_:)(*(_QWORD *)a1, *(_QWORD *)v2, *(_QWORD **)(v2 + 8), (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
  if ((v7 & 1) != 0)
    goto LABEL_9;
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (result >= *(_QWORD *)(v5 + 16))
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v8 = (_QWORD *)(v5 + 48 * result);
  v9 = v8[7];
  v10 = v8[8];
  v11 = v8[9];
  v23 = *(_OWORD *)(a1 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined retain of String((uint64_t)&v23);
  swift_retain();
  specialized OrderedDictionary.subscript.getter(a1, v9, v10, v11, v20);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined release of String((uint64_t)&v23);
  result = outlined init with take of MetalFunctionNode?((uint64_t)v20, (uint64_t)&v21, &demangling cache variable for type metadata for Output??);
  if (v22 == 1)
  {
LABEL_9:
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
LABEL_10:
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v13;
    *(_QWORD *)(a2 + 16) = v14;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_BYTE *)(a2 + 40) = v17;
    return result;
  }
  if (!v22)
  {
    result = (unint64_t)outlined release of Output??(v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Output??);
    goto LABEL_9;
  }
  if (v21 == -7)
  {
    swift_retain();
    outlined retain of String((uint64_t)&v23);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    result = swift_release();
    goto LABEL_9;
  }
  if ((v21 & 0x8000000000000000) != 0)
    goto LABEL_16;
  v18 = *(_QWORD *)(v2 + 64);
  if (v21 < *(_QWORD *)(v18 + 16))
  {
    v19 = v18 + 48 * v21;
    v12 = *(_QWORD *)(v19 + 32);
    v13 = *(_QWORD *)(v19 + 40);
    v14 = *(_QWORD *)(v19 + 48);
    v15 = *(_QWORD *)(v19 + 56);
    v16 = *(_QWORD *)(v19 + 64);
    v17 = *(_BYTE *)(v19 + 72);
    swift_retain();
    outlined retain of String((uint64_t)&v23);
    outlined copy of NodePersonality(v12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    result = swift_release();
    goto LABEL_10;
  }
LABEL_17:
  __break(1u);
  return result;
}

unint64_t Graph.moveEdges(from:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_OWORD *, _QWORD);
  uint64_t v16;
  void (*v17)(_QWORD *, _QWORD);
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_OWORD *, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD *, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];
  _OWORD v27[2];
  __int128 v28;
  __int128 v29;

  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(v2 + 16);
  result = specialized OrderedSet._find(_:)(*(_QWORD *)a1, *(_QWORD *)v2, *(_QWORD **)(v2 + 8), (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
  if ((v8 & 1) != 0)
    return result;
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (result >= *(_QWORD *)(v6 + 16))
  {
LABEL_17:
    __break(1u);
    return result;
  }
  v9 = (_QWORD *)(v6 + 48 * result);
  v10 = v9[4];
  v11 = v9[5];
  v25 = a2;
  v12 = v9[6];
  v29 = *(_OWORD *)(a1 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined retain of String((uint64_t)&v29);
  swift_retain();
  swift_retain();
  v24 = specialized OrderedDictionary.subscript.getter(a1, v10, v11, v12);
  v14 = v13;
  swift_release();
  outlined release of String((uint64_t)&v29);
  result = outlined consume of Graph.Adjacent?(v10, v11);
  if (v14)
  {
    v15 = (void (*)(_OWORD *, _QWORD))specialized OrderedDictionary.subscript.modify(v27, *(_QWORD *)v25);
    if (*(_QWORD *)(v16 + 8))
    {
      v28 = *(_OWORD *)(v25 + 16);
      swift_retain();
      outlined retain of String((uint64_t)&v28);
      v17 = (void (*)(_QWORD *, _QWORD))specialized OrderedDictionary.subscript.modify(v26, (uint64_t *)v25);
      v19 = v24;
      if (*(_QWORD *)(v18 + 8))
        specialized OrderedSet.append<A>(contentsOf:)(v24, v14);
      v17(v26, 0);
      swift_release();
      outlined release of String((uint64_t)&v28);
      v15(v27, 0);
    }
    else
    {
      v15(v27, 0);
      v19 = v24;
    }
    v20 = (void (*)(_OWORD *, _QWORD))specialized OrderedDictionary.subscript.modify(v27, v5);
    if (*(_QWORD *)(v21 + 8))
    {
      swift_retain();
      outlined retain of String((uint64_t)&v29);
      v22 = (void (*)(_QWORD *, _QWORD))specialized OrderedDictionary.subscript.modify(v26, (uint64_t *)a1);
      if (*(_QWORD *)(v23 + 8))
        specialized OrderedSet.removeAll(keepingCapacity:)(1);
      v22(v26, 0);
      swift_release();
      outlined release of String((uint64_t)&v29);
    }
    v20(v27, 0);
    v27[0] = *(_OWORD *)(v25 + 16);
    swift_retain();
    outlined retain of String((uint64_t)v27);
    specialized Sequence.forEach(_:)(v19, v14, v2, (uint64_t *)v25);
    swift_release();
    outlined release of String((uint64_t)v27);
    return outlined consume of OrderedSet<Input>?(v19, v14);
  }
  return result;
}

uint64_t Graph.prune(_:)(uint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::UInt v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::Int v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t);
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t i;
  __int128 *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  Swift::UInt v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  Swift::Int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  Swift::Int v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  Swift::Int v99;
  char v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  BOOL v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t (*v127)(uint64_t);
  char v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t j;
  __int128 *v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  char v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  Swift::UInt v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  Swift::Int v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  BOOL v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t k;
  unint64_t v189;
  BOOL v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  Swift::Int v204;
  char v205;
  unint64_t v206;
  uint64_t v207;
  int64_t v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  __int128 v212;
  uint64_t v213;
  char v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  Swift::Int v218;
  uint64_t v219;
  unint64_t v220;
  char v221;
  __int128 v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  uint64_t v236;
  char v237;
  uint64_t v238;
  uint64_t (*v239)(uint64_t);
  char v240;
  char v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  __int128 v247;
  uint64_t v248;
  char v249;
  uint64_t v250;
  char v251;
  _QWORD *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  Swift::UInt v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char v261;
  uint64_t v262;
  _OWORD *v263;
  uint64_t v264;
  uint64_t v265;
  Swift::Int v266;
  uint64_t v267;
  unint64_t v268;
  Swift::Int v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  _QWORD *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  char v286;
  char v287;
  _QWORD *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v294;
  unint64_t v295;
  unint64_t v296;
  _QWORD *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  _QWORD *v301;
  _OWORD *v302;
  uint64_t v303;
  _QWORD *v304;
  _QWORD *v305;
  uint64_t v306;
  __int128 *v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  uint64_t v313;
  _QWORD *v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  __int128 v320;
  uint64_t v321;
  char v322;
  uint64_t v323;
  char v324;
  uint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  char v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  __int128 v337;
  uint64_t v338;
  char v339;
  uint64_t v340;
  char v341;
  _QWORD *v342;
  _QWORD *v343;
  _QWORD *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  char v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  unint64_t v357;
  _QWORD *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t result;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  _QWORD *v386;
  unint64_t v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  _QWORD *v393;
  _QWORD *v394;
  uint64_t v395;
  _QWORD *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  _QWORD *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  _QWORD *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  _QWORD *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  _QWORD *v425;
  _QWORD *v426;
  uint64_t v427;
  _QWORD *v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  uint64_t v432;
  _QWORD *v433;
  uint64_t v434;
  Swift::UInt v435;
  _QWORD *v436;
  uint64_t *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  _OWORD *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  _QWORD *v445;
  uint64_t v446;
  char v447;
  _QWORD *v448;
  uint64_t v449;
  _QWORD *v450;
  uint64_t v451;
  uint64_t v452;
  unint64_t v453;
  uint64_t v454;
  char v455;
  uint64_t v456;
  char v457;
  uint64_t v458;
  _QWORD *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  _QWORD *v464;
  uint64_t v465;
  uint64_t v466;
  char v467;
  uint64_t v468;
  char v469;
  __int128 v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  char v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  char v492;
  _OWORD v493[2];
  uint64_t v494;
  char v495;
  uint64_t v496;
  _QWORD *v497;
  uint64_t v498;
  Swift::Int v499;
  uint64_t v500;
  unint64_t v501;
  unint64_t v502;
  __int128 v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  char v508;
  uint64_t v509;
  uint64_t v510;
  _BYTE v511[48];
  __int128 v512;
  _BYTE v513[64];
  _BYTE v514[41];
  _QWORD v515[5];
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  char v525[8];
  uint64_t v526;
  uint64_t v527;
  _OWORD v528[7];
  _QWORD v529[5];
  char v530;
  uint64_t v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  __int128 v539;
  __int128 v540;
  _OWORD v541[2];
  _QWORD v542[5];
  char v543;
  uint64_t v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  _OWORD v554[2];
  _OWORD v555[7];
  _QWORD v556[5];
  char v557;
  uint64_t v558;
  uint64_t v559[5];
  char v560;
  uint64_t v561;
  _OWORD v562[7];
  uint64_t v563[5];
  char v564;
  uint64_t v565;
  _OWORD v566[7];
  uint64_t v567[5];
  char v568;
  uint64_t v569;

  v2 = v1;
  v4 = *(_QWORD *)(a1 + 16);
  v527 = v4;
  v5 = *(_QWORD *)(v4 + 16);
  v378 = a1;
  if (!v5)
  {
LABEL_51:
    v49 = swift_bridgeObjectRetain();
    v50 = specialized Sequence.compactMap<A>(_:)(v49, v2);
    v443 = 0;
    swift_bridgeObjectRelease();
    v381 = *(_QWORD *)(v50 + 16);
    if (v381)
    {
      v382 = v50 + 32;
      swift_bridgeObjectRetain();
      for (i = 0; i != v381; ++i)
      {
        v383 = i;
        v52 = (__int128 *)(v382 + 112 * i);
        v53 = *v52;
        v54 = v52[1];
        v566[2] = v52[2];
        v566[1] = v54;
        v566[0] = v53;
        v55 = v52[3];
        v56 = v52[4];
        v57 = v52[5];
        v566[6] = v52[6];
        v566[5] = v57;
        v566[4] = v56;
        v566[3] = v55;
        outlined retain of Edge((uint64_t)v566);
        Graph.remove(_:)((uint64_t)v566);
        if (*(_QWORD *)&v566[0] != -7)
        {
          if ((*(_QWORD *)&v566[0] & 0x8000000000000000) != 0)
            goto LABEL_369;
          v58 = *((_QWORD *)v2 + 8);
          if (*(_QWORD *)&v566[0] >= *(_QWORD *)(v58 + 16))
          {
LABEL_370:
            __break(1u);
LABEL_371:
            __break(1u);
            goto LABEL_372;
          }
          v59 = (_QWORD *)(v58 + 48 * *(_QWORD *)&v566[0]);
          v60 = v59[4];
          v61 = v59[6];
          v379 = v59[7];
          v380 = v60;
          v62 = *(_QWORD *)(v61 + 16);
          if (v62)
          {
            v63 = v61 + 32;
            v64 = (_QWORD *)*((_QWORD *)v2 + 1);
            v66 = *((_QWORD *)v2 + 2);
            v67 = *(_OWORD *)((char *)v2 + 24);
            v68 = *((_QWORD *)v2 + 5);
            v69 = *((_BYTE *)v2 + 120);
            v70 = *((_QWORD *)v2 + 16);
            v71 = *((_BYTE *)v2 + 168);
            *(_QWORD *)v511 = *(_QWORD *)v2;
            v65 = *(_QWORD *)v511;
            *(_QWORD *)&v511[8] = v64;
            *(_OWORD *)&v511[24] = v67;
            *(_QWORD *)&v511[16] = v66;
            *(_QWORD *)&v511[40] = v68;
            v512 = v2[3];
            *(_QWORD *)v513 = v58;
            *(_OWORD *)&v513[8] = *(_OWORD *)((char *)v2 + 72);
            *(_OWORD *)&v513[24] = *(_OWORD *)((char *)v2 + 88);
            *(_OWORD *)&v513[40] = *(_OWORD *)((char *)v2 + 104);
            v513[56] = v69;
            *(_QWORD *)v514 = v70;
            *(_OWORD *)&v514[8] = *(_OWORD *)((char *)v2 + 136);
            *(_OWORD *)&v514[24] = *(_OWORD *)((char *)v2 + 152);
            v433 = v64 + 4;
            v514[40] = v71;
            swift_bridgeObjectRetain_n();
            outlined copy of NodePersonality(v60);
            v437 = (uint64_t *)(v65 + 16);
            v484 = v65 + 32;
            v424 = v66;
            v414 = v66 + 32;
            swift_bridgeObjectRetain();
            v72 = 0;
            v428 = v64;
            v393 = v64 + 7;
            v407 = v65;
            v410 = v62;
            v419 = v63;
            while (1)
            {
              v73 = v63 + 56 * v72;
              v74 = *(_QWORD *)v73;
              v75 = *(_QWORD *)(v73 + 8);
              v77 = *(_QWORD *)(v73 + 16);
              v76 = *(_QWORD *)(v73 + 24);
              v78 = *(_QWORD *)(v73 + 32);
              v79 = *(_BYTE *)(v73 + 40);
              v80 = *(_QWORD *)(v73 + 48);
              v563[0] = v74;
              v563[1] = v75;
              v474 = v72;
              v479 = v77;
              v563[2] = v77;
              v489 = v76;
              v563[3] = v76;
              v446 = v78;
              v451 = v80;
              v563[4] = v78;
              v457 = v79;
              v564 = v79;
              v565 = v80;
              if (v65)
              {
                Hasher.init(_seed:)();
                Hasher._combine(_:)(v74);
                v81 = Hasher._finalize()();
                v82 = *v437;
                v83 = 1 << *v437;
                v84 = v83 - 1;
                if (__OFSUB__(v83, 1))
                  goto LABEL_360;
                v85 = v84 & v81;
                v86 = _HashTable.UnsafeHandle._startIterator(bucket:)(v84 & v81, v437, v484);
                if (!v86)
                {
LABEL_131:
                  swift_retain();
                  swift_bridgeObjectRetain();
                  outlined retain of Graph((uint64_t)v511);
                  v104 = MEMORY[0x24BEE4AF8];
                  goto LABEL_132;
                }
                v89 = *(uint64_t *)(v65 + 24) >> 6;
                v90 = v89 + (v86 ^ v84);
                if (v90 >= v84)
                  v91 = (1 << v82) - 1;
                else
                  v91 = 0;
                v92 = v90 - v91;
                if (v433[v90 - v91] != v74)
                {
                  v105 = 0;
                  v106 = v82 & 0x3F;
                  v107 = __OFADD__(v106 << v106, 64);
                  v108 = (v106 << v106) + 126;
                  if ((v106 << v106) + 64 >= 1)
                    v108 = (v106 << v106) + 63;
                  v109 = v108 >> 6;
                  do
                  {
                    if (++v85 == v83)
                    {
                      if ((v105 & 1) != 0)
                        goto LABEL_373;
                      v85 = 0;
                      v105 = 1;
                    }
                    if (v88 >= v106)
                    {
                      v116 = __OFSUB__(v88, v106);
                      v88 -= v106;
                      if (v116)
                        goto LABEL_351;
                      v120 = v87 >> v106;
                      v121 = v87 & v84;
                      if ((v87 & v84) == 0)
                        goto LABEL_131;
                    }
                    else
                    {
                      v112 = (v85 * v106) >> 6;
                      if (v88)
                      {
                        if (v107)
                          goto LABEL_357;
                        if (v112 + 1 == v109)
                          v112 = 0;
                        else
                          ++v112;
                      }
                      v113 = v106 - v88;
                      if (__OFSUB__(v106, v88))
                        goto LABEL_352;
                      v114 = v112 == 2 && v106 == 5;
                      v115 = 32;
                      if (!v114)
                        v115 = 64;
                      v116 = __OFSUB__(v115, v113);
                      v117 = v115 - v113;
                      if (v116)
                      {
LABEL_353:
                        __break(1u);
LABEL_354:
                        __break(1u);
LABEL_355:
                        __break(1u);
LABEL_356:
                        __break(1u);
LABEL_357:
                        __break(1u);
                        goto LABEL_358;
                      }
                      v118 = *(_QWORD *)(v484 + 8 * v112);
                      v119 = (v118 << v88) | v87;
                      v120 = v118 >> v113;
                      v88 = v117;
                      v121 = v119 & v84;
                      if ((v119 & v84) == 0)
                        goto LABEL_131;
                    }
                    v110 = (v121 ^ v84) + v89;
                    if (v110 >= v84)
                      v111 = (1 << v82) - 1;
                    else
                      v111 = 0;
                    v92 = v110 - v111;
                    v87 = v120;
                  }
                  while (v433[v92] != v74);
                }
                if ((v92 & 0x8000000000000000) != 0)
                  goto LABEL_361;
              }
              else
              {
                v93 = v428[2];
                if (!v93)
                  goto LABEL_131;
                if (*v433 == v74)
                {
                  v92 = 0;
                }
                else
                {
                  if (v93 == 1)
                    goto LABEL_131;
                  if (v428[5] == v74)
                  {
                    v92 = 1;
                  }
                  else
                  {
                    if (v93 == 2)
                      goto LABEL_131;
                    if (v428[6] == v74)
                    {
                      v92 = 2;
                    }
                    else
                    {
                      v131 = 0;
                      v132 = v93 - 3;
                      do
                      {
                        if (v132 == v131)
                          goto LABEL_131;
                        v133 = v393[v131++];
                      }
                      while (v133 != v74);
                      v92 = v131 + 2;
                      if (v131 + 2 < 0)
                        goto LABEL_361;
                    }
                  }
                }
              }
              if (v92 >= *(_QWORD *)(v424 + 16))
                goto LABEL_364;
              v94 = (uint64_t *)(v414 + 48 * v92);
              v96 = *v94;
              v95 = v94[1];
              v97 = v94[2];
              v98 = *(_QWORD *)(v95 + 16);
              if (!*v94)
              {
                v468 = v75;
                swift_retain();
                swift_bridgeObjectRetain();
                outlined retain of Graph((uint64_t)v511);
                swift_retain();
                v397 = v97;
                swift_retain();
                if (!v98)
                {
LABEL_127:
                  swift_release();
                  swift_release();
                  v104 = MEMORY[0x24BEE4AF8];
                  v2 = v441;
                  v65 = v407;
                  v62 = v410;
                  v63 = v419;
                  goto LABEL_132;
                }
                v101 = 0;
                v122 = (_QWORD *)(v95 + 80);
                while (2)
                {
                  if (*(v122 - 6) == v74)
                  {
                    v123 = *(v122 - 4);
                    v124 = *(v122 - 3);
                    v462 = *(v122 - 2);
                    v125 = *((_BYTE *)v122 - 8);
                    v126 = *v122;
                    v127 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*(v122 - 5) + 128);
                    swift_retain();
                    swift_bridgeObjectRetain();
                    if ((v127(v468) & 1) != 0)
                    {
                      if (v123 == v479 && v124 == v489)
                      {
                        swift_bridgeObjectRelease();
                        swift_release();
LABEL_118:
                        if ((v125 & 1) != 0)
                        {
                          v129 = v457;
                          if (v126 != v451)
                            v129 = 0;
                          if ((v129 & 1) != 0)
                          {
LABEL_126:
                            v2 = v441;
                            v102 = v419;
                            v97 = v397;
                            goto LABEL_75;
                          }
                        }
                        else if ((v457 & 1) == 0 && v462 == v446 && v126 == v451)
                        {
                          goto LABEL_126;
                        }
                      }
                      else
                      {
                        v128 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        swift_bridgeObjectRelease();
                        swift_release();
                        if ((v128 & 1) != 0)
                          goto LABEL_118;
                      }
                    }
                    else
                    {
                      swift_bridgeObjectRelease();
                      swift_release();
                    }
                  }
                  v122 += 7;
                  if (v98 == ++v101)
                    goto LABEL_127;
                  continue;
                }
              }
              swift_retain();
              swift_bridgeObjectRetain();
              outlined retain of Graph((uint64_t)v511);
              swift_retain();
              swift_retain();
              swift_retain();
              v99 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v563, v95 + 32, v98, (_QWORD *)(v96 + 16), v96 + 32);
              if ((v100 & 1) != 0)
              {
                swift_release();
                swift_release();
                swift_release();
                v104 = MEMORY[0x24BEE4AF8];
                v65 = v407;
                v63 = v419;
              }
              else
              {
                v101 = v99;
                v102 = v419;
                if (v99 < 0)
                  goto LABEL_367;
LABEL_75:
                if (v101 >= *(_QWORD *)(v97 + 16))
                  goto LABEL_368;
                v103 = *(_QWORD *)(v97 + 16 * v101 + 40);
                swift_retain();
                swift_retain();
                swift_release();
                swift_release();
                swift_release();
                swift_retain();
                swift_bridgeObjectRetain();
                v104 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_nTm(v103, v563);
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
                v65 = v407;
                v63 = v102;
              }
              v62 = v410;
LABEL_132:
              outlined release of Graph((uint64_t)v511);
              v130 = *(_QWORD *)(v104 + 16);
              swift_bridgeObjectRelease();
              swift_release();
              swift_bridgeObjectRelease();
              if (v130)
              {
                swift_bridgeObjectRelease_n();
                outlined consume of NodePersonality(v380);
                swift_bridgeObjectRelease();
                i = v383;
                goto LABEL_338;
              }
              v72 = v474 + 1;
              if (v474 + 1 == v62)
              {
                swift_bridgeObjectRelease_n();
                goto LABEL_147;
              }
            }
          }
          swift_bridgeObjectRetain();
          outlined copy of NodePersonality(v60);
          swift_bridgeObjectRetain();
LABEL_147:
          v134 = swift_bridgeObjectRetain();
          v135 = specialized Sequence.compactMap<A>(_:)(v134, v2);
          swift_bridgeObjectRelease();
          v389 = *(_QWORD *)(v135 + 16);
          if (v389)
          {
            v388 = v135 + 32;
            swift_bridgeObjectRetain();
            for (j = 0; j != v389; ++j)
            {
              v391 = j;
              v137 = (__int128 *)(v388 + 112 * j);
              v138 = *v137;
              v139 = v137[1];
              v562[2] = v137[2];
              v562[1] = v139;
              v562[0] = v138;
              v140 = v137[3];
              v141 = v137[4];
              v142 = v137[5];
              v562[6] = v137[6];
              v562[5] = v142;
              v562[4] = v141;
              v562[3] = v140;
              outlined retain of Edge((uint64_t)v562);
              Graph.remove(_:)((uint64_t)v562);
              if (*(_QWORD *)&v562[0] != -7)
              {
                if ((*(_QWORD *)&v562[0] & 0x8000000000000000) != 0)
                  goto LABEL_362;
                v143 = *((_QWORD *)v2 + 8);
                if (*(_QWORD *)&v562[0] >= *(_QWORD *)(v143 + 16))
                {
LABEL_363:
                  __break(1u);
LABEL_364:
                  __break(1u);
LABEL_365:
                  __break(1u);
LABEL_366:
                  __break(1u);
LABEL_367:
                  __break(1u);
LABEL_368:
                  __break(1u);
LABEL_369:
                  __break(1u);
                  goto LABEL_370;
                }
                v144 = (_QWORD *)(v143 + 48 * *(_QWORD *)&v562[0]);
                v146 = v144[4];
                v145 = v144[5];
                v147 = v144[6];
                v384 = v144[7];
                v385 = *((_QWORD *)v2 + 8);
                v148 = *(_QWORD *)(v147 + 16);
                v387 = v146;
                v390 = v145;
                if (v148)
                {
                  v458 = v147 + 32;
                  v149 = (_QWORD *)*((_QWORD *)v2 + 1);
                  v151 = *((_QWORD *)v2 + 2);
                  v152 = *(_OWORD *)((char *)v2 + 24);
                  v153 = *((_QWORD *)v2 + 5);
                  v154 = *((_BYTE *)v2 + 120);
                  v155 = *((_QWORD *)v2 + 16);
                  v156 = *((_BYTE *)v2 + 168);
                  *(_QWORD *)v511 = *(_QWORD *)v2;
                  v150 = *(_QWORD *)v511;
                  *(_QWORD *)&v511[8] = v149;
                  *(_OWORD *)&v511[24] = v152;
                  *(_QWORD *)&v511[16] = v151;
                  *(_QWORD *)&v511[40] = v153;
                  v512 = v2[3];
                  *(_QWORD *)v513 = v143;
                  *(_OWORD *)&v513[8] = *(_OWORD *)((char *)v2 + 72);
                  *(_OWORD *)&v513[24] = *(_OWORD *)((char *)v2 + 88);
                  *(_OWORD *)&v513[40] = *(_OWORD *)((char *)v2 + 104);
                  v513[56] = v154;
                  *(_QWORD *)v514 = v155;
                  *(_OWORD *)&v514[8] = *(_OWORD *)((char *)v2 + 136);
                  *(_OWORD *)&v514[24] = *(_OWORD *)((char *)v2 + 152);
                  v157 = v149 + 4;
                  v514[40] = v156;
                  swift_bridgeObjectRetain_n();
                  outlined copy of NodePersonality(v146);
                  v158 = (_QWORD *)(v150 + 16);
                  v429 = v151;
                  v420 = v151 + 32;
                  v159 = v149 + 4;
                  swift_bridgeObjectRetain();
                  v425 = v149;
                  v394 = v149 + 7;
                  v160 = v150 + 32;
                  v161 = 0;
                  v402 = v157;
                  v405 = v148;
                  v438 = v150;
                  v411 = v150 + 32;
                  v415 = (_QWORD *)(v150 + 16);
                  while (1)
                  {
                    v162 = v458 + 56 * v161;
                    v163 = *(_QWORD *)v162;
                    v164 = *(_QWORD *)(v162 + 16);
                    v485 = *(_QWORD *)(v162 + 24);
                    v490 = *(_QWORD *)(v162 + 8);
                    v165 = *(_QWORD *)(v162 + 32);
                    v166 = *(_BYTE *)(v162 + 40);
                    v167 = *(_QWORD *)(v162 + 48);
                    v559[0] = v163;
                    v559[1] = v490;
                    v480 = v164;
                    v559[2] = v164;
                    v559[3] = v485;
                    v559[4] = v165;
                    v469 = v166;
                    v560 = v166;
                    v463 = v167;
                    v561 = v167;
                    if (v150)
                      break;
                    v187 = v425[2];
                    if (!v187)
                      goto LABEL_191;
                    if (*v159 == v163)
                    {
                      k = 0;
                    }
                    else
                    {
                      if (v187 == 1)
                        goto LABEL_191;
                      if (v425[5] == v163)
                      {
                        k = 1;
                      }
                      else
                      {
                        if (v187 == 2)
                          goto LABEL_191;
                        if (v425[6] != v163)
                        {
                          v196 = 0;
                          v197 = v187 - 3;
                          do
                          {
                            if (v197 == v196)
                              goto LABEL_191;
                            v198 = v394[v196++];
                          }
                          while (v198 != v163);
                          k = v196 + 2;
LABEL_201:
                          if ((k & 0x8000000000000000) != 0)
                            goto LABEL_349;
                          goto LABEL_202;
                        }
                        k = 2;
                      }
                    }
LABEL_202:
                    if (k >= *(_QWORD *)(v429 + 16))
                      goto LABEL_350;
                    v199 = (uint64_t *)(v420 + 48 * k);
                    v201 = *v199;
                    v200 = v199[1];
                    v202 = v199[2];
                    v203 = *(_QWORD *)(v200 + 16);
                    if (*v199)
                    {
                      swift_retain();
                      swift_bridgeObjectRetain();
                      outlined retain of Graph((uint64_t)v511);
                      swift_retain();
                      swift_retain();
                      swift_retain();
                      v204 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v559, v200 + 32, v203, (_QWORD *)(v201 + 16), v201 + 32);
                      if ((v205 & 1) != 0)
                      {
                        swift_release();
                        swift_release();
                        swift_release();
                        v150 = v438;
                        v2 = v441;
                        v160 = v411;
                        v158 = v415;
                        goto LABEL_234;
                      }
                      v206 = v204;
                      v452 = v202;
                      v150 = v438;
                      v2 = v441;
                      if ((v204 & 0x8000000000000000) == 0)
                        goto LABEL_206;
LABEL_358:
                      __break(1u);
LABEL_359:
                      __break(1u);
LABEL_360:
                      __break(1u);
LABEL_361:
                      __break(1u);
LABEL_362:
                      __break(1u);
                      goto LABEL_363;
                    }
                    v434 = v161;
                    swift_retain();
                    swift_bridgeObjectRetain();
                    outlined retain of Graph((uint64_t)v511);
                    swift_retain();
                    v452 = v202;
                    swift_retain();
                    if (!v203)
                    {
LABEL_232:
                      swift_release();
                      swift_release();
                      v150 = v438;
                      v2 = v441;
                      v159 = v402;
                      v148 = v405;
                      v160 = v411;
                      v158 = v415;
                      v161 = v434;
                      goto LABEL_234;
                    }
                    v233 = v200;
                    v399 = v165;
                    v206 = 0;
                    v234 = (_QWORD *)(v233 + 80);
                    while (1)
                    {
                      if (*(v234 - 6) != v163)
                        goto LABEL_216;
                      v235 = *(v234 - 4);
                      v236 = *(v234 - 3);
                      v475 = *(v234 - 2);
                      v237 = *((_BYTE *)v234 - 8);
                      v238 = *v234;
                      v239 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*(v234 - 5) + 128);
                      swift_retain();
                      swift_bridgeObjectRetain();
                      if ((v239(v490) & 1) == 0)
                      {
                        swift_bridgeObjectRelease();
                        swift_release();
                        goto LABEL_216;
                      }
                      if (v235 == v480 && v236 == v485)
                      {
                        swift_bridgeObjectRelease();
                        swift_release();
                      }
                      else
                      {
                        v240 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        swift_bridgeObjectRelease();
                        swift_release();
                        if ((v240 & 1) == 0)
                          goto LABEL_216;
                      }
                      if ((v237 & 1) != 0)
                        break;
                      if ((v469 & 1) == 0 && v475 == v399 && v238 == v463)
                        goto LABEL_231;
LABEL_216:
                      v234 += 7;
                      if (v203 == ++v206)
                        goto LABEL_232;
                    }
                    v241 = v469;
                    if (v238 != v463)
                      v241 = 0;
                    if ((v241 & 1) == 0)
                      goto LABEL_216;
LABEL_231:
                    v150 = v438;
                    v2 = v441;
                    v159 = v402;
                    v148 = v405;
                    v161 = v434;
LABEL_206:
                    if (v206 >= *(_QWORD *)(v452 + 16))
                      goto LABEL_359;
                    v207 = *(_QWORD *)(v452 + 16 * v206 + 40);
                    swift_retain();
                    swift_retain();
                    swift_release();
                    swift_release();
                    swift_release();
                    v208 = *(_QWORD *)(v207 + 16);
                    if (v208)
                    {
                      v510 = MEMORY[0x24BEE4AF8];
                      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v208, 0);
                      v209 = v510;
                      v210 = (_QWORD *)(v207 + 80);
                      v211 = v443;
                      do
                      {
                        v212 = *((_OWORD *)v210 - 2);
                        v213 = *(v210 - 2);
                        v214 = *((_BYTE *)v210 - 8);
                        v215 = *v210;
                        v493[0] = *((_OWORD *)v210 - 3);
                        v493[1] = v212;
                        v494 = v213;
                        v495 = v214;
                        v496 = v215;
                        closure #1 in Graph.edges(from:)((uint64_t *)v493, v559, (uint64_t)&v497);
                        v216 = v497;
                        v217 = v498;
                        v218 = v499;
                        v219 = v500;
                        v220 = v501;
                        v221 = v502;
                        v222 = v503;
                        v223 = v504;
                        v224 = v505;
                        v225 = v506;
                        v226 = v507;
                        v228 = *(_QWORD *)(v209 + 16);
                        v227 = *(_QWORD *)(v209 + 24);
                        v229 = v508;
                        v230 = v509;
                        v510 = v209;
                        if (v228 >= v227 >> 1)
                        {
                          v444 = v211;
                          v470 = v503;
                          v464 = v497;
                          v232 = v498;
                          v453 = v501;
                          v447 = v502;
                          v408 = v504;
                          v398 = v505;
                          v375 = v507;
                          v376 = v506;
                          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v227 > 1, v228 + 1, 1);
                          v226 = v375;
                          v225 = v376;
                          v224 = v398;
                          v223 = v408;
                          v221 = v447;
                          v220 = v453;
                          v217 = v232;
                          v216 = v464;
                          v222 = v470;
                          v211 = v444;
                          v209 = v510;
                        }
                        v210 += 7;
                        *(_QWORD *)(v209 + 16) = v228 + 1;
                        v231 = v209 + 112 * v228;
                        *(_QWORD *)(v231 + 32) = v216;
                        *(_QWORD *)(v231 + 40) = v217;
                        *(_QWORD *)(v231 + 48) = v218;
                        *(_QWORD *)(v231 + 56) = v219;
                        *(_QWORD *)(v231 + 64) = v220;
                        *(_BYTE *)(v231 + 72) = v221;
                        *(_OWORD *)(v231 + 80) = v222;
                        *(_QWORD *)(v231 + 96) = v223;
                        *(_QWORD *)(v231 + 104) = v224;
                        *(_QWORD *)(v231 + 112) = v225;
                        *(_QWORD *)(v231 + 120) = v226;
                        *(_BYTE *)(v231 + 128) = v229;
                        *(_QWORD *)(v231 + 136) = v230;
                        --v208;
                      }
                      while (v208);
                      v443 = v211;
                      swift_release();
                      swift_release();
                      outlined release of Graph((uint64_t)v511);
                      v150 = v438;
                      v2 = v441;
                      v159 = v402;
                      v148 = v405;
                      v160 = v411;
                      v158 = v415;
                    }
                    else
                    {
                      swift_release();
                      swift_release();
                      outlined release of Graph((uint64_t)v511);
                      v209 = MEMORY[0x24BEE4AF8];
                      v160 = v411;
                      v158 = v415;
                    }
LABEL_235:
                    v242 = *(_QWORD *)(v209 + 16);
                    swift_bridgeObjectRelease();
                    swift_release();
                    swift_bridgeObjectRelease();
                    if (v242)
                    {
                      swift_bridgeObjectRelease_n();
                      outlined consume of NodePersonality(v387);
                      swift_bridgeObjectRelease();
                      j = v391;
                      goto LABEL_334;
                    }
                    if (++v161 == v148)
                    {
                      swift_bridgeObjectRelease_n();
                      v145 = v390;
                      goto LABEL_241;
                    }
                  }
                  Hasher.init(_seed:)();
                  Hasher._combine(_:)(v163);
                  v168 = Hasher._finalize()();
                  v169 = 1 << *v158;
                  v116 = __OFSUB__(v169, 1);
                  v170 = v169 - 1;
                  if (v116)
                    goto LABEL_347;
                  v171 = *v158 & 0x3FLL;
                  v172 = (v170 & v168) * v171;
                  v173 = v172 >> 6;
                  v174 = v172 & 0x3F;
                  v175 = v174 + v171;
                  if (v175 < 0x41)
                  {
                    v189 = *(_QWORD *)(v160 + 8 * v173);
                    v184 = (v189 >> v174) & v170;
                    v190 = v173 == 2 && v171 == 5;
                    v191 = 32;
                    if (!v190)
                      v191 = 64;
                    v186 = v191 - v175;
                    v185 = v189 >> v175;
                    if (!v186)
                      v185 = 0;
                  }
                  else
                  {
                    if (__OFADD__(v171 << v171, 64))
                      goto LABEL_354;
                    v176 = *(_QWORD *)(v160 + 8 * v173);
                    v177 = (v171 << v171) + 126;
                    if ((v171 << v171) + 64 >= 1)
                      v177 = (v171 << v171) + 63;
                    v178 = v177 >> 6;
                    if (v173 + 1 == v178)
                      v179 = 0;
                    else
                      v179 = v173 + 1;
                    v180 = *(_QWORD *)(v160 + 8 * v179);
                    v181 = v171 - (64 - v174);
                    v182 = v179 == v178 - 1 && v171 == 5;
                    v183 = 32;
                    if (!v182)
                      v183 = 64;
                    v184 = ((v180 << (64 - v174)) | (v176 >> v174)) & v170;
                    v185 = v180 >> v181;
                    v186 = v183 - v181;
                  }
                  v497 = v158;
                  v498 = v160;
                  v499 = v170 & v168;
                  v500 = v184;
                  v501 = v185;
                  v502 = v186;
                  LOBYTE(v503) = 0;
                  if (!v184)
                  {
LABEL_191:
                    swift_retain();
                    swift_bridgeObjectRetain();
                    outlined retain of Graph((uint64_t)v511);
                    v2 = v441;
LABEL_234:
                    outlined release of Graph((uint64_t)v511);
                    v209 = MEMORY[0x24BEE4AF8];
                    goto LABEL_235;
                  }
                  v192 = (v184 ^ v170) + (*(uint64_t *)(v150 + 24) >> 6);
                  if (v192 < v170)
                    v170 = 0;
                  for (k = v192 - v170; v159[k] != v163; k = v194 - v195)
                  {
                    _HashTable.BucketIterator.advance()();
                    if (!v500)
                      goto LABEL_191;
                    v193 = -1 << *v497;
                    v194 = (v193 ^ ~v500) + ((uint64_t)v497[1] >> 6);
                    if (v194 >= ~v193)
                      v195 = ~v193;
                    else
                      v195 = 0;
                  }
                  goto LABEL_201;
                }
                swift_bridgeObjectRetain();
                outlined copy of NodePersonality(v146);
                swift_bridgeObjectRetain();
LABEL_241:
                v471 = *(_QWORD *)(v145 + 16);
                if (v471)
                {
                  v243 = v145 + 32;
                  v245 = (_QWORD *)*((_QWORD *)v2 + 1);
                  v246 = *((_QWORD *)v2 + 2);
                  v247 = *(_OWORD *)((char *)v2 + 24);
                  v248 = *((_QWORD *)v2 + 5);
                  v249 = *((_BYTE *)v2 + 120);
                  v250 = *((_QWORD *)v2 + 16);
                  v251 = *((_BYTE *)v2 + 168);
                  *(_QWORD *)v511 = *(_QWORD *)v2;
                  v244 = *(_QWORD *)v511;
                  *(_QWORD *)&v511[8] = v245;
                  *(_OWORD *)&v511[24] = v247;
                  *(_QWORD *)&v511[16] = v246;
                  *(_QWORD *)&v511[40] = v248;
                  v512 = v2[3];
                  *(_QWORD *)v513 = v385;
                  *(_OWORD *)&v513[8] = *(_OWORD *)((char *)v2 + 72);
                  *(_OWORD *)&v513[24] = *(_OWORD *)((char *)v2 + 88);
                  *(_OWORD *)&v513[40] = *(_OWORD *)((char *)v2 + 104);
                  v513[56] = v249;
                  *(_QWORD *)v514 = v250;
                  *(_OWORD *)&v514[8] = *(_OWORD *)((char *)v2 + 136);
                  *(_OWORD *)&v514[24] = *(_OWORD *)((char *)v2 + 152);
                  v252 = (_QWORD *)(*(_QWORD *)v511 + 16);
                  v454 = *(_QWORD *)v511 + 32;
                  v459 = v245 + 4;
                  v430 = v246;
                  v421 = v246 + 32;
                  v514[40] = v251;
                  swift_bridgeObjectRetain();
                  v253 = v244;
                  v254 = 0;
                  v426 = v245;
                  v386 = v245 + 7;
                  v409 = (_QWORD *)MEMORY[0x24BEE4AF8];
                  v412 = v244;
                  v416 = v145 + 32;
                  v448 = v252;
                  while (1)
                  {
                    v255 = v243 + 56 * v254;
                    v257 = *(_QWORD *)v255;
                    v256 = *(_QWORD *)(v255 + 8);
                    v258 = *(_QWORD *)(v255 + 16);
                    v259 = *(_QWORD *)(v255 + 24);
                    v260 = *(_QWORD *)(v255 + 32);
                    v261 = *(_BYTE *)(v255 + 40);
                    v262 = *(_QWORD *)(v255 + 48);
                    v556[0] = v257;
                    v486 = v260;
                    v491 = v256;
                    v556[1] = v256;
                    v556[2] = v258;
                    v556[3] = v259;
                    v556[4] = v260;
                    v481 = v261;
                    v557 = v261;
                    v476 = v262;
                    v558 = v262;
                    if (v253)
                    {
                      v263 = v2;
                      v264 = v253;
                      v465 = v258;
                      v265 = v259;
                      Hasher.init(_seed:)();
                      Hasher._combine(_:)(v257);
                      v266 = Hasher._finalize()();
                      v267 = 1 << *v252;
                      v268 = v267 - 1;
                      if (__OFSUB__(v267, 1))
                      {
                        __break(1u);
LABEL_344:
                        __break(1u);
LABEL_345:
                        __break(1u);
LABEL_346:
                        __break(1u);
LABEL_347:
                        __break(1u);
LABEL_348:
                        __break(1u);
LABEL_349:
                        __break(1u);
LABEL_350:
                        __break(1u);
LABEL_351:
                        __break(1u);
LABEL_352:
                        __break(1u);
                        goto LABEL_353;
                      }
                      v269 = v268 & v266;
                      v270 = _HashTable.UnsafeHandle._startIterator(bucket:)(v268 & v266, v252, v454);
                      v497 = v252;
                      v498 = v454;
                      v499 = v269;
                      v500 = v270;
                      v501 = v271;
                      v502 = v272;
                      LOBYTE(v503) = 0;
                      if (!v270)
                      {
                        v253 = v264;
LABEL_282:
                        v2 = v263;
                        goto LABEL_245;
                      }
                      v273 = (v270 ^ v268) + (*(uint64_t *)(v264 + 24) >> 6);
                      if (v273 >= v268)
                        v274 = v268;
                      else
                        v274 = 0;
                      v275 = v273 - v274;
                      if (v459[v275] != v257)
                      {
                        while (1)
                        {
                          _HashTable.BucketIterator.advance()();
                          if (!v500)
                            break;
                          v276 = -1 << *v497;
                          v277 = (v276 ^ ~v500) + ((uint64_t)v497[1] >> 6);
                          if (v277 >= ~v276)
                            v278 = ~v276;
                          else
                            v278 = 0;
                          v275 = v277 - v278;
                          if (v459[v275] == v257)
                            goto LABEL_258;
                        }
                        v253 = v264;
                        goto LABEL_282;
                      }
LABEL_258:
                      v259 = v265;
                      v2 = v263;
                      if ((v275 & 0x8000000000000000) != 0)
                        goto LABEL_344;
                    }
                    else
                    {
                      v279 = v426[2];
                      if (!v279)
                        goto LABEL_245;
                      v465 = v258;
                      if (*v459 == v257)
                      {
                        v275 = 0;
                      }
                      else
                      {
                        if (v279 == 1)
                          goto LABEL_245;
                        if (v426[5] == v257)
                        {
                          v275 = 1;
                        }
                        else
                        {
                          if (v279 == 2)
                            goto LABEL_245;
                          if (v426[6] == v257)
                          {
                            v275 = 2;
                          }
                          else
                          {
                            v298 = 0;
                            v299 = v279 - 3;
                            do
                            {
                              if (v299 == v298)
                                goto LABEL_245;
                              v300 = v386[v298++];
                            }
                            while (v300 != v257);
                            v275 = v298 + 2;
                            if (v298 + 2 < 0)
                              goto LABEL_344;
                          }
                        }
                      }
                    }
                    if (v275 >= *(_QWORD *)(v430 + 16))
                      goto LABEL_348;
                    v280 = (_QWORD *)(v421 + 48 * v275);
                    v281 = v280[3];
                    v282 = v280[4];
                    v283 = v280[5];
                    v284 = *(_QWORD *)(v282 + 16);
                    if (v281)
                    {
                      v435 = v257;
                      swift_bridgeObjectRetain_n();
                      swift_retain_n();
                      outlined retain of Graph((uint64_t)v511);
                      swift_retain();
                      swift_retain();
                      swift_retain();
                      v2 = v441;
                      v285 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v556, v282 + 32, v284, (_QWORD *)(v281 + 16), v281 + 32);
                      v252 = v448;
                      if ((v286 & 1) == 0)
                      {
                        v439 = v259;
                        if ((v285 & 0x8000000000000000) != 0)
                          goto LABEL_355;
LABEL_271:
                        if (v285 >= *(_QWORD *)(v283 + 16))
                          goto LABEL_356;
                        v288 = (_QWORD *)(v283 + 56 * v285);
                        v290 = v288[4];
                        v289 = v288[5];
                        v291 = v288[10];
                        v400 = v288[7];
                        v403 = v288[6];
                        v395 = v288[8];
                        v406 = v288[9];
                        outlined copy of Output?(v290, v289);
                        swift_bridgeObjectRelease();
                        swift_release();
                        swift_release();
                        swift_release();
                        swift_release();
                        outlined release of Graph((uint64_t)v511);
                        if (v289)
                        {
                          v292 = v409;
                          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                          v253 = v412;
                          v243 = v416;
                          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                          {
                            v301 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v409[2] + 1, 1, v409);
                            v253 = v412;
                            v292 = v301;
                          }
                          v294 = v292;
                          v295 = v292[2];
                          v409 = v294;
                          v296 = v294[3];
                          if (v295 >= v296 >> 1)
                          {
                            v377 = v254;
                            v302 = v2;
                            v303 = v253;
                            v304 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v296 > 1), v295 + 1, 1, v409);
                            v253 = v303;
                            v2 = v302;
                            v254 = v377;
                            v409 = v304;
                          }
                          v409[2] = v295 + 1;
                          v297 = &v409[14 * v295];
                          v297[4] = v290;
                          v297[5] = v289;
                          v297[6] = v403;
                          v297[7] = v400;
                          v297[8] = v395;
                          *((_BYTE *)v297 + 72) = v406 & 1;
                          v297[10] = v291;
                          v297[11] = v435;
                          v297[12] = v491;
                          v297[13] = v465;
                          v297[14] = v439;
                          v297[15] = v486;
                          *((_BYTE *)v297 + 128) = v481;
                          v297[17] = v476;
                        }
                        else
                        {
                          swift_bridgeObjectRelease();
                          swift_release();
                          v253 = v412;
                          v243 = v416;
                        }
                        v252 = v448;
                        goto LABEL_245;
                      }
                    }
                    else
                    {
                      v439 = v259;
                      swift_bridgeObjectRetain_n();
                      swift_retain_n();
                      outlined retain of Graph((uint64_t)v511);
                      swift_retain();
                      swift_retain();
                      v285 = specialized Collection<>.firstIndex(of:)(v556, v282 + 32, v284);
                      if ((v287 & 1) == 0)
                      {
                        v435 = v257;
                        if ((v285 & 0x8000000000000000) != 0)
                          goto LABEL_355;
                        goto LABEL_271;
                      }
                      v252 = v448;
                    }
                    swift_bridgeObjectRelease();
                    swift_release();
                    swift_release();
                    swift_release();
                    swift_release();
                    outlined release of Graph((uint64_t)v511);
                    swift_bridgeObjectRelease();
                    swift_release();
                    v253 = v412;
                    v243 = v416;
LABEL_245:
                    if (++v254 == v471)
                    {
                      swift_bridgeObjectRelease();
                      v305 = v409;
                      goto LABEL_295;
                    }
                  }
                }
                v305 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_295:
                v440 = v305[2];
                if (v440)
                {
                  v436 = v305 + 4;
                  swift_bridgeObjectRetain();
                  v306 = 0;
                  while (1)
                  {
                    v307 = (__int128 *)&v436[14 * v306];
                    v308 = *v307;
                    v309 = v307[1];
                    v555[2] = v307[2];
                    v555[1] = v309;
                    v555[0] = v308;
                    v310 = v307[3];
                    v311 = v307[4];
                    v312 = v307[5];
                    v555[6] = v307[6];
                    v555[5] = v312;
                    v555[4] = v311;
                    v555[3] = v310;
                    Graph.remove(_:)((uint64_t)v555);
                    if (*(_QWORD *)&v555[0] != -7)
                      break;
LABEL_299:
                    if (++v306 == v440)
                    {
                      swift_bridgeObjectRelease_n();
                      goto LABEL_333;
                    }
                  }
                  if ((*(_QWORD *)&v555[0] & 0x8000000000000000) != 0)
                    goto LABEL_345;
                  v313 = *((_QWORD *)v2 + 8);
                  if (*(_QWORD *)&v555[0] >= *(_QWORD *)(v313 + 16))
                    goto LABEL_346;
                  v314 = (_QWORD *)(v313 + 48 * *(_QWORD *)&v555[0]);
                  v316 = v314[4];
                  v315 = v314[5];
                  v317 = v314[6];
                  v422 = v314[7];
                  v318 = *(_QWORD *)(v317 + 16);
                  v431 = v316;
                  if (v318)
                  {
                    v319 = *(_QWORD *)v2;
                    v320 = *(_OWORD *)((char *)v2 + 24);
                    v321 = *((_QWORD *)v2 + 5);
                    v322 = *((_BYTE *)v2 + 120);
                    v323 = *((_QWORD *)v2 + 16);
                    v324 = *((_BYTE *)v2 + 168);
                    *(_OWORD *)&v511[8] = *(_OWORD *)((char *)v2 + 8);
                    *(_OWORD *)&v511[24] = v320;
                    *(_QWORD *)v511 = v319;
                    *(_QWORD *)&v511[40] = v321;
                    v512 = v2[3];
                    *(_QWORD *)v513 = v313;
                    *(_OWORD *)&v513[8] = *(_OWORD *)((char *)v2 + 72);
                    *(_OWORD *)&v513[24] = *(_OWORD *)((char *)v2 + 88);
                    *(_OWORD *)&v513[40] = *(_OWORD *)((char *)v2 + 104);
                    v513[56] = v322;
                    *(_QWORD *)v514 = v323;
                    *(_OWORD *)&v514[8] = *(_OWORD *)((char *)v2 + 136);
                    *(_OWORD *)&v514[24] = *(_OWORD *)((char *)v2 + 152);
                    v514[40] = v324;
                    v546 = *(_OWORD *)&v511[16];
                    v545 = *(_OWORD *)v511;
                    v553 = *(_OWORD *)v514;
                    v554[0] = *(_OWORD *)&v514[16];
                    *(_OWORD *)((char *)v554 + 9) = *(_OWORD *)&v514[25];
                    v552 = *(_OWORD *)&v513[48];
                    v551 = *(_OWORD *)&v513[32];
                    v550 = *(_OWORD *)&v513[16];
                    v549 = *(_OWORD *)v513;
                    v547 = *(_OWORD *)&v511[32];
                    v548 = v512;
                    swift_bridgeObjectRetain_n();
                    outlined copy of NodePersonality(v316);
                    v325 = v315;
                    swift_bridgeObjectRetain();
                    v326 = (_QWORD *)(v317 + 80);
                    do
                    {
                      v327 = *v326;
                      v328 = *((_BYTE *)v326 - 8);
                      v330 = *(v326 - 3);
                      v329 = *(v326 - 2);
                      v332 = *(v326 - 5);
                      v331 = *(v326 - 4);
                      v542[0] = *(v326 - 6);
                      v542[1] = v332;
                      v542[2] = v331;
                      v542[3] = v330;
                      v542[4] = v329;
                      v543 = v328;
                      v544 = v327;
                      swift_retain();
                      swift_bridgeObjectRetain();
                      outlined retain of Graph((uint64_t)v511);
                      v333 = Graph.edges(from:)((uint64_t)v542);
                      outlined release of Graph((uint64_t)v511);
                      v334 = *(_QWORD *)(v333 + 16);
                      swift_bridgeObjectRelease();
                      swift_release();
                      swift_bridgeObjectRelease();
                      if (v334)
                      {
                        swift_bridgeObjectRelease_n();
                        outlined consume of NodePersonality(v431);
                        swift_bridgeObjectRelease();
                        v2 = v441;
                        goto LABEL_298;
                      }
                      v326 += 7;
                      --v318;
                    }
                    while (v318);
                    swift_bridgeObjectRelease_n();
                    v2 = v441;
                    v315 = v325;
                  }
                  else
                  {
                    swift_bridgeObjectRetain();
                    outlined copy of NodePersonality(v316);
                    swift_bridgeObjectRetain();
                  }
                  v417 = v306;
                  v335 = *(_QWORD *)(v315 + 16);
                  if (v335)
                  {
                    v336 = *(_QWORD *)v2;
                    v337 = *(_OWORD *)((char *)v2 + 24);
                    v338 = *((_QWORD *)v2 + 5);
                    v339 = *((_BYTE *)v2 + 120);
                    v340 = *((_QWORD *)v2 + 16);
                    v341 = *((_BYTE *)v2 + 168);
                    *(_OWORD *)&v511[8] = *(_OWORD *)((char *)v2 + 8);
                    *(_OWORD *)&v511[24] = v337;
                    *(_QWORD *)v511 = v336;
                    *(_QWORD *)&v511[40] = v338;
                    v512 = v2[3];
                    *(_QWORD *)v513 = v313;
                    *(_OWORD *)&v513[8] = *(_OWORD *)((char *)v2 + 72);
                    *(_OWORD *)&v513[24] = *(_OWORD *)((char *)v2 + 88);
                    *(_OWORD *)&v513[40] = *(_OWORD *)((char *)v2 + 104);
                    v513[56] = v339;
                    *(_QWORD *)v514 = v340;
                    *(_OWORD *)&v514[8] = *(_OWORD *)((char *)v2 + 136);
                    *(_OWORD *)&v514[24] = *(_OWORD *)((char *)v2 + 152);
                    v514[40] = v341;
                    v533 = *(_OWORD *)&v511[16];
                    v532 = *(_OWORD *)v511;
                    v540 = *(_OWORD *)v514;
                    v541[0] = *(_OWORD *)&v514[16];
                    *(_OWORD *)((char *)v541 + 9) = *(_OWORD *)&v514[25];
                    v539 = *(_OWORD *)&v513[48];
                    v538 = *(_OWORD *)&v513[32];
                    v537 = *(_OWORD *)&v513[16];
                    v536 = *(_OWORD *)v513;
                    v534 = *(_OWORD *)&v511[32];
                    v535 = v512;
                    swift_bridgeObjectRetain();
                    v342 = (_QWORD *)(v315 + 80);
                    v343 = (_QWORD *)MEMORY[0x24BEE4AF8];
                    do
                    {
                      v344 = v343;
                      v345 = *(v342 - 5);
                      v346 = *(v342 - 4);
                      v347 = *(v342 - 3);
                      v348 = *(v342 - 2);
                      v349 = *((_BYTE *)v342 - 8);
                      v350 = *v342;
                      v529[0] = *(v342 - 6);
                      v529[1] = v345;
                      v529[2] = v346;
                      v529[3] = v347;
                      v529[4] = v348;
                      v530 = v349;
                      v531 = v350;
                      swift_retain();
                      swift_bridgeObjectRetain();
                      outlined retain of Graph((uint64_t)v511);
                      Graph.edge(to:)((uint64_t)v529, v515);
                      v351 = v515[0];
                      v352 = v515[1];
                      v353 = v515[2];
                      v354 = v515[3];
                      v449 = v515[4];
                      v455 = v516;
                      v482 = v518;
                      v487 = v517;
                      v477 = v519;
                      v466 = v521;
                      v472 = v520;
                      v460 = v522;
                      v492 = v523;
                      v355 = v524;
                      outlined release of Graph((uint64_t)v511);
                      swift_bridgeObjectRelease();
                      swift_release();
                      outlined init with take of MetalFunctionNode?((uint64_t)v515, (uint64_t)v525, &demangling cache variable for type metadata for Edge?);
                      if (v526)
                      {
                        v343 = v344;
                        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                          v343 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v344[2] + 1, 1, v344);
                        v357 = v343[2];
                        v356 = v343[3];
                        if (v357 >= v356 >> 1)
                          v343 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v356 > 1), v357 + 1, 1, v343);
                        v343[2] = v357 + 1;
                        v358 = &v343[14 * v357];
                        v358[4] = v351;
                        v358[5] = v352;
                        v358[6] = v353;
                        v358[7] = v354;
                        v358[8] = v449;
                        *((_BYTE *)v358 + 72) = v455 & 1;
                        v358[10] = v487;
                        v358[11] = v482;
                        v358[12] = v477;
                        v358[13] = v472;
                        v358[14] = v466;
                        v358[15] = v460;
                        *((_BYTE *)v358 + 128) = v492 & 1;
                        v358[17] = v355;
                      }
                      else
                      {
                        v343 = v344;
                      }
                      v342 += 7;
                      --v335;
                    }
                    while (v335);
                    swift_bridgeObjectRelease();
                    v2 = v441;
                    v359 = v343[2];
                    if (!v359)
                    {
LABEL_330:
                      swift_bridgeObjectRelease();
                      specialized Graph.remove(_:)(v422);
                      outlined consume of NodePersonality(v431);
                      swift_bridgeObjectRelease();
                      v306 = v417;
LABEL_298:
                      swift_bridgeObjectRelease();
                      goto LABEL_299;
                    }
                  }
                  else
                  {
                    v343 = (_QWORD *)MEMORY[0x24BEE4AF8];
                    v359 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
                    if (!v359)
                      goto LABEL_330;
                  }
                  swift_bridgeObjectRetain();
                  v360 = 4;
                  do
                  {
                    v363 = *(_OWORD *)&v343[v360];
                    v364 = *(_OWORD *)&v343[v360 + 4];
                    v528[1] = *(_OWORD *)&v343[v360 + 2];
                    v528[2] = v364;
                    v528[0] = v363;
                    v365 = *(_OWORD *)&v343[v360 + 6];
                    v366 = *(_OWORD *)&v343[v360 + 8];
                    v367 = *(_OWORD *)&v343[v360 + 10];
                    v528[6] = *(_OWORD *)&v343[v360 + 12];
                    v528[5] = v367;
                    v528[4] = v366;
                    v528[3] = v365;
                    Graph.remove(_:)((uint64_t)v528);
                    v368 = *(_QWORD *)&v528[0];
                    if (*(_QWORD *)&v528[0] != -7)
                    {
                      v369 = *((_QWORD *)v2 + 8);
                      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(*(_QWORD *)&v528[0], 1, v369);
                      v370 = v369 + 48 * v368;
                      v371 = *(_QWORD *)(v370 + 32);
                      v372 = *(_QWORD *)(v370 + 56);
                      outlined copy of NodePersonality(v371);
                      swift_bridgeObjectRetain();
                      v373 = swift_bridgeObjectRetain();
                      if ((specialized Sequence.allSatisfy(_:)(v373, v2) & 1) != 0)
                      {
                        v361 = swift_bridgeObjectRetain();
                        v362 = specialized Sequence.compactMap<A>(_:)(v361, v2);
                        swift_bridgeObjectRelease();
                        specialized Sequence.forEach(_:)(v362, v2);
                        swift_bridgeObjectRelease();
                        specialized Graph.remove(_:)(v372);
                      }
                      outlined consume of NodePersonality(v371);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                    }
                    v360 += 14;
                    --v359;
                  }
                  while (v359);
                  swift_bridgeObjectRelease();
                  goto LABEL_330;
                }
                swift_bridgeObjectRelease();
LABEL_333:
                specialized Graph.remove(_:)(v384);
                outlined consume of NodePersonality(v387);
                swift_bridgeObjectRelease();
                j = v391;
LABEL_334:
                swift_bridgeObjectRelease();
              }
              outlined release of Edge((uint64_t)v562);
            }
            swift_bridgeObjectRelease_n();
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          specialized Graph.remove(_:)(v379);
          outlined consume of NodePersonality(v380);
          swift_bridgeObjectRelease();
          i = v383;
LABEL_338:
          swift_bridgeObjectRelease();
        }
        outlined release of Edge((uint64_t)v566);
      }
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    return specialized Graph.remove(_:)(*(_QWORD *)(v378 + 24));
  }
  v6 = v4 + 32;
  v7 = v1[9];
  v553 = v1[8];
  v554[0] = v7;
  *(_OWORD *)((char *)v554 + 9) = *(_OWORD *)((char *)v1 + 153);
  v8 = v1[5];
  v549 = v1[4];
  v550 = v8;
  v9 = v1[6];
  v552 = v1[7];
  v551 = v9;
  v10 = v1[1];
  v545 = *v1;
  v546 = v10;
  v11 = v1[2];
  v13 = (_QWORD *)*((_QWORD *)&v545 + 1);
  v12 = v545;
  v445 = (_QWORD *)(v545 + 16);
  v450 = (_QWORD *)(*((_QWORD *)&v545 + 1) + 32);
  v442 = v545 + 32;
  v432 = v546;
  v418 = v546 + 32;
  v548 = v1[3];
  v547 = v11;
  swift_bridgeObjectRetain_n();
  v14 = 0;
  v392 = *((_QWORD *)&v545 + 1) + 56;
  v396 = (_QWORD *)*((_QWORD *)&v545 + 1);
  v423 = v545;
  v427 = v5;
  v413 = v6;
  while (1)
  {
    v15 = v6 + 56 * v14;
    v17 = *(_QWORD *)v15;
    v16 = *(_QWORD *)(v15 + 8);
    v19 = *(_QWORD *)(v15 + 16);
    v18 = *(_QWORD *)(v15 + 24);
    v20 = *(_QWORD *)(v15 + 32);
    v21 = *(_BYTE *)(v15 + 40);
    v22 = *(_QWORD *)(v15 + 48);
    v567[0] = v17;
    v567[1] = v16;
    v483 = v18;
    v488 = v16;
    v478 = v19;
    v567[2] = v19;
    v567[3] = v18;
    v567[4] = v20;
    v467 = v21;
    v568 = v21;
    v461 = v22;
    v569 = v22;
    v23 = v13[2];
    if (v12)
    {
      v24 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v17, (uint64_t)v450, v23, v445, v442);
      if ((v25 & 1) != 0)
        goto LABEL_14;
      if ((v24 & 0x8000000000000000) != 0)
        goto LABEL_365;
    }
    else
    {
      if (!v23)
        goto LABEL_14;
      if (*v450 == v17)
      {
        v24 = 0;
      }
      else
      {
        if (v23 == 1)
          goto LABEL_14;
        if (v13[5] == v17)
        {
          v24 = 1;
        }
        else
        {
          if (v23 == 2)
          {
LABEL_14:
            swift_retain();
            swift_bridgeObjectRetain();
            outlined retain of Graph((uint64_t)&v545);
            v26 = MEMORY[0x24BEE4AF8];
            goto LABEL_48;
          }
          if (v13[6] == v17)
          {
            v24 = 2;
          }
          else
          {
            v27 = 0;
            do
            {
              if (v23 - 3 == v27)
                goto LABEL_14;
              v28 = *(_QWORD *)(v392 + 8 * v27++);
            }
            while (v28 != v17);
            v24 = v27 + 2;
            if (v27 + 2 < 0)
              goto LABEL_365;
          }
        }
      }
    }
    if (v24 >= *(_QWORD *)(v432 + 16))
      goto LABEL_366;
    v456 = v14;
    v29 = (uint64_t *)(v418 + 48 * v24);
    v31 = *v29;
    v30 = v29[1];
    v32 = v29[2];
    v33 = *(_QWORD *)(v30 + 16);
    if (!*v29)
      break;
    v34 = *(_QWORD *)(v30 + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    outlined retain of Graph((uint64_t)&v545);
    swift_retain();
    swift_retain();
    swift_retain();
    v35 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v567, v30 + 32, v34, (_QWORD *)(v31 + 16), v31 + 32);
    if ((v36 & 1) == 0)
    {
      v37 = v35;
      v12 = v423;
      v5 = v427;
      if ((v35 & 0x8000000000000000) == 0)
        goto LABEL_25;
      goto LABEL_371;
    }
    swift_release();
    swift_release();
    swift_release();
    v26 = MEMORY[0x24BEE4AF8];
    v2 = v441;
    v6 = v413;
    v12 = v423;
    v5 = v427;
LABEL_48:
    outlined release of Graph((uint64_t)&v545);
    v48 = *(_QWORD *)(v26 + 16);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    if (v48)
    {
      outlined release of [Input]((uint64_t)&v527);
      return outlined release of [Input]((uint64_t)&v527);
    }
    if (++v14 == v5)
    {
      outlined release of [Input]((uint64_t)&v527);
      outlined release of [Input]((uint64_t)&v527);
      goto LABEL_51;
    }
  }
  swift_retain();
  swift_bridgeObjectRetain();
  outlined retain of Graph((uint64_t)&v545);
  swift_retain();
  v404 = v32;
  swift_retain();
  if (!v33)
  {
LABEL_46:
    swift_release();
    swift_release();
    v26 = MEMORY[0x24BEE4AF8];
    v2 = v441;
    v12 = v423;
    v5 = v427;
    v6 = v413;
    v13 = v396;
    v14 = v456;
    goto LABEL_48;
  }
  v39 = v30;
  v401 = v20;
  v37 = 0;
  v40 = (_QWORD *)(v39 + 80);
  while (1)
  {
    if (*(v40 - 6) != v17)
      goto LABEL_30;
    v41 = *(v40 - 4);
    v42 = *(v40 - 3);
    v473 = *(v40 - 2);
    v43 = *((_BYTE *)v40 - 8);
    v44 = *v40;
    v45 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*(v40 - 5) + 128);
    swift_retain();
    swift_bridgeObjectRetain();
    if ((v45(v488) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_30;
    }
    if (v41 == v478 && v42 == v483)
    {
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_release();
      if ((v46 & 1) == 0)
        goto LABEL_30;
    }
    if ((v43 & 1) != 0)
      break;
    if ((v467 & 1) == 0 && v473 == v401 && v44 == v461)
      goto LABEL_45;
LABEL_30:
    v40 += 7;
    if (v33 == ++v37)
      goto LABEL_46;
  }
  v47 = v467;
  if (v44 != v461)
    v47 = 0;
  if ((v47 & 1) == 0)
    goto LABEL_30;
LABEL_45:
  v12 = v423;
  v5 = v427;
  v13 = v396;
  v32 = v404;
LABEL_25:
  if (v37 < *(_QWORD *)(v32 + 16))
  {
    v38 = *(_QWORD *)(v32 + 16 * v37 + 40);
    swift_retain();
    swift_retain();
    swift_release();
    swift_release();
    swift_release();
    swift_retain();
    swift_bridgeObjectRetain();
    v26 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_nTm(v38, v567);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    v2 = v441;
    v14 = v456;
    v6 = v413;
    goto LABEL_48;
  }
LABEL_372:
  __break(1u);
LABEL_373:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence.flatMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;

  v3 = MEMORY[0x24BEE4AF8];
  v35 = MEMORY[0x24BEE4AF8];
  v22 = *(_QWORD *)(a3 + 16);
  if (!v22)
    return v3;
  v19 = a3 + 32;
  v20 = a2 + 32;
  v21 = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_retain();
  result = swift_retain();
  v5 = 0;
  while (v5 != v21)
  {
    v6 = (uint64_t *)(v20 + 56 * v5);
    v7 = v6[1];
    v8 = v6[3];
    v9 = *(_QWORD *)(v19 + 16 * v5 + 8);
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
    {
      v27 = v6[2];
      v28 = *v6;
      v26 = v6[4];
      v25 = *((_BYTE *)v6 + 40);
      v23 = v5;
      v24 = v6[6];
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      swift_retain();
      swift_retain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
      v11 = v3;
      v12 = (_QWORD *)(v9 + 80);
      do
      {
        v13 = *(v12 - 5);
        v14 = *(v12 - 3);
        v32 = *(v12 - 4);
        v33 = *(v12 - 6);
        v31 = *(v12 - 2);
        v30 = *((_BYTE *)v12 - 8);
        v29 = *v12;
        v15 = v8;
        v17 = *(_QWORD *)(v11 + 16);
        v16 = *(_QWORD *)(v11 + 24);
        v34 = v17 + 1;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        if (v17 >= v16 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v34, 1);
        v12 += 7;
        *(_QWORD *)(v11 + 16) = v34;
        v18 = v11 + 112 * v17;
        *(_QWORD *)(v18 + 32) = v28;
        *(_QWORD *)(v18 + 40) = v7;
        *(_QWORD *)(v18 + 48) = v27;
        *(_QWORD *)(v18 + 56) = v15;
        *(_QWORD *)(v18 + 64) = v26;
        *(_BYTE *)(v18 + 72) = v25;
        *(_QWORD *)(v18 + 80) = v24;
        *(_QWORD *)(v18 + 88) = v33;
        *(_QWORD *)(v18 + 96) = v13;
        *(_QWORD *)(v18 + 104) = v32;
        *(_QWORD *)(v18 + 112) = v14;
        *(_QWORD *)(v18 + 120) = v31;
        *(_BYTE *)(v18 + 128) = v30;
        *(_QWORD *)(v18 + 136) = v29;
        --v10;
        v8 = v15;
      }
      while (v10);
      swift_bridgeObjectRelease();
      swift_release();
      v3 = MEMORY[0x24BEE4AF8];
      v5 = v23;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      v11 = v3;
    }
    ++v5;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    result = specialized Array.append<A>(contentsOf:)(v11);
    if (v5 == v22)
    {
      swift_release();
      swift_release();
      swift_release();
      return v35;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = *(_QWORD *)(a4 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  v25 = a4 + 32;
  swift_retain();
  swift_retain();
  swift_retain();
  result = swift_retain();
  v8 = 0;
  v9 = (uint64_t *)(a2 + 80);
  v26 = v5;
  while (1)
  {
    if (v8 == v5)
    {
      v30 = 0;
      v31 = 0;
      v27 = 0;
      v32 = 0;
      v33 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v28 = v5;
      if (!v6)
        goto LABEL_22;
      goto LABEL_10;
    }
    if (v8 >= v5)
      break;
    v14 = v25 + 56 * v8;
    v15 = *(_QWORD *)(v14 + 48);
    v16 = *(unsigned __int8 *)(v14 + 40);
    v17 = *(_QWORD *)(v14 + 24);
    v18 = *(_QWORD *)(v14 + 32);
    v10 = *(_QWORD *)(v14 + 8);
    v33 = *(_QWORD *)(v14 + 16);
    v11 = *(_QWORD *)v14;
    swift_retain();
    v32 = v17;
    swift_bridgeObjectRetain();
    if (!v6)
    {
      if (v10)
      {
LABEL_27:
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v23 = v11;
        v24 = v10;
      }
      else
      {
        v12 = 0;
        v13 = 0;
LABEL_22:
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        if (!v12)
          return 1;
        v23 = v13;
        v24 = v12;
      }
      outlined consume of Input?(v23, v24);
      return 0;
    }
    v30 = v15;
    v31 = v16;
    v27 = v18;
    v28 = v8 + 1;
LABEL_10:
    v29 = *v9;
    v19 = *((unsigned __int8 *)v9 - 8);
    v20 = *(v9 - 3);
    v21 = *(v9 - 2);
    v12 = *(v9 - 5);
    v22 = *(v9 - 4);
    v13 = *(v9 - 6);
    swift_retain();
    swift_bridgeObjectRetain();
    if (!v10)
      goto LABEL_22;
    if (!v12)
      goto LABEL_27;
    if (v11 != v13
      || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 128))(v12) & 1) == 0
      || (v33 != v22 || v32 != v20) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
LABEL_20:
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
LABEL_21:
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      return 0;
    }
    if (v31)
    {
      if (!v19)
        goto LABEL_20;
    }
    else if ((v19 & 1) != 0 || v27 != v21)
    {
      goto LABEL_20;
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    result = swift_release();
    --v6;
    v9 += 7;
    v5 = v26;
    v8 = v28;
    if (v30 != v29)
      goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(uint64_t a1, int64_t a2, char a3, uint64_t a4)
{
  return specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))specialized closure #1 in static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

{
  return specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))specialized closure #1 in static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

{
  return specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle.fill<A>(uncheckedUniqueElements:));
}

{
  return specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))specialized closure #1 in static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

{
  return specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))specialized closure #1 in static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

{
  return specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle.fill<A>(uncheckedUniqueElements:));
}

uint64_t specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(uint64_t result, int64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;

  v4 = result;
  v5 = *(_QWORD *)(result + 16);
  if ((unint64_t)v5 >= 0x10)
  {
    v6 = ceil((double)v5 / 0.75);
    if ((~*(_QWORD *)&v6 & 0x7FF0000000000000) != 0)
    {
      if (v6 > -9.22337204e18)
      {
        if (v6 < 9.22337204e18)
        {
          if (v5 + 1 > (uint64_t)v6)
            v7 = v5 + 1;
          else
            v7 = (uint64_t)v6;
          v8 = 64 - __clz(v7 - 1);
          goto LABEL_10;
        }
LABEL_24:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_24;
  }
  v8 = 0;
LABEL_10:
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if ((a3 & 1) == 0)
    v8 = v9;
  if (v8 <= a4)
    v10 = a4;
  else
    v10 = v8;
  if (v10 < 5)
    return 0;
  v11 = specialized _HashTable.init(scale:reservedScale:)(v10, a4);
  specialized _HashTable.UnsafeHandle.fill<A>(uncheckedUniqueElements:)(v4, (_QWORD *)(v11 + 16), v11 + 32);
  return v11;
}

uint64_t specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(uint64_t result, int64_t a2, char a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;

  v6 = result;
  v7 = 0;
  v8 = *(_QWORD *)(result + 16);
  if ((unint64_t)v8 >= 0x10)
  {
    v9 = ceil((double)v8 / 0.75);
    if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) != 0)
    {
      if (v9 > -9.22337204e18)
      {
        if (v9 < 9.22337204e18)
        {
          if (v8 + 1 > (uint64_t)v9)
            v10 = v8 + 1;
          else
            v10 = (uint64_t)v9;
          v7 = 64 - __clz(v10 - 1);
          goto LABEL_9;
        }
LABEL_23:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_23;
  }
LABEL_9:
  if (v7 <= a2)
    v11 = a2;
  else
    v11 = v7;
  if ((a3 & 1) != 0)
    v11 = v7;
  if (v11 <= a4)
    v12 = a4;
  else
    v12 = v11;
  if (v12 < 5)
    return 0;
  v13 = specialized _HashTable.init(scale:reservedScale:)(v12, a4);
  a5(v13 + 16, v13 + 32, v6);
  return v13;
}

{
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;

  v6 = result;
  v7 = *(_QWORD *)(result + 16);
  if ((unint64_t)v7 >= 0x10)
  {
    v8 = ceil((double)v7 / 0.75);
    if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) != 0)
    {
      if (v8 > -9.22337204e18)
      {
        if (v8 < 9.22337204e18)
        {
          if (v7 + 1 > (uint64_t)v8)
            v9 = v7 + 1;
          else
            v9 = (uint64_t)v8;
          v10 = 64 - __clz(v9 - 1);
          goto LABEL_10;
        }
LABEL_24:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_24;
  }
  v10 = 0;
LABEL_10:
  if (v10 <= a2)
    v11 = a2;
  else
    v11 = v10;
  if ((a3 & 1) == 0)
    v10 = v11;
  if (v10 <= a4)
    v12 = a4;
  else
    v12 = v10;
  if (v12 < 5)
    return 0;
  v13 = specialized _HashTable.init(scale:reservedScale:)(v12, a4);
  a5(v6, v13 + 16, v13 + 32);
  return v13;
}

uint64_t specialized OrderedSet.append<A>(contentsOf:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  char v24;
  char v25;
  int v26;
  uint64_t result;
  int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;

  v32 = *(_QWORD *)(a2 + 16);
  if (v32)
  {
    v31 = a2 + 32;
    swift_retain();
    swift_retain();
    v2 = 0;
    while (1)
    {
      v3 = (uint64_t *)(v31 + 56 * v2);
      v5 = *v3;
      v4 = v3[1];
      v7 = v3[2];
      v6 = v3[3];
      v8 = v3[4];
      v9 = *((unsigned __int8 *)v3 + 40);
      v10 = v3[6];
      *(_QWORD *)&v39 = *v3;
      *((_QWORD *)&v39 + 1) = v4;
      v40 = v7;
      v41 = v6;
      v42 = v8;
      v43 = v9;
      v44 = v10;
      v11 = *v34;
      v12 = v34[1];
      v13 = *(_QWORD *)(v12 + 16);
      v36 = v2;
      v37 = v6;
      v38 = v4;
      if (*v34)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v39, v12 + 32, v13, (_QWORD *)(v11 + 16), v11 + 32);
        v15 = v14;
        v13 = v16;
        swift_release();
        if ((v15 & 1) == 0)
          goto LABEL_5;
        goto LABEL_4;
      }
      if (v13)
        break;
      swift_retain();
      swift_bridgeObjectRetain();
LABEL_4:
      specialized OrderedSet._appendNew(_:in:)(&v39, v13);
LABEL_5:
      v2 = v36 + 1;
      swift_bridgeObjectRelease();
      swift_release();
      if (v36 + 1 == v32)
      {
        swift_release();
        return swift_release();
      }
    }
    v33 = v10;
    v30 = v8;
    v35 = v7;
    v28 = v9 ^ 1;
    v29 = v9;
    swift_retain();
    swift_bridgeObjectRetain();
    v17 = (_QWORD *)(v12 + 80);
    while (1)
    {
      if (*(v17 - 6) == v5)
      {
        v18 = *(v17 - 4);
        v20 = *(v17 - 3);
        v19 = *(v17 - 2);
        v21 = *((_BYTE *)v17 - 8);
        v22 = *v17;
        v23 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*(v17 - 5) + 128);
        swift_retain();
        swift_bridgeObjectRetain();
        if ((v23(v38) & 1) != 0)
        {
          if (v18 == v35 && v20 == v37)
          {
            swift_bridgeObjectRelease();
            swift_release();
          }
          else
          {
            v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_release();
            if ((v24 & 1) == 0)
              goto LABEL_12;
          }
          if ((v21 & 1) != 0)
          {
            v25 = v29;
            if (v22 != v33)
              v25 = 0;
            if ((v25 & 1) != 0)
              goto LABEL_5;
          }
          else
          {
            v26 = v28;
            if (v19 != v30)
              v26 = 0;
            if (v26 == 1 && v22 == v33)
              goto LABEL_5;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_release();
        }
      }
LABEL_12:
      v17 += 7;
      if (!--v13)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t specialized OrderedSet.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return specialized OrderedSet.append<A>(contentsOf:)(a1, a2, a3, a4, (void (*)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:), (void (*)(_OWORD *, uint64_t))specialized OrderedSet._appendNew(_:in:));
}

{
  return specialized OrderedSet.append<A>(contentsOf:)(a1, a2, a3, a4, (void (*)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:), (void (*)(_OWORD *, uint64_t))specialized OrderedSet._appendNew(_:in:));
}

uint64_t specialized OrderedSet.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t), void (*a6)(_OWORD *, uint64_t))
{
  int64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  char v27;
  char v28;
  int v29;
  int v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD v41[2];
  __int128 v42;
  uint64_t v43;
  _OWORD v44[2];

  v6 = a4 >> 1;
  if (a4 >> 1 != a3)
  {
    v7 = a3;
    result = swift_unknownObjectRetain();
    v35 = v6;
    while (1)
    {
      if (v7 >= v6)
      {
        __break(1u);
        return result;
      }
      v39 = v7;
      v10 = a2 + 56 * v7;
      v11 = *(_OWORD *)(v10 + 16);
      v41[0] = *(_OWORD *)v10;
      v41[1] = v11;
      v42 = *(_OWORD *)(v10 + 32);
      v43 = *(_QWORD *)(v10 + 48);
      v44[0] = v11;
      v12 = *v38;
      v13 = v38[1];
      v14 = *(_QWORD *)(v13 + 16);
      v40 = *((_QWORD *)&v41[0] + 1);
      if (*v38)
      {
        swift_retain();
        outlined retain of String((uint64_t)v44);
        swift_retain();
        a5(v41, v13 + 32, v14, v12 + 16, v12 + 32);
        v16 = v15;
        v9 = v17;
        swift_release();
        if ((v16 & 1) == 0)
          goto LABEL_6;
        goto LABEL_5;
      }
      if (v14)
        break;
      swift_retain();
      outlined retain of String((uint64_t)v44);
LABEL_4:
      v9 = 0;
LABEL_5:
      a6(v41, v9);
LABEL_6:
      v7 = v39 + 1;
      swift_release();
      result = outlined release of String((uint64_t)v44);
      v6 = v35;
      if (v39 + 1 == v35)
        return swift_unknownObjectRelease();
    }
    v18 = v44[0];
    v19 = *(_QWORD *)&v41[0];
    swift_retain();
    outlined retain of String((uint64_t)v44);
    v33 = v42;
    v37 = v43;
    v34 = BYTE8(v42);
    v32 = BYTE8(v42) ^ 1;
    v20 = (_QWORD *)(v13 + 80);
    while (1)
    {
      if (*(v20 - 6) == v19)
      {
        v21 = *(v20 - 4);
        v22 = *(v20 - 3);
        v23 = *(v20 - 2);
        v24 = *((_BYTE *)v20 - 8);
        v25 = *v20;
        v26 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*(v20 - 5) + 128);
        swift_retain();
        swift_bridgeObjectRetain();
        if ((v26(v40) & 1) != 0)
        {
          if (__PAIR128__(v22, v21) == v18)
          {
            swift_bridgeObjectRelease();
            swift_release();
          }
          else
          {
            v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_release();
            if ((v27 & 1) == 0)
              goto LABEL_14;
          }
          if ((v24 & 1) != 0)
          {
            v28 = v34;
            if (v25 != v37)
              v28 = 0;
            if ((v28 & 1) != 0)
              goto LABEL_6;
          }
          else
          {
            v29 = v32;
            if (v23 != v33)
              v29 = 0;
            if (v29 == 1 && v25 == v37)
              goto LABEL_6;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_release();
        }
      }
LABEL_14:
      v20 += 7;
      if (!--v14)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t specialized OrderedSet.append<A>(contentsOf:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;

  v5 = a4 >> 1;
  if (a4 >> 1 == a3)
    return result;
  v6 = a3;
  swift_unknownObjectRetain();
  while (1)
  {
    if (v6 >= v5)
      goto LABEL_64;
    v8 = *(_QWORD *)(a2 + 8 * v6);
    v10 = *v4;
    v9 = (_QWORD *)v4[1];
    v11 = v9 + 4;
    if (*v4)
      break;
    v39 = v9[2];
    if (v39)
    {
      if (*v11 == v8)
        goto LABEL_5;
      if (v39 != 1)
      {
        if (v9[5] == v8)
          goto LABEL_5;
        if (v39 != 2)
        {
          if (v9[6] == v8)
            goto LABEL_5;
          if (v39 != 3)
          {
            if (v9[7] == v8)
              goto LABEL_5;
            v40 = v39 - 4;
            v41 = v9 + 8;
            while (v40)
            {
              v42 = *v41++;
              --v40;
              if (v42 == v8)
                goto LABEL_5;
            }
          }
        }
      }
    }
    v7 = 0;
LABEL_4:
    specialized OrderedSet._appendNew(_:in:)(v8, v7);
LABEL_5:
    if (++v6 == v5)
      return swift_unknownObjectRelease();
  }
  v12 = *(_QWORD *)(v10 + 16);
  v13 = *(_QWORD *)(a2 + 8 * v6);
  v14 = static Hasher._hash(seed:_:)();
  v15 = (1 << v12) - 1;
  if (__OFSUB__(1 << v12, 1))
    goto LABEL_65;
  v7 = v15 & v14;
  v16 = _HashTable.UnsafeHandle._startIterator(bucket:)(v15 & v14, (_QWORD *)(v10 + 16), v10 + 32);
  if (!v16)
  {
    v8 = v13;
    goto LABEL_4;
  }
  v19 = *(uint64_t *)(v10 + 24) >> 6;
  v20 = v19 + (v16 ^ v15);
  if (v20 >= v15)
    v21 = (1 << v12) - 1;
  else
    v21 = 0;
  if (v11[v20 - v21] == v13)
    goto LABEL_5;
  v8 = v13;
  v22 = 0;
  v23 = v12 & 0x3F;
  v24 = __OFADD__(v23 << v23, 64);
  v25 = (v23 << v23) + 126;
  if ((v23 << v23) + 64 >= 1)
    v25 = (v23 << v23) + 63;
  v26 = v25 >> 6;
  while (1)
  {
    if (++v7 == 1 << v12)
    {
      if ((v22 & 1) != 0)
        goto LABEL_66;
      v7 = 0;
      v22 = 1;
    }
    if (v18 >= v23)
      break;
    v27 = (v7 * v23) >> 6;
    if (v18)
    {
      if (v24)
        goto LABEL_63;
      if (v27 + 1 == v26)
        v27 = 0;
      else
        ++v27;
    }
    v28 = v23 - v18;
    if (__OFSUB__(v23, v18))
      goto LABEL_61;
    if (v27 == 2 && v23 == 5)
      v30 = 32;
    else
      v30 = 64;
    v31 = __OFSUB__(v30, v28);
    v32 = v30 - v28;
    if (v31)
      goto LABEL_62;
    v33 = *(_QWORD *)(v10 + 32 + 8 * v27);
    v34 = (v33 << v18) | v17;
    v35 = v33 >> v28;
    v18 = v32;
    v36 = v34 & v15;
    if ((v34 & v15) == 0)
      goto LABEL_4;
LABEL_41:
    v37 = (v36 ^ v15) + v19;
    if (v37 >= v15)
      v38 = (1 << v12) - 1;
    else
      v38 = 0;
    v17 = v35;
    if (v11[v37 - v38] == v13)
      goto LABEL_5;
  }
  v31 = __OFSUB__(v18, v23);
  v18 -= v23;
  if (!v31)
  {
    v35 = v17 >> v23;
    v36 = v17 & v15;
    if ((v17 & v15) == 0)
      goto LABEL_4;
    goto LABEL_41;
  }
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized OrderedSet.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  specialized OrderedSet.append<A>(contentsOf:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for SGEdge, (void (*)(void *, Swift::Int))specialized OrderedSet._appendNew(_:in:));
}

{
  specialized OrderedSet.append<A>(contentsOf:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for SGNode, (void (*)(void *, Swift::Int))specialized OrderedSet._appendNew(_:in:));
}

void specialized OrderedSet.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(_QWORD), void (*a6)(void *, Swift::Int))
{
  uint64_t *v6;
  int64_t v7;
  uint64_t *v8;
  char v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  _QWORD *v15;
  id v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  id v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  id v44;
  char v45;
  void *v46;
  void *v47;
  id v48;
  id v49;
  char v50;
  id v51;
  id v52;
  char v53;
  id v54;
  char v55;
  id v56;
  char v57;
  void **v58;
  void *v59;
  id v60;
  char v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  Swift::Int v65;
  _QWORD *v66;
  id v67;
  Swift::Int v68;
  uint64_t v69;
  unint64_t v70;
  Swift::Int v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  id v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  id v94;
  char v95;
  void *v96;
  void *v97;
  id v98;
  id v99;
  char v100;
  id v101;
  id v102;
  char v103;
  id v104;
  char v105;
  id v106;
  char v107;
  void **v108;
  void *v109;
  id v110;
  char v111;
  uint64_t *v112;
  void *v113;
  void *v114;
  unint64_t v116;
  uint64_t v119;
  uint64_t v120;
  void **v121;
  void **v122;

  v7 = a4 >> 1;
  if (a4 >> 1 == a3)
    return;
  v8 = v6;
  v9 = a4;
  v10 = a3;
  v112 = v6;
  v116 = a4 >> 1;
  swift_unknownObjectRetain();
  if ((v9 & 1) == 0)
  {
    while (1)
    {
      if (v10 >= v7)
        goto LABEL_123;
      v11 = *(void **)(a2 + 8 * v10);
      v13 = *v8;
      v12 = v8[1];
      v121 = (void **)(v12 + 32);
      if (*v8)
      {
        v15 = (_QWORD *)(v13 + 16);
        v14 = *(_QWORD *)(v13 + 16);
        v16 = v11;
        swift_retain();
        v17 = NSObject._rawHashValue(seed:)(v14);
        v18 = 1 << *(_QWORD *)(v13 + 16);
        v19 = v18 - 1;
        if (__OFSUB__(v18, 1))
          goto LABEL_127;
        v113 = v11;
        v20 = v19 & v17;
        v119 = v10;
        v21 = _HashTable.UnsafeHandle._startIterator(bucket:)(v19 & v17, (_QWORD *)(v13 + 16), v13 + 32);
        if (v21)
        {
          v24 = v22;
          v25 = v23;
          v26 = (v21 ^ v19) + (*(uint64_t *)(v13 + 24) >> 6);
          if (v26 >= v19)
            v27 = v19;
          else
            v27 = 0;
          v28 = v26 - v27;
          a5(0);
          v29 = v121[v28];
          LOBYTE(v28) = static NSObject.== infix(_:_:)();

          if ((v28 & 1) == 0)
          {
            v30 = 0;
            do
            {
              ++v20;
              v31 = *v15 & 0x3FLL;
              v32 = 1 << *v15;
              if (v20 == v32)
              {
                if ((v30 & 1) != 0)
                  goto LABEL_129;
                v20 = 0;
                v30 = 1;
              }
              if (v25 >= v31)
              {
                v38 = __OFSUB__(v25, v31);
                v25 -= v31;
                if (v38)
                {
                  __break(1u);
                  goto LABEL_118;
                }
                v41 = (v32 - 1) & v24;
                v24 >>= v31;
                if (!v41)
                  goto LABEL_48;
              }
              else
              {
                v33 = (v20 * v31) >> 6;
                if (v25)
                {
                  if (__OFADD__(v31 << v31, 64))
                    goto LABEL_125;
                  v34 = (v31 << v31) + 126;
                  if ((v31 << v31) + 64 >= 1)
                    v34 = (v31 << v31) + 63;
                  if (v33 + 1 == v34 >> 6)
                    v33 = 0;
                  else
                    ++v33;
                }
                v35 = v31 - v25;
                if (__OFSUB__(v31, v25))
                  goto LABEL_119;
                v36 = v33 == 2 && v31 == 5;
                v37 = 64;
                if (v36)
                  v37 = 32;
                v38 = __OFSUB__(v37, v35);
                v39 = v37 - v35;
                if (v38)
                  goto LABEL_121;
                v40 = *(_QWORD *)(v13 + 32 + 8 * v33);
                v41 = ((v40 << v25) | v24) & (v32 - 1);
                v24 = v40 >> v35;
                v25 = v39;
                if (!v41)
                {
LABEL_48:
                  v8 = v112;
                  goto LABEL_49;
                }
              }
              v42 = v32 - 1;
              v43 = (v41 ^ v42) + (*(uint64_t *)(v13 + 24) >> 6);
              if (v43 < v42)
                v42 = 0;
              v44 = v121[v43 - v42];
              v45 = static NSObject.== infix(_:_:)();

            }
            while ((v45 & 1) == 0);
          }

          swift_release();
          v8 = v112;
          v10 = v119;
          v7 = v116;
          goto LABEL_5;
        }
LABEL_49:
        swift_release();
        v10 = v119;
        v7 = v116;
        v11 = v113;
        goto LABEL_50;
      }
      v20 = *(_QWORD *)(v12 + 16);
      if (!v20)
        break;
      a5(0);
      v46 = *v121;
      v47 = v11;
      v48 = v11;
      v49 = v46;
      v50 = static NSObject.== infix(_:_:)();

      if ((v50 & 1) == 0)
      {
        if (v20 == 1)
          goto LABEL_46;
        v52 = *(id *)(v12 + 40);
        v53 = static NSObject.== infix(_:_:)();

        if ((v53 & 1) == 0)
        {
          if (v20 == 2)
            goto LABEL_46;
          v54 = *(id *)(v12 + 48);
          v55 = static NSObject.== infix(_:_:)();

          if ((v55 & 1) == 0)
          {
            if (v20 == 3)
            {
LABEL_46:
              v20 = 0;
              goto LABEL_47;
            }
            v56 = *(id *)(v12 + 56);
            v57 = static NSObject.== infix(_:_:)();

            if ((v57 & 1) == 0)
            {
              v20 -= 4;
              v58 = (void **)(v12 + 64);
              while (v20)
              {
                v59 = *v58++;
                v60 = v59;
                v61 = static NSObject.== infix(_:_:)();

                --v20;
                if ((v61 & 1) != 0)
                  goto LABEL_43;
              }
LABEL_47:
              v11 = v47;
LABEL_50:
              a6(v11, v20);

              goto LABEL_5;
            }
          }
        }
      }
LABEL_43:

LABEL_5:
      if (++v10 == v7)
        goto LABEL_116;
    }
    v51 = v11;
    goto LABEL_50;
  }
  while (1)
  {
    if (v10 >= v7)
      goto LABEL_124;
    v62 = *(void **)(a2 + 8 * v10);
    v64 = *v8;
    v63 = v8[1];
    v122 = (void **)(v63 + 32);
    if (!*v8)
    {
      v71 = *(_QWORD *)(v63 + 16);
      if (!v71)
      {
        v101 = v62;
LABEL_106:
        a6(v62, v71);

        goto LABEL_61;
      }
      a5(0);
      v96 = *v122;
      v97 = v62;
      v98 = v62;
      v99 = v96;
      v100 = static NSObject.== infix(_:_:)();

      if ((v100 & 1) == 0)
      {
        if (v71 == 1)
          goto LABEL_102;
        v102 = *(id *)(v63 + 40);
        v103 = static NSObject.== infix(_:_:)();

        if ((v103 & 1) == 0)
        {
          if (v71 == 2)
            goto LABEL_102;
          v104 = *(id *)(v63 + 48);
          v105 = static NSObject.== infix(_:_:)();

          if ((v105 & 1) == 0)
          {
            if (v71 == 3)
            {
LABEL_102:
              v71 = 0;
LABEL_103:
              v62 = v97;
              goto LABEL_106;
            }
            v106 = *(id *)(v63 + 56);
            v107 = static NSObject.== infix(_:_:)();

            if ((v107 & 1) == 0)
            {
              v71 -= 4;
              v108 = (void **)(v63 + 64);
              while (v71)
              {
                v109 = *v108++;
                v110 = v109;
                v111 = static NSObject.== infix(_:_:)();

                --v71;
                if ((v111 & 1) != 0)
                  goto LABEL_99;
              }
              goto LABEL_103;
            }
          }
        }
      }
LABEL_99:

      goto LABEL_61;
    }
    v66 = (_QWORD *)(v64 + 16);
    v65 = *(_QWORD *)(v64 + 16);
    v67 = v62;
    swift_retain();
    v68 = NSObject._rawHashValue(seed:)(v65);
    v69 = 1 << *(_QWORD *)(v64 + 16);
    v70 = v69 - 1;
    if (__OFSUB__(v69, 1))
      goto LABEL_128;
    v114 = v62;
    v71 = v70 & v68;
    v120 = v10;
    v72 = _HashTable.UnsafeHandle._startIterator(bucket:)(v70 & v68, (_QWORD *)(v64 + 16), v64 + 32);
    if (!v72)
    {
LABEL_105:
      swift_release();
      v10 = v120;
      v7 = v116;
      v62 = v114;
      goto LABEL_106;
    }
    v75 = v73;
    v76 = v74;
    v77 = (v72 ^ v70) + (*(uint64_t *)(v64 + 24) >> 6);
    v78 = v77 >= v70 ? v70 : 0;
    v79 = v77 - v78;
    a5(0);
    v80 = v122[v79];
    LOBYTE(v79) = static NSObject.== infix(_:_:)();

    if ((v79 & 1) == 0)
      break;
LABEL_60:

    swift_release();
    v8 = v112;
    v10 = v120;
    v7 = v116;
LABEL_61:
    if (++v10 == v7)
    {
LABEL_116:
      swift_unknownObjectRelease();
      return;
    }
  }
  v81 = 0;
  while (1)
  {
    ++v71;
    v82 = *v66 & 0x3FLL;
    v83 = 1 << *v66;
    if (v71 == v83)
    {
      if ((v81 & 1) != 0)
        goto LABEL_129;
      v71 = 0;
      v81 = 1;
    }
    if (v76 >= v82)
      break;
    v84 = (v71 * v82) >> 6;
    if (v76)
    {
      if (__OFADD__(v82 << v82, 64))
        goto LABEL_126;
      v85 = (v82 << v82) + 126;
      if ((v82 << v82) + 64 >= 1)
        v85 = (v82 << v82) + 63;
      if (v84 + 1 == v85 >> 6)
        v84 = 0;
      else
        ++v84;
    }
    v86 = v82 - v76;
    if (__OFSUB__(v82, v76))
      goto LABEL_120;
    v87 = v84 == 2 && v82 == 5;
    v88 = 64;
    if (v87)
      v88 = 32;
    v38 = __OFSUB__(v88, v86);
    v89 = v88 - v86;
    if (v38)
      goto LABEL_122;
    v90 = *(_QWORD *)(v64 + 32 + 8 * v84);
    v91 = ((v90 << v76) | v75) & (v83 - 1);
    v75 = v90 >> v86;
    v76 = v89;
    if (!v91)
      goto LABEL_104;
LABEL_93:
    v92 = v83 - 1;
    v93 = (v91 ^ v92) + (*(uint64_t *)(v64 + 24) >> 6);
    if (v93 < v92)
      v92 = 0;
    v94 = v122[v93 - v92];
    v95 = static NSObject.== infix(_:_:)();

    if ((v95 & 1) != 0)
      goto LABEL_60;
  }
  v38 = __OFSUB__(v76, v82);
  v76 -= v82;
  if (!v38)
  {
    v91 = (v83 - 1) & v75;
    v75 >>= v82;
    if (!v91)
    {
LABEL_104:
      v8 = v112;
      goto LABEL_105;
    }
    goto LABEL_93;
  }
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  __break(1u);
LABEL_126:
  __break(1u);
LABEL_127:
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized OrderedDictionary<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::UInt v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::UInt v20;

  v7 = *(_QWORD *)(a4 + 16);
  Hasher._combine(_:)(v7);
  v20 = v7;
  if (v7)
  {
    v18 = a3 + 32;
    v19 = *(_QWORD *)(a3 + 16);
    swift_retain();
    swift_retain();
    v8 = a4;
    swift_retain();
    v9 = 0;
    v10 = 0;
    while (v19 != v10)
    {
      v11 = *(_QWORD *)(v18 + 8 * v10++);
      v12 = *(_QWORD *)(v8 + v9 + 64);
      v13 = *(_QWORD *)(v8 + v9 + 72);
      v14 = *(_QWORD *)(v8 + v9 + 48);
      v15 = *(_QWORD *)(v8 + v9 + 56);
      v16 = *(_QWORD *)(v8 + v9 + 32);
      v17 = *(_QWORD *)(v8 + v9 + 40);
      Hasher._combine(_:)(v11);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      specialized OrderedDictionary<>.hash(into:)(a1, v16, v17, v14);
      swift_release();
      swift_release();
      swift_release();
      swift_retain();
      swift_retain();
      swift_retain();
      specialized OrderedDictionary<>.hash(into:)(a1, v15, v12, v13);
      swift_release();
      swift_release();
      swift_release();
      swift_release_n();
      swift_release_n();
      swift_release_n();
      v9 += 48;
      if (v20 == v10)
      {
        swift_release();
        swift_release();
        swift_release();
        return;
      }
    }
    __break(1u);
  }
}

{
  Swift::UInt v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt v11;
  uint64_t v12;
  Swift::UInt v13;
  uint64_t v14;
  Swift::UInt v15;
  Swift::UInt v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  Swift::UInt v20;
  int v21;
  Swift::UInt v22;
  uint64_t v23;
  void (*v24)(uint64_t);
  Swift::UInt v25;

  v7 = *(_QWORD *)(a4 + 16);
  Hasher._combine(_:)(v7);
  if (v7)
  {
    v8 = *(_QWORD *)(a3 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    v9 = 0;
    v18 = a4 + 80;
    v19 = a3;
    while (v8)
    {
      v25 = v7;
      v22 = *(_QWORD *)(a3 + v9 + 80);
      v23 = v9;
      v21 = *(unsigned __int8 *)(a3 + v9 + 72);
      v10 = *(_QWORD *)(a3 + v9 + 40);
      v20 = *(_QWORD *)(a3 + v9 + 64);
      v11 = *(_QWORD *)(v18 + v9 - 48);
      v12 = *(_QWORD *)(v18 + v9 - 40);
      v13 = *(_QWORD *)(v18 + v9 - 16);
      v14 = *(_QWORD *)(v18 + v9 - 8);
      v15 = *(_QWORD *)(v18 + v9);
      Hasher._combine(_:)(*(_QWORD *)(a3 + v9 + 32));
      v24 = *(void (**)(uint64_t))(*(_QWORD *)v10 + 120);
      swift_retain_n();
      swift_bridgeObjectRetain();
      outlined copy of Output?(v11, v12);
      v24(a1);
      swift_release();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v21 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v20);
      }
      Hasher._combine(_:)(v22);
      if (v12)
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v11);
        v16 = v13;
        v17 = *(void (**)(uint64_t))(*(_QWORD *)v12 + 120);
        swift_retain();
        outlined copy of Output?(v11, v12);
        v17(a1);
        swift_release();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if ((v14 & 1) != 0)
        {
          Hasher._combine(_:)(0);
        }
        else
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v16);
        }
        Hasher._combine(_:)(v15);
        swift_bridgeObjectRelease();
        swift_release();
        outlined consume of Input?(v11, v12);
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      swift_bridgeObjectRelease();
      swift_release();
      --v8;
      v9 = v23 + 56;
      v7 = v25 - 1;
      a3 = v19;
      if (v25 == 1)
      {
        swift_release();
        swift_release();
        swift_release();
        return;
      }
    }
    __break(1u);
  }
}

{
  Swift::UInt v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  Swift::UInt v16;
  uint64_t v17;
  Swift::UInt *v18;
  uint64_t v19;
  int v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  Swift::UInt v29;
  Swift::UInt v30;

  v7 = *(_QWORD *)(a4 + 16);
  Hasher._combine(_:)(v7);
  v25 = v7;
  if (v7)
  {
    v22 = a4 + 32;
    v23 = a3 + 32;
    v24 = *(_QWORD *)(a3 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    v8 = 0;
    while (v8 != v24)
    {
      v9 = v23 + 56 * v8;
      v29 = *(_QWORD *)(v9 + 32);
      v10 = v8;
      v11 = *(_QWORD *)(v9 + 48);
      v12 = *(unsigned __int8 *)(v9 + 40);
      v13 = *(_QWORD *)(v9 + 8);
      v26 = v10;
      v14 = *(_QWORD *)(v22 + 16 * v10 + 8);
      Hasher._combine(_:)(*(_QWORD *)v9);
      v15 = *(void (**)(uint64_t))(*(_QWORD *)v13 + 120);
      swift_retain();
      swift_retain_n();
      swift_bridgeObjectRetain();
      v27 = v14;
      swift_retain();
      v15(a1);
      swift_release();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v12 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v29);
      }
      Hasher._combine(_:)(v11);
      v16 = *(_QWORD *)(v14 + 16);
      Hasher._combine(_:)(v16);
      if (v16)
      {
        v17 = *(_QWORD *)(v14 + 16);
        swift_retain();
        v18 = (Swift::UInt *)(v27 + 80);
        while (v17)
        {
          v19 = *(v18 - 5);
          v28 = *(v18 - 2);
          v20 = *((unsigned __int8 *)v18 - 8);
          v30 = *v18;
          Hasher._combine(_:)(*(v18 - 6));
          v21 = *(void (**)(uint64_t))(*(_QWORD *)v19 + 120);
          swift_retain();
          v21(a1);
          swift_release();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          if (v20 == 1)
          {
            Hasher._combine(_:)(0);
          }
          else
          {
            Hasher._combine(_:)(1u);
            Hasher._combine(_:)(v28);
          }
          Hasher._combine(_:)(v30);
          --v17;
          v18 += 7;
          if (!--v16)
          {
            swift_release();
            swift_release_n();
            goto LABEL_4;
          }
        }
        __break(1u);
        break;
      }
      swift_release();
      swift_release();
LABEL_4:
      v8 = v26 + 1;
      swift_bridgeObjectRelease();
      swift_release();
      if (v26 + 1 == v25)
      {
        swift_release();
        swift_release();
        swift_release();
        return;
      }
    }
    __break(1u);
  }
}

unint64_t specialized OrderedDictionary.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t result;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = specialized OrderedSet._find(_:)(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
  if ((v8 & 1) != 0)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    goto LABEL_6;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)(a4 + 16))
  {
    v9 = (_QWORD *)(a4 + 48 * result);
    v10 = v9[4];
    v11 = v9[5];
    v12 = v9[6];
    v13 = v9[7];
    v14 = v9[8];
    v15 = v9[9];
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    result = swift_retain();
LABEL_6:
    *a5 = v10;
    a5[1] = v11;
    a5[2] = v12;
    a5[3] = v13;
    a5[4] = v14;
    a5[5] = v15;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t specialized OrderedDictionary.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t result;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v8 = a3 + 32;
  v9 = *(_QWORD *)(a3 + 16);
  if (a2)
  {
    v10 = (_QWORD *)(a2 + 16);
    v11 = a2 + 32;
    swift_retain();
    v12 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(a1, v8, v9, v10, v11);
    v14 = v13;
    result = swift_release();
    if ((v14 & 1) == 0)
    {
      if ((v12 & 0x8000000000000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
LABEL_9:
    v17 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v18 = 1;
    goto LABEL_10;
  }
  result = specialized Collection<>.firstIndex(of:)(a1, a3 + 32, *(_QWORD *)(a3 + 16));
  if ((v24 & 1) != 0)
    goto LABEL_9;
  v12 = result;
  if (result < 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
LABEL_4:
  if (v12 < *(_QWORD *)(a4 + 16))
  {
    v16 = (_QWORD *)(a4 + 56 * v12);
    v17 = v16[4];
    v18 = v16[5];
    v19 = v16[6];
    v20 = v16[7];
    v21 = v16[8];
    v22 = v16[9];
    v23 = v16[10];
    result = outlined copy of Output?(v17, v18);
LABEL_10:
    *a5 = v17;
    a5[1] = v18;
    a5[2] = v19;
    a5[3] = v20;
    a5[4] = v21;
    a5[5] = v22;
    a5[6] = v23;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t specialized OrderedDictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t result;
  uint64_t v14;
  char v15;

  v6 = a3 + 32;
  v7 = *(_QWORD *)(a3 + 16);
  if (a2)
  {
    v8 = (_QWORD *)(a2 + 16);
    v9 = a2 + 32;
    swift_retain();
    v10 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(a1, v6, v7, v8, v9);
    v12 = v11;
    result = swift_release();
    if ((v12 & 1) == 0)
    {
      if ((v10 & 0x8000000000000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
    return 0;
  }
  result = specialized Collection<>.firstIndex(of:)(a1, a3 + 32, *(_QWORD *)(a3 + 16));
  if ((v15 & 1) != 0)
    return 0;
  v10 = result;
  if (result < 0)
  {
LABEL_8:
    __break(1u);
    return 0;
  }
LABEL_4:
  if (v10 < *(_QWORD *)(a4 + 16))
  {
    v14 = *(_QWORD *)(a4 + 16 * v10 + 32);
    swift_retain();
    swift_retain();
    return v14;
  }
  __break(1u);
  return result;
}

unint64_t specialized OrderedDictionary.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  unint64_t result;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = specialized OrderedSet._find(_:)(a1, a2, a3, a4);
  if ((v9 & 1) != 0)
  {
    v12 = 0;
    v11 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    goto LABEL_6;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)(a5 + 16))
  {
    v10 = (_QWORD *)(a5 + 48 * result);
    v12 = v10[4];
    v11 = v10[5];
    v13 = v10[6];
    v14 = v10[7];
    v15 = v10[8];
    v16 = v10[9];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = outlined copy of MaterialXAvailability(v15, v16);
LABEL_6:
    *a6 = v12;
    a6[1] = v11;
    a6[2] = v13;
    a6[3] = v14;
    a6[4] = v15;
    a6[5] = v16;
    return result;
  }
  __break(1u);
  return result;
}

void Graph.createSubgraph(labeled:inputs:outputs:)(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[9];
  _OWORD v19[2];

  v7 = *(_QWORD *)(v5 + 72);
  v8 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v5 + 72) = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Graph.init(id:label:inputs:outputs:)(v8, a1, a2, a3, a4, (uint64_t)v18);
    v13 = v19[0];
    a5[8] = v18[8];
    a5[9] = v13;
    *(_OWORD *)((char *)a5 + 153) = *(_OWORD *)((char *)v19 + 9);
    v14 = v18[5];
    a5[4] = v18[4];
    a5[5] = v14;
    v15 = v18[7];
    a5[6] = v18[6];
    a5[7] = v15;
    v16 = v18[1];
    *a5 = v18[0];
    a5[1] = v16;
    v17 = v18[3];
    a5[2] = v18[2];
    a5[3] = v17;
  }
}

__n128 Graph.init(label:inputs:outputs:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  _OWORD v11[9];
  _OWORD v12[2];

  specialized Graph.init(id:label:inputs:outputs:)(0, a1, a2, a3, a4, (uint64_t)v11);
  v6 = v12[0];
  *(_OWORD *)(a5 + 128) = v11[8];
  *(_OWORD *)(a5 + 144) = v6;
  *(_OWORD *)(a5 + 153) = *(_OWORD *)((char *)v12 + 9);
  v7 = v11[5];
  *(_OWORD *)(a5 + 64) = v11[4];
  *(_OWORD *)(a5 + 80) = v7;
  v8 = v11[7];
  *(_OWORD *)(a5 + 96) = v11[6];
  *(_OWORD *)(a5 + 112) = v8;
  v9 = v11[1];
  *(_OWORD *)a5 = v11[0];
  *(_OWORD *)(a5 + 16) = v9;
  result = (__n128)v11[3];
  *(_OWORD *)(a5 + 32) = v11[2];
  *(__n128 *)(a5 + 48) = result;
  return result;
}

unint64_t Graph.node(withID:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  if (result == -7)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0uLL;
LABEL_6:
    *(_QWORD *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_OWORD *)(a2 + 24) = v8;
    *(_BYTE *)(a2 + 40) = v7;
    return result;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v9 = *(_QWORD *)(v2 + 64);
    if (*(_QWORD *)(v9 + 16) > result)
    {
      v10 = v9 + 48 * result;
      v4 = *(_QWORD *)(v10 + 32);
      v5 = *(_QWORD *)(v10 + 40);
      v6 = *(_QWORD *)(v10 + 48);
      v11 = *(_OWORD *)(v10 + 56);
      v7 = *(_BYTE *)(v10 + 72);
      outlined copy of NodePersonality(v4);
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRetain();
      v8 = v11;
      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

uint64_t ShaderGraphNode.input(labeled:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v7 = result;
    v19 = a3;
    v8 = (uint64_t *)(v4 + 80);
    while (1)
    {
      v9 = *(v8 - 5);
      v20 = *(v8 - 6);
      v10 = *(v8 - 4);
      v11 = *(v8 - 3);
      v12 = *(v8 - 2);
      v13 = *((unsigned __int8 *)v8 - 8);
      v14 = *v8;
      if (v10 == v7 && v11 == a2)
        break;
      v16 = v7;
      v17 = a2;
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0)
        goto LABEL_12;
      v8 += 7;
      --v5;
      a2 = v17;
      v7 = v16;
      if (!v5)
      {
        v18 = 0;
        v9 = 0;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        a3 = v19;
        goto LABEL_13;
      }
    }
    v10 = v7;
    v11 = a2;
LABEL_12:
    swift_retain();
    result = swift_bridgeObjectRetain();
    a3 = v19;
    v18 = v20;
  }
  else
  {
    v18 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
  }
LABEL_13:
  *a3 = v18;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  a3[4] = v12;
  a3[5] = v13;
  a3[6] = v14;
  return result;
}

__n128 Edge.init(from:to:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result;
  __int128 v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  result = *(__n128 *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_BYTE *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_BYTE *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 32) = v9;
  *(_BYTE *)(a3 + 40) = v10 & 1;
  *(_QWORD *)(a3 + 48) = v11;
  *(__n128 *)(a3 + 56) = result;
  *(_OWORD *)(a3 + 72) = v4;
  *(_QWORD *)(a3 + 88) = v5;
  *(_BYTE *)(a3 + 96) = v6 & 1;
  *(_QWORD *)(a3 + 104) = v7;
  return result;
}

uint64_t Graph.insert<A>(_:)()
{
  return Sequence.forEach(_:)();
}

void specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::UInt v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  Swift::UInt v45;
  Swift::Int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  Swift::Int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int64_t v79;
  int64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int64_t v86;
  int64_t v87;
  uint64_t v88;
  uint64_t v89;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
    goto LABEL_131;
  if (v5 < 1)
    return;
  v10 = *(_QWORD *)(a3 + 16);
  v11 = v10 - v5;
  if ((uint64_t)v10 < v5)
    ++v11;
  if (a1 < v11 >> 1)
  {
    if (specialized static _HashTable.maximumCapacity(forScale:)(*a4 & 0x3F) / 3 <= a1)
    {
      v74 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, a4, (uint64_t)a5);
      if (v74)
      {
        v75 = ~(-1 << *a4);
        v76 = a4[1] >> 6;
        v77 = v76 + (v74 ^ v75);
        v78 = v77 >= v75 ? ~(-1 << *a4) : 0;
        v79 = v77 - v78;
        if (v79 < a1)
        {
          v36 = __OFADD__(v79, v5);
          v80 = v79 + v5;
          if (v36)
            goto LABEL_129;
          *a5 ^= ((v75 & ((v80 - v76) >> 63)) + v80 - v76) ^ v75 ^ v74;
        }
      }
      _HashTable.BucketIterator.advance()();
    }
    else
    {
      if (a1 < 0)
        goto LABEL_134;
      if (v10 < a1)
        goto LABEL_135;
      if (a1)
      {
        v12 = 0;
        v88 = a3 + 32;
        do
        {
          v13 = *(_QWORD *)(v88 + 8 * v12);
          Hasher.init(_seed:)();
          Hasher._combine(_:)(v13);
          v14 = Hasher._finalize()();
          v15 = *a4;
          v16 = 1 << *a4;
          v17 = v16 - 1;
          if (__OFSUB__(v16, 1))
            goto LABEL_125;
          v18 = v17 & v14;
          v19 = _HashTable.UnsafeHandle._startIterator(bucket:)(v17 & v14, a4, (uint64_t)a5);
          if (v19)
          {
            v22 = a4[1] >> 6;
            v23 = v22 + (v19 ^ v17);
            v24 = v23 >= v17 ? v16 - 1 : 0;
            if (v23 - v24 != v12)
            {
              v25 = 0;
              v26 = v15 & 0x3F;
              v27 = __OFADD__(v26 << v26, 64);
              v28 = (v26 << v26) + 126;
              if ((v26 << v26) + 64 >= 1)
                v28 = (v26 << v26) + 63;
              v29 = v28 >> 6;
              do
              {
                if (++v18 == v16)
                {
                  if ((v25 & 1) != 0)
                    goto LABEL_139;
                  v18 = 0;
                  v25 = 1;
                }
                if (v21 >= v26)
                {
                  v36 = __OFSUB__(v21, v26);
                  v21 -= v26;
                  if (v36)
                  {
                    __break(1u);
LABEL_118:
                    __break(1u);
LABEL_119:
                    __break(1u);
LABEL_120:
                    __break(1u);
LABEL_121:
                    __break(1u);
                    goto LABEL_122;
                  }
                  v40 = v20 >> v26;
                  v41 = v20 & v17;
                  if ((v20 & v17) == 0)
                    break;
                }
                else
                {
                  v32 = (v18 * v26) >> 6;
                  if (v21)
                  {
                    if (v27)
                      goto LABEL_123;
                    if (v32 + 1 == v29)
                      v32 = 0;
                    else
                      ++v32;
                  }
                  v33 = v26 - v21;
                  if (__OFSUB__(v26, v21))
                    goto LABEL_118;
                  if (v32 == 2 && v26 == 5)
                    v35 = 32;
                  else
                    v35 = 64;
                  v36 = __OFSUB__(v35, v33);
                  v37 = v35 - v33;
                  if (v36)
                    goto LABEL_119;
                  v38 = a5[v32];
                  v39 = (v38 << v21) | v20;
                  v40 = v38 >> v33;
                  v21 = v37;
                  v41 = v39 & v17;
                  if ((v39 & v17) == 0)
                    break;
                }
                v30 = v22 + (v41 ^ v17);
                if (v30 >= v17)
                  v31 = v16 - 1;
                else
                  v31 = 0;
                v20 = v40;
              }
              while (v30 - v31 != v12);
            }
          }
          v42 = v12 + v5;
          if (__OFADD__(v12, v5))
            goto LABEL_126;
          ++v12;
          _HashTable.BucketIterator.currentValue.setter(v42, 0);
        }
        while (v12 != a1);
      }
    }
    v43 = a4[1] >> 6;
    if (__OFSUB__(v43, v5))
      goto LABEL_133;
    _HashTable.Header.bias.setter(v43 - v5);
    return;
  }
  v44 = a2;
  if (__OFSUB__(v10, a2))
    goto LABEL_132;
  if ((uint64_t)(v10 - a2) >= specialized static _HashTable.maximumCapacity(forScale:)(*a4 & 0x3F) / 3)
  {
    v81 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, a4, (uint64_t)a5);
    if (v81)
    {
      v82 = ~(-1 << *a4);
      v83 = a4[1] >> 6;
      v84 = v83 + (v81 ^ v82);
      v85 = v84 >= v82 ? ~(-1 << *a4) : 0;
      v86 = v84 - v85;
      if (v86 >= v44)
      {
        v36 = __OFSUB__(v86, v5);
        v87 = v86 - v5;
        if (v36)
          goto LABEL_130;
        *a5 ^= ((v82 & ((v87 - v83) >> 63)) + v87 - v83) ^ v82 ^ v81;
      }
    }
    _HashTable.BucketIterator.advance()();
    return;
  }
  if ((uint64_t)v10 < v44)
    goto LABEL_136;
  if (v44 < 0)
  {
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if (v10 == v44)
    return;
  if (v10 <= v44)
    goto LABEL_138;
  v89 = a3 + 32;
  do
  {
    v45 = *(_QWORD *)(v89 + 8 * v44);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v45);
    v46 = Hasher._finalize()();
    v47 = *a4;
    v48 = 1 << *a4;
    v49 = v48 - 1;
    if (__OFSUB__(v48, 1))
      goto LABEL_127;
    v50 = v49 & v46;
    v51 = _HashTable.UnsafeHandle._startIterator(bucket:)(v49 & v46, a4, (uint64_t)a5);
    if (v51)
    {
      v54 = a4[1] >> 6;
      v55 = v54 + (v51 ^ v49);
      v56 = v55 >= v49 ? v48 - 1 : 0;
      if (v55 - v56 != v44)
      {
        v57 = 0;
        v58 = v47 & 0x3F;
        v59 = __OFADD__(v58 << v58, 64);
        v60 = (v58 << v58) + 126;
        if ((v58 << v58) + 64 >= 1)
          v60 = (v58 << v58) + 63;
        v61 = v60 >> 6;
        do
        {
          if (++v50 == v48)
          {
            if ((v57 & 1) != 0)
              goto LABEL_139;
            v50 = 0;
            v57 = 1;
          }
          if (v53 >= v58)
          {
            v36 = __OFSUB__(v53, v58);
            v53 -= v58;
            if (v36)
              goto LABEL_120;
            v71 = v52 >> v58;
            v72 = v52 & v49;
            if ((v52 & v49) == 0)
              break;
          }
          else
          {
            v64 = (v50 * v58) >> 6;
            if (v53)
            {
              if (v59)
                goto LABEL_124;
              if (v64 + 1 == v61)
                v64 = 0;
              else
                ++v64;
            }
            v65 = v58 - v53;
            if (__OFSUB__(v58, v53))
              goto LABEL_121;
            if (v64 == 2 && v58 == 5)
              v67 = 32;
            else
              v67 = 64;
            v36 = __OFSUB__(v67, v65);
            v68 = v67 - v65;
            if (v36)
            {
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
              goto LABEL_137;
            }
            v69 = a5[v64];
            v70 = (v69 << v53) | v52;
            v71 = v69 >> v65;
            v53 = v68;
            v72 = v70 & v49;
            if ((v70 & v49) == 0)
              break;
          }
          v62 = v54 + (v72 ^ v49);
          if (v62 >= v49)
            v63 = v48 - 1;
          else
            v63 = 0;
          v52 = v71;
        }
        while (v62 - v63 != v44);
      }
    }
    v73 = v44 - v5;
    if (__OFSUB__(v44, v5))
      goto LABEL_128;
    ++v44;
    _HashTable.BucketIterator.currentValue.setter(v73, 0);
  }
  while (v44 != v10);
}

{
  uint64_t v5;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  Swift::Int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  Swift::Int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int64_t v83;
  int64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int64_t v90;
  int64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94[8];

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
    goto LABEL_139;
  if (v5 < 1)
    return;
  v10 = *(_QWORD *)(a3 + 16);
  v11 = v10 - v5;
  if ((uint64_t)v10 < v5)
    ++v11;
  if (a1 < v11 >> 1)
  {
    if (specialized static _HashTable.maximumCapacity(forScale:)(*a4 & 0x3F) / 3 <= a1)
    {
      v78 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, a4, (uint64_t)a5);
      if (v78)
      {
        v79 = ~(-1 << *a4);
        v80 = a4[1] >> 6;
        v81 = v80 + (v78 ^ v79);
        v82 = v81 >= v79 ? ~(-1 << *a4) : 0;
        v83 = v81 - v82;
        if (v83 < a1)
        {
          v38 = __OFADD__(v83, v5);
          v84 = v83 + v5;
          if (v38)
            goto LABEL_137;
          *a5 ^= ((v79 & ((v84 - v80) >> 63)) + v84 - v80) ^ v79 ^ v78;
        }
      }
      _HashTable.BucketIterator.advance()();
    }
    else
    {
      if (a1 < 0)
        goto LABEL_142;
      if (v10 < a1)
        goto LABEL_143;
      if (a1)
      {
        v92 = a3 + 32;
        swift_retain();
        v12 = 0;
        while (1)
        {
          outlined init with copy of WeakBox<SGEdge>(v92 + 8 * v12, (uint64_t)v94);
          Hasher.init(_seed:)();
          v13 = MEMORY[0x24954C3E4](v94);
          if (v13)
          {
            v14 = (void *)v13;
            Hasher._combine(_:)(1u);
            v15 = v14;
            NSObject.hash(into:)();

          }
          else
          {
            Hasher._combine(_:)(0);
          }
          v16 = Hasher._finalize()();
          v17 = *a4;
          v18 = 1 << *a4;
          v19 = v18 - 1;
          if (__OFSUB__(v18, 1))
            goto LABEL_133;
          v20 = v19 & v16;
          v21 = _HashTable.UnsafeHandle._startIterator(bucket:)(v19 & v16, a4, (uint64_t)a5);
          if (v21)
          {
            v24 = a4[1] >> 6;
            v25 = v24 + (v21 ^ v19);
            v26 = v25 >= v19 ? v18 - 1 : 0;
            if (v25 - v26 != v12)
            {
              v27 = 0;
              v28 = v17 & 0x3F;
              v29 = __OFADD__(v28 << v28, 64);
              v30 = (v28 << v28) + 126;
              if ((v28 << v28) + 64 >= 1)
                v30 = (v28 << v28) + 63;
              v31 = v30 >> 6;
              do
              {
                if (++v20 == v18)
                {
                  if ((v27 & 1) != 0)
                    goto LABEL_147;
                  v20 = 0;
                  v27 = 1;
                }
                if (v23 >= v28)
                {
                  v38 = __OFSUB__(v23, v28);
                  v23 -= v28;
                  if (v38)
                  {
                    __break(1u);
LABEL_126:
                    __break(1u);
LABEL_127:
                    __break(1u);
LABEL_128:
                    __break(1u);
LABEL_129:
                    __break(1u);
                    goto LABEL_130;
                  }
                  v42 = v22 >> v28;
                  v43 = v22 & v19;
                  if ((v22 & v19) == 0)
                    break;
                }
                else
                {
                  v34 = (v20 * v28) >> 6;
                  if (v23)
                  {
                    if (v29)
                      goto LABEL_131;
                    if (v34 + 1 == v31)
                      v34 = 0;
                    else
                      ++v34;
                  }
                  v35 = v28 - v23;
                  if (__OFSUB__(v28, v23))
                    goto LABEL_126;
                  if (v34 == 2 && v28 == 5)
                    v37 = 32;
                  else
                    v37 = 64;
                  v38 = __OFSUB__(v37, v35);
                  v39 = v37 - v35;
                  if (v38)
                    goto LABEL_127;
                  v40 = a5[v34];
                  v41 = (v40 << v23) | v22;
                  v42 = v40 >> v35;
                  v23 = v39;
                  v43 = v41 & v19;
                  if ((v41 & v19) == 0)
                    break;
                }
                v32 = v24 + (v43 ^ v19);
                if (v32 >= v19)
                  v33 = v18 - 1;
                else
                  v33 = 0;
                v22 = v42;
              }
              while (v32 - v33 != v12);
            }
          }
          v44 = v12 + v5;
          if (__OFADD__(v12, v5))
            goto LABEL_134;
          ++v12;
          _HashTable.BucketIterator.currentValue.setter(v44, 0);
          outlined destroy of WeakBox<SGEdge>((uint64_t)v94);
          if (v12 == a1)
          {
            swift_release();
            break;
          }
        }
      }
    }
    v45 = a4[1] >> 6;
    if (__OFSUB__(v45, v5))
      goto LABEL_141;
    _HashTable.Header.bias.setter(v45 - v5);
    return;
  }
  v46 = a2;
  if (__OFSUB__(v10, a2))
    goto LABEL_140;
  if ((uint64_t)(v10 - a2) >= specialized static _HashTable.maximumCapacity(forScale:)(*a4 & 0x3F) / 3)
  {
    v85 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, a4, (uint64_t)a5);
    if (v85)
    {
      v86 = ~(-1 << *a4);
      v87 = a4[1] >> 6;
      v88 = v87 + (v85 ^ v86);
      v89 = v88 >= v86 ? ~(-1 << *a4) : 0;
      v90 = v88 - v89;
      if (v90 >= v46)
      {
        v38 = __OFSUB__(v90, v5);
        v91 = v90 - v5;
        if (v38)
          goto LABEL_138;
        *a5 ^= ((v86 & ((v91 - v87) >> 63)) + v91 - v87) ^ v86 ^ v85;
      }
    }
    _HashTable.BucketIterator.advance()();
    return;
  }
  if ((uint64_t)v10 < v46)
    goto LABEL_144;
  if (v46 < 0)
  {
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if (v10 == v46)
    return;
  if (v10 <= v46)
    goto LABEL_146;
  v93 = a3 + 32;
  swift_retain();
  do
  {
    outlined init with copy of WeakBox<SGEdge>(v93 + 8 * v46, (uint64_t)v94);
    Hasher.init(_seed:)();
    v47 = MEMORY[0x24954C3E4](v94);
    if (v47)
    {
      v48 = (void *)v47;
      Hasher._combine(_:)(1u);
      v49 = v48;
      NSObject.hash(into:)();

    }
    else
    {
      Hasher._combine(_:)(0);
    }
    v50 = Hasher._finalize()();
    v51 = *a4;
    v52 = 1 << *a4;
    v53 = v52 - 1;
    if (__OFSUB__(v52, 1))
      goto LABEL_135;
    v54 = v53 & v50;
    v55 = _HashTable.UnsafeHandle._startIterator(bucket:)(v53 & v50, a4, (uint64_t)a5);
    if (v55)
    {
      v58 = a4[1] >> 6;
      v59 = v58 + (v55 ^ v53);
      v60 = v59 >= v53 ? v52 - 1 : 0;
      if (v59 - v60 != v46)
      {
        v61 = 0;
        v62 = v51 & 0x3F;
        v63 = __OFADD__(v62 << v62, 64);
        v64 = (v62 << v62) + 126;
        if ((v62 << v62) + 64 >= 1)
          v64 = (v62 << v62) + 63;
        v65 = v64 >> 6;
        do
        {
          if (++v54 == v52)
          {
            if ((v61 & 1) != 0)
              goto LABEL_147;
            v54 = 0;
            v61 = 1;
          }
          if (v57 >= v62)
          {
            v38 = __OFSUB__(v57, v62);
            v57 -= v62;
            if (v38)
              goto LABEL_128;
            v75 = v56 >> v62;
            v76 = v56 & v53;
            if ((v56 & v53) == 0)
              break;
          }
          else
          {
            v68 = (v54 * v62) >> 6;
            if (v57)
            {
              if (v63)
                goto LABEL_132;
              if (v68 + 1 == v65)
                v68 = 0;
              else
                ++v68;
            }
            v69 = v62 - v57;
            if (__OFSUB__(v62, v57))
              goto LABEL_129;
            if (v68 == 2 && v62 == 5)
              v71 = 32;
            else
              v71 = 64;
            v38 = __OFSUB__(v71, v69);
            v72 = v71 - v69;
            if (v38)
            {
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
              goto LABEL_145;
            }
            v73 = a5[v68];
            v74 = (v73 << v57) | v56;
            v75 = v73 >> v69;
            v57 = v72;
            v76 = v74 & v53;
            if ((v74 & v53) == 0)
              break;
          }
          v66 = v58 + (v76 ^ v53);
          if (v66 >= v53)
            v67 = v52 - 1;
          else
            v67 = 0;
          v56 = v75;
        }
        while (v66 - v67 != v46);
      }
    }
    v77 = v46 - v5;
    if (__OFSUB__(v46, v5))
      goto LABEL_136;
    ++v46;
    _HashTable.BucketIterator.currentValue.setter(v77, 0);
    outlined destroy of WeakBox<SGEdge>((uint64_t)v94);
  }
  while (v46 != v10);
  swift_release();
}

{
  uint64_t v5;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int64_t v48;
  int64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int64_t v55;
  int64_t v56;
  Swift::Int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  Swift::Int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
    goto LABEL_133;
  if (v5 < 1)
    return;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = v9 - v5;
  if ((uint64_t)v9 < v5)
    ++v10;
  if (a1 < v10 >> 1)
  {
    if (specialized static _HashTable.maximumCapacity(forScale:)(*a4 & 0x3F) / 3 <= a1)
    {
      v43 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, a4, (uint64_t)a5);
      if (v43)
      {
        v44 = ~(-1 << *a4);
        v45 = a4[1] >> 6;
        v46 = v45 + (v43 ^ v44);
        v47 = v46 >= v44 ? ~(-1 << *a4) : 0;
        v48 = v46 - v47;
        if (v48 < a1)
        {
          v34 = __OFADD__(v48, v5);
          v49 = v48 + v5;
          if (v34)
            goto LABEL_131;
          *a5 ^= ((v44 & ((v49 - v45) >> 63)) + v49 - v45) ^ v44 ^ v43;
        }
      }
      _HashTable.BucketIterator.advance()();
    }
    else
    {
      if (a1 < 0)
        goto LABEL_136;
      if (v9 < a1)
        goto LABEL_137;
      if (a1)
      {
        swift_retain();
        v11 = 0;
        while (1)
        {
          Hasher.init(_seed:)();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          v12 = Hasher._finalize()();
          v13 = *a4;
          v14 = 1 << *a4;
          v15 = v14 - 1;
          if (__OFSUB__(v14, 1))
            goto LABEL_127;
          v16 = v15 & v12;
          v17 = _HashTable.UnsafeHandle._startIterator(bucket:)(v15 & v12, a4, (uint64_t)a5);
          if (v17)
          {
            v20 = a4[1] >> 6;
            v21 = v20 + (v17 ^ v15);
            v22 = v21 >= v15 ? v14 - 1 : 0;
            if (v21 - v22 != v11)
            {
              v23 = 0;
              v24 = v13 & 0x3F;
              v25 = __OFADD__(v24 << v24, 64);
              v26 = (v24 << v24) + 126;
              if ((v24 << v24) + 64 >= 1)
                v26 = (v24 << v24) + 63;
              v27 = v26 >> 6;
              do
              {
                if (++v16 == v14)
                {
                  if ((v23 & 1) != 0)
                    goto LABEL_141;
                  v16 = 0;
                  v23 = 1;
                }
                if (v19 >= v24)
                {
                  v34 = __OFSUB__(v19, v24);
                  v19 -= v24;
                  if (v34)
                  {
                    __break(1u);
LABEL_120:
                    __break(1u);
LABEL_121:
                    __break(1u);
LABEL_122:
                    __break(1u);
LABEL_123:
                    __break(1u);
                    goto LABEL_124;
                  }
                  v38 = v18 >> v24;
                  v39 = v18 & v15;
                  if ((v18 & v15) == 0)
                    break;
                }
                else
                {
                  v30 = (v16 * v24) >> 6;
                  if (v19)
                  {
                    if (v25)
                      goto LABEL_125;
                    if (v30 + 1 == v27)
                      v30 = 0;
                    else
                      ++v30;
                  }
                  v31 = v24 - v19;
                  if (__OFSUB__(v24, v19))
                    goto LABEL_120;
                  if (v30 == 2 && v24 == 5)
                    v33 = 32;
                  else
                    v33 = 64;
                  v34 = __OFSUB__(v33, v31);
                  v35 = v33 - v31;
                  if (v34)
                    goto LABEL_121;
                  v36 = a5[v30];
                  v37 = (v36 << v19) | v18;
                  v38 = v36 >> v31;
                  v19 = v35;
                  v39 = v37 & v15;
                  if ((v37 & v15) == 0)
                    break;
                }
                v28 = v20 + (v39 ^ v15);
                if (v28 >= v15)
                  v29 = v14 - 1;
                else
                  v29 = 0;
                v18 = v38;
              }
              while (v28 - v29 != v11);
            }
          }
          v40 = v11 + v5;
          if (__OFADD__(v11, v5))
            goto LABEL_128;
          ++v11;
          _HashTable.BucketIterator.currentValue.setter(v40, 0);
          swift_bridgeObjectRelease();
          if (v11 == a1)
          {
            swift_release();
            break;
          }
        }
      }
    }
    v41 = a4[1] >> 6;
    if (__OFSUB__(v41, v5))
      goto LABEL_135;
    _HashTable.Header.bias.setter(v41 - v5);
    return;
  }
  v42 = a2;
  if (__OFSUB__(v9, a2))
    goto LABEL_134;
  if ((uint64_t)(v9 - a2) >= specialized static _HashTable.maximumCapacity(forScale:)(*a4 & 0x3F) / 3)
  {
    v50 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, a4, (uint64_t)a5);
    if (v50)
    {
      v51 = ~(-1 << *a4);
      v52 = a4[1] >> 6;
      v53 = v52 + (v50 ^ v51);
      v54 = v53 >= v51 ? ~(-1 << *a4) : 0;
      v55 = v53 - v54;
      if (v55 >= v42)
      {
        v34 = __OFSUB__(v55, v5);
        v56 = v55 - v5;
        if (v34)
          goto LABEL_132;
        *a5 ^= ((v51 & ((v56 - v52) >> 63)) + v56 - v52) ^ v51 ^ v50;
      }
    }
    _HashTable.BucketIterator.advance()();
    return;
  }
  if ((uint64_t)v9 < v42)
    goto LABEL_138;
  if (v42 < 0)
  {
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if (v9 == v42)
    return;
  if (v9 <= v42)
    goto LABEL_140;
  swift_retain();
  do
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v57 = Hasher._finalize()();
    v58 = *a4;
    v59 = 1 << *a4;
    v60 = v59 - 1;
    if (__OFSUB__(v59, 1))
      goto LABEL_129;
    v61 = v60 & v57;
    v62 = _HashTable.UnsafeHandle._startIterator(bucket:)(v60 & v57, a4, (uint64_t)a5);
    if (v62)
    {
      v65 = a4[1] >> 6;
      v66 = v65 + (v62 ^ v60);
      v67 = v66 >= v60 ? v59 - 1 : 0;
      if (v66 - v67 != v42)
      {
        v68 = 0;
        v69 = v58 & 0x3F;
        v70 = __OFADD__(v69 << v69, 64);
        v71 = (v69 << v69) + 126;
        if ((v69 << v69) + 64 >= 1)
          v71 = (v69 << v69) + 63;
        v72 = v71 >> 6;
        do
        {
          if (++v61 == v59)
          {
            if ((v68 & 1) != 0)
              goto LABEL_141;
            v61 = 0;
            v68 = 1;
          }
          if (v64 >= v69)
          {
            v34 = __OFSUB__(v64, v69);
            v64 -= v69;
            if (v34)
              goto LABEL_122;
            v82 = v63 >> v69;
            v83 = v63 & v60;
            if ((v63 & v60) == 0)
              break;
          }
          else
          {
            v75 = (v61 * v69) >> 6;
            if (v64)
            {
              if (v70)
                goto LABEL_126;
              if (v75 + 1 == v72)
                v75 = 0;
              else
                ++v75;
            }
            v76 = v69 - v64;
            if (__OFSUB__(v69, v64))
              goto LABEL_123;
            if (v75 == 2 && v69 == 5)
              v78 = 32;
            else
              v78 = 64;
            v34 = __OFSUB__(v78, v76);
            v79 = v78 - v76;
            if (v34)
            {
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
              goto LABEL_139;
            }
            v80 = a5[v75];
            v81 = (v80 << v64) | v63;
            v82 = v80 >> v76;
            v64 = v79;
            v83 = v81 & v60;
            if ((v81 & v60) == 0)
              break;
          }
          v73 = v65 + (v83 ^ v60);
          if (v73 >= v60)
            v74 = v59 - 1;
          else
            v74 = 0;
          v63 = v82;
        }
        while (v73 - v74 != v42);
      }
    }
    v84 = v42 - v5;
    if (__OFSUB__(v42, v5))
      goto LABEL_130;
    ++v42;
    _HashTable.BucketIterator.currentValue.setter(v84, 0);
    swift_bridgeObjectRelease();
  }
  while (v42 != v9);
  swift_release();
}

void specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(uint64_t a1, int64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  int64_t v5;
  uint64_t v6;
  _QWORD *v8;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::UInt v15;
  uint64_t v16;
  Swift::UInt v17;
  int v18;
  Swift::UInt v19;
  void (*v20)(_QWORD **);
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  Swift::Int v51;
  unint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  Swift::Int v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int64_t v84;
  int64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  Swift::UInt v101;
  Swift::UInt v102;
  int v103;
  Swift::UInt v104;
  void (*v105)(_QWORD **);
  Swift::Int v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  Swift::Int v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  BOOL v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v138;
  uint64_t v139;
  Swift::Int v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char v144;

  v6 = a2 - a1;
  if (__OFSUB__(a2, a1))
    goto LABEL_163;
  if (v6 < 1)
    return;
  v8 = a4;
  v11 = *(_QWORD *)(a3 + 16);
  v12 = v11 - v6;
  if ((uint64_t)v11 < v6)
    ++v12;
  v136 = a2 - a1;
  if (a1 < v12 >> 1)
  {
    if (specialized static _HashTable.maximumCapacity(forScale:)(*a4 & 0x3FLL) / 3 <= a1)
    {
      v50 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, v8, a5);
      v51 = 0;
      v138 = v8;
      v139 = a5;
      v140 = 0;
      v141 = v50;
      v142 = v52;
      v143 = v53;
      a5 = -1;
      v144 = 0;
      while (1)
      {
        if (v141)
        {
          v58 = v138;
          v59 = ~(-1 << *v138);
          v60 = (uint64_t)v138[1] >> 6;
          v61 = v60 + (v141 ^ v59);
          v62 = v61 >= v59 ? ~(-1 << *v138) : 0;
          v63 = v61 - v62;
          if (v63 < a1)
          {
            v43 = __OFADD__(v63, v6);
            v64 = v63 + v6;
            if (v43)
              goto LABEL_161;
            v65 = *v138 & 0x3FLL;
            v66 = v139;
            v67 = ((v59 & ((v64 - v60) >> 63)) + v64 - v60) ^ v59;
            v68 = v67 ^ v141;
            v69 = v65 * v51;
            v70 = (v65 * v51) >> 6;
            *(_QWORD *)(v139 + 8 * v70) ^= (v67 ^ v141) << v69;
            v71 = 64 - (v69 & 0x3F);
            v72 = *v58 & 0x3FLL;
            if (v71 < v72)
            {
              v73 = v72 << v72;
              v43 = __OFADD__(v73, 64);
              v74 = v73 + 64;
              if (v43)
              {
                __break(1u);
                goto LABEL_84;
              }
              v55 = v74 - 1;
              v54 = v74 < 1;
              v56 = v74 + 62;
              if (!v54)
                v56 = v55;
              if (v70 + 1 == v56 >> 6)
                v57 = 0;
              else
                v57 = v70 + 1;
              *(_QWORD *)(v66 + 8 * v57) ^= v68 >> v71;
            }
            v141 = v67;
          }
        }
        _HashTable.BucketIterator.advance()();
        v51 = v140;
        if (!v140)
          goto LABEL_57;
      }
    }
    if (a1 < 0)
      goto LABEL_167;
    if (v11 < a1)
      goto LABEL_168;
    if (a1)
    {
      v134 = a3 + 32;
      swift_retain();
      v13 = 0;
      while (1)
      {
        v14 = v134 + 56 * v13;
        v15 = *(_QWORD *)v14;
        v16 = *(_QWORD *)(v14 + 8);
        v17 = *(_QWORD *)(v14 + 32);
        v18 = *(unsigned __int8 *)(v14 + 40);
        v19 = *(_QWORD *)(v14 + 48);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v15);
        v20 = *(void (**)(_QWORD **))(*(_QWORD *)v16 + 120);
        swift_retain();
        swift_bridgeObjectRetain();
        v20(&v138);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (v18 == 1)
        {
          Hasher._combine(_:)(0);
        }
        else
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v17);
        }
        Hasher._combine(_:)(v19);
        v21 = Hasher._finalize()();
        v8 = a4;
        v22 = *a4;
        v23 = 1 << *a4;
        v24 = v23 - 1;
        if (__OFSUB__(v23, 1))
          goto LABEL_157;
        v25 = v24 & v21;
        v26 = _HashTable.UnsafeHandle._startIterator(bucket:)(v24 & v21, a4, a5);
        v138 = a4;
        v139 = a5;
        v140 = v25;
        v141 = v26;
        v142 = v27;
        v143 = v28;
        v144 = 0;
        if (v26)
        {
          v29 = (uint64_t)a4[1] >> 6;
          v30 = v29 + (v26 ^ v24);
          if (v30 >= v24)
            v31 = v23 - 1;
          else
            v31 = 0;
          if (v30 - v31 != v13)
          {
            v32 = 0;
            v33 = v22 & 0x3F;
            v34 = __OFADD__(v33 << v33, 64);
            v35 = (v33 << v33) + 126;
            if ((v33 << v33) + 64 >= 1)
              v35 = (v33 << v33) + 63;
            v36 = v35 >> 6;
            while (1)
            {
              if (++v25 == v23)
              {
                if ((v32 & 1) != 0)
                  goto LABEL_172;
                v25 = 0;
                v32 = 1;
              }
              if (v28 >= v33)
              {
                v43 = __OFSUB__(v28, v33);
                v28 -= v33;
                if (v43)
                {
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
                  goto LABEL_154;
                }
                v47 = v27 >> v33;
                v26 = v27 & v24;
                if ((v27 & v24) == 0)
                  goto LABEL_52;
              }
              else
              {
                v39 = (v25 * v33) >> 6;
                if (v28)
                {
                  if (v34)
                    goto LABEL_155;
                  if (v39 + 1 == v36)
                    v39 = 0;
                  else
                    ++v39;
                }
                v40 = v33 - v28;
                if (__OFSUB__(v33, v28))
                  goto LABEL_150;
                if (v39 == 2 && v33 == 5)
                  v42 = 32;
                else
                  v42 = 64;
                v43 = __OFSUB__(v42, v40);
                v44 = v42 - v40;
                if (v43)
                  goto LABEL_151;
                v45 = *(_QWORD *)(a5 + 8 * v39);
                v46 = (v45 << v28) | v27;
                v47 = v45 >> v40;
                v28 = v44;
                v26 = v46 & v24;
                if ((v46 & v24) == 0)
                  goto LABEL_52;
              }
              v37 = v29 + (v26 ^ v24);
              if (v37 >= v24)
                v38 = v23 - 1;
              else
                v38 = 0;
              v27 = v47;
              if (v37 - v38 == v13)
              {
LABEL_52:
                v27 = v47;
                goto LABEL_53;
              }
            }
          }
          v32 = 0;
LABEL_53:
          v144 = v32;
          v140 = v25;
          v141 = v26;
          v142 = v27;
          v143 = v28;
        }
        v6 = v136;
        v48 = v13 + v136;
        if (__OFADD__(v13, v136))
          goto LABEL_158;
        ++v13;
        _HashTable.BucketIterator.currentValue.setter(v48, 0);
        swift_bridgeObjectRelease();
        swift_release();
        if (v13 == a1)
        {
          swift_release();
          break;
        }
      }
    }
LABEL_57:
    v49 = (uint64_t)v8[1] >> 6;
    if (__OFSUB__(v49, v6))
      goto LABEL_166;
    _HashTable.Header.bias.setter(v49 - v6);
    return;
  }
  v5 = a2;
  if (__OFSUB__(v11, a2))
    goto LABEL_165;
  if ((uint64_t)(v11 - a2) >= specialized static _HashTable.maximumCapacity(forScale:)(*a4 & 0x3FLL) / 3)
  {
LABEL_84:
    v75 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, v8, a5);
    v76 = 0;
    v138 = v8;
    v139 = a5;
    v140 = 0;
    v141 = v75;
    v142 = v77;
    v143 = v78;
    v144 = 0;
    while (1)
    {
      if (v141)
      {
        v79 = v138;
        v80 = ~(-1 << *v138);
        v81 = (uint64_t)v138[1] >> 6;
        v82 = v81 + (v141 ^ v80);
        v83 = v82 >= v80 ? ~(-1 << *v138) : 0;
        v84 = v82 - v83;
        if (v84 >= v5)
        {
          v43 = __OFSUB__(v84, v6);
          v85 = v84 - v6;
          if (v43)
            goto LABEL_162;
          v86 = *v138 & 0x3FLL;
          v87 = v139;
          v88 = ((v80 & ((v85 - v81) >> 63)) + v85 - v81) ^ v80;
          v89 = v88 ^ v141;
          v90 = v86 * v76;
          v91 = (v86 * v76) >> 6;
          *(_QWORD *)(v139 + 8 * v91) ^= (v88 ^ v141) << v90;
          v92 = 64 - (v90 & 0x3F);
          v93 = *v79 & 0x3FLL;
          if (v92 < v93)
          {
            v94 = v93 << v93;
            v43 = __OFADD__(v94, 64);
            v95 = v94 + 64;
            if (v43)
              goto LABEL_164;
            v96 = v95 - 1;
            v54 = v95 < 1;
            v97 = v95 + 62;
            if (!v54)
              v97 = v96;
            if (v91 + 1 == v97 >> 6)
              v98 = 0;
            else
              v98 = v91 + 1;
            *(_QWORD *)(v87 + 8 * v98) ^= v89 >> v92;
          }
          v141 = v88;
        }
      }
      _HashTable.BucketIterator.advance()();
      v76 = v140;
      if (!v140)
        return;
    }
  }
  if ((uint64_t)v11 < v5)
    goto LABEL_169;
  if (v5 < 0)
  {
LABEL_170:
    __break(1u);
LABEL_171:
    __break(1u);
LABEL_172:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if (v11 == v5)
    return;
  if (v11 <= v5)
    goto LABEL_171;
  v135 = a3 + 32;
  swift_retain();
  v133 = v11;
  do
  {
    v99 = v135 + 56 * v5;
    v101 = *(_QWORD *)v99;
    v100 = *(_QWORD *)(v99 + 8);
    v102 = *(_QWORD *)(v99 + 32);
    v103 = *(unsigned __int8 *)(v99 + 40);
    v104 = *(_QWORD *)(v99 + 48);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v101);
    v105 = *(void (**)(_QWORD **))(*(_QWORD *)v100 + 120);
    swift_retain();
    swift_bridgeObjectRetain();
    v105(&v138);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v103 == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v102);
    }
    Hasher._combine(_:)(v104);
    v106 = Hasher._finalize()();
    v107 = *a4;
    v108 = 1 << *a4;
    v109 = v108 - 1;
    if (__OFSUB__(v108, 1))
      goto LABEL_159;
    v110 = v109 & v106;
    v111 = _HashTable.UnsafeHandle._startIterator(bucket:)(v109 & v106, a4, a5);
    v138 = a4;
    v139 = a5;
    v140 = v110;
    v141 = v111;
    v142 = v112;
    v143 = v113;
    v144 = 0;
    if (v111)
    {
      v114 = (uint64_t)a4[1] >> 6;
      v115 = v114 + (v111 ^ v109);
      if (v115 >= v109)
        v116 = v108 - 1;
      else
        v116 = 0;
      if (v115 - v116 != v5)
      {
        v117 = 0;
        v118 = v107 & 0x3F;
        v119 = __OFADD__(v118 << v118, 64);
        v120 = (v118 << v118) + 126;
        if ((v118 << v118) + 64 >= 1)
          v120 = (v118 << v118) + 63;
        v121 = v120 >> 6;
        while (1)
        {
          if (++v110 == v108)
          {
            if ((v117 & 1) != 0)
              goto LABEL_172;
            v110 = 0;
            v117 = 1;
          }
          if (v113 >= v118)
          {
            v43 = __OFSUB__(v113, v118);
            v113 -= v118;
            if (v43)
              goto LABEL_152;
            v131 = v112 >> v118;
            v111 = v112 & v109;
            if ((v112 & v109) == 0)
            {
LABEL_144:
              v112 = v131;
              goto LABEL_145;
            }
          }
          else
          {
            v124 = (v110 * v118) >> 6;
            if (v113)
            {
              if (v119)
                goto LABEL_156;
              if (v124 + 1 == v121)
                v124 = 0;
              else
                ++v124;
            }
            v125 = v118 - v113;
            if (__OFSUB__(v118, v113))
              goto LABEL_153;
            if (v124 == 2 && v118 == 5)
              v127 = 32;
            else
              v127 = 64;
            v43 = __OFSUB__(v127, v125);
            v128 = v127 - v125;
            if (v43)
            {
LABEL_154:
              __break(1u);
LABEL_155:
              __break(1u);
LABEL_156:
              __break(1u);
LABEL_157:
              __break(1u);
LABEL_158:
              __break(1u);
LABEL_159:
              __break(1u);
LABEL_160:
              __break(1u);
LABEL_161:
              __break(1u);
LABEL_162:
              __break(1u);
LABEL_163:
              __break(1u);
LABEL_164:
              __break(1u);
LABEL_165:
              __break(1u);
LABEL_166:
              __break(1u);
LABEL_167:
              __break(1u);
LABEL_168:
              __break(1u);
LABEL_169:
              __break(1u);
              goto LABEL_170;
            }
            v129 = *(_QWORD *)(a5 + 8 * v124);
            v130 = (v129 << v113) | v112;
            v131 = v129 >> v125;
            v113 = v128;
            v111 = v130 & v109;
            if ((v130 & v109) == 0)
              goto LABEL_144;
          }
          v122 = v114 + (v111 ^ v109);
          if (v122 >= v109)
            v123 = v108 - 1;
          else
            v123 = 0;
          v112 = v131;
          if (v122 - v123 == v5)
            goto LABEL_144;
        }
      }
      v117 = 0;
LABEL_145:
      v144 = v117;
      v140 = v110;
      v141 = v111;
      v142 = v112;
      v143 = v113;
    }
    v132 = v5 - v136;
    if (__OFSUB__(v5, v136))
      goto LABEL_160;
    ++v5;
    _HashTable.BucketIterator.currentValue.setter(v132, 0);
    swift_bridgeObjectRelease();
    swift_release();
  }
  while (v5 != v133);
  swift_release();
}

uint64_t specialized _HashTable.UnsafeHandle.fill<A>(uncheckedUniqueElements:)(uint64_t result, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt v8;
  int v9;
  Swift::UInt v10;
  void (*v11)(_QWORD *);
  Swift::Int v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::UInt v41;
  _QWORD v42[2];
  Swift::Int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;

  v40 = *(_QWORD *)(result + 16);
  if (!v40)
    return result;
  v5 = 0;
  v39 = result + 32;
  while (1)
  {
    v6 = v39 + 56 * v5;
    v8 = *(_QWORD *)v6;
    v7 = *(_QWORD *)(v6 + 8);
    v41 = *(_QWORD *)(v6 + 32);
    v9 = *(unsigned __int8 *)(v6 + 40);
    v10 = *(_QWORD *)(v6 + 48);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v8);
    v11 = *(void (**)(_QWORD *))(*(_QWORD *)v7 + 120);
    swift_retain();
    swift_bridgeObjectRetain();
    v11(v42);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v9 == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v41);
    }
    Hasher._combine(_:)(v10);
    v12 = Hasher._finalize()();
    v13 = 1 << *a2;
    v14 = __OFSUB__(v13, 1);
    v15 = v13 - 1;
    if (v14)
      goto LABEL_42;
    v16 = v15 & v12;
    v17 = _HashTable.UnsafeHandle._startIterator(bucket:)(v15 & v12, a2, a3);
    v19 = v18;
    v21 = v20;
    swift_bridgeObjectRelease();
    swift_release();
    v42[0] = a2;
    v42[1] = a3;
    v43 = v16;
    v44 = v17;
    v45 = v19;
    v46 = v21;
    v47 = 0;
    if (v17)
      break;
LABEL_4:
    result = _HashTable.BucketIterator.currentValue.setter(v5++, 0);
    if (v5 == v40)
      return result;
  }
  v22 = 0;
  v23 = *a2 & 0x3FLL;
  v24 = 1 << *a2;
  v25 = v23 << *a2;
  v26 = v25 + 64;
  v27 = __OFADD__(v25, 64);
  v29 = v26 - 1;
  v28 = v26 < 1;
  v30 = v26 + 62;
  if (!v28)
    v30 = v29;
  v31 = v30 >> 6;
  while (1)
  {
    if (++v16 == v24)
    {
      if ((v22 & 1) != 0)
        goto LABEL_43;
      v16 = 0;
      v22 = 1;
    }
    if (v21 >= v23)
      break;
    v32 = (v16 * v23) >> 6;
    if (v21)
    {
      if (v27)
        goto LABEL_41;
      if (v32 + 1 == v31)
        v32 = 0;
      else
        ++v32;
    }
    v33 = v23 - v21;
    if (__OFSUB__(v23, v21))
      goto LABEL_39;
    if (v32 == 2 && v23 == 5)
      v35 = 32;
    else
      v35 = 64;
    v14 = __OFSUB__(v35, v33);
    v36 = v35 - v33;
    if (v14)
      goto LABEL_40;
    v37 = *(_QWORD *)(a3 + 8 * v32);
    v38 = (v37 << v21) | v19;
    v19 = v37 >> v33;
    v21 = v36;
LABEL_16:
    if ((v38 & (v24 - 1)) == 0)
    {
      v47 = v22;
      v45 = v19;
      v46 = v21;
      v43 = v16;
      v44 = 0;
      goto LABEL_4;
    }
  }
  v14 = __OFSUB__(v21, v23);
  v21 -= v23;
  if (!v14)
  {
    v38 = v19;
    v19 >>= v23;
    goto LABEL_16;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  Swift::Int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37[8];

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    return result;
  v6 = 0;
  v36 = result + 32;
  while (1)
  {
    outlined init with copy of WeakBox<SGEdge>(v36 + 8 * v6, (uint64_t)v37);
    Hasher.init(_seed:)();
    v7 = MEMORY[0x24954C3E4](v37);
    if (v7)
    {
      v8 = (void *)v7;
      Hasher._combine(_:)(1u);
      v9 = v8;
      NSObject.hash(into:)();

    }
    else
    {
      Hasher._combine(_:)(0);
    }
    v10 = Hasher._finalize()();
    v11 = 1 << *a2;
    v12 = __OFSUB__(v11, 1);
    v13 = v11 - 1;
    if (v12)
      goto LABEL_41;
    v14 = v13 & v10;
    v15 = _HashTable.UnsafeHandle._startIterator(bucket:)(v13 & v10, a2, a3);
    v17 = v16;
    v19 = v18;
    outlined destroy of WeakBox<SGEdge>((uint64_t)v37);
    if (v15)
      break;
LABEL_3:
    result = _HashTable.BucketIterator.currentValue.setter(v6++, 0);
    if (v6 == v3)
      return result;
  }
  v20 = 0;
  v21 = *a2 & 0x3FLL;
  v22 = 1 << *a2;
  v23 = v21 << *a2;
  v24 = v23 + 64;
  v25 = __OFADD__(v23, 64);
  v27 = v24 - 1;
  v26 = v24 < 1;
  v28 = v24 + 62;
  if (!v26)
    v28 = v27;
  while (1)
  {
    if (++v14 == v22)
    {
      if ((v20 & 1) != 0)
        goto LABEL_42;
      v14 = 0;
      v20 = 1;
    }
    if (v19 >= v21)
      break;
    v29 = (v14 * v21) >> 6;
    if (v19)
    {
      if (v25)
        goto LABEL_40;
      if (v29 + 1 == v28 >> 6)
        v29 = 0;
      else
        ++v29;
    }
    v30 = v21 - v19;
    if (__OFSUB__(v21, v19))
      goto LABEL_38;
    if (v29 == 2 && v21 == 5)
      v32 = 32;
    else
      v32 = 64;
    v12 = __OFSUB__(v32, v30);
    v33 = v32 - v30;
    if (v12)
      goto LABEL_39;
    v34 = *(_QWORD *)(a3 + 8 * v29);
    v35 = (v34 << v19) | v17;
    v17 = v34 >> v30;
    v19 = v33;
LABEL_15:
    if ((v35 & (v22 - 1)) == 0)
      goto LABEL_3;
  }
  v12 = __OFSUB__(v19, v21);
  v19 -= v21;
  if (!v12)
  {
    v35 = v17;
    v17 >>= v21;
    goto LABEL_15;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  Swift::UInt v6;
  Swift::Int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *(_QWORD *)(result + 16);
  if (!v35)
    return result;
  v5 = 0;
  v34 = result + 32;
  while (1)
  {
    v6 = *(unsigned __int8 *)(v34 + 24 * v5 + 16);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v6);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v7 = Hasher._finalize()();
    v8 = 1 << *a2;
    v9 = __OFSUB__(v8, 1);
    v10 = v8 - 1;
    if (v9)
      goto LABEL_38;
    v11 = v10 & v7;
    v12 = _HashTable.UnsafeHandle._startIterator(bucket:)(v10 & v7, a2, a3);
    v14 = v13;
    v16 = v15;
    outlined consume of TextureSource();
    if (v12)
      break;
LABEL_3:
    result = _HashTable.BucketIterator.currentValue.setter(v5++, 0);
    if (v5 == v35)
      return result;
  }
  v17 = 0;
  v18 = *a2 & 0x3FLL;
  v19 = 1 << *a2;
  v20 = v18 << *a2;
  v21 = v20 + 64;
  v22 = __OFADD__(v20, 64);
  v24 = v21 - 1;
  v23 = v21 < 1;
  v25 = v21 + 62;
  if (!v23)
    v25 = v24;
  v26 = v25 >> 6;
  while (1)
  {
    if (++v11 == v19)
    {
      if ((v17 & 1) != 0)
        goto LABEL_39;
      v11 = 0;
      v17 = 1;
    }
    if (v16 >= v18)
      break;
    v27 = (v11 * v18) >> 6;
    if (v16)
    {
      if (v22)
        goto LABEL_37;
      if (v27 + 1 == v26)
        v27 = 0;
      else
        ++v27;
    }
    v28 = v18 - v16;
    if (__OFSUB__(v18, v16))
      goto LABEL_35;
    if (v27 == 2 && v18 == 5)
      v30 = 32;
    else
      v30 = 64;
    v9 = __OFSUB__(v30, v28);
    v31 = v30 - v28;
    if (v9)
      goto LABEL_36;
    v32 = *(_QWORD *)(a3 + 8 * v27);
    v33 = (v32 << v16) | v14;
    v14 = v32 >> v28;
    v16 = v31;
LABEL_12:
    if ((v33 & (v19 - 1)) == 0)
      goto LABEL_3;
  }
  v9 = __OFSUB__(v16, v18);
  v16 -= v18;
  if (!v9)
  {
    v33 = v14;
    v14 >>= v18;
    goto LABEL_12;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized OrderedSet._find(_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return specialized OrderedSet._find(_:)(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
}

{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v5 = a3 + 4;
  v6 = a3[2];
  if (a2)
    return specialized _HashTable.UnsafeHandle._find<A>(_:in:)(a1, (uint64_t)v5, v6, (uint64_t *)(a2 + 16), a2 + 32);
  if (!v6)
    return 0;
  if (*v5 == a1)
    return 0;
  if (v6 == 1)
    return 0;
  if (a3[5] == a1)
    return 1;
  if (v6 == 2)
    return 0;
  if (a3[6] == a1)
    return 2;
  v8 = 0;
  v9 = a3 + 7;
  while (v6 - 3 != v8)
  {
    v10 = v9[v8++];
    if (v10 == a1)
      return v8 + 2;
  }
  return 0;
}

uint64_t specialized OrderedSet._find(_:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  Swift::Int v10;
  BOOL v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v7 = a4[2];
  if (a3)
  {
    v8 = (_QWORD *)(a3 + 16);
    v9 = a3 + 32;
    swift_retain();
    v10 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(a1, a2, (uint64_t)(a4 + 4), v7, v8, v9);
    swift_release();
  }
  else
  {
    if (!v7)
      return 0;
    v11 = a4[4] == a1 && a4[5] == a2;
    if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return 0;
    if (v7 == 1)
      return 0;
    if (a4[6] == a1 && a4[7] == a2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return 1;
    if (v7 == 2)
      return 0;
    if (a4[8] == a1 && a4[9] == a2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      return 2;
    }
    else
    {
      v13 = a4 + 11;
      v14 = 2;
      v15 = 3;
      while (1)
      {
        if (v7 == v15)
          return 0;
        ++v14;
        if (*(v13 - 1) == a1 && *v13 == a2)
          break;
        v10 = v15++;
        v13 += 2;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          return v10;
      }
      return v14;
    }
  }
  return v10;
}

Swift::Int specialized OrderedSet._find(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  Swift::Int v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  char v13;
  _BYTE v15[8];

  v4 = a3 + 32;
  v5 = *(_QWORD *)(a3 + 16);
  if (!a2)
  {
    if (!v5)
      return 0;
    v8 = 0;
    while (1)
    {
      outlined init with copy of WeakBox<SGEdge>(v4, (uint64_t)v15);
      v9 = (void *)MEMORY[0x24954C3E4](v15);
      v10 = MEMORY[0x24954C3E4](a1);
      v11 = (void *)v10;
      if (!v9)
        break;
      if (!v10)
      {
        v11 = v9;
LABEL_6:

        goto LABEL_7;
      }
      type metadata accessor for SGEdge();
      v12 = v9;
      v13 = static NSObject.== infix(_:_:)();

      if ((v13 & 1) != 0)
      {
LABEL_14:
        outlined destroy of WeakBox<SGEdge>((uint64_t)v15);
        return v8;
      }
LABEL_7:
      outlined destroy of WeakBox<SGEdge>((uint64_t)v15);
      ++v8;
      v4 += 8;
      if (v5 == v8)
        return 0;
    }
    if (!v10)
      goto LABEL_14;
    goto LABEL_6;
  }
  v6 = (_QWORD *)(a2 + 16);
  v7 = a2 + 32;
  swift_retain();
  v8 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(a1, v4, v5, v6, v7);
  swift_release();
  return v8;
}

uint64_t specialized OrderedSet._find(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *v4;
  uint64_t v5;
  Swift::Int *v6;
  uint64_t v7;
  Swift::Int v8;
  id v11;
  char v12;
  id v13;
  char v14;
  id v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;

  v4 = (id *)(a3 + 32);
  v5 = *(_QWORD *)(a3 + 16);
  if (!a2)
  {
    if (v5)
    {
      type metadata accessor for SGNode();
      v11 = *v4;
      v12 = static NSObject.== infix(_:_:)();

      if ((v12 & 1) != 0)
        return 0;
      if (v5 == 1)
        return 0;
      v13 = *(id *)(a3 + 40);
      v14 = static NSObject.== infix(_:_:)();

      if ((v14 & 1) != 0)
        return 1;
      if (v5 != 2)
      {
        v15 = *(id *)(a3 + 48);
        v16 = static NSObject.== infix(_:_:)();

        if ((v16 & 1) != 0)
          return 2;
        v17 = 0;
        v18 = a3 + 56;
        while (v5 - 3 != v17)
        {
          v19 = *(id *)(v18 + 8 * v17);
          v20 = static NSObject.== infix(_:_:)();

          ++v17;
          if ((v20 & 1) != 0)
            return v17 + 2;
        }
        return 0;
      }
    }
    return 0;
  }
  v6 = (Swift::Int *)(a2 + 16);
  v7 = a2 + 32;
  swift_retain();
  v8 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(a1, (uint64_t)v4, v5, v6, v7);
  swift_release();
  return v8;
}

uint64_t specialized OrderedSet._find(_:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t (*a4)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v6 = a3 + 4;
  v7 = a3[2];
  if (a2)
    return a4(a1, v6, v7, a2 + 16, a2 + 32);
  if (!v7)
    return 0;
  if (*v6 == a1)
    return 0;
  if (v7 == 1)
    return 0;
  if (a3[5] == a1)
    return 1;
  if (v7 == 2)
    return 0;
  if (a3[6] == a1)
    return 2;
  v9 = 0;
  v10 = a3 + 7;
  while (v7 - 3 != v9)
  {
    v11 = v10[v9++];
    if (v11 == a1)
      return v9 + 2;
  }
  return 0;
}

uint64_t Graph.insert(_:)(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  _OWORD v4[3];
  uint64_t v5;
  _OWORD v6[3];
  uint64_t v7;

  v1 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v1;
  v6[2] = *(_OWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 48);
  v2 = *(_OWORD *)(a1 + 72);
  v4[0] = *(_OWORD *)(a1 + 56);
  v4[1] = v2;
  v4[2] = *(_OWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 104);
  return Graph.connect(_:to:)((uint64_t)v6, (unint64_t)v4);
}

uint64_t specialized OrderedDictionary.subscript.setter(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  _QWORD v32[6];
  char v33[8];
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38[8];
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  _BYTE v42[24];

  outlined init with take of MetalFunctionNode?((uint64_t)a1, (uint64_t)v32, &demangling cache variable for type metadata for Graph.Adjacent?);
  v5 = v32[0];
  v6 = v32[1];
  v7 = v32[2];
  v27 = v32[3];
  v8 = v32[4];
  v9 = v32[5];
  v10 = specialized OrderedSet._find(_:)(a2, *(_QWORD *)v2, *(_QWORD **)(v2 + 8), (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
  v12 = v11;
  if ((v13 & 1) != 0)
  {
    result = outlined init with take of MetalFunctionNode?((uint64_t)a1, (uint64_t)v33, &demangling cache variable for type metadata for Graph.Adjacent?);
    if (v34)
    {
      v26 = a1;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      specialized OrderedSet._appendNew(_:in:)(a2, v12);
      v20 = *(_QWORD *)(v2 + 16);
      v2 += 16;
      v19 = v20;
      v21 = v6;
      v6 = v5;
      swift_retain();
      v22 = v7;
      v7 = v21;
      swift_retain();
      v14 = v22;
      swift_retain();
      swift_retain();
      swift_retain();
      v5 = v9;
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)v2 = v20;
      v9 = v8;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1);
        v19 = *(_QWORD *)v2;
      }
      v8 = *(_QWORD *)(v19 + 16);
      v16 = *(_QWORD *)(v19 + 24);
      v12 = v8 + 1;
      if (v8 < v16 >> 1)
        goto LABEL_12;
      goto LABEL_17;
    }
  }
  else
  {
    v14 = v10;
    outlined init with take of MetalFunctionNode?((uint64_t)a1, (uint64_t)v33, &demangling cache variable for type metadata for Graph.Adjacent?);
    if (v34)
    {
      v15 = *(_QWORD *)(v2 + 16);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v15 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v15);
      if ((v14 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else
      {
        v16 = *(_QWORD *)(v15 + 16);
        if (v14 < v16)
        {
          v17 = (_QWORD *)(v15 + 48 * v14);
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          v17[4] = v5;
          v17[5] = v6;
          v17[6] = v7;
          v17[7] = v27;
          v17[8] = v8;
          v17[9] = v9;
          outlined release of Graph.Adjacent?(a1);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          *(_QWORD *)(v2 + 16) = v15;
          swift_release();
          return swift_release();
        }
      }
      __break(1u);
LABEL_17:
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v12, 1);
      v19 = *(_QWORD *)v2;
LABEL_12:
      *(_QWORD *)(v19 + 16) = v12;
      v24 = (_QWORD *)(v19 + 48 * v8);
      v24[4] = v6;
      v24[5] = v7;
      v24[6] = v14;
      v24[7] = v27;
      v24[8] = v9;
      v24[9] = v5;
      outlined release of Graph.Adjacent?(v26);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      *(_QWORD *)v2 = v19;
      swift_release();
      return swift_release();
    }
    specialized OrderedSet._removeExistingMember(at:in:)(v14, v12, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (void (*)(void))specialized OrderedSet._regenerateHashTable(), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:), (void (*)(int64_t))specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:));
    specialized ContiguousArray.remove(at:)(v14, (uint64_t)&v28);
    v40 = v28;
    v25 = v31;
    v39 = v29;
    outlined init with take of MetalFunctionNode?((uint64_t)&v40, (uint64_t)v42, &demangling cache variable for type metadata for _HashTable.Storage?);
    outlined release of _HashTable.Storage?((uint64_t)v42);
    v41 = *((_QWORD *)&v40 + 1);
    outlined release of _HashTable.Storage?((uint64_t)&v41);
    outlined release of _HashTable.Storage?((uint64_t)&v39);
    v36 = v30;
    v35 = v25;
    outlined init with take of MetalFunctionNode?((uint64_t)&v36, (uint64_t)v38, &demangling cache variable for type metadata for _HashTable.Storage?);
    outlined release of _HashTable.Storage?((uint64_t)v38);
    v37 = *((_QWORD *)&v36 + 1);
    outlined release of _HashTable.Storage?((uint64_t)&v37);
    return outlined release of _HashTable.Storage?((uint64_t)&v35);
  }
  return result;
}

uint64_t *specialized OrderedDictionary.subscript.setter(_QWORD *a1, __int128 *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t *result;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v31[8];
  __int128 v32;
  uint64_t v33[7];
  _QWORD v34[7];
  _BYTE v35[8];
  uint64_t v36;
  __int128 v37;
  _OWORD v38[2];

  outlined init with take of MetalFunctionNode?((uint64_t)a1, (uint64_t)v34, &demangling cache variable for type metadata for Output??);
  v4 = v34[0];
  v25 = v34[1];
  v26 = v34[2];
  v27 = v34[3];
  v28 = v34[4];
  v22 = v34[6];
  v29 = v34[5];
  v6 = *v2;
  v5 = v2[1];
  v7 = *(_QWORD *)(v5 + 16);
  if (*v2)
  {
    swift_retain();
    swift_retain();
    v8 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)a2, v5 + 32, v7, (_QWORD *)(v6 + 16), v6 + 32);
    v10 = v9;
    v12 = v11;
  }
  else
  {
    swift_retain();
    v8 = specialized Collection<>.firstIndex(of:)(a2, v5 + 32, v7);
    v10 = v13;
    v12 = 0;
  }
  v38[0] = a2[1];
  swift_release();
  swift_release();
  if ((v10 & 1) != 0)
  {
    outlined init with take of MetalFunctionNode?((uint64_t)a1, (uint64_t)v35, &demangling cache variable for type metadata for Output??);
    if (v36 == 1)
    {
      swift_release();
      return (uint64_t *)outlined release of String((uint64_t)v38);
    }
    v5 = v22;
    outlined copy of Output?(v4, v25);
    specialized OrderedSet._appendNew(_:in:)(a2, v12);
    v18 = v2[2];
    v23 = v2 + 2;
    outlined copy of Output?(v4, v25);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v2[2] = v18;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v18 + 16) + 1, 1);
      v18 = *v23;
    }
    v7 = *(_QWORD *)(v18 + 16);
    v16 = *(_QWORD *)(v18 + 24);
    v15 = (_QWORD *)(v7 + 1);
    v12 = v4;
    if (v7 < v16 >> 1)
      goto LABEL_17;
  }
  else
  {
    outlined init with take of MetalFunctionNode?((uint64_t)a1, (uint64_t)v35, &demangling cache variable for type metadata for Output??);
    if (v36 == 1)
    {
      specialized OrderedSet._removeExistingMember(at:in:)(v8, v12, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(uint64_t))specialized OrderedSet._regenerateHashTable(), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:), (uint64_t)v31);
      swift_release();
      v37 = v32;
      outlined release of String((uint64_t)&v37);
      specialized ContiguousArray.remove(at:)(v8, (uint64_t)v33);
      swift_release();
      outlined release of String((uint64_t)v38);
      return outlined release of Input?(v33);
    }
    v15 = (_QWORD *)v2[2];
    outlined copy of Output?(v4, v25);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v15 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v15);
    if ((v8 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v16 = v15[2];
      if (v8 < v16)
      {
        v17 = &v15[7 * v8];
        v24 = v17[4];
        v21 = v17[5];
        outlined copy of Output?(v4, v25);
        outlined consume of Input?(v24, v21);
        v17[4] = v4;
        v17[5] = v25;
        v17[6] = v26;
        v17[7] = v27;
        v17[8] = v28;
        v17[9] = v29;
        v17[10] = v22;
        swift_release();
        outlined release of String((uint64_t)v38);
        outlined release of Output??(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Output??);
        result = outlined release of Output??(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Output??);
        v2[2] = (uint64_t)v15;
        return result;
      }
    }
    __break(1u);
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, (int64_t)v15, 1);
  v18 = *v23;
LABEL_17:
  *(_QWORD *)(v18 + 16) = v15;
  v20 = (_QWORD *)(v18 + 56 * v7);
  v20[4] = v12;
  v20[5] = v25;
  v20[6] = v26;
  v20[7] = v27;
  v20[8] = v28;
  v20[9] = v29;
  v20[10] = v5;
  swift_release();
  outlined release of String((uint64_t)v38);
  outlined release of Output??(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Output??);
  result = outlined release of Output??(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Output??);
  *v23 = v18;
  return result;
}

uint64_t specialized OrderedDictionary.subscript.setter(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t result;
  id v18;

  v4 = v3;
  v8 = *v4;
  v9 = (_QWORD *)v4[1];
  swift_retain();
  swift_retain();
  v10 = specialized OrderedSet._find(_:)(a2, a3, v8, v9);
  v12 = v11;
  v14 = v13;
  swift_release();
  swift_release();
  if ((v12 & 1) != 0)
  {
    if (!a1)
      return swift_bridgeObjectRelease();
    v18 = a1;
    specialized OrderedSet._appendNew(_:in:)(a2, a3, v14);
    v16 = v18;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    goto LABEL_10;
  }
  if (!a1)
  {
    specialized OrderedSet._removeExistingMember(at:in:)(v10, v14);
    swift_bridgeObjectRelease();
    v16 = (id)specialized ContiguousArray.remove(at:)(v10);
    goto LABEL_12;
  }
  v15 = v4[2];
  v16 = a1;
  result = swift_isUniquelyReferenced_nonNull_native();
  v4[2] = v15;
  if ((result & 1) == 0)
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v15);
  if ((v10 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v10 < *(_QWORD *)(v15 + 16))
  {
    objc_storeStrong((id *)(v15 + 8 * v10 + 32), a1);
LABEL_10:
    specialized ContiguousArray._endMutation()();

LABEL_12:
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t specialized OrderedDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v4 = v3;
  v8 = *v4;
  v9 = (_QWORD *)v4[1];
  swift_retain();
  swift_retain();
  v10 = specialized OrderedSet._find(_:)(a2, a3, v8, v9);
  v12 = v11;
  v14 = v13;
  swift_release();
  swift_release();
  if ((v12 & 1) != 0)
  {
    if (!a1)
      return swift_bridgeObjectRelease();
    swift_unknownObjectRetain();
    specialized OrderedSet._appendNew(_:in:)(a2, a3, v14);
    swift_unknownObjectRetain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
LABEL_10:
    specialized ContiguousArray._endMutation()();
    swift_unknownObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
  if (!a1)
  {
    specialized OrderedSet._removeExistingMember(at:in:)(v10, v14);
    swift_bridgeObjectRelease();
    specialized ContiguousArray.remove(at:)(v10, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v15 = v4[2];
  swift_unknownObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  v4[2] = v15;
  if ((result & 1) == 0)
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v15);
  if ((v10 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v10 < *(_QWORD *)(v15 + 16))
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(_QWORD *)(v15 + 8 * v10 + 32) = a1;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t specialized OrderedDictionary.subscript.setter(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  uint64_t v26;
  char v27;
  char v28;

  v9 = *v4;
  v10 = (_QWORD *)v4[1];
  swift_retain();
  swift_retain();
  v11 = specialized OrderedSet._find(_:)(a3, a4, v9, v10);
  v13 = v12;
  v15 = v14;
  swift_release();
  swift_release();
  if ((v13 & 1) != 0)
  {
    if (a2 != 0xFF)
    {
      outlined copy of MetalLibrary(a1, a2 & 1);
      specialized OrderedSet._appendNew(_:in:)(a3, a4, v15);
      v23 = v4[2];
      v4 += 2;
      v22 = v23;
      outlined copy of MetalLibrary(a1, a2 & 1);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v4 = v23;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v22 + 16) + 1, 1);
        v22 = *v4;
      }
      v15 = *(_QWORD *)(v22 + 16);
      v17 = *(_QWORD *)(v22 + 24);
      v16 = v15 + 1;
      if (v15 < v17 >> 1)
        goto LABEL_12;
      goto LABEL_17;
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (a2 != 0xFF)
    {
      v16 = v4[2];
      outlined copy of MetalLibrary(a1, a2 & 1);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v16 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v16);
      if ((v11 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else
      {
        v17 = *(_QWORD *)(v16 + 16);
        if (v11 < v17)
        {
          v18 = v16 + 16 * v11;
          v19 = *(_QWORD *)(v18 + 32);
          v20 = *(_BYTE *)(v18 + 40);
          outlined copy of MetalLibrary(a1, a2 & 1);
          outlined consume of MetalLibrary(v19, v20);
          *(_QWORD *)(v18 + 32) = a1;
          *(_BYTE *)(v18 + 40) = a2 & 1;
          swift_bridgeObjectRelease();
          outlined consume of MetalLibrary?(a1, a2);
          result = outlined consume of MetalLibrary?(a1, a2);
          v4[2] = v16;
          return result;
        }
      }
      __break(1u);
LABEL_17:
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v16, 1);
      v22 = *v4;
LABEL_12:
      *(_QWORD *)(v22 + 16) = v16;
      v25 = v22 + 16 * v15;
      *(_QWORD *)(v25 + 32) = a1;
      *(_BYTE *)(v25 + 40) = a2 & 1;
      swift_bridgeObjectRelease();
      outlined consume of MetalLibrary?(a1, a2);
      result = outlined consume of MetalLibrary?(a1, a2);
      *v4 = v22;
      return result;
    }
    specialized OrderedSet._removeExistingMember(at:in:)(v11, v15);
    swift_bridgeObjectRelease();
    v26 = specialized ContiguousArray.remove(at:)(v11);
    v28 = v27;
    swift_bridgeObjectRelease();
    return outlined consume of MetalLibrary(v26, v28 & 1);
  }
}

int64_t specialized OrderedDictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v3 = v2;
  result = specialized OrderedSet._find(_:)(a2, *(_QWORD *)v3, *(_QWORD **)(v3 + 8), (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
  v8 = v7;
  if ((v9 & 1) == 0)
  {
    v10 = result;
    v11 = (uint64_t *)(v3 + 16);
    if (!a1)
    {
      specialized OrderedSet._removeExistingMember(at:in:)(result, v7, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (void (*)(void))specialized OrderedSet._regenerateHashTable(), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:), (void (*)(int64_t))specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:));
      specialized ContiguousArray.remove(at:)(v10, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
      return swift_unknownObjectRelease();
    }
    v12 = *v11;
    swift_unknownObjectRetain();
    result = swift_isUniquelyReferenced_nonNull_native();
    *v11 = v12;
    if ((result & 1) == 0)
      specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v12);
    if ((v10 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v10 < *(_QWORD *)(v12 + 16))
    {
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_QWORD *)(v12 + 8 * v10 + 32) = a1;
      goto LABEL_10;
    }
    __break(1u);
    return result;
  }
  if (!a1)
    return result;
  swift_unknownObjectRetain();
  specialized OrderedSet._appendNew(_:in:)(a2, v8);
  swift_unknownObjectRetain();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
LABEL_10:
  specialized ContiguousArray._endMutation()();
  return swift_unknownObjectRelease_n();
}

void specialized OrderedSet.removeAll(keepingCapacity:)(char a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  int isUniquelyReferenced_native;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;

  v2 = v1;
  v3 = v1 + 1;
  if ((a1 & 1) == 0)
  {
    v2[1] = MEMORY[0x24BEE4AF8];
    swift_release();
    swift_release();
    *v2 = 0;
    return;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v5 = *v3;
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    specialized ContiguousArray.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v5 + 16));
    if (!*v2)
      return;
LABEL_10:
    isUniquelyReferenced_native = swift_isUniquelyReferenced_native();
    v9 = *v2;
    if (!isUniquelyReferenced_native)
    {
      if (!v9)
        goto LABEL_24;
      v9 = _HashTable.copy()((_QWORD *)*v2);
      swift_release();
      *v2 = v9;
    }
    if (v9)
    {
      v10 = (*(_QWORD *)(v9 + 16) & 0x3FLL) << *(_QWORD *)(v9 + 16);
      v11 = __OFADD__(v10, 64);
      v12 = v10 + 64;
      if (v11)
      {
        __break(1u);
      }
      else
      {
        v13 = v12 - 1;
        if (v12 < 1)
          v13 = v12 + 62;
        if (v12 >= -62)
        {
          if ((unint64_t)(v12 + 62) >= 0x7F)
            bzero((void *)(v9 + 32), 8 * (v13 >> 6));
          return;
        }
      }
      __break(1u);
    }
    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  if (*(_QWORD *)(v5 + 24) >= 2uLL)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Input>);
    v6 = (_QWORD *)swift_allocObject();
    v7 = _swift_stdlib_malloc_size(v6);
    v6[2] = 0;
    v6[3] = 2 * ((uint64_t)(v7 - 32) / 56);
  }
  else
  {
    v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  *v3 = (uint64_t)v6;
  swift_release();
  if (*v2)
    goto LABEL_10;
}

uint64_t specialized ContiguousArray.remove(at:)(unint64_t a1)
{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    v5 = v4 - 1;
    v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      v7 = &v3[2 * a1];
      v8 = v7[4];
      memmove(v7 + 4, v7 + 6, 16 * v6);
      v3[2] = v5;
      *v1 = v3;
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v3 = *v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  v5 = *(_QWORD *)(v3 + 16);
  if (v5 <= a1)
  {
    __break(1u);
  }
  else
  {
    v6 = v5 - 1;
    v7 = v5 - 1 - a1;
    if (v7 >= 0)
    {
      v8 = v3 + 8 * a1;
      v9 = *(_QWORD *)(v8 + 32);
      memmove((void *)(v8 + 32), (const void *)(v8 + 40), 8 * v7);
      *(_QWORD *)(v3 + 16) = v6;
      specialized ContiguousArray._endMutation()();
      return v9;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    v5 = v4 - 1;
    v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      v7 = v3 + 16 * a1;
      v8 = *(_QWORD *)(v7 + 32);
      memmove((void *)(v7 + 32), (const void *)(v7 + 48), 16 * v6);
      *(_QWORD *)(v3 + 16) = v5;
      *v1 = v3;
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    v5 = v4 - 1;
    v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      v7 = v3 + 16 * a1;
      v8 = *(_QWORD *)(v7 + 32);
      memmove((void *)(v7 + 32), (const void *)(v7 + 48), 16 * v6);
      *(_QWORD *)(v3 + 16) = v5;
      *v1 = v3;
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray.remove(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  __int128 v13;
  __int128 v14;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v5);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      v9 = v5 + 48 * a1;
      v10 = *(_QWORD *)(v9 + 32);
      v9 += 32;
      v11 = *(_QWORD *)(v9 + 24);
      v13 = *(_OWORD *)(v9 + 8);
      v14 = *(_OWORD *)(v9 + 32);
      result = (uint64_t)memmove((void *)v9, (const void *)(v9 + 48), 48 * v8);
      *(_QWORD *)(v5 + 16) = v7;
      *v2 = v5;
      *(_QWORD *)a2 = v10;
      *(_OWORD *)(a2 + 8) = v13;
      *(_QWORD *)(a2 + 24) = v11;
      *(_OWORD *)(a2 + 32) = v14;
      return result;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  _QWORD **v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t result;
  __int128 v13;
  __int128 v14;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v5);
  v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      v9 = &v5[7 * a1];
      v10 = *((_OWORD *)v9 + 2);
      v9 += 4;
      v11 = v9[6];
      v14 = *((_OWORD *)v9 + 1);
      v13 = *((_OWORD *)v9 + 2);
      result = (uint64_t)memmove(v9, v9 + 7, 56 * v8);
      v5[2] = v7;
      *v2 = v5;
      *(_OWORD *)a2 = v10;
      *(_OWORD *)(a2 + 16) = v14;
      *(_OWORD *)(a2 + 32) = v13;
      *(_QWORD *)(a2 + 48) = v11;
      return result;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  _QWORD **v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v5);
  v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    outlined init with take of MetalFunctionNode?((uint64_t)&v5[a1 + 4], a2, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
    if ((uint64_t)(v7 - a1) >= 0)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
      result = swift_arrayInitWithTakeFrontToBack();
      v5[2] = v7;
      *v2 = v5;
      return result;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray.remove(at:)@<X0>(unint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17;

  v7 = *v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v7 = a2(v7);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8 <= a1)
  {
    __break(1u);
  }
  else
  {
    v9 = v8 - 1;
    v10 = v8 - 1 - a1;
    if (v10 >= 0)
    {
      v11 = v7 + 56 * a1;
      v12 = *(_OWORD *)(v11 + 32);
      v11 += 32;
      v13 = *(_QWORD *)(v11 + 48);
      v14 = *(_BYTE *)(v11 + 40);
      v15 = *(_QWORD *)(v11 + 32);
      v17 = *(_OWORD *)(v11 + 16);
      result = (uint64_t)memmove((void *)v11, (const void *)(v11 + 56), 56 * v10);
      *(_QWORD *)(v7 + 16) = v9;
      *v3 = v7;
      *(_OWORD *)a3 = v12;
      *(_OWORD *)(a3 + 16) = v17;
      *(_QWORD *)(a3 + 32) = v15;
      *(_BYTE *)(a3 + 40) = v14;
      *(_QWORD *)(a3 + 48) = v13;
      return result;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray.remove(at:)(unint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t *v2;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v5 = *v2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v2 = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v5 = a2(v5);
    *v2 = v5;
  }
  v7 = *(_QWORD *)(v5 + 16);
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    v8 = v7 - 1;
    v9 = v7 - 1 - a1;
    if (v9 >= 0)
    {
      v10 = v5 + 8 * a1;
      v11 = *(_QWORD *)(v10 + 32);
      memmove((void *)(v10 + 32), (const void *)(v10 + 40), 8 * v9);
      *(_QWORD *)(v5 + 16) = v8;
      specialized ContiguousArray._endMutation()();
      return v11;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = a2(v5);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      v9 = v5 + 8 * a1;
      v10 = *(_QWORD *)(v9 + 32);
      memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(_QWORD *)(v5 + 16) = v7;
      *v2 = v5;
      return v10;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Graph.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(char *);
  char v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;

  v3 = v2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v20 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v3;
  if (v8 >= ArraySlice.endIndex.getter())
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, 1, 1, v5);
  v18 = a2;
  v19 = v6;
  v9 = v20;
  while (1)
  {
    v10 = (uint64_t (*)(char *))v3[5];
    ArraySlice.subscript.getter();
    v11 = v10(v9);
    v12 = v19;
    v13 = v11;
    result = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v9, v5);
    if ((v13 & 1) != 0)
      break;
    v15 = *v3 + 1;
    if (__OFADD__(*v3, 1))
    {
      __break(1u);
      goto LABEL_12;
    }
    *v3 = v15;
    if (v15 >= ArraySlice.endIndex.getter())
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v18, 1, 1, v5);
  }
  v16 = v18;
  ArraySlice.subscript.getter();
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v5);
  if (!__OFADD__(*v3, 1))
  {
    ++*v3;
    return result;
  }
LABEL_12:
  __break(1u);
  return result;
}

unint64_t Graph.output(connectedTo:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t result;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[7];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;

  v5 = *(_QWORD *)(v2 + 16);
  result = specialized OrderedSet._find(_:)(*(_QWORD *)a1, *(_QWORD *)v2, *(_QWORD **)(v2 + 8), (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
  if ((v7 & 1) != 0)
    goto LABEL_6;
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)(v5 + 16))
  {
    v8 = (_QWORD *)(v5 + 48 * result);
    v9 = v8[7];
    v10 = v8[8];
    v11 = v8[9];
    v27 = *(_OWORD *)(a1 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    outlined retain of String((uint64_t)&v27);
    swift_retain();
    specialized OrderedDictionary.subscript.getter(a1, v9, v10, v11, v19);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined release of String((uint64_t)&v27);
    result = outlined init with take of MetalFunctionNode?((uint64_t)v19, (uint64_t)&v20, &demangling cache variable for type metadata for Output??);
    v12 = v21;
    if (!v21)
    {
      result = (unint64_t)outlined release of Output??(v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Output??);
      v13 = 0;
      goto LABEL_7;
    }
    if (v21 != 1)
    {
      v17 = v25;
      v18 = v26;
      v15 = v23;
      v16 = v24;
      v14 = v22;
      v13 = v20;
      swift_retain();
      outlined retain of String((uint64_t)&v27);
      swift_bridgeObjectRelease();
      result = swift_release();
      goto LABEL_8;
    }
LABEL_6:
    v13 = 0;
    v12 = 0;
LABEL_7:
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
LABEL_8:
    *a2 = v13;
    a2[1] = v12;
    a2[2] = v14;
    a2[3] = v15;
    a2[4] = v16;
    a2[5] = v17;
    a2[6] = v18;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t Graph.remove(_:)(uint64_t a1)
{
  return specialized Graph.remove(_:)(*(_QWORD *)(a1 + 24));
}

{
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  unint64_t v5;
  void (*v6)(_QWORD *, _QWORD);
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  char v32;
  int v33;
  uint64_t result;
  unint64_t v35;
  uint64_t v36;
  int64_t v37;
  char v38;
  unint64_t v39;
  _QWORD *v40;
  char v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t);
  char v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int64_t *v56;
  int64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  __int128 *v65;
  char v66;
  _QWORD *v67;
  char v68;
  _QWORD *v69;
  char v70;
  _QWORD *v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  BOOL v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unsigned int v113;
  unsigned int v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t *v117;
  void (*v118)(_QWORD *, _QWORD);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD v130[4];
  __int128 v131[3];
  uint64_t v132;
  __int128 v133;
  __int128 v134[2];
  __int128 v135;
  unint64_t v136;
  _OWORD v137[2];

  v2 = *(_OWORD *)(a1 + 72);
  v134[0] = *(_OWORD *)(a1 + 56);
  v134[1] = v2;
  v135 = *(_OWORD *)(a1 + 88);
  v136 = *(_QWORD *)(a1 + 104);
  v3 = *((_QWORD *)&v134[0] + 1);
  v137[0] = v2;
  v4 = *(_OWORD *)(a1 + 16);
  v131[0] = *(_OWORD *)a1;
  v131[1] = v4;
  v131[2] = *(_OWORD *)(a1 + 32);
  v132 = *(_QWORD *)(a1 + 48);
  v133 = v4;
  v5 = *((_QWORD *)&v131[0] + 1);
  swift_retain();
  outlined retain of String((uint64_t)v137);
  swift_retain();
  outlined retain of String((uint64_t)&v133);
  v6 = (void (*)(_QWORD *, _QWORD))specialized OrderedDictionary.subscript.modify(v130, *(uint64_t *)&v131[0]);
  if (!v7[1])
  {
    v6(v130, 0);
    goto LABEL_77;
  }
  v8 = v7;
  v118 = v6;
  v129 = v3;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  v10 = *v8;
  v9 = v8[1];
  v11 = *(_QWORD *)(v9 + 16);
  if (*v8)
  {
    v1 = v10 + 16;
    swift_retain();
    swift_retain();
    v5 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v131, v9 + 32, v11, (_QWORD *)(v10 + 16), v10 + 32);
    v13 = v12;
    v15 = v14;
  }
  else
  {
    swift_retain();
    v5 = specialized Collection<>.firstIndex(of:)(v131, v9 + 32, v11);
    v13 = v16;
    v15 = 0;
  }
  v17 = (uint64_t)(v8 + 2);
  v125 = *((_QWORD *)&v137[0] + 1);
  v126 = *(_QWORD *)&v137[0];
  swift_release();
  swift_release();
  if ((v13 & 1) == 0)
  {
    v18 = *(_QWORD **)v17;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v17 = v18;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v18 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v18);
      *(_QWORD *)v17 = v18;
    }
    if ((v5 & 0x8000000000000000) != 0)
      goto LABEL_166;
    v20 = v18[2];
    if (v5 < v20)
    {
      v21 = &v18[2 * v5];
      v24 = v21[5];
      v22 = v21 + 5;
      v23 = v24;
      v25 = *(_QWORD *)(v24 + 16);
      if (!v25)
        goto LABEL_72;
      v127 = *(_QWORD *)&v134[0];
      v111 = v135;
      v115 = v136;
      v117 = v22;
      v113 = BYTE8(v135);
      v105 = BYTE8(v135) ^ 1;
      swift_retain();
      v5 = 0;
      v26 = 0;
      while (1)
      {
        v27 = v23 + v5;
        if (*(_QWORD *)(v23 + v5 + 32) == v127)
        {
          v17 = v25;
          v15 = *(_QWORD *)(v27 + 48);
          v28 = *(_QWORD *)(v27 + 56);
          v119 = *(_QWORD *)(v27 + 64);
          v9 = *(unsigned __int8 *)(v27 + 72);
          v29 = *(_QWORD *)(v27 + 80);
          v30 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v27 + 40) + 128);
          swift_retain();
          swift_bridgeObjectRetain();
          if ((v30(v129) & 1) != 0)
          {
            if (v15 == v126 && v28 == v125)
            {
              swift_bridgeObjectRelease();
              swift_release();
              v25 = v17;
              if ((v9 & 1) == 0)
              {
LABEL_28:
                v33 = v105;
                if (v119 != v111)
                  v33 = 0;
                if (v33 == 1 && v29 == v115)
                {
LABEL_32:
                  result = swift_release();
                  v35 = v26 + 1;
                  if (!__OFADD__(v26, 1))
                  {
                    v1 = *v22;
                    v20 = *(_QWORD *)(*v22 + 16);
                    if (v35 == v20)
                    {
                      v25 = v26;
                      goto LABEL_67;
                    }
                    v5 += 136;
                    v25 = v26;
LABEL_99:
                    if (v35 >= v20)
                    {
                      __break(1u);
LABEL_163:
                      __break(1u);
LABEL_164:
                      __break(1u);
LABEL_165:
                      __break(1u);
LABEL_166:
                      __break(1u);
                      break;
                    }
                    v26 = v1 + v5;
                    v20 = *(_QWORD *)(v1 + v5 - 48);
                    if (v20 == v127)
                    {
                      v15 = *(_QWORD *)(v26 - 32);
                      v74 = *(_QWORD *)(v26 - 24);
                      v107 = *(_QWORD *)(v26 - 16);
                      v17 = *(unsigned __int8 *)(v26 - 8);
                      v121 = *(_QWORD *)v26;
                      v9 = *(_QWORD *)(**(_QWORD **)(v26 - 40) + 128);
                      swift_retain();
                      swift_bridgeObjectRetain();
                      if ((((uint64_t (*)(uint64_t))v9)(v129) & 1) != 0)
                      {
                        if (v15 == v126 && v74 == v125)
                        {
                          swift_bridgeObjectRelease();
                          result = swift_release();
                          v22 = v117;
                          goto LABEL_107;
                        }
                        v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        swift_bridgeObjectRelease();
                        result = swift_release();
                        v22 = v117;
                        if ((v15 & 1) != 0)
                        {
LABEL_107:
                          if ((v17 & 1) != 0)
                          {
                            if (v121 == v115)
                              v20 = v113;
                            else
                              v20 = 0;
                            if ((v20 & 1) != 0)
                            {
LABEL_128:
                              ++v35;
                              v1 = *v22;
                              v20 = *(_QWORD *)(*v22 + 16);
                              v5 += 56;
                              if (v35 == v20)
                                goto LABEL_67;
                              goto LABEL_99;
                            }
                          }
                          else
                          {
                            v20 = v113;
                            if ((v113 & 1) == 0)
                            {
                              v20 = v111;
                              if (v107 == v111)
                              {
                                v20 = v115;
                                if (v121 == v115)
                                  goto LABEL_128;
                              }
                            }
                          }
                        }
                      }
                      else
                      {
                        swift_bridgeObjectRelease();
                        result = swift_release();
                        v22 = v117;
                      }
                    }
                    if (v35 != v25)
                    {
                      if (v25 < 0)
                        goto LABEL_175;
                      v75 = *(_QWORD *)(v1 + 16);
                      if (v25 >= v75)
                        goto LABEL_176;
                      if (v35 >= v75)
                        goto LABEL_177;
                      v76 = v1 + 32 + 56 * v25;
                      v9 = *(_QWORD *)(v76 + 24);
                      v97 = *(_QWORD *)(v76 + 16);
                      v99 = *(_QWORD *)(v76 + 8);
                      v95 = *(_QWORD *)(v76 + 32);
                      v93 = *(_BYTE *)(v76 + 40);
                      v91 = *(_QWORD *)(v76 + 48);
                      v77 = *(_QWORD *)(v26 - 40);
                      v122 = *(_QWORD *)(v26 - 48);
                      v17 = *(_QWORD *)(v26 - 32);
                      v15 = *(_QWORD *)(v26 - 24);
                      v108 = *(_QWORD *)(v26 - 16);
                      v26 = *(unsigned __int8 *)(v26 - 8);
                      v101 = *(_QWORD *)v76;
                      v103 = *(_QWORD *)(v1 + v5);
                      v78 = *v117;
                      swift_retain();
                      swift_bridgeObjectRetain();
                      swift_retain();
                      swift_bridgeObjectRetain();
                      result = swift_isUniquelyReferenced_nonNull_native();
                      *v117 = v78;
                      if ((result & 1) == 0)
                      {
                        result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v78);
                        v78 = result;
                        *v117 = result;
                      }
                      if ((unint64_t)v25 >= *(_QWORD *)(v78 + 16))
                        goto LABEL_178;
                      v79 = v78 + 56 * v25;
                      v1 = *(_QWORD *)(v79 + 40);
                      *(_QWORD *)(v79 + 32) = v122;
                      *(_QWORD *)(v79 + 40) = v77;
                      *(_QWORD *)(v79 + 48) = v17;
                      *(_QWORD *)(v79 + 56) = v15;
                      *(_QWORD *)(v79 + 64) = v108;
                      *(_BYTE *)(v79 + 72) = v26;
                      *(_QWORD *)(v79 + 80) = v103;
                      swift_bridgeObjectRelease();
                      swift_release();
                      v22 = v117;
                      v80 = *v117;
                      result = swift_isUniquelyReferenced_nonNull_native();
                      *v117 = v80;
                      if ((result & 1) == 0)
                      {
                        result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v80);
                        v80 = result;
                        *v117 = result;
                      }
                      if (v35 >= *(_QWORD *)(v80 + 16))
                        goto LABEL_179;
                      v81 = (_QWORD *)(v80 + v5);
                      *(v81 - 6) = v101;
                      *(v81 - 5) = v99;
                      *(v81 - 4) = v97;
                      *(v81 - 3) = v9;
                      *(v81 - 2) = v95;
                      *((_BYTE *)v81 - 8) = v93;
                      *v81 = v91;
                      swift_bridgeObjectRelease();
                      result = swift_release();
                    }
                    v82 = __OFADD__(v25++, 1);
                    if (v82)
                      goto LABEL_164;
                    goto LABEL_128;
                  }
LABEL_185:
                  __break(1u);
                  goto LABEL_186;
                }
                goto LABEL_14;
              }
              goto LABEL_23;
            }
            v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_release();
            v25 = v17;
            if ((v15 & 1) != 0)
            {
              if ((v9 & 1) == 0)
                goto LABEL_28;
LABEL_23:
              v32 = v113;
              if (v29 != v115)
                v32 = 0;
              if ((v32 & 1) != 0)
                goto LABEL_32;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_release();
            v25 = v17;
          }
        }
LABEL_14:
        ++v26;
        v5 += 56;
        if (v25 == v26)
        {
          swift_release();
          v35 = *(_QWORD *)(*v22 + 16);
LABEL_67:
          if ((uint64_t)v35 >= v25)
            goto LABEL_73;
          __break(1u);
LABEL_69:
          swift_release();
          v35 = *(_QWORD *)(*v117 + 16);
LABEL_70:
          if ((uint64_t)v35 < v26)
          {
            __break(1u);
LABEL_72:
            v35 = 0;
LABEL_73:
            v54 = v25;
LABEL_76:
            specialized ContiguousArray.replaceSubrange<A>(_:with:)(v54, v35);
            specialized OrderedSet._regenerateHashTable()();
            v118(v130, 0);
LABEL_77:
            v15 = specialized OrderedDictionary.subscript.modify(v130, *(uint64_t *)&v134[0]);
            if (!*(_QWORD *)(v55 + 8))
            {
              ((void (*)(_QWORD *, _QWORD))v15)(v130, 0);
              v64 = &v133;
              v65 = v137;
              goto LABEL_97;
            }
            v56 = (int64_t *)(v55 + 24);
            swift_retain();
            swift_retain();
            swift_release();
            swift_release();
            v37 = *v56;
            v57 = v56[1];
            v58 = *(_QWORD *)(v57 + 16);
            if (*v56)
            {
              swift_retain();
              swift_retain();
              v59 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v134, v57 + 32, v58, (_QWORD *)(v37 + 16), v37 + 32);
              v61 = v60;
              v63 = v62;
            }
            else
            {
              swift_retain();
              v59 = specialized Collection<>.firstIndex(of:)(v134, v57 + 32, v58);
              v61 = v66;
              v63 = 0;
            }
            v9 = (uint64_t)(v56 + 2);
            swift_release();
            swift_release();
            if ((v61 & 1) != 0)
            {
LABEL_88:
              specialized OrderedSet._appendNew(_:in:)(v134, v63);
              v69 = *(_QWORD **)v9;
              v70 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)v9 = v69;
              if ((v70 & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v69[2] + 1, 1);
                v69 = *(_QWORD **)v9;
              }
              v5 = v69[2];
              v42 = v69[3];
              v37 = v5 + 1;
              if (v5 >= v42 >> 1)
                goto LABEL_172;
            }
            else
            {
              v67 = *(_QWORD **)v9;
              v68 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)v9 = v67;
              if ((v68 & 1) == 0)
              {
                v67 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v67);
                *(_QWORD *)v9 = v67;
              }
              if ((v59 & 0x8000000000000000) == 0)
              {
                if (v59 >= v67[2])
                {
                  __break(1u);
                  goto LABEL_88;
                }
LABEL_96:
                v73 = &v67[7 * v59];
                outlined consume of Input?(v73[4], v73[5]);
                v73[10] = 0;
                *((_OWORD *)v73 + 3) = 0u;
                *((_OWORD *)v73 + 4) = 0u;
                *((_OWORD *)v73 + 2) = 0u;
                ((void (*)(_QWORD *, _QWORD))v15)(v130, 0);
                v64 = v137;
                v65 = &v133;
LABEL_97:
                swift_release();
                outlined release of String((uint64_t)v65);
                swift_release();
                return outlined release of String((uint64_t)v64);
              }
LABEL_171:
              __break(1u);
LABEL_172:
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v37, 1);
              v69 = *(_QWORD **)v9;
            }
            v69[2] = v37;
            v71 = &v69[7 * v5];
            *((_OWORD *)v71 + 2) = 0u;
            *((_OWORD *)v71 + 3) = 0u;
            *((_OWORD *)v71 + 4) = 0u;
            v71[10] = 0;
            v67 = *(_QWORD **)v9;
            v72 = *(_QWORD *)(*(_QWORD *)v9 + 16);
            result = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)v9 = v67;
            if ((result & 1) == 0)
            {
              result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v67);
              v67 = (_QWORD *)result;
              *(_QWORD *)v9 = result;
            }
            if (v72)
            {
              if (v72 <= v67[2])
              {
                v59 = v72 - 1;
                goto LABEL_96;
              }
            }
            else
            {
              __break(1u);
            }
            __break(1u);
LABEL_175:
            __break(1u);
LABEL_176:
            __break(1u);
LABEL_177:
            __break(1u);
LABEL_178:
            __break(1u);
LABEL_179:
            __break(1u);
LABEL_180:
            __break(1u);
LABEL_181:
            __break(1u);
LABEL_182:
            __break(1u);
LABEL_183:
            __break(1u);
LABEL_184:
            __break(1u);
            goto LABEL_185;
          }
LABEL_75:
          v54 = v26;
          goto LABEL_76;
        }
      }
    }
    __break(1u);
    goto LABEL_168;
  }
  specialized OrderedSet._appendNew(_:in:)(v131, v15);
  v9 = specialized OrderedSet.init<A>(_:)(MEMORY[0x24BEE4AF8]);
  v1 = v36;
  v37 = v8[2];
  v38 = swift_isUniquelyReferenced_nonNull_native();
  v8[2] = v37;
  if ((v38 & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v37 + 16) + 1, 1);
    v37 = *(_QWORD *)v17;
  }
  v5 = *(_QWORD *)(v37 + 16);
  v20 = *(_QWORD *)(v37 + 24);
  v15 = v5 + 1;
  if (v5 >= v20 >> 1)
  {
LABEL_168:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v15, 1);
    v37 = *(_QWORD *)v17;
  }
  *(_QWORD *)(v37 + 16) = v15;
  v39 = v37 + 16 * v5;
  *(_QWORD *)(v39 + 32) = v9;
  *(_QWORD *)(v39 + 40) = v1;
  v40 = *(_QWORD **)v17;
  v5 = *(_QWORD *)(*(_QWORD *)v17 + 16);
  v41 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)v17 = v40;
  if ((v41 & 1) == 0)
  {
    v40 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v40);
    *(_QWORD *)v17 = v40;
  }
  if (!v5)
  {
    __break(1u);
    goto LABEL_170;
  }
  v42 = v40[2];
  if (v5 > v42)
  {
LABEL_170:
    __break(1u);
    goto LABEL_171;
  }
  v43 = &v40[2 * v5 - 2];
  v46 = v43[5];
  v44 = v43 + 5;
  v45 = v46;
  v26 = *(_QWORD *)(v46 + 16);
  if (!v26)
  {
    v35 = 0;
    goto LABEL_75;
  }
  v128 = *(_QWORD *)&v134[0];
  v112 = v135;
  v116 = v136;
  v117 = v44;
  v114 = BYTE8(v135);
  v106 = BYTE8(v135) ^ 1;
  swift_retain();
  v5 = 0;
  v25 = 0;
  while (1)
  {
    v47 = v45 + v5;
    if (*(_QWORD *)(v45 + v5 + 32) != v128)
      goto LABEL_45;
    v17 = v26;
    v15 = *(_QWORD *)(v47 + 48);
    v48 = *(_QWORD *)(v47 + 56);
    v120 = *(_QWORD *)(v47 + 64);
    v9 = *(unsigned __int8 *)(v47 + 72);
    v49 = *(_QWORD *)(v47 + 80);
    v50 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v47 + 40) + 128);
    swift_retain();
    swift_bridgeObjectRetain();
    if ((v50(v129) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v26 = v17;
      goto LABEL_45;
    }
    if (v15 != v126 || v48 != v125)
    {
      v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_release();
      v26 = v17;
      if ((v15 & 1) == 0)
        goto LABEL_45;
      if ((v9 & 1) == 0)
        break;
      goto LABEL_54;
    }
    swift_bridgeObjectRelease();
    swift_release();
    v26 = v17;
    if ((v9 & 1) == 0)
      break;
LABEL_54:
    v52 = v114;
    if (v49 != v116)
      v52 = 0;
    if ((v52 & 1) != 0)
      goto LABEL_63;
LABEL_45:
    ++v25;
    v5 += 56;
    if (v26 == v25)
      goto LABEL_69;
  }
  v53 = v106;
  if (v120 != v112)
    v53 = 0;
  if (v53 != 1 || v49 != v116)
    goto LABEL_45;
LABEL_63:
  result = swift_release();
  v35 = v25 + 1;
  if (!__OFADD__(v25, 1))
  {
    v1 = *v44;
    v20 = *(_QWORD *)(*v44 + 16);
    if (v35 == v20)
    {
      v26 = v25;
      goto LABEL_70;
    }
    v5 += 136;
    v26 = v25;
    while (2)
    {
      if (v35 >= v20)
        goto LABEL_163;
      v25 = v1 + v5;
      v20 = *(_QWORD *)(v1 + v5 - 48);
      if (v20 == v128)
      {
        v15 = *(_QWORD *)(v25 - 32);
        v83 = *(_QWORD *)(v25 - 24);
        v109 = *(_QWORD *)(v25 - 16);
        v17 = *(unsigned __int8 *)(v25 - 8);
        v123 = *(_QWORD *)v25;
        v9 = *(_QWORD *)(**(_QWORD **)(v25 - 40) + 128);
        swift_retain();
        swift_bridgeObjectRetain();
        if ((((uint64_t (*)(uint64_t))v9)(v129) & 1) != 0)
        {
          if (v15 == v126 && v83 == v125)
          {
            swift_bridgeObjectRelease();
            result = swift_release();
            v44 = v117;
            goto LABEL_139;
          }
          v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          result = swift_release();
          v44 = v117;
          if ((v15 & 1) != 0)
          {
LABEL_139:
            if ((v17 & 1) != 0)
            {
              if (v123 == v116)
                v20 = v114;
              else
                v20 = 0;
              if ((v20 & 1) != 0)
              {
LABEL_160:
                ++v35;
                v1 = *v44;
                v20 = *(_QWORD *)(*v44 + 16);
                v5 += 56;
                if (v35 == v20)
                  goto LABEL_70;
                continue;
              }
            }
            else
            {
              v20 = v114;
              if ((v114 & 1) == 0)
              {
                v20 = v112;
                if (v109 == v112)
                {
                  v20 = v116;
                  if (v123 == v116)
                    goto LABEL_160;
                }
              }
            }
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          result = swift_release();
          v44 = v117;
        }
      }
      break;
    }
    if (v35 != v26)
    {
      if (v26 < 0)
        goto LABEL_180;
      v84 = *(_QWORD *)(v1 + 16);
      if (v26 >= v84)
        goto LABEL_181;
      if (v35 >= v84)
        goto LABEL_182;
      v85 = v1 + 32 + 56 * v26;
      v9 = *(_QWORD *)(v85 + 24);
      v98 = *(_QWORD *)(v85 + 16);
      v100 = *(_QWORD *)(v85 + 8);
      v96 = *(_QWORD *)(v85 + 32);
      v94 = *(_BYTE *)(v85 + 40);
      v92 = *(_QWORD *)(v85 + 48);
      v86 = *(_QWORD *)(v25 - 40);
      v124 = *(_QWORD *)(v25 - 48);
      v17 = *(_QWORD *)(v25 - 32);
      v15 = *(_QWORD *)(v25 - 24);
      v110 = *(_QWORD *)(v25 - 16);
      v25 = *(unsigned __int8 *)(v25 - 8);
      v102 = *(_QWORD *)v85;
      v104 = *(_QWORD *)(v1 + v5);
      v87 = *v117;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      result = swift_isUniquelyReferenced_nonNull_native();
      *v117 = v87;
      if ((result & 1) == 0)
      {
        result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v87);
        v87 = result;
        *v117 = result;
      }
      if ((unint64_t)v26 >= *(_QWORD *)(v87 + 16))
        goto LABEL_183;
      v88 = v87 + 56 * v26;
      v1 = *(_QWORD *)(v88 + 40);
      *(_QWORD *)(v88 + 32) = v124;
      *(_QWORD *)(v88 + 40) = v86;
      *(_QWORD *)(v88 + 48) = v17;
      *(_QWORD *)(v88 + 56) = v15;
      *(_QWORD *)(v88 + 64) = v110;
      *(_BYTE *)(v88 + 72) = v25;
      *(_QWORD *)(v88 + 80) = v104;
      swift_bridgeObjectRelease();
      swift_release();
      v44 = v117;
      v89 = *v117;
      result = swift_isUniquelyReferenced_nonNull_native();
      *v117 = v89;
      if ((result & 1) == 0)
      {
        result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v89);
        v89 = result;
        *v117 = result;
      }
      if (v35 >= *(_QWORD *)(v89 + 16))
        goto LABEL_184;
      v90 = (_QWORD *)(v89 + v5);
      *(v90 - 6) = v102;
      *(v90 - 5) = v100;
      *(v90 - 4) = v98;
      *(v90 - 3) = v9;
      *(v90 - 2) = v96;
      *((_BYTE *)v90 - 8) = v94;
      *v90 = v92;
      swift_bridgeObjectRelease();
      result = swift_release();
    }
    v82 = __OFADD__(v26++, 1);
    if (v82)
      goto LABEL_165;
    goto LABEL_160;
  }
LABEL_186:
  __break(1u);
  return result;
}

unint64_t Graph.moveEdge(from:to:)(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_OWORD *, _QWORD);
  uint64_t v22;
  void (*v23)(_OWORD *, _QWORD);
  void (*v24)(uint64_t *, _QWORD);
  uint64_t v25;
  void (*v26)(_QWORD *, _QWORD);
  uint64_t v27;
  void (*v28)(_QWORD *, _QWORD);
  uint64_t v29;
  void (*v30)(_QWORD *, _QWORD);
  uint64_t v31;
  void (*v32)(_QWORD *, _QWORD);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _QWORD v39[4];
  _QWORD v40[4];
  uint64_t v41[7];
  uint64_t v42[7];
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52[5];
  char v53;
  uint64_t v54;
  _OWORD v55[3];
  uint64_t v56;
  _QWORD v57[9];

  v3 = v2;
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(v3 + 16);
  result = specialized OrderedSet._find(_:)(*(_QWORD *)a1, *(_QWORD *)v3, *(_QWORD **)(v3 + 8), (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
  if ((v9 & 1) != 0)
    return result;
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (result >= *(_QWORD *)(v7 + 16))
  {
LABEL_22:
    __break(1u);
    return result;
  }
  v10 = (_QWORD *)(v7 + 48 * result);
  v38 = a2;
  v11 = v10[4];
  v12 = v10[5];
  v13 = v10[7];
  v15 = v10[8];
  v14 = v10[9];
  v51 = *(_OWORD *)(a1 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined retain of String((uint64_t)&v51);
  swift_retain();
  swift_retain();
  specialized OrderedDictionary.subscript.getter(a1, v13, v15, v14, v41);
  swift_release();
  outlined release of String((uint64_t)&v51);
  outlined consume of Graph.Adjacent?(v11, v12);
  result = outlined init with take of MetalFunctionNode?((uint64_t)v41, (uint64_t)&v43, &demangling cache variable for type metadata for Output??);
  v16 = v44;
  if (v44 < 2)
    return result;
  v17 = v43;
  v18 = v46;
  v19 = v48 & 1;
  v52[0] = v43;
  v52[1] = v44;
  v34 = v47;
  v35 = v45;
  v52[2] = v45;
  v52[3] = v46;
  v52[4] = v47;
  v53 = v48 & 1;
  v36 = v49;
  v54 = v49;
  v20 = *(_QWORD *)v38;
  swift_retain();
  swift_bridgeObjectRetain();
  v21 = (void (*)(_OWORD *, _QWORD))specialized OrderedDictionary.subscript.modify(v55, v20);
  v37 = v17;
  if (*(_QWORD *)(v22 + 8))
  {
    v50 = v38[1];
    v57[0] = v17;
    v57[1] = v16;
    v57[2] = v35;
    v57[3] = v18;
    v57[4] = v34;
    v57[5] = v19;
    v57[6] = v36;
    v23 = v21;
    swift_retain();
    outlined retain of String((uint64_t)&v50);
    swift_retain();
    swift_bridgeObjectRetain();
    specialized OrderedDictionary.subscript.setter(v57, v38);
    v23(v55, 0);
  }
  else
  {
    v21(v55, 0);
  }
  v24 = (void (*)(uint64_t *, _QWORD))specialized OrderedDictionary.subscript.modify(v42, v6);
  if (*(_QWORD *)(v25 + 8))
  {
    v55[0] = xmmword_245FBFF10;
    memset(&v55[1], 0, 32);
    v56 = 0;
    swift_retain();
    outlined retain of String((uint64_t)&v51);
    specialized OrderedDictionary.subscript.setter(v55, (__int128 *)a1);
  }
  v24(v42, 0);
  v26 = (void (*)(_QWORD *, _QWORD))specialized OrderedDictionary.subscript.modify(v40, v37);
  if (!*(_QWORD *)(v27 + 8))
    goto LABEL_14;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  swift_retain();
  swift_bridgeObjectRetain();
  v28 = (void (*)(_QWORD *, _QWORD))specialized OrderedDictionary.subscript.modify(v39, v52);
  if (!*(_QWORD *)(v29 + 8))
  {
    v28(v39, 0);
    swift_bridgeObjectRelease();
    swift_release();
LABEL_14:
    v26(v40, 0);
    goto LABEL_15;
  }
  specialized OrderedSet.remove(_:)(a1, v42);
  v28(v39, 0);
  swift_bridgeObjectRelease();
  swift_release();
  v26(v40, 0);
  outlined release of Input?(v42);
LABEL_15:
  v30 = (void (*)(_QWORD *, _QWORD))specialized OrderedDictionary.subscript.modify(v40, v37);
  if (*(_QWORD *)(v31 + 8))
  {
    swift_retain();
    swift_retain();
    swift_release();
    swift_release();
    swift_retain();
    swift_bridgeObjectRetain();
    v32 = (void (*)(_QWORD *, _QWORD))specialized OrderedDictionary.subscript.modify(v39, v52);
    if (*(_QWORD *)(v33 + 8))
      specialized OrderedSet._append(_:)(v38);
    v32(v39, 0);
    swift_bridgeObjectRelease();
    swift_release();
  }
  v30(v40, 0);
  outlined release of Output??(v41, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Output??);
  swift_bridgeObjectRelease();
  return swift_release();
}

unint64_t Graph.copyEdge(originalDestination:newDestination:)(uint64_t a1, unint64_t a2)
{
  __int128 *v2;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[7];
  uint64_t v18[14];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _BYTE v23[8];
  uint64_t v24;
  _OWORD v25[3];
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _OWORD v38[2];

  v5 = v2[9];
  v37 = v2[8];
  v38[0] = v5;
  *(_OWORD *)((char *)v38 + 9) = *(__int128 *)((char *)v2 + 153);
  v6 = v2[5];
  v33 = v2[4];
  v34 = v6;
  v7 = v2[7];
  v35 = v2[6];
  v36 = v7;
  v8 = v2[1];
  v29 = *v2;
  v30 = v8;
  v9 = v2[3];
  v31 = v2[2];
  v32 = v9;
  v10 = v8;
  result = specialized OrderedSet._find(_:)(*(_QWORD *)a2, v29, *((_QWORD **)&v29 + 1), (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
  if ((v12 & 1) != 0)
  {
LABEL_8:
    Graph.edge(to:)(a1, v18);
    outlined init with take of MetalFunctionNode?((uint64_t)v18, (uint64_t)&v19, &demangling cache variable for type metadata for Edge?);
    if (*((_QWORD *)&v19 + 1))
    {
      v25[0] = v19;
      v25[1] = v20;
      v25[2] = v21;
      v26 = v22;
      v27 = v20;
      swift_retain();
      outlined retain of String((uint64_t)&v27);
      outlined release of Edge?(v18);
      Graph.connect(_:to:)((uint64_t)v25, a2);
      swift_release();
      outlined release of String((uint64_t)&v27);
      return 1;
    }
    return 0;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (result >= *(_QWORD *)(v10 + 16))
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v13 = (_QWORD *)(v10 + 48 * result);
  v14 = v13[7];
  v15 = v13[8];
  v16 = v13[9];
  v28 = *(_OWORD *)(a2 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined retain of String((uint64_t)&v28);
  swift_retain();
  specialized OrderedDictionary.subscript.getter(a2, v14, v15, v16, v17);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined release of String((uint64_t)&v28);
  outlined init with take of MetalFunctionNode?((uint64_t)v17, (uint64_t)v23, &demangling cache variable for type metadata for Output??);
  if (!v24)
  {
    outlined release of Output??(v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Output??);
    goto LABEL_8;
  }
  if (v24 == 1)
    goto LABEL_8;
  swift_retain();
  outlined retain of String((uint64_t)&v28);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return 0;
}

unint64_t Graph.replaceShaderGraphData(for:with:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t result;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;

  v5 = *(_QWORD **)(v2 + 64);
  outlined copy of NodePersonality(a2);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 24);
    if ((v7 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v5 = (_QWORD *)result;
  v7 = *(_QWORD *)(a1 + 24);
  if ((v7 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (v7 < v5[2])
  {
    v8 = &v5[6 * v7];
    v9 = v8[4];
    v8[4] = a2;
    result = outlined consume of NodePersonality(v9);
    *(_QWORD *)(v2 + 64) = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

void Graph.hoist(_:)(_QWORD *a1)
{
  unint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  int64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  char isUniquelyReferenced_nonNull_native;
  char v46;
  uint64_t v47;
  uint64_t v48;
  _BOOL8 v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  _OWORD v84[9];
  _OWORD v85[2];
  unint64_t v86;
  _OWORD v87[9];
  _OWORD v88[2];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  _BYTE v98[25];
  unint64_t v99[3];
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  _OWORD v117[9];
  _OWORD v118[2];
  unint64_t v119[3];

  outlined init with take of NodePersonality(a1, &v116);
  outlined init with take of NodePersonality(&v116, v119);
  v2 = v119[0];
  if (v119[0] >> 61 == 6)
  {
    v73 = a1;
    v119[0] &= 0x1FFFFFFFFFFFFFFFuLL;
    v3 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x40);
    v4 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x50);
    v5 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x60);
    v87[6] = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x70);
    v6 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
    v7 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x30);
    v87[1] = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x20);
    v87[2] = v7;
    v87[4] = v4;
    v87[5] = v5;
    v87[3] = v3;
    v8 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x80);
    v9 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x90);
    v10 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0xA0);
    *(_OWORD *)((char *)v88 + 9) = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0xA9);
    v87[8] = v9;
    v88[0] = v10;
    v87[7] = v8;
    v87[0] = v6;
    v11 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x90);
    v96 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x80);
    v97 = v11;
    *(_OWORD *)v98 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0xA0);
    *(_OWORD *)&v98[9] = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0xA9);
    v12 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x50);
    v92 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x40);
    v93 = v12;
    v13 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x70);
    v94 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x60);
    v95 = v13;
    v14 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x20);
    v89 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
    v90 = v14;
    v91 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x30);
    outlined retain of Graph((uint64_t)v87);
    Graph.flatten()();
    v15 = v94;
    v16 = v97;
    v79 = *(_QWORD *)&v98[8];
    v80 = *((_QWORD *)&v95 + 1);
    v86 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v72 = v15;
    v71 = v16;
    if (*(_QWORD *)(v93 + 16))
    {
      v17 = v93 + 32;
      v75 = *(_QWORD *)(v93 + 16);
      swift_bridgeObjectRetain_n();
      outlined copy of NodePersonality(v15);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of NodePersonality(v16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v18 = v17;
      v19 = v75;
      v20 = 0;
      v74 = v17;
      while (1)
      {
        v21 = (unint64_t *)(v18 + 48 * v20);
        v22 = v21[3];
        if (v22 == -7)
          goto LABEL_32;
        if (v80 == v22 || v79 == v22)
          goto LABEL_32;
        v77 = v20;
        v25 = *v21;
        v24 = v21[1];
        v26 = v21[2];
        v27 = *(_QWORD *)(v24 + 16);
        v82 = v21[3];
        v83 = v26;
        v81 = *v21;
        if (v27)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of NodePersonality(v25);
          *(_QWORD *)&v117[0] = MEMORY[0x24BEE4AF8];
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 0);
          v28 = *(_QWORD *)&v117[0];
          v29 = (uint64_t *)(v24 + 56);
          do
          {
            v30 = *(v29 - 2);
            v31 = *(v29 - 1);
            v32 = *v29;
            *(_QWORD *)&v117[0] = v28;
            v34 = *(_QWORD *)(v28 + 16);
            v33 = *(_QWORD *)(v28 + 24);
            swift_retain();
            swift_bridgeObjectRetain();
            if (v34 >= v33 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
              v28 = *(_QWORD *)&v117[0];
            }
            *(_QWORD *)(v28 + 16) = v34 + 1;
            v35 = (_QWORD *)(v28 + 24 * v34);
            v35[4] = v31;
            v35[5] = v32;
            v35[6] = v30;
            v29 += 7;
            --v27;
          }
          while (v27);
          v78 = v28;
          swift_bridgeObjectRelease();
          v25 = v81;
          v26 = v83;
          v36 = *(_QWORD *)(v83 + 16);
          if (v36)
          {
LABEL_15:
            *(_QWORD *)&v117[0] = MEMORY[0x24BEE4AF8];
            swift_bridgeObjectRetain();
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36, 0);
            v37 = *(_QWORD *)&v117[0];
            v38 = (uint64_t *)(v26 + 56);
            do
            {
              v39 = *(v38 - 2);
              v40 = *(v38 - 1);
              v41 = *v38;
              *(_QWORD *)&v117[0] = v37;
              v43 = *(_QWORD *)(v37 + 16);
              v42 = *(_QWORD *)(v37 + 24);
              swift_retain();
              swift_bridgeObjectRetain();
              if (v43 >= v42 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
                v37 = *(_QWORD *)&v117[0];
              }
              *(_QWORD *)(v37 + 16) = v43 + 1;
              v44 = (_QWORD *)(v37 + 24 * v43);
              v44[4] = v40;
              v44[5] = v41;
              v44[6] = v39;
              v38 += 7;
              --v36;
            }
            while (v36);
            swift_bridgeObjectRelease();
            v25 = v81;
            goto LABEL_22;
          }
        }
        else
        {
          swift_bridgeObjectRetain();
          outlined copy of NodePersonality(v25);
          swift_bridgeObjectRetain();
          v78 = MEMORY[0x24BEE4AF8];
          v36 = *(_QWORD *)(v26 + 16);
          if (v36)
            goto LABEL_15;
        }
        v37 = MEMORY[0x24BEE4AF8];
LABEL_22:
        specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(*(_QWORD *)(v76 + 40), v78, v37, v25, v76 + 64, v76, v99);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v117[0] = v86;
        v47 = specialized __RawDictionaryStorage.find<A>(_:)(v82);
        v48 = *(_QWORD *)(v86 + 16);
        v49 = (v46 & 1) == 0;
        v50 = v48 + v49;
        if (__OFADD__(v48, v49))
          goto LABEL_42;
        v51 = v46;
        if (*(_QWORD *)(v86 + 24) >= v50)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            specialized _NativeDictionary.copy()();
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v50, isUniquelyReferenced_nonNull_native);
          v52 = specialized __RawDictionaryStorage.find<A>(_:)(v82);
          if ((v51 & 1) != (v53 & 1))
          {
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return;
          }
          v47 = v52;
        }
        v54 = *(_QWORD *)&v117[0];
        if ((v51 & 1) != 0)
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v117[0] + 56) + 8 * v47) = v100;
        else
          specialized _NativeDictionary._insert(at:key:value:)(v47, v82, v100, *(_QWORD *)&v117[0]);
        v86 = v54;
        swift_bridgeObjectRelease();
        outlined init with take of NodePersonality(v99, &v115);
        outlined release of NodePersonality(&v115);
        v114 = v99[1];
        outlined release of [Input]((uint64_t)&v114);
        v113 = v99[2];
        outlined release of [Input]((uint64_t)&v113);
        outlined consume of NodePersonality(v25);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v19 = v75;
        v18 = v74;
        v20 = v77;
LABEL_32:
        if ((uint64_t)++v20 >= (uint64_t)v19)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_41;
        }
        if (v20 >= v19)
        {
          __break(1u);
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }
      }
    }
    outlined copy of NodePersonality(v15);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_41:
    v60 = swift_bridgeObjectRetain();
    v61 = specialized Set.init<A>(_:)(v60, (void (*)(void))lazy protocol witness table accessor for type Output and conformance Output, (uint64_t)&type metadata for Output, &demangling cache variable for type metadata for _SetStorage<Output>);
    swift_bridgeObjectRelease();
    v62 = swift_bridgeObjectRetain();
    v63 = specialized Set.init<A>(_:)(v62, (void (*)(void))lazy protocol witness table accessor for type Input and conformance Input, (uint64_t)&type metadata for Input, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<Input>);
    v64 = swift_bridgeObjectRelease();
    v117[7] = v96;
    v117[8] = v97;
    v118[0] = *(_OWORD *)v98;
    *(_OWORD *)((char *)v118 + 9) = *(_OWORD *)&v98[9];
    v117[4] = v93;
    v117[5] = v94;
    v117[6] = v95;
    v117[0] = v89;
    v117[1] = v90;
    v117[2] = v91;
    v117[3] = v92;
    v65 = v89;
    v66 = v90;
    MEMORY[0x24BDAC7A8](v64);
    outlined retain of Graph((uint64_t)v117);
    swift_retain();
    swift_retain();
    swift_retain();
    v67 = specialized Sequence.compactMap<A>(_:)(v65, *((uint64_t *)&v65 + 1), v66, (void (*)(_QWORD *__return_ptr, uint64_t, __int128 *))partial apply for closure #1 in Graph.sinkNodes());
    swift_release();
    swift_release();
    swift_release();
    specialized Graph.DepthFirstEdgeIterator.init(_:initial:)((uint64_t *)v117, v67, &v101);
    outlined release of Graph((uint64_t)v117);
    v69 = v73[2];
    v112 = v73[1];
    v68 = v112;
    v111 = v69;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined retain of NodePersonality(&v116);
    outlined retain of [Input]((uint64_t)&v112);
    outlined retain of [Input]((uint64_t)&v111);
    specialized Sequence.forEach(_:)((uint64_t *)&v101, v61, v63, v68, v69, (__int128 *)v76, (uint64_t *)&v86);
    outlined release of NodePersonality(&v116);
    outlined release of [Input]((uint64_t)&v112);
    outlined release of [Input]((uint64_t)&v111);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v108 = v101;
    v70 = v102;
    outlined init with take of MetalFunctionNode?((uint64_t)&v108, (uint64_t)&v110, &demangling cache variable for type metadata for _HashTable.Storage?);
    outlined release of _HashTable.Storage?((uint64_t)&v110);
    v109 = *((_QWORD *)&v108 + 1);
    outlined release of _HashTable.Storage?((uint64_t)&v109);
    v107 = v70;
    outlined release of _HashTable.Storage?((uint64_t)&v107);
    v106 = v103;
    outlined release of [Input]((uint64_t)&v106);
    v105 = v104;
    outlined release of [Input]((uint64_t)&v105);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized Graph.remove(_:)(v73[3]);
    outlined consume of NodePersonality(v71);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v84[8] = v97;
    v85[0] = *(_OWORD *)v98;
    *(_OWORD *)((char *)v85 + 9) = *(_OWORD *)&v98[9];
    v84[4] = v93;
    v84[5] = v94;
    v84[6] = v95;
    v84[7] = v96;
    v84[0] = v89;
    v84[1] = v90;
    v84[2] = v91;
    v84[3] = v92;
    outlined release of Graph((uint64_t)v84);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for logger != -1)
LABEL_43:
      swift_once();
    v55 = type metadata accessor for Logger();
    __swift_project_value_buffer(v55, (uint64_t)logger);
    v56 = Logger.logObject.getter();
    v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc();
      v59 = swift_slowAlloc();
      *(_QWORD *)&v117[0] = v59;
      *(_DWORD *)v58 = 136315138;
      *(_QWORD *)&v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x3A5F287473696F68, 0xE900000000000029, (uint64_t *)v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_245E46000, v56, v57, "%s: Called on a non-graph node.", v58, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v59, -1, -1);
      MEMORY[0x24954C33C](v58, -1, -1);
    }

  }
}

unint64_t *Graph.node(containingInput:)@<X0>(unint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v4 = *result;
  if (*result == -7)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0uLL;
LABEL_6:
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v6;
    *(_QWORD *)(a2 + 16) = v7;
    *(_OWORD *)(a2 + 24) = v9;
    *(_BYTE *)(a2 + 40) = v8;
    return result;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v10 = *(_QWORD *)(v2 + 64);
    if (v4 < *(_QWORD *)(v10 + 16))
    {
      v11 = v10 + 48 * v4;
      v5 = *(_QWORD *)(v11 + 32);
      v6 = *(_QWORD *)(v11 + 40);
      v7 = *(_QWORD *)(v11 + 48);
      v12 = *(_OWORD *)(v11 + 56);
      v8 = *(_BYTE *)(v11 + 72);
      outlined copy of NodePersonality(v5);
      swift_bridgeObjectRetain();
      result = (unint64_t *)swift_bridgeObjectRetain();
      v9 = v12;
      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

__n128 Graph.connectedBreathFirstUpstreamSubgraph(rootedAt:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  _OWORD *inited;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t EdgeIteratorV5edgestAG_tFA2G2IDVXEfU0_AF0E0VTf1cn_nTf4xg_nTm;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __n128 result;
  __int128 v25;
  _QWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30[7];
  uint64_t v31;
  _BYTE v32[48];
  _BYTE v33[8];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  _BYTE v41[8];
  uint64_t v42;
  uint64_t v43;
  unint64_t v44[3];

  v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ShaderGraphNode>);
  inited = (_OWORD *)swift_initStackObject();
  inited[1] = xmmword_245FBECD0;
  outlined init with take of NodePersonality((_QWORD *)a1, v44);
  v7 = *(_QWORD *)(a1 + 8);
  v42 = *(_QWORD *)(a1 + 16);
  v43 = v7;
  v8 = *(_OWORD *)(a1 + 25);
  v9 = *(_OWORD *)(a1 + 16);
  inited[2] = *(_OWORD *)a1;
  inited[3] = v9;
  *(_OWORD *)((char *)inited + 57) = v8;
  outlined retain of Graph((uint64_t)v3);
  outlined retain of NodePersonality(v44);
  outlined retain of [Input]((uint64_t)&v43);
  outlined retain of [Input]((uint64_t)&v42);
  specialized Graph.BreathFirstEdgeIterator.init(_:initial:)(v3, (uint64_t)inited, &v27);
  outlined release of Graph((uint64_t)v3);
  v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v26 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v39 = v27;
  v11 = v28;
  outlined init with take of MetalFunctionNode?((uint64_t)&v39, (uint64_t)v41, &demangling cache variable for type metadata for _HashTable.Storage?);
  v40 = *((_QWORD *)&v39 + 1);
  v37 = *((_QWORD *)&v28 + 1);
  v38 = v11;
  v35 = *((_QWORD *)&v29 + 1);
  v36 = v29;
  *(_OWORD *)v32 = v27;
  *(_OWORD *)&v32[16] = v28;
  *(_OWORD *)&v32[32] = v29;
  outlined retain of _HashTable.Storage?((uint64_t)v41);
  outlined retain of _HashTable.Storage?((uint64_t)&v40);
  outlined retain of _HashTable.Storage?((uint64_t)&v38);
  outlined retain of [Input]((uint64_t)&v37);
  outlined retain of [Input]((uint64_t)&v36);
  outlined retain of [Input]((uint64_t)&v35);
  Graph.BreathFirstEdgeIterator.next()(v30);
  v12 = v30[0];
  v13 = v31;
  outlined init with take of MetalFunctionNode?((uint64_t)v30, (uint64_t)v33, &demangling cache variable for type metadata for Edge?);
  while (v34)
  {
    specialized OrderedSet._find(_:)(v13, 0, v10, (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
    if ((v15 & 1) != 0)
    {
      specialized OrderedSet._appendNew(_:in:)(v13, v14);
      v10 = v26;
    }
    specialized OrderedSet._find(_:)(v12, 0, v10, (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
    if ((v17 & 1) != 0)
    {
      specialized OrderedSet._appendNew(_:in:)(v12, v16);
      outlined release of Edge?(v30);
      v10 = v26;
    }
    else
    {
      outlined release of Edge?(v30);
    }
    Graph.BreathFirstEdgeIterator.next()(v30);
    v12 = v30[0];
    v13 = v31;
    outlined init with take of MetalFunctionNode?((uint64_t)v30, (uint64_t)v33, &demangling cache variable for type metadata for Edge?);
  }
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined retain of Graph((uint64_t)v3);
  EdgeIteratorV5edgestAG_tFA2G2IDVXEfU0_AF0E0VTf1cn_nTf4xg_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF0dE4NodeV2IDVG_AJs5NeverOTg504_s11d54Graph0B0V25connectedUpstreamSubgraph8rootedAtSayAA0aB4H61VG5nodes_AC22DepthFirstEdgeIteratorV5edgestAG_tFA2G2IDVXEfU0_AF0E0VTf1cn_nTf4xg_nTm((uint64_t)v10, (uint64_t)v3);
  outlined release of Graph((uint64_t)v3);
  swift_release();
  swift_release();
  v19 = (_OWORD *)swift_initStackObject();
  v19[1] = xmmword_245FBECD0;
  v20 = *(_OWORD *)(a1 + 25);
  v21 = *(_OWORD *)(a1 + 16);
  v19[2] = *(_OWORD *)a1;
  v19[3] = v21;
  *(_OWORD *)((char *)v19 + 57) = v20;
  outlined retain of Graph((uint64_t)v3);
  outlined retain of NodePersonality(v44);
  outlined retain of [Input]((uint64_t)&v43);
  outlined retain of [Input]((uint64_t)&v42);
  specialized Graph.BreathFirstEdgeIterator.init(_:initial:)(v3, (uint64_t)v19, v32);
  v22 = *(_QWORD *)v32;
  v23 = *(_QWORD *)&v32[40];
  outlined release of Graph((uint64_t)v3);
  outlined release of _HashTable.Storage?((uint64_t)v41);
  outlined release of _HashTable.Storage?((uint64_t)&v40);
  outlined release of _HashTable.Storage?((uint64_t)&v38);
  outlined release of [Input]((uint64_t)&v37);
  outlined release of [Input]((uint64_t)&v36);
  outlined release of [Input]((uint64_t)&v35);
  result = *(__n128 *)&v32[8];
  v25 = *(_OWORD *)&v32[24];
  *(_QWORD *)a2 = EdgeIteratorV5edgestAG_tFA2G2IDVXEfU0_AF0E0VTf1cn_nTf4xg_nTm;
  *(_QWORD *)(a2 + 8) = v22;
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v25;
  *(_QWORD *)(a2 + 48) = v23;
  return result;
}

unint64_t Graph.removeEdge(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[7];
  _BYTE v25[8];
  uint64_t v26;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  __int128 v35;
  _QWORD v36[5];
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;

  v3 = *(_QWORD *)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v4 = (__int128 *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_BYTE *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(v1 + 16);
  result = specialized OrderedSet._find(_:)(*(_QWORD *)a1, *(_QWORD *)v1, *(_QWORD **)(v1 + 8), (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
  if ((v12 & 1) != 0)
    return result;
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (result >= *(_QWORD *)(v10 + 16))
  {
LABEL_9:
    __break(1u);
    return result;
  }
  v13 = (_QWORD *)(v10 + 48 * result);
  v21 = v9;
  v22 = v6;
  v14 = v13[4];
  v15 = v13[5];
  v20 = v7;
  v16 = v13[7];
  v19 = v8;
  v18 = v13[8];
  v17 = v13[9];
  v35 = *v4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined retain of String((uint64_t)&v35);
  swift_retain();
  swift_retain();
  specialized OrderedDictionary.subscript.getter(a1, v16, v18, v17, v24);
  swift_release();
  outlined release of String((uint64_t)&v35);
  outlined consume of Graph.Adjacent?(v14, v15);
  result = outlined init with take of MetalFunctionNode?((uint64_t)v24, (uint64_t)v25, &demangling cache variable for type metadata for Output??);
  if (v26 != 1)
  {
    outlined init with take of MetalFunctionNode?((uint64_t)v25, (uint64_t)v27, &demangling cache variable for type metadata for Output?);
    result = outlined init with take of MetalFunctionNode?((uint64_t)v27, (uint64_t)&v28, &demangling cache variable for type metadata for Output?);
    if (v29)
    {
      v36[0] = v28;
      v36[1] = v29;
      v36[2] = v30;
      v36[3] = v31;
      v36[4] = v32;
      v37 = v33;
      v38 = v34;
      v39 = v3;
      v40 = v23;
      v41 = v5;
      v42 = v22;
      v43 = v20;
      v44 = v19 & 1;
      v45 = v21;
      swift_retain();
      outlined retain of String((uint64_t)&v35);
      outlined release of Output??(v24, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Output??);
      swift_retain();
      swift_bridgeObjectRetain();
      Graph.remove(_:)((uint64_t)v36);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      return (unint64_t)outlined release of Output??(v24, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Output??);
    }
  }
  return result;
}

uint64_t specialized OrderedSet._removeExistingMember(at:in:)@<X0>(int64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized OrderedSet._removeExistingMember(at:in:)(a1, a2, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(uint64_t))specialized OrderedSet._regenerateHashTable(), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:), a3);
}

uint64_t specialized OrderedSet._removeExistingMember(at:in:)(int64_t a1, uint64_t a2)
{
  return specialized OrderedSet._removeExistingMember(at:in:)(a1, a2, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (void (*)(void))specialized OrderedSet._regenerateHashTable(), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:), (void (*)(int64_t))specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:));
}

{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(v2[1] + 16);
  v6 = *v2;
  if (v5 <= specialized OrderedSet._minimumCapacity.getter(*v2))
  {
    v10 = specialized ContiguousArray.remove(at:)(a1);
    specialized OrderedSet._regenerateHashTable()();
    return v10;
  }
  if (!v6)
    return specialized ContiguousArray.remove(at:)(a1);
  result = swift_isUniquelyReferenced_native();
  v8 = *v2;
  if ((_DWORD)result)
    goto LABEL_6;
  if (v8)
  {
    v8 = _HashTable.copy()((_QWORD *)*v2);
    result = swift_release();
    *v2 = v8;
LABEL_6:
    if (v8)
    {
      swift_retain();
      result = specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(a2, v8 + 16, v8 + 32, v2);
      if (__OFADD__(a1, 1))
      {
        __break(1u);
      }
      else if (a1 + 1 >= a1)
      {
        v9 = v2[1];
        swift_retain();
        specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(a1, a1 + 1, v9, (uint64_t *)(v8 + 16), (_QWORD *)(v8 + 32));
        swift_release();
        swift_release();
        return specialized ContiguousArray.remove(at:)(a1);
      }
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized OrderedSet._removeExistingMember(at:in:)@<X0>(int64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t *)@<X4>, uint64_t a6@<X8>)
{
  uint64_t *v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  _OWORD v23[2];
  uint64_t v24;
  char v25;
  uint64_t v26;

  v13 = *(_QWORD *)(v6[1] + 16);
  v14 = *v6;
  if (v13 <= specialized OrderedSet._minimumCapacity.getter(*v6))
  {
    v18 = specialized ContiguousArray.remove(at:)(a1, a3, (uint64_t)v23);
    result = a4(v18);
    goto LABEL_12;
  }
  if (!v14)
  {
LABEL_10:
    result = specialized ContiguousArray.remove(at:)(a1, a3, (uint64_t)v23);
LABEL_12:
    v19 = v26;
    v20 = v24;
    v21 = v25;
    v22 = v23[1];
    *(_OWORD *)a6 = v23[0];
    *(_OWORD *)(a6 + 16) = v22;
    *(_QWORD *)(a6 + 32) = v20;
    *(_BYTE *)(a6 + 40) = v21;
    *(_QWORD *)(a6 + 48) = v19;
    return result;
  }
  result = swift_isUniquelyReferenced_native();
  v16 = *v6;
  if (!(_DWORD)result)
  {
    if (!v16)
      goto LABEL_16;
    v16 = _HashTable.copy()((_QWORD *)*v6);
    result = swift_release();
    *v6 = v16;
  }
  if (v16)
  {
    swift_retain();
    result = a5(a2, v16 + 16, v16 + 32, v6);
    if (__OFADD__(a1, 1))
    {
      __break(1u);
    }
    else if (a1 + 1 >= a1)
    {
      v17 = v6[1];
      swift_retain();
      specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(a1, a1 + 1, v17, (_QWORD *)(v16 + 16), v16 + 32);
      swift_release();
      swift_release();
      goto LABEL_10;
    }
    __break(1u);
  }
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

void specialized OrderedSet._removeExistingMember(at:in:)(int64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_native;
  uint64_t v10;
  uint64_t v11;

  v7 = *(_QWORD *)(v3[1] + 16);
  v8 = *v3;
  if (v7 <= specialized OrderedSet._minimumCapacity.getter(*v3))
  {
    specialized ContiguousArray.remove(at:)(a1, a3);
    specialized OrderedSet._regenerateHashTable()();
    return;
  }
  if (!v8)
  {
LABEL_10:
    specialized ContiguousArray.remove(at:)(a1, a3);
    return;
  }
  isUniquelyReferenced_native = swift_isUniquelyReferenced_native();
  v10 = *v3;
  if (isUniquelyReferenced_native)
    goto LABEL_6;
  if (v10)
  {
    v10 = _HashTable.copy()((_QWORD *)*v3);
    swift_release();
    *v3 = v10;
LABEL_6:
    if (v10)
    {
      swift_retain();
      specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(a2, (_QWORD *)(v10 + 16), v10 + 32, (uint64_t)v3);
      if (__OFADD__(a1, 1))
      {
        __break(1u);
      }
      else if (a1 + 1 >= a1)
      {
        v11 = v3[1];
        swift_retain();
        specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(a1, a1 + 1, v11, (uint64_t *)(v10 + 16), (_QWORD *)(v10 + 32));
        swift_release();
        swift_release();
        goto LABEL_10;
      }
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t specialized OrderedSet._removeExistingMember(at:in:)(int64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), void (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t *), void (*a6)(int64_t))
{
  uint64_t *v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v13 = *(_QWORD *)(v6[1] + 16);
  v14 = *v6;
  if (v13 <= specialized OrderedSet._minimumCapacity.getter(*v6))
  {
    v17 = specialized ContiguousArray.remove(at:)(a1, a3);
    a4();
    return v17;
  }
  if (!v14)
    return specialized ContiguousArray.remove(at:)(a1, a3);
  result = swift_isUniquelyReferenced_native();
  v16 = *v6;
  if (!(_DWORD)result)
  {
    if (!v16)
      goto LABEL_16;
    v16 = _HashTable.copy()((_QWORD *)*v6);
    result = swift_release();
    *v6 = v16;
  }
  if (v16)
  {
    result = a5(a2, v16 + 16, v16 + 32, v6);
    if (__OFADD__(a1, 1))
    {
      __break(1u);
    }
    else if (a1 + 1 >= a1)
    {
      a6(a1);
      return specialized ContiguousArray.remove(at:)(a1, a3);
    }
    __break(1u);
  }
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t Input.nodeid.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Input.type.getter()
{
  return swift_retain();
}

uint64_t Input.label.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Input.graphid.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

BOOL static Input.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static Input.== infix(_:_:)(a1, a2);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Input(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[3];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  return specialized static Input.== infix(_:_:)((uint64_t)v5, (uint64_t)v7);
}

uint64_t Output.nodeid.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void Input.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);
  Swift::UInt v4;

  Hasher._combine(_:)(*(_QWORD *)v1);
  v3 = *(void (**)(uint64_t))(**(_QWORD **)(v1 + 8) + 120);
  swift_retain();
  v3(a1);
  swift_release();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v1 + 40) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v4 = *(_QWORD *)(v1 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
  Hasher._combine(_:)(*(_QWORD *)(v1 + 48));
}

BOOL static Output.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static Input.== infix(_:_:)(a1, a2);
}

Swift::Int Input.hashValue.getter()
{
  uint64_t v0;
  void (*v1)(_BYTE *);
  Swift::UInt v2;
  _BYTE v4[72];

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_QWORD *)v0);
  v1 = *(void (**)(_BYTE *))(**(_QWORD **)(v0 + 8) + 120);
  swift_retain();
  v1(v4);
  swift_release();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v0 + 40) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
  Hasher._combine(_:)(*(_QWORD *)(v0 + 48));
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Input(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  Swift::UInt v4;
  int v5;
  Swift::UInt v6;
  void (*v7)(uint64_t);

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(unsigned __int8 *)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 48);
  Hasher._combine(_:)(*(_QWORD *)v1);
  v7 = *(void (**)(uint64_t))(*(_QWORD *)v3 + 120);
  swift_retain();
  v7(a1);
  swift_release();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v5 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
  Hasher._combine(_:)(v6);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Input()
{
  uint64_t v0;
  Swift::UInt v1;
  uint64_t v2;
  Swift::UInt v3;
  int v4;
  Swift::UInt v5;
  void (*v6)(_BYTE *);
  _BYTE v8[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(unsigned __int8 *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  v6 = *(void (**)(_BYTE *))(*(_QWORD *)v2 + 120);
  swift_retain();
  v6(v8);
  swift_release();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v4 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t Output.dotID.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String_optional v5;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::String_optional v8;
  Swift::String v9;
  _BYTE v11[16];
  uint64_t v12;

  outlined init with take of MetalFunctionNode?(v0 + 32, (uint64_t)v11, &demangling cache variable for type metadata for Graph.ID?);
  outlined init with take of MetalFunctionNode?((uint64_t)v11, (uint64_t)&v12, &demangling cache variable for type metadata for Graph.ID?);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 110;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x5F7475706E695FLL;
  v4._object = (void *)0xE700000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRetain();
  v5 = String.Iterator.next()();
  object = v5.value._object;
  if (v5.value._object)
  {
    countAndFlagsBits = v5.value._countAndFlagsBits;
    do
    {
      if ((countAndFlagsBits != 58 || object != (void *)0xE100000000000000)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        MEMORY[0x24954B040](countAndFlagsBits, object);
      }
      swift_bridgeObjectRelease();
      v8 = String.Iterator.next()();
      countAndFlagsBits = v8.value._countAndFlagsBits;
      object = v8.value._object;
    }
    while (v8.value._object);
    object = 0;
  }
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = (uint64_t)object;
  v9._object = (void *)0xE000000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  return 103;
}

uint64_t Input.dotID.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String_optional v5;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::String_optional v8;
  Swift::String v9;
  _BYTE v11[16];
  uint64_t v12;

  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  outlined init with take of MetalFunctionNode?(v0 + 32, (uint64_t)v11, &demangling cache variable for type metadata for Graph.ID?);
  outlined init with take of MetalFunctionNode?((uint64_t)v11, (uint64_t)&v12, &demangling cache variable for type metadata for Graph.ID?);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 110;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x5F74757074756F5FLL;
  v4._object = (void *)0xE800000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRetain();
  v5 = String.Iterator.next()();
  object = v5.value._object;
  if (v5.value._object)
  {
    countAndFlagsBits = v5.value._countAndFlagsBits;
    do
    {
      if ((countAndFlagsBits != 58 || object != (void *)0xE100000000000000)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        MEMORY[0x24954B040](countAndFlagsBits, object);
      }
      swift_bridgeObjectRelease();
      v8 = String.Iterator.next()();
      countAndFlagsBits = v8.value._countAndFlagsBits;
      object = v8.value._object;
    }
    while (v8.value._object);
    object = 0;
  }
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = (uint64_t)object;
  v9._object = (void *)0xE000000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  return 103;
}

uint64_t ShaderGraphNode.dotID.getter()
{
  return specialized ShaderGraphNode.dotID.getter();
}

uint64_t Edge.from.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_BYTE *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t Edge.to.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v1 + 64);
  v3 = *(_QWORD *)(v1 + 72);
  v4 = *(_QWORD *)(v1 + 80);
  v5 = *(_QWORD *)(v1 + 88);
  v6 = *(_BYTE *)(v1 + 96);
  v7 = *(_QWORD *)(v1 + 104);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t Edge.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  Swift::UInt v4;
  char v5;
  Swift::UInt v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  Swift::UInt v9;
  char v10;
  Swift::UInt v11;
  void (*v12)(uint64_t);

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_BYTE *)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 48);
  Hasher._combine(_:)(*(_QWORD *)v1);
  v7 = *(void (**)(uint64_t))(*(_QWORD *)v3 + 120);
  swift_retain();
  swift_bridgeObjectRetain();
  v7(a1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
  Hasher._combine(_:)(v6);
  swift_bridgeObjectRelease();
  swift_release();
  v8 = *(_QWORD *)(v1 + 64);
  v9 = *(_QWORD *)(v1 + 88);
  v10 = *(_BYTE *)(v1 + 96);
  v11 = *(_QWORD *)(v1 + 104);
  Hasher._combine(_:)(*(_QWORD *)(v1 + 56));
  v12 = *(void (**)(uint64_t))(*(_QWORD *)v8 + 120);
  swift_retain();
  swift_bridgeObjectRetain();
  v12(a1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
  }
  Hasher._combine(_:)(v11);
  swift_bridgeObjectRelease();
  return swift_release();
}

Swift::Int Edge.hashValue.getter()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  Edge.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Edge()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  Edge.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Edge()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  Edge.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Edge(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[7];
  _OWORD v14[7];

  v2 = a1[5];
  v13[4] = a1[4];
  v13[5] = v2;
  v3 = a1[6];
  v4 = a1[1];
  v13[0] = *a1;
  v13[1] = v4;
  v5 = a1[3];
  v13[2] = a1[2];
  v13[3] = v5;
  v6 = *a2;
  v7 = a2[1];
  v13[6] = v3;
  v14[0] = v6;
  v8 = a2[2];
  v9 = a2[3];
  v10 = a2[6];
  v14[5] = a2[5];
  v14[6] = v10;
  v11 = a2[4];
  v14[3] = v9;
  v14[4] = v11;
  v14[1] = v7;
  v14[2] = v8;
  return specialized static Edge.== infix(_:_:)((uint64_t)v13, (uint64_t)v14);
}

unint64_t ShaderGraphNode.shaderGraphData.getter()
{
  unint64_t *v0;
  unint64_t v1;

  v1 = *v0;
  outlined copy of NodePersonality(*v0);
  return v1;
}

unint64_t ShaderGraphNode.shaderGraphData.setter(unint64_t a1)
{
  unint64_t *v1;
  unint64_t result;

  result = outlined consume of NodePersonality(*v1);
  *v1 = a1;
  return result;
}

uint64_t (*ShaderGraphNode.shaderGraphData.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t ShaderGraphNode.inputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ShaderGraphNode.outputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ShaderGraphNode.id.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t ShaderGraphNode.graphid.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t ShaderGraphNode.ID.description.getter()
{
  Swift::String v0;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 1701080942;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ShaderGraphNode.ID()
{
  Swift::String v0;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 1701080942;
}

Swift::Void __swiftcall ShaderGraphNode.update(id:)(ShaderGraph::ShaderGraphNode::ID id)
{
  ShaderGraph::ShaderGraphNode::ID *v1;
  _QWORD *value;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v1[3].value = id.value;
  value = (_QWORD *)v1[1].value;
  v4 = value[2];
  if (v4)
  {
    swift_bridgeObjectRetain();
    v5 = 0;
    v6 = 0;
    v7 = value;
    while (1)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
      if (v6 >= v7[2])
        break;
      ++v6;
      v7[v5 + 4] = id.value;
      swift_bridgeObjectRelease();
      swift_release();
      v5 += 7;
      if (v4 == v6)
      {
        swift_bridgeObjectRelease();
        v1[1].value = (Swift::Int)v7;
        goto LABEL_8;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
LABEL_8:
  v8 = (_QWORD *)v1[2].value;
  v9 = v8[2];
  if (v9)
  {
    swift_bridgeObjectRetain();
    v10 = 0;
    v11 = 0;
    v12 = v8;
    while (1)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v12 = specialized _ArrayBuffer._consumeAndCreateNew()(v12);
      if (v11 >= v12[2])
        break;
      ++v11;
      v12[v10 + 4] = id.value;
      swift_bridgeObjectRelease();
      swift_release();
      v10 += 7;
      if (v9 == v11)
      {
        swift_bridgeObjectRelease();
        v1[2].value = (Swift::Int)v12;
        return;
      }
    }
LABEL_17:
    __break(1u);
  }
}

BOOL ShaderGraphNode.containsInput(_:)(_QWORD *a1)
{
  uint64_t v1;

  return *a1 == *(_QWORD *)(v1 + 24);
}

BOOL ShaderGraphNode.isAlive.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24) != -7;
}

void ShaderGraphNode.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;

  v2 = v1;
  v4 = *(_QWORD *)v2;
  outlined copy of NodePersonality(*(_QWORD *)v2);
  NodePersonality.hash(into:)(a1, v4);
  outlined consume of NodePersonality(v4);
  v5 = *(_QWORD *)(v2 + 8);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v5);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v6);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(_QWORD *)(v2 + 24));
  if (*(_BYTE *)(v2 + 40) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v7 = *(_QWORD *)(v2 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v7);
  }
}

Swift::Int ShaderGraphNode.hashValue.getter()
{
  unint64_t *v0;
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Swift::UInt v5;
  _BYTE v7[72];

  v1 = v0;
  Hasher.init(_seed:)();
  v2 = *v0;
  outlined copy of NodePersonality(v2);
  NodePersonality.hash(into:)((uint64_t)v7, v2);
  outlined consume of NodePersonality(v2);
  v3 = v1[1];
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(v7, v3);
  swift_bridgeObjectRelease();
  v4 = v1[2];
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(v7, v4);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1[3]);
  if (*((_BYTE *)v1 + 40) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v5 = v1[4];
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ShaderGraphNode(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt v6;
  Swift::UInt v7;
  int v8;

  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = *(_QWORD *)(v1 + 32);
  v8 = *(unsigned __int8 *)(v1 + 40);
  outlined copy of NodePersonality(*(_QWORD *)v1);
  NodePersonality.hash(into:)(a1, v3);
  outlined consume of NodePersonality(v3);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v5);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v6);
  if (v8 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v7);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ShaderGraphNode()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt v4;
  Swift::UInt v5;
  int v6;
  _BYTE v8[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(unsigned __int8 *)(v0 + 40);
  Hasher.init(_seed:)();
  outlined copy of NodePersonality(v1);
  NodePersonality.hash(into:)((uint64_t)v8, v1);
  outlined consume of NodePersonality(v1);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(v8, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(v8, v3);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v4);
  if (v6 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ShaderGraphNode(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  _OWORD v8[2];

  v2 = a1[1];
  v5 = *a1;
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 9) = *(__int128 *)((char *)a1 + 25);
  v3 = a2[1];
  v7 = *a2;
  v8[0] = v3;
  *(_OWORD *)((char *)v8 + 9) = *(__int128 *)((char *)a2 + 25);
  return specialized static ShaderGraphNode.== infix(_:_:)((uint64_t)&v5, (uint64_t)&v7) & 1;
}

uint64_t Graph.Iterator.index.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Graph.Iterator.index.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Graph.Iterator.index.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t Graph.Iterator.elements.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t Graph.Iterator.isLiving.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_retain();
  return v1;
}

uint64_t Graph.Iterator.init(elements:isLiving:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  uint64_t result;

  swift_unknownObjectRetain();
  swift_retain();
  v14 = ArraySlice.startIndex.getter();
  swift_unknownObjectRelease();
  result = swift_release();
  *a7 = v14;
  a7[1] = a1;
  a7[2] = a2;
  a7[3] = a3;
  a7[4] = a4;
  a7[5] = a5;
  a7[6] = a6;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Graph.Iterator<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = specialized Sequence._copyToContiguousArray()(v2, a1, a2);
  swift_unknownObjectRelease();
  swift_release();
  return v3;
}

void Graph.DepthFirstEdgeIterator.next()(uint64_t *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  _QWORD v74[6];
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  char v78[8];
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  char v83[8];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  _OWORD v89[2];

  v2 = *(_QWORD **)(v1 + 24);
  v69 = v1 + 24;
  v3 = v2[2];
  if (v3)
  {
    v53 = a1;
    v4 = (_QWORD *)(v1 + 32);
    v63 = v4;
    while (1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v6 = v2[2];
        if (!v6)
          goto LABEL_23;
      }
      else
      {
        v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
        v6 = v2[2];
        if (!v6)
        {
LABEL_23:
          __break(1u);
LABEL_24:
          v39 = 0;
          v40 = 0;
          v41 = 0;
          v35 = 0;
          v42 = 0;
          v43 = 0;
          v44 = 0;
          v68 = 0;
          v45 = 0;
          v46 = 0;
          v47 = 0;
          v48 = 0;
          v3 = 0;
          v49 = 0;
          a1 = v53;
          goto LABEL_26;
        }
      }
      v7 = v6 - 1;
      v8 = &v2[7 * v7];
      v9 = *((_OWORD *)v8 + 2);
      v10 = *((_OWORD *)v8 + 3);
      v11 = *((_OWORD *)v8 + 4);
      v87 = v8[10];
      v85 = v10;
      v86 = v11;
      v84 = v9;
      v12 = v8[5];
      v68 = v8[4];
      v13 = v8[6];
      v14 = v8[7];
      v15 = v8[8];
      v16 = *((unsigned __int8 *)v8 + 72);
      v17 = v8[10];
      v2[2] = v7;
      *(_QWORD *)v69 = v2;
      if ((specialized Set.contains(_:)(&v84, *v4) & 1) == 0)
        break;
      swift_release();
      v88 = v85;
      v5 = &v88;
LABEL_4:
      outlined release of String((uint64_t)v5);
      v2 = *(_QWORD **)v69;
      if (!*(_QWORD *)(*(_QWORD *)v69 + 16))
        goto LABEL_24;
    }
    v61 = v17;
    v62 = v16;
    v89[0] = v85;
    swift_retain();
    outlined retain of String((uint64_t)v89);
    specialized Set._Variant.insert(_:)((uint64_t)&v70, (Swift::Int)&v84, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<Input>);
    swift_release();
    swift_bridgeObjectRelease();
    v19 = *v65;
    v18 = (_QWORD *)v65[1];
    v20 = v65[2];
    v21 = specialized OrderedSet._find(_:)(v84, *v65, v18, (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
    if ((v22 & 1) == 0)
    {
      if ((v21 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        return;
      }
      if (v21 >= *(_QWORD *)(v20 + 16))
        goto LABEL_32;
      v57 = v15;
      v58 = v14;
      v59 = v13;
      v60 = v12;
      v23 = (_QWORD *)(v20 + 48 * v21);
      v25 = v23[7];
      v24 = v23[8];
      v26 = v23[9];
      v27 = *(_QWORD *)(v24 + 16);
      v56 = v18;
      if (v25)
      {
        swift_retain();
        outlined retain of String((uint64_t)v89);
        swift_retain();
        swift_retain();
        swift_retain();
        v28 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v84, v24 + 32, v27, (_QWORD *)(v25 + 16), v25 + 32);
        if ((v29 & 1) != 0)
          goto LABEL_20;
      }
      else
      {
        swift_retain();
        outlined retain of String((uint64_t)v89);
        swift_retain();
        swift_retain();
        v28 = specialized Collection<>.firstIndex(of:)(&v84, v24 + 32, v27);
        if ((v30 & 1) != 0)
        {
LABEL_20:
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          v5 = v89;
          outlined release of String((uint64_t)v89);
          swift_release();
          goto LABEL_21;
        }
      }
      if ((v28 & 0x8000000000000000) != 0)
        goto LABEL_33;
      if (v28 >= *(_QWORD *)(v26 + 16))
        goto LABEL_34;
      v54 = v19;
      v31 = (_QWORD *)(v26 + 56 * v28);
      v32 = v31[4];
      v33 = v31[5];
      v34 = v31[6];
      v35 = v31[7];
      v37 = v31[8];
      v36 = v31[9];
      v38 = v31[10];
      outlined copy of Output?(v32, v33);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined release of String((uint64_t)v89);
      if (v33)
      {
        v55 = v37;
        v64 = v34;
        v66 = v33;
        v43 = v36 & 1;
        v67 = v32;
        specialized OrderedDictionary.subscript.getter(v32, v54, v56, v20, v74);
        outlined init with take of MetalFunctionNode?((uint64_t)v74, (uint64_t)&v70, &demangling cache variable for type metadata for Graph.Adjacent?);
        if (*((_QWORD *)&v70 + 1))
        {
          v79 = v70;
          v50 = v71;
          v76 = v72;
          v51 = v73;
          outlined init with take of MetalFunctionNode?((uint64_t)&v76, (uint64_t)v78, &demangling cache variable for type metadata for _HashTable.Storage?);
          v52 = *((_QWORD *)&v76 + 1);
          v77 = *((_QWORD *)&v76 + 1);
          v75 = v51;
          v81 = v79;
          outlined init with take of MetalFunctionNode?((uint64_t)&v81, (uint64_t)v83, &demangling cache variable for type metadata for _HashTable.Storage?);
          swift_retain();
          outlined retain of String((uint64_t)v89);
          outlined retain of _HashTable.Storage?((uint64_t)v78);
          outlined retain of _HashTable.Storage?((uint64_t)&v77);
          outlined retain of _HashTable.Storage?((uint64_t)&v75);
          outlined release of _HashTable.Storage?((uint64_t)v83);
          v82 = *((_QWORD *)&v81 + 1);
          outlined release of _HashTable.Storage?((uint64_t)&v82);
          v80 = v50;
          outlined release of _HashTable.Storage?((uint64_t)&v80);
          outlined release of _HashTable.Storage?((uint64_t)v78);
          outlined release of _HashTable.Storage?((uint64_t)&v77);
          outlined release of _HashTable.Storage?((uint64_t)&v75);
          outlined release of _HashTable.Storage?((uint64_t)&v75);
          outlined release of _HashTable.Storage?((uint64_t)v78);
        }
        else
        {
          swift_retain();
          outlined retain of String((uint64_t)v89);
          v52 = MEMORY[0x24BEE4AF8];
        }
        v46 = v59;
        v45 = v60;
        v48 = v57;
        v47 = v58;
        specialized Array.append<A>(contentsOf:)(v52);
        swift_release();
        outlined release of String((uint64_t)v89);
        v44 = v38;
        a1 = v53;
        v49 = v61;
        v3 = v62;
        v39 = v67;
        v41 = v64;
        v40 = v66;
        v42 = v55;
        goto LABEL_26;
      }
    }
    swift_release();
    v5 = v89;
LABEL_21:
    v4 = v63;
    goto LABEL_4;
  }
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v35 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v68 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
LABEL_26:
  *a1 = v39;
  a1[1] = v40;
  a1[2] = v41;
  a1[3] = v35;
  a1[4] = v42;
  a1[5] = v43;
  a1[6] = v44;
  a1[7] = v68;
  a1[8] = v45;
  a1[9] = v46;
  a1[10] = v47;
  a1[11] = v48;
  a1[12] = v3;
  a1[13] = v49;
}

double Graph.DepthFirstEdgeIterator.init(_:initial:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  __int128 v6;
  _OWORD v7[2];
  uint64_t v8;

  specialized Graph.DepthFirstEdgeIterator.init(_:initial:)(a1, a2, v7);
  outlined release of Graph((uint64_t)a1);
  result = *(double *)v7;
  v6 = v7[1];
  *(_OWORD *)a3 = v7[0];
  *(_OWORD *)(a3 + 16) = v6;
  *(_QWORD *)(a3 + 32) = v8;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance Graph.DepthFirstEdgeIterator@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  result = *(__n128 *)(v1 + 24);
  *(__n128 *)(a1 + 24) = result;
  return result;
}

unint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Graph.DepthFirstEdgeIterator()
{
  __int128 *v0;
  __int128 v1;
  unint64_t v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;

  v1 = v0[1];
  v5 = *v0;
  v6 = v1;
  v7 = *((_QWORD *)v0 + 4);
  v2 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t *)&v5);
  v9 = v5;
  v3 = v6;
  outlined init with take of MetalFunctionNode?((uint64_t)&v9, (uint64_t)v11, &demangling cache variable for type metadata for _HashTable.Storage?);
  outlined release of _HashTable.Storage?((uint64_t)v11);
  v10 = *((_QWORD *)&v9 + 1);
  outlined release of _HashTable.Storage?((uint64_t)&v10);
  v8 = v3;
  outlined release of _HashTable.Storage?((uint64_t)&v8);
  v12 = *((_QWORD *)&v6 + 1);
  outlined release of [Input]((uint64_t)&v12);
  v13 = v7;
  outlined release of [Input]((uint64_t)&v13);
  return v2;
}

unint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Graph.DepthFirstEdgeIterator(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for IteratorProtocol.next() in conformance Graph.DepthFirstEdgeIterator@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3[14];

  Graph.DepthFirstEdgeIterator.next()(v3);
  return outlined init with take of MetalFunctionNode?((uint64_t)v3, a1, &demangling cache variable for type metadata for Edge?);
}

uint64_t Graph.BreathFirstEdgeIterator.next()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  Swift::UInt v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  Swift::Int v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  _QWORD *v64;
  Swift::UInt v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t);
  char v72;
  char v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t result;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t *v104;
  uint64_t *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD v135[5];
  char v136;
  uint64_t v137;
  char v138[8];
  _QWORD v139[6];
  __int128 v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  char v147[8];
  __int128 v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  char v152[8];
  _QWORD v153[5];
  char v154;
  uint64_t v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  __int128 v160;
  _OWORD v161[2];

  v2 = (_QWORD *)v1[3];
  v3 = v2[2];
  if (!v3)
  {
    v78 = 0;
    v79 = 0;
    result = 0;
    v81 = 0;
    v82 = 0;
    v83 = 0;
    v84 = 0;
    v85 = 0;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = 0;
LABEL_98:
    *a1 = v78;
    a1[1] = v79;
    a1[2] = result;
    a1[3] = v81;
    a1[4] = v82;
    a1[5] = v83;
    a1[6] = v84;
    a1[7] = v3;
    a1[8] = v85;
    a1[9] = v86;
    a1[10] = v87;
    a1[11] = v88;
    a1[12] = v89;
    a1[13] = v90;
    return result;
  }
  v104 = a1;
  v105 = v1 + 4;
  while (1)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v4 = v2[2];
      if (!v4)
        goto LABEL_95;
    }
    else
    {
      v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      v4 = v2[2];
      if (!v4)
      {
LABEL_95:
        __break(1u);
LABEL_96:
        v78 = 0;
        v79 = 0;
        result = 0;
        v81 = 0;
        v82 = 0;
        v83 = 0;
        v84 = 0;
        v3 = 0;
        v85 = 0;
        v86 = 0;
        v87 = 0;
        v88 = 0;
        v89 = 0;
        v90 = 0;
        a1 = v104;
        goto LABEL_98;
      }
    }
    v5 = v4 - 1;
    v6 = &v2[7 * v5];
    v7 = *((_OWORD *)v6 + 2);
    v8 = *((_OWORD *)v6 + 3);
    v9 = *((_OWORD *)v6 + 4);
    v159 = v6[10];
    v158 = v9;
    v157 = v8;
    v156 = v7;
    v120 = v6[5];
    v121 = v6[4];
    v118 = v6[7];
    v119 = v6[6];
    v116 = *((unsigned __int8 *)v6 + 72);
    v117 = v6[8];
    v115 = v6[10];
    v2[2] = v5;
    v1[3] = (uint64_t)v2;
    v10 = (_QWORD *)v1[1];
    v132 = v1[2];
    v11 = v156;
    v12 = v10 + 4;
    v133 = *v1;
    if (*v1)
    {
      v13 = v1[1];
      v14 = (uint64_t *)(*v1 + 16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v11);
      v15 = Hasher._finalize()();
      v16 = *v14;
      v17 = 1 << *v14;
      v18 = v17 - 1;
      if (__OFSUB__(v17, 1))
        goto LABEL_115;
      v19 = v18 & v15;
      v20 = _HashTable.UnsafeHandle._startIterator(bucket:)(v18 & v15, v14, (uint64_t)(v14 + 2));
      if (!v20)
        goto LABEL_6;
      v23 = *(uint64_t *)(v133 + 24) >> 6;
      v24 = v23 + (v20 ^ v18);
      if (v24 >= v18)
        v25 = v17 - 1;
      else
        v25 = 0;
      v26 = v24 - v25;
      if (v12[v24 - v25] != v11)
      {
        v27 = 0;
        v28 = v16 & 0x3F;
        v29 = __OFADD__(v28 << v28, 64);
        v30 = (v28 << v28) + 126;
        if ((v28 << v28) + 64 >= 1)
          v30 = (v28 << v28) + 63;
        v31 = v30 >> 6;
        do
        {
          if (++v19 == v17)
          {
            if ((v27 & 1) != 0)
              goto LABEL_120;
            v19 = 0;
            v27 = 1;
          }
          if (v22 >= v28)
          {
            v36 = __OFSUB__(v22, v28);
            v22 -= v28;
            if (v36)
            {
              __break(1u);
LABEL_112:
              __break(1u);
LABEL_113:
              __break(1u);
LABEL_114:
              __break(1u);
LABEL_115:
              __break(1u);
LABEL_116:
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
              goto LABEL_119;
            }
            v40 = v21 >> v28;
            v41 = v21 & v18;
            if ((v21 & v18) == 0)
              goto LABEL_6;
          }
          else
          {
            v32 = (v19 * v28) >> 6;
            if (v22)
            {
              if (v29)
                goto LABEL_114;
              if (v32 + 1 == v31)
                v32 = 0;
              else
                ++v32;
            }
            v33 = v28 - v22;
            if (__OFSUB__(v28, v22))
              goto LABEL_112;
            v34 = v32 == 2 && v28 == 5;
            v35 = 64;
            if (v34)
              v35 = 32;
            v36 = __OFSUB__(v35, v33);
            v37 = v35 - v33;
            if (v36)
              goto LABEL_113;
            v38 = v14[v32 + 2];
            v39 = (v38 << v22) | v21;
            v40 = v38 >> v33;
            v22 = v37;
            v41 = v39 & v18;
            if ((v39 & v18) == 0)
              goto LABEL_6;
          }
          v42 = (v41 ^ v18) + v23;
          if (v42 >= v18)
            v43 = v17 - 1;
          else
            v43 = 0;
          v26 = v42 - v43;
          v21 = v40;
        }
        while (v12[v42 - v43] != v11);
      }
      swift_retain();
      goto LABEL_47;
    }
    v46 = v10[2];
    if (!v46)
      goto LABEL_6;
    v13 = v1[1];
    if (*v12 == (_QWORD)v156)
    {
      v26 = 0;
      v45 = (_QWORD *)v1[1];
LABEL_52:
      v44 = v1[2];
      goto LABEL_53;
    }
    if (v46 == 1)
      goto LABEL_6;
    if (v10[5] == (_QWORD)v156)
    {
      v45 = (_QWORD *)v1[1];
      v26 = 1;
      goto LABEL_52;
    }
    if (v46 == 2)
      goto LABEL_6;
    if (v10[6] == (_QWORD)v156)
    {
      v45 = (_QWORD *)v1[1];
      v26 = 2;
      goto LABEL_52;
    }
    if (v46 == 3)
      goto LABEL_6;
    v45 = (_QWORD *)v1[1];
    if (v10[7] == (_QWORD)v156)
    {
      v26 = 3;
      goto LABEL_52;
    }
    v75 = 0;
    v76 = v46 - 4;
    do
    {
      if (v76 == v75)
        goto LABEL_6;
      v77 = *(_QWORD *)(v13 + 64 + 8 * v75++);
    }
    while (v77 != (_QWORD)v156);
    v26 = v75 + 3;
LABEL_47:
    v44 = v132;
    v45 = (_QWORD *)v13;
    if ((v26 & 0x8000000000000000) != 0)
      goto LABEL_116;
LABEL_53:
    if (v26 >= *(_QWORD *)(v44 + 16))
      goto LABEL_117;
    v47 = (_QWORD *)(v44 + 48 * v26);
    v49 = v47[7];
    v48 = v47[8];
    v50 = v47[9];
    v161[0] = v157;
    v51 = *(_QWORD *)(v48 + 16);
    v114 = v45;
    if (!v49)
    {
      v131 = *((_QWORD *)&v156 + 1);
      v110 = v50;
      if (!v51)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        outlined retain of String((uint64_t)v161);
LABEL_83:
        swift_release();
        goto LABEL_4;
      }
      v63 = v161[0];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      outlined retain of String((uint64_t)v161);
      v55 = 0;
      v107 = v158;
      v109 = v159;
      v108 = BYTE8(v158);
      v106 = BYTE8(v158) ^ 1;
      v64 = (_QWORD *)(v48 + 80);
      while (2)
      {
        if (*(v64 - 6) == v11)
        {
          v65 = v11;
          v66 = v51;
          v67 = *(v64 - 4);
          v68 = *(v64 - 3);
          v130 = *(v64 - 2);
          v69 = *((_BYTE *)v64 - 8);
          v70 = *v64;
          v71 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*(v64 - 5) + 128);
          swift_retain();
          swift_bridgeObjectRetain();
          if ((v71(v131) & 1) != 0)
          {
            if (__PAIR128__(v68, v67) == v63)
            {
              swift_bridgeObjectRelease();
              swift_release();
              v51 = v66;
              v11 = v65;
LABEL_69:
              if ((v69 & 1) != 0)
              {
                v73 = v108;
                if (v70 != v109)
                  v73 = 0;
                if ((v73 & 1) != 0)
                  goto LABEL_57;
              }
              else
              {
                v74 = v106;
                if (v130 != v107)
                  v74 = 0;
                if (v74 == 1 && v70 == v109)
                  goto LABEL_57;
              }
            }
            else
            {
              v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_release();
              v51 = v66;
              v11 = v65;
              if ((v72 & 1) != 0)
                goto LABEL_69;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_release();
            v51 = v66;
            v11 = v65;
          }
        }
        v64 += 7;
        if (v51 == ++v55)
          goto LABEL_83;
        continue;
      }
    }
    v128 = *(_QWORD *)(v48 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined retain of String((uint64_t)v161);
    swift_retain();
    v52 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v156, v48 + 32, v128, (_QWORD *)(v49 + 16), v49 + 32);
    v53 = v50;
    if ((v54 & 1) == 0)
      break;
    swift_release();
    swift_release();
LABEL_4:
    swift_release();
    swift_release();
    outlined release of String((uint64_t)v161);
LABEL_5:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
LABEL_6:
    swift_release();
    v160 = v157;
    outlined release of String((uint64_t)&v160);
    v1 = v122;
    v2 = *(_QWORD **)v124;
    if (!*(_QWORD *)(*(_QWORD *)v124 + 16))
      goto LABEL_96;
  }
  v55 = v52;
  v110 = v53;
  if (v52 < 0)
    goto LABEL_118;
LABEL_57:
  if (v55 < *(_QWORD *)(v110 + 16))
  {
    v56 = (_QWORD *)(v110 + 56 * v55);
    v57 = v56[5];
    v59 = v56[6];
    v58 = v56[7];
    v61 = v56[8];
    v60 = v56[9];
    v62 = v56[10];
    v129 = v56[4];
    outlined copy of Output?(v129, v57);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined release of String((uint64_t)v161);
    if (v57)
    {
      v112 = v60;
      v113 = v62;
      v123 = v61;
      v125 = v58;
      v126 = v59;
      v127 = v57;
      swift_retain();
      outlined retain of String((uint64_t)v161);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      specialized OrderedDictionary.subscript.getter(v129, v133, v114, v132, v139);
      outlined init with take of MetalFunctionNode?((uint64_t)v139, (uint64_t)&v140, &demangling cache variable for type metadata for Graph.Adjacent?);
      if (*((_QWORD *)&v140 + 1))
      {
        v148 = v140;
        v145 = v142;
        v111 = v141;
        v91 = v143;
        outlined init with take of MetalFunctionNode?((uint64_t)&v145, (uint64_t)v147, &demangling cache variable for type metadata for _HashTable.Storage?);
        v92 = *((_QWORD *)&v145 + 1);
        v146 = *((_QWORD *)&v145 + 1);
        v144 = v91;
        v150 = v148;
        outlined init with take of MetalFunctionNode?((uint64_t)&v150, (uint64_t)v152, &demangling cache variable for type metadata for _HashTable.Storage?);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        outlined retain of _HashTable.Storage?((uint64_t)v147);
        outlined retain of _HashTable.Storage?((uint64_t)&v146);
        outlined retain of _HashTable.Storage?((uint64_t)&v144);
        outlined release of _HashTable.Storage?((uint64_t)v152);
        v151 = *((_QWORD *)&v150 + 1);
        outlined release of _HashTable.Storage?((uint64_t)&v151);
        v149 = v111;
        outlined release of _HashTable.Storage?((uint64_t)&v149);
        outlined release of _HashTable.Storage?((uint64_t)v147);
        outlined release of _HashTable.Storage?((uint64_t)&v146);
        outlined release of _HashTable.Storage?((uint64_t)&v144);
        outlined release of _HashTable.Storage?((uint64_t)&v144);
        outlined release of _HashTable.Storage?((uint64_t)v147);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        v92 = MEMORY[0x24BEE4AF8];
      }
      v83 = v60 & 1;
      v93 = *(_QWORD *)(v92 + 16);
      if (v93)
      {
        swift_bridgeObjectRetain();
        v94 = (_QWORD *)(v92 + 80);
        v95 = v105;
        do
        {
          v96 = *(v94 - 5);
          v97 = *(v94 - 4);
          v98 = *(v94 - 3);
          v99 = *(v94 - 2);
          v100 = *((_BYTE *)v94 - 8);
          v101 = *v94;
          v134 = *(v94 - 6);
          v135[0] = v134;
          v135[1] = v96;
          v135[2] = v97;
          v135[3] = v98;
          v135[4] = v99;
          v136 = v100;
          v137 = v101;
          v102 = *v95;
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v103 = specialized Set.contains(_:)(v135, v102);
          swift_bridgeObjectRelease();
          if ((v103 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            swift_release();
          }
          else
          {
            swift_retain();
            swift_bridgeObjectRetain();
            specialized Set._Variant.insert(_:)((uint64_t)v138, (Swift::Int)v135, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<Input>);
            swift_release();
            swift_bridgeObjectRelease();
            v153[0] = v134;
            v153[1] = v96;
            v153[2] = v97;
            v153[3] = v98;
            v153[4] = v99;
            v154 = v100;
            v155 = v101;
            specialized Array.replaceSubrange<A>(_:with:)(0, 0, (uint64_t)v153);
          }
          v94 += 7;
          --v93;
          v95 = v105;
        }
        while (v93);
        swift_release();
        swift_bridgeObjectRelease();
        v83 = v112 & 1;
      }
      else
      {
        swift_release();
      }
      outlined release of String((uint64_t)v161);
      swift_bridgeObjectRelease();
      a1 = v104;
      v85 = v120;
      v3 = v121;
      v87 = v118;
      v86 = v119;
      v89 = v116;
      v88 = v117;
      v90 = v115;
      v79 = v127;
      v78 = v129;
      v81 = v125;
      result = v126;
      v82 = v123;
      v84 = v113;
      goto LABEL_98;
    }
    goto LABEL_5;
  }
LABEL_119:
  __break(1u);
LABEL_120:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double Graph.BreathFirstEdgeIterator.init(_:initial:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v5;
  double result;
  _OWORD v7[2];
  __int128 v8;

  specialized Graph.BreathFirstEdgeIterator.init(_:initial:)(a1, a2, v7);
  outlined release of Graph((uint64_t)a1);
  v5 = v7[1];
  *a3 = v7[0];
  a3[1] = v5;
  result = *(double *)&v8;
  a3[2] = v8;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance Graph.BreathFirstEdgeIterator@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  result = *(__n128 *)(v1 + 24);
  *(__n128 *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 40) = v2;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Graph.BreathFirstEdgeIterator()
{
  __int128 *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  char v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = v0[1];
  v5 = *v0;
  v6 = v1;
  v7 = v0[2];
  v2 = specialized _copySequenceToContiguousArray<A>(_:)(&v5);
  v9 = v5;
  v3 = v6;
  outlined init with take of MetalFunctionNode?((uint64_t)&v9, (uint64_t)v11, &demangling cache variable for type metadata for _HashTable.Storage?);
  outlined release of _HashTable.Storage?((uint64_t)v11);
  v10 = *((_QWORD *)&v9 + 1);
  outlined release of _HashTable.Storage?((uint64_t)&v10);
  v8 = v3;
  outlined release of _HashTable.Storage?((uint64_t)&v8);
  v12 = *((_QWORD *)&v6 + 1);
  outlined release of [Input]((uint64_t)&v12);
  v13 = v7;
  outlined release of [Input]((uint64_t)&v13);
  v14 = *((_QWORD *)&v7 + 1);
  outlined release of [Input]((uint64_t)&v14);
  return v2;
}

_OWORD *protocol witness for Sequence._copyContents(initializing:) in conformance Graph.BreathFirstEdgeIterator(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for IteratorProtocol.next() in conformance Graph.BreathFirstEdgeIterator@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3[14];

  Graph.BreathFirstEdgeIterator.next()(v3);
  return outlined init with take of MetalFunctionNode?((uint64_t)v3, a1, &demangling cache variable for type metadata for Edge?);
}

void Graph.ID.hash(into:)(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
}

BOOL static Graph.ID.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

Swift::Int ShaderGraphNode.ID.hashValue.getter(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t Graph.Adjacent.outgoing.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_retain();
  swift_retain();
  swift_retain();
  return v1;
}

uint64_t Graph.Adjacent.outgoing.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t result;

  swift_release();
  swift_release();
  result = swift_release();
  *v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t (*Graph.Adjacent.outgoing.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t Graph.Adjacent.incoming.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_retain();
  swift_retain();
  swift_retain();
  return v1;
}

uint64_t Graph.Adjacent.incoming.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t result;

  swift_release();
  swift_release();
  result = swift_release();
  v3[3] = a1;
  v3[4] = a2;
  v3[5] = a3;
  return result;
}

uint64_t (*Graph.Adjacent.incoming.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

double Graph.Adjacent.init(_:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  double result;
  _OWORD v7[2];
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1[2];
  v10 = a1[1];
  v11 = v4;
  specialized Graph.Adjacent.init(_:)(v10, v4, (uint64_t *)v7);
  outlined init with take of NodePersonality(a1, &v9);
  outlined release of NodePersonality(&v9);
  outlined release of [Input]((uint64_t)&v10);
  outlined release of [Input]((uint64_t)&v11);
  v5 = v7[1];
  *a2 = v7[0];
  a2[1] = v5;
  result = *(double *)&v8;
  a2[2] = v8;
  return result;
}

uint64_t Graph.Adjacent.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  swift_retain();
  swift_retain();
  swift_retain();
  specialized OrderedDictionary<>.hash(into:)(a1, v3, v4, v5);
  swift_release();
  swift_release();
  swift_release();
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  swift_retain();
  swift_retain();
  swift_retain();
  specialized OrderedDictionary<>.hash(into:)(a1, v6, v7, v8);
  swift_release();
  swift_release();
  return swift_release();
}

BOOL static Graph.Adjacent.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 result;

  v4 = a1[2];
  v5 = a2[2];
  result = 0;
  if ((specialized Sequence<>.elementsEqual<A>(_:)(*a2, a2[1], *a1, a1[1]) & 1) != 0
    && (specialized static ContiguousArray<A>.== infix(_:_:)(v4, v5) & 1) != 0)
  {
    v6 = a1[3];
    v7 = a1[4];
    v8 = a1[5];
    v9 = a2[3];
    v10 = a2[4];
    v11 = a2[5];
    if ((specialized Sequence<>.elementsEqual<A>(_:)(v9, v10, v6, v7) & 1) != 0
      && (specialized static ContiguousArray<A>.== infix(_:_:)(v8, v11) & 1) != 0)
    {
      return 1;
    }
  }
  return result;
}

Swift::Int Graph.Adjacent.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[72];

  Hasher.init(_seed:)();
  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  swift_retain();
  swift_retain();
  swift_retain();
  specialized OrderedDictionary<>.hash(into:)((uint64_t)v8, v1, v2, v3);
  swift_release();
  swift_release();
  swift_release();
  v4 = v0[3];
  v5 = v0[4];
  v6 = v0[5];
  swift_retain();
  swift_retain();
  swift_retain();
  specialized OrderedDictionary<>.hash(into:)((uint64_t)v8, v4, v5, v6);
  swift_release();
  swift_release();
  swift_release();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Graph.Adjacent(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v8 = v1[4];
  v7 = v1[5];
  swift_retain();
  swift_retain();
  swift_retain();
  specialized OrderedDictionary<>.hash(into:)(a1, v3, v4, v6);
  swift_release();
  swift_release();
  swift_release();
  swift_retain();
  swift_retain();
  swift_retain();
  specialized OrderedDictionary<>.hash(into:)(a1, v5, v8, v7);
  swift_release();
  swift_release();
  return swift_release();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Graph.Adjacent()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[72];

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  v6 = v0[4];
  v5 = v0[5];
  Hasher.init(_seed:)();
  swift_retain();
  swift_retain();
  swift_retain();
  specialized OrderedDictionary<>.hash(into:)((uint64_t)v8, v1, v2, v4);
  swift_release();
  swift_release();
  swift_release();
  swift_retain();
  swift_retain();
  swift_retain();
  specialized OrderedDictionary<>.hash(into:)((uint64_t)v8, v3, v6, v5);
  swift_release();
  swift_release();
  swift_release();
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Graph.Adjacent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1[2];
  v2 = a1[3];
  v5 = a1[4];
  v4 = a1[5];
  v7 = a2[2];
  v6 = a2[3];
  v9 = a2[4];
  v8 = a2[5];
  return (specialized Sequence<>.elementsEqual<A>(_:)(*a2, a2[1], *a1, a1[1]) & 1) != 0
      && (specialized static ContiguousArray<A>.== infix(_:_:)(v3, v7) & 1) != 0
      && (specialized Sequence<>.elementsEqual<A>(_:)(v6, v9, v2, v5) & 1) != 0
      && (specialized static ContiguousArray<A>.== infix(_:_:)(v4, v8) & 1) != 0;
}

uint64_t Graph.label.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Graph.id.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t Graph.inputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Graph.outputs.getter()
{
  return swift_bridgeObjectRetain();
}

BOOL closure #1 in Graph.nodes.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) != -7;
}

double Graph.edges.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  __int128 v8;
  _OWORD v9[2];
  uint64_t v10;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  outlined retain of Graph((uint64_t)v1);
  swift_retain();
  swift_retain();
  swift_retain();
  v6 = specialized Sequence.compactMap<A>(_:)(v3, v4, v5, (void (*)(_QWORD *__return_ptr, uint64_t, __int128 *))closure #1 in Graph.sinkNodes()partial apply);
  swift_release();
  swift_release();
  swift_release();
  specialized Graph.DepthFirstEdgeIterator.init(_:initial:)(v1, v6, v9);
  outlined release of Graph((uint64_t)v1);
  result = *(double *)v9;
  v8 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 32) = v10;
  return result;
}

uint64_t Graph.sinkNodes()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  swift_retain();
  swift_retain();
  swift_retain();
  v4 = specialized Sequence.compactMap<A>(_:)(v1, v2, v3, (void (*)(_QWORD *__return_ptr, uint64_t, __int128 *))closure #1 in Graph.sinkNodes()partial apply);
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

double Graph.edgesBreathFirst.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  double result;
  _OWORD v9[2];
  __int128 v10;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  outlined retain of Graph((uint64_t)v1);
  swift_retain();
  swift_retain();
  swift_retain();
  v6 = specialized Sequence.compactMap<A>(_:)(v3, v4, v5, (void (*)(_QWORD *__return_ptr, uint64_t, __int128 *))closure #1 in Graph.sinkNodes()partial apply);
  swift_release();
  swift_release();
  swift_release();
  specialized Graph.BreathFirstEdgeIterator.init(_:initial:)(v1, v6, v9);
  outlined release of Graph((uint64_t)v1);
  v7 = v9[1];
  *a1 = v9[0];
  a1[1] = v7;
  result = *(double *)&v10;
  a1[2] = v10;
  return result;
}

ShaderGraph::Graph::ID __swiftcall Graph.nextGraphID()()
{
  uint64_t v0;
  uint64_t v1;
  ShaderGraph::Graph::ID result;

  v1 = *(_QWORD *)(v0 + 72);
  result.value = v1 + 1;
  if (__OFADD__(v1, 1))
    __break(1u);
  else
    *(ShaderGraph::Graph::ID *)(v0 + 72) = result;
  return result;
}

uint64_t Graph.argumentsNode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(v1 + 80);
  v4 = *(_QWORD *)(v1 + 88);
  v5 = *(_QWORD *)(v1 + 96);
  v6 = *(_QWORD *)(v1 + 104);
  v7 = *(_QWORD *)(v1 + 112);
  v8 = *(_BYTE *)(v1 + 120);
  outlined copy of NodePersonality(v3);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t Graph.resultNode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(v1 + 128);
  v4 = *(_QWORD *)(v1 + 136);
  v5 = *(_QWORD *)(v1 + 144);
  v6 = *(_QWORD *)(v1 + 152);
  v7 = *(_QWORD *)(v1 + 160);
  v8 = *(_BYTE *)(v1 + 168);
  outlined copy of NodePersonality(v3);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t Graph.removeEdges(connectedTo:)(uint64_t a1)
{
  return specialized Graph.removeEdges(connectedTo:)(*(_QWORD *)(a1 + 24));
}

uint64_t closure #1 in Graph.sinkNodes()@<X0>(unint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _BYTE v28[8];

  v26 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  result = outlined init with take of MetalFunctionNode?((uint64_t)&v26, (uint64_t)v28, &demangling cache variable for type metadata for _HashTable.Storage?);
  v27 = *((_QWORD *)&v26 + 1);
  v25 = v7;
  v9 = *(_QWORD *)(v7 + 16);
  if (v9)
  {
    v10 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 16);
    outlined retain of _HashTable.Storage?((uint64_t)v28);
    outlined retain of _HashTable.Storage?((uint64_t)&v27);
    outlined retain of _HashTable.Storage?((uint64_t)&v25);
    outlined retain of _HashTable.Storage?((uint64_t)v28);
    outlined retain of _HashTable.Storage?((uint64_t)&v27);
    result = outlined retain of _HashTable.Storage?((uint64_t)&v25);
    v11 = 0;
    v12 = v7 + 40;
    do
    {
      if (!v10)
      {
        __break(1u);
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      v13 = *(_QWORD *)(*(_QWORD *)v12 + 16);
      v14 = __OFADD__(v11, v13);
      v11 += v13;
      if (v14)
        goto LABEL_20;
      --v10;
      v12 += 16;
      --v9;
    }
    while (v9);
    outlined release of _HashTable.Storage?((uint64_t)v28);
    outlined release of _HashTable.Storage?((uint64_t)&v27);
    outlined release of _HashTable.Storage?((uint64_t)&v25);
    outlined release of _HashTable.Storage?((uint64_t)v28);
    outlined release of _HashTable.Storage?((uint64_t)&v27);
    result = outlined release of _HashTable.Storage?((uint64_t)&v25);
    if (v11)
      v15 = 1;
    else
      v15 = a1 == -7;
    if (v15)
      goto LABEL_16;
  }
  else if (a1 == -7)
  {
    goto LABEL_16;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_21:
    __break(1u);
  }
  else
  {
    v16 = *(_QWORD *)(a3 + 64);
    if (*(_QWORD *)(v16 + 16) > a1)
    {
      v17 = v16 + 48 * a1;
      v18 = *(_QWORD *)(v17 + 56);
      if (v18 != -7)
      {
        v24 = v17 + 32;
        v23 = *(_BYTE *)(v24 + 40);
        v22 = *(_QWORD *)(v24 + 32);
        v20 = *(_QWORD *)(v24 + 8);
        v21 = *(_QWORD *)(v24 + 16);
        v19 = *(_QWORD *)v24;
        outlined copy of NodePersonality(*(_QWORD *)v24);
        swift_bridgeObjectRetain();
        result = swift_bridgeObjectRetain();
        goto LABEL_18;
      }
LABEL_16:
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v18 = 0;
      v22 = 0;
      v23 = 0;
LABEL_18:
      *(_QWORD *)a4 = v19;
      *(_QWORD *)(a4 + 8) = v20;
      *(_QWORD *)(a4 + 16) = v21;
      *(_QWORD *)(a4 + 24) = v18;
      *(_QWORD *)(a4 + 32) = v22;
      *(_BYTE *)(a4 + 40) = v23;
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t Graph.removeEdges(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t result;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[8];

  v3 = *(_QWORD *)(v1 + 16);
  result = specialized OrderedSet._find(_:)(*(_QWORD *)a1, *(_QWORD *)v1, *(_QWORD **)(v1 + 8), (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
  if ((v5 & 1) == 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (result < *(_QWORD *)(v3 + 16))
    {
      v6 = (_QWORD *)(v3 + 48 * result);
      v7 = v6[4];
      v8 = v6[5];
      v9 = v6[6];
      v20 = *(_OWORD *)(a1 + 16);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      outlined retain of String((uint64_t)&v20);
      swift_retain();
      swift_retain();
      specialized OrderedDictionary.subscript.getter(a1, v7, v8, v9);
      v11 = v10;
      swift_release();
      outlined release of String((uint64_t)&v20);
      if (!v11)
        return outlined consume of Graph.Adjacent?(v7, v8);
      outlined consume of Graph.Adjacent?(v7, v8);
      swift_retain();
      outlined retain of String((uint64_t)&v20);
      v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_nTm(v11, (uint64_t *)a1);
      swift_release();
      outlined release of String((uint64_t)&v20);
      swift_release();
      swift_release();
      v13 = *(_QWORD *)(v12 + 16);
      if (!v13)
        return swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v14 = 32;
      do
      {
        v15 = *(_OWORD *)(v12 + v14);
        v16 = *(_OWORD *)(v12 + v14 + 32);
        v21[1] = *(_OWORD *)(v12 + v14 + 16);
        v21[2] = v16;
        v21[0] = v15;
        v17 = *(_OWORD *)(v12 + v14 + 48);
        v18 = *(_OWORD *)(v12 + v14 + 64);
        v19 = *(_OWORD *)(v12 + v14 + 96);
        v21[5] = *(_OWORD *)(v12 + v14 + 80);
        v21[6] = v19;
        v21[3] = v17;
        v21[4] = v18;
        outlined retain of Edge((uint64_t)v21);
        Graph.remove(_:)((uint64_t)v21);
        outlined release of Edge((uint64_t)v21);
        v14 += 112;
        --v13;
      }
      while (v13);
      return swift_bridgeObjectRelease_n();
    }
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in Graph.removeEdges(connectedTo:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  void (*v6)(_OWORD *, _QWORD);
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD);
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int64_t v12;
  __int128 *v13;
  _QWORD v14[4];
  _OWORD v15[2];
  _BYTE v16[8];
  _OWORD v17[3];
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;

  outlined init with take of MetalFunctionNode?(a2, (uint64_t)v16, &demangling cache variable for type metadata for Output?);
  result = outlined init with take of MetalFunctionNode?(a2, (uint64_t)v17, &demangling cache variable for type metadata for Output?);
  if (*((_QWORD *)&v17[0] + 1))
  {
    v19 = v17[0];
    v20 = v17[1];
    v21 = v17[2];
    v22 = v18;
    v5 = *(_QWORD *)&v17[0];
    swift_retain();
    swift_bridgeObjectRetain();
    v6 = (void (*)(_OWORD *, _QWORD))specialized OrderedDictionary.subscript.modify(v15, v5);
    if (*(_QWORD *)(v7 + 8))
    {
      swift_retain();
      swift_retain();
      swift_release();
      swift_release();
      v23 = v20;
      swift_retain();
      outlined retain of String((uint64_t)&v23);
      v8 = (void (*)(_QWORD *, _QWORD))specialized OrderedDictionary.subscript.modify(v14, (uint64_t *)&v19);
      v10 = (uint64_t *)(v9 + 8);
      if (*(_QWORD *)(v9 + 8))
      {
        v24 = *(_OWORD *)(a1 + 16);
        swift_retain();
        outlined retain of String((uint64_t)&v24);
        v11 = specialized MutableCollection._halfStablePartition(isSuffixElement:)(v10, (uint64_t *)a1);
        swift_release();
        outlined release of String((uint64_t)&v24);
        v12 = *(_QWORD *)(*v10 + 16);
        if (v12 < v11)
        {
          __break(1u);
          swift_release();
          outlined release of String((uint64_t)&v24);
          result = specialized OrderedSet._regenerateHashTable()();
          __break(1u);
          return result;
        }
        specialized ContiguousArray.replaceSubrange<A>(_:with:)(v11, v12);
        specialized OrderedSet._regenerateHashTable()();
      }
      v8(v14, 0);
      swift_release();
      v13 = &v23;
      outlined release of String((uint64_t)&v23);
      v6(v15, 0);
      swift_release();
    }
    else
    {
      v6(v15, 0);
      swift_release();
      v15[0] = v20;
      v13 = v15;
    }
    return outlined release of String((uint64_t)v13);
  }
  return result;
}

