uint64_t closure #2 in Graph.removeEdges(connectedTo:)(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4)
{
  __int128 v9;

  v9 = *(_OWORD *)(a1 + 16);
  swift_retain();
  outlined retain of String((uint64_t)&v9);
  specialized Sequence.forEach(_:)(a2, a3, a4, a1);
  swift_release();
  return outlined release of String((uint64_t)&v9);
}

uint64_t specialized OrderedSet.remove(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD v22[5];
  unsigned __int8 v23;
  uint64_t v24;

  v6 = *v2;
  v5 = v2[1];
  v7 = v5 + 32;
  v8 = *(_QWORD *)(v5 + 16);
  if (!*v2)
  {
    result = specialized Collection<>.firstIndex(of:)(a1, v5 + 32, *(_QWORD *)(v5 + 16));
    v13 = 0;
    if ((v21 & 1) != 0)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      goto LABEL_8;
    }
    v9 = result;
    goto LABEL_6;
  }
  swift_retain();
  v9 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(a1, v7, v8, (_QWORD *)(v6 + 16), v6 + 32);
  v11 = v10;
  v13 = v12;
  result = swift_release();
  if ((v11 & 1) == 0)
  {
LABEL_6:
    result = specialized OrderedSet._removeExistingMember(at:in:)(v9, v13, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(uint64_t))specialized OrderedSet._regenerateHashTable(), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:), (uint64_t)v22);
    v13 = v22[0];
    v15 = v22[1];
    v16 = v22[2];
    v17 = v22[3];
    v18 = v22[4];
    v19 = v23;
    v20 = v24;
    goto LABEL_8;
  }
  v13 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
LABEL_8:
  *a2 = v13;
  a2[1] = v15;
  a2[2] = v16;
  a2[3] = v17;
  a2[4] = v18;
  a2[5] = v19;
  a2[6] = v20;
  return result;
}

unint64_t Graph.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  v4 = *(_QWORD *)(v2 + 64);
  if (*(_QWORD *)(v4 + 16) <= result)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v5 = v4 + 48 * result;
  v6 = *(_QWORD *)(v5 + 56);
  if (v6 == -7)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v6 = 0;
    v10 = 0;
    v11 = 0;
  }
  else
  {
    v12 = v5 + 32;
    v11 = *(_BYTE *)(v12 + 40);
    v10 = *(_QWORD *)(v12 + 32);
    v8 = *(_QWORD *)(v12 + 8);
    v9 = *(_QWORD *)(v12 + 16);
    v7 = *(_QWORD *)v12;
    outlined copy of NodePersonality(*(_QWORD *)v12);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
  }
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = v10;
  *(_BYTE *)(a2 + 40) = v11;
  return result;
}

uint64_t Graph.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::UInt v13;
  Swift::UInt v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  Swift::UInt v19;
  Swift::UInt v20;
  char v21;

  v2 = v1;
  v4 = *(_QWORD *)v2;
  v5 = *(_QWORD *)(v2 + 8);
  v6 = *(_QWORD *)(v2 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  specialized OrderedDictionary<>.hash(into:)(a1, v4, v5, v6);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(_QWORD *)(v2 + 40));
  v7 = *(_QWORD *)(v2 + 48);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v7);
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(v2 + 56);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v8);
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v9);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(_QWORD *)(v2 + 72));
  v11 = *(_QWORD *)(v2 + 80);
  v10 = *(_QWORD *)(v2 + 88);
  v12 = *(_QWORD *)(v2 + 96);
  v13 = *(_QWORD *)(v2 + 104);
  v14 = *(_QWORD *)(v2 + 112);
  v15 = *(_BYTE *)(v2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v11);
  NodePersonality.hash(into:)(a1, v11);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v12);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v13);
  if ((v15 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }
  outlined consume of NodePersonality(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(v2 + 128);
  v16 = *(_QWORD *)(v2 + 136);
  v18 = *(_QWORD *)(v2 + 144);
  v19 = *(_QWORD *)(v2 + 152);
  v20 = *(_QWORD *)(v2 + 160);
  v21 = *(_BYTE *)(v2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v17);
  NodePersonality.hash(into:)(a1, v17);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v18);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v19);
  if ((v21 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v20);
  }
  outlined consume of NodePersonality(v17);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

Swift::Int Graph.hashValue.getter()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  Graph.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Graph()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  Graph.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Graph()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  Graph.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Graph(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[9];
  _OWORD v14[2];
  _OWORD v15[9];
  _OWORD v16[2];

  v2 = a1[9];
  v13[8] = a1[8];
  v14[0] = v2;
  *(_OWORD *)((char *)v14 + 9) = *(_OWORD *)((char *)a1 + 153);
  v3 = a1[5];
  v13[4] = a1[4];
  v13[5] = v3;
  v4 = a1[7];
  v13[6] = a1[6];
  v13[7] = v4;
  v5 = a1[1];
  v13[0] = *a1;
  v13[1] = v5;
  v6 = a1[3];
  v13[2] = a1[2];
  v13[3] = v6;
  v7 = a2[9];
  v15[8] = a2[8];
  v16[0] = v7;
  *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)((char *)a2 + 153);
  v8 = a2[5];
  v15[4] = a2[4];
  v15[5] = v8;
  v9 = a2[7];
  v15[6] = a2[6];
  v15[7] = v9;
  v10 = a2[1];
  v15[0] = *a2;
  v15[1] = v10;
  v11 = a2[3];
  v15[2] = a2[2];
  v15[3] = v11;
  return specialized static Graph.== infix(_:_:)((uint64_t)v13, (uint64_t)v15) & 1;
}

uint64_t closure #1 in Graph.edges(from:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  __int128 v17;

  v4 = *a2;
  v3 = a2[1];
  v6 = a2[4];
  v7 = *((_BYTE *)a2 + 40);
  v8 = a2[6];
  v9 = *a1;
  v10 = a1[1];
  v11 = a1[2];
  v12 = a1[3];
  v13 = a1[4];
  v14 = *((_BYTE *)a1 + 40);
  v15 = a1[6];
  v17 = *((_OWORD *)a2 + 1);
  v5 = v17;
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = v3;
  *(_OWORD *)(a3 + 16) = v5;
  *(_QWORD *)(a3 + 32) = v6;
  *(_BYTE *)(a3 + 40) = v7 & 1;
  *(_QWORD *)(a3 + 48) = v8;
  *(_QWORD *)(a3 + 56) = v9;
  *(_QWORD *)(a3 + 64) = v10;
  *(_QWORD *)(a3 + 72) = v11;
  *(_QWORD *)(a3 + 80) = v12;
  *(_QWORD *)(a3 + 88) = v13;
  *(_BYTE *)(a3 + 96) = v14;
  *(_QWORD *)(a3 + 104) = v15;
  swift_retain();
  outlined retain of String((uint64_t)&v17);
  swift_retain();
  return swift_bridgeObjectRetain();
}

unint64_t Graph.edges(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t result;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v1 + 16);
  result = specialized OrderedSet._find(_:)(*(_QWORD *)(a1 + 24), *(_QWORD *)v1, *(_QWORD **)(v1 + 8), (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
  if ((v4 & 1) != 0)
    return MEMORY[0x24BEE4AF8];
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)(v2 + 16))
  {
    v5 = (_QWORD *)(v2 + 48 * result);
    v6 = v5[7];
    v7 = v5[8];
    v8 = v5[9];
    swift_retain();
    swift_retain();
    swift_retain();
    v9 = specialized Sequence.compactMap<A>(_:)(v6, v7, v8);
    swift_release();
    swift_release();
    swift_release();
    return v9;
  }
  __break(1u);
  return result;
}

BOOL Graph.isEmpty.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v8;
  _BOOL8 result;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 1;
  v3 = (uint64_t *)(v1 + 56);
  v4 = v2 - 1;
  do
  {
    v6 = *v3;
    v3 += 6;
    v5 = v6;
    v8 = v4-- != 0;
    result = v5 == -7;
  }
  while (v5 == -7 && v8);
  return result;
}

uint64_t closure #1 in Graph.insert<A>(_:)(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  _OWORD v4[3];
  uint64_t v5;
  _OWORD v6[3];
  uint64_t v7;

  v1 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v1;
  v4[2] = *(_OWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  v2 = *(_OWORD *)(a1 + 72);
  v6[0] = *(_OWORD *)(a1 + 56);
  v6[1] = v2;
  v6[2] = *(_OWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 104);
  return Graph.connect(_:to:)((uint64_t)v4, (unint64_t)v6);
}

unint64_t closure #3 in Graph.prune(_:)(unint64_t *a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t result;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  Swift::UInt *v19;
  Swift::UInt v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  char v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  __int128 *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _OWORD v93[2];
  uint64_t v94[5];
  char v95;
  uint64_t v96;
  uint64_t v97;

  v3 = v2;
  v5 = *a1;
  result = Graph.remove(_:)((uint64_t)a1);
  if (v5 == -7)
    return result;
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_68;
  v7 = *((_QWORD *)a2 + 8);
  if (v5 >= *(_QWORD *)(v7 + 16))
  {
LABEL_69:
    __break(1u);
    return result;
  }
  v8 = (_QWORD *)(v7 + 48 * v5);
  v9 = v8[4];
  v10 = v8[6];
  v70 = v8[7];
  v71 = v9;
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
  {
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v9);
    swift_bridgeObjectRetain();
    goto LABEL_57;
  }
  swift_bridgeObjectRetain_n();
  outlined copy of NodePersonality(v9);
  swift_bridgeObjectRetain();
  v12 = (uint64_t *)(v10 + 40);
  v13 = (uint64_t *)(v10 + 48);
  v14 = (uint64_t *)(v10 + 56);
  v15 = (uint64_t *)(v10 + 64);
  v16 = (char *)(v10 + 72);
  v17 = (uint64_t *)(v10 + 80);
  v18 = 1;
  v76 = v10 + 32;
  v19 = (Swift::UInt *)(v10 + 32);
  v73 = v11;
  v72 = a2;
  while (1)
  {
    v20 = *v19;
    v21 = *v12;
    v22 = *v13;
    v23 = *v14;
    v24 = *v15;
    v25 = *v16;
    v26 = *v17;
    v94[0] = *v19;
    v94[1] = v21;
    v82 = v22;
    v94[2] = v22;
    v94[3] = v23;
    v97 = v23;
    v77 = v24;
    v78 = v26;
    v94[4] = v24;
    v79 = v25;
    v95 = v25;
    v96 = v26;
    v27 = a2[9];
    v92 = a2[8];
    v93[0] = v27;
    *(_OWORD *)((char *)v93 + 9) = *(__int128 *)((char *)a2 + 153);
    v28 = a2[5];
    v88 = a2[4];
    v89 = v28;
    v29 = a2[7];
    v90 = a2[6];
    v91 = v29;
    v30 = a2[1];
    v84 = *a2;
    v85 = v30;
    v31 = a2[3];
    v86 = a2[2];
    v87 = v31;
    v32 = v30;
    v33 = (_QWORD *)(*((_QWORD *)&v84 + 1) + 32);
    v34 = *(_QWORD *)(*((_QWORD *)&v84 + 1) + 16);
    v81 = v18;
    if ((_QWORD)v84)
    {
      result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v20, (uint64_t)v33, v34, (_QWORD *)(v84 + 16), v84 + 32);
      if ((v35 & 1) != 0)
        goto LABEL_17;
      if ((result & 0x8000000000000000) != 0)
      {
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
        goto LABEL_67;
      }
    }
    else
    {
      if (!v34)
        goto LABEL_17;
      if (*v33 == v20)
      {
        result = 0;
      }
      else
      {
        if (v34 == 1)
          goto LABEL_17;
        if (*(_QWORD *)(*((_QWORD *)&v84 + 1) + 40) == v20)
        {
          result = 1;
        }
        else
        {
          if (v34 == 2)
          {
LABEL_17:
            swift_retain();
            swift_bridgeObjectRetain();
            outlined retain of Graph((uint64_t)&v84);
            v36 = MEMORY[0x24BEE4AF8];
            goto LABEL_51;
          }
          if (*(_QWORD *)(*((_QWORD *)&v84 + 1) + 48) == v20)
          {
            result = 2;
          }
          else
          {
            v37 = 0;
            do
            {
              if (v34 - 3 == v37)
                goto LABEL_17;
              v38 = *(_QWORD *)(*((_QWORD *)&v84 + 1) + 56 + 8 * v37++);
            }
            while (v38 != v20);
            result = v37 + 2;
            if (v37 + 2 < 0)
              goto LABEL_64;
          }
        }
      }
    }
    if (result >= *(_QWORD *)(v32 + 16))
      goto LABEL_65;
    v75 = v3;
    v39 = (_QWORD *)(v32 + 48 * result);
    v40 = v39[4];
    v41 = v39[5];
    v42 = v39[6];
    v43 = *(_QWORD *)(v41 + 16);
    v83 = v21;
    if (!v40)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      outlined retain of Graph((uint64_t)&v84);
      swift_retain();
      v74 = v42;
      swift_retain();
      if (!v43)
      {
LABEL_49:
        swift_release();
        swift_release();
        v36 = MEMORY[0x24BEE4AF8];
        v3 = v75;
        a2 = v72;
        v11 = v73;
        goto LABEL_51;
      }
      v45 = 0;
      v49 = (_QWORD *)(v41 + 80);
      while (1)
      {
        if (*(v49 - 6) == v20)
        {
          v50 = *(v49 - 4);
          v51 = *(v49 - 3);
          v80 = *(v49 - 2);
          v52 = *((_BYTE *)v49 - 8);
          v53 = *v49;
          v54 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*(v49 - 5) + 128);
          swift_retain();
          swift_bridgeObjectRetain();
          if ((v54(v83) & 1) != 0)
          {
            if (v50 == v82 && v51 == v97)
            {
              swift_bridgeObjectRelease();
              result = swift_release();
            }
            else
            {
              v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              result = swift_release();
              if ((v55 & 1) == 0)
                goto LABEL_33;
            }
            if ((v52 & 1) != 0)
            {
              v56 = v79;
              if (v53 != v78)
                v56 = 0;
              if ((v56 & 1) != 0)
              {
LABEL_48:
                v46 = v75;
                a2 = v72;
LABEL_28:
                if (v45 < *(_QWORD *)(v74 + 16))
                {
                  v47 = *(_QWORD *)(v74 + 16 * v45 + 40);
                  swift_retain();
                  swift_retain();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_retain();
                  swift_bridgeObjectRetain();
                  v48 = v46;
                  v36 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_nTm(v47, v94);
                  v3 = v48;
                  swift_release();
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_release();
                  v11 = v73;
                  goto LABEL_51;
                }
LABEL_67:
                __break(1u);
LABEL_68:
                __break(1u);
                goto LABEL_69;
              }
            }
            else if ((v79 & 1) == 0 && v80 == v77 && v53 == v78)
            {
              goto LABEL_48;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
LABEL_33:
        v49 += 7;
        if (v43 == ++v45)
          goto LABEL_49;
      }
    }
    swift_retain();
    swift_bridgeObjectRetain();
    outlined retain of Graph((uint64_t)&v84);
    swift_retain();
    swift_retain();
    swift_retain();
    result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v94, v41 + 32, v43, (_QWORD *)(v40 + 16), v40 + 32);
    if ((v44 & 1) == 0)
    {
      v45 = result;
      v74 = v42;
      v46 = v75;
      if ((result & 0x8000000000000000) == 0)
        goto LABEL_28;
      goto LABEL_66;
    }
    swift_release();
    swift_release();
    swift_release();
    v36 = MEMORY[0x24BEE4AF8];
    v11 = v73;
    v3 = v75;
LABEL_51:
    outlined release of Graph((uint64_t)&v84);
    v57 = *(_QWORD *)(v36 + 16);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    if (v57)
    {
      swift_bridgeObjectRelease_n();
      outlined consume of NodePersonality(v71);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    if (v81 == v11)
      break;
    v19 = (Swift::UInt *)(v76 + 56 * v81);
    v12 = (uint64_t *)(v19 + 1);
    v13 = (uint64_t *)(v19 + 2);
    v14 = (uint64_t *)(v19 + 3);
    v15 = (uint64_t *)(v19 + 4);
    v16 = (char *)(v19 + 5);
    v17 = (uint64_t *)(v19 + 6);
    v18 = v81 + 1;
  }
  swift_bridgeObjectRelease_n();
LABEL_57:
  v58 = swift_bridgeObjectRetain();
  v59 = specialized Sequence.compactMap<A>(_:)(v58, a2);
  swift_bridgeObjectRelease();
  v60 = *(_QWORD *)(v59 + 16);
  if (v60)
  {
    swift_bridgeObjectRetain();
    v61 = 0;
    do
    {
      v62 = *(_QWORD *)(v59 + v61 + 136);
      v63 = *(_BYTE *)(v59 + v61 + 128);
      v65 = *(_QWORD *)(v59 + v61 + 112);
      v64 = *(_QWORD *)(v59 + v61 + 120);
      v66 = *(_OWORD *)(v59 + v61 + 96);
      v67 = *(_BYTE *)(v59 + v61 + 72);
      v68 = *(_QWORD *)(v59 + v61 + 64);
      v69 = *(_OWORD *)(v59 + v61 + 48);
      v84 = *(_OWORD *)(v59 + v61 + 32);
      v85 = v69;
      *(_QWORD *)&v86 = v68;
      BYTE8(v86) = v67;
      v87 = *(_OWORD *)(v59 + v61 + 80);
      v88 = v66;
      *(_QWORD *)&v89 = v65;
      *((_QWORD *)&v89 + 1) = v64;
      LOBYTE(v90) = v63;
      *((_QWORD *)&v90 + 1) = v62;
      closure #3 in Graph.prune(_:)(&v84, a2);
      v61 += 112;
      --v60;
    }
    while (v60);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  specialized Graph.remove(_:)(v70);
  outlined consume of NodePersonality(v71);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t Graph.prune(at:)(unint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::UInt v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t);
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  char v64;
  uint64_t v65;
  __int128 v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  char v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  _BYTE v90[24];
  uint64_t v91;
  __int128 v92;
  _BYTE v93[24];
  __int128 v94;
  __int128 v95;
  char v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  char v100;
  uint64_t v101[5];
  char v102;
  uint64_t v103;

  v2 = v1;
  result = Graph.remove(_:)((uint64_t)a1);
  v5 = *a1;
  if (*a1 != -7)
  {
    if ((v5 & 0x8000000000000000) != 0)
      goto LABEL_67;
    v6 = v1[8];
    if (v5 >= *(_QWORD *)(v6 + 16))
    {
LABEL_68:
      __break(1u);
    }
    else
    {
      v7 = 0;
      v8 = (_QWORD *)(v6 + 48 * v5);
      v9 = v8[4];
      v10 = v8[6];
      v69 = v8[7];
      v11 = *(_QWORD *)(v10 + 16);
      if (v11)
      {
        v12 = v10 + 32;
        v14 = *v1;
        v13 = (_QWORD *)v1[1];
        v15 = v1[2];
        v16 = *(_OWORD *)(v2 + 3);
        v17 = v2[5];
        v18 = *((_BYTE *)v2 + 120);
        v19 = v2[16];
        v20 = *((_BYTE *)v2 + 168);
        *(_QWORD *)&v89 = *v2;
        *((_QWORD *)&v89 + 1) = v13;
        *(_QWORD *)v90 = v15;
        *(_OWORD *)&v90[8] = v16;
        v91 = v17;
        v92 = *((_OWORD *)v2 + 3);
        *(_QWORD *)v93 = v6;
        *(_OWORD *)&v93[8] = *(_OWORD *)(v2 + 9);
        v94 = *(_OWORD *)(v2 + 11);
        v95 = *(_OWORD *)(v2 + 13);
        v96 = v18;
        v97 = v19;
        v98 = *(_OWORD *)(v2 + 17);
        v67 = v2;
        v99 = *(_OWORD *)(v2 + 19);
        v82 = v13 + 4;
        v100 = v20;
        swift_bridgeObjectRetain_n();
        v68 = v9;
        outlined copy of NodePersonality(v9);
        v78 = v14 + 32;
        v79 = (_QWORD *)(v14 + 16);
        v76 = v15 + 32;
        v77 = v15;
        swift_bridgeObjectRetain();
        v21 = 0;
        v83 = v13;
        v70 = v13 + 7;
        v74 = v14;
        v75 = v12;
        v71 = v11;
        while (1)
        {
          v22 = v12 + 56 * v21;
          v24 = *(_QWORD *)v22;
          v23 = *(_QWORD *)(v22 + 8);
          v26 = *(_QWORD *)(v22 + 16);
          v25 = *(_QWORD *)(v22 + 24);
          v27 = *(_QWORD *)(v22 + 32);
          v28 = *(_BYTE *)(v22 + 40);
          v29 = *(_QWORD *)(v22 + 48);
          v101[0] = *(_QWORD *)v22;
          v101[1] = v23;
          v87 = v25;
          v88 = v23;
          v85 = v21;
          v86 = v26;
          v101[2] = v26;
          v101[3] = v25;
          v101[4] = v27;
          v102 = v28;
          v103 = v29;
          v30 = v83[2];
          if (v14)
          {
            result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v24, (uint64_t)v82, v30, v79, v78);
            if ((v31 & 1) != 0)
              goto LABEL_17;
            if ((result & 0x8000000000000000) != 0)
            {
LABEL_63:
              __break(1u);
LABEL_64:
              __break(1u);
LABEL_65:
              __break(1u);
              goto LABEL_66;
            }
          }
          else
          {
            if (!v30)
              goto LABEL_17;
            if (*v82 == v24)
            {
              result = 0;
            }
            else
            {
              if (v30 == 1)
                goto LABEL_17;
              if (v83[5] == v24)
              {
                result = 1;
              }
              else
              {
                if (v30 == 2)
                {
LABEL_17:
                  swift_retain();
                  swift_bridgeObjectRetain();
                  outlined retain of Graph((uint64_t)&v89);
                  v32 = MEMORY[0x24BEE4AF8];
                  goto LABEL_51;
                }
                if (v83[6] == v24)
                {
                  result = 2;
                }
                else
                {
                  v33 = 0;
                  do
                  {
                    if (v30 - 3 == v33)
                      goto LABEL_17;
                    v34 = v70[v33++];
                  }
                  while (v34 != v24);
                  result = v33 + 2;
                  if (v33 + 2 < 0)
                    goto LABEL_63;
                }
              }
            }
          }
          if (result >= *(_QWORD *)(v77 + 16))
            goto LABEL_64;
          v35 = v11;
          v81 = v29;
          v36 = (uint64_t *)(v76 + 48 * result);
          v37 = *v36;
          v38 = v36[1];
          v39 = v36[2];
          v40 = *(_QWORD *)(v38 + 16);
          if (!*v36)
            break;
          swift_retain();
          swift_bridgeObjectRetain();
          outlined retain of Graph((uint64_t)&v89);
          swift_retain();
          swift_retain();
          swift_retain();
          result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v101, v38 + 32, v40, (_QWORD *)(v37 + 16), v37 + 32);
          if ((v41 & 1) == 0)
          {
            v42 = result;
            v11 = v35;
            if ((result & 0x8000000000000000) == 0)
              goto LABEL_28;
            goto LABEL_65;
          }
          swift_release();
          swift_release();
          swift_release();
          v32 = MEMORY[0x24BEE4AF8];
          v14 = v74;
          v12 = v75;
          v11 = v35;
LABEL_51:
          outlined release of Graph((uint64_t)&v89);
          v54 = *(_QWORD *)(v32 + 16);
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          if (v54)
          {
            swift_bridgeObjectRelease_n();
            outlined consume of NodePersonality(v68);
            goto LABEL_61;
          }
          v21 = v85 + 1;
          if (v85 + 1 == v11)
          {
            swift_bridgeObjectRelease_n();
            v9 = v68;
            v2 = v67;
            goto LABEL_55;
          }
        }
        v73 = v7;
        swift_retain();
        swift_bridgeObjectRetain();
        outlined retain of Graph((uint64_t)&v89);
        swift_retain();
        v72 = v39;
        swift_retain();
        if (!v40)
        {
LABEL_49:
          swift_release();
          swift_release();
          v32 = MEMORY[0x24BEE4AF8];
          v7 = v73;
          v14 = v74;
          v11 = v71;
          v12 = v75;
          goto LABEL_51;
        }
        v44 = v38;
        v45 = v40;
        v80 = v28;
        v42 = 0;
        v46 = (_QWORD *)(v44 + 80);
        while (1)
        {
          if (*(v46 - 6) == v24)
          {
            v47 = *(v46 - 4);
            v48 = *(v46 - 3);
            v84 = *(v46 - 2);
            v49 = *((_BYTE *)v46 - 8);
            v50 = *v46;
            v51 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*(v46 - 5) + 128);
            swift_retain();
            swift_bridgeObjectRetain();
            if ((v51(v88) & 1) != 0)
            {
              if (v47 == v86 && v48 == v87)
              {
                swift_bridgeObjectRelease();
                result = swift_release();
              }
              else
              {
                v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                result = swift_release();
                if ((v52 & 1) == 0)
                  goto LABEL_33;
              }
              if ((v49 & 1) != 0)
              {
                v53 = v80;
                if (v50 != v81)
                  v53 = 0;
                if ((v53 & 1) != 0)
                {
LABEL_48:
                  v39 = v72;
                  v7 = v73;
                  v11 = v71;
LABEL_28:
                  if (v42 < *(_QWORD *)(v39 + 16))
                  {
                    v43 = *(_QWORD *)(v39 + 16 * v42 + 40);
                    swift_retain();
                    swift_retain();
                    swift_release();
                    swift_release();
                    swift_release();
                    swift_retain();
                    swift_bridgeObjectRetain();
                    v32 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_nTm(v43, v101);
                    swift_release();
                    swift_release();
                    swift_bridgeObjectRelease();
                    swift_release();
                    v14 = v74;
                    v12 = v75;
                    goto LABEL_51;
                  }
LABEL_66:
                  __break(1u);
LABEL_67:
                  __break(1u);
                  goto LABEL_68;
                }
              }
              else if ((v80 & 1) == 0 && v84 == v27 && v50 == v81)
              {
                goto LABEL_48;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
          }
LABEL_33:
          v46 += 7;
          if (v45 == ++v42)
            goto LABEL_49;
        }
      }
      swift_bridgeObjectRetain();
      outlined copy of NodePersonality(v9);
      swift_bridgeObjectRetain();
LABEL_55:
      v55 = swift_bridgeObjectRetain();
      v56 = specialized Sequence.compactMap<A>(_:)(v55, v2);
      swift_bridgeObjectRelease();
      v57 = *(_QWORD *)(v56 + 16);
      if (v57)
      {
        swift_bridgeObjectRetain();
        v58 = 0;
        do
        {
          v59 = *(_QWORD *)(v56 + v58 + 136);
          v60 = *(_BYTE *)(v56 + v58 + 128);
          v62 = *(_QWORD *)(v56 + v58 + 112);
          v61 = *(_QWORD *)(v56 + v58 + 120);
          v63 = *(_OWORD *)(v56 + v58 + 96);
          v64 = *(_BYTE *)(v56 + v58 + 72);
          v65 = *(_QWORD *)(v56 + v58 + 64);
          v66 = *(_OWORD *)(v56 + v58 + 48);
          v89 = *(_OWORD *)(v56 + v58 + 32);
          *(_OWORD *)v90 = v66;
          *(_QWORD *)&v90[16] = v65;
          LOBYTE(v91) = v64;
          v92 = *(_OWORD *)(v56 + v58 + 80);
          *(_OWORD *)v93 = v63;
          *(_QWORD *)&v93[16] = v62;
          *(_QWORD *)&v94 = v61;
          BYTE8(v94) = v60;
          *(_QWORD *)&v95 = v59;
          closure #3 in Graph.prune(_:)((unint64_t *)&v89, (__int128 *)v2);
          v58 += 112;
          --v57;
        }
        while (v57);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      specialized Graph.remove(_:)(v69);
      outlined consume of NodePersonality(v9);
LABEL_61:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t Graph.describeEdge(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[8];
  _BYTE v36[16];
  _QWORD v37[5];
  char v38;
  _QWORD v39[5];
  char v40;

  v2 = result;
  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result == -7)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    goto LABEL_6;
  }
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v10 = *(_QWORD *)(v1 + 64);
  if (v3 >= *(_QWORD *)(v10 + 16))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v11 = v10 + 48 * v3;
  v4 = *(_QWORD *)(v11 + 32);
  v5 = *(_QWORD *)(v11 + 40);
  v6 = *(_QWORD *)(v11 + 48);
  v7 = *(_QWORD *)(v11 + 56);
  v8 = *(_QWORD *)(v11 + 64);
  v9 = *(_BYTE *)(v11 + 72);
  outlined copy of NodePersonality(v4);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
LABEL_6:
  v39[0] = v4;
  v39[1] = v5;
  v39[2] = v6;
  v39[3] = v7;
  v39[4] = v8;
  v40 = v9;
  v12 = *(_QWORD *)(v2 + 56);
  v34 = v5;
  if (v12 != -7)
  {
    if ((v12 & 0x8000000000000000) == 0)
    {
      v19 = *(_QWORD *)(v1 + 64);
      if (v12 < *(_QWORD *)(v19 + 16))
      {
        v20 = v19 + 48 * v12;
        v13 = *(_QWORD *)(v20 + 32);
        v14 = *(_QWORD *)(v20 + 40);
        v15 = *(_QWORD *)(v20 + 48);
        v16 = *(_QWORD *)(v20 + 56);
        v17 = *(_QWORD *)(v20 + 64);
        v18 = *(_BYTE *)(v20 + 72);
        outlined copy of NodePersonality(v13);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_11;
      }
LABEL_25:
      __break(1u);
      return result;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
LABEL_11:
  v33 = v14;
  v37[0] = v13;
  v37[1] = v14;
  v37[2] = v15;
  v37[3] = v16;
  v37[4] = v17;
  v38 = v18;
  outlined retain of Edge(v2);
  v21 = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11ShaderGraph0cD4NodeV_s5NeverOSSTg504_s11c41Graph0B0V12describeEdgeySSAA0D0VFSSAA0aB4E6VXEfU_AD4EdgeVTf1cn_nTf4ng_nTm((uint64_t)v39, v2, (uint64_t)v36, (void (*)(uint64_t *__return_ptr, _QWORD *, uint64_t))closure #1 in Graph.describeEdge(_:));
  v23 = v22;
  outlined release of Edge(v2);
  if (v23)
    v24 = v21;
  else
    v24 = 0xD000000000000010;
  if (!v23)
    v23 = (void *)0x8000000245FCC840;
  outlined retain of Edge(v2);
  v25 = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11ShaderGraph0cD4NodeV_s5NeverOSSTg504_s11c41Graph0B0V12describeEdgeySSAA0D0VFSSAA0aB4E6VXEfU_AD4EdgeVTf1cn_nTf4ng_nTm((uint64_t)v37, v2, (uint64_t)v35, (void (*)(uint64_t *__return_ptr, _QWORD *, uint64_t))closure #2 in Graph.describeEdge(_:));
  v27 = v26;
  outlined release of Edge(v2);
  if (v27)
    v28 = v25;
  else
    v28 = 0xD000000000000010;
  if (!v27)
    v27 = (void *)0x8000000245FCC840;
  v29._countAndFlagsBits = v24;
  v29._object = v23;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 0x28203E2D2029;
  v30._object = (void *)0xE600000000000000;
  String.append(_:)(v30);
  v31._countAndFlagsBits = v28;
  v31._object = v27;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = 41;
  v32._object = (void *)0xE100000000000000;
  String.append(_:)(v32);
  outlined consume of ShaderGraphNode?(v13, v33);
  outlined consume of ShaderGraphNode?(v4, v34);
  return 40;
}

uint64_t closure #1 in Graph.describeEdge(_:)@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t result;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(void **)(a1 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8236;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v3;
  v7._object = v4;
  String.append(_:)(v7);
  swift_release();
  result = swift_bridgeObjectRelease_n();
  *a2 = 1701080942;
  a2[1] = v9;
  return result;
}

uint64_t closure #2 in Graph.describeEdge(_:)@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t result;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(void **)(a1 + 80);
  swift_retain();
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8236;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v3;
  v7._object = v4;
  String.append(_:)(v7);
  swift_release();
  result = swift_bridgeObjectRelease_n();
  *a2 = 1701080942;
  a2[1] = v9;
  return result;
}

uint64_t Edge.debugDescription.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;

  v0._countAndFlagsBits = 1701274693;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = 10272;
  v1._object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 540945696;
  v2._object = (void *)0xE400000000000000;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0;
}

uint64_t specialized OrderedSet._append(_:)(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v4 = *v1;
  v3 = v1[1];
  v5 = v3 + 32;
  v6 = *(_QWORD *)(v3 + 16);
  if (*v1)
  {
    swift_retain();
    specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)a1, v5, v6, (_QWORD *)(v4 + 16), v4 + 32);
    v8 = v7;
    v10 = v9;
    swift_release();
    if ((v8 & 1) != 0)
      goto LABEL_7;
    return 0;
  }
  specialized Collection<>.firstIndex(of:)(a1, v3 + 32, *(_QWORD *)(v3 + 16));
  if ((v11 & 1) == 0)
    return 0;
  v10 = 0;
LABEL_7:
  specialized OrderedSet._appendNew(_:in:)(a1, v10);
  return 1;
}

uint64_t specialized closure #1 in static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *(_QWORD *)(a3 + 16);
  if (!v33)
    return result;
  v4 = (_QWORD *)result;
  v5 = 0;
  while (1)
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v6 = Hasher._finalize()();
    v7 = 1 << *v4;
    v8 = __OFSUB__(v7, 1);
    v9 = v7 - 1;
    if (v8)
      goto LABEL_38;
    v10 = v9 & v6;
    v11 = _HashTable.UnsafeHandle._startIterator(bucket:)(v9 & v6, v4, a2);
    v13 = v12;
    v15 = v14;
    swift_bridgeObjectRelease();
    if (v11)
      break;
LABEL_3:
    result = _HashTable.BucketIterator.currentValue.setter(v5++, 0);
    if (v5 == v33)
      return result;
  }
  v16 = 0;
  v17 = *v4 & 0x3FLL;
  v18 = 1 << *v4;
  v19 = v17 << *v4;
  v20 = v19 + 64;
  v21 = __OFADD__(v19, 64);
  v23 = v20 - 1;
  v22 = v20 < 1;
  v24 = v20 + 62;
  if (!v22)
    v24 = v23;
  v25 = v24 >> 6;
  while (1)
  {
    if (++v10 == v18)
    {
      if ((v16 & 1) != 0)
        goto LABEL_39;
      v10 = 0;
      v16 = 1;
    }
    if (v15 >= v17)
      break;
    v26 = (v10 * v17) >> 6;
    if (v15)
    {
      if (v21)
        goto LABEL_37;
      if (v26 + 1 == v25)
        v26 = 0;
      else
        ++v26;
    }
    v27 = v17 - v15;
    if (__OFSUB__(v17, v15))
      goto LABEL_35;
    if (v26 == 2 && v17 == 5)
      v29 = 32;
    else
      v29 = 64;
    v8 = __OFSUB__(v29, v27);
    v30 = v29 - v27;
    if (v8)
      goto LABEL_36;
    v31 = *(_QWORD *)(a2 + 8 * v26);
    v32 = (v31 << v15) | v13;
    v13 = v31 >> v27;
    v15 = v30;
LABEL_12:
    if ((v32 & (v18 - 1)) == 0)
      goto LABEL_3;
  }
  v8 = __OFSUB__(v15, v17);
  v15 -= v17;
  if (!v8)
  {
    v32 = v13;
    v13 >>= v17;
    goto LABEL_12;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *(_QWORD *)(a3 + 16);
  if (!v36)
    return result;
  v4 = (uint64_t *)result;
  for (i = 0; i != v36; ++i)
  {
    v6 = *v4;
    v7 = static Hasher._hash(seed:_:)();
    v8 = 1 << v6;
    v9 = (1 << v6) - 1;
    if (__OFSUB__(1 << v6, 1))
      goto LABEL_46;
    v10 = v6 & 0x3F;
    v11 = v9 & v7;
    result = _HashTable.UnsafeHandle._startIterator(bucket:)(v9 & v7, v4, a2);
    if (result)
    {
      v14 = 0;
      v15 = __OFADD__(v10 << v10, 64);
      v16 = (v10 << v10) + 126;
      if ((v10 << v10) + 64 >= 1)
        v16 = (v10 << v10) + 63;
      v17 = v16 >> 6;
      do
      {
        if (++v11 == v8)
        {
          if ((v14 & 1) != 0)
            goto LABEL_48;
          v11 = 0;
          v14 = 1;
        }
        if (v13 >= v10)
        {
          v22 = __OFSUB__(v13, v10);
          v13 -= v10;
          if (v22)
          {
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            result = _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }
          v25 = v12 >> v10;
        }
        else
        {
          v18 = (v11 * v10) >> 6;
          if (v13)
          {
            if (v15)
              goto LABEL_45;
            if (v18 + 1 == v17)
              v18 = 0;
            else
              ++v18;
          }
          v19 = v10 - v13;
          if (__OFSUB__(v10, v13))
            goto LABEL_43;
          v20 = v18 == 2 && v10 == 5;
          if (v20)
            v21 = 32;
          else
            v21 = 64;
          v22 = __OFSUB__(v21, v19);
          v23 = v21 - v19;
          if (v22)
            goto LABEL_44;
          v24 = *(_QWORD *)(a2 + 8 * v18);
          v12 |= v24 << v13;
          v25 = v24 >> v19;
          v13 = v23;
        }
        v20 = (v12 & v9) == 0;
        v12 = v25;
      }
      while (!v20);
    }
    v26 = ((v9 & ((i - (v4[1] >> 6)) >> 63)) + i - (v4[1] >> 6)) ^ v9;
    v27 = (v11 * v10) >> 6;
    *(_QWORD *)(a2 + 8 * v27) ^= v26 << (v11 * v10);
    v28 = 64 - ((v11 * v10) & 0x3F);
    v29 = *v4 & 0x3F;
    if (v28 < v29)
    {
      v30 = v29 << v29;
      v22 = __OFADD__(v30, 64);
      v31 = v30 + 64;
      if (v22)
        goto LABEL_47;
      v33 = v31 - 1;
      v32 = v31 < 1;
      v34 = v31 + 62;
      if (!v32)
        v34 = v33;
      if (v27 + 1 == v34 >> 6)
        v35 = 0;
      else
        v35 = v27 + 1;
      *(_QWORD *)(a2 + 8 * v35) ^= v26 >> v28;
    }
  }
  return result;
}

{
  uint64_t *v4;
  uint64_t v5;
  Swift::UInt v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *(_QWORD *)(a3 + 16);
  if (!v28)
    return result;
  v4 = (uint64_t *)result;
  v5 = 0;
  v27 = a3 + 32;
  while (1)
  {
    v6 = *(_QWORD *)(v27 + 8 * v5);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v6);
    v7 = Hasher._finalize()();
    v8 = *v4;
    v9 = 1 << *v4;
    v10 = v9 - 1;
    if (__OFSUB__(v9, 1))
      goto LABEL_38;
    v11 = v10 & v7;
    if (_HashTable.UnsafeHandle._startIterator(bucket:)(v10 & v7, v4, a2))
      break;
LABEL_3:
    result = _HashTable.BucketIterator.currentValue.setter(v5++, 0);
    if (v5 == v28)
      return result;
  }
  v14 = 0;
  v15 = v8 & 0x3F;
  v16 = __OFADD__(v15 << v15, 64);
  v17 = (v15 << v15) + 126;
  if ((v15 << v15) + 64 >= 1)
    v17 = (v15 << v15) + 63;
  v18 = v17 >> 6;
  while (1)
  {
    if (++v11 == v9)
    {
      if ((v14 & 1) != 0)
        goto LABEL_39;
      v11 = 0;
      v14 = 1;
    }
    if (v13 >= v15)
      break;
    v19 = (v11 * v15) >> 6;
    if (v13)
    {
      if (v16)
        goto LABEL_37;
      if (v19 + 1 == v18)
        v19 = 0;
      else
        ++v19;
    }
    v20 = v15 - v13;
    if (__OFSUB__(v15, v13))
      goto LABEL_35;
    if (v19 == 2 && v15 == 5)
      v22 = 32;
    else
      v22 = 64;
    v23 = __OFSUB__(v22, v20);
    v24 = v22 - v20;
    if (v23)
      goto LABEL_36;
    v25 = *(_QWORD *)(a2 + 8 * v19);
    v26 = (v25 << v13) | v12;
    v12 = v25 >> v20;
    v13 = v24;
LABEL_12:
    if ((v26 & v10) == 0)
      goto LABEL_3;
  }
  v23 = __OFSUB__(v13, v15);
  v13 -= v15;
  if (!v23)
  {
    v26 = v12;
    v12 >>= v15;
    goto LABEL_12;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized closure #1 in static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(Swift::Int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  Swift::Int v6;
  id v7;
  Swift::Int v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *(_QWORD *)(a3 + 16);
  if (!v48)
    return;
  v5 = 0;
  v47 = a3 + 32;
  do
  {
    v6 = *a1;
    v7 = *(id *)(v47 + 8 * v5);
    v8 = NSObject._rawHashValue(seed:)(v6);
    v9 = 1 << *a1;
    v10 = __OFSUB__(v9, 1);
    v11 = v9 - 1;
    if (v10)
      goto LABEL_47;
    v12 = v11 & v8;
    v13 = _HashTable.UnsafeHandle._startIterator(bucket:)(v11 & v8, a1, a2);
    v15 = v14;
    v17 = v16;

    v18 = *a1;
    if (v13)
    {
      v19 = 0;
      v20 = *a1 & 0x3F;
      v21 = 1 << v18;
      v22 = (1 << v18) - 1;
      v23 = v20 << v18;
      v24 = v23 + 64;
      v25 = __OFADD__(v23, 64);
      v27 = v24 - 1;
      v26 = v24 < 1;
      v28 = v24 + 62;
      if (!v26)
        v28 = v27;
      v29 = v28 >> 6;
      while (1)
      {
        if (++v12 == v21)
        {
          if ((v19 & 1) != 0)
            goto LABEL_49;
          v12 = 0;
          v19 = 1;
        }
        if (v17 >= v20)
        {
          v10 = __OFSUB__(v17, v20);
          v17 -= v20;
          if (v10)
          {
            __break(1u);
LABEL_44:
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            return;
          }
          v36 = v15 >> v20;
        }
        else
        {
          v30 = (v12 * v20) >> 6;
          if (v17)
          {
            if (v25)
              goto LABEL_46;
            if (v30 + 1 == v29)
              v30 = 0;
            else
              ++v30;
          }
          v31 = v20 - v17;
          if (__OFSUB__(v20, v17))
            goto LABEL_44;
          v32 = v30 == 2 && v20 == 5;
          if (v32)
            v33 = 32;
          else
            v33 = 64;
          v10 = __OFSUB__(v33, v31);
          v34 = v33 - v31;
          if (v10)
            goto LABEL_45;
          v35 = *(_QWORD *)(a2 + 8 * v30);
          v15 |= v35 << v17;
          v36 = v35 >> v31;
          v17 = v34;
        }
        v32 = (v15 & v22) == 0;
        v15 = v36;
        if (v32)
          goto LABEL_34;
      }
    }
    v20 = *a1 & 0x3F;
LABEL_34:
    v37 = (-1 << v20) ^ ~((((v5 - (a1[1] >> 6)) >> 63) & ~(-1 << v20)) + v5 - (a1[1] >> 6));
    v38 = v20 * v12;
    v39 = (v20 * v12) >> 6;
    *(_QWORD *)(a2 + 8 * v39) ^= v37 << v38;
    v40 = 64 - (v38 & 0x3F);
    v41 = *a1 & 0x3F;
    if (v40 < v41)
    {
      v42 = v41 << v41;
      v10 = __OFADD__(v42, 64);
      v43 = v42 + 64;
      if (v10)
        goto LABEL_48;
      v44 = v43 - 1;
      v26 = v43 < 1;
      v45 = v43 + 62;
      if (!v26)
        v45 = v44;
      if (v39 + 1 == v45 >> 6)
        v46 = 0;
      else
        v46 = v39 + 1;
      *(_QWORD *)(a2 + 8 * v46) ^= v37 >> v40;
    }
    ++v5;
  }
  while (v5 != v48);
}

uint64_t specialized static ContiguousArray<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
  {
LABEL_13:
    v14 = 0;
    return v14 & 1;
  }
  if (v2 && a1 != a2)
  {
    v3 = v2 - 1;
    v4 = (uint64_t *)(a2 + 40);
    v5 = (uint64_t *)(a1 + 40);
    while (1)
    {
      v7 = *v5;
      v6 = v5[1];
      v8 = v5[3];
      v9 = v5[4];
      v10 = *(v5 - 1);
      v11 = v4[1];
      v19 = *v4;
      v20 = *(v4 - 1);
      v12 = v4[2];
      v13 = v4[3];
      v16 = v4[4];
      v17 = v3;
      v18 = v5[2];
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      if ((specialized Sequence<>.elementsEqual<A>(_:)(v20, v19, v10, v7) & 1) == 0
        || (specialized static ContiguousArray<A>.== infix(_:_:)(v6, v11) & 1) == 0
        || (specialized Sequence<>.elementsEqual<A>(_:)(v12, v13, v18, v8) & 1) == 0)
      {
        break;
      }
      v14 = specialized static ContiguousArray<A>.== infix(_:_:)(v9, v16);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v3 = v17 - 1;
      if ((v14 & 1) != 0)
      {
        v4 += 6;
        v5 += 6;
        if (v17)
          continue;
      }
      return v14 & 1;
    }
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_13;
  }
  v14 = 1;
  return v14 & 1;
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = (uint64_t *)(a2 + 80);
  for (i = (uint64_t *)(a1 + 40); ; i += 7)
  {
    v5 = *(i - 1);
    v6 = *i;
    v8 = i[1];
    v10 = *(v3 - 6);
    v9 = *(v3 - 5);
    v11 = *(v3 - 4);
    v22 = *(v3 - 3);
    v24 = *(v3 - 2);
    v25 = *v3;
    v26 = *(v3 - 1);
    if (!*i)
    {
      if (v9)
        goto LABEL_22;
      goto LABEL_6;
    }
    if (!v9)
    {
LABEL_22:
      outlined copy of Output?(v5, v6);
      outlined copy of Output?(v10, v9);
      outlined consume of Input?(v5, v6);
      outlined consume of Input?(v10, v9);
      return 0;
    }
    v7 = i[2];
    v20 = i[5];
    v21 = i[3];
    v23 = i[4];
    if (v5 != v10)
      break;
    v18 = v2;
    v19 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 128);
    outlined copy of Output?(v5, v6);
    outlined copy of Output?(v5, v6);
    v12 = v8;
    outlined copy of Output?(v5, v6);
    v13 = v5;
    outlined copy of Output?(v5, v9);
    v14 = v6;
    if ((v19(v9) & 1) == 0 || (v12 != v11 || v7 != v22) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      goto LABEL_24;
    if ((v23 & 1) != 0)
    {
      if ((v26 & 1) == 0)
        goto LABEL_24;
    }
    else if ((v26 & 1) != 0 || v21 != v24)
    {
      goto LABEL_24;
    }
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of Input?(v5, v6);
    swift_bridgeObjectRelease_n();
    swift_release_n();
    v2 = v18;
    if (v20 != v25)
      return 0;
LABEL_6:
    v3 += 7;
    if (!--v2)
      return 1;
  }
  outlined copy of Output?(v5, v6);
  outlined copy of Output?(v5, v6);
  v13 = v5;
  v16 = v5;
  v17 = v10;
  v14 = v6;
  outlined copy of Output?(v16, v6);
  outlined copy of Output?(v17, v9);
LABEL_24:
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of Input?(v13, v14);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return 0;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  BOOL v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v10 = 1;
    }
    else
    {
      v3 = v2 - 1;
      v4 = (uint64_t *)(a2 + 40);
      v5 = (uint64_t *)(a1 + 40);
      do
      {
        v7 = *(v5 - 1);
        v6 = *v5;
        v8 = *(v4 - 1);
        v9 = *v4;
        swift_retain();
        swift_retain();
        v10 = specialized Sequence<>.elementsEqual<A>(_:)(v8, v9, v7, v6);
        swift_release();
        swift_release();
        v12 = v3-- != 0;
        if ((v10 & 1) == 0)
          break;
        v4 += 2;
        v5 += 2;
      }
      while (v12);
    }
  }
  else
  {
    v10 = 0;
  }
  return v10 & 1;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

void specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x24954B754);
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, Swift::Int a2)
{
  return specialized Set._Variant.insert(_:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<Input>);
}

void specialized Set._Variant.insert(_:)(uint64_t a1, char a2)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

uint64_t sub_245F31508()
{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t *v5;
  _BYTE *v6;
  uint64_t v7;

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v2 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v1 + 32));
  if (((*(_QWORD *)(v1 + 56 + ((v2 >> 3) & 0xFFFFFFFFFFFFF8)) >> v2) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v5;
  *v5 = 0x8000000000000000;
  specialized _NativeSet.insertNew(_:at:isUnique:)(v0, v2, isUniquelyReferenced_nonNull_native);
  *v5 = v7;
  swift_bridgeObjectRelease();
  result = 1;
  *v6 = (_BYTE)v0;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::UInt *a1, Swift::UInt a2)
{
  return specialized Set._Variant.insert(_:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<ShaderGraphNode.ID>);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<FunctionNodeID>);
}

uint64_t specialized Set._Variant.insert(_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  BOOL v18;
  Swift::Int v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v22;
  _QWORD v23[10];

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    swift_retain();
    v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v23[9] = v8;
      type metadata accessor for MaterialXTarget();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v23[0];
      swift_unknownObjectRelease();
      return 0;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v19 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    v23[0] = v19;
    if (*(_QWORD *)(v19 + 24) <= *(_QWORD *)(v19 + 16))
    {
      swift_retain();
      specialized _NativeSet.resize(capacity:)();
      v20 = v23[0];
    }
    else
    {
      v20 = v19;
      swift_retain();
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)a2, v20);
    *v3 = v20;
  }
  else
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v10 = a2[4];
    swift_retain();
    specialized Optional<A>.hash(into:)((uint64_t)v23, v10);
    swift_release();
    v11 = Hasher._finalize()();
    v12 = -1 << *(_BYTE *)(v6 + 32);
    v13 = v11 & ~v12;
    if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
    {
      v14 = (_QWORD *)swift_retain();
      v15 = specialized static MaterialXTarget.== infix(_:_:)(v14, a2);
      swift_release();
      if (v15)
      {
LABEL_12:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(_QWORD *)(*(_QWORD *)(*v3 + 48) + 8 * v13);
        swift_retain();
        return 0;
      }
      v16 = ~v12;
      while (1)
      {
        v13 = (v13 + 1) & v16;
        if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          break;
        v17 = (_QWORD *)swift_retain();
        v18 = specialized static MaterialXTarget.== infix(_:_:)(v17, a2);
        swift_release();
        if (v18)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23[0] = *v3;
    *v3 = 0x8000000000000000;
    v22 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v22, v13, isUniquelyReferenced_nonNull_native);
    *v3 = v23[0];
  }
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  Swift::Int *v14;
  Swift::Int v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (Swift::Int *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::UInt *a1, Swift::UInt a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;

  v7 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v10, isUniquelyReferenced_nonNull_native, a3);
    *v3 = v15;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v11 = *(_QWORD *)(v7 + 48);
  if (*(_QWORD *)(v11 + 8 * v10) != a2)
  {
    v12 = ~v9;
    do
    {
      v10 = (v10 + 1) & v12;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v11 + 8 * v10) != a2);
  }
  result = 0;
  a2 = *(_QWORD *)(*(_QWORD *)(*v3 + 48) + 8 * v10);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, Swift::Int a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD *);
  Swift::UInt v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  char v26;
  char v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  __int128 v39;
  Swift::UInt v40;
  Swift::Int v42;
  uint64_t v43;
  Swift::UInt v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Swift::UInt v50;
  _QWORD v51[10];

  v7 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *v3;
  Hasher.init(_seed:)();
  v50 = *(_QWORD *)a2;
  Hasher._combine(_:)(*(_QWORD *)a2);
  v10 = *(void (**)(_QWORD *))(*(_QWORD *)v7 + 120);
  v48 = v9;
  swift_bridgeObjectRetain();
  swift_retain();
  v10(v51);
  v49 = v7;
  swift_release();
  swift_bridgeObjectRetain();
  v46 = v6;
  String.hash(into:)();
  v47 = v8;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 32);
  v45 = *(unsigned __int8 *)(a2 + 40);
  if (v45 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
  }
  v12 = v9;
  v44 = *(_QWORD *)(a2 + 48);
  Hasher._combine(_:)(v44);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v9 + 32);
  v15 = v13 & ~v14;
  v16 = v9 + 56;
  v43 = a1;
  v42 = a2;
  if (((*(_QWORD *)(v48 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    v40 = v11;
    v17 = ~v14;
    do
    {
      v18 = *(_QWORD *)(v12 + 48) + 56 * v15;
      if (*(_QWORD *)v18 != v50)
        goto LABEL_7;
      v19 = *(_QWORD *)(v18 + 16);
      v20 = *(_QWORD *)(v18 + 24);
      v21 = *(_QWORD *)(v18 + 32);
      v22 = *(_BYTE *)(v18 + 40);
      v23 = *(_QWORD *)(v18 + 48);
      v24 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v18 + 8) + 128);
      swift_retain();
      swift_bridgeObjectRetain();
      if ((v24(v49) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_release();
        v12 = v48;
        goto LABEL_7;
      }
      if (v19 == v46 && v20 == v47)
      {
        swift_bridgeObjectRelease();
        swift_release();
        v12 = v48;
        if ((v22 & 1) != 0)
          goto LABEL_16;
      }
      else
      {
        v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_release();
        v12 = v48;
        if ((v26 & 1) == 0)
          goto LABEL_7;
        if ((v22 & 1) != 0)
        {
LABEL_16:
          v27 = v45;
          if (v23 != v44)
            v27 = 0;
          if ((v27 & 1) != 0)
            goto LABEL_27;
          goto LABEL_7;
        }
      }
      if ((v45 & 1) == 0 && v21 == v40 && v23 == v44)
      {
LABEL_27:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        v29 = *(_QWORD *)(*v3 + 48) + 56 * v15;
        v31 = *(_QWORD *)v29;
        v30 = *(_QWORD *)(v29 + 8);
        v32 = *(_QWORD *)(v29 + 16);
        v33 = *(_QWORD *)(v29 + 24);
        v34 = *(_QWORD *)(v29 + 32);
        v35 = *(_BYTE *)(v29 + 40);
        v36 = *(_QWORD *)(v29 + 48);
        *(_QWORD *)v43 = v31;
        *(_QWORD *)(v43 + 8) = v30;
        *(_QWORD *)(v43 + 16) = v32;
        *(_QWORD *)(v43 + 24) = v33;
        *(_QWORD *)(v43 + 32) = v34;
        *(_BYTE *)(v43 + 40) = v35;
        *(_QWORD *)(v43 + 48) = v36;
        swift_retain();
        swift_bridgeObjectRetain();
        return 0;
      }
LABEL_7:
      v15 = (v15 + 1) & v17;
    }
    while (((*(_QWORD *)(v16 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v51[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_retain();
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(v42, v15, isUniquelyReferenced_nonNull_native, a3);
  *v3 = v51[0];
  swift_bridgeObjectRelease();
  v39 = *(_OWORD *)(v42 + 16);
  *(_OWORD *)v43 = *(_OWORD *)v42;
  *(_OWORD *)(v43 + 16) = v39;
  *(_OWORD *)(v43 + 32) = *(_OWORD *)(v42 + 32);
  *(_QWORD *)(v43 + 48) = *(_QWORD *)(v42 + 48);
  return 1;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  _QWORD v17[10];
  uint64_t v18;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MaterialXTarget>);
    v2 = static _SetStorage.convert(_:capacity:)();
    v18 = v2;
    __CocoaSet.makeIterator()();
    v3 = __CocoaSet.Iterator.next()();
    if (v3)
    {
      v4 = v3;
      type metadata accessor for MaterialXTarget();
      do
      {
        v17[0] = v4;
        swift_dynamicCast();
        v2 = v18;
        if (*(_QWORD *)(v18 + 24) <= *(_QWORD *)(v18 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          v2 = v18;
        }
        v5 = v17[9];
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v6 = *(_QWORD *)(v5 + 32);
        swift_retain();
        specialized Optional<A>.hash(into:)((uint64_t)v17, v6);
        swift_release();
        result = Hasher._finalize()();
        v8 = v2 + 56;
        v9 = -1 << *(_BYTE *)(v2 + 32);
        v10 = result & ~v9;
        v11 = v10 >> 6;
        if (((-1 << v10) & ~*(_QWORD *)(v2 + 56 + 8 * (v10 >> 6))) != 0)
        {
          v12 = __clz(__rbit64((-1 << v10) & ~*(_QWORD *)(v2 + 56 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v13 = 0;
          v14 = (unint64_t)(63 - v9) >> 6;
          do
          {
            if (++v11 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v15 = v11 == v14;
            if (v11 == v14)
              v11 = 0;
            v13 |= v15;
            v16 = *(_QWORD *)(v8 + 8 * v11);
          }
          while (v16 == -1);
          v12 = __clz(__rbit64(~v16)) + (v11 << 6);
        }
        *(_QWORD *)(v8 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v12) = v5;
        ++*(_QWORD *)(v2 + 16);
        v4 = __CocoaSet.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x24BEE4B08];
  }
  return v2;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<DebugConfig.Group>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_25;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = (_QWORD *)(v2 + 56);
  if (v4 < 64)
    v6 = ~(-1 << v4);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v7)
  {
    v9 = __clz(__rbit64(v7));
    goto LABEL_20;
  }
  if (v8 > 1)
  {
    v10 = *(_QWORD *)(v2 + 64);
    v11 = 1;
    if (v10)
      goto LABEL_19;
    v11 = 2;
    if (v8 > 2)
    {
      v10 = *(_QWORD *)(v2 + 72);
      if (v10)
        goto LABEL_19;
      v11 = 3;
      if (v8 > 3)
      {
        v10 = *(_QWORD *)(v2 + 80);
        if (!v10)
        {
          v12 = 4;
          if (v8 > 4)
          {
            v10 = *(_QWORD *)(v2 + 88);
            if (v10)
            {
              v11 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v11 = v12 + 1;
              if (__OFADD__(v12, 1))
              {
                __break(1u);
                JUMPOUT(0x245F327C4);
              }
              if (v11 >= v8)
                break;
              v10 = v5[v11];
              ++v12;
              if (v10)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v9 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_20:
        v13 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v9);
        Hasher.init(_seed:)();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  swift_release();
  v1 = v0;
  v14 = 1 << *(_BYTE *)(v2 + 32);
  if (v14 > 63)
    bzero((void *)(v2 + 56), ((unint64_t)(v14 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v5 = -1 << v14;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_25:
  result = swift_release();
  *v1 = v3;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  char v30[72];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MaterialXTarget>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v28 = v0;
    v29 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v14 = v13 | (v11 << 6);
      }
      else
      {
        v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v8)
          goto LABEL_33;
        v16 = v29[v15];
        ++v11;
        if (!v16)
        {
          v11 = v15 + 1;
          if (v15 + 1 >= v8)
            goto LABEL_33;
          v16 = v29[v11];
          if (!v16)
          {
            v11 = v15 + 2;
            if (v15 + 2 >= v8)
              goto LABEL_33;
            v16 = v29[v11];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v28;
                v27 = 1 << *(_BYTE *)(v2 + 32);
                if (v27 > 63)
                  bzero(v29, ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v29 = -1 << v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v29[v17];
              if (!v16)
              {
                while (1)
                {
                  v11 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v16 = v29[v11];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v11 = v17;
            }
          }
        }
LABEL_23:
        v7 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v19 = *(_QWORD *)(v18 + 32);
      swift_retain();
      specialized Optional<A>.hash(into:)((uint64_t)v30, v19);
      swift_release();
      result = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v9 + 8 * v22);
        }
        while (v26 == -1);
        v12 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;

  v3 = v2;
  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  result = static _SetStorage.resize(original:capacity:move:)();
  v6 = result;
  if (*(_QWORD *)(v4 + 16))
  {
    v7 = 0;
    v8 = (_QWORD *)(v4 + 56);
    v9 = 1 << *(_BYTE *)(v4 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v4 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_33;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_33;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_33;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_33:
                v28 = 1 << *(_BYTE *)(v4 + 32);
                if (v28 > 63)
                  bzero((void *)(v4 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v28;
                v3 = v2;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_39;
                  if (v7 >= v12)
                    goto LABEL_33;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_23;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_23:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      result = Hasher._finalize()();
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release();
  *v3 = v6;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::UInt v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt v25;
  int v26;
  Swift::UInt v27;
  Swift::UInt v28;
  uint64_t v29;
  void (*v30)(char *);
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t v41;
  Swift::UInt v42;
  uint64_t v43;
  int64_t v44;
  char v45[72];

  v3 = v2;
  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v5 = static _SetStorage.resize(original:capacity:move:)();
  v6 = v5;
  if (*(_QWORD *)(v4 + 16))
  {
    v7 = 1 << *(_BYTE *)(v4 + 32);
    v40 = (_QWORD *)(v4 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v4 + 56);
    v39 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    result = swift_retain();
    v12 = 0;
    v41 = v4;
    while (1)
    {
      if (v9)
      {
        v43 = (v9 - 1) & v9;
        v44 = v12;
        v15 = __clz(__rbit64(v9)) | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v16 >= v39)
          goto LABEL_36;
        v17 = v40[v16];
        v18 = v12 + 1;
        if (!v17)
        {
          v18 = v12 + 2;
          if (v12 + 2 >= v39)
            goto LABEL_36;
          v17 = v40[v18];
          if (!v17)
          {
            v18 = v12 + 3;
            if (v12 + 3 >= v39)
              goto LABEL_36;
            v17 = v40[v18];
            if (!v17)
            {
              v19 = v12 + 4;
              if (v12 + 4 >= v39)
              {
LABEL_36:
                swift_release();
                v3 = v2;
                v38 = 1 << *(_BYTE *)(v4 + 32);
                if (v38 > 63)
                  bzero(v40, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v40 = -1 << v38;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v17 = v40[v19];
              if (!v17)
              {
                while (1)
                {
                  v18 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v18 >= v39)
                    goto LABEL_36;
                  v17 = v40[v18];
                  ++v19;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v18 = v12 + 4;
            }
          }
        }
LABEL_23:
        v43 = (v17 - 1) & v17;
        v44 = v18;
        v15 = __clz(__rbit64(v17)) + (v18 << 6);
      }
      v20 = *(_QWORD *)(v4 + 48) + 56 * v15;
      v22 = *(_QWORD *)v20;
      v21 = *(_QWORD *)(v20 + 8);
      v24 = *(_QWORD *)(v20 + 16);
      v23 = *(_QWORD *)(v20 + 24);
      v25 = *(_QWORD *)(v20 + 32);
      v26 = *(unsigned __int8 *)(v20 + 40);
      v27 = *(_QWORD *)(v20 + 48);
      Hasher.init(_seed:)();
      v42 = v22;
      v28 = v22;
      v29 = v24;
      Hasher._combine(_:)(v28);
      v30 = *(void (**)(char *))(*(_QWORD *)v21 + 120);
      swift_retain();
      v30(v45);
      swift_release();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v26 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v25);
      }
      Hasher._combine(_:)(v27);
      result = Hasher._finalize()();
      v31 = -1 << *(_BYTE *)(v6 + 32);
      v32 = result & ~v31;
      v33 = v32 >> 6;
      if (((-1 << v32) & ~*(_QWORD *)(v10 + 8 * (v32 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v10 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v34 = 0;
        v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v36 = v33 == v35;
          if (v33 == v35)
            v33 = 0;
          v34 |= v36;
          v37 = *(_QWORD *)(v10 + 8 * v33);
        }
        while (v37 == -1);
        v13 = __clz(__rbit64(~v37)) + (v33 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = *(_QWORD *)(v6 + 48) + 56 * v13;
      *(_QWORD *)v14 = v42;
      *(_QWORD *)(v14 + 8) = v21;
      *(_QWORD *)(v14 + 16) = v29;
      *(_QWORD *)(v14 + 24) = v23;
      *(_QWORD *)(v14 + 32) = v25;
      *(_BYTE *)(v14 + 40) = v26;
      *(_QWORD *)(v14 + 48) = v27;
      ++*(_QWORD *)(v6 + 16);
      v4 = v41;
      v9 = v43;
      v12 = v44;
    }
  }
  result = swift_release();
  *v3 = v6;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  _BYTE v6[72];

  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a1 + 32);
  swift_retain();
  specialized Optional<A>.hash(into:)((uint64_t)v6, v4);
  swift_release();
  Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

void *specialized _NativeSet.insertNew(_:at:isUnique:)(void *result, unint64_t a2, char a3)
{
  uint64_t v3;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t *v12;
  char v13;

  v5 = (char)result;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      specialized _NativeSet.resize(capacity:)();
      goto LABEL_8;
    }
    if (v7 <= v6)
    {
      specialized _NativeSet.copyAndResize(capacity:)();
LABEL_8:
      Hasher.init(_seed:)();
      __asm { BR              X10 }
    }
    result = specialized _NativeSet.copy()();
  }
  v8 = *v12;
  *(_QWORD *)(*v12 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v8 + 48) + a2) = v13;
  v9 = *(_QWORD *)(v8 + 16);
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
  {
    __break(1u);
    JUMPOUT(0x245F338F4);
  }
  *(_QWORD *)(v8 + 16) = v11;
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _BYTE v21[72];

  v4 = v3;
  v6 = (_QWORD *)result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v9 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v10 = v6[4];
  swift_retain();
  specialized Optional<A>.hash(into:)((uint64_t)v21, v10);
  swift_release();
  result = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = (_QWORD *)swift_retain();
    v13 = specialized static MaterialXTarget.== infix(_:_:)(v12, v6);
    result = swift_release();
    if (v13)
    {
LABEL_13:
      type metadata accessor for MaterialXTarget();
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v14 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v14;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v15 = (_QWORD *)swift_retain();
        v16 = specialized static MaterialXTarget.== infix(_:_:)(v15, v6);
        result = swift_release();
        if (v16)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v17 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v17 + 48) + 8 * a2) = v6;
  v18 = *(_QWORD *)(v17 + 16);
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
    __break(1u);
  else
    *(_QWORD *)(v17 + 16) = v20;
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  Swift::Int *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (Swift::Int *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3, uint64_t *a4)
{
  uint64_t *v4;
  Swift::UInt v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v6 = result;
  v7 = *(_QWORD *)(*v4 + 16);
  v8 = *(_QWORD *)(*v4 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_14;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v9, a4);
  }
  else
  {
    if (v8 > v7)
    {
      result = (Swift::Int)specialized _NativeSet.copy()(a4);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v9, a4);
  }
  v10 = *v4;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v6);
  result = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v10 + 32);
  a2 = result & ~v11;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = *(_QWORD *)(v10 + 48);
    if (*(_QWORD *)(v12 + 8 * a2) == v6)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v13 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v12 + 8 * a2) == v6)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v14 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * a2) = v6;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    *(_QWORD *)(v14 + 16) = v17;
  return result;
}

{
  uint64_t *v4;
  Swift::Int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt v11;
  uint64_t v12;
  void (*v13)(_BYTE *);
  uint64_t v14;
  uint64_t v15;
  Swift::UInt v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t (*v25)(uint64_t);
  char v27;
  char v28;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  int v38;
  uint64_t *v39;
  Swift::Int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[80];

  v6 = result;
  v7 = *(_QWORD *)(*v4 + 16);
  v8 = *(_QWORD *)(*v4 + 24);
  v40 = result;
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_35;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v9, a4);
  }
  else
  {
    if (v8 > v7)
    {
      result = (Swift::Int)specialized _NativeSet.copy()(a4);
      goto LABEL_35;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v9, a4);
  }
  v10 = *v4;
  Hasher.init(_seed:)();
  v11 = *(_QWORD *)v6;
  Hasher._combine(_:)(*(_QWORD *)v6);
  v12 = *(_QWORD *)(v6 + 8);
  v13 = *(void (**)(_BYTE *))(*(_QWORD *)v12 + 120);
  swift_retain();
  v13(v45);
  v43 = v12;
  swift_release();
  v14 = *(_QWORD *)(v6 + 16);
  v15 = *(_QWORD *)(v6 + 24);
  swift_bridgeObjectRetain();
  v41 = v14;
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(v6 + 32);
  v38 = *(unsigned __int8 *)(v6 + 40);
  if (v38 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v16);
  }
  v37 = *(_QWORD *)(v6 + 48);
  Hasher._combine(_:)(v37);
  result = Hasher._finalize()();
  v17 = -1 << *(_BYTE *)(v10 + 32);
  a2 = result & ~v17;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v36 = v16;
    v19 = ~v17;
    do
    {
      v20 = *(_QWORD *)(v10 + 48) + 56 * a2;
      if (*(_QWORD *)v20 != v11)
        goto LABEL_14;
      v21 = v10;
      v22 = *(_QWORD *)(v20 + 16);
      v23 = *(_QWORD *)(v20 + 24);
      v42 = *(_QWORD *)(v20 + 32);
      v24 = *(_BYTE *)(v20 + 40);
      v44 = *(_QWORD *)(v20 + 48);
      v25 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v20 + 8) + 128);
      swift_retain();
      swift_bridgeObjectRetain();
      if ((v25(v43) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        result = swift_release();
        v10 = v21;
        goto LABEL_14;
      }
      if (v22 == v41 && v23 == v15)
      {
        swift_bridgeObjectRelease();
        result = swift_release();
        v10 = v21;
        if ((v24 & 1) == 0)
          goto LABEL_28;
      }
      else
      {
        v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        result = swift_release();
        v10 = v21;
        if ((v27 & 1) == 0)
          goto LABEL_14;
        if ((v24 & 1) == 0)
        {
LABEL_28:
          if ((v38 & 1) == 0 && v42 == v36 && v44 == v37)
            goto LABEL_34;
          goto LABEL_14;
        }
      }
      v28 = v38;
      if (v44 != v37)
        v28 = 0;
      if ((v28 & 1) != 0)
      {
LABEL_34:
        result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        break;
      }
LABEL_14:
      a2 = (a2 + 1) & v19;
    }
    while (((*(_QWORD *)(v18 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_35:
  v30 = *v39;
  *(_QWORD *)(*v39 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v31 = *(_QWORD *)(v30 + 48) + 56 * a2;
  v32 = *(_OWORD *)(v40 + 16);
  *(_OWORD *)v31 = *(_OWORD *)v40;
  *(_OWORD *)(v31 + 16) = v32;
  *(_OWORD *)(v31 + 32) = *(_OWORD *)(v40 + 32);
  *(_QWORD *)(v31 + 48) = *(_QWORD *)(v40 + 48);
  v33 = *(_QWORD *)(v30 + 16);
  v34 = __OFADD__(v33, 1);
  v35 = v33 + 1;
  if (v34)
    __break(1u);
  else
    *(_QWORD *)(v30 + 16) = v35;
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<DebugConfig.Group>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MaterialXTarget>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = (void *)swift_retain();
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()((uint64_t *)&demangling cache variable for type metadata for _SetStorage<FunctionNodeID>);
}

void *specialized _NativeSet.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v7 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v7 + 8 * v10);
        if (!v18)
          break;
      }
    }
LABEL_27:
    v13 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v7 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v27 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v27 >= v14)
      goto LABEL_28;
    v28 = *(_QWORD *)(v7 + 8 * v27);
    ++v10;
    if (!v28)
    {
      v10 = v27 + 1;
      if (v27 + 1 >= v14)
        goto LABEL_28;
      v28 = *(_QWORD *)(v7 + 8 * v10);
      if (!v28)
      {
        v10 = v27 + 2;
        if (v27 + 2 >= v14)
          goto LABEL_28;
        v28 = *(_QWORD *)(v7 + 8 * v10);
        if (!v28)
          break;
      }
    }
LABEL_27:
    v13 = (v28 - 1) & v28;
    v16 = __clz(__rbit64(v28)) + (v10 << 6);
LABEL_12:
    v17 = 56 * v16;
    v18 = *(_QWORD *)(v3 + 48) + v17;
    v20 = *(_QWORD *)v18;
    v19 = *(_QWORD *)(v18 + 8);
    v21 = *(_QWORD *)(v18 + 16);
    v22 = *(_QWORD *)(v18 + 24);
    v23 = *(_QWORD *)(v18 + 32);
    v24 = *(_BYTE *)(v18 + 40);
    v25 = *(_QWORD *)(v18 + 48);
    v26 = *(_QWORD *)(v5 + 48) + v17;
    *(_QWORD *)v26 = v20;
    *(_QWORD *)(v26 + 8) = v19;
    *(_QWORD *)(v26 + 16) = v21;
    *(_QWORD *)(v26 + 24) = v22;
    *(_QWORD *)(v26 + 32) = v23;
    *(_BYTE *)(v26 + 40) = v24;
    *(_QWORD *)(v26 + 48) = v25;
    swift_retain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v29 = v27 + 3;
  if (v29 >= v14)
    goto LABEL_28;
  v28 = *(_QWORD *)(v7 + 8 * v29);
  if (v28)
  {
    v10 = v29;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v28 = *(_QWORD *)(v7 + 8 * v10);
    ++v29;
    if (v28)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<DebugConfig.Group>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_23;
  }
  v4 = 1 << *(_BYTE *)(v2 + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v6)
  {
    v8 = __clz(__rbit64(v6));
    goto LABEL_20;
  }
  if (v7 > 1)
  {
    v9 = *(_QWORD *)(v2 + 64);
    v10 = 1;
    if (v9)
      goto LABEL_19;
    v10 = 2;
    if (v7 > 2)
    {
      v9 = *(_QWORD *)(v2 + 72);
      if (v9)
        goto LABEL_19;
      v10 = 3;
      if (v7 > 3)
      {
        v9 = *(_QWORD *)(v2 + 80);
        if (!v9)
        {
          v11 = 4;
          if (v7 > 4)
          {
            v9 = *(_QWORD *)(v2 + 88);
            if (v9)
            {
              v10 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v10 = v11 + 1;
              if (__OFADD__(v11, 1))
              {
                __break(1u);
                JUMPOUT(0x245F34CECLL);
              }
              if (v10 >= v7)
                break;
              v9 = *(_QWORD *)(v2 + 56 + 8 * v10);
              ++v11;
              if (v9)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v8 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_20:
        v12 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v8);
        Hasher.init(_seed:)();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  result = swift_release_n();
  v1 = v0;
LABEL_23:
  *v1 = v3;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  int64_t v28;
  char v29[72];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MaterialXTarget>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v27 = v0;
  v28 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v28)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v28)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v11);
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v28)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v11);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    swift_retain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v19 = *(_QWORD *)(v18 + 32);
    swift_retain();
    specialized Optional<A>.hash(into:)((uint64_t)v29, v19);
    swift_release();
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v9 + 8 * v22);
      }
      while (v26 == -1);
      v12 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v28)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v27;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v28)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;

  v3 = v2;
  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  result = static _SetStorage.resize(original:capacity:move:)();
  v6 = result;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release();
LABEL_35:
    *v3 = v6;
    return result;
  }
  v7 = 0;
  v8 = v4 + 56;
  v9 = 1 << *(_BYTE *)(v4 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v4 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_24;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v17 >= v12)
      goto LABEL_33;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_33;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_33;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_23:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_24:
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v16);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v20);
    result = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_33:
    result = swift_release();
    v3 = v2;
    goto LABEL_35;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_33;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::UInt v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt v25;
  int v26;
  uint64_t v27;
  void (*v28)(char *);
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  Swift::UInt v42;
  char v43[72];

  v3 = v2;
  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v5 = static _SetStorage.resize(original:capacity:move:)();
  v6 = v5;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release();
LABEL_38:
    *v3 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v4 + 32);
  v36 = v2;
  v37 = v4 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v4 + 56);
  v38 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  result = swift_retain();
  v12 = 0;
  v39 = v4;
  while (1)
  {
    if (v9)
    {
      v40 = (v9 - 1) & v9;
      v41 = v12;
      v15 = __clz(__rbit64(v9)) | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v16 >= v38)
      goto LABEL_36;
    v17 = *(_QWORD *)(v37 + 8 * v16);
    v18 = v12 + 1;
    if (!v17)
    {
      v18 = v12 + 2;
      if (v12 + 2 >= v38)
        goto LABEL_36;
      v17 = *(_QWORD *)(v37 + 8 * v18);
      if (!v17)
      {
        v18 = v12 + 3;
        if (v12 + 3 >= v38)
          goto LABEL_36;
        v17 = *(_QWORD *)(v37 + 8 * v18);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v40 = (v17 - 1) & v17;
    v41 = v18;
    v15 = __clz(__rbit64(v17)) + (v18 << 6);
LABEL_24:
    v20 = *(_QWORD *)(v4 + 48) + 56 * v15;
    v22 = *(_QWORD *)v20;
    v21 = *(_QWORD *)(v20 + 8);
    v24 = *(_QWORD *)(v20 + 16);
    v23 = *(_QWORD *)(v20 + 24);
    v25 = *(_QWORD *)(v20 + 32);
    v26 = *(unsigned __int8 *)(v20 + 40);
    v42 = *(_QWORD *)(v20 + 48);
    v27 = v6;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v22);
    v28 = *(void (**)(char *))(*(_QWORD *)v21 + 120);
    swift_retain_n();
    swift_bridgeObjectRetain();
    v28(v43);
    swift_release();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v26 == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v25);
    }
    v6 = v27;
    Hasher._combine(_:)(v42);
    result = Hasher._finalize()();
    v29 = -1 << *(_BYTE *)(v27 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v10 + 8 * (v30 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v10 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v10 + 8 * v31);
      }
      while (v35 == -1);
      v13 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = *(_QWORD *)(v27 + 48) + 56 * v13;
    *(_QWORD *)v14 = v22;
    *(_QWORD *)(v14 + 8) = v21;
    *(_QWORD *)(v14 + 16) = v24;
    *(_QWORD *)(v14 + 24) = v23;
    *(_QWORD *)(v14 + 32) = v25;
    *(_BYTE *)(v14 + 40) = v26;
    *(_QWORD *)(v14 + 48) = v42;
    ++*(_QWORD *)(v27 + 16);
    v4 = v39;
    v9 = v40;
    v12 = v41;
  }
  v19 = v12 + 4;
  if (v12 + 4 >= v38)
  {
LABEL_36:
    result = swift_release_n();
    v3 = v36;
    goto LABEL_38;
  }
  v17 = *(_QWORD *)(v37 + 8 * v19);
  if (v17)
  {
    v18 = v12 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v18 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v18 >= v38)
      goto LABEL_36;
    v17 = *(_QWORD *)(v37 + 8 * v18);
    ++v19;
    if (v17)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  char *result;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v5 = *(_QWORD **)v3;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, v5);
  }
  v14 = (uint64_t)&v5[7 * a1 + 4];
  result = (char *)swift_arrayDestroy();
  if (!v9)
    goto LABEL_20;
  v16 = v5[2];
  v17 = __OFSUB__(v16, a2);
  v18 = v16 - a2;
  if (v17)
    goto LABEL_26;
  if ((v18 & 0x8000000000000000) == 0)
  {
    result = (char *)(v14 + 56);
    v19 = (char *)&v5[7 * a2 + 4];
    if ((char *)(v14 + 56) != v19 || result >= &v19[56 * v18])
      result = (char *)memmove(result, v19, 56 * v18);
    v20 = v5[2];
    v17 = __OFADD__(v20, v9);
    v21 = v20 + v9;
    if (!v17)
    {
      v5[2] = v21;
LABEL_20:
      v22 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)v14 = *(_QWORD *)a3;
      *(_QWORD *)(v14 + 8) = v22;
      v23 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(v14 + 16) = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(v14 + 32) = v23;
      *(_QWORD *)(v14 + 48) = *(_QWORD *)(a3 + 48);
      *(_QWORD *)v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *result;
  int64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v5 = *(_QWORD **)v3;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v10 > v5[3] >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v13, 1, v5);
    v5 = result;
  }
  v14 = &v5[a1 + 4];
  if (!v9)
    goto LABEL_20;
  v15 = v5[2];
  v16 = __OFSUB__(v15, a2);
  v17 = v15 - a2;
  if (v16)
    goto LABEL_26;
  if ((v17 & 0x8000000000000000) == 0)
  {
    result = v14 + 1;
    v18 = &v5[a2 + 4];
    if (v14 + 1 != v18 || result >= &v18[v17])
      result = memmove(result, v18, 8 * v17);
    v19 = v5[2];
    v16 = __OFADD__(v19, v9);
    v20 = v19 + v9;
    if (!v16)
    {
      v5[2] = v20;
LABEL_20:
      *v14 = a3;
      *(_QWORD *)v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  __int128 *v5;
  __int128 *v6;
  __int128 v8;
  __int128 v9;

  v4 = specialized MutableCollection._halfStablePartition(isSuffixElement:)(a1, a2);
  swift_release();
  v5 = (__int128 *)(a2 + 2);
  if (v2)
  {
    v9 = *v5;
    v6 = &v9;
  }
  else
  {
    v8 = *v5;
    v6 = &v8;
  }
  outlined release of String((uint64_t)v6);
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  _QWORD *v36;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  if (!v3)
    return 0;
  v61 = *a2;
  swift_retain();
  v5 = 0;
  for (i = 136; ; i += 56)
  {
    v7 = v2 + i;
    if (*(_QWORD *)(v2 + i - 104) != v61)
      goto LABEL_4;
    v8 = *(_QWORD *)(v7 - 88);
    v9 = *(_QWORD *)(v7 - 80);
    v58 = *(_BYTE *)(v7 - 64);
    v54 = *(_QWORD *)(v7 - 72);
    v57 = *(_QWORD *)(v7 - 56);
    v10 = a2[1];
    v11 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v7 - 96) + 128);
    swift_retain();
    swift_bridgeObjectRetain();
    v53 = v10;
    if ((v11(v10) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_4;
    }
    v12 = a2[2];
    v13 = v8 == v12 && v9 == a2[3];
    v52 = a2[3];
    if (v13)
    {
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_release();
      if ((v14 & 1) == 0)
        goto LABEL_4;
    }
    v15 = a2[4];
    v16 = *((_BYTE *)a2 + 40);
    if ((v58 & 1) == 0)
      break;
    if (*((_BYTE *)a2 + 40))
      goto LABEL_21;
LABEL_4:
    if (v3 == ++v5)
    {
      swift_release();
      return *(_QWORD *)(v2 + 16);
    }
  }
  if (v54 == v15)
    v17 = *((_BYTE *)a2 + 40);
  else
    v17 = 1;
  if ((v17 & 1) != 0)
    goto LABEL_4;
LABEL_21:
  if (v57 != a2[6])
    goto LABEL_4;
  result = swift_release();
  v19 = *(_QWORD *)(v2 + 16);
  if (v19 - 1 == v5)
    return v5;
  v20 = v5 + 1;
  v40 = v15;
  v41 = v12;
  v42 = v16;
  while (v20 < v19)
  {
    v21 = (_QWORD *)(v2 + i);
    if (*(_QWORD *)(v2 + i - 48) != v61)
      goto LABEL_31;
    v22 = *(v21 - 4);
    v23 = *(v21 - 3);
    v50 = *(v21 - 2);
    v59 = *((_BYTE *)v21 - 8);
    v55 = *v21;
    v24 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*(v21 - 5) + 128);
    swift_retain();
    swift_bridgeObjectRetain();
    if ((v24(v53) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      result = swift_release();
      goto LABEL_31;
    }
    if (v22 == v41 && v23 == v52)
    {
      swift_bridgeObjectRelease();
      result = swift_release();
      v25 = v40;
    }
    else
    {
      v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      result = swift_release();
      v25 = v40;
      if ((v38 & 1) == 0)
        goto LABEL_31;
    }
    if ((v59 & 1) != 0)
    {
      if (v55 == v57)
        v39 = v16;
      else
        v39 = 0;
      if ((v39 & 1) != 0)
        goto LABEL_41;
    }
    else if ((v16 & 1) == 0 && v50 == v25 && v55 == v57)
    {
      goto LABEL_41;
    }
LABEL_31:
    if (v20 != v5)
    {
      if ((v5 & 0x8000000000000000) != 0)
        goto LABEL_59;
      v26 = *(_QWORD *)(v2 + 16);
      if (v5 >= v26)
        goto LABEL_60;
      if (v20 >= v26)
        goto LABEL_61;
      v27 = v2 + 32 + 56 * v5;
      v28 = *(_QWORD *)v27;
      v30 = *(_QWORD *)(v27 + 16);
      v29 = *(_QWORD *)(v27 + 24);
      v45 = *(_QWORD *)(v27 + 32);
      v44 = *(_BYTE *)(v27 + 40);
      v43 = *(_QWORD *)(v27 + 48);
      v31 = *(v21 - 5);
      v60 = *(v21 - 6);
      v32 = *(v21 - 3);
      v56 = *(v21 - 4);
      v33 = *(v21 - 2);
      v34 = *((_BYTE *)v21 - 8);
      v47 = *(_QWORD *)(v2 + i);
      v48 = v33;
      v46 = *(_QWORD *)(v27 + 8);
      swift_retain();
      swift_bridgeObjectRetain();
      v49 = v31;
      swift_retain();
      swift_bridgeObjectRetain();
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
        v2 = result;
      }
      v16 = v42;
      if (v5 >= *(_QWORD *)(v2 + 16))
        goto LABEL_62;
      v35 = v2 + 56 * v5;
      *(_QWORD *)(v35 + 32) = v60;
      *(_QWORD *)(v35 + 40) = v49;
      *(_QWORD *)(v35 + 48) = v56;
      *(_QWORD *)(v35 + 56) = v32;
      *(_QWORD *)(v35 + 64) = v48;
      *(_BYTE *)(v35 + 72) = v34;
      *(_QWORD *)(v35 + 80) = v47;
      swift_bridgeObjectRelease();
      result = swift_release();
      if (v20 >= *(_QWORD *)(v2 + 16))
        goto LABEL_63;
      v36 = (_QWORD *)(v2 + i);
      *(v36 - 6) = v28;
      *(v36 - 5) = v46;
      *(v36 - 4) = v30;
      *(v36 - 3) = v29;
      *(v36 - 2) = v45;
      *((_BYTE *)v36 - 8) = v44;
      *v36 = v43;
      swift_bridgeObjectRelease();
      result = swift_release();
      *a1 = v2;
    }
    if (__OFADD__(v5++, 1))
      goto LABEL_58;
LABEL_41:
    ++v20;
    v19 = *(_QWORD *)(v2 + 16);
    i += 56;
    if (v20 == v19)
      return v5;
  }
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2 = 0;
  v3 = 0;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(result + 16);
  v6 = result + 32;
  while (1)
  {
    if (v3 == v4)
    {
      v7 = 0;
      v8 = *(_QWORD *)(a2 + 16);
      goto LABEL_6;
    }
    if (v3 >= v4)
      break;
    v7 = *(_QWORD *)(a2 + 32 + 8 * v3);
    v8 = v3 + 1;
LABEL_6:
    result = v2 == v5;
    if (v2 == v5)
    {
      v9 = 0;
      v10 = v5;
      if (v3 == v4)
        return result;
    }
    else
    {
      if (v2 >= v5)
        goto LABEL_15;
      v9 = *(_QWORD *)(v6 + 8 * v2);
      v10 = v2 + 1;
      if (v3 == v4)
        return result;
    }
    result = 0;
    if (v2 != v5)
    {
      v2 = v10;
      v3 = v8;
      if (v7 == v9)
        continue;
    }
    return result;
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized static ShaderGraphNode.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4;

  if ((static NodePersonality.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8)) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16)) & 1) == 0
    || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
  {
    return 0;
  }
  v4 = *(_BYTE *)(a2 + 40);
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0)
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      v4 = 1;
    if ((v4 & 1) != 0)
      return 0;
  }
  return 1;
}

uint64_t specialized static Graph.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v14;
  _OWORD v15[2];
  __int128 v16;
  _OWORD v17[2];
  __int128 v18;
  _OWORD v19[2];
  __int128 v20;
  _OWORD v21[2];

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if ((specialized Sequence<>.elementsEqual<A>(_:)(*(_QWORD *)(a2 + 8), *(_QWORD *)(a1 + 8)) & 1) == 0
    || (specialized static ContiguousArray<A>.== infix(_:_:)(v4, v5) & 1) == 0)
  {
    goto LABEL_15;
  }
  v6 = *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24) && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
  if (v6 || (v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), v8 = 0, (v7 & 1) != 0))
  {
    if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40)
      && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48)) & 1) != 0
      && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56)) & 1) != 0
      && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 64), *(_QWORD *)(a2 + 64)) & 1) != 0
      && *(_QWORD *)(a1 + 72) == *(_QWORD *)(a2 + 72))
    {
      v9 = *(_OWORD *)(a1 + 96);
      v20 = *(_OWORD *)(a1 + 80);
      v21[0] = v9;
      *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)(a1 + 105);
      v10 = *(_OWORD *)(a2 + 96);
      v18 = *(_OWORD *)(a2 + 80);
      v19[0] = v10;
      *(_OWORD *)((char *)v19 + 9) = *(_OWORD *)(a2 + 105);
      if ((specialized static ShaderGraphNode.== infix(_:_:)((uint64_t)&v20, (uint64_t)&v18) & 1) != 0)
      {
        v11 = *(_OWORD *)(a1 + 144);
        v16 = *(_OWORD *)(a1 + 128);
        v17[0] = v11;
        *(_OWORD *)((char *)v17 + 9) = *(_OWORD *)(a1 + 153);
        v12 = *(_OWORD *)(a2 + 144);
        v14 = *(_OWORD *)(a2 + 128);
        v15[0] = v12;
        *(_OWORD *)((char *)v15 + 9) = *(_OWORD *)(a2 + 153);
        v8 = specialized static ShaderGraphNode.== infix(_:_:)((uint64_t)&v16, (uint64_t)&v14);
        return v8 & 1;
      }
    }
LABEL_15:
    v8 = 0;
  }
  return v8 & 1;
}

BOOL specialized static Edge.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BOOL8 result;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_BYTE *)(a1 + 40);
  v23 = *(_QWORD *)(a1 + 32);
  v25 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a2 + 24);
  v22 = *(_QWORD *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a1 + 16);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a2 + 8)) & 1) == 0)
    return 0;
  if (v10 == v9 && v4 == v6 || (v11 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v11 & 1) != 0))
  {
    result = 0;
    if ((v5 & 1) != 0)
    {
      if ((v7 & 1) == 0)
        return result;
    }
    else if ((v7 & 1) != 0 || v23 != v22)
    {
      return result;
    }
    if (v25 != v8)
      return result;
    if (*(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56))
    {
      v13 = *(_QWORD *)(a1 + 80);
      v14 = *(_BYTE *)(a1 + 96);
      v24 = *(_QWORD *)(a1 + 88);
      v26 = *(_QWORD *)(a1 + 104);
      v15 = *(_QWORD *)(a2 + 80);
      v16 = *(_QWORD *)(a2 + 88);
      v17 = *(_BYTE *)(a2 + 96);
      v18 = *(_QWORD *)(a2 + 104);
      v19 = *(_QWORD *)(a2 + 64);
      v20 = *(_QWORD *)(a2 + 72);
      v21 = *(_QWORD *)(a1 + 72);
      if (((*(uint64_t (**)(uint64_t))(**(_QWORD **)(a1 + 64) + 128))(v19) & 1) != 0
        && (v21 == v20 && v13 == v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if ((v14 & 1) == 0)
        {
          if ((v17 & 1) != 0 || v24 != v16)
            return 0;
          return v26 == v18;
        }
        if ((v17 & 1) != 0)
          return v26 == v18;
      }
    }
    return 0;
  }
  return result;
}

BOOL specialized static Input.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  char v5;
  _BOOL8 result;
  char v7;

  if (*(_QWORD *)a1 != *(_QWORD *)a2
    || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a2 + 8)) & 1) == 0)
  {
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    v7 = *(_BYTE *)(a2 + 40);
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      if (!*(_BYTE *)(a2 + 40))
        return 0;
    }
    else
    {
      if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
        v7 = 1;
      if ((v7 & 1) != 0)
        return 0;
    }
    return *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_n(uint64_t a1, uint64_t *a2)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_nTm(a1, a2);
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *__return_ptr, uint64_t, __int128 *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  _QWORD *v29;
  _QWORD v30[5];
  char v31;
  _BYTE v32[8];
  uint64_t v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  _BYTE v39[8];
  uint64_t v40;
  __int128 v41;
  _QWORD v42[2];
  _BYTE v43[8];

  v26 = *(_QWORD *)(a3 + 16);
  if (!v26)
    return MEMORY[0x24BEE4AF8];
  v4 = a3;
  v5 = a2;
  v25 = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_retain();
  result = swift_retain();
  v7 = 0;
  v29 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v8 = 32;
  v23 = v4;
  v24 = v5;
  while (v25 != v7)
  {
    v10 = *(_QWORD *)(v5 + 8 * v7 + 32);
    v11 = *(_OWORD *)(v4 + v8 + 16);
    v34 = *(_OWORD *)(v4 + v8);
    *(_OWORD *)v35 = v11;
    *(_OWORD *)&v35[16] = *(_OWORD *)(v4 + v8 + 32);
    v37 = v34;
    v12 = v11;
    outlined init with take of MetalFunctionNode?((uint64_t)&v37, (uint64_t)v39, &demangling cache variable for type metadata for _HashTable.Storage?);
    v38 = *((_QWORD *)&v37 + 1);
    v36 = v12;
    v41 = *(_OWORD *)&v35[8];
    v13 = *(_QWORD *)&v35[24];
    outlined init with take of MetalFunctionNode?((uint64_t)&v41, (uint64_t)v43, &demangling cache variable for type metadata for _HashTable.Storage?);
    v42[0] = *((_QWORD *)&v41 + 1);
    v40 = v13;
    outlined retain of _HashTable.Storage?((uint64_t)&v38);
    outlined retain of _HashTable.Storage?((uint64_t)&v36);
    outlined retain of _HashTable.Storage?((uint64_t)v42);
    outlined retain of _HashTable.Storage?((uint64_t)&v40);
    outlined retain of _HashTable.Storage?((uint64_t)v39);
    outlined retain of _HashTable.Storage?((uint64_t)v43);
    a4(v30, v10, &v34);
    v14 = v30[0];
    v15 = v30[1];
    v16 = v30[2];
    v17 = v30[3];
    v18 = v30[4];
    v19 = v31;
    outlined release of _HashTable.Storage?((uint64_t)v39);
    outlined release of _HashTable.Storage?((uint64_t)&v38);
    outlined release of _HashTable.Storage?((uint64_t)&v36);
    outlined release of _HashTable.Storage?((uint64_t)v43);
    outlined release of _HashTable.Storage?((uint64_t)v42);
    outlined release of _HashTable.Storage?((uint64_t)&v40);
    result = outlined init with take of MetalFunctionNode?((uint64_t)v30, (uint64_t)v32, &demangling cache variable for type metadata for ShaderGraphNode?);
    if (v33)
    {
      v28 = v16;
      v20 = v29;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
        v20 = (_QWORD *)result;
      }
      v22 = v20[2];
      v21 = v20[3];
      v29 = v20;
      if (v22 >= v21 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v20);
        v29 = (_QWORD *)result;
      }
      v29[2] = v22 + 1;
      v9 = &v29[6 * v22];
      v9[4] = v14;
      v9[5] = v15;
      v9[6] = v28;
      v9[7] = v17;
      v9[8] = v18;
      *((_BYTE *)v9 + 72) = v19 & 1;
    }
    ++v7;
    v8 += 48;
    v4 = v23;
    v5 = v24;
    if (v26 == v7)
    {
      swift_release();
      swift_release();
      swift_release();
      return (uint64_t)v29;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Graph.Adjacent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v32 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    v9 = v32;
    v10 = *(_QWORD *)(v32 + 16);
    v11 = 16 * v10;
    v12 = v6;
    do
    {
      v13 = *(_QWORD *)(v32 + 24);
      v14 = v10++ >= v13 >> 1;
      if (v14)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v10, 1);
      *(_QWORD *)(v32 + 16) = v10;
      v15 = v32 + v11;
      *(_QWORD *)(v15 + 32) = 0;
      *(_QWORD *)(v15 + 40) = v7;
      v11 += 16;
      --v12;
    }
    while (v12);
  }
  else
  {
    result = swift_bridgeObjectRetain();
    v10 = *(_QWORD *)(v7 + 16);
    v9 = v7;
  }
  if (v6 != v10)
    goto LABEL_20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = specialized OrderedSet.init<A>(_:)(a2);
  v18 = v17;
  v19 = *(_QWORD *)(v17 + 16);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (v19 != v6)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v20 = *(_QWORD *)(a1 + 16);
  if (!v20)
  {
    result = swift_bridgeObjectRetain();
    if (!*(_QWORD *)(v7 + 16))
      goto LABEL_16;
    goto LABEL_19;
  }
  v31 = v16;
  swift_bridgeObjectRetain();
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
  v21 = *(_QWORD *)(v7 + 16);
  v22 = 56 * v21 + 32;
  v23 = 0uLL;
  v24 = v20;
  do
  {
    v25 = *(_QWORD *)(v7 + 24);
    v14 = v21++ >= v25 >> 1;
    if (v14)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v21, 1);
      v23 = 0uLL;
    }
    *(_QWORD *)(v7 + 16) = v21;
    v26 = v7 + v22;
    *(_QWORD *)(v26 + 48) = 0;
    *(_OWORD *)(v26 + 16) = v23;
    *(_OWORD *)(v26 + 32) = v23;
    v22 += 56;
    *(_OWORD *)v26 = v23;
    --v24;
  }
  while (v24);
  v16 = v31;
  if (v20 != v21)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_16:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27 = specialized OrderedSet.init<A>(_:)(a1);
  v29 = v28;
  v30 = *(_QWORD *)(v28 + 16);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (v30 == v20)
  {
    *a3 = v16;
    a3[1] = v18;
    a3[2] = v9;
    a3[3] = v27;
    a3[4] = v29;
    a3[5] = v7;
    return result;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X8>)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  unint64_t *v53;
  _QWORD v54[2];
  unint64_t v55;
  unint64_t *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  _QWORD *v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;

  v54[1] = a6;
  v58 = a5;
  v61 = a1;
  v56 = a7;
  swift_bridgeObjectRetain();
  v59 = a3;
  swift_bridgeObjectRetain();
  v55 = a4;
  outlined copy of NodePersonality(a4);
  v66 = (_QWORD *)MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v10 = v66;
  v11 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  v60 = a2;
  if (v11)
  {
    v12 = 0;
    v13 = (uint64_t *)(a2 + 48);
    do
    {
      v14 = *(v13 - 2);
      v15 = *(v13 - 1);
      v16 = *v13;
      v66 = v10;
      v18 = v10[2];
      v17 = v10[3];
      swift_retain();
      swift_bridgeObjectRetain();
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        v10 = v66;
      }
      v10[2] = v18 + 1;
      v19 = &v10[7 * v18];
      v19[10] = v12;
      v13 += 3;
      v19[4] = -7;
      v19[5] = v16;
      v19[6] = v14;
      v19[7] = v15;
      v19[8] = 0;
      *((_BYTE *)v19 + 72) = 1;
      ++v12;
    }
    while (v11 != v12);
  }
  swift_bridgeObjectRelease_n();
  v57 = v54;
  v66 = (_QWORD *)MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v20 = (uint64_t)v66;
  v21 = *(_QWORD *)(v59 + 16);
  v22 = swift_bridgeObjectRetain();
  v60 = v21;
  if (v21)
  {
    v23 = 0;
    v24 = (uint64_t *)(v22 + 48);
    do
    {
      v25 = *(v24 - 2);
      v26 = *(v24 - 1);
      v27 = *v24;
      v66 = (_QWORD *)v20;
      v28 = *(_QWORD *)(v20 + 16);
      v29 = *(_QWORD *)(v20 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v28 >= v29 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v28 + 1, 1);
        v20 = (uint64_t)v66;
      }
      *(_QWORD *)(v20 + 16) = v28 + 1;
      v30 = v20 + 56 * v28;
      *(_QWORD *)(v30 + 80) = v23;
      v24 += 3;
      *(_QWORD *)(v30 + 32) = -7;
      *(_QWORD *)(v30 + 40) = v27;
      *(_QWORD *)(v30 + 48) = v25;
      *(_QWORD *)(v30 + 56) = v26;
      *(_QWORD *)(v30 + 64) = 0;
      *(_BYTE *)(v30 + 72) = 1;
      ++v23;
    }
    while (v60 != v23);
  }
  swift_bridgeObjectRelease_n();
  v31 = *(_QWORD **)v58;
  v32 = *(_QWORD *)(*(_QWORD *)v58 + 16);
  v33 = v10[2];
  if (v33)
  {
    swift_bridgeObjectRetain();
    v34 = 0;
    v35 = 0;
    v36 = v10;
    do
    {
      swift_retain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v36 = specialized _ArrayBuffer._consumeAndCreateNew()(v36);
      if (v35 >= v36[2])
      {
        __break(1u);
        goto LABEL_45;
      }
      ++v35;
      v36[v34 + 4] = v32;
      swift_bridgeObjectRelease();
      swift_release();
      v34 += 7;
    }
    while (v33 != v35);
    swift_release();
    v37 = *(_QWORD *)(v20 + 16);
    if (!v37)
      goto LABEL_37;
    goto LABEL_18;
  }
  v36 = v10;
  v37 = *(_QWORD *)(v20 + 16);
  if (v37)
  {
LABEL_18:
    swift_bridgeObjectRetain();
    v38 = 0;
    v35 = 0;
    v39 = (_QWORD *)v20;
    while (1)
    {
      v10 = *(_QWORD **)(v20 + v38 * 8 + 40);
      swift_retain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v39 = specialized _ArrayBuffer._consumeAndCreateNew()(v39);
      if (v35 >= v39[2])
        break;
      ++v35;
      v39[v38 + 4] = v32;
      swift_bridgeObjectRelease();
      swift_release();
      v38 += 7;
      if (v37 == v35)
      {
        swift_release();
        v40 = v36[2];
        if (!v40)
          goto LABEL_38;
        goto LABEL_24;
      }
    }
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
LABEL_37:
  v39 = (_QWORD *)v20;
  v40 = v36[2];
  if (v40)
  {
LABEL_24:
    swift_bridgeObjectRetain();
    v41 = 0;
    v35 = 0;
    v10 = v36;
    while (1)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      if (v35 >= v10[2])
        break;
      ++v35;
      v42 = &v10[v41];
      v42[8] = v61;
      *((_BYTE *)v42 + 72) = 0;
      swift_bridgeObjectRelease();
      swift_release();
      v41 += 7;
      if (v40 == v35)
      {
        swift_bridgeObjectRelease();
        v43 = v39[2];
        if (!v43)
          goto LABEL_39;
        goto LABEL_30;
      }
    }
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
    goto LABEL_41;
  }
LABEL_38:
  v10 = v36;
  v43 = v39[2];
  if (v43)
  {
LABEL_30:
    swift_bridgeObjectRetain();
    v44 = 0;
    v35 = 0;
    v36 = v39;
    while (1)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v36 = specialized _ArrayBuffer._consumeAndCreateNew()(v36);
      if (v35 >= v36[2])
        goto LABEL_47;
      ++v35;
      v45 = &v36[v44];
      v45[8] = v61;
      *((_BYTE *)v45 + 72) = 0;
      swift_bridgeObjectRelease();
      swift_release();
      v44 += 7;
      if (v43 == v35)
      {
        swift_bridgeObjectRelease();
        goto LABEL_40;
      }
    }
  }
LABEL_39:
  v36 = v39;
LABEL_40:
  v35 = v55;
  outlined copy of NodePersonality(v55);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_48;
LABEL_41:
  v47 = v31[2];
  v46 = v31[3];
  if (v47 >= v46 >> 1)
    v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v46 > 1), v47 + 1, 1, v31);
  v31[2] = v47 + 1;
  v48 = &v31[6 * v47];
  v48[4] = v35;
  v48[5] = v10;
  v48[6] = v36;
  v48[7] = v32;
  v49 = v61;
  v48[8] = v61;
  *((_BYTE *)v48 + 72) = 0;
  *(_QWORD *)v58 = v31;
  outlined copy of NodePersonality(v35);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Graph.Adjacent.init(_:)((uint64_t)v10, (uint64_t)v36, &v62);
  v50 = v62;
  v51 = v64;
  outlined consume of NodePersonality(v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v66 = (_QWORD *)v50;
  v67 = v63;
  v68 = v51;
  v69 = v65;
  result = specialized OrderedDictionary.subscript.setter((uint64_t *)&v66, v32);
  v53 = v56;
  *v56 = v35;
  v53[1] = (unint64_t)v10;
  v53[2] = (unint64_t)v36;
  v53[3] = v32;
  v53[4] = v49;
  *((_BYTE *)v53 + 40) = 0;
  return result;
}

__n128 specialized Graph.init(id:label:inputs:outputs:)@<Q0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __n128 result;
  __int128 v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  unint64_t v45;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __n128 v53;
  __int128 v54;
  _BYTE v55[32];
  __int128 v56;
  _BYTE v57[41];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77[2];

  v10 = MEMORY[0x24BEE4AF8];
  specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x24BEE4AF8]);
  v61 = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v58 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(v10);
  v59 = v11;
  v60 = v12;
  v13 = *(_QWORD *)(a5 + 16);
  v45 = a5;
  if (v13)
  {
    *(_QWORD *)&v50 = v10;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
    v14 = (_OWORD *)(a5 + 40);
    do
    {
      v15 = *((_QWORD *)v14 - 1);
      v47 = *v14;
      *(_QWORD *)&v50 = v10;
      v17 = *(_QWORD *)(v10 + 16);
      v16 = *(_QWORD *)(v10 + 24);
      swift_bridgeObjectRetain();
      swift_retain();
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        v10 = v50;
      }
      v14 = (_OWORD *)((char *)v14 + 24);
      *(_QWORD *)(v10 + 16) = v17 + 1;
      v18 = v10 + 24 * v17;
      *(_QWORD *)(v18 + 32) = v15;
      *(_OWORD *)(v18 + 40) = v47;
      --v13;
    }
    while (v13);
  }
  v19 = MEMORY[0x24BEE4AF8];
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(a1, v10, MEMORY[0x24BEE4AF8], 0xE000000000000010, (uint64_t)&v61, (uint64_t)&v58, &v62);
  v43 = v63;
  v41 = v64;
  v42 = v62;
  v40 = v65;
  v39 = v66;
  swift_bridgeObjectRelease();
  outlined init with take of NodePersonality(&v62, v77);
  v75 = *((_QWORD *)&v63 + 1);
  v76 = v63;
  v20 = *(_QWORD *)(a4 + 16);
  if (v20)
  {
    outlined retain of NodePersonality(v77);
    outlined retain of [Input]((uint64_t)&v76);
    outlined retain of [Input]((uint64_t)&v75);
    *(_QWORD *)&v50 = v19;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
    v21 = v19;
    v22 = (_OWORD *)(a4 + 40);
    do
    {
      v23 = *((_QWORD *)v22 - 1);
      v48 = *v22;
      *(_QWORD *)&v50 = v21;
      v25 = *(_QWORD *)(v21 + 16);
      v24 = *(_QWORD *)(v21 + 24);
      swift_bridgeObjectRetain();
      swift_retain();
      if (v25 >= v24 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
        v21 = v50;
      }
      v22 = (_OWORD *)((char *)v22 + 24);
      *(_QWORD *)(v21 + 16) = v25 + 1;
      v26 = v21 + 24 * v25;
      *(_QWORD *)(v26 + 32) = v23;
      *(_OWORD *)(v26 + 40) = v48;
      --v20;
    }
    while (v20);
  }
  else
  {
    outlined retain of NodePersonality(v77);
    outlined retain of [Input]((uint64_t)&v76);
    outlined retain of [Input]((uint64_t)&v75);
    v21 = MEMORY[0x24BEE4AF8];
  }
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(a1, MEMORY[0x24BEE4AF8], v21, 0xE000000000000000, (uint64_t)&v61, (uint64_t)&v58, &v67);
  v27 = v67;
  v28 = v69;
  v49 = v70;
  v38 = v71;
  v37 = v68;
  swift_bridgeObjectRelease();
  outlined init with take of NodePersonality(&v67, &v74);
  v72 = *((_QWORD *)&v68 + 1);
  v73 = v68;
  v29 = v58;
  v30 = v59;
  v31 = v60;
  outlined retain of NodePersonality(&v74);
  outlined retain of [Input]((uint64_t)&v73);
  outlined retain of [Input]((uint64_t)&v72);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  swift_release();
  *(_QWORD *)&v50 = v29;
  *((_QWORD *)&v50 + 1) = v30;
  *(_QWORD *)&v51 = v31;
  *((_QWORD *)&v51 + 1) = a2;
  *(_QWORD *)&v52 = a3;
  *((_QWORD *)&v52 + 1) = a1;
  v53.n128_u64[0] = a4;
  v53.n128_u64[1] = v45;
  v54 = (unint64_t)v61;
  *(_QWORD *)v55 = v27;
  *(_OWORD *)&v55[8] = v37;
  *(_QWORD *)&v55[24] = v28;
  *(_QWORD *)&v56 = v49;
  BYTE8(v56) = v38;
  *(_OWORD *)&v57[8] = v43;
  *(_QWORD *)v57 = v42;
  *(_QWORD *)&v57[24] = v41;
  *(_QWORD *)&v57[32] = v40;
  v57[40] = v39;
  swift_bridgeObjectRetain();
  outlined retain of Graph((uint64_t)&v50);
  outlined release of NodePersonality(v77);
  outlined release of [Input]((uint64_t)&v76);
  outlined release of [Input]((uint64_t)&v75);
  outlined release of NodePersonality(&v74);
  outlined release of [Input]((uint64_t)&v73);
  outlined release of [Input]((uint64_t)&v72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined release of Graph((uint64_t)&v50);
  v32 = *(_OWORD *)&v57[16];
  *(_OWORD *)(a6 + 128) = *(_OWORD *)v57;
  *(_OWORD *)(a6 + 144) = v32;
  *(_OWORD *)(a6 + 153) = *(_OWORD *)&v57[25];
  v33 = *(_OWORD *)v55;
  *(_OWORD *)(a6 + 64) = v54;
  *(_OWORD *)(a6 + 80) = v33;
  v34 = v56;
  *(_OWORD *)(a6 + 96) = *(_OWORD *)&v55[16];
  *(_OWORD *)(a6 + 112) = v34;
  v35 = v51;
  *(_OWORD *)a6 = v50;
  *(_OWORD *)(a6 + 16) = v35;
  result = v53;
  *(_OWORD *)(a6 + 32) = v52;
  *(__n128 *)(a6 + 48) = result;
  return result;
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for MaterialXTarget();
  lazy protocol witness table accessor for type MaterialXTarget and conformance MaterialXTarget();
  result = Set.init(minimumCapacity:)();
  v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v4)
      return v10;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
      return v10;
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = (_QWORD *)MEMORY[0x24954B748](i, a1);
        specialized Set._Variant.insert(_:)(&v9, v6);
        swift_release();
      }
    }
    else
    {
      v7 = (_QWORD **)(a1 + 32);
      do
      {
        v8 = *v7++;
        swift_retain();
        specialized Set._Variant.insert(_:)(&v9, v8);
        swift_release();
        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized ShaderGraphNode.dotID.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 110;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return 103;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF0dE4NodeV2IDVG_AJs5NeverOTg504_s11d54Graph0B0V25connectedUpstreamSubgraph8rootedAtSayAA0aB4H61VG5nodes_AC22DepthFirstEdgeIteratorV5edgestAG_tFA2G2IDVXEfU0_AF0E0VTf1cn_nTf4xg_nTm(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (!v2)
    return v3;
  v23 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  v3 = v23;
  v7 = (unint64_t *)(a1 + 32);
  v8 = *(_QWORD *)(a2 + 64);
  v19 = v8 + 32;
  v20 = *(_QWORD *)(v8 + 16);
  while (1)
  {
    v10 = *v7++;
    v9 = v10;
    if (v10 >= v20)
      break;
    v11 = v19 + 48 * v9;
    v12 = *(_QWORD *)v11;
    v13 = *(_QWORD *)(v11 + 8);
    v14 = *(_QWORD *)(v11 + 16);
    v15 = *(_QWORD *)(v11 + 24);
    v22 = *(_QWORD *)(v11 + 32);
    v21 = *(_BYTE *)(v11 + 40);
    outlined copy of NodePersonality(*(_QWORD *)v11);
    v16 = *(_QWORD *)(v23 + 16);
    v17 = *(_QWORD *)(v23 + 24);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    if (v16 >= v17 >> 1)
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v16 + 1, 1);
    *(_QWORD *)(v23 + 16) = v16 + 1;
    v18 = v23 + 48 * v16;
    *(_QWORD *)(v18 + 32) = v12;
    *(_QWORD *)(v18 + 40) = v13;
    *(_QWORD *)(v18 + 48) = v14;
    *(_QWORD *)(v18 + 56) = v15;
    *(_QWORD *)(v18 + 64) = v22;
    *(_BYTE *)(v18 + 72) = v21;
    if (!--v2)
      return v3;
  }
  __break(1u);
  return result;
}

uint64_t specialized Graph.DepthFirstEdgeIterator.init(_:initial:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  Swift::Int v11;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v17 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v6 = 40;
    do
    {
      v7 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v7);
      v6 += 48;
      --v5;
    }
    while (v5);
    result = swift_bridgeObjectRelease_n();
    v9 = v17;
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v10 = *(_QWORD *)(a1[8] + 16);
  v11 = 10 * v10;
  if ((unsigned __int128)(v10 * (__int128)10) >> 64 == (10 * v10) >> 63)
  {
    isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
    if (!(_DWORD)isUniquelyReferenced_nonNull_native || v11 > v9[3] >> 1)
    {
      if (v9[2] <= v11)
        v13 = v11;
      else
        v13 = v9[2];
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 0, v9);
    }
    v18 = MEMORY[0x24BEE4B08];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Input>);
    Set.reserveCapacity(_:)(v11);
    v14 = *a1;
    v15 = a1[1];
    v16 = a1[2];
    *a3 = v14;
    a3[1] = v15;
    a3[2] = v16;
    a3[3] = v9;
    a3[4] = v18;
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_nTm(uint64_t a1, uint64_t *a2)
{
  int64_t v2;
  uint64_t v3;
  __int128 *v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v5 = (__int128 *)(a2 + 2);
    v6 = a2[1];
    v20 = *a2;
    v21 = a2[2];
    v18 = a2[4];
    v19 = a2[3];
    v7 = *((_BYTE *)a2 + 40);
    v17 = a2[6];
    v27 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v3 = v27;
    v26 = *v5;
    v8 = (_QWORD *)(a1 + 80);
    v16 = v7 & 1;
    do
    {
      v10 = *(v8 - 6);
      v9 = *(v8 - 5);
      v11 = *(v8 - 3);
      v24 = *(v8 - 2);
      v25 = *(v8 - 4);
      v23 = *((_BYTE *)v8 - 8);
      v22 = *v8;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      outlined retain of String((uint64_t)&v26);
      v27 = v3;
      v13 = *(_QWORD *)(v3 + 16);
      v12 = *(_QWORD *)(v3 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v3 = v27;
      }
      v8 += 7;
      *(_QWORD *)(v3 + 16) = v13 + 1;
      v14 = v3 + 112 * v13;
      *(_QWORD *)(v14 + 32) = v20;
      *(_QWORD *)(v14 + 40) = v6;
      *(_QWORD *)(v14 + 48) = v21;
      *(_QWORD *)(v14 + 56) = v19;
      *(_QWORD *)(v14 + 64) = v18;
      *(_BYTE *)(v14 + 72) = v16;
      *(_QWORD *)(v14 + 80) = v17;
      *(_QWORD *)(v14 + 88) = v10;
      *(_QWORD *)(v14 + 96) = v9;
      *(_QWORD *)(v14 + 104) = v25;
      *(_QWORD *)(v14 + 112) = v11;
      *(_QWORD *)(v14 + 120) = v24;
      *(_BYTE *)(v14 + 128) = v23;
      *(_QWORD *)(v14 + 136) = v22;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _BYTE v16[8];
  uint64_t v17;
  _QWORD v18[5];
  char v19;
  uint64_t v20;

  v6 = *(_QWORD *)(a1 + 16);
  a2();
  result = Set.init(minimumCapacity:)();
  v17 = result;
  if (v6)
  {
    v8 = (_QWORD *)(a1 + 80);
    do
    {
      v10 = *(v8 - 6);
      v9 = *(v8 - 5);
      v11 = *(v8 - 4);
      v12 = *(v8 - 3);
      v13 = *(v8 - 2);
      v14 = *((_BYTE *)v8 - 8);
      v15 = *v8;
      v8 += 7;
      v18[0] = v10;
      v18[1] = v9;
      v18[2] = v11;
      v18[3] = v12;
      v18[4] = v13;
      v19 = v14;
      v20 = v15;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)((uint64_t)v16, (Swift::Int)v18, a4);
      swift_release();
      swift_bridgeObjectRelease();
      --v6;
    }
    while (v6);
    return v17;
  }
  return result;
}

{
  uint64_t v6;
  uint64_t result;
  Swift::UInt *v8;
  Swift::UInt v9;
  Swift::UInt v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a1 + 16);
  a2();
  result = Set.init(minimumCapacity:)();
  v11 = result;
  if (v6)
  {
    v8 = (Swift::UInt *)(a1 + 32);
    do
    {
      v9 = *v8++;
      specialized Set._Variant.insert(_:)(&v10, v9, a4);
      --v6;
    }
    while (v6);
    return v11;
  }
  return result;
}

uint64_t specialized closure #2 in Graph.hoist(_:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t *a7)
{
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  uint64_t result;
  uint64_t v21;
  _QWORD *i;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *k;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  _QWORD *j;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  _QWORD *n;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  __int128 *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  char v89;
  unint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v118;
  uint64_t v119;
  _QWORD *m;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  char v134;
  __int128 v135;
  __int128 v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  unint64_t *v146;
  uint64_t v147;
  _QWORD *ii;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  unint64_t v171;
  uint64_t v172;
  __int128 v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  __int128 v189;
  uint64_t v190;
  char v191;
  _BYTE v192[7];
  uint64_t v193;
  _QWORD v194[2];
  __int128 v195;
  uint64_t v196;
  char v197;
  _BYTE v198[7];
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  __int128 v209;
  uint64_t v210;
  char v211;
  _BYTE v212[7];
  uint64_t v213;
  _BYTE v214[48];
  __int128 v215;
  _BYTE v216[64];
  _BYTE v217[41];
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  char v223;
  uint64_t v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  _OWORD v234[2];
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  uint64_t v242;
  __int128 v243;
  _OWORD v244[2];
  unint64_t v245;

  v12 = *a1;
  v13 = a1[1];
  v14 = a1[2];
  v242 = *((_QWORD *)a1 + 6);
  v240 = v13;
  v241 = v14;
  v239 = v12;
  v15 = *(__int128 *)((char *)a1 + 56);
  v16 = *(__int128 *)((char *)a1 + 72);
  v17 = *(__int128 *)((char *)a1 + 88);
  v238 = *((_QWORD *)a1 + 13);
  v236 = v16;
  v237 = v17;
  v235 = v15;
  v243 = v240;
  v245 = *((_QWORD *)&v240 + 1);
  v18 = v240;
  swift_retain();
  outlined retain of String((uint64_t)&v243);
  LOBYTE(a2) = specialized Set.contains(_:)(&v239, a2);
  swift_release();
  outlined release of String((uint64_t)&v243);
  v244[0] = v236;
  v174 = v236;
  swift_retain();
  outlined retain of String((uint64_t)v244);
  v19 = specialized Set.contains(_:)(&v235, a3);
  swift_release();
  result = outlined release of String((uint64_t)v244);
  if ((a2 & 1) != 0)
  {
    v21 = *(_QWORD *)(a4 + 16);
    if ((v19 & 1) != 0)
    {
      v164 = a5;
      if (!v21)
        return result;
      for (i = (_QWORD *)(a4 + 80); ; i += 7)
      {
        v23 = *(i - 6);
        v176 = *(i - 5);
        v24 = *(i - 4);
        v25 = *(i - 3);
        v26 = *(i - 2);
        v27 = *((_BYTE *)i - 8);
        v28 = *i;
        if (v24 == v18 && v25 == v245)
          break;
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) != 0)
          goto LABEL_53;
        if (!--v21)
          return result;
      }
      v24 = v18;
      v25 = v245;
LABEL_53:
      v218 = v23;
      v219 = v176;
      v220 = v24;
      v221 = v25;
      v222 = v26;
      v223 = v27;
      v224 = v28;
      v68 = a6[9];
      v233 = a6[8];
      v234[0] = v68;
      *(_OWORD *)((char *)v234 + 9) = *(__int128 *)((char *)a6 + 153);
      v69 = a6[5];
      v229 = a6[4];
      v230 = v69;
      v70 = a6[7];
      v231 = a6[6];
      v232 = v70;
      v71 = a6[1];
      v225 = *a6;
      v226 = v71;
      v72 = a6[3];
      v227 = a6[2];
      v228 = v72;
      swift_retain();
      swift_bridgeObjectRetain();
      outlined retain of Graph((uint64_t)&v225);
      Graph.edge(to:)((uint64_t)&v218, &v180);
      outlined init with take of MetalFunctionNode?((uint64_t)&v180, (uint64_t)&v187, &demangling cache variable for type metadata for Edge?);
      if (v188)
      {
        *(_DWORD *)v198 = *(_DWORD *)v192;
        *(_DWORD *)&v198[3] = *(_DWORD *)&v192[3];
        v194[0] = v187;
        v194[1] = v188;
        v195 = v189;
        v196 = v190;
        v197 = v191;
        v199 = v193;
        v200 = v189;
        v245 = v188;
        swift_retain();
        outlined retain of String((uint64_t)&v200);
        outlined release of Edge?(&v180);
        outlined release of Graph((uint64_t)&v225);
        v73 = *(_QWORD *)(v164 + 16);
        if (v73)
        {
          v74 = (_QWORD *)(v164 + 80);
          while (1)
          {
            v75 = *(v74 - 6);
            v167 = *(v74 - 5);
            v76 = *(v74 - 4);
            v77 = *(v74 - 3);
            v78 = *(v74 - 2);
            v79 = *((_BYTE *)v74 - 8);
            v80 = *v74;
            if (v76 == (_QWORD)v174 && v77 == *((_QWORD *)&v174 + 1))
              break;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              goto LABEL_73;
            v74 += 7;
            if (!--v73)
              goto LABEL_62;
          }
          v77 = *((_QWORD *)&v174 + 1);
          v76 = v174;
LABEL_73:
          v91 = a6[6];
          *(_OWORD *)&v216[48] = a6[7];
          v92 = a6[9];
          *(_OWORD *)v217 = a6[8];
          *(_OWORD *)&v217[16] = v92;
          *(_OWORD *)&v217[25] = *(__int128 *)((char *)a6 + 153);
          v93 = a6[2];
          v215 = a6[3];
          v94 = a6[5];
          *(_OWORD *)v216 = a6[4];
          *(_OWORD *)&v216[16] = v94;
          *(_OWORD *)&v216[32] = v91;
          v95 = a6[1];
          *(_OWORD *)v214 = *a6;
          *(_OWORD *)&v214[16] = v95;
          v207 = v75;
          v208 = v167;
          *(_QWORD *)&v209 = v76;
          *((_QWORD *)&v209 + 1) = v77;
          v210 = v78;
          v211 = v79;
          v213 = v80;
          *(_OWORD *)&v214[32] = v93;
          swift_retain();
          swift_bridgeObjectRetain();
          outlined retain of Graph((uint64_t)v214);
          v96 = Graph.edges(from:)((uint64_t)&v207);
          outlined release of Graph((uint64_t)v214);
          v97 = *(_QWORD *)(v96 + 16);
          if (v97)
          {
            swift_bridgeObjectRetain();
            v98 = 0;
            v175 = v96;
            do
            {
              v99 = v96 + v98;
              v100 = *(_QWORD *)(v96 + v98 + 88);
              v101 = *(_QWORD *)(v96 + v98 + 96);
              v102 = *(_QWORD *)(v96 + v98 + 104);
              v103 = *(_QWORD *)(v96 + v98 + 112);
              v104 = *(_QWORD *)(v99 + 120);
              v105 = *(_BYTE *)(v99 + 128);
              v106 = *(_QWORD *)(v99 + 136);
              *(_QWORD *)&v201 = v100;
              *((_QWORD *)&v201 + 1) = v101;
              v202 = v102;
              v203 = v103;
              v204 = v104;
              v205 = v105;
              v206 = v106;
              swift_retain();
              outlined retain of String((uint64_t)&v200);
              swift_retain();
              swift_bridgeObjectRetain();
              swift_retain_n();
              swift_bridgeObjectRetain_n();
              Graph.connect(_:to:)((uint64_t)v194, (unint64_t)&v201);
              swift_bridgeObjectRelease();
              swift_release();
              v96 = v175;
              swift_bridgeObjectRelease_n();
              swift_release_n();
              swift_bridgeObjectRelease();
              swift_release();
              v98 += 112;
              --v97;
            }
            while (v97);
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_release();
          }
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          outlined release of String((uint64_t)&v200);
          return swift_bridgeObjectRelease();
        }
LABEL_62:
        swift_release();
        v82 = &v200;
        goto LABEL_122;
      }
      outlined release of Graph((uint64_t)&v225);
      swift_bridgeObjectRelease();
      return swift_release();
    }
    v170 = a7;
    if (!v21)
      return result;
    for (j = (_QWORD *)(a4 + 80); ; j += 7)
    {
      v46 = *(j - 6);
      v178 = *(j - 5);
      v47 = *(j - 4);
      v48 = *(j - 3);
      v49 = *(j - 2);
      v50 = *((_BYTE *)j - 8);
      v51 = *j;
      if (v47 == v18 && v48 == v245)
        break;
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0)
        goto LABEL_64;
      if (!--v21)
        return result;
    }
    v47 = v18;
    v48 = v245;
LABEL_64:
    v180 = v46;
    v181 = v178;
    v182 = v47;
    v183 = v48;
    v184 = v49;
    v185 = v50;
    v186 = v51;
    v83 = a6[9];
    v233 = a6[8];
    v234[0] = v83;
    *(_OWORD *)((char *)v234 + 9) = *(__int128 *)((char *)a6 + 153);
    v84 = a6[5];
    v229 = a6[4];
    v230 = v84;
    v85 = a6[7];
    v231 = a6[6];
    v232 = v85;
    v86 = a6[1];
    v225 = *a6;
    v226 = v86;
    v87 = a6[3];
    v227 = a6[2];
    v228 = v87;
    swift_retain();
    swift_bridgeObjectRetain();
    outlined retain of Graph((uint64_t)&v225);
    Graph.edge(to:)((uint64_t)&v180, &v187);
    outlined init with take of MetalFunctionNode?((uint64_t)&v187, (uint64_t)v214, &demangling cache variable for type metadata for Edge?);
    if (!*(_QWORD *)&v214[8])
    {
      outlined release of Graph((uint64_t)&v225);
      goto LABEL_71;
    }
    *(_DWORD *)v212 = *(_DWORD *)&v214[41];
    *(_DWORD *)&v212[3] = *(_DWORD *)&v214[44];
    v207 = *(_QWORD *)v214;
    v208 = *(_QWORD *)&v214[8];
    v209 = *(_OWORD *)&v214[16];
    v210 = *(_QWORD *)&v214[32];
    v211 = v214[40];
    v213 = v215;
    v201 = *(_OWORD *)&v214[16];
    swift_retain();
    outlined retain of String((uint64_t)&v201);
    outlined release of Edge?(&v187);
    outlined release of Graph((uint64_t)&v225);
    v88 = *v170;
    if (!*(_QWORD *)(*v170 + 16)
      || (result = specialized __RawDictionaryStorage.find<A>(_:)(v235), (v89 & 1) == 0)
      || (v90 = *(_QWORD *)(*(_QWORD *)(v88 + 56) + 8 * result), v90 == -7))
    {
      swift_release();
      outlined release of String((uint64_t)&v201);
LABEL_71:
      swift_bridgeObjectRelease();
      return swift_release();
    }
    if ((v90 & 0x8000000000000000) == 0)
    {
      v107 = *((_QWORD *)a6 + 8);
      if (v90 < *(_QWORD *)(v107 + 16))
      {
        v108 = v107 + 48 * v90;
        v172 = *(_QWORD *)(v108 + 40);
        v109 = *(_QWORD *)(v172 + 16);
        if (v109)
        {
          v158 = *(_QWORD *)(v108 + 32);
          v110 = (uint64_t *)(v172 + 80);
          while (1)
          {
            v112 = *(v110 - 6);
            v111 = *(v110 - 5);
            v114 = *(v110 - 4);
            v113 = *(v110 - 3);
            v115 = *(v110 - 2);
            LODWORD(v245) = *((unsigned __int8 *)v110 - 8);
            v116 = *v110;
            if (v114 == (_QWORD)v174 && v113 == *((_QWORD *)&v174 + 1))
              break;
            v118 = v113;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              goto LABEL_120;
            v110 += 7;
            if (!--v109)
              goto LABEL_89;
          }
          v118 = *((_QWORD *)&v174 + 1);
          v114 = v174;
LABEL_120:
          v218 = v112;
          v219 = v111;
          v220 = v114;
          v221 = v118;
          v222 = v115;
          v223 = v245;
          v224 = v116;
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          outlined retain of String((uint64_t)&v201);
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of NodePersonality(v158);
          Graph.connect(_:to:)((uint64_t)&v207, (unint64_t)&v218);
          swift_bridgeObjectRelease_n();
          swift_release_n();
          swift_bridgeObjectRelease();
          swift_release();
          outlined consume of NodePersonality(v158);
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
LABEL_89:
          swift_release();
        }
        v82 = &v201;
LABEL_122:
        outlined release of String((uint64_t)v82);
        swift_bridgeObjectRelease();
        return swift_release();
      }
      goto LABEL_132;
    }
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
    goto LABEL_133;
  }
  v30 = *a7;
  v31 = *(_QWORD *)(*a7 + 16);
  if ((v19 & 1) != 0)
  {
    v165 = a5;
    if (!v31)
      return result;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v239);
    if ((v32 & 1) == 0)
      return result;
    v33 = *(_QWORD *)(*(_QWORD *)(v30 + 56) + 8 * result);
    if (v33 == -7)
      return result;
    if ((v33 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v34 = *((_QWORD *)a6 + 8);
      if (v33 < *(_QWORD *)(v34 + 16))
      {
        v162 = *((_QWORD *)a6 + 8);
        v35 = v34 + 48 * v33;
        v169 = *(_QWORD *)(v35 + 48);
        v36 = *(_QWORD *)(v169 + 16);
        if (v36)
        {
          v159 = *(_QWORD *)(v35 + 32);
          for (k = (_QWORD *)(v169 + 80); ; k += 7)
          {
            v39 = *(k - 6);
            v38 = *(k - 5);
            v40 = *(k - 4);
            v41 = *(k - 3);
            v42 = *(k - 2);
            v43 = *((_BYTE *)k - 8);
            v177 = *k;
            if (v40 == v18 && v41 == v245)
              break;
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) != 0)
              goto LABEL_91;
            if (!--v36)
              return result;
          }
          v40 = v18;
          v41 = v245;
LABEL_91:
          v218 = v39;
          v219 = v38;
          v220 = v40;
          v221 = v41;
          v222 = v42;
          v223 = v43;
          v224 = v177;
          v119 = *(_QWORD *)(v165 + 16);
          if (v119)
          {
            for (m = (_QWORD *)(v165 + 80); ; m += 7)
            {
              v121 = *(m - 6);
              v122 = *(m - 5);
              v123 = *(m - 4);
              v124 = *(m - 3);
              v125 = *(m - 2);
              v126 = *((_BYTE *)m - 8);
              v127 = *m;
              if (v123 == (_QWORD)v174 && v124 == *((_QWORD *)&v174 + 1))
                break;
              result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((result & 1) != 0)
                goto LABEL_101;
              if (!--v119)
                return result;
            }
            v124 = *((_QWORD *)&v174 + 1);
            v123 = v174;
LABEL_101:
            v187 = v121;
            v188 = v122;
            *(_QWORD *)&v189 = v123;
            *((_QWORD *)&v189 + 1) = v124;
            v190 = v125;
            v191 = v126;
            v193 = v127;
            v129 = *(_QWORD *)a6;
            v130 = *(__int128 *)((char *)a6 + 24);
            v131 = *((_QWORD *)a6 + 5);
            v132 = *((_BYTE *)a6 + 120);
            v133 = *((_QWORD *)a6 + 16);
            v134 = *((_BYTE *)a6 + 168);
            *(_OWORD *)&v214[8] = *(__int128 *)((char *)a6 + 8);
            *(_OWORD *)&v214[24] = v130;
            *(_QWORD *)v214 = v129;
            *(_QWORD *)&v214[40] = v131;
            v215 = a6[3];
            *(_QWORD *)v216 = v162;
            v135 = *(__int128 *)((char *)a6 + 88);
            *(_OWORD *)&v216[8] = *(__int128 *)((char *)a6 + 72);
            *(_OWORD *)&v216[24] = v135;
            *(_OWORD *)&v216[40] = *(__int128 *)((char *)a6 + 104);
            v216[56] = v132;
            *(_QWORD *)v217 = v133;
            v136 = *(__int128 *)((char *)a6 + 152);
            *(_OWORD *)&v217[8] = *(__int128 *)((char *)a6 + 136);
            *(_OWORD *)&v217[24] = v136;
            v217[40] = v134;
            v225 = *(_OWORD *)v214;
            v226 = *(_OWORD *)&v214[16];
            v233 = *(_OWORD *)v217;
            v234[0] = *(_OWORD *)&v217[16];
            *(_OWORD *)((char *)v234 + 9) = *(_OWORD *)&v217[25];
            v231 = *(_OWORD *)&v216[32];
            v232 = *(_OWORD *)&v216[48];
            v229 = *(_OWORD *)v216;
            v230 = *(_OWORD *)&v216[16];
            v227 = *(_OWORD *)&v214[32];
            v228 = v215;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined copy of NodePersonality(v159);
            swift_retain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            outlined retain of Graph((uint64_t)v214);
            v137 = Graph.edges(from:)((uint64_t)&v187);
            outlined release of Graph((uint64_t)v214);
            v245 = v137;
            v138 = *(_QWORD *)(v137 + 16);
            if (v138)
            {
              swift_bridgeObjectRetain();
              v139 = 0;
              do
              {
                v140 = *(_QWORD *)(v245 + v139 + 96);
                v141 = *(_QWORD *)(v245 + v139 + 104);
                v142 = *(_QWORD *)(v245 + v139 + 112);
                v143 = *(_QWORD *)(v245 + v139 + 120);
                v144 = *(_BYTE *)(v245 + v139 + 128);
                v145 = *(_QWORD *)(v245 + v139 + 136);
                v180 = *(_QWORD *)(v245 + v139 + 88);
                v181 = v140;
                v182 = v141;
                v183 = v142;
                v184 = v143;
                v185 = v144;
                v186 = v145;
                swift_retain();
                swift_bridgeObjectRetain();
                swift_retain();
                swift_bridgeObjectRetain();
                swift_retain_n();
                swift_bridgeObjectRetain_n();
                Graph.connect(_:to:)((uint64_t)&v218, (unint64_t)&v180);
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease_n();
                swift_release_n();
                swift_bridgeObjectRelease();
                swift_release();
                v139 += 112;
                --v138;
              }
              while (v138);
              swift_bridgeObjectRelease();
            }
            outlined consume of NodePersonality(v159);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            return swift_bridgeObjectRelease();
          }
        }
        return result;
      }
    }
    __break(1u);
    goto LABEL_129;
  }
  if (!v31)
    return result;
  result = specialized __RawDictionaryStorage.find<A>(_:)(v239);
  if ((v53 & 1) == 0)
    return result;
  v54 = *a7;
  if (!*(_QWORD *)(*a7 + 16))
    return result;
  v55 = *(_QWORD *)(*(_QWORD *)(v30 + 56) + 8 * result);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v235);
  if ((v56 & 1) == 0 || v55 == -7)
    return result;
  if ((v55 & 0x8000000000000000) != 0)
  {
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }
  v57 = *((_QWORD *)a6 + 8);
  if (v55 >= *(_QWORD *)(v57 + 16))
  {
LABEL_130:
    __break(1u);
    goto LABEL_131;
  }
  v163 = *((_QWORD *)a6 + 8);
  v160 = v57 + 32;
  v58 = (unint64_t *)(v57 + 32 + 48 * v55);
  v171 = v58[2];
  v59 = *(_QWORD *)(v171 + 16);
  if (v59)
  {
    v166 = *(_QWORD *)(*(_QWORD *)(v54 + 56) + 8 * result);
    v157 = *v58;
    for (n = (_QWORD *)(v171 + 80); ; n += 7)
    {
      v61 = *(n - 5);
      v179 = *(n - 6);
      v62 = *(n - 4);
      v63 = *(n - 3);
      v64 = *(n - 2);
      v65 = *((_BYTE *)n - 8);
      v66 = *n;
      if (v62 == v18 && v63 == v245)
        break;
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0)
        goto LABEL_107;
      if (!--v59)
        return result;
    }
    v62 = v18;
    v63 = v245;
LABEL_107:
    *(_QWORD *)v214 = v179;
    v245 = v61;
    *(_QWORD *)&v214[8] = v61;
    *(_QWORD *)&v214[16] = v62;
    *(_QWORD *)&v214[24] = v63;
    *(_QWORD *)&v214[32] = v64;
    v214[40] = v65;
    *(_QWORD *)&v215 = v66;
    if (v166 != -7)
    {
      if ((v166 & 0x8000000000000000) != 0)
      {
LABEL_133:
        __break(1u);
        goto LABEL_134;
      }
      if (v166 >= *(_QWORD *)(v163 + 16))
      {
LABEL_134:
        __break(1u);
        return result;
      }
      v146 = (unint64_t *)(v160 + 48 * v166);
      v168 = v146[1];
      v147 = *(_QWORD *)(v168 + 16);
      if (v147)
      {
        v161 = *v146;
        for (ii = (_QWORD *)(v168 + 80); ; ii += 7)
        {
          v149 = *(ii - 6);
          v150 = *(ii - 5);
          v151 = *(ii - 4);
          v152 = *(ii - 3);
          v153 = *(ii - 2);
          v154 = *((_BYTE *)ii - 8);
          v155 = *ii;
          if (v151 == (_QWORD)v174 && v152 == *((_QWORD *)&v174 + 1))
            break;
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) != 0)
            goto LABEL_126;
          if (!--v147)
            return result;
        }
        v152 = *((_QWORD *)&v174 + 1);
        v151 = v174;
LABEL_126:
        *(_QWORD *)&v225 = v149;
        *((_QWORD *)&v225 + 1) = v150;
        *(_QWORD *)&v226 = v151;
        *((_QWORD *)&v226 + 1) = v152;
        *(_QWORD *)&v227 = v153;
        BYTE8(v227) = v154;
        *(_QWORD *)&v228 = v155;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of NodePersonality(v157);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of NodePersonality(v161);
        Graph.connect(_:to:)((uint64_t)v214, (unint64_t)&v225);
        swift_bridgeObjectRelease_n();
        swift_release_n();
        swift_bridgeObjectRelease();
        swift_release();
        outlined consume of NodePersonality(v161);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of NodePersonality(v157);
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

unint64_t specialized Sequence.forEach(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t *a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(__int128 *);
  __int128 v24;
  Swift::UInt v25;
  Swift::Int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t);
  char v39;
  char v40;
  uint64_t v42;
  unint64_t result;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  Swift::UInt v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  Swift::UInt v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD v112[6];
  __int128 v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  char v120[8];
  __int128 v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  char v125[8];
  uint64_t v126;
  _QWORD *v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  Swift::UInt v131;
  _OWORD v132[2];
  uint64_t v133;

  v8 = *a1;
  v7 = (_QWORD *)a1[1];
  v9 = a1[2];
  v10 = (_QWORD *)a1[3];
  v126 = a1[4];
  v127 = v10;
  v110 = v126;
  v111 = v10;
  swift_retain();
  swift_retain();
  swift_retain();
  outlined retain of [Input]((uint64_t)&v127);
  outlined retain of [Input]((uint64_t)&v126);
  v75 = v9;
  if (!v10[2])
  {
LABEL_73:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  v76 = v7;
  v77 = v7 + 4;
  v73 = v8 + 32;
  v74 = (_QWORD *)(v8 + 16);
  v72 = v9 + 32;
  v64 = v7 + 7;
  v78 = v8;
  while (1)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v11 = v10[2];
      if (!v11)
        goto LABEL_72;
    }
    else
    {
      v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      v11 = v10[2];
      if (!v11)
      {
LABEL_72:
        __break(1u);
        goto LABEL_73;
      }
    }
    v12 = v11 - 1;
    v13 = &v10[7 * v12];
    v14 = *((_OWORD *)v13 + 2);
    v15 = *((_OWORD *)v13 + 3);
    v16 = *((_OWORD *)v13 + 4);
    v131 = v13[10];
    v129 = v15;
    v130 = v16;
    v128 = v14;
    v17 = v13[4];
    v18 = v13[6];
    v85 = v13[7];
    v86 = v13[5];
    v19 = v13[8];
    v20 = *((_BYTE *)v13 + 72);
    v21 = v13[10];
    v10[2] = v12;
    v111 = v10;
    v83 = v18;
    v84 = v17;
    v82 = v19;
    v81 = v20;
    v80 = v21;
    if (*(_QWORD *)(v110 + 16))
    {
      v95 = v110;
      Hasher.init(_seed:)();
      v133 = v128;
      Hasher._combine(_:)(v128);
      v22 = *((_QWORD *)&v128 + 1);
      v23 = *(void (**)(__int128 *))(**((_QWORD **)&v128 + 1) + 120);
      swift_retain();
      v23(&v97);
      swift_release();
      v24 = v129;
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v25 = v130;
      v90 = BYTE8(v130);
      if (BYTE8(v130) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v25);
      }
      v89 = v131;
      Hasher._combine(_:)(v131);
      v26 = Hasher._finalize()();
      v27 = v95;
      v28 = -1 << *(_BYTE *)(v95 + 32);
      v29 = v26 & ~v28;
      if (((*(_QWORD *)(v95 + 56 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) != 0)
      {
        v79 = v25;
        v93 = v22;
        v87 = v10;
        v30 = ~v28;
        while (1)
        {
          v31 = *(_QWORD *)(v27 + 48) + 56 * v29;
          if (*(_QWORD *)v31 == v133)
          {
            v32 = *(_QWORD *)(v31 + 16);
            v34 = *(_QWORD *)(v31 + 24);
            v33 = *(_QWORD *)(v31 + 32);
            v35 = *(_BYTE *)(v31 + 40);
            v36 = *(_QWORD *)(v31 + 48);
            v37 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v31 + 8) + 128);
            swift_retain();
            swift_bridgeObjectRetain();
            if ((v37(v93) & 1) != 0)
            {
              if (v32 == (_QWORD)v24 && v34 == *((_QWORD *)&v24 + 1))
              {
                swift_bridgeObjectRelease();
                swift_release();
                v27 = v95;
                if ((v35 & 1) != 0)
                {
LABEL_24:
                  v40 = v90;
                  if (v36 != v89)
                    v40 = 0;
                  if ((v40 & 1) != 0)
                  {
LABEL_35:
                    swift_bridgeObjectRelease();
                    swift_release();
                    v8 = v78;
                    v7 = v76;
                    v10 = v87;
                    goto LABEL_4;
                  }
                  goto LABEL_15;
                }
                goto LABEL_29;
              }
              v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_release();
              v27 = v95;
              if ((v39 & 1) != 0)
              {
                if ((v35 & 1) != 0)
                  goto LABEL_24;
LABEL_29:
                if ((v90 & 1) == 0 && v33 == v79 && v36 == v89)
                  goto LABEL_35;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_release();
              v27 = v95;
            }
          }
LABEL_15:
          v29 = (v29 + 1) & v30;
          if (((*(_QWORD *)(v95 + 56 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
          {
            v8 = v78;
            v7 = v76;
            v10 = v87;
            goto LABEL_38;
          }
        }
      }
      v7 = v76;
    }
LABEL_38:
    v132[0] = v129;
    swift_retain();
    outlined retain of String((uint64_t)v132);
    specialized Set._Variant.insert(_:)((uint64_t)&v97, (Swift::Int)&v128, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<Input>);
    swift_release();
    swift_bridgeObjectRelease();
    v42 = v7[2];
    if (v8)
      break;
    if (!v42)
      goto LABEL_3;
    if (*v77 == (_QWORD)v128)
    {
      result = 0;
      v45 = v75;
    }
    else
    {
      if (v42 == 1)
        goto LABEL_3;
      if (v7[5] == (_QWORD)v128)
      {
        result = 1;
        v45 = v75;
      }
      else
      {
        if (v42 == 2)
          goto LABEL_3;
        if (v7[6] != (_QWORD)v128)
        {
          v46 = 0;
          while (v42 - 3 != v46)
          {
            v47 = v64[v46++];
            if (v47 == (_QWORD)v128)
            {
              result = v46 + 2;
              v45 = v75;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_76;
              goto LABEL_55;
            }
          }
LABEL_3:
          swift_release();
          outlined release of String((uint64_t)v132);
          goto LABEL_4;
        }
        result = 2;
        v45 = v75;
      }
    }
LABEL_55:
    if (result >= *(_QWORD *)(v45 + 16))
      goto LABEL_77;
    v88 = v10;
    v48 = (_QWORD *)(v72 + 48 * result);
    v49 = v48[3];
    v50 = v48[4];
    v51 = v48[5];
    v52 = *(_QWORD *)(v50 + 16);
    if (v49)
    {
      swift_retain();
      outlined retain of String((uint64_t)v132);
      swift_retain();
      swift_retain();
      swift_retain();
      result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v128, v50 + 32, v52, (_QWORD *)(v49 + 16), v49 + 32);
      if ((v53 & 1) != 0)
        goto LABEL_65;
    }
    else
    {
      swift_retain();
      outlined retain of String((uint64_t)v132);
      swift_retain();
      swift_retain();
      result = specialized Collection<>.firstIndex(of:)(&v128, v50 + 32, v52);
      if ((v54 & 1) != 0)
      {
LABEL_65:
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        outlined release of String((uint64_t)v132);
        swift_release();
        outlined release of String((uint64_t)v132);
LABEL_67:
        v10 = v88;
        v8 = v78;
        goto LABEL_4;
      }
    }
    if ((result & 0x8000000000000000) != 0)
      goto LABEL_78;
    if (result >= *(_QWORD *)(v51 + 16))
      goto LABEL_79;
    v55 = (_QWORD *)(v51 + 56 * result);
    v57 = v55[4];
    v56 = v55[5];
    v58 = v55[6];
    v59 = v55[8];
    v60 = v55[9];
    v61 = v55[10];
    v133 = v55[7];
    v94 = v59;
    v96 = v60;
    outlined copy of Output?(v57, v56);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined release of String((uint64_t)v132);
    if (!v56)
    {
      swift_release();
      outlined release of String((uint64_t)v132);
      goto LABEL_67;
    }
    v92 = v61;
    v8 = v78;
    specialized OrderedDictionary.subscript.getter(v57, v78, v7, v75, v112);
    outlined init with take of MetalFunctionNode?((uint64_t)v112, (uint64_t)&v113, &demangling cache variable for type metadata for Graph.Adjacent?);
    if (*((_QWORD *)&v113 + 1))
    {
      v121 = v113;
      v118 = v115;
      v91 = v114;
      v62 = v116;
      outlined init with take of MetalFunctionNode?((uint64_t)&v118, (uint64_t)v120, &demangling cache variable for type metadata for _HashTable.Storage?);
      v63 = *((_QWORD *)&v118 + 1);
      v119 = *((_QWORD *)&v118 + 1);
      v117 = v62;
      v123 = v121;
      outlined init with take of MetalFunctionNode?((uint64_t)&v123, (uint64_t)v125, &demangling cache variable for type metadata for _HashTable.Storage?);
      swift_retain();
      outlined retain of String((uint64_t)v132);
      outlined retain of _HashTable.Storage?((uint64_t)v120);
      outlined retain of _HashTable.Storage?((uint64_t)&v119);
      outlined retain of _HashTable.Storage?((uint64_t)&v117);
      outlined release of _HashTable.Storage?((uint64_t)v125);
      v124 = *((_QWORD *)&v123 + 1);
      outlined release of _HashTable.Storage?((uint64_t)&v124);
      v122 = v91;
      outlined release of _HashTable.Storage?((uint64_t)&v122);
      outlined release of _HashTable.Storage?((uint64_t)v120);
      outlined release of _HashTable.Storage?((uint64_t)&v119);
      outlined release of _HashTable.Storage?((uint64_t)&v117);
      outlined release of _HashTable.Storage?((uint64_t)&v117);
      outlined release of _HashTable.Storage?((uint64_t)v120);
    }
    else
    {
      swift_retain();
      outlined retain of String((uint64_t)v132);
      v63 = MEMORY[0x24BEE4AF8];
    }
    specialized Array.append<A>(contentsOf:)(v63);
    swift_release();
    outlined release of String((uint64_t)v132);
    *(_QWORD *)&v97 = v57;
    *((_QWORD *)&v97 + 1) = v56;
    v98 = v58;
    v99 = v133;
    v100 = v94;
    v101 = v96 & 1;
    v102 = v92;
    v103 = v84;
    v104 = v86;
    v105 = v83;
    v106 = v85;
    v107 = v82;
    v108 = v81;
    v109 = v80;
    specialized closure #2 in Graph.hoist(_:)(&v97, a2, a3, a4, a5, a6, a7);
    if (v71)
    {
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    v71 = 0;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    v10 = v111;
    v7 = v76;
LABEL_4:
    if (!v10[2])
      goto LABEL_73;
  }
  result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v128, (uint64_t)v77, v42, v74, v73);
  if ((v44 & 1) != 0)
    goto LABEL_3;
  v45 = v75;
  if ((result & 0x8000000000000000) == 0)
    goto LABEL_55;
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_OWORD *, _QWORD *))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v14[3];
  uint64_t v15;
  _QWORD v16[7];
  __int128 v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a3 + 16);
  if (v4)
  {
    v7 = *(_QWORD *)(a2 + 16);
    swift_retain();
    swift_retain();
    result = swift_retain();
    v9 = 0;
    while (v7)
    {
      v10 = *(_OWORD *)(a2 + v9 + 48);
      v14[0] = *(_OWORD *)(a2 + v9 + 32);
      v14[1] = v10;
      v14[2] = *(_OWORD *)(a2 + v9 + 64);
      v15 = *(_QWORD *)(a2 + v9 + 80);
      v18 = *(_QWORD *)(a2 + v9 + 40);
      v17 = v10;
      outlined init with take of MetalFunctionNode?(a3 + v9 + 32, (uint64_t)v16, &demangling cache variable for type metadata for Output?);
      v11 = *(_QWORD *)(a3 + v9 + 40);
      v12 = *(_QWORD *)(a3 + v9 + 32);
      swift_retain();
      outlined retain of String((uint64_t)&v17);
      outlined release of Output??(v16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Output?);
      a4(v14, v16);
      swift_bridgeObjectRelease();
      swift_release();
      result = outlined consume of Input?(v12, v11);
      --v7;
      v9 += 56;
      if (!--v4)
      {
        swift_release();
        swift_release();
        return swift_release();
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_OWORD *, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[3];
  uint64_t v14;
  __int128 v15;
  void (*v16)(_OWORD *, uint64_t, uint64_t);

  v16 = a4;
  v4 = *(_QWORD *)(a3 + 16);
  if (v4)
  {
    v6 = a2 + 32;
    v7 = *(_QWORD *)(a2 + 16);
    swift_retain();
    swift_retain();
    result = swift_retain();
    v9 = (uint64_t *)(a3 + 40);
    while (v7)
    {
      v10 = *(_OWORD *)(v6 + 16);
      v13[0] = *(_OWORD *)v6;
      v13[1] = v10;
      v13[2] = *(_OWORD *)(v6 + 32);
      v14 = *(_QWORD *)(v6 + 48);
      v15 = v10;
      v11 = *(v9 - 1);
      v12 = *v9;
      swift_retain();
      outlined retain of String((uint64_t)&v15);
      swift_retain();
      swift_retain();
      v16(v13, v11, v12);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      result = swift_release();
      --v7;
      v9 += 2;
      v6 += 56;
      if (!--v4)
      {
        swift_release();
        swift_release();
        return swift_release();
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized Graph.removeEdges(connectedTo:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[7];
  _QWORD v15[6];
  _QWORD v16[6];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[8];
  uint64_t v23;

  specialized OrderedDictionary.subscript.getter(a1, *(_QWORD *)v1, *(_QWORD **)(v1 + 8), *(_QWORD *)(v1 + 16), v15);
  outlined init with take of MetalFunctionNode?((uint64_t)v15, (uint64_t)&v17, &demangling cache variable for type metadata for Graph.Adjacent?);
  outlined init with take of MetalFunctionNode?((uint64_t)v15, (uint64_t)v22, &demangling cache variable for type metadata for Graph.Adjacent?);
  if (v23)
  {
    v3 = v20;
    v4 = v21;
    v5 = v17;
    v6 = v18;
    v7 = v19;
    swift_retain();
    swift_retain();
    swift_retain();
    v8 = outlined consume of Graph.Adjacent?(v5, v6);
    MEMORY[0x24BDAC7A8](v8);
    specialized Sequence.forEach(_:)(v7, v3, v4, (void (*)(_OWORD *, _QWORD *))closure #1 in Graph.removeEdges(connectedTo:)partial apply);
    swift_release();
    swift_release();
    swift_release();
  }
  specialized OrderedDictionary.subscript.getter(a1, *(_QWORD *)v1, *(_QWORD **)(v1 + 8), *(_QWORD *)(v1 + 16), v16);
  outlined init with take of MetalFunctionNode?((uint64_t)v16, (uint64_t)v14, &demangling cache variable for type metadata for Graph.Adjacent?);
  result = outlined init with take of MetalFunctionNode?((uint64_t)v16, (uint64_t)&v17, &demangling cache variable for type metadata for Graph.Adjacent?);
  if (v18)
  {
    v10 = v14[0];
    v11 = v14[1];
    v12 = v14[2];
    swift_retain();
    swift_retain();
    swift_retain();
    v13 = outlined consume of Graph.Adjacent?(v10, v11);
    MEMORY[0x24BDAC7A8](v13);
    specialized Sequence.forEach(_:)(v10, v11, v12, (void (*)(_OWORD *, uint64_t, uint64_t))closure #2 in Graph.removeEdges(connectedTo:)partial apply);
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized Graph.remove(_:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  char v15;
  uint64_t v16;

  v2 = a1;
  specialized Graph.removeEdges(connectedTo:)(a1);
  v3 = *(_QWORD *)(v1 + 64);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_21;
  if ((v2 & 0x8000000000000000) != 0)
  {
LABEL_22:
    __break(1u);
  }
  else
  {
    while (*(_QWORD *)(v3 + 16) > v2)
    {
      v16 = v1;
      v1 = v3;
      v5 = v3 + 48 * v2;
      v6 = v5 + 32;
      *(_QWORD *)(v5 + 56) = -7;
      v2 = *(_QWORD *)(v5 + 40);
      v7 = *(_QWORD *)(v2 + 16);
      if (v7)
      {
        swift_bridgeObjectRetain();
        v3 = 0;
        v8 = 0;
        while (1)
        {
          v9 = *(_QWORD **)(v6 + 8);
          swift_retain();
          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v6 + 8) = v9;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v9 = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
            *(_QWORD *)(v6 + 8) = v9;
          }
          if (v8 >= v9[2])
            break;
          ++v8;
          *(_QWORD *)((char *)v9 + v3 + 32) = -7;
          swift_bridgeObjectRelease();
          swift_release();
          v3 += 56;
          if (v7 == v8)
          {
            result = swift_bridgeObjectRelease();
            goto LABEL_11;
          }
        }
        __break(1u);
      }
      else
      {
LABEL_11:
        v2 = *(_QWORD *)(v6 + 16);
        v11 = *(_QWORD *)(v2 + 16);
        if (!v11)
        {
LABEL_18:
          *(_QWORD *)(v16 + 64) = v1;
          return result;
        }
        swift_bridgeObjectRetain();
        v12 = 0;
        v13 = 0;
        v3 = -7;
        while (1)
        {
          v14 = *(_QWORD **)(v6 + 16);
          swift_retain();
          swift_bridgeObjectRetain();
          v15 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v6 + 16) = v14;
          if ((v15 & 1) == 0)
          {
            v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
            *(_QWORD *)(v6 + 16) = v14;
          }
          if (v13 >= v14[2])
            break;
          ++v13;
          v14[v12 + 4] = -7;
          swift_bridgeObjectRelease();
          swift_release();
          v12 += 7;
          if (v11 == v13)
          {
            result = swift_bridgeObjectRelease();
            goto LABEL_18;
          }
        }
      }
      __break(1u);
LABEL_21:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v3);
      v3 = result;
      if ((v2 & 0x8000000000000000) != 0)
        goto LABEL_22;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Graph.BreathFirstEdgeIterator.init(_:initial:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t inited;
  Swift::Int v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  Swift::Int v32;

  v31 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v6 = 40;
    do
    {
      v7 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v7);
      v6 += 48;
      --v5;
    }
    while (v5);
    result = swift_bridgeObjectRelease_n();
    v9 = v31;
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v10 = a1[8];
  v11 = *(_QWORD *)(v10 + 16);
  v12 = 10 * v11;
  if ((unsigned __int128)(v11 * (__int128)10) >> 64 == (10 * v11) >> 63)
  {
    isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)isUniquelyReferenced_nonNull_native && v12 <= v9[3] >> 1)
    {
      v14 = v9[2];
      if (v14)
      {
LABEL_10:
        v15 = &v9[7 * v14];
        v17 = *(v15 - 3);
        v16 = *(v15 - 2);
        v29 = v10;
        v30 = a1;
        v18 = *(v15 - 1);
        v19 = *v15;
        v20 = v15[1];
        v28 = *((_BYTE *)v15 + 16);
        v27 = v15[3];
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Input>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_245FBECD0;
        *(_QWORD *)(inited + 32) = v17;
        *(_QWORD *)(inited + 40) = v16;
        *(_QWORD *)(inited + 48) = v18;
        *(_QWORD *)(inited + 56) = v19;
        *(_QWORD *)(inited + 64) = v20;
        v10 = v29;
        a1 = v30;
        *(_BYTE *)(inited + 72) = v28;
        *(_QWORD *)(inited + 80) = v27;
        swift_retain();
        swift_bridgeObjectRetain();
        v22 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
        swift_setDeallocating();
        swift_arrayDestroy();
LABEL_16:
        v32 = v22;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Input>);
        Set.reserveCapacity(_:)(v12);
        v24 = *a1;
        v25 = a1[1];
        v26 = a1[2];
        *a3 = v24;
        a3[1] = v25;
        a3[2] = v26;
        a3[3] = v9;
        a3[4] = v32;
        a3[5] = v10;
        swift_retain();
        swift_retain();
        swift_retain();
        return swift_bridgeObjectRetain();
      }
    }
    else
    {
      if (v9[2] <= v12)
        v23 = v12;
      else
        v23 = v9[2];
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v23, 0, v9);
      v14 = v9[2];
      if (v14)
        goto LABEL_10;
    }
    v22 = MEMORY[0x24BEE4B08];
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[14 * a2 + 4];
    if (a1 != a2 || &v4[14 * a1 + 4] >= (_QWORD *)&v16[112 * v15])
      result = (uint64_t)memmove(&v4[14 * a1 + 4], v16, 112 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  __int128 *v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_QWORD *, _QWORD);
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[4];
  __int128 v25;
  _QWORD v26[7];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v6 = (__int128 *)(a4 + 2);
    v33 = a4[2];
    v22 = a4[5] & 1;
    v23 = a4[6];
    v20 = a4[3];
    v21 = a4[4];
    v18 = a4[1];
    v19 = *a4;
    swift_retain();
    swift_retain();
    v7 = (_QWORD *)(a2 + 80);
    do
    {
      v8 = *v7;
      v9 = *((_BYTE *)v7 - 8);
      v11 = *(v7 - 3);
      v10 = *(v7 - 2);
      v13 = *(v7 - 5);
      v12 = *(v7 - 4);
      *(_QWORD *)&v27 = *(v7 - 6);
      v14 = v27;
      *((_QWORD *)&v27 + 1) = v13;
      v28 = v12;
      v29 = v11;
      v30 = v10;
      v31 = v9;
      v32 = v8;
      swift_retain();
      swift_bridgeObjectRetain();
      v15 = (void (*)(_QWORD *, _QWORD))specialized OrderedDictionary.subscript.modify(v24, v14);
      if (*(_QWORD *)(v16 + 8))
      {
        v26[0] = v19;
        v26[1] = v18;
        v26[2] = v33;
        v26[3] = v20;
        v26[4] = v21;
        v26[5] = v22;
        v26[6] = v23;
        v25 = *v6;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        outlined retain of String((uint64_t)&v25);
        specialized OrderedDictionary.subscript.setter(v26, &v27);
      }
      v15(v24, 0);
      v7 += 7;
      swift_bridgeObjectRelease();
      swift_release();
      --v4;
    }
    while (v4);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in Graph.insert<A>(_:)(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  _OWORD v4[3];
  uint64_t v5;
  _OWORD v6[3];
  uint64_t v7;

  v1 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v1;
  v4[2] = *(_OWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  v2 = *(_OWORD *)(a1 + 72);
  v6[0] = *(_OWORD *)(a1 + 56);
  v6[1] = v2;
  v6[2] = *(_OWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 104);
  return Graph.connect(_:to:)((uint64_t)v4, (unint64_t)v6);
}

uint64_t partial apply for closure #1 in Graph.sinkNodes()@<X0>(unint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #1 in Graph.sinkNodes()(a1, a2, *(_QWORD *)(v3 + 16), a3);
}

_QWORD *outlined release of Output??(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
  return a1;
}

uint64_t outlined copy of Output??(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
    return outlined copy of Output?(a1, a2);
  return a1;
}

unint64_t specialized Sequence.forEach(_:)(unint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  _QWORD *v48;
  Swift::UInt v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t);
  char v56;
  char v57;
  int v58;
  char v59;
  char v60;
  void (*v61)(_QWORD *, _QWORD);
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  Swift::Int v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t);
  char v80;
  int v81;
  int v82;
  void (*v83)(_QWORD *, _QWORD);
  uint64_t v84;
  uint64_t v85;
  __int128 *v86;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  Swift::UInt v92;
  uint64_t (*v93)(uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD v109[4];
  char v110[8];
  __int128 v111;
  uint64_t v112[7];
  __int128 v113;
  __int128 v114;
  __int128 v115;
  _QWORD v116[5];
  char v117;
  uint64_t v118;
  uint64_t v119;

  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return result;
  v84 = *(_QWORD *)(a4 + 8);
  v85 = *(_QWORD *)a4;
  v86 = (__int128 *)(a4 + 16);
  v6 = a2 + 32;
  swift_retain();
  swift_retain();
  v7 = 0;
  v88 = a3;
  v89 = v6;
  v90 = v4;
  while (1)
  {
    v8 = v6 + 56 * v7;
    v10 = *(_QWORD *)v8;
    v9 = *(_QWORD *)(v8 + 8);
    v11 = *(_QWORD *)(v8 + 16);
    v12 = *(_QWORD *)(v8 + 24);
    v13 = *(_QWORD *)(v8 + 32);
    v14 = *(unsigned __int8 *)(v8 + 40);
    v15 = *(_QWORD *)(v8 + 48);
    v116[0] = v10;
    v116[1] = v9;
    v107 = v11;
    v116[2] = v11;
    v116[3] = v12;
    v101 = v13;
    v116[4] = v13;
    v102 = v14;
    v117 = v14;
    v103 = v15;
    v118 = v15;
    v16 = (_QWORD *)a3[1];
    v17 = a3[2];
    v18 = v16 + 4;
    v19 = v16[2];
    if (*a3)
    {
      result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v10, (uint64_t)v18, v19, (_QWORD *)(*a3 + 16), *a3 + 32);
      if ((v20 & 1) != 0)
        goto LABEL_6;
      if ((result & 0x8000000000000000) != 0)
        break;
      goto LABEL_24;
    }
    if (!v19)
      goto LABEL_6;
    if (*v18 == v10)
    {
      result = 0;
      goto LABEL_24;
    }
    if (v19 == 1)
      goto LABEL_6;
    if (v16[5] == v10)
    {
      result = 1;
      goto LABEL_24;
    }
    if (v19 == 2)
      goto LABEL_6;
    if (v16[6] == v10)
    {
      result = 2;
      goto LABEL_24;
    }
    v21 = 0;
    v22 = v16 + 7;
    do
    {
      if (v19 - 3 == v21)
        goto LABEL_6;
      v23 = v22[v21++];
    }
    while (v23 != v10);
    result = v21 + 2;
    if (v21 + 2 < 0)
      break;
LABEL_24:
    if (result >= *(_QWORD *)(v17 + 16))
      goto LABEL_103;
    v24 = (_QWORD *)(v17 + 48 * result);
    v25 = v24[4];
    v26 = v24[5];
    v27 = v24[7];
    v29 = v24[8];
    v28 = v24[9];
    v30 = *(_QWORD *)(v29 + 16);
    v106 = v12;
    v100 = v7;
    v119 = v9;
    v94 = v26;
    v96 = v25;
    v98 = v28;
    if (!v27)
    {
      if (!v30)
      {
        swift_retain();
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
LABEL_4:
        swift_bridgeObjectRelease();
        swift_release();
        outlined consume of Graph.Adjacent?(v96, v94);
LABEL_5:
        swift_bridgeObjectRelease();
        swift_release();
        a3 = v88;
        v6 = v89;
        v4 = v90;
        v7 = v100;
        goto LABEL_6;
      }
      v105 = v30;
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v47 = v105;
      v32 = 0;
      v48 = (_QWORD *)(v29 + 80);
      while (2)
      {
        if (*(v48 - 6) == v10)
        {
          v49 = v10;
          v50 = *(v48 - 4);
          v52 = *(v48 - 3);
          v51 = *(v48 - 2);
          v53 = *((_BYTE *)v48 - 8);
          v54 = *v48;
          v55 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*(v48 - 5) + 128);
          swift_retain();
          swift_bridgeObjectRetain();
          if ((v55(v119) & 1) != 0)
          {
            if (v50 == v107 && v52 == v12)
            {
              swift_bridgeObjectRelease();
              result = swift_release();
              v10 = v49;
              v47 = v105;
LABEL_44:
              if ((v53 & 1) != 0)
              {
                v57 = v102;
                if (v54 != v103)
                  v57 = 0;
                if ((v57 & 1) != 0)
                  goto LABEL_28;
              }
              else
              {
                v58 = v102 ^ 1;
                if (v51 != v101)
                  v58 = 0;
                if (v58 == 1 && v54 == v103)
                  goto LABEL_28;
              }
            }
            else
            {
              v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              result = swift_release();
              v10 = v49;
              v47 = v105;
              if ((v56 & 1) != 0)
                goto LABEL_44;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_release();
            v10 = v49;
            v47 = v105;
          }
        }
        v48 += 7;
        if (v47 == ++v32)
          goto LABEL_4;
        continue;
      }
    }
    v31 = v30;
    swift_retain();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v32 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v116, v29 + 32, v31, (_QWORD *)(v27 + 16), v27 + 32);
    v34 = v33;
    result = swift_release();
    if ((v34 & 1) != 0)
      goto LABEL_4;
    if ((v32 & 0x8000000000000000) != 0)
      goto LABEL_105;
LABEL_28:
    if (v32 >= *(_QWORD *)(v98 + 16))
      goto LABEL_104;
    v35 = (_QWORD *)(v98 + 56 * v32);
    v36 = v35[4];
    v37 = v35[5];
    v38 = v35[8];
    v39 = v35[9];
    v40 = v35[10];
    v104 = v35[6];
    v91 = v35[7];
    outlined copy of Output?(v36, v37);
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of Graph.Adjacent?(v96, v94);
    if (!v37)
    {
      v115 = *v86;
      swift_retain();
      outlined retain of String((uint64_t)&v115);
      outlined consume of Input?(v36, 0);
      outlined consume of Input?(v85, v84);
      goto LABEL_5;
    }
    v41 = v39;
    v42 = v40;
    v97 = v37;
    v99 = v38;
    v4 = v90;
    v6 = v89;
    v7 = v100;
    v43 = v36;
    if (v36 != *(_QWORD *)a4)
    {
      outlined consume of Input?(v36, v97);
LABEL_57:
      swift_bridgeObjectRelease();
      swift_release();
      a3 = v88;
      goto LABEL_6;
    }
    v44 = *(_QWORD *)(a4 + 8);
    v114 = *v86;
    v93 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v97 + 128);
    v95 = v43;
    v45 = v41;
    outlined copy of Output?(v43, v97);
    swift_retain();
    outlined retain of String((uint64_t)&v114);
    if ((v93(v44) & 1) == 0)
    {
      swift_release();
      outlined release of String((uint64_t)&v114);
      outlined consume of Input?(v95, v97);
      outlined consume of Input?(v95, v97);
      goto LABEL_57;
    }
    if (__PAIR128__(v91, v104) == v114)
    {
      swift_release();
      outlined release of String((uint64_t)&v114);
      v46 = v45;
      outlined consume of Input?(v95, v97);
      a3 = v88;
    }
    else
    {
      v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_release();
      outlined release of String((uint64_t)&v114);
      v46 = v45;
      outlined consume of Input?(v95, v97);
      a3 = v88;
      if ((v59 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_99;
      }
    }
    v60 = *(_BYTE *)(a4 + 40);
    if ((v46 & 1) != 0)
    {
      if (*(_BYTE *)(a4 + 40))
        goto LABEL_63;
    }
    else
    {
      if (v99 != *(_QWORD *)(a4 + 32))
        v60 = 1;
      if ((v60 & 1) == 0)
      {
LABEL_63:
        if (v42 == *(_QWORD *)(a4 + 48))
        {
          v61 = (void (*)(_QWORD *, _QWORD))specialized OrderedDictionary.subscript.modify(v109, v10);
          if (v62[1])
          {
            v63 = v62[3];
            v64 = v62[4];
            v65 = *(_QWORD *)(v64 + 16);
            v83 = v61;
            if (v63)
            {
              swift_retain();
              swift_bridgeObjectRetain();
              swift_retain();
              swift_retain();
              v66 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v116, v64 + 32, v65, (_QWORD *)(v63 + 16), v63 + 32);
              v68 = v67;
              v108 = v69;
              swift_release();
              swift_release();
              if ((v68 & 1) == 0)
              {
                v70 = v108;
                goto LABEL_68;
              }
              swift_bridgeObjectRelease();
              swift_release();
LABEL_98:
              v83(v109, 0);
              outlined consume of Input?(v95, v97);
              swift_bridgeObjectRelease();
              goto LABEL_99;
            }
            if (!v65)
            {
              swift_retain();
              swift_bridgeObjectRetain();
              swift_retain();
LABEL_97:
              swift_bridgeObjectRelease();
              swift_release();
              swift_release();
              a3 = v88;
              v6 = v89;
              v4 = v90;
              v7 = v100;
              goto LABEL_98;
            }
            v92 = v10;
            swift_retain();
            swift_bridgeObjectRetain();
            v66 = 0;
            v73 = (_QWORD *)(swift_retain() + 80);
            while (1)
            {
              if (*(v73 - 6) == v92)
              {
                v74 = *(v73 - 4);
                v75 = *(v73 - 3);
                v76 = *(v73 - 2);
                v77 = *((_BYTE *)v73 - 8);
                v78 = *v73;
                v79 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*(v73 - 5) + 128);
                swift_retain();
                swift_bridgeObjectRetain();
                if ((v79(v119) & 1) != 0)
                {
                  if (v74 == v107 && v75 == v106)
                  {
                    swift_bridgeObjectRelease();
                    swift_release();
                  }
                  else
                  {
                    v80 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_release();
                    if ((v80 & 1) == 0)
                      goto LABEL_78;
                  }
                  if ((v77 & 1) != 0)
                  {
                    v81 = v102;
                    if (v78 != v103)
                      v81 = 0;
                    if (v81 == 1)
                      goto LABEL_94;
                  }
                  else
                  {
                    v82 = v102 ^ 1;
                    if (v76 != v101)
                      v82 = 0;
                    if (v82 == 1 && v78 == v103)
                    {
LABEL_94:
                      swift_release();
                      v70 = 0;
                      a3 = v88;
                      v6 = v89;
                      v4 = v90;
                      v7 = v100;
LABEL_68:
                      specialized OrderedSet._removeExistingMember(at:in:)(v66, v70, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(uint64_t))specialized OrderedSet._regenerateHashTable(), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:), (uint64_t)v110);
                      swift_release();
                      v113 = v111;
                      outlined release of String((uint64_t)&v113);
                      specialized ContiguousArray.remove(at:)(v66, (uint64_t)v112);
                      swift_bridgeObjectRelease();
                      swift_release();
                      outlined release of Input?(v112);
                      goto LABEL_98;
                    }
                  }
                }
                else
                {
                  swift_bridgeObjectRelease();
                  swift_release();
                }
              }
LABEL_78:
              v73 += 7;
              if (v65 == ++v66)
                goto LABEL_97;
            }
          }
          v61(v109, 0);
          v71 = v95;
          v72 = v97;
        }
        else
        {
          v71 = v95;
          v72 = v97;
        }
        outlined consume of Input?(v71, v72);
        swift_bridgeObjectRelease();
LABEL_99:
        swift_release();
        goto LABEL_6;
      }
    }
    outlined consume of Input?(v95, v97);
    swift_release();
    swift_bridgeObjectRelease();
LABEL_6:
    if (++v7 == v4)
    {
      swift_release();
      return swift_release();
    }
  }
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
  return result;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11ShaderGraph0cD4NodeV_s5NeverOSSTg504_s11c41Graph0B0V12describeEdgeySSAA0D0VFSSAA0aB4E6VXEfU_AD4EdgeVTf1cn_nTf4ng_nTm(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, _QWORD *, uint64_t))
{
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t result;
  _QWORD v14[5];
  char v15;
  uint64_t v16;
  _QWORD v17[5];
  char v18;
  _BYTE v19[8];
  uint64_t v20;
  void (*v21)(uint64_t *__return_ptr, _QWORD *, uint64_t);

  v21 = a4;
  outlined init with take of MetalFunctionNode?(a1, (uint64_t)v17, &demangling cache variable for type metadata for ShaderGraphNode?);
  v7 = v17[0];
  v6 = v17[1];
  v8 = v17[2];
  v9 = v17[3];
  v10 = v17[4];
  v11 = v18;
  outlined init with take of MetalFunctionNode?(a1, (uint64_t)v19, &demangling cache variable for type metadata for ShaderGraphNode?);
  if (!v20)
    return 0;
  v14[0] = v7;
  v14[1] = v6;
  v14[2] = v8;
  v14[3] = v9;
  v14[4] = v10;
  v15 = v11 & 1;
  outlined copy of NodePersonality(v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21(&v16, v14, a2);
  outlined consume of NodePersonality(v7);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (!v4)
    return v16;
  return result;
}

unint64_t lazy protocol witness table accessor for type Input and conformance Input()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Input and conformance Input;
  if (!lazy protocol witness table cache variable for type Input and conformance Input)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for Input, &type metadata for Input);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Input and conformance Input;
  if (!lazy protocol witness table cache variable for type Input and conformance Input)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for Input, &type metadata for Input);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Output and conformance Output()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Output and conformance Output;
  if (!lazy protocol witness table cache variable for type Output and conformance Output)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for Output, &type metadata for Output);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Output and conformance Output);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Output and conformance Output;
  if (!lazy protocol witness table cache variable for type Output and conformance Output)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for Output, &type metadata for Output);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Output and conformance Output);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Edge and conformance Edge()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Edge and conformance Edge;
  if (!lazy protocol witness table cache variable for type Edge and conformance Edge)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for Edge, &type metadata for Edge);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Edge and conformance Edge);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShaderGraphNode.ID and conformance ShaderGraphNode.ID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShaderGraphNode.ID and conformance ShaderGraphNode.ID;
  if (!lazy protocol witness table cache variable for type ShaderGraphNode.ID and conformance ShaderGraphNode.ID)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for ShaderGraphNode.ID, &type metadata for ShaderGraphNode.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShaderGraphNode.ID and conformance ShaderGraphNode.ID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShaderGraphNode.ID and conformance ShaderGraphNode.ID;
  if (!lazy protocol witness table cache variable for type ShaderGraphNode.ID and conformance ShaderGraphNode.ID)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for ShaderGraphNode.ID, &type metadata for ShaderGraphNode.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShaderGraphNode.ID and conformance ShaderGraphNode.ID);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShaderGraphNode and conformance ShaderGraphNode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShaderGraphNode and conformance ShaderGraphNode;
  if (!lazy protocol witness table cache variable for type ShaderGraphNode and conformance ShaderGraphNode)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for ShaderGraphNode, &type metadata for ShaderGraphNode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShaderGraphNode and conformance ShaderGraphNode);
  }
  return result;
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Graph.Iterator<A>()
{
  JUMPOUT(0x24954C264);
}

unint64_t lazy protocol witness table accessor for type Graph.DepthFirstEdgeIterator and conformance Graph.DepthFirstEdgeIterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Graph.DepthFirstEdgeIterator and conformance Graph.DepthFirstEdgeIterator;
  if (!lazy protocol witness table cache variable for type Graph.DepthFirstEdgeIterator and conformance Graph.DepthFirstEdgeIterator)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for Graph.DepthFirstEdgeIterator, &type metadata for Graph.DepthFirstEdgeIterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Graph.DepthFirstEdgeIterator and conformance Graph.DepthFirstEdgeIterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Graph.BreathFirstEdgeIterator and conformance Graph.BreathFirstEdgeIterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Graph.BreathFirstEdgeIterator and conformance Graph.BreathFirstEdgeIterator;
  if (!lazy protocol witness table cache variable for type Graph.BreathFirstEdgeIterator and conformance Graph.BreathFirstEdgeIterator)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for Graph.BreathFirstEdgeIterator, &type metadata for Graph.BreathFirstEdgeIterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Graph.BreathFirstEdgeIterator and conformance Graph.BreathFirstEdgeIterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Graph.ID and conformance Graph.ID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Graph.ID and conformance Graph.ID;
  if (!lazy protocol witness table cache variable for type Graph.ID and conformance Graph.ID)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for Graph.ID, &type metadata for Graph.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Graph.ID and conformance Graph.ID);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Graph.Adjacent and conformance Graph.Adjacent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Graph.Adjacent and conformance Graph.Adjacent;
  if (!lazy protocol witness table cache variable for type Graph.Adjacent and conformance Graph.Adjacent)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for Graph.Adjacent, &type metadata for Graph.Adjacent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Graph.Adjacent and conformance Graph.Adjacent);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Graph and conformance Graph()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Graph and conformance Graph;
  if (!lazy protocol witness table cache variable for type Graph and conformance Graph)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for Graph, &type metadata for Graph);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Graph and conformance Graph);
  }
  return result;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for Input()
{
  return &type metadata for Input;
}

uint64_t destroy for Input()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Input(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Input(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for Input(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_release();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

ValueMetadata *type metadata accessor for Output()
{
  return &type metadata for Output;
}

uint64_t destroy for Edge()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Edge(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v6;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Edge(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v5;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  return a1;
}

__n128 __swift_memcpy112_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for Edge(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_release();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for Edge(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Edge(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Edge()
{
  return &type metadata for Edge;
}

uint64_t destroy for ShaderGraphNode(unint64_t *a1)
{
  outlined consume of NodePersonality(*a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ShaderGraphNode(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)a2;
  outlined copy of NodePersonality(*(_QWORD *)a2);
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ShaderGraphNode(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)a2;
  outlined copy of NodePersonality(*(_QWORD *)a2);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v4;
  outlined consume of NodePersonality(v5);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  return a1;
}

uint64_t assignWithTake for ShaderGraphNode(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  outlined consume of NodePersonality(v4);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for ShaderGraphNode()
{
  return &type metadata for ShaderGraphNode;
}

ValueMetadata *type metadata accessor for ShaderGraphNode.ID()
{
  return &type metadata for ShaderGraphNode.ID;
}

uint64_t destroy for Graph(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(*(_QWORD *)(a1 + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(*(_QWORD *)(a1 + 128));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Graph(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  v9 = *(_QWORD *)(a2 + 80);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v9);
  v10 = *(_QWORD *)(a2 + 88);
  v11 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 80) = v9;
  *(_QWORD *)(a1 + 88) = v10;
  v12 = *(_QWORD *)(a2 + 104);
  v13 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 96) = v11;
  *(_QWORD *)(a1 + 104) = v12;
  *(_QWORD *)(a1 + 112) = v13;
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v14 = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v14);
  v15 = *(_QWORD *)(a2 + 136);
  v16 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 128) = v14;
  *(_QWORD *)(a1 + 136) = v15;
  v17 = *(_QWORD *)(a2 + 152);
  v18 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 144) = v16;
  *(_QWORD *)(a1 + 152) = v17;
  *(_QWORD *)(a1 + 160) = v18;
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Graph(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v4 = *(_QWORD *)(a2 + 80);
  outlined copy of NodePersonality(v4);
  v5 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v4;
  outlined consume of NodePersonality(v5);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v6 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v6;
  v7 = *(_QWORD *)(a2 + 128);
  outlined copy of NodePersonality(v7);
  v8 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v7;
  outlined consume of NodePersonality(v8);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v9 = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v9;
  return a1;
}

__n128 __swift_memcpy169_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_OWORD *)(a1 + 153) = *(__int128 *)((char *)a2 + 153);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for Graph(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  outlined consume of NodePersonality(v5);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v6;
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  outlined consume of NodePersonality(v7);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v8;
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  return a1;
}

uint64_t getEnumTagSinglePayload for Graph(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 169))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Graph(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 168) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 169) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 169) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Graph()
{
  return &type metadata for Graph;
}

uint64_t destroy for Graph.Iterator()
{
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for Graph.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for Graph.Iterator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Graph.Iterator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Input(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Input(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for Graph.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Graph.Iterator);
}

uint64_t destroy for Graph.DepthFirstEdgeIterator()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for Graph.DepthFirstEdgeIterator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Graph.DepthFirstEdgeIterator(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Graph.DepthFirstEdgeIterator(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Graph.DepthFirstEdgeIterator()
{
  return &type metadata for Graph.DepthFirstEdgeIterator;
}

uint64_t destroy for Graph.BreathFirstEdgeIterator(_QWORD *a1, uint64_t a2)
{
  return destroy for Graph.BreathFirstEdgeIterator(a1, a2, (void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

_QWORD *initializeWithCopy for Graph.BreathFirstEdgeIterator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Graph.BreathFirstEdgeIterator(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Graph.BreathFirstEdgeIterator(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  return assignWithTake for Graph.BreathFirstEdgeIterator(a1, a2, a3, (void (*)(uint64_t))MEMORY[0x24BEE4BC0]);
}

ValueMetadata *type metadata accessor for Graph.BreathFirstEdgeIterator()
{
  return &type metadata for Graph.BreathFirstEdgeIterator;
}

ValueMetadata *type metadata accessor for Graph.ID()
{
  return &type metadata for Graph.ID;
}

uint64_t destroy for Graph.Adjacent(_QWORD *a1, uint64_t a2)
{
  return destroy for Graph.BreathFirstEdgeIterator(a1, a2, (void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t destroy for Graph.BreathFirstEdgeIterator(_QWORD *a1, uint64_t a2, void (*a3)(_QWORD))
{
  swift_release();
  swift_release();
  swift_release();
  a3(a1[3]);
  a3(a1[4]);
  return ((uint64_t (*)(_QWORD))a3)(a1[5]);
}

_QWORD *initializeWithCopy for Graph.Adjacent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for Graph.Adjacent(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Graph.Adjacent(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  return assignWithTake for Graph.BreathFirstEdgeIterator(a1, a2, a3, (void (*)(uint64_t))MEMORY[0x24BEE4EF8]);
}

uint64_t assignWithTake for Graph.BreathFirstEdgeIterator(uint64_t a1, _OWORD *a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;

  swift_release();
  *(_OWORD *)a1 = *a2;
  swift_release();
  swift_release();
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];
  a4(v7);
  a4(*(_QWORD *)(a1 + 32));
  v8 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = a2[2];
  a4(v8);
  return a1;
}

ValueMetadata *type metadata accessor for Graph.Adjacent()
{
  return &type metadata for Graph.Adjacent;
}

uint64_t sub_245F3BFD4()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  if ((~v1 & 0xF000000000000007) != 0)
    outlined consume of NestedError(v1);
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type MaterialXTarget and conformance MaterialXTarget()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MaterialXTarget and conformance MaterialXTarget;
  if (!lazy protocol witness table cache variable for type MaterialXTarget and conformance MaterialXTarget)
  {
    v1 = type metadata accessor for MaterialXTarget();
    result = MEMORY[0x24954C264](&protocol conformance descriptor for MaterialXTarget, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialXTarget and conformance MaterialXTarget);
  }
  return result;
}

uint64_t closure #1 in Graph.removeEdges(connectedTo:)partial apply(uint64_t a1, uint64_t a2)
{
  return closure #1 in Graph.removeEdges(connectedTo:)(a1, a2);
}

uint64_t closure #2 in Graph.removeEdges(connectedTo:)partial apply(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #2 in Graph.removeEdges(connectedTo:)(a1, a2, a3, *(_QWORD **)(v3 + 16));
}

unint64_t lazy protocol witness table accessor for type FunctionNodeID and conformance FunctionNodeID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FunctionNodeID and conformance FunctionNodeID;
  if (!lazy protocol witness table cache variable for type FunctionNodeID and conformance FunctionNodeID)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for FunctionNodeID, &type metadata for FunctionNodeID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FunctionNodeID and conformance FunctionNodeID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FunctionNodeID and conformance FunctionNodeID;
  if (!lazy protocol witness table cache variable for type FunctionNodeID and conformance FunctionNodeID)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for FunctionNodeID, &type metadata for FunctionNodeID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FunctionNodeID and conformance FunctionNodeID);
  }
  return result;
}

uint64_t specialized OrderedSet._minimumCapacity.getter(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  double v4;

  if (result)
  {
    v1 = result;
    swift_beginAccess();
    result = 0;
    v2 = *(_QWORD *)(v1 + 16) & 0x3FLL;
    if (v2 >= 5 && v2 != (*(_QWORD *)(v1 + 24) & 0x3FLL))
    {
      v4 = (double)(1 << v2) * 0.25;
      if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) != 0)
      {
        if (v4 > -9.22337204e18)
        {
          if (v4 < 9.22337204e18)
            return (uint64_t)v4;
LABEL_13:
          __break(1u);
          return result;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_13;
    }
  }
  return result;
}

uint64_t outlined consume of MetalLibrary?(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255)
    return outlined consume of MetalLibrary(result, a2 & 1);
  return result;
}

uint64_t *outlined release of Graph.Adjacent?(uint64_t *a1)
{
  outlined consume of Graph.Adjacent?(*a1, a1[1]);
  return a1;
}

uint64_t *SGMaterialConfiguration.default.unsafeMutableAddressor()
{
  if (one-time initialization token for default != -1)
    swift_once();
  return &static SGMaterialConfiguration.default;
}

id SGMaterialConfiguration.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id SGMaterialConfiguration.init()()
{
  char *v0;
  objc_super v2;

  *(_QWORD *)&v0[OBJC_IVAR___SGMaterialConfiguration_customGeometryProperties] = MEMORY[0x24BEE4AF8];
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SGMaterialConfiguration();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t SGMaterialConfiguration.customGeometryProperties.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t SGMaterialConfiguration.customGeometryProperties.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___SGMaterialConfiguration_customGeometryProperties);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SGMaterialConfiguration.customGeometryProperties.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.StringNode.children.modify;
}

id one-time initialization function for default()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SGMaterialConfiguration()), sel_init);
  static SGMaterialConfiguration.default = (uint64_t)result;
  return result;
}

uint64_t type metadata accessor for SGMaterialConfiguration()
{
  return objc_opt_self();
}

id static SGMaterialConfiguration.default.getter()
{
  if (one-time initialization token for default != -1)
    swift_once();
  return (id)static SGMaterialConfiguration.default;
}

uint64_t static SGMaterialConfiguration.CodingKeys.== infix(_:_:)()
{
  return 1;
}

void SGMaterialConfiguration.CodingKeys.hash(into:)()
{
  Hasher._combine(_:)(0);
}

uint64_t SGMaterialConfiguration.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  return specialized SGMaterialConfiguration.CodingKeys.init(stringValue:)(a1, a2) & 1;
}

uint64_t SGMaterialConfiguration.CodingKeys.init(intValue:)()
{
  return 1;
}

Swift::Int SGMaterialConfiguration.CodingKeys.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t SGMaterialConfiguration.CodingKeys.intValue.getter()
{
  return 0;
}

unint64_t SGMaterialConfiguration.CodingKeys.stringValue.getter()
{
  return 0xD000000000000018;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance SGMaterialConfiguration.CodingKeys()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SGMaterialConfiguration.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized SGMaterialConfiguration.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SGMaterialConfiguration.CodingKeys()
{
  lazy protocol witness table accessor for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SGMaterialConfiguration.CodingKeys()
{
  lazy protocol witness table accessor for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t SGMaterialConfiguration.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SGMaterialConfiguration.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys();
  v8 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[1] = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0x58))(v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SGGeometryPropertyDefinition]);
  lazy protocol witness table accessor for type [SGGeometryPropertyDefinition] and conformance <A> [A](&lazy protocol witness table cache variable for type [SGGeometryPropertyDefinition] and conformance <A> [A], &lazy protocol witness table cache variable for type SGGeometryPropertyDefinition and conformance SGGeometryPropertyDefinition, (uint64_t)&protocol conformance descriptor for SGGeometryPropertyDefinition, MEMORY[0x24BEE12A0]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void *SGMaterialConfiguration.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SGMaterialConfiguration.init(from:)(a1);
}

void *SGMaterialConfiguration.init(from:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v12;
  char *v13;
  objc_class *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  objc_super v18;
  uint64_t v19;

  v3 = v1;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SGMaterialConfiguration.CodingKeys>);
  v5 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = &v1[OBJC_IVAR___SGMaterialConfiguration_customGeometryProperties];
  *(_QWORD *)&v1[OBJC_IVAR___SGMaterialConfiguration_customGeometryProperties] = MEMORY[0x24BEE4AF8];
  v8 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys();
  v9 = v3;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);

    swift_bridgeObjectRelease();
    type metadata accessor for SGMaterialConfiguration();
    swift_deallocPartialClassInstance();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SGGeometryPropertyDefinition]);
    lazy protocol witness table accessor for type [SGGeometryPropertyDefinition] and conformance <A> [A](&lazy protocol witness table cache variable for type [SGGeometryPropertyDefinition] and conformance <A> [A], &lazy protocol witness table cache variable for type SGGeometryPropertyDefinition and conformance SGGeometryPropertyDefinition, (uint64_t)&protocol conformance descriptor for SGGeometryPropertyDefinition, MEMORY[0x24BEE12D0]);
    v10 = v16;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v10);
    v12 = v19;
    v13 = v17;
    swift_beginAccess();
    *(_QWORD *)v13 = v12;

    swift_bridgeObjectRelease();
    v14 = (objc_class *)type metadata accessor for SGMaterialConfiguration();
    v18.receiver = v9;
    v18.super_class = v14;
    v8 = objc_msgSendSuper2(&v18, sel_init);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  return v8;
}

uint64_t SGMaterialConfiguration.isEqual(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  _QWORD *v8;
  _BYTE v9[24];
  uint64_t v10;

  swift_getObjectType();
  outlined init with copy of Any?(a1, (uint64_t)v9);
  if (!v10)
  {
    outlined destroy of Any?((uint64_t)v9);
    goto LABEL_6;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_6:
    v6 = 0;
    return v6 & 1;
  }
  if (v8 == v1)
  {

    v6 = 1;
  }
  else
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v4 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x58))();
    v5 = (*(uint64_t (**)(void))((*v3 & *v8) + 0x58))();
    v6 = specialized static Array<A>.== infix(_:_:)(v4, v5);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v6 & 1;
}

id SGMaterialConfiguration.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SGMaterialConfiguration();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SGMaterialConfiguration@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 120))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SGMaterialConfiguration()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x70))();
}

uint64_t specialized SGMaterialConfiguration.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000018 && a2 == 0x8000000245FCC860)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

unint64_t lazy protocol witness table accessor for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGMaterialConfiguration.CodingKeys, &type metadata for SGMaterialConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGMaterialConfiguration.CodingKeys, &type metadata for SGMaterialConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGMaterialConfiguration.CodingKeys, &type metadata for SGMaterialConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGMaterialConfiguration.CodingKeys, &type metadata for SGMaterialConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [SGGeometryPropertyDefinition] and conformance <A> [A](unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SGGeometryPropertyDefinition]);
    v10 = lazy protocol witness table accessor for type SGGeometryPropertyDefinition and conformance SGGeometryPropertyDefinition(a2, a3);
    result = MEMORY[0x24954C264](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type SGGeometryPropertyDefinition and conformance SGGeometryPropertyDefinition(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for SGGeometryPropertyDefinition();
    result = MEMORY[0x24954C264](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_245F3D3EC@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x58))();
  *a2 = result;
  return result;
}

uint64_t sub_245F3D42C(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x60);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t method lookup function for SGMaterialConfiguration()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SGMaterialConfiguration.customGeometryProperties.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x58))();
}

uint64_t dispatch thunk of SGMaterialConfiguration.customGeometryProperties.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of SGMaterialConfiguration.customGeometryProperties.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of SGMaterialConfiguration.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SGMaterialConfiguration.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t storeEnumTagSinglePayload for SGMaterialConfiguration.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_245F3D550 + 4 * asc_245FC2FE0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_245F3D570 + 4 * byte_245FC2FE5[v4]))();
}

_BYTE *sub_245F3D550(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_245F3D570(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_245F3D578(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_245F3D580(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_245F3D588(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_245F3D590(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SGMaterialConfiguration.CodingKeys()
{
  return &type metadata for SGMaterialConfiguration.CodingKeys;
}

uint64_t OrderedDictionary<>.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t TupleTypeMetadata2;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t i;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[24];
  uint64_t v49;
  uint64_t v50;

  v39 = a7;
  v40 = a8;
  v32 = a3;
  v33 = a4;
  v34 = a2;
  v37 = a9;
  v12 = *(_QWORD *)(a6 - 8);
  v13 = MEMORY[0x24BDAC7A8](a1);
  v38 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v20 = type metadata accessor for Optional();
  v42 = *(_QWORD *)(v20 - 8);
  v43 = v20;
  v21 = MEMORY[0x24BDAC7A8](v20);
  v41 = (char *)v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)v31 - v23;
  v25 = a1[3];
  v31[1] = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v25);
  dispatch thunk of Encoder.unkeyedContainer()();
  v44 = v34;
  v45 = v32;
  v46 = v33;
  v47 = 0;
  v40 = type metadata accessor for OrderedDictionary.Iterator(0, a5, a6, v40);
  swift_retain();
  swift_retain();
  swift_retain();
  v35 = v24;
  for (i = TupleTypeMetadata2; ; TupleTypeMetadata2 = i)
  {
    v26 = v41;
    OrderedDictionary.Iterator.next()(v40, v41);
    (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v24, v26, v43);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v24, 1, TupleTypeMetadata2) == 1)break;
    v27 = &v24[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v24, a5);
    v28 = v38;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v38, v27, a6);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v48, v49);
    v29 = v50;
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    if (v29)
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v28, a6);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, a5);
      break;
    }
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v48, v49);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v28, a6);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, a5);
    v50 = 0;
    v24 = v35;
  }
  swift_release();
  swift_release();
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v48);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> OrderedDictionary<A, B>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;

  return OrderedDictionary<>.encode(to:)(a1, *v3, v3[1], v3[2], a2[2], a2[3], *(_QWORD *)(a3 - 8), a2[4], *(_QWORD *)(a3 - 16));
}

uint64_t OrderedDictionary<>.init(from:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  Swift::String v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD v66[3];
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;

  v59 = a6;
  v60 = a4;
  v54 = a5;
  v52 = type metadata accessor for DecodingError.Context();
  v51 = *(_QWORD *)(v52 - 8);
  v9 = MEMORY[0x24BDAC7A8](v52);
  v50 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = a3;
  v11 = *(_QWORD *)(a3 - 8);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v48 - v16;
  v53 = a2;
  v18 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, *((_QWORD *)a1 + 3));
  v21 = v62;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v21)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    return (uint64_t)v14;
  }
  v62 = v17;
  v55 = v14;
  v56 = v11;
  v57 = v18;
  v58 = v20;
  v49 = a1;
  v22 = v53;
  v23 = v54;
  v14 = (char *)OrderedSet.init()();
  v25 = v24;
  static Array._allocateUninitialized(_:)();
  v26 = ContiguousArray.init(arrayLiteral:)();
  v68 = v14;
  v69 = v25;
  v70 = v26;
  __swift_project_boxed_opaque_existential_1(v66, v67);
  if ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) != 0)
  {
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v66);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v49);
    return (uint64_t)v14;
  }
  while (1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v66, v67);
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    swift_retain();
    swift_retain();
    OrderedSet._find(_:)();
    v29 = v28;
    v31 = v30;
    swift_release();
    swift_release();
    __swift_project_boxed_opaque_existential_1(v66, v67);
    if ((v29 & 1) == 0)
      break;
    if ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) != 0)
    {
      v45 = type metadata accessor for DecodingError();
      swift_allocError();
      v47 = v46;
      __swift_project_boxed_opaque_existential_1(v66, v67);
      dispatch thunk of UnkeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v45 - 8) + 104))(v47, *MEMORY[0x24BEE26D8], v45);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v22);
      v14 = v49;
      goto LABEL_13;
    }
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v66, v67);
    v32 = v61;
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    v33 = v57;
    type metadata accessor for OrderedSet(0, v22, v23, v34);
    v35 = (uint64_t)v58;
    OrderedSet._appendNew(_:in:)((uint64_t)v58, v31);
    v36 = v56;
    (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v55, v62, v32);
    type metadata accessor for ContiguousArray();
    v37 = v62;
    ContiguousArray.append(_:)();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v32);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v35, v22);
    __swift_project_boxed_opaque_existential_1(v66, v67);
    if ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) != 0)
    {
      v14 = v68;
      goto LABEL_4;
    }
  }
  dispatch thunk of UnkeyedDecodingContainer.codingPath.getter();
  v64 = 0;
  v65 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  v64 = 0xD000000000000018;
  v65 = 0x8000000245FCC8E0;
  __swift_project_boxed_opaque_existential_1(v66, v67);
  result = dispatch thunk of UnkeyedDecodingContainer.currentIndex.getter();
  v14 = v49;
  if (!__OFSUB__(result, 1))
  {
    v63 = result - 1;
    v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    v39 = v50;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    v40 = type metadata accessor for DecodingError();
    swift_allocError();
    v42 = v41;
    v43 = v51;
    v44 = v52;
    (*(void (**)(uint64_t, char *, uint64_t))(v51 + 16))(v41, v39, v52);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v40 - 8) + 104))(v42, *MEMORY[0x24BEE26D8], v40);
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v39, v44);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v22);
LABEL_13:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v66);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v14);
    swift_release();
    swift_release();
    swift_release();
    return (uint64_t)v14;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> OrderedDictionary<A, B>@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = OrderedDictionary<>.init(from:)(a1, a2[2], a2[3], *(_QWORD *)(a3 - 8), a2[4], *(_QWORD *)(a3 - 16));
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
  }
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

Swift::Void __swiftcall OrderedDictionary.swapAt(_:_:)(Swift::Int a1, Swift::Int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;

  type metadata accessor for OrderedSet(0, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 32), v3);
  OrderedSet.swapAt(_:_:)(a1, a2);
  v6 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A40], v6);
  MutableCollection.swapAt(_:_:)();
}

_QWORD *OrderedDictionary.partition(by:)(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14[2];
  uint64_t v15;

  v8 = a3[3];
  type metadata accessor for ContiguousArray();
  ContiguousArray._makeMutableAndUnique()();
  v9 = *(_QWORD *)(v3 + 16);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80);
  v12 = v9 + ((v11 + 32) & ~v11);
  v14[0] = v12;
  v14[1] = v10;
  closure #1 in OrderedDictionary.partition(by:)(v14, a1, a2, a3[2], v8, a3[4], &v15);
  if (v4)
    return $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v14, v12, v10);
  $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v14, v12, v10);
  return (_QWORD *)v15;
}

uint64_t OrderedDictionary.sort(by:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  swift_retain();
  swift_retain();
  swift_retain();
  MEMORY[0x24954C264](&protocol conformance descriptor for OrderedDictionary<A, B>, a3);
  v5 = Sequence.sorted(by:)();
  swift_release();
  swift_release();
  result = swift_release();
  if (!v3)
  {
    swift_getTupleTypeMetadata2();
    v8 = MEMORY[0x24954B250](v5);
    swift_retain();
    swift_retain();
    swift_retain();
    v7 = ContiguousArray.count.getter();
    swift_release();
    swift_release();
    result = swift_release();
    if (v8 == v7)
    {
      MEMORY[0x24BDAC7A8](result);
      Array.withUnsafeBufferPointer<A>(_:)();
      return swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t OrderedDictionary<>.sort()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _OWORD v4[2];
  uint64_t v5;
  uint64_t v6;

  v4[1] = *(_OWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 32);
  v5 = a2;
  v6 = v2;
  return OrderedDictionary.sort(by:)((uint64_t)partial apply for closure #1 in OrderedDictionary<>.sort(), (uint64_t)v4, a1);
}

Swift::Void __swiftcall OrderedDictionary.shuffle()()
{
  _QWORD *v0;

  OrderedDictionary.shuffle<A>(using:)((uint64_t)v0, v0);
}

uint64_t OrderedDictionary.shuffle<A>(using:)(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = v2[2];
  v5 = a2[3];
  result = ContiguousArray.count.getter();
  if (result >= 2)
  {
    v7 = a2[2];
    v8 = v2;
    v9 = a2[4];
    v33 = v4;
    v34 = OrderedSet.elements.getter();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_getTupleTypeMetadata2();
    v10 = static Array._allocateUninitialized(_:)();
    specialized OrderedDictionary.init(dictionaryLiteral:)(v10, v7, v5, v9);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    v11 = MEMORY[0x24954B250](v34, v7);
    swift_bridgeObjectRelease();
    if (v11 >= 2)
    {
      lazy protocol witness table accessor for type Int and conformance Int();
      v12 = 0;
      while (1)
      {
        v31[1] = v11;
        result = static FixedWidthInteger.random<A>(in:using:)();
        v31[0] = v12;
        if (__OFADD__(v12, v32))
          break;
        --v11;
        v13 = type metadata accessor for Array();
        MEMORY[0x24954C264](MEMORY[0x24BEE12B8], v13);
        MutableCollection.swapAt(_:_:)();
        v31[0] = v12;
        v32 += v12;
        v14 = type metadata accessor for ContiguousArray();
        MEMORY[0x24954C264](MEMORY[0x24BEE2A40], v14);
        MutableCollection.swapAt(_:_:)();
        ++v12;
        if (v11 == 1)
        {
          v4 = v33;
          goto LABEL_7;
        }
      }
      __break(1u);
      goto LABEL_13;
    }
LABEL_7:
    v15 = v8;
    v16 = type metadata accessor for Array();
    swift_bridgeObjectRetain_n();
    MEMORY[0x24954C264](MEMORY[0x24BEE12C8], v16);
    v17 = Array.init<A>(_:)();
    v31[0] = v17;
    v18 = specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)();
    v19 = type metadata accessor for ContiguousArray();
    v20 = MEMORY[0x24954C264](MEMORY[0x24BEE2A58], v19);
    v21 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)((uint64_t)v31, 0, 1, v18, v19, v20, v9);
    v22 = ContiguousArray.count.getter();
    v23 = 0;
    if (v22 >= 16)
    {
      swift_retain();
      v23 = v21;
    }
    v24 = OrderedSet.init(_uniqueElements:_:)(v17, v23);
    v26 = v25;
    swift_bridgeObjectRelease();
    swift_release();
    v31[0] = v4;
    v27 = type metadata accessor for ContiguousArray();
    swift_retain();
    swift_retain();
    swift_retain();
    MEMORY[0x24954C264](MEMORY[0x24BEE2A48], v27);
    v28 = Array.init<A>(_:)();
    v29 = ContiguousArray.count.getter();
    v30 = ContiguousArray.count.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    if (v29 != v30)
    {
LABEL_13:
      __break(1u);
      return result;
    }
    *v15 = v24;
    v15[1] = v26;
    v15[2] = v28;
  }
  return result;
}

Swift::Void __swiftcall OrderedDictionary.reverse()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for OrderedSet(0, *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 32), v1);
  OrderedSet.reverse()();
  v2 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A38], v2);
  MEMORY[0x24954C264](MEMORY[0x24BEE2A40], v2);
  MutableCollection<>.reverse()();
}

uint64_t closure #1 in OrderedDictionary.partition(by:)@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(char *, char *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v12 = *a1;
  v13 = a1[1];
  v14 = type metadata accessor for OrderedSet(0, a4, a6, a3);
  result = OrderedSet._partition<A>(values:by:)(v12, v13, a2, a3, v14, a5);
  if (!v7)
    *a7 = result;
  return result;
}

uint64_t closure #1 in OrderedDictionary.sort(by:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  __int128 v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  *((_QWORD *)&v28 + 1) = a2;
  *(_QWORD *)&v28 = a1;
  *(_QWORD *)&v33 = a1;
  *((_QWORD *)&v33 + 1) = a2;
  swift_getTupleTypeMetadata2();
  v9 = type metadata accessor for UnsafeBufferPointer();
  v10 = MEMORY[0x24954C264](MEMORY[0x24BEE09D8], v9);
  MEMORY[0x24954B148](&v30, v9, v10);
  v32 = v30;
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = a4;
  v11[3] = a5;
  v11[4] = a6;
  v12 = type metadata accessor for LazySequence();
  MEMORY[0x24954C264](MEMORY[0x24BEE25B0], v12);
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  v30 = v33;
  v31 = v34;
  v13 = type metadata accessor for LazyMapSequence();
  swift_retain();
  MEMORY[0x24954C264](MEMORY[0x24BEE2B40], v13);
  v14 = Array.init<A>(_:)();
  *(_QWORD *)&v30 = v14;
  v15 = specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)();
  v16 = type metadata accessor for ContiguousArray();
  v17 = MEMORY[0x24954C264](MEMORY[0x24BEE2A58], v16);
  v18 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)((uint64_t)&v30, 0, 1, v15, v16, v17, a6);
  v19 = ContiguousArray.count.getter();
  v20 = 0;
  if (v19 >= 16)
  {
    swift_retain();
    v20 = v18;
  }
  v21 = OrderedSet.init(_uniqueElements:_:)(v14, v20);
  v23 = v22;
  swift_release();
  swift_release();
  *a3 = v21;
  a3[1] = v23;
  swift_release();
  swift_release();
  v33 = v28;
  MEMORY[0x24954B148](&v30, v9, v10);
  v32 = v30;
  v24 = (_QWORD *)swift_allocObject();
  v24[2] = a4;
  v24[3] = a5;
  v24[4] = a6;
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  v30 = v33;
  v31 = v34;
  v25 = type metadata accessor for LazyMapSequence();
  MEMORY[0x24954C264](MEMORY[0x24BEE2B40], v25);
  a3[2] = Array.init<A>(_:)();
  return swift_release();
}

uint64_t closure #1 in closure #1 in OrderedDictionary.sort(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v11 = (char *)&v18 - v10;
  v12 = *(int *)(v9 + 48);
  v13 = &v11[v12];
  v14 = a1 + v12;
  v15 = *(_QWORD *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v11, a1, a2);
  v16 = *(_QWORD *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v13, v14, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a4, v11, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v13, a3);
}

uint64_t closure #2 in closure #1 in OrderedDictionary.sort(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v11 = (char *)&v18 - v10;
  v12 = *(int *)(v9 + 48);
  v13 = &v11[v12];
  v14 = a1 + v12;
  v15 = *(_QWORD *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v11, a1, a2);
  v16 = *(_QWORD *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v13, v14, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a4, v13, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v11, a2);
}

uint64_t closure #1 in OrderedDictionary<>.sort()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, uint64_t, uint64_t);
  void (*v20)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = a4;
  v25 = a7;
  v23 = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v12 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v13 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v22 - v16;
  v18 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16);
  v18((char *)&v22 - v16, a1, a5);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 16);
  v19(&v17[*(int *)(TupleTypeMetadata2 + 48)], a2, a6);
  v18(v15, v23, a5);
  v19(&v15[*(int *)(TupleTypeMetadata2 + 48)], v24, a6);
  LOBYTE(a5) = dispatch thunk of static Comparable.< infix(_:_:)();
  v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  v20(v15, TupleTypeMetadata2);
  v20(v17, TupleTypeMetadata2);
  return a5 & 1;
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed A, @in_guaranteed B, @in_guaranteed A, @in_guaranteed B) -> (@unowned Bool, @error @owned Error)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 40);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v5(a1, a1 + *(int *)(TupleTypeMetadata2 + 48), a2, a2 + *(int *)(TupleTypeMetadata2 + 48)) & 1;
}

uint64_t partial apply for closure #1 in OrderedDictionary.sort(by:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in OrderedDictionary.sort(by:)(a1, a2, *(uint64_t **)(v2 + 40), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t partial apply for closure #1 in OrderedDictionary<>.sort()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return closure #1 in OrderedDictionary<>.sort()(a1, a2, a3, a4, v4[2], v4[3], v4[4]) & 1;
}

uint64_t sub_245F3EEE4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in OrderedDictionary.sort(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in closure #1 in OrderedDictionary.sort(by:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_245F3EF00()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in OrderedDictionary.sort(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #2 in closure #1 in OrderedDictionary.sort(by:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay11ShaderGraph14FunctionNodeIDVGG_SSs5NeverOTg506_sSi11f7Graph14hi36IDVSSIgyyo_Si6offset_AC7elementtSSs5K194OIegnrzr_TR04_s11a41Graph13createDotText12representing12inputd43IDs06outputhI0SSAA05MetalA7ProgramC_SayAA08c29H2IDVGAJtKF0cH10StatementsL_yS42SSGSayAA0kmH0_pGFSSAaM_pXEfU_SSSi_AItXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v11 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v2 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v2)
  {
    v3 = 0;
    do
    {
      v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      v5._countAndFlagsBits = 2367550;
      v5._object = (void *)0xE300000000000000;
      String.append(_:)(v5);
      v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      ++v3;
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = 1735549244;
      *(_QWORD *)(v9 + 40) = 0xE400000000000000;
    }
    while (v2 != v3);
  }
  swift_bridgeObjectRelease();
  return v11;
}

void createDotText(representing:)(uint64_t a1)
{
  uint64_t v1;
  int64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _OWORD *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _OWORD *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  int64_t v109;
  _QWORD *v110;
  int64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v115;
  BOOL v116;
  uint64_t v117;
  _OWORD *v118;
  uint64_t v119;
  int64_t v120;
  int64_t v121;
  _QWORD *v122;
  uint64_t v123;
  _QWORD *v124;
  int64_t v125;
  uint64_t v126;
  unint64_t v127;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  unint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int64_t v145;
  int64_t v146;
  uint64_t v147;
  int64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int64_t v157;
  int64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  _QWORD *v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int64_t v177;
  int64_t v178;
  uint64_t isUniquelyReferenced_nonNull_native;
  int64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  void *v209;
  Swift::String v210;
  Swift::String v211;
  Swift::String v212;
  int64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _OWORD *v218;
  _QWORD *v219;
  _OWORD *v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  unint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  _OWORD *v231;
  _QWORD *v232;
  unint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  _OWORD *v241;
  _OWORD *v242;
  uint64_t v243;
  _QWORD *v244;
  void *v245;
  uint64_t v246;
  _OWORD *v247;
  __int128 v248;
  uint64_t v249;
  uint64_t v250;
  char v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  _OWORD v261[2];
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  _OWORD v271[2];
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  _OWORD v281[2];
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  _OWORD v291[2];
  uint64_t v292;
  _OWORD v293[9];
  _OWORD v294[3];
  uint64_t v295;

  v1 = *(_QWORD *)(a1 + 64);
  v292 = v1;
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
  {
LABEL_5:
    lazy protocol witness table accessor for type DotError and conformance DotError();
    v7 = (void *)swift_allocError();
    swift_willThrow();
    goto LABEL_6;
  }
  v4 = (uint64_t *)(v1 + 56);
  v5 = *(_QWORD *)(v1 + 16);
  while (1)
  {
    v6 = *v4;
    v4 += 6;
    if (v6 != -7)
      break;
    if (!--v5)
      goto LABEL_5;
  }
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Graph>);
  v10 = (_OWORD *)swift_allocObject();
  v11 = *(_OWORD *)(a1 + 128);
  v12 = *(_OWORD *)(a1 + 144);
  v13 = *(_OWORD *)(a1 + 96);
  v10[9] = *(_OWORD *)(a1 + 112);
  v10[10] = v11;
  v10[11] = v12;
  *(_OWORD *)((char *)v10 + 185) = *(_OWORD *)(a1 + 153);
  v14 = *(_OWORD *)(a1 + 64);
  v15 = *(_OWORD *)(a1 + 80);
  v16 = *(_OWORD *)(a1 + 32);
  v10[5] = *(_OWORD *)(a1 + 48);
  v10[6] = v14;
  v10[7] = v15;
  v10[8] = v13;
  v17 = *(_OWORD *)a1;
  v18 = *(_OWORD *)(a1 + 16);
  v10[1] = xmmword_245FBECD0;
  v10[2] = v17;
  v10[3] = v18;
  v10[4] = v16;
  swift_bridgeObjectRetain();
  outlined retain of [Input]((uint64_t)&v292);
  outlined retain of Graph(a1);
  v19 = 0;
  v20 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v21 = v1 + 56;
  v22 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v23 = (_QWORD *)(v21 + 48 * v19);
    while (1)
    {
      if (v19 >= v2)
      {
        __break(1u);
LABEL_183:
        __break(1u);
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
LABEL_193:
        __break(1u);
LABEL_194:
        __break(1u);
LABEL_195:
        __break(1u);
LABEL_196:
        __break(1u);
LABEL_197:
        __break(1u);
LABEL_198:
        __break(1u);
LABEL_199:
        __break(1u);
LABEL_200:
        __break(1u);
LABEL_201:
        __break(1u);
LABEL_202:
        __break(1u);
        goto LABEL_203;
      }
      if (*v23 != -7)
        break;
      v24 = v19 + 1;
      if (__OFADD__(v19, 1))
        goto LABEL_183;
      ++v19;
      v23 += 6;
      if (v24 >= v2)
        goto LABEL_173;
    }
    v25 = *(v23 - 3);
    v295 = v21;
    if (v25 >> 61 == 6)
      break;
    v173 = v20;
    v174 = v9;
LABEL_154:
    v176 = v173[2];
    v177 = v22[2];
    v178 = v177 + v176;
    if (__OFADD__(v177, v176))
      goto LABEL_188;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0 || v178 > v22[3] >> 1)
    {
      if (v177 <= v178)
        v180 = v177 + v176;
      else
        v180 = v177;
      v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)isUniquelyReferenced_nonNull_native, v180, 1, v22);
    }
    v21 = v295;
    v9 = v174;
    if (v173[2])
    {
      v181 = v22[2];
      if ((v22[3] >> 1) - v181 < v176)
        goto LABEL_192;
      v182 = (unint64_t)&v22[22 * v181 + 4];
      if ((unint64_t)(v173 + 4) < v182 + 176 * v176 && v182 < (unint64_t)&v173[22 * v176 + 4])
        goto LABEL_215;
      v20 = (_QWORD *)MEMORY[0x24BEE4AF8];
      swift_arrayInitWithCopy();
      if (v176)
      {
        v184 = v22[2];
        v116 = __OFADD__(v184, v176);
        v185 = v184 + v176;
        if (v116)
          goto LABEL_193;
        v22[2] = v185;
      }
    }
    else
    {
      v20 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (v176)
        goto LABEL_189;
    }
    ++v19;
    swift_bridgeObjectRelease();
    if ((uint64_t)v19 >= v2)
    {
LABEL_173:
      outlined release of [Input]((uint64_t)&v292);
      outlined release of [Input]((uint64_t)&v292);
      *(_QWORD *)&v282 = v10;
      specialized Array.append<A>(contentsOf:)((uint64_t)v22);
      v186 = v282;
      *(_QWORD *)&v282 = v20;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
      v187 = v282;
      v295 = *(_QWORD *)(v186 + 16);
      if (!v295)
      {
LABEL_181:
        swift_bridgeObjectRelease();
        *(_QWORD *)&v282 = v187;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String], MEMORY[0x24BEE12B0]);
        v207 = BidirectionalCollection<>.joined(separator:)();
        v209 = v208;
        swift_release();
        *(_QWORD *)&v282 = 0;
        *((_QWORD *)&v282 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(136);
        v210._object = (void *)0x8000000245FCC900;
        v210._countAndFlagsBits = 0xD000000000000083;
        String.append(_:)(v210);
        v211._countAndFlagsBits = v207;
        v211._object = v209;
        String.append(_:)(v211);
        swift_bridgeObjectRelease();
        v212._countAndFlagsBits = 8194570;
        v212._object = (void *)0xE300000000000000;
        String.append(_:)(v212);
        return;
      }
      swift_bridgeObjectRetain();
      v188 = 0;
      v189 = 32;
      v190 = v245;
      while (1)
      {
        v191 = *(_OWORD *)(v186 + v189);
        v192 = *(_OWORD *)(v186 + v189 + 32);
        v293[1] = *(_OWORD *)(v186 + v189 + 16);
        v293[2] = v192;
        v293[0] = v191;
        v193 = *(_OWORD *)(v186 + v189 + 48);
        v194 = *(_OWORD *)(v186 + v189 + 64);
        v195 = *(_OWORD *)(v186 + v189 + 96);
        v293[5] = *(_OWORD *)(v186 + v189 + 80);
        v293[6] = v195;
        v293[3] = v193;
        v293[4] = v194;
        v196 = *(_OWORD *)(v186 + v189 + 112);
        v197 = *(_OWORD *)(v186 + v189 + 128);
        v198 = *(_OWORD *)(v186 + v189 + 144);
        *(_OWORD *)((char *)v294 + 9) = *(_OWORD *)(v186 + v189 + 153);
        v293[8] = v197;
        v294[0] = v198;
        v293[7] = v196;
        outlined retain of Graph((uint64_t)v293);
        v199 = graphDotText(representing:index:)((uint64_t)v293, v188);
        if (v190)
          break;
        v201 = v199;
        v202 = v200;
        v203 = v186;
        outlined release of Graph((uint64_t)v293);
        *(_QWORD *)&v282 = v187;
        v205 = *(_QWORD *)(v187 + 16);
        v204 = *(_QWORD *)(v187 + 24);
        if (v205 >= v204 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v204 > 1, v205 + 1, 1);
          v190 = 0;
          v187 = v282;
        }
        ++v188;
        *(_QWORD *)(v187 + 16) = v205 + 1;
        v206 = v187 + 16 * v205;
        *(_QWORD *)(v206 + 32) = v201;
        *(_QWORD *)(v206 + 40) = v202;
        v189 += 176;
        v186 = v203;
        if (v295 == v188)
        {
          swift_bridgeObjectRelease();
          goto LABEL_181;
        }
      }
      outlined release of Graph((uint64_t)v293);
      swift_release();
      swift_bridgeObjectRelease_n();
      v7 = v190;
LABEL_6:
      type metadata accessor for SGError();
      v8 = v7;
      SGError.__allocating_init(_:)(v7);
      swift_willThrow();

      return;
    }
  }
  v244 = v22;
  v26 = *(_OWORD *)(v25 + 144);
  v289 = *(_OWORD *)(v25 + 128);
  v290 = v26;
  v291[0] = *(_OWORD *)(v25 + 160);
  *(_OWORD *)((char *)v291 + 9) = *(_OWORD *)(v25 + 169);
  v27 = *(_OWORD *)(v25 + 80);
  v285 = *(_OWORD *)(v25 + 64);
  v286 = v27;
  v28 = *(_OWORD *)(v25 + 112);
  v287 = *(_OWORD *)(v25 + 96);
  v288 = v28;
  v29 = *(_OWORD *)(v25 + 32);
  v282 = *(_OWORD *)(v25 + 16);
  v283 = v29;
  v284 = *(_OWORD *)(v25 + 48);
  v243 = v9;
  v30 = (_OWORD *)swift_allocObject();
  v31 = v286;
  v32 = v288;
  v33 = v289;
  v30[7] = v287;
  v30[8] = v32;
  v34 = v284;
  v30[5] = v285;
  v30[6] = v31;
  *(_OWORD *)((char *)v30 + 185) = *(_OWORD *)((char *)v291 + 9);
  v35 = v291[0];
  v30[10] = v290;
  v30[11] = v35;
  v30[9] = v33;
  v36 = v282;
  v37 = v283;
  v30[1] = xmmword_245FBECD0;
  v30[2] = v36;
  v30[3] = v37;
  v30[4] = v34;
  v242 = v30;
  v38 = v286;
  v39 = *(_QWORD *)(v286 + 16);
  if (!v39)
  {
    outlined retain of Graph((uint64_t)&v282);
    outlined retain of Graph((uint64_t)&v282);
    outlined copy of NodePersonality(v25);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v172 = v25;
LABEL_153:
    *(_QWORD *)&v272 = v242;
    swift_bridgeObjectRetain();
    v175 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v175);
    outlined release of Graph((uint64_t)&v282);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v172);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v173 = (_QWORD *)v272;
    v174 = v243;
    goto LABEL_154;
  }
  v241 = v10;
  outlined retain of Graph((uint64_t)&v282);
  swift_bridgeObjectRetain();
  outlined retain of Graph((uint64_t)&v282);
  swift_bridgeObjectRetain();
  v240 = v25;
  outlined copy of NodePersonality(v25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v40 = 0;
  v41 = v38 + 56;
  v42 = v20;
  while (1)
  {
    v43 = (_QWORD *)(v41 + 48 * v40);
    while (1)
    {
      if (v40 >= v39)
        goto LABEL_184;
      if (*v43 != -7)
        break;
      v44 = v40 + 1;
      if (__OFADD__(v40, 1))
        goto LABEL_185;
      ++v40;
      v43 += 6;
      if (v44 >= (uint64_t)v39)
        goto LABEL_150;
    }
    v45 = *(v43 - 3);
    v237 = v41;
    v238 = v38;
    v239 = v39;
    if (v45 >> 61 == 6)
      break;
    v154 = MEMORY[0x24BEE4AF8];
LABEL_131:
    v156 = *(_QWORD *)(v154 + 16);
    v157 = v42[2];
    v158 = v157 + v156;
    if (__OFADD__(v157, v156))
      goto LABEL_194;
    v159 = v154;
    v160 = v42;
    v161 = swift_isUniquelyReferenced_nonNull_native();
    v162 = v160;
    if ((v161 & 1) == 0 || v158 > v160[3] >> 1)
    {
      if (v157 <= v158)
        v163 = v157 + v156;
      else
        v163 = v157;
      v162 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)v161, v163, 1, v160);
    }
    v22 = v244;
    v164 = v159;
    v165 = *(_QWORD *)(v159 + 16);
    v39 = v239;
    if (v165)
    {
      v166 = v162[2];
      if ((v162[3] >> 1) - v166 < v156)
        goto LABEL_198;
      v167 = (unint64_t)&v162[22 * v166 + 4];
      if (v164 + 32 < v167 + 176 * v156 && v167 < v164 + 32 + 176 * v156)
        goto LABEL_215;
      v169 = v162;
      swift_arrayInitWithCopy();
      if (v156)
      {
        v170 = v169[2];
        v116 = __OFADD__(v170, v156);
        v171 = v170 + v156;
        if (v116)
          goto LABEL_199;
        v169[2] = v171;
      }
    }
    else
    {
      v169 = v162;
      if (v156)
        goto LABEL_195;
    }
    ++v40;
    swift_bridgeObjectRelease();
    v42 = v169;
    v41 = v237;
    v38 = v238;
    if ((uint64_t)v40 >= v239)
    {
LABEL_150:
      swift_bridgeObjectRelease_n();
      v172 = v240;
      v10 = v241;
      goto LABEL_153;
    }
  }
  v232 = v42;
  v46 = *(_OWORD *)(v45 + 144);
  v279 = *(_OWORD *)(v45 + 128);
  v280 = v46;
  v281[0] = *(_OWORD *)(v45 + 160);
  *(_OWORD *)((char *)v281 + 9) = *(_OWORD *)(v45 + 169);
  v47 = *(_OWORD *)(v45 + 80);
  v275 = *(_OWORD *)(v45 + 64);
  v276 = v47;
  v48 = *(_OWORD *)(v45 + 112);
  v277 = *(_OWORD *)(v45 + 96);
  v278 = v48;
  v49 = *(_OWORD *)(v45 + 32);
  v272 = *(_OWORD *)(v45 + 16);
  v273 = v49;
  v274 = *(_OWORD *)(v45 + 48);
  v50 = (_OWORD *)swift_allocObject();
  v51 = v276;
  v52 = v278;
  v53 = v279;
  v50[7] = v277;
  v50[8] = v52;
  v54 = v274;
  v50[5] = v275;
  v50[6] = v51;
  *(_OWORD *)((char *)v50 + 185) = *(_OWORD *)((char *)v281 + 9);
  v55 = v281[0];
  v50[10] = v280;
  v50[11] = v55;
  v50[9] = v53;
  v56 = v272;
  v57 = v273;
  v50[1] = xmmword_245FBECD0;
  v50[2] = v56;
  v50[3] = v57;
  v50[4] = v54;
  v231 = v50;
  v58 = v276;
  if (!*(_QWORD *)(v276 + 16))
  {
    outlined retain of Graph((uint64_t)&v272);
    outlined retain of Graph((uint64_t)&v272);
    outlined copy of NodePersonality(v45);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_130:
    *(_QWORD *)&v262 = v231;
    swift_bridgeObjectRetain();
    v155 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v155);
    outlined release of Graph((uint64_t)&v272);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v45);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v154 = v262;
    v42 = v232;
    goto LABEL_131;
  }
  v230 = *(_QWORD *)(v276 + 16);
  outlined retain of Graph((uint64_t)&v272);
  swift_bridgeObjectRetain();
  outlined retain of Graph((uint64_t)&v272);
  swift_bridgeObjectRetain();
  v229 = v45;
  outlined copy of NodePersonality(v45);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v59 = v230;
  v60 = 0;
  v61 = v58 + 56;
  v62 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v63 = (_QWORD *)(v61 + 48 * v60);
    while (1)
    {
      if (v60 >= v59)
        goto LABEL_186;
      if (*v63 != -7)
        break;
      v64 = v60 + 1;
      if (__OFADD__(v60, 1))
        goto LABEL_187;
      ++v60;
      v63 += 6;
      if (v64 >= (uint64_t)v59)
        goto LABEL_127;
    }
    v65 = *(v63 - 3);
    v227 = v61;
    v228 = v58;
    if (v65 >> 61 == 6)
      break;
    v133 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_108:
    v236 = v133;
    v144 = v133[2];
    v145 = v62[2];
    v146 = v145 + v144;
    if (__OFADD__(v145, v144))
      goto LABEL_200;
    v147 = swift_isUniquelyReferenced_nonNull_native();
    if ((v147 & 1) == 0 || v146 > v62[3] >> 1)
    {
      if (v145 <= v146)
        v148 = v145 + v144;
      else
        v148 = v145;
      v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)v147, v148, 1, v62);
    }
    v58 = v228;
    if (v236[2])
    {
      v149 = v62[2];
      if ((v62[3] >> 1) - v149 < v144)
        goto LABEL_202;
      v150 = (unint64_t)&v62[22 * v149 + 4];
      if ((unint64_t)(v236 + 4) < v150 + 176 * v144 && v150 < (unint64_t)&v236[22 * v144 + 4])
        goto LABEL_215;
      swift_arrayInitWithCopy();
      if (v144)
      {
        v152 = v62[2];
        v116 = __OFADD__(v152, v144);
        v153 = v152 + v144;
        if (v116)
          goto LABEL_204;
        v62[2] = v153;
      }
    }
    else if (v144)
    {
      goto LABEL_201;
    }
    ++v60;
    swift_bridgeObjectRelease();
    v59 = v230;
    v61 = v227;
    if ((uint64_t)v60 >= v230)
    {
LABEL_127:
      swift_bridgeObjectRelease_n();
      v45 = v229;
      goto LABEL_130;
    }
  }
  v66 = *(_OWORD *)(v65 + 144);
  v269 = *(_OWORD *)(v65 + 128);
  v270 = v66;
  v271[0] = *(_OWORD *)(v65 + 160);
  *(_OWORD *)((char *)v271 + 9) = *(_OWORD *)(v65 + 169);
  v67 = *(_OWORD *)(v65 + 80);
  v265 = *(_OWORD *)(v65 + 64);
  v266 = v67;
  v68 = *(_OWORD *)(v65 + 112);
  v267 = *(_OWORD *)(v65 + 96);
  v268 = v68;
  v69 = *(_OWORD *)(v65 + 32);
  v262 = *(_OWORD *)(v65 + 16);
  v263 = v69;
  v264 = *(_OWORD *)(v65 + 48);
  v70 = (_OWORD *)swift_allocObject();
  v71 = v266;
  v72 = v268;
  v73 = v269;
  v70[7] = v267;
  v70[8] = v72;
  v74 = v264;
  v70[5] = v265;
  v70[6] = v71;
  *(_OWORD *)((char *)v70 + 185) = *(_OWORD *)((char *)v271 + 9);
  v75 = v271[0];
  v70[10] = v270;
  v70[11] = v75;
  v70[9] = v73;
  v76 = v262;
  v77 = v263;
  v70[1] = xmmword_245FBECD0;
  v70[2] = v76;
  v70[3] = v77;
  v70[4] = v74;
  v226 = v70;
  v78 = v266;
  v225 = v65;
  if (!*(_QWORD *)(v266 + 16))
  {
    outlined retain of Graph((uint64_t)&v262);
    outlined retain of Graph((uint64_t)&v262);
    outlined copy of NodePersonality(v65);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v135 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_95;
  }
  v223 = v62;
  v224 = *(_QWORD *)(v266 + 16);
  outlined retain of Graph((uint64_t)&v262);
  swift_bridgeObjectRetain();
  outlined retain of Graph((uint64_t)&v262);
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v65);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v79 = v224;
  v80 = 0;
  v81 = v78 + 56;
  v82 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_35:
  v83 = (_QWORD *)(v81 + 48 * v80);
  v84 = v226;
  do
  {
    if (v80 >= v79)
      goto LABEL_190;
    if (*v83 != -7)
    {
      v86 = *(v83 - 3);
      v221 = v81;
      v222 = v78;
      if (v86 >> 61 == 6)
      {
        v219 = v82;
        v87 = *(_OWORD *)(v86 + 144);
        v259 = *(_OWORD *)(v86 + 128);
        v260 = v87;
        v261[0] = *(_OWORD *)(v86 + 160);
        *(_OWORD *)((char *)v261 + 9) = *(_OWORD *)(v86 + 169);
        v88 = *(_OWORD *)(v86 + 80);
        v255 = *(_OWORD *)(v86 + 64);
        v256 = v88;
        v89 = *(_OWORD *)(v86 + 112);
        v257 = *(_OWORD *)(v86 + 96);
        v258 = v89;
        v90 = *(_OWORD *)(v86 + 32);
        v252 = *(_OWORD *)(v86 + 16);
        v253 = v90;
        v254 = *(_OWORD *)(v86 + 48);
        v233 = v86;
        v91 = (_OWORD *)swift_allocObject();
        v92 = v258;
        v91[7] = v257;
        v91[8] = v92;
        v93 = v256;
        v91[5] = v255;
        v91[6] = v93;
        *(_OWORD *)((char *)v91 + 185) = *(_OWORD *)((char *)v261 + 9);
        v94 = v261[0];
        v95 = v259;
        v91[10] = v260;
        v91[11] = v94;
        v91[9] = v95;
        v96 = v252;
        v97 = v253;
        v98 = v254;
        v91[1] = xmmword_245FBECD0;
        v91[2] = v96;
        v91[3] = v97;
        v91[4] = v98;
        v218 = v91;
        v99 = v256;
        if (*(_QWORD *)(v256 + 16))
        {
          v216 = *(_QWORD *)(v256 + 16);
          outlined retain of Graph((uint64_t)&v252);
          swift_bridgeObjectRetain();
          outlined retain of Graph((uint64_t)&v252);
          swift_bridgeObjectRetain();
          outlined copy of NodePersonality(v233);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v100 = v216;
          v101 = 0;
          v102 = (_QWORD *)MEMORY[0x24BEE4AF8];
          while (2)
          {
            v103 = 48 * v101;
            while (1)
            {
              if (v101 >= v100)
                goto LABEL_196;
              v104 = v99 + v103;
              v105 = *(_QWORD *)(v99 + v103 + 56);
              if (v105 != -7)
                break;
              v106 = v101 + 1;
              if (__OFADD__(v101, 1))
                goto LABEL_197;
              ++v101;
              v103 += 48;
              if (v106 >= (uint64_t)v100)
                goto LABEL_69;
            }
            v214 = v99;
            v107 = *(_BYTE *)(v104 + 72);
            v108 = *(_QWORD *)(v104 + 64);
            v247 = *(_OWORD **)(v104 + 32);
            v248 = *(_OWORD *)(v104 + 40);
            v249 = v105;
            v250 = v108;
            v251 = v107;
            closure #1 in Graph.subgraphs()(&v247, &v246);
            v215 = v246;
            v217 = *(_QWORD *)(v246 + 16);
            v213 = v102[2];
            v109 = v213 + v217;
            if (__OFADD__(v213, v217))
              goto LABEL_211;
            v110 = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
            if (!(_DWORD)v110 || v109 > v102[3] >> 1)
            {
              if (v213 <= v109)
                v111 = v213 + v217;
              else
                v111 = v213;
              v102 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v110, v111, 1, v102);
            }
            v99 = v214;
            if (*(_QWORD *)(v215 + 16))
            {
              v112 = v102[2];
              if ((v102[3] >> 1) - v112 < v217)
                goto LABEL_213;
              v113 = (unint64_t)&v102[22 * v112 + 4];
              if (v215 + 32 < v113 + 176 * v217 && v113 < v215 + 32 + 176 * v217)
                goto LABEL_215;
              swift_arrayInitWithCopy();
              if (v217)
              {
                v115 = v102[2];
                v116 = __OFADD__(v115, v217);
                v117 = v115 + v217;
                if (v116)
                  goto LABEL_214;
                v102[2] = v117;
              }
            }
            else if (v217)
            {
              goto LABEL_212;
            }
            ++v101;
            swift_bridgeObjectRelease();
            v100 = v216;
            if ((uint64_t)v101 < v216)
              continue;
            break;
          }
LABEL_69:
          swift_bridgeObjectRelease_n();
          goto LABEL_72;
        }
        outlined retain of Graph((uint64_t)&v252);
        outlined retain of Graph((uint64_t)&v252);
        outlined copy of NodePersonality(v233);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_72:
        v247 = v218;
        swift_bridgeObjectRetain();
        v119 = swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v119);
        outlined release of Graph((uint64_t)&v252);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of NodePersonality(v233);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v118 = v247;
        v82 = v219;
      }
      else
      {
        v118 = (_OWORD *)MEMORY[0x24BEE4AF8];
      }
      v220 = v118;
      v120 = v82[2];
      v234 = *((_QWORD *)v118 + 2);
      v121 = v120 + v234;
      if (__OFADD__(v120, v234))
        goto LABEL_207;
      v122 = v82;
      v123 = swift_isUniquelyReferenced_nonNull_native();
      v124 = v122;
      if ((v123 & 1) == 0 || v121 > v122[3] >> 1)
      {
        if (v120 <= v121)
          v125 = v120 + v234;
        else
          v125 = v120;
        v124 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)v123, v125, 1, v122);
      }
      if (*((_QWORD *)v220 + 2))
      {
        v126 = v124[2];
        if ((v124[3] >> 1) - v126 < v234)
          goto LABEL_209;
        v127 = (unint64_t)&v124[22 * v126 + 4];
        if ((unint64_t)(v220 + 2) < v127 + 176 * v234 && v127 < (unint64_t)&v220[11 * v234 + 2])
          goto LABEL_215;
        v129 = v124;
        swift_arrayInitWithCopy();
        if (v234)
        {
          v130 = v129[2];
          v116 = __OFADD__(v130, v234);
          v131 = v130 + v234;
          if (v116)
            goto LABEL_210;
          v129[2] = v131;
        }
      }
      else
      {
        v129 = v124;
        if (v234)
          goto LABEL_208;
      }
      ++v80;
      swift_bridgeObjectRelease();
      v79 = v224;
      v82 = v129;
      v81 = v221;
      v78 = v222;
      if ((uint64_t)v80 >= v224)
      {
        v132 = v82;
        swift_bridgeObjectRelease_n();
        v135 = v132;
        v62 = v223;
LABEL_95:
        v84 = v226;
        goto LABEL_96;
      }
      goto LABEL_35;
    }
    v85 = v80 + 1;
    if (__OFADD__(v80, 1))
      goto LABEL_191;
    ++v80;
    v83 += 6;
  }
  while (v85 < (uint64_t)v79);
  v134 = v82;
  swift_bridgeObjectRelease_n();
  v135 = v134;
  v62 = v223;
LABEL_96:
  v136 = v135[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v137 = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)v137 || (v138 = v84, v136))
    v138 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v137, v136 + 1, 1, v84);
  v139 = v135[2];
  v235 = v138;
  if (!v139)
  {
    if (v136)
      goto LABEL_203;
LABEL_107:
    swift_bridgeObjectRelease();
    outlined release of Graph((uint64_t)&v262);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v225);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v133 = v235;
    goto LABEL_108;
  }
  v140 = v138[2];
  if ((v138[3] >> 1) - v140 < (uint64_t)v139)
    goto LABEL_205;
  v141 = (unint64_t)&v138[22 * v140 + 4];
  if ((unint64_t)(v135 + 4) < v141 + 176 * v139 && v141 < (unint64_t)&v135[22 * v139 + 4])
    goto LABEL_215;
  swift_arrayInitWithCopy();
  if (v139 < v136)
  {
LABEL_203:
    __break(1u);
LABEL_204:
    __break(1u);
LABEL_205:
    __break(1u);
    goto LABEL_206;
  }
  v142 = v235[2];
  v116 = __OFADD__(v142, v139);
  v143 = v142 + v139;
  if (!v116)
  {
    v235[2] = v143;
    goto LABEL_107;
  }
LABEL_206:
  __break(1u);
LABEL_207:
  __break(1u);
LABEL_208:
  __break(1u);
LABEL_209:
  __break(1u);
LABEL_210:
  __break(1u);
LABEL_211:
  __break(1u);
LABEL_212:
  __break(1u);
LABEL_213:
  __break(1u);
LABEL_214:
  __break(1u);
LABEL_215:
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
}

void createDotText(representing:)(char *a1)
{
  char *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _BYTE *v11;
  char *v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  void *v32;
  id v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  _QWORD *v41;
  int v42[2];
  uint64_t v43;

  v2 = &a1[OBJC_IVAR___SGGraph_nodes];
  swift_beginAccess();
  v3 = *(_QWORD *)v2;
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v31)
      goto LABEL_3;
LABEL_15:
    lazy protocol witness table accessor for type DotError and conformance DotError();
    v32 = (void *)swift_allocError();
    swift_willThrow();
    type metadata accessor for SGError();
    v33 = v32;
    SGError.__allocating_init(_:)(v32);
    swift_willThrow();

    return;
  }
  if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_15;
LABEL_3:
  SGGraph.nodegraphs(_:)(0);
  v5 = v4;
  v34._countAndFlagsBits = graphDotText(_:callNode:)(a1, 0);
  v34._object = v6;
  v7 = *(_QWORD *)(v5 + 16);
  if (v7)
  {
    swift_retain();
    swift_retain();
    v8 = 0;
    v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v35 = v7;
    v36 = v5;
    do
    {
      v11 = *(_BYTE **)(v5 + 8 * v8 + 32);
      v12 = &v11[OBJC_IVAR___SGNode_data];
      v13 = v11[OBJC_IVAR___SGNode_data + 80];
      if ((v13 & 0xC0) == 0x40)
      {
        v14 = *((_QWORD *)v12 + 9);
        v38 = *((_QWORD *)v12 + 8);
        v43 = *((_QWORD *)v12 + 7);
        v15 = *((_QWORD *)v12 + 5);
        v41 = v9;
        *(_QWORD *)v42 = *((_QWORD *)v12 + 6);
        v16 = *((_QWORD *)v12 + 4);
        v37 = (id)*((_QWORD *)v12 + 3);
        v17 = *((_QWORD *)v12 + 1);
        v18 = (void *)*((_QWORD *)v12 + 2);
        v19 = *(void **)v12;
        v39 = v11;
        outlined copy of NodeData(v19, v17, v18, v37, v16, v15, v42[0], v43, v38, v14, v13);
        v20 = graphDotText(_:callNode:)((char *)v19, (uint64_t)v11);
        v40 = v21;
        v22 = v19;
        v9 = v41;
        outlined consume of NodeData(v22, v17, v18, v37, v16, v15, v42[0], v43, v38, v14, v13);

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v41[2] + 1, 1, v41);
        v24 = v9[2];
        v23 = v9[3];
        v7 = v35;
        if (v24 >= v23 >> 1)
          v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v9);
        v9[2] = v24 + 1;
        v10 = &v9[2 * v24];
        v10[4] = v20;
        v10[5] = v40;
        v5 = v36;
      }
      ++v8;
    }
    while (v7 != v8);
    swift_release();
    swift_release();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String], MEMORY[0x24BEE12B0]);
  v25 = BidirectionalCollection<>.joined(separator:)();
  v27 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v28._countAndFlagsBits = v25;
  v28._object = v27;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(136);
  v29._object = (void *)0x8000000245FCC900;
  v29._countAndFlagsBits = 0xD000000000000083;
  String.append(_:)(v29);
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 8194570;
  v30._object = (void *)0xE300000000000000;
  String.append(_:)(v30);
  swift_release();
  swift_release();
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  void (*v42)(void **);
  void (*v43)(void **);
  uint64_t v44;
  void (*v45[4])(void **);
  uint64_t v46;
  uint64_t v47;

  v2 = *(_QWORD *)(result + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v8 = v3[3] >> 1, v8 < v5))
  {
    if (v4 <= v5)
      v9 = v4 + v2;
    else
      v9 = v4;
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 1, v3);
    v8 = v3[3] >> 1;
  }
  v10 = v3[2];
  v11 = v8 - v10;
  result = specialized Sequence._copySequenceContents(initializing:)(&v46, (uint64_t)&v3[7 * v10 + 4], v8 - v10, v6);
  if (result < v2)
    goto LABEL_16;
  if (result)
  {
    v13 = v3[2];
    v14 = __OFADD__(v13, result);
    v15 = v13 + result;
    if (v14)
    {
      __break(1u);
      goto LABEL_33;
    }
    v3[2] = v15;
  }
  if (result != v11)
  {
LABEL_13:
    result = swift_bridgeObjectRelease();
LABEL_14:
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_17:
  if (!v47)
    goto LABEL_13;
  v39 = v1;
  v16 = v47 - 1;
  if (__OFSUB__(v47, 1))
    goto LABEL_35;
  v17 = v3[2];
  v40 = v46;
  v43 = specialized Array.subscript.read(v45, v47 - 1, v46);
  v19 = *v18;
  v20 = v18[1];
  v22 = v18[2];
  v21 = v18[3];
  v23 = v18[4];
  v24 = *((_BYTE *)v18 + 40);
  v25 = v18[6];
  swift_retain();
  swift_bridgeObjectRetain();
  result = ((uint64_t (*)(void (**)(void **), _QWORD))v43)(v45, 0);
  v26 = v19;
  v27 = v25;
  v28 = v22;
LABEL_21:
  while (1)
  {
    v29 = v3[3];
    v30 = v29 >> 1;
    v12 = v17 + 1;
    if ((uint64_t)(v29 >> 1) < v17 + 1)
      break;
    if (v17 < v30)
      goto LABEL_23;
LABEL_20:
    v3[2] = v17;
  }
  v37 = v3;
  v38 = v26;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v17 + 1, 1, v37);
  v12 = v17 + 1;
  v26 = v38;
  v3 = (_QWORD *)result;
  v30 = *(_QWORD *)(result + 24) >> 1;
  if (v17 >= v30)
    goto LABEL_20;
LABEL_23:
  v31 = &v3[7 * v17];
  v31[4] = v26;
  v31[5] = v20;
  v31[6] = v28;
  v31[7] = v21;
  v31[8] = v23;
  *((_BYTE *)v31 + 72) = v24 & 1;
  v31[10] = v27;
  if (!v16)
  {
LABEL_33:
    v3[2] = v12;
    result = swift_bridgeObjectRelease();
    v1 = v39;
    goto LABEL_14;
  }
  v32 = &v3[7 * v17 + 17];
  v41 = v30;
  while (1)
  {
    v14 = __OFSUB__(v16, 1);
    v33 = v16 - 1;
    if (v14)
      break;
    v44 = v12;
    v42 = specialized Array.subscript.read(v45, v33, v40);
    v34 = v33;
    v36 = *v35;
    v20 = v35[1];
    v28 = v35[2];
    v21 = v35[3];
    v23 = v35[4];
    v24 = *((_BYTE *)v35 + 40);
    v27 = v35[6];
    swift_retain();
    swift_bridgeObjectRetain();
    result = ((uint64_t (*)(void (**)(void **), _QWORD))v42)(v45, 0);
    if (v41 == v44)
    {
      v17 = v41;
      v26 = v36;
      v16 = v34;
      v3[2] = v41;
      goto LABEL_21;
    }
    *(v32 - 6) = v36;
    *(v32 - 5) = v20;
    *(v32 - 4) = v28;
    *(v32 - 3) = v21;
    *(v32 - 2) = v23;
    *((_BYTE *)v32 - 8) = v24;
    v12 = v44 + 1;
    *v32 = v27;
    v32 += 7;
    v16 = v34;
    if (!v34)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t (*v18)();
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t (*v26)();
  uint64_t *v27;
  _BYTE v28[32];
  uint64_t v29;
  uint64_t v30;

  v2 = *(_QWORD *)(result + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v6 = result;
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v8 = v3[3] >> 1, v8 < v5))
  {
    if (v4 <= v5)
      v9 = v4 + v2;
    else
      v9 = v4;
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 1, v3);
    v8 = v3[3] >> 1;
  }
  v10 = v3[2];
  v11 = v8 - v10;
  result = specialized Sequence._copySequenceContents(initializing:)(&v29, &v3[2 * v10 + 4], v8 - v10, v6);
  if (result < v2)
    goto LABEL_15;
  if (result)
  {
    v12 = v3[2];
    v13 = __OFADD__(v12, result);
    v14 = v12 + result;
    if (v13)
    {
      __break(1u);
      goto LABEL_32;
    }
    v3[2] = v14;
  }
  if (result != v11)
  {
LABEL_13:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_16:
  if (!v30)
    goto LABEL_13;
  v15 = v30 - 1;
  if (__OFSUB__(v30, 1))
    goto LABEL_34;
  v16 = v3[2];
  v17 = v29;
  v18 = specialized Array.subscript.read((uint64_t (*)())v28, v30 - 1, v29);
  v21 = *v19;
  v20 = v19[1];
  swift_bridgeObjectRetain();
  result = ((uint64_t (*)(_BYTE *, _QWORD))v18)(v28, 0);
LABEL_20:
  while (1)
  {
    v22 = v3[3];
    v23 = v22 >> 1;
    v5 = v16 + 1;
    if ((uint64_t)(v22 >> 1) < v16 + 1)
      break;
    if (v16 < v23)
      goto LABEL_22;
LABEL_19:
    v3[2] = v16;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v16 + 1, 1, v3);
  v3 = (_QWORD *)result;
  v23 = *(_QWORD *)(result + 24) >> 1;
  if (v16 >= v23)
    goto LABEL_19;
LABEL_22:
  v24 = &v3[2 * v16];
  v24[4] = v21;
  v24[5] = v20;
  if (!v15)
  {
LABEL_32:
    v3[2] = v5;
    goto LABEL_13;
  }
  v25 = v24 + 7;
  while (1)
  {
    v13 = __OFSUB__(v15--, 1);
    if (v13)
      break;
    v26 = specialized Array.subscript.read((uint64_t (*)())v28, v15, v17);
    v21 = *v27;
    v20 = v27[1];
    swift_bridgeObjectRetain();
    result = ((uint64_t (*)(_BYTE *, _QWORD))v26)(v28, 0);
    if (v23 == v5)
    {
      v16 = v23;
      v3[2] = v23;
      goto LABEL_20;
    }
    *(v25 - 1) = v21;
    *v25 = v20;
    ++v5;
    v25 += 2;
    if (!v15)
      goto LABEL_32;
  }
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[6 * v8 + 4];
  if (a1 + 32 < v9 + 48 * v2 && v9 < a1 + 32 + 48 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[22 * v9 + 4];
  if (a1 + 32 < v10 + 176 * v8 && v10 < a1 + 32 + 176 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[7 * v8 + 4];
  if (a1 + 32 < v9 + 56 * v2 && v9 < a1 + 32 + 56 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v24 = v4 + v2;
  else
    v24 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v24, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = *(_QWORD *)(v3 + 16);
  v10 = (*(_QWORD *)(v3 + 24) >> 1) - v9;
  v11 = type metadata accessor for URL();
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v3 + v13 + v14 * v9;
  v16 = a1 + v13;
  v17 = v14 * v8;
  v18 = v15 + v17;
  v19 = v16 + v17;
  if (v16 < v18 && v15 < v19)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFADD__(v21, v8);
  v23 = v21 + v8;
  if (!v22)
  {
    *(_QWORD *)(v3 + 16) = v23;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[3 * v8 + 4];
  if (a1 + 32 < v9 + 24 * v2 && v9 < a1 + 32 + 24 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[4 * v9 + 4];
  if (a1 + 32 < v10 + 32 * v8 && v10 < a1 + 32 + 32 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[3 * v8 + 4];
  if (a1 + 32 < v9 + 24 * v2 && v9 < a1 + 32 + 24 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[14 * v8 + 4];
  if (a1 + 32 < v9 + 112 * v2 && v9 < a1 + 32 + 112 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &demangling cache variable for type metadata for (String, SGOutput));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &demangling cache variable for type metadata for (String, SGInput));
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  return specialized Array.append<A>(contentsOf:)(a1, (unint64_t *)type metadata accessor for SGNode, (unint64_t *)&lazy protocol witness table cache variable for type [SGNode] and conformance [A], &demangling cache variable for type metadata for [SGNode], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (unint64_t *)type metadata accessor for SGEdge, (unint64_t *)&lazy protocol witness table cache variable for type [SGEdge] and conformance [A], &demangling cache variable for type metadata for [SGEdge], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x24954B754](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = specialized Array._copyContents(initializing:)(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1, &demangling cache variable for type metadata for MTLLibrary, &lazy protocol witness table cache variable for type [MTLLibrary] and conformance [A], &demangling cache variable for type metadata for [MTLLibrary], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x24954B754](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = specialized Array._copyContents(initializing:)(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1, (void (*)(_QWORD))type metadata accessor for MetalShaderCompiler.Scope, &lazy protocol witness table cache variable for type [MetalShaderCompiler.Scope] and conformance [A], &demangling cache variable for type metadata for [MetalShaderCompiler.Scope], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t a2)
{
  int64_t *v2;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(id *);
  id *v26;
  id v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(id *);
  id *v35;
  unint64_t v36;
  uint64_t v37;
  _BYTE v38[32];

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *v2;
  if ((unint64_t)*v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v8 = v23 + v5;
    if (!__OFADD__(v23, v5))
      goto LABEL_3;
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  v8 = v7 + v5;
  if (__OFADD__(v7, v5))
    goto LABEL_32;
LABEL_3:
  v9 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v9;
  v11 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v9 & 0x8000000000000000) == 0 && (v9 & 0x4000000000000000) == 0)
  {
    v12 = v9 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_13;
    v11 = 1;
  }
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v13 <= v8)
    v13 = v8;
  swift_bridgeObjectRetain();
  v14 = MEMORY[0x24954B754](v11, v13, 1, v9);
  swift_bridgeObjectRelease();
  *v2 = v14;
  v12 = v14 & 0xFFFFFFFFFFFFFF8;
LABEL_13:
  v15 = *(_QWORD *)(v12 + 16);
  v6 = (*(_QWORD *)(v12 + 24) >> 1) - v15;
  if (!v5)
  {
    v16 = 0;
LABEL_28:
    if (v16 != v6)
    {
LABEL_29:
      swift_release();
      swift_release();
      return specialized Array._endMutation()();
    }
LABEL_33:
    v24 = *(_QWORD *)(a2 + 16);
    if (v6 == v24)
      goto LABEL_29;
    v5 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    v25 = specialized OrderedSet.subscript.read((void (*)(id *))v38, v6, a1, a2);
    v27 = *v26;
    ((void (*)(_BYTE *, _QWORD))v25)(v38, 0);
    v28 = v6 + 1;
    while (1)
    {
LABEL_36:
      v29 = *v2 & 0xFFFFFFFFFFFFFF8;
      v30 = v5 + 1;
      if (v5 + 1 > *(_QWORD *)(v29 + 0x18) >> 1)
      {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v29 = *v2 & 0xFFFFFFFFFFFFFF8;
      }
      v31 = *(_QWORD *)(v29 + 24) >> 1;
      if (v5 < v31)
        break;
      *(_QWORD *)(v29 + 16) = v5;
    }
    *(_QWORD *)(v29 + 8 * v5 + 32) = v27;
    if (v28 != v24)
    {
      v37 = v31;
      v32 = v31 - 1;
      v33 = v29 + 40;
      while (1)
      {
        v34 = specialized OrderedSet.subscript.read((void (*)(id *))v38, v28, a1, a2);
        v27 = *v35;
        ((void (*)(_BYTE *, _QWORD))v34)(v38, 0);
        v36 = v28 + 1;
        if (__OFADD__(v28, 1))
          goto LABEL_51;
        if (v32 == v5)
        {
          ++v28;
          v5 = v37;
          *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v37;
          goto LABEL_36;
        }
        *(_QWORD *)(v33 + 8 * v5) = v27;
        ++v28;
        ++v5;
        if (v36 == v24)
          goto LABEL_48;
      }
    }
LABEL_49:
    *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFF8) + 0x10) = v30;
    goto LABEL_29;
  }
  if (v6 >= *(_QWORD *)(a2 + 16))
    v16 = *(_QWORD *)(a2 + 16);
  else
    v16 = (*(_QWORD *)(v12 + 24) >> 1) - v15;
  if (v16 < 0)
    goto LABEL_52;
  v17 = v12 + 8 * v15 + 32;
  if (a2 + 32 < v17 + 8 * v16 && v17 < a2 + 32 + 8 * v16)
    goto LABEL_52;
  type metadata accessor for SGNode();
  swift_arrayInitWithCopy();
  if (v16 < v5)
  {
    __break(1u);
LABEL_48:
    v30 = v5 + 1;
    goto LABEL_49;
  }
  if (!v16)
    goto LABEL_28;
  v19 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v20 = __OFADD__(v19, v16);
  v21 = v19 + v16;
  if (!v20)
  {
    *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v21;
    goto LABEL_28;
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  _QWORD *v7;
  int64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  uint64_t (*v19)();
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t (*v26)();
  uint64_t v27;
  char v28[8];
  char v29[8];
  char v30;
  uint64_t v31;
  BOOL v32;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = (_QWORD *)*v3;
  v8 = *(_QWORD *)(*v3 + 16);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v4 = a2;
  v2 = a1;
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  *v3 = (unint64_t)v7;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v11 = v7[3] >> 1, v11 < v9))
  {
    if (v8 <= v9)
      v12 = v8 + v6;
    else
      v12 = v8;
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v12, 1, (unint64_t)v7);
    *v3 = (unint64_t)v7;
    v11 = v7[3] >> 1;
  }
  v5 = v7[2];
  v8 = v11 - v5;
  if (!v6)
  {
    if (v8)
      goto LABEL_21;
    goto LABEL_23;
  }
  if (v8 >= *(_QWORD *)(v4 + 16))
    v13 = *(_QWORD *)(v4 + 16);
  else
    v13 = v11 - v5;
  if ((v13 & 0x8000000000000000) != 0
    || ((v14 = (unint64_t)&v7[v5 + 4], v4 + 32 < v14 + 8 * v13) ? (v15 = v14 >= v4 + 32 + 8 * v13) : (v15 = 1),
        !v15))
  {
LABEL_49:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
  swift_arrayInitWithCopy();
  if (v13 < v6)
    goto LABEL_26;
  v16 = v7[2];
  v5 = v16 + v13;
  if (__OFADD__(v16, v13))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v7[2] = v5;
  if (v13 != v8)
  {
LABEL_21:
    swift_release();
    return swift_release();
  }
LABEL_23:
  v6 = *(_QWORD *)(v4 + 16);
  if (v8 != v6)
  {
LABEL_28:
    v19 = specialized OrderedSet.subscript.read((uint64_t)v29, v8, v2, v4);
    outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(v20, (uint64_t)&v31, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
    ((void (*)(char *, _QWORD))v19)(v29, 0);
    v18 = v8 + 1;
    goto LABEL_29;
  }
  v31 = 0;
  v18 = v8;
LABEL_29:
  v32 = v8 == v6;
  outlined init with copy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v31, (uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>?);
  while ((v30 & 1) == 0)
  {
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>?);
    v21 = (_QWORD *)*v3;
    v22 = *(_QWORD *)(*v3 + 24);
    v23 = v22 >> 1;
    if ((uint64_t)(v22 >> 1) < v5 + 1)
    {
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v5 + 1, 1, *v3);
      *v3 = (unint64_t)v21;
      v23 = v21[3] >> 1;
    }
    outlined init with copy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v31, (uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>?);
    if ((v30 & 1) == 0)
    {
      if (v5 > v23)
        v23 = v5;
      v25 = (uint64_t)&v21[v5 + 4];
      while (1)
      {
        outlined init with take of MetalFunctionNode?((uint64_t)v29, (uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
        if (v23 == v5)
        {
          outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
          v5 = v23;
          goto LABEL_33;
        }
        outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v31, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>?);
        outlined init with take of MetalFunctionNode?((uint64_t)v28, v25, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
        if (v18 == v6)
        {
          v31 = 0;
          v24 = v6;
        }
        else
        {
          v26 = specialized OrderedSet.subscript.read((uint64_t)v29, v18, v2, v4);
          outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(v27, (uint64_t)&v31, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
          ((void (*)(char *, _QWORD))v26)(v29, 0);
          v24 = v18 + 1;
          if (__OFADD__(v18, 1))
          {
            __break(1u);
            goto LABEL_49;
          }
        }
        v32 = v18 == v6;
        outlined init with copy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v31, (uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>?);
        v25 += 8;
        ++v5;
        v18 = v24;
        if ((v30 & 1) != 0)
          goto LABEL_38;
      }
    }
    v24 = v18;
LABEL_38:
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>?);
    v23 = v5;
    v18 = v24;
LABEL_33:
    *(_QWORD *)(*v3 + 16) = v23;
    outlined init with copy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v31, (uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>?);
  }
  outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v31, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>?);
  swift_release();
  swift_release();
  return outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>?);
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  unint64_t *v5;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v12 = *v5;
  if (*v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v14 = v13 + v11;
    if (!__OFADD__(v13, v11))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  v14 = v13 + v11;
  if (__OFADD__(v13, v11))
    goto LABEL_23;
LABEL_5:
  v12 = *v5;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v5 = v12;
  v13 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v12 & 0x8000000000000000) == 0
    && (v12 & 0x4000000000000000) == 0)
  {
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    if (v14 <= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v13 = 1;
  }
  v23 = v11;
  v11 = (uint64_t)a2;
  a2 = a3;
  a3 = (unint64_t *)a4;
  a4 = a5;
  if (v12 >> 62)
    goto LABEL_25;
  v17 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v17 <= v14)
      v17 = v14;
    swift_bridgeObjectRetain();
    v12 = MEMORY[0x24954B754](v13, v17, 1, v12);
    swift_bridgeObjectRelease();
    *v5 = v12;
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    a5 = a4;
    a4 = (uint64_t *)a3;
    a3 = a2;
    a2 = (unint64_t *)v11;
    v11 = v23;
LABEL_15:
    result = specialized Array._copyContents(initializing:)(v16 + 8 * *(_QWORD *)(v16 + 16) + 32, (*(_QWORD *)(v16 + 24) >> 1) - *(_QWORD *)(v16 + 16), a1, (void (*)(_QWORD))a2, a3, a4, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))a5);
    if (v19 >= v11)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v19 < 1)
    goto LABEL_19;
  v20 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v21 = __OFADD__(v20, v19);
  v22 = v20 + v19;
  if (!v21)
  {
    *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v22;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v6 + v4 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_15;
  }
  v5 = a2();
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_15:
    if (!v4)
      goto LABEL_16;
    goto LABEL_18;
  }
LABEL_5:
  v10 = *(_QWORD *)(v5 + 16);
  if ((*(_QWORD *)(v5 + 24) >> 1) - v10 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v11 = v5 + 24 * v10 + 32;
  if (a1 + 32 < v11 + 24 * v4 && v11 < a1 + 32 + 24 * v4)
    goto LABEL_21;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    result = swift_bridgeObjectRelease();
    *v3 = v5;
    return result;
  }
  v13 = *(_QWORD *)(v5 + 16);
  v14 = __OFADD__(v13, v4);
  v15 = v13 + v4;
  if (!v14)
  {
    *(_QWORD *)(v5 + 16) = v15;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*specialized OrderedSet.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3, uint64_t a4))(id *a1)
{
  void *v4;
  id v5;

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a4 + 16) > a2)
  {
    v4 = *(void **)(a4 + 8 * a2 + 32);
    *(_QWORD *)result = v4;
    v5 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

uint64_t (*specialized OrderedSet.subscript.read(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t (*result)();

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a4 + 16) > a2)
  {
    return destructiveProjectEnumData for NodePersonality.ShaderType;
  }
  __break(1u);
  return result;
}

uint64_t createDotText(representing:inputNodeIDs:outputNodeIDs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  void *v29;
  void *v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  void *v34;
  void *v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  void *v39;
  void *v40;
  Swift::String v41;
  Swift::String v42;
  uint64_t v43;
  void *v44;
  void *v45;
  Swift::String v46;
  Swift::String v47;

  swift_retain();
  v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph14FunctionNodeIDVG_AF05MetalfG0_psAE_pTg504_s11d41Graph13createDotText12representing12inputg20IDs06outputhI0SSAA05i18A7ProgramC_SayAA08F28H2IDVGAJtKFAA0kmH0_pAIKXEfU_AF0idR0CTf1cn_nTf4ng_nTm(a2, a1);
  v9 = swift_release();
  if (!v4)
  {
    v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120);
    v11 = v10(v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12 = specialized _ArrayProtocol.filter(_:)(v11, a2, a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_retain();
    v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph14FunctionNodeIDVG_AF05MetalfG0_psAE_pTg504_s11d41Graph13createDotText12representing12inputg20IDs06outputhI0SSAA05i18A7ProgramC_SayAA08F28H2IDVGAJtKFAA0kmH0_pAIKXEfU_AF0idR0CTf1cn_nTf4ng_nTm(a3, a1);
    swift_release();
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17MetalFunctionNode_pG_SSs5NeverOTg504_s11d41Graph13createDotText12representing12inputh20IDs06outputhI0SSAA05f18A7ProgramC_SayAA08g29H2IDVGAJtKF0cH10StatementsL_yS29SSGSayAA0kmH0_pGFSSAaM_pXEfU_SayAF0gH2IDVGTf1cn_nTf4ng_n(v8, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17MetalFunctionNode_pG_SSs5NeverOTg504_s11d41Graph13createDotText12representing12inputh20IDs06outputhI0SSAA05f18A7ProgramC_SayAA08g29H2IDVGAJtKF0cH10StatementsL_yS29SSGSayAA0kmH0_pGFSSAaM_pXEfU_SayAF0gH2IDVGTf1cn_nTf4ng_n(v12, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17MetalFunctionNode_pG_SSs5NeverOTg504_s11d41Graph13createDotText12representing12inputh20IDs06outputhI0SSAA05f18A7ProgramC_SayAA08g29H2IDVGAJtKF0cH10StatementsL_yS29SSGSayAA0kmH0_pGFSSAaM_pXEfU_SayAF0gH2IDVGTf1cn_nTf4ng_n(v14, a2);
    swift_bridgeObjectRelease();
    v15 = swift_bridgeObjectRelease();
    v16 = v10(v15);
    v17 = *(_QWORD *)(v16 + 16);
    if (v17)
    {
      v18 = (_QWORD *)(v16 + 32);
      do
      {
        v20 = v18[3];
        v21 = v18[4];
        __swift_project_boxed_opaque_existential_1(v18, v20);
        v22 = *(_QWORD *)((*(uint64_t (**)(uint64_t, uint64_t))(v21 + 48))(v20, v21) + 16);
        swift_bridgeObjectRelease();
        if (v22)
        {
          v23 = v18[3];
          v24 = v18[4];
          __swift_project_boxed_opaque_existential_1(v18, v23);
          v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 48))(v23, v24);
          v26 = MEMORY[0x24BDAC7A8](v25);
          v19 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay11ShaderGraph14FunctionNodeIDVGG_SSsAE_pTg506_sSi11f7Graph14hi7IDVSSs5C48_pIgyyozo_Si6offset_AC7elementtSSsAD_pIegnrzr_TRSiAJSSsAE_pIgyyozo_Tf1cn_nTf4ng_n(v26, partial apply for closure #1 in closure #4 in createDotText(representing:inputNodeIDs:outputNodeIDs:));
          swift_bridgeObjectRelease();
        }
        else
        {
          v19 = MEMORY[0x24BEE4AF8];
        }
        specialized Array.append<A>(contentsOf:)(v19);
        v18 += 5;
        --v17;
      }
      while (v17);
    }
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(609);
    v27._countAndFlagsBits = 0xD000000000000170;
    v27._object = (void *)0x8000000245FCC990;
    String.append(_:)(v27);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String], MEMORY[0x24BEE12B0]);
    v28 = BidirectionalCollection<>.joined(separator:)();
    v30 = v29;
    swift_bridgeObjectRelease();
    v31._countAndFlagsBits = v28;
    v31._object = v30;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._object = (void *)0x8000000245FCCB10;
    v32._countAndFlagsBits = 0xD000000000000067;
    String.append(_:)(v32);
    v33 = BidirectionalCollection<>.joined(separator:)();
    v35 = v34;
    swift_bridgeObjectRelease();
    v36._countAndFlagsBits = v33;
    v36._object = v35;
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._object = (void *)0x8000000245FCCB80;
    v37._countAndFlagsBits = 0xD000000000000067;
    String.append(_:)(v37);
    v38 = BidirectionalCollection<>.joined(separator:)();
    v40 = v39;
    swift_bridgeObjectRelease();
    v41._countAndFlagsBits = v38;
    v41._object = v40;
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v42._countAndFlagsBits = 0xD000000000000014;
    v42._object = (void *)0x8000000245FCCBF0;
    String.append(_:)(v42);
    v43 = BidirectionalCollection<>.joined(separator:)();
    v45 = v44;
    swift_bridgeObjectRelease();
    v46._countAndFlagsBits = v43;
    v46._object = v45;
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v47._countAndFlagsBits = 0x7D202020200A0ALL;
    v47._object = (void *)0xE700000000000000;
    String.append(_:)(v47);
    v3 = 0;
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t graphDotText(_:callNode:)(char *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Swift::String v25;
  char *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  Swift::String v33;
  void *v34;
  uint64_t v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  void *v39;
  uint64_t v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t inited;
  id v48;
  id v49;
  uint64_t v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  unint64_t v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  Swift::String v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;
  Swift::String v67;
  Swift::String v68;
  Swift::String v69;
  Swift::String v70;
  Swift::String v71;
  Swift::String v72;
  Swift::String v73;
  Swift::String v74;
  Swift::String v75;
  Swift::String v76;
  Swift::String v77;
  Swift::String v78;
  Swift::String v79;
  uint64_t v80;
  void *v81;
  void *v82;
  Swift::String v83;
  Swift::String v84;
  Swift::String v85;
  Swift::String v86;
  Swift::String v87;
  Swift::String v88;
  uint64_t v89;
  void *v90;
  void *v91;
  Swift::String v92;
  Swift::String v93;
  Swift::String v94;
  Swift::String v95;
  Swift::String v96;
  Swift::String v97;
  uint64_t v98;
  void *v99;
  void *v100;
  Swift::String v101;
  Swift::String v102;
  uint64_t v103;
  void *v104;
  void *v105;
  Swift::String v106;
  Swift::String v107;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  void *v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;

  v4 = *(void **)&a1[OBJC_IVAR___SGGraph_argumentsNode];
  v5 = *(void **)&a1[OBJC_IVAR___SGGraph_resultsNode];
  swift_beginAccess();
  v6 = v4;
  v7 = v5;
  v8 = swift_bridgeObjectRetain();
  v9 = specialized _ArrayProtocol.filter(_:)(v8);
  swift_bridgeObjectRelease();

  v113 = v9;
  v111 = v7;
  v112 = v6;
  v110 = a2;
  if (a2)
  {
    v10 = (uint64_t *)(a2 + OBJC_IVAR___SGNode_name);
    swift_beginAccess();
    v12 = *v10;
    v11 = (void *)v10[1];
    v13 = a2 + OBJC_IVAR___SGNode_graph;
    swift_beginAccess();
    v14 = MEMORY[0x24954C3E4](v13);
    if (v14)
    {
      v15 = (void *)v14;
      v16 = (uint64_t *)(v14 + OBJC_IVAR___SGGraph_name);
      swift_beginAccess();
      v18 = *v16;
      v17 = (void *)v16[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();

    }
    else
    {
      swift_bridgeObjectRetain();
      v18 = 0;
      v17 = (void *)0xE000000000000000;
    }
  }
  else
  {
    v18 = 0;
    v12 = 0;
    v17 = (void *)0xE000000000000000;
    v11 = (void *)0xE000000000000000;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_245FBECD0;
  v20 = ObjectIdentifier.hashValue.getter();
  v21 = MEMORY[0x24BEE17F0];
  *(_QWORD *)(v19 + 56) = MEMORY[0x24BEE1768];
  *(_QWORD *)(v19 + 64) = v21;
  *(_QWORD *)(v19 + 32) = v20;
  v22 = String.init(format:_:)();
  v24 = v23;
  v115 = v12;
  swift_bridgeObjectRetain();
  v109 = v18;
  v25._countAndFlagsBits = v18;
  v25._object = v17;
  String.append(_:)(v25);
  v114 = a1;
  v26 = &a1[OBJC_IVAR___SGGraph_name];
  v27 = *(_QWORD *)&a1[OBJC_IVAR___SGGraph_name];
  v28 = (void *)*((_QWORD *)v26 + 1);
  v29 = v12;
  swift_bridgeObjectRetain();
  v30._countAndFlagsBits = v27;
  v30._object = v28;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v31._countAndFlagsBits = 95;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v32 = v22;
  v33._countAndFlagsBits = v22;
  v33._object = v24;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v35 = v115;
  v34 = v11;
  if (v110)
  {
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    v36._countAndFlagsBits = v29;
    v36._object = v11;
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._countAndFlagsBits = 0x70617267206E6920;
    v37._object = (void *)0xEA00000000002068;
    String.append(_:)(v37);
    v38._countAndFlagsBits = v109;
    v38._object = v17;
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    v40 = 0x206D6F7266;
    v39 = (void *)0xE500000000000000;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v40 = 0;
    v39 = (void *)0xE000000000000000;
  }
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v41._countAndFlagsBits = v27;
  v41._object = v28;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  v42._countAndFlagsBits = 2128928;
  v42._object = (void *)0xE300000000000000;
  String.append(_:)(v42);
  v43._countAndFlagsBits = v32;
  v43._object = v24;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  v44._countAndFlagsBits = 2629673;
  v44._object = (void *)0xE300000000000000;
  String.append(_:)(v44);
  v45._countAndFlagsBits = v40;
  v45._object = v39;
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  v46._countAndFlagsBits = 41;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_245FBF370;
  *(_QWORD *)(inited + 32) = v112;
  v116 = inited;
  specialized Array._endMutation()();
  v48 = v112;
  v49 = v111;
  swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGNodeCG_SSs5NeverOTg504_s11d46Graph12graphDotText_8callNodeSSAA7SGGraphC_AA6F51CSgtF06createG10StatementsL_ySaySSGSayAGGFSSAGXEfU_SSA2HTf1cn_nTf4nggg_n(v116, v35, v34, (uint64_t)v48, (uint64_t)v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v50 = swift_initStackObject();
  *(_OWORD *)(v50 + 16) = xmmword_245FBF370;
  *(_QWORD *)(v50 + 32) = v49;
  v117 = v50;
  specialized Array._endMutation()();
  v51 = v48;
  v52 = v49;
  swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGNodeCG_SSs5NeverOTg504_s11d46Graph12graphDotText_8callNodeSSAA7SGGraphC_AA6F51CSgtF06createG10StatementsL_ySaySSGSayAGGFSSAGXEfU_SSA2HTf1cn_nTf4nggg_n(v117, v35, v34, (uint64_t)v51, (uint64_t)v52);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v53 = v51;
  v54 = v52;
  swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGNodeCG_SSs5NeverOTg504_s11d46Graph12graphDotText_8callNodeSSAA7SGGraphC_AA6F51CSgtF06createG10StatementsL_ySaySSGSayAGGFSSAGXEfU_SSA2HTf1cn_nTf4nggg_n(v113, v35, v34, (uint64_t)v53, (uint64_t)v54);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_beginAccess();
  swift_bridgeObjectRetain();
  v55 = v114;
  v56 = swift_bridgeObjectRetain();
  specialized Sequence.compactMap<A>(_:)(v56, (uint64_t)v55, v35, v34);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(528);
  v57._countAndFlagsBits = 0xD000000000000012;
  v57._object = (void *)0x8000000245FCCC10;
  String.append(_:)(v57);
  v58._countAndFlagsBits = v35;
  v58._object = v34;
  String.append(_:)(v58);
  v59._countAndFlagsBits = 0xD00000000000002BLL;
  v59._object = (void *)0x8000000245FCCC30;
  String.append(_:)(v59);
  v60._countAndFlagsBits = 0x286870617247;
  v60._object = (void *)0xE600000000000000;
  String.append(_:)(v60);
  swift_bridgeObjectRelease();
  v61._countAndFlagsBits = 0x22202020200A0A22;
  v61._object = (void *)0xE800000000000000;
  String.append(_:)(v61);
  v62._countAndFlagsBits = v35;
  v62._object = v34;
  String.append(_:)(v62);
  v63._object = (void *)0x8000000245FCCC60;
  v63._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v63);
  v64._countAndFlagsBits = v35;
  v64._object = v34;
  String.append(_:)(v64);
  v65._countAndFlagsBits = 0xD000000000000017;
  v65._object = (void *)0x8000000245FCCC80;
  String.append(_:)(v65);
  v66._countAndFlagsBits = v35;
  v66._object = v34;
  String.append(_:)(v66);
  v67._object = (void *)0x8000000245FCCCA0;
  v67._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v67);
  v68._countAndFlagsBits = v35;
  v68._object = v34;
  String.append(_:)(v68);
  v69._countAndFlagsBits = 0x22203E2D2022315FLL;
  v69._object = (void *)0xE800000000000000;
  String.append(_:)(v69);
  v70._countAndFlagsBits = v35;
  v70._object = v34;
  String.append(_:)(v70);
  v71._countAndFlagsBits = 0xD000000000000017;
  v71._object = (void *)0x8000000245FCCC80;
  String.append(_:)(v71);
  v72._countAndFlagsBits = v35;
  v72._object = v34;
  String.append(_:)(v72);
  v73._countAndFlagsBits = 0x22203E2D2022325FLL;
  v73._object = (void *)0xE800000000000000;
  String.append(_:)(v73);
  v74._countAndFlagsBits = v35;
  v74._object = v34;
  String.append(_:)(v74);
  v75._countAndFlagsBits = 0xD000000000000029;
  v75._object = (void *)0x8000000245FCCCC0;
  String.append(_:)(v75);
  v76._countAndFlagsBits = v35;
  v76._object = v34;
  String.append(_:)(v76);
  v77._countAndFlagsBits = 0xD000000000000035;
  v77._object = (void *)0x8000000245FCCCF0;
  String.append(_:)(v77);
  v78._countAndFlagsBits = v35;
  v78._object = v34;
  String.append(_:)(v78);
  v79._countAndFlagsBits = 0x2020200A3B22315FLL;
  v79._object = (void *)0xED00002020202020;
  String.append(_:)(v79);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String], MEMORY[0x24BEE12B0]);
  v80 = BidirectionalCollection<>.joined(separator:)();
  v82 = v81;
  swift_bridgeObjectRelease();
  v83._countAndFlagsBits = v80;
  v83._object = v82;
  String.append(_:)(v83);
  swift_bridgeObjectRelease();
  v84._countAndFlagsBits = 0xD00000000000001ELL;
  v84._object = (void *)0x8000000245FCCD30;
  String.append(_:)(v84);
  v85._countAndFlagsBits = v35;
  v85._object = v34;
  String.append(_:)(v85);
  v86._countAndFlagsBits = 0xD000000000000034;
  v86._object = (void *)0x8000000245FCCD50;
  String.append(_:)(v86);
  v87._countAndFlagsBits = v35;
  v87._object = v34;
  String.append(_:)(v87);
  v88._countAndFlagsBits = 0x2020200A3B22325FLL;
  v88._object = (void *)0xED00002020202020;
  String.append(_:)(v88);
  v89 = BidirectionalCollection<>.joined(separator:)();
  v91 = v90;
  swift_bridgeObjectRelease();
  v92._countAndFlagsBits = v89;
  v92._object = v91;
  String.append(_:)(v92);
  swift_bridgeObjectRelease();
  v93._countAndFlagsBits = 0xD00000000000001ELL;
  v93._object = (void *)0x8000000245FCCD30;
  String.append(_:)(v93);
  v94._countAndFlagsBits = v35;
  v94._object = v34;
  String.append(_:)(v94);
  v95._countAndFlagsBits = 0xD000000000000036;
  v95._object = (void *)0x8000000245FCCD90;
  String.append(_:)(v95);
  v96._countAndFlagsBits = v35;
  v96._object = v34;
  String.append(_:)(v96);
  swift_bridgeObjectRelease();
  v97._countAndFlagsBits = 0x2020200A3B22335FLL;
  v97._object = (void *)0xED00002020202020;
  String.append(_:)(v97);
  v98 = BidirectionalCollection<>.joined(separator:)();
  v100 = v99;
  swift_bridgeObjectRelease();
  v101._countAndFlagsBits = v98;
  v101._object = v100;
  String.append(_:)(v101);
  swift_bridgeObjectRelease();
  v102._countAndFlagsBits = 0xA0A7D202020200ALL;
  v102._object = (void *)0xEC00000020202020;
  String.append(_:)(v102);
  v103 = BidirectionalCollection<>.joined(separator:)();
  v105 = v104;
  swift_bridgeObjectRelease();
  v106._countAndFlagsBits = v103;
  v106._object = v105;
  String.append(_:)(v106);
  swift_bridgeObjectRelease();
  v107._countAndFlagsBits = 32010;
  v107._object = (void *)0xE200000000000000;
  String.append(_:)(v107);
  return 0;
}

uint64_t key path getter for SGNode.graph : SGNode@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1 + OBJC_IVAR___SGNode_graph;
  swift_beginAccess();
  result = MEMORY[0x24954C3E4](v3);
  *a2 = result;
  return result;
}

void closure #1 in createNodeStatements #1 (_:) in graphDotText(_:callNode:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  int v22;
  Swift::String v23;
  Swift::String v24;
  void **v25;
  void *v26;
  BOOL v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  int v33;
  void *v34;
  void *v35;
  uint64_t v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  void *v43;
  Swift::String v44;
  void *v45;
  uint64_t v46;
  Swift::String v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void *v54;
  uint64_t *v55;
  Swift::String v56;
  Swift::String v57;
  uint64_t v58;
  void *v59;
  Swift::String v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  void *v72;
  uint64_t *v73;
  Swift::String v74;
  Swift::String v75;
  void *v76;
  uint64_t v77;
  Swift::String v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  Swift::String v85;
  Swift::String v86;
  Swift::String v87;
  Swift::String v88;
  Swift::String v89;
  Swift::String v90;
  Swift::String v91;
  Swift::String v92;
  uint64_t v93;
  unsigned __int8 v95;
  char *v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  void *v103;
  Swift::String v104;
  void *v105;
  void *v106;
  int v107;
  void *v108;
  Swift::String v109;
  uint64_t v110;
  uint64_t v113;
  unint64_t v115;
  unint64_t v116;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;

  v6 = *a1;
  v7 = *a1 + OBJC_IVAR___SGNode_data;
  v8 = *(char **)v7;
  v108 = *(void **)(v7 + 8);
  v9 = *(_QWORD *)(v7 + 32);
  v10 = *(_QWORD *)(v7 + 40);
  v11 = *(_QWORD *)(v7 + 72);
  v12 = *(unsigned __int8 *)(v7 + 80);
  v113 = *a1;
  v110 = v9;
  if (v12 >> 6)
  {
    if (v12 >> 6 == 1)
    {
      v102 = *(void **)(v7 + 24);
      v105 = *(void **)(v7 + 16);
      v99 = *(_QWORD *)(v7 + 40);
      v14 = *(_QWORD *)(v6 + OBJC_IVAR___SGNode_name);
      v13 = *(void **)(v6 + OBJC_IVAR___SGNode_name + 8);
      v16 = *(_QWORD *)&v8[OBJC_IVAR___SGGraph_name];
      v15 = *(void **)&v8[OBJC_IVAR___SGGraph_name + 8];
      if (v14 != v16 || v13 != v15)
      {
        v18 = *(_QWORD *)(v7 + 56);
        v96 = *(char **)v7;
        v19 = *(_QWORD *)(v7 + 72);
        v20 = *(_QWORD *)(v7 + 64);
        v21 = *(_BYTE *)(v7 + 80);
        v22 = *(_QWORD *)(v7 + 48);
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          outlined copy of NodeData(v96, (int)v108, v105, v102, v110, v99, v22, v18, v20, v19, v21);
          swift_bridgeObjectRetain();
          v23._countAndFlagsBits = 28252;
          v23._object = (void *)0xE200000000000000;
          String.append(_:)(v23);
          swift_bridgeObjectRetain();
          v24._countAndFlagsBits = v16;
          v24._object = v15;
          String.append(_:)(v24);
          swift_bridgeObjectRelease();
          outlined consume of NodeData(v96, (int)v108, v105, v102, v110, v99, v22, v18, v20, v19, v21);
          goto LABEL_18;
        }
      }
      goto LABEL_15;
    }
    v33 = v9;
    v34 = *(void **)(v7 + 16);
    v35 = *(void **)(v7 + 24);
    v36 = *(_QWORD *)(v7 + 64);
    v98 = *(_QWORD *)(v7 + 48);
    v107 = *(_QWORD *)(v7 + 56);
    v95 = *(_BYTE *)(v7 + 80);
    outlined copy of SGDataTypeStorage(v34, v35, v33, v10, v98, v107, v36, v11, v12 & 0x3F);
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v37._countAndFlagsBits = 0x203A657079746E5CLL;
    v37._object = (void *)0xE800000000000000;
    String.append(_:)(v37);
    v38._countAndFlagsBits = SGDataType.stringValue.getter((uint64_t)v8);
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    v39._countAndFlagsBits = 28252;
    v39._object = (void *)0xE200000000000000;
    String.append(_:)(v39);
    SGDataTypeStorage.valueString.getter();
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    outlined consume of NodeData(v8, (int)v108, v34, v35, v110, v10, v98, v107, v36, v11, v95);
  }
  else
  {
    v97 = *(_QWORD *)(v7 + 48);
    v100 = *(_QWORD *)(v7 + 40);
    v103 = *(void **)(v7 + 24);
    v106 = *(void **)(v7 + 16);
    v25 = (void **)(v6 + OBJC_IVAR___SGNode_name);
    v26 = *(void **)(v6 + OBJC_IVAR___SGNode_name + 8);
    v27 = *v25 == v8 && v108 == v26;
    if (v27
      || (v28 = *(char **)v7,
          v29 = *(_QWORD *)(v7 + 56),
          v30 = *(_QWORD *)(v7 + 72),
          v31 = *(_QWORD *)(v7 + 64),
          v32 = *(_BYTE *)(v7 + 80),
          (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of MaterialXAvailability(v110, v100);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of MaterialXAvailability(v110, v100);
LABEL_15:
      swift_bridgeObjectRetain();
      goto LABEL_18;
    }
    outlined copy of NodeData(v28, (int)v108, v106, v103, v110, v100, v97, v29, v31, v30, v32);
    swift_bridgeObjectRetain();
    v41._countAndFlagsBits = 28252;
    v41._object = (void *)0xE200000000000000;
    String.append(_:)(v41);
    swift_bridgeObjectRetain();
    v42._countAndFlagsBits = (uint64_t)v28;
    v42._object = v108;
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MaterialXAvailability(v110, v100);
    swift_bridgeObjectRelease();
  }
LABEL_18:
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  v109._countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v109._object = v43;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v44._countAndFlagsBits = 95;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  v46 = *(_QWORD *)(v113 + OBJC_IVAR___SGNode_name);
  v45 = *(void **)(v113 + OBJC_IVAR___SGNode_name + 8);
  swift_bridgeObjectRetain();
  v47._countAndFlagsBits = v46;
  v47._object = v45;
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  v104._countAndFlagsBits = a2;
  v48 = *(_QWORD *)(v113 + OBJC_IVAR___SGNode_inputs);
  if (v48 >> 62)
  {
    swift_bridgeObjectRetain();
    v49 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v49 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v50 = MEMORY[0x24BEE4AF8];
  v104._object = a3;
  if (v49)
  {
    v120 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49 & ~(v49 >> 63), 0);
    if (v49 < 0)
    {
      __break(1u);
      goto LABEL_50;
    }
    v51 = 0;
    v115 = v48 & 0xC000000000000001;
    v118 = v48;
    v52 = v49;
    do
    {
      if (v115)
        v53 = (char *)MEMORY[0x24954B748](v51, v48);
      else
        v53 = (char *)*(id *)(v48 + 8 * v51 + 32);
      v54 = v53;
      v55 = (uint64_t *)&v53[OBJC_IVAR___SGInput_name];
      v56._countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      String.append(_:)(v56);
      swift_bridgeObjectRelease();
      v57._countAndFlagsBits = 62;
      v57._object = (void *)0xE100000000000000;
      String.append(_:)(v57);
      v58 = *v55;
      v59 = (void *)v55[1];
      swift_bridgeObjectRetain();
      v60._countAndFlagsBits = v58;
      v60._object = v59;
      String.append(_:)(v60);

      swift_bridgeObjectRelease();
      v62 = *(_QWORD *)(v120 + 16);
      v61 = *(_QWORD *)(v120 + 24);
      if (v62 >= v61 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1);
      ++v51;
      *(_QWORD *)(v120 + 16) = v62 + 1;
      v63 = v120 + 16 * v62;
      *(_QWORD *)(v63 + 32) = 0x5F7475706E693CLL;
      *(_QWORD *)(v63 + 40) = 0xE700000000000000;
      v48 = v118;
    }
    while (v52 != v51);
    swift_bridgeObjectRelease();
    v50 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String], MEMORY[0x24BEE12B0]);
  v64 = BidirectionalCollection<>.joined(separator:)();
  v66 = v65;
  swift_bridgeObjectRelease();
  v67 = *(_QWORD *)(v113 + OBJC_IVAR___SGNode_outputs);
  v101 = v64;
  if (v67 >> 62)
  {
    swift_bridgeObjectRetain();
    v68 = _CocoaArrayWrapper.endIndex.getter();
    if (v68)
    {
LABEL_33:
      v121 = v50;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v68 & ~(v68 >> 63), 0);
      if ((v68 & 0x8000000000000000) == 0)
      {
        v93 = (uint64_t)v66;
        v69 = 0;
        v116 = v67 & 0xC000000000000001;
        v119 = v68;
        v70 = v67;
        do
        {
          if (v116)
            v71 = (char *)MEMORY[0x24954B748](v69, v67);
          else
            v71 = (char *)*(id *)(v67 + 8 * v69 + 32);
          v72 = v71;
          v73 = (uint64_t *)&v71[OBJC_IVAR___SGOutput_name];
          v74._countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          String.append(_:)(v74);
          swift_bridgeObjectRelease();
          v75._countAndFlagsBits = 62;
          v75._object = (void *)0xE100000000000000;
          String.append(_:)(v75);
          v77 = *v73;
          v76 = (void *)v73[1];
          swift_bridgeObjectRetain();
          v78._countAndFlagsBits = v77;
          v78._object = v76;
          String.append(_:)(v78);

          swift_bridgeObjectRelease();
          v80 = *(_QWORD *)(v121 + 16);
          v79 = *(_QWORD *)(v121 + 24);
          if (v80 >= v79 >> 1)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v80 + 1, 1);
          ++v69;
          *(_QWORD *)(v121 + 16) = v80 + 1;
          v81 = v121 + 16 * v80;
          *(_QWORD *)(v81 + 32) = 0x5F74757074756F3CLL;
          *(_QWORD *)(v81 + 40) = 0xE800000000000000;
          v67 = v70;
        }
        while (v119 != v69);
        swift_bridgeObjectRelease();
        v66 = (void *)v93;
        goto LABEL_45;
      }
LABEL_50:
      __break(1u);
      return;
    }
  }
  else
  {
    v68 = *(_QWORD *)((v67 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v68)
      goto LABEL_33;
  }
  swift_bridgeObjectRelease();
LABEL_45:
  v82 = BidirectionalCollection<>.joined(separator:)();
  v84 = v83;
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  String.append(_:)(v104);
  swift_bridgeObjectRelease();
  v85._countAndFlagsBits = 0x6C6562616C5B2022;
  v85._object = (void *)0xEC0000007B7B223DLL;
  String.append(_:)(v85);
  v86._countAndFlagsBits = v101;
  v86._object = v66;
  String.append(_:)(v86);
  swift_bridgeObjectRelease();
  v87._countAndFlagsBits = 2129021;
  v87._object = (void *)0xE300000000000000;
  String.append(_:)(v87);
  String.append(_:)(v109);
  swift_bridgeObjectRelease();
  v88._countAndFlagsBits = 2065726496;
  v88._object = (void *)0xE400000000000000;
  String.append(_:)(v88);
  v89._countAndFlagsBits = v82;
  v89._object = v84;
  String.append(_:)(v89);
  swift_bridgeObjectRelease();
  v90._countAndFlagsBits = 2260349;
  v90._object = (void *)0xE300000000000000;
  String.append(_:)(v90);
  if (v113 == a4 || v113 == a5)
  {
    v91._countAndFlagsBits = 0x746469776E657020;
    v91._object = (void *)0xEB00000000323D68;
    String.append(_:)(v91);
  }
  v92._countAndFlagsBits = 93;
  v92._object = (void *)0xE100000000000000;
  String.append(_:)(v92);
  *a6 = 34;
  a6[1] = 0xE100000000000000;
}

void closure #2 in graphDotText(_:callNode:)(uint64_t *a1@<X0>, uint64_t a2@<X2>, void *a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  Swift::String v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  void *v18;
  Swift::String v19;
  void *v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  void *v35;
  uint64_t *v36;
  uint64_t v37;
  void *v38;
  unint64_t v39;
  void *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  void *v59;
  _QWORD *v60;
  uint64_t v61;
  void *v62;
  void *v63;

  v7 = *a1;
  v8 = OBJC_IVAR___SGEdge_from;
  v9 = SGGraph.nodeWithOutput(_:)(*(char **)(*a1 + OBJC_IVAR___SGEdge_from));
  if (!v9)
    goto LABEL_7;
  v10 = (char *)v9;
  v11 = OBJC_IVAR___SGEdge_to;
  v12 = SGGraph.nodeWithInput(_:)(*(char **)(v7 + OBJC_IVAR___SGEdge_to));
  if (!v12)
  {

LABEL_7:
    *a4 = 0;
    a4[1] = 0;
    return;
  }
  v60 = a4;
  v61 = v11;
  v13 = (char *)v12;
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = 95;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  v59 = v10;
  v15 = *(_QWORD *)&v10[OBJC_IVAR___SGNode_name];
  v16 = *(void **)&v10[OBJC_IVAR___SGNode_name + 8];
  swift_bridgeObjectRetain();
  v17._countAndFlagsBits = v15;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18 = a3;
  v63 = a3;
  swift_bridgeObjectRetain();
  v19._countAndFlagsBits = 95;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v62 = v13;
  v21 = *(_QWORD *)&v13[OBJC_IVAR___SGNode_name];
  v20 = *(void **)&v13[OBJC_IVAR___SGNode_name + 8];
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = v21;
  v22._object = v20;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = a2;
  v23._object = v18;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 0x74757074756F3A22;
  v24._object = (void *)0xE90000000000005FLL;
  String.append(_:)(v24);
  lazy protocol witness table accessor for type String and conformance String();
  v25._countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 0x22203E2D20653ALL;
  v26._object = (void *)0xE700000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = a2;
  v27._object = v63;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 0x5F7475706E693A22;
  v28._object = (void *)0xE800000000000000;
  String.append(_:)(v28);
  v29._countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 30522;
  v30._object = (void *)0xE200000000000000;
  String.append(_:)(v30);
  v31 = (uint64_t *)(*(_QWORD *)(v7 + v8) + OBJC_IVAR___SGOutput_type);
  swift_beginAccess();
  v32 = SGDataType.canonicalized()(*v31);
  v33 = SGDataType.stringValue.getter(v32);
  v35 = v34;
  v36 = (uint64_t *)(*(_QWORD *)(v7 + v61) + OBJC_IVAR___SGInput_type);
  swift_beginAccess();
  v37 = SGDataType.canonicalized()(*v36);
  v39 = SGDataType.stringValue.getter(v37);
  v40 = v38;
  if (v33 == v39 && v35 == v38)
  {
    v41 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v41 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (v33 != v39)
      goto LABEL_15;
LABEL_14:
    if (v35 == v40)
      goto LABEL_16;
    goto LABEL_15;
  }
  v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v43 = v41[2];
  v42 = v41[3];
  if (v43 >= v42 >> 1)
    v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v42 > 1), v43 + 1, 1, v41);
  v41[2] = v43 + 1;
  v44 = &v41[2 * v43];
  v44[4] = 0xD000000000000043;
  v44[5] = 0x8000000245FCCE60;
  if (v33 == v39)
    goto LABEL_14;
LABEL_15:
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    v46._countAndFlagsBits = v33;
    v46._object = v35;
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v47._countAndFlagsBits = 0x209286E220;
    v47._object = (void *)0xA500000000000000;
    String.append(_:)(v47);
    v48._countAndFlagsBits = v39;
    v48._object = v40;
    String.append(_:)(v48);
    goto LABEL_18;
  }
LABEL_16:
  swift_bridgeObjectRelease();
  v45._countAndFlagsBits = v33;
  v45._object = v35;
  String.append(_:)(v45);
LABEL_18:
  swift_bridgeObjectRelease();
  v49._countAndFlagsBits = 34;
  v49._object = (void *)0xE100000000000000;
  String.append(_:)(v49);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v41[2] + 1, 1, v41);
  v51 = v41[2];
  v50 = v41[3];
  if (v51 >= v50 >> 1)
    v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v50 > 1), v51 + 1, 1, v41);
  v41[2] = v51 + 1;
  v52 = &v41[2 * v51];
  v52[4] = 0x6562616C6C696174;
  v52[5] = 0xEB00000000223D6CLL;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String], MEMORY[0x24BEE12B0]);
  v53 = BidirectionalCollection<>.joined(separator:)();
  v55 = v54;
  swift_bridgeObjectRelease();
  v56._countAndFlagsBits = v53;
  v56._object = v55;
  String.append(_:)(v56);
  swift_bridgeObjectRelease();
  v57._countAndFlagsBits = 93;
  v57._object = (void *)0xE100000000000000;
  String.append(_:)(v57);
  v58._countAndFlagsBits = 23328;
  v58._object = (void *)0xE200000000000000;
  String.append(_:)(v58);
  swift_bridgeObjectRelease();

  *v60 = 34;
  v60[1] = 0xE100000000000000;
}

Swift::String __swiftcall tabs(_:)(Swift::Int a1)
{
  JUMPOUT(0x24954B0C4);
}

uint64_t SGGraph.nodegraphs(_:)(unint64_t a1)
{
  uint64_t v1;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  Swift::Int v33;
  id v34;
  Swift::Int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  id v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  id v61;
  char v62;
  uint64_t v63;
  void *v64;
  id v65;
  id v66;
  char v67;
  id v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  int64_t v75;
  double v76;
  uint64_t v77;
  int64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  size_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  char *v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  char v107;
  id v108;
  char v109;
  id v110;
  char v111;
  id v112;
  char v113;
  uint64_t v114;
  void **v115;
  void *v116;
  id v117;
  char v118;
  unint64_t v119;
  uint64_t result;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  unint64_t v124;
  BOOL v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  unsigned __int8 v133;
  unint64_t v134;
  id v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  void **v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;

  v3 = (unint64_t *)(v1 + OBJC_IVAR___SGGraph_nodes);
  swift_beginAccess();
  v4 = *v3;
  v150 = MEMORY[0x24BEE4AF8];
  if (*v3 >> 62)
    goto LABEL_136;
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v5)
  {
LABEL_137:
    swift_bridgeObjectRelease_n();
    v119 = MEMORY[0x24BEE4AF8];
    return specialized OrderedSet.init<A>(_:)(v119);
  }
  while (2)
  {
    v6 = 0;
    v134 = v4 & 0xC000000000000001;
    v121 = (_QWORD *)(v4 + 32);
    v124 = a1 + 1;
    v7 = __OFADD__(a1, 1);
    v125 = v7;
    v122 = v5;
    v123 = (_QWORD *)v4;
    while (1)
    {
      if (v134)
        v11 = (_BYTE *)MEMORY[0x24954B748](v6, v4);
      else
        v11 = (id)v121[v6];
      a1 = (unint64_t)v11;
      v12 = __OFADD__(v6, 1);
      v13 = v6 + 1;
      if (v12)
        goto LABEL_132;
      v138 = v13;
      v14 = &v11[OBJC_IVAR___SGNode_data];
      if ((v11[OBJC_IVAR___SGNode_data + 80] & 0xC0) != 0x40)
      {
        v8 = (_QWORD *)specialized OrderedSet.init<A>(_:)(MEMORY[0x24BEE4AF8]);
        v10 = v9;
        goto LABEL_8;
      }
      v15 = *(void **)v14;
      v136 = (void *)*((_QWORD *)v14 + 2);
      v137 = *((_QWORD *)v14 + 1);
      v16 = *((_QWORD *)v14 + 4);
      v135 = (id)*((_QWORD *)v14 + 3);
      v17 = *((_QWORD *)v14 + 5);
      v4 = *((_QWORD *)v14 + 6);
      v19 = *((_QWORD *)v14 + 7);
      v18 = *((_QWORD *)v14 + 8);
      v20 = *((_QWORD *)v14 + 9);
      v21 = v11[OBJC_IVAR___SGNode_data + 80];
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = xmmword_245FBF370;
      *(_QWORD *)(v22 + 32) = a1;
      v148 = v22;
      specialized Array._endMutation()();
      v133 = v21;
      v127 = v20;
      v128 = v18;
      v131 = v17;
      v132 = v16;
      v129 = v19;
      v130 = v4;
      outlined copy of NodeData(v15, v137, v136, v135, v16, v17, v4, v19, v18, v20, v21);
      a1 = (unint64_t)(id)a1;
      v23 = specialized OrderedSet.init<A>(_:)(v148);
      if (v125)
        goto LABEL_135;
      v25 = (_QWORD *)v23;
      v26 = v24;
      v27 = v15;
      SGGraph.nodegraphs(_:)(v124);
      v149 = v26;
      v29 = *(_QWORD *)(v28 + 16);
      if (v29)
        break;
      swift_retain();
      swift_retain();
      swift_release();
      v8 = v25;
      v5 = v122;
      v4 = (unint64_t)v123;
LABEL_119:
      swift_release();
      swift_release();
      swift_release();
      v10 = v149;
      outlined consume of NodeData(v27, v137, v136, v135, v132, v131, v130, v129, v128, v127, v133);
LABEL_8:

      specialized Array.append<A>(contentsOf:)((uint64_t)v8, v10);
      v6 = v138;
      if (v138 == v5)
      {
        swift_bridgeObjectRelease_n();
        v119 = v150;
        return specialized OrderedSet.init<A>(_:)(v119);
      }
    }
    v126 = a1;
    v141 = v28 + 32;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v30 = 0;
    v8 = v25;
    v31 = v15;
    v140 = v15;
    v139 = v29;
    while (1)
    {
      v32 = *(void **)(v141 + 8 * v30);
      v147 = (void **)(v149 + 32);
      if (v8)
        break;
      v63 = *(_QWORD *)(v149 + 16);
      if (!v63)
      {
        v144 = *(void **)(v141 + 8 * v30);
        v68 = v32;
        v37 = 0;
        v69 = v144;
        goto LABEL_61;
      }
      type metadata accessor for SGNode();
      v64 = *v147;
      v65 = v32;
      v66 = v64;
      v67 = static NSObject.== infix(_:_:)();

      if ((v67 & 1) == 0)
      {
        if (v63 == 1)
          goto LABEL_58;
        v106 = *(id *)(v149 + 40);
        v107 = static NSObject.== infix(_:_:)();

        if ((v107 & 1) == 0)
        {
          if (v63 == 2)
            goto LABEL_58;
          v108 = *(id *)(v149 + 48);
          v109 = static NSObject.== infix(_:_:)();

          if ((v109 & 1) == 0)
          {
            if (v63 == 3)
              goto LABEL_58;
            v110 = *(id *)(v149 + 56);
            v111 = static NSObject.== infix(_:_:)();

            if ((v111 & 1) == 0)
            {
              if (v63 == 4)
                goto LABEL_58;
              v112 = *(id *)(v149 + 64);
              v113 = static NSObject.== infix(_:_:)();

              if ((v113 & 1) == 0)
              {
                v114 = v63 - 5;
                v115 = (void **)(v149 + 72);
                while (v114)
                {
                  v116 = *v115++;
                  v117 = v116;
                  v118 = static NSObject.== infix(_:_:)();

                  --v114;
                  if ((v118 & 1) != 0)
                    goto LABEL_55;
                }
LABEL_58:
                v145 = v32;
                v37 = 0;
                v31 = v140;
                v69 = v145;
                goto LABEL_61;
              }
            }
          }
        }
      }
LABEL_55:

      v8 = 0;
      v31 = v140;
LABEL_18:
      if (++v30 == v29)
      {
        v27 = v31;
        swift_release_n();
        swift_release();
        v5 = v122;
        v4 = (unint64_t)v123;
        a1 = v126;
        goto LABEL_119;
      }
    }
    v4 = (unint64_t)(v8 + 2);
    v33 = v8[2];
    v34 = v32;
    swift_retain();
    v35 = NSObject._rawHashValue(seed:)(v33);
    v36 = 1 << v8[2];
    a1 = v36 - 1;
    if (__OFSUB__(v36, 1))
    {
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      swift_bridgeObjectRetain_n();
      v5 = _CocoaArrayWrapper.endIndex.getter();
      if (!v5)
        goto LABEL_137;
      continue;
    }
    break;
  }
  v142 = v30;
  v143 = v32;
  v37 = a1 & v35;
  v146 = v8 + 4;
  v38 = _HashTable.UnsafeHandle._startIterator(bucket:)(a1 & v35, v8 + 2, (uint64_t)(v8 + 4));
  if (v38)
  {
    v41 = v39;
    v42 = v40;
    v43 = v8;
    v44 = (v38 ^ a1) + ((uint64_t)v8[3] >> 6);
    if (v44 >= a1)
      v45 = a1;
    else
      v45 = 0;
    v46 = v44 - v45;
    type metadata accessor for SGNode();
    v47 = v147[v46];
    v48 = static NSObject.== infix(_:_:)();

    if ((v48 & 1) == 0)
    {
      a1 = 0;
      do
      {
        ++v37;
        v49 = *(_QWORD *)v4 & 0x3FLL;
        v50 = 1 << *(_QWORD *)v4;
        if (v37 == v50)
        {
          if ((a1 & 1) != 0)
          {
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            goto LABEL_140;
          }
          v8 = v43;
          v37 = 0;
          a1 = 1;
          if (v42 < v49)
          {
LABEL_34:
            v52 = (uint64_t)(v37 * v49) >> 6;
            if (v42)
            {
              if (__OFADD__(v49 << v49, 64))
                goto LABEL_124;
              v53 = (v49 << v49) + 126;
              if ((v49 << v49) + 64 >= 1)
                v53 = (v49 << v49) + 63;
              if (v52 + 1 == v53 >> 6)
                v52 = 0;
              else
                ++v52;
            }
            v54 = v49 - v42;
            if (__OFSUB__(v49, v42))
              goto LABEL_122;
            v55 = v52 == 2 && v49 == 5;
            v56 = 64;
            if (v55)
              v56 = 32;
            v12 = __OFSUB__(v56, v54);
            v57 = v56 - v54;
            if (v12)
              goto LABEL_123;
            v58 = v146[v52];
            v51 = ((v58 << v42) | v41) & (v50 - 1);
            v41 = v58 >> v54;
            v42 = v57;
            if (!v51)
            {
LABEL_59:
              v31 = v140;
              v29 = v139;
              goto LABEL_60;
            }
            goto LABEL_49;
          }
        }
        else
        {
          v8 = v43;
          if (v42 < v49)
            goto LABEL_34;
        }
        v12 = __OFSUB__(v42, v49);
        v42 -= v49;
        if (v12)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
          goto LABEL_125;
        }
        v51 = (v50 - 1) & v41;
        v41 >>= v49;
        if (!v51)
          goto LABEL_59;
LABEL_49:
        v59 = v50 - 1;
        v60 = (v51 ^ v59) + ((uint64_t)v8[3] >> 6);
        if (v60 < v59)
          v59 = 0;
        v61 = v147[v60 - v59];
        v62 = static NSObject.== infix(_:_:)();

      }
      while ((v62 & 1) == 0);
    }

    v8 = v43;
    swift_release();
    v31 = v140;
    v29 = v139;
    v30 = v142;
    goto LABEL_18;
  }
LABEL_60:
  swift_release();
  v30 = v142;
  v69 = v143;
LABEL_61:
  v4 = (unint64_t)v69;
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  a1 = v149;
  v70 = *(_QWORD *)(v149 + 16);
  if (!v8)
  {
    if (v70 <= 0xF)
    {

      v8 = 0;
      goto LABEL_18;
    }
    v72 = 0;
LABEL_73:
    v76 = ceil((double)(uint64_t)v70 / 0.75);
    if ((~*(_QWORD *)&v76 & 0x7FF0000000000000) == 0)
      goto LABEL_126;
    if (v76 <= -9.22337204e18)
      goto LABEL_127;
    if (v76 >= 9.22337204e18)
      goto LABEL_128;
    if ((uint64_t)(v70 + 1) > (uint64_t)v76)
      v77 = v70 + 1;
    else
      v77 = (uint64_t)v76;
    v78 = 64 - __clz(v77 - 1);
    if (v72 <= v78)
      v75 = v78;
    else
      v75 = v72;
LABEL_82:
    v79 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v149, v75, 0, v72);
    swift_release();

    v8 = (_QWORD *)v79;
    goto LABEL_18;
  }
  swift_beginAccess();
  v71 = v8[2] & 0x3FLL;
  if (v71 <= 4)
  {
    if (v70 < 0x10)
      goto LABEL_83;
    v72 = v8[3] & 0x3FLL;
    goto LABEL_73;
  }
  v73 = (double)(1 << v71) * 0.75;
  if ((~*(_QWORD *)&v73 & 0x7FF0000000000000) == 0)
    goto LABEL_129;
  if (v73 <= -9.22337204e18)
    goto LABEL_130;
  if (v73 >= 9.22337204e18)
    goto LABEL_131;
  if ((uint64_t)v70 > (uint64_t)v73)
  {
    v74 = v8[3];
    v75 = v74 & 0x3F;
    if (v70 > 0xF)
    {
      v72 = v74 & 0x3F;
      goto LABEL_73;
    }
    v72 = v74 & 0x3F;
    if ((v74 & 0x3F) == 0)
    {

      swift_release();
      v8 = 0;
      goto LABEL_18;
    }
    goto LABEL_82;
  }
LABEL_83:
  if ((swift_isUniquelyReferenced_native() & 1) != 0)
  {
LABEL_94:
    v92 = -1 << v8[2];
    v93 = v92 + 1;
    v94 = *(_QWORD *)(v149 + 16) + ~((uint64_t)v8[3] >> 6);
    v95 = v92 ^ ~(((v94 >> 63) & ~v92) + v94);
    v96 = (v8[2] & 0x3FLL) * v37;
    v97 = v96 >> 6;
    v8[(v96 >> 6) + 4] = (v95 << v96) | ((v93 << v96) - 1) & v8[(v96 >> 6) + 4];
    v98 = 64 - (v96 & 0x3F);
    v99 = v8[2];
    if (v98 < (v99 & 0x3Fu))
    {
      v100 = (v99 & 0x3F) << (v99 & 0x3F);
      v12 = __OFADD__(v100, 64);
      v101 = v100 + 64;
      if (v12)
        goto LABEL_134;
      v103 = v101 - 1;
      v102 = v101 < 1;
      v104 = v101 + 62;
      if (!v102)
        v104 = v103;
      if (v97 + 1 == v104 >> 6)
        v105 = 0;
      else
        v105 = v97 + 1;
      v8[v105 + 4] = v8[v105 + 4] & (-1 << (v99 - v98)) | (v95 >> v98);
    }

    goto LABEL_18;
  }
  v80 = v31;
  v81 = v8[2];
  v82 = (v81 & 0x3F) << v81;
  v83 = v82 + 64;
  if (__OFADD__(v82, 64))
    goto LABEL_133;
  v84 = v82 + 63;
  if (v83 < 1)
    v84 = v83 + 62;
  v85 = v84 >> 6;
  type metadata accessor for _HashTable.Storage();
  v86 = 8 * v85;
  v87 = swift_allocObject();
  v88 = v8[3];
  *(_QWORD *)(v87 + 16) = v81;
  *(_QWORD *)(v87 + 24) = v88;
  if (v83 > -63)
  {
    v89 = (_QWORD *)v87;
    v90 = (char *)(v87 + 32);
    if (v8 + 4 >= (_QWORD *)&v90[v86] || v90 >= (char *)&v8[v86 / 8 + 4])
    {
      v31 = v80;
      memcpy(v90, v8 + 4, v86);
      swift_release();
      v8 = v89;
      v29 = v139;
      goto LABEL_94;
    }
  }
LABEL_140:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static DotError.== infix(_:_:)()
{
  return 1;
}

void DotError.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int DotError.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

_QWORD *closure #1 in Graph.subgraphs()@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  unint64_t v34;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  int64_t v39;
  _OWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _OWORD v58[3];
  uint64_t v59;

  v3 = v2;
  v5 = (_OWORD *)*result;
  if (*result >> 61 != 6)
  {
    v40 = (_OWORD *)MEMORY[0x24BEE4AF8];
LABEL_33:
    *a2 = v40;
    return result;
  }
  v6 = v5[9];
  v56 = v5[8];
  v57 = v6;
  v58[0] = v5[10];
  *(_OWORD *)((char *)v58 + 9) = *(_OWORD *)((char *)v5 + 169);
  v7 = v5[5];
  v52 = v5[4];
  v53 = v7;
  v8 = v5[7];
  v54 = v5[6];
  v55 = v8;
  v9 = v5[2];
  v49 = v5[1];
  v50 = v9;
  v51 = v5[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Graph>);
  v10 = (_OWORD *)swift_allocObject();
  v11 = v55;
  v10[7] = v54;
  v10[8] = v11;
  v12 = v53;
  v10[5] = v52;
  v10[6] = v12;
  *(_OWORD *)((char *)v10 + 185) = *(_OWORD *)((char *)v58 + 9);
  v13 = v58[0];
  v14 = v56;
  v10[10] = v57;
  v10[11] = v13;
  v10[9] = v14;
  v15 = v49;
  v16 = v50;
  v17 = v51;
  v10[1] = xmmword_245FBECD0;
  v10[2] = v15;
  v10[3] = v16;
  v10[4] = v17;
  v18 = v53;
  v19 = *(_QWORD *)(v53 + 16);
  if (!v19)
  {
    outlined retain of Graph((uint64_t)&v49);
    outlined retain of Graph((uint64_t)&v49);
LABEL_32:
    v44 = v10;
    swift_bridgeObjectRetain();
    v41 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v41);
    outlined release of Graph((uint64_t)&v49);
    swift_bridgeObjectRelease();
    result = (_QWORD *)swift_bridgeObjectRelease();
    v40 = v44;
    goto LABEL_33;
  }
  outlined retain of Graph((uint64_t)&v49);
  swift_bridgeObjectRetain();
  outlined retain of Graph((uint64_t)&v49);
  swift_bridgeObjectRetain();
  v20 = 0;
  v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (2)
  {
    v22 = 48 * v20;
    while (1)
    {
      if (v20 >= v19)
      {
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v23 = v18 + v22;
      v24 = *(_QWORD *)(v18 + v22 + 56);
      if (v24 != -7)
        break;
      v25 = v20 + 1;
      if (__OFADD__(v20, 1))
        goto LABEL_35;
      ++v20;
      v22 += 48;
      if (v25 >= v19)
        goto LABEL_29;
    }
    v42 = a2;
    v26 = *(_BYTE *)(v23 + 72);
    v27 = *(_QWORD *)(v23 + 64);
    v44 = *(_OWORD **)(v23 + 32);
    v45 = *(_OWORD *)(v23 + 40);
    v46 = v24;
    v47 = v27;
    v48 = v26;
    closure #1 in Graph.subgraphs()(&v43, &v44);
    v59 = v3;
    v28 = v43;
    v29 = *(_QWORD *)(v43 + 16);
    v30 = v21[2];
    v31 = v30 + v29;
    if (__OFADD__(v30, v29))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)isUniquelyReferenced_nonNull_native && v31 <= v21[3] >> 1)
    {
      if (*(_QWORD *)(v28 + 16))
        goto LABEL_14;
LABEL_27:
      if (!v29)
      {
LABEL_28:
        ++v20;
        swift_bridgeObjectRelease();
        v3 = v59;
        a2 = v42;
        if ((uint64_t)v20 < v19)
          continue;
LABEL_29:
        swift_bridgeObjectRelease_n();
        goto LABEL_32;
      }
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    break;
  }
  if (v30 <= v31)
    v39 = v30 + v29;
  else
    v39 = v30;
  v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v39, 1, v21);
  if (!*(_QWORD *)(v28 + 16))
    goto LABEL_27;
LABEL_14:
  v33 = v21[2];
  if ((v21[3] >> 1) - v33 < v29)
    goto LABEL_38;
  v34 = (unint64_t)&v21[22 * v33 + 4];
  if (v28 + 32 >= v34 + 176 * v29 || v34 >= v28 + 32 + 176 * v29)
  {
    swift_arrayInitWithCopy();
    if (!v29)
      goto LABEL_28;
    v36 = v21[2];
    v37 = __OFADD__(v36, v29);
    v38 = v36 + v29;
    if (!v37)
    {
      v21[2] = v38;
      goto LABEL_28;
    }
    goto LABEL_39;
  }
LABEL_40:
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t graphDotText(representing:index:)(uint64_t a1, uint64_t a2)
{
  Swift::String v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _OWORD *inited;
  __int128 v35;
  __int128 v36;
  _OWORD *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  Swift::String v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  Swift::String v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;
  Swift::String v67;
  uint64_t v68;
  void *v69;
  void *v70;
  Swift::String v71;
  Swift::String v72;
  Swift::String v73;
  Swift::String v74;
  Swift::String v75;
  Swift::String v76;
  uint64_t v77;
  void *v78;
  void *v79;
  Swift::String v80;
  Swift::String v81;
  Swift::String v82;
  Swift::String v83;
  Swift::String v84;
  Swift::String v85;
  uint64_t v86;
  void *v87;
  void *v88;
  Swift::String v89;
  Swift::String v90;
  uint64_t v91;
  void *v92;
  void *v93;
  Swift::String v94;
  Swift::String v95;
  unint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  void *v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  char v124[8];
  uint64_t v125;
  __int128 v126;
  _BYTE v127[25];
  __int128 v128;
  _BYTE v129[25];
  uint64_t v130;

  *(_QWORD *)&v128 = 95;
  *((_QWORD *)&v128 + 1) = 0xE100000000000000;
  *(_QWORD *)&v126 = a2;
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4 = v128;
  v102 = *(void **)(a1 + 32);
  v103 = *(_QWORD *)(a1 + 24);
  v5 = *(_OWORD *)(a1 + 96);
  v128 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)v129 = v5;
  *(_OWORD *)&v129[9] = *(_OWORD *)(a1 + 105);
  v6 = v5;
  v7 = *(_OWORD *)(a1 + 128);
  v8 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)&v127[9] = *(_OWORD *)(a1 + 153);
  v126 = v7;
  *(_OWORD *)v127 = v8;
  v9 = v7;
  v10 = v8;
  v101 = (uint64_t *)a1;
  v11 = *(_QWORD *)(a1 + 64);
  v125 = v11;
  v12 = *(_QWORD *)(v11 + 16);
  v114 = v128;
  outlined copy of NodePersonality(v128);
  v130 = *((_QWORD *)&v128 + 1);
  swift_bridgeObjectRetain();
  v112 = v6;
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v9);
  swift_bridgeObjectRetain();
  v113 = v10;
  swift_bridgeObjectRetain();
  result = outlined retain of [Input]((uint64_t)&v125);
  if (!v12)
  {
    v107 = MEMORY[0x24BEE4AF8];
    goto LABEL_43;
  }
  v14 = 0;
  v110 = v11 + 56;
  v98 = v129[24];
  v97 = *(_QWORD *)&v129[16];
  v104 = v127[24];
  v105 = *(_QWORD *)&v127[8];
  v106 = v11 + 32;
  v99 = *(_QWORD *)&v129[8];
  v100 = *(_QWORD *)&v127[16];
  v15 = v11 + 104;
  v107 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    v16 = 48 * v14;
    if (*(_QWORD *)(v110 + 48 * v14) == -7)
      break;
LABEL_12:
    v20 = v106 + v16;
    v21 = *(_QWORD *)v20;
    v22 = *(_QWORD *)(v20 + 8);
    v24 = *(_QWORD *)(v20 + 16);
    v23 = *(_QWORD *)(v20 + 24);
    v109 = *(_QWORD *)(v20 + 32);
    ++v14;
    v111 = *(_BYTE *)(v20 + 40);
    outlined copy of NodePersonality(*(_QWORD *)v20);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized static NodePersonality.== infix(_:_:)(v21);
    if ((v25 & 1) != 0
      && (specialized static Array<A>.== infix(_:_:)(v22, v130) & 1) != 0
      && (specialized static Array<A>.== infix(_:_:)(v24, v112) & 1) != 0
      && v23 == v99)
    {
      if ((v111 & 1) != 0)
      {
        if ((v98 & 1) != 0)
          goto LABEL_32;
      }
      else
      {
        v26 = v98;
        if (v109 != v97)
          v26 = 1;
        if ((v26 & 1) == 0)
          goto LABEL_32;
      }
    }
    specialized static NodePersonality.== infix(_:_:)(v21);
    if ((v27 & 1) != 0
      && (specialized static Array<A>.== infix(_:_:)(v22, *((_QWORD *)&v9 + 1)) & 1) != 0
      && (specialized static Array<A>.== infix(_:_:)(v24, v113) & 1) != 0
      && v23 == v105)
    {
      if ((v111 & 1) == 0)
      {
        v28 = v104;
        if (v109 != v100)
          v28 = 1;
        if ((v28 & 1) == 0)
          goto LABEL_32;
        v111 = 0;
        goto LABEL_35;
      }
      if ((v104 & 1) == 0)
      {
        v111 = 1;
LABEL_35:
        v23 = v105;
        goto LABEL_36;
      }
LABEL_32:
      outlined consume of NodePersonality(v21);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (v14 >= v12)
        goto LABEL_43;
    }
    else
    {
LABEL_36:
      v29 = v107;
      result = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v115 = v107;
      if ((result & 1) == 0)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v107 + 16) + 1, 1);
        v29 = v115;
      }
      v31 = *(_QWORD *)(v29 + 16);
      v30 = *(_QWORD *)(v29 + 24);
      v32 = v31 + 1;
      if (v31 >= v30 >> 1)
      {
        v108 = v31 + 1;
        v96 = *(_QWORD *)(v29 + 16);
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
        v32 = v108;
        v31 = v96;
        v29 = v115;
      }
      *(_QWORD *)(v29 + 16) = v32;
      v107 = v29;
      v33 = v29 + 48 * v31;
      *(_QWORD *)(v33 + 32) = v21;
      *(_QWORD *)(v33 + 40) = v22;
      *(_QWORD *)(v33 + 48) = v24;
      *(_QWORD *)(v33 + 56) = v23;
      *(_QWORD *)(v33 + 64) = v109;
      *(_BYTE *)(v33 + 72) = v111;
      if (v14 >= v12)
        goto LABEL_43;
    }
  }
  v17 = v14 + 1;
  if (v14 + 1 >= v12)
  {
LABEL_43:
    outlined release of [Input]((uint64_t)&v125);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ShaderGraphNode>);
    inited = (_OWORD *)swift_initStackObject();
    v35 = v128;
    v36 = *(_OWORD *)v129;
    inited[1] = xmmword_245FBECD0;
    inited[2] = v35;
    inited[3] = v36;
    *(_OWORD *)((char *)inited + 57) = *(_OWORD *)&v129[9];
    outlined copy of NodePersonality(v114);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_SSs5NeverOTg504_s11d61Graph12graphDotText12representing5indexSSAA0B0V_SitKF20createF41StatementsL_ySaySSGSayAA0abI0VGFSSAJXEfU_SSA2HTf1cn_nTf4nggg_n((uint64_t)inited, v4, *((void **)&v4 + 1), (uint64_t)&v128, (uint64_t)&v126);
    outlined consume of NodePersonality(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    swift_arrayDestroy();
    v37 = (_OWORD *)swift_initStackObject();
    v37[1] = xmmword_245FBECD0;
    v38 = *(_OWORD *)v127;
    v37[2] = v126;
    v37[3] = v38;
    *(_OWORD *)((char *)v37 + 57) = *(_OWORD *)&v127[9];
    outlined copy of NodePersonality(v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v114);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_SSs5NeverOTg504_s11d61Graph12graphDotText12representing5indexSSAA0B0V_SitKF20createF41StatementsL_ySaySSGSayAA0abI0VGFSSAJXEfU_SSA2HTf1cn_nTf4nggg_n((uint64_t)v37, v4, *((void **)&v4 + 1), (uint64_t)&v128, (uint64_t)&v126);
    outlined consume of NodePersonality(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v114);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    swift_arrayDestroy();
    outlined copy of NodePersonality(v114);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_SSs5NeverOTg504_s11d61Graph12graphDotText12representing5indexSSAA0B0V_SitKF20createF41StatementsL_ySaySSGSayAA0abI0VGFSSAJXEfU_SSA2HTf1cn_nTf4nggg_n(v107, v4, *((void **)&v4 + 1), (uint64_t)&v128, (uint64_t)&v126);
    outlined consume of NodePersonality(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v114);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v39 = swift_bridgeObjectRelease();
    v40 = *v101;
    v41 = v101[1];
    v42 = v101[2];
    MEMORY[0x24BDAC7A8](v39);
    outlined retain of Graph((uint64_t)v101);
    swift_retain();
    swift_retain();
    swift_retain();
    v43 = specialized Sequence.compactMap<A>(_:)(v40, v41, v42, (void (*)(_QWORD *__return_ptr, uint64_t, __int128 *))partial apply for closure #1 in Graph.sinkNodes());
    swift_release();
    swift_release();
    swift_release();
    specialized Graph.DepthFirstEdgeIterator.init(_:initial:)(v101, v43, &v115);
    swift_bridgeObjectRetain();
    specialized Sequence.compactMap<A>(_:)((uint64_t *)&v115, (uint64_t)v101, v4, *((void **)&v4 + 1));
    swift_bridgeObjectRelease();
    outlined release of Graph((uint64_t)v101);
    v122 = v115;
    v44 = v116;
    outlined init with take of MetalFunctionNode?((uint64_t)&v122, (uint64_t)v124, &demangling cache variable for type metadata for _HashTable.Storage?);
    outlined release of _HashTable.Storage?((uint64_t)v124);
    v123 = *((_QWORD *)&v122 + 1);
    outlined release of _HashTable.Storage?((uint64_t)&v123);
    v121 = v44;
    outlined release of _HashTable.Storage?((uint64_t)&v121);
    v120 = v117;
    outlined release of [Input]((uint64_t)&v120);
    v119 = v118;
    outlined release of [Input]((uint64_t)&v119);
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(528);
    v45._countAndFlagsBits = 0xD000000000000012;
    v45._object = (void *)0x8000000245FCCC10;
    String.append(_:)(v45);
    v46._countAndFlagsBits = v103;
    v46._object = v102;
    String.append(_:)(v46);
    v47._countAndFlagsBits = 0xD00000000000002BLL;
    v47._object = (void *)0x8000000245FCCC30;
    String.append(_:)(v47);
    v48._countAndFlagsBits = v103;
    v48._object = v102;
    String.append(_:)(v48);
    v49._countAndFlagsBits = 0x22202020200A0A22;
    v49._object = (void *)0xE800000000000000;
    String.append(_:)(v49);
    v50._countAndFlagsBits = v103;
    v50._object = v102;
    String.append(_:)(v50);
    v51._object = (void *)0x8000000245FCCC60;
    v51._countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v51);
    v52._countAndFlagsBits = v103;
    v52._object = v102;
    String.append(_:)(v52);
    v53._countAndFlagsBits = 0xD000000000000017;
    v53._object = (void *)0x8000000245FCCC80;
    String.append(_:)(v53);
    v54._countAndFlagsBits = v103;
    v54._object = v102;
    String.append(_:)(v54);
    v55._object = (void *)0x8000000245FCCCA0;
    v55._countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v55);
    v56._countAndFlagsBits = v103;
    v56._object = v102;
    String.append(_:)(v56);
    v57._countAndFlagsBits = 0x22203E2D2022315FLL;
    v57._object = (void *)0xE800000000000000;
    String.append(_:)(v57);
    v58._countAndFlagsBits = v103;
    v58._object = v102;
    String.append(_:)(v58);
    v59._countAndFlagsBits = 0xD000000000000017;
    v59._object = (void *)0x8000000245FCCC80;
    String.append(_:)(v59);
    v60._countAndFlagsBits = v103;
    v60._object = v102;
    String.append(_:)(v60);
    v61._countAndFlagsBits = 0x22203E2D2022325FLL;
    v61._object = (void *)0xE800000000000000;
    String.append(_:)(v61);
    v62._countAndFlagsBits = v103;
    v62._object = v102;
    String.append(_:)(v62);
    v63._countAndFlagsBits = 0xD000000000000029;
    v63._object = (void *)0x8000000245FCCCC0;
    String.append(_:)(v63);
    v64._countAndFlagsBits = v103;
    v64._object = v102;
    String.append(_:)(v64);
    v65._countAndFlagsBits = 0xD000000000000035;
    v65._object = (void *)0x8000000245FCCCF0;
    String.append(_:)(v65);
    v66._countAndFlagsBits = v103;
    v66._object = v102;
    String.append(_:)(v66);
    v67._countAndFlagsBits = 0x2020200A3B22315FLL;
    v67._object = (void *)0xED00002020202020;
    String.append(_:)(v67);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String], MEMORY[0x24BEE12B0]);
    v68 = BidirectionalCollection<>.joined(separator:)();
    v70 = v69;
    swift_bridgeObjectRelease();
    v71._countAndFlagsBits = v68;
    v71._object = v70;
    String.append(_:)(v71);
    swift_bridgeObjectRelease();
    v72._countAndFlagsBits = 0xD00000000000001ELL;
    v72._object = (void *)0x8000000245FCCD30;
    String.append(_:)(v72);
    v73._countAndFlagsBits = v103;
    v73._object = v102;
    String.append(_:)(v73);
    v74._countAndFlagsBits = 0xD000000000000034;
    v74._object = (void *)0x8000000245FCCD50;
    String.append(_:)(v74);
    v75._countAndFlagsBits = v103;
    v75._object = v102;
    String.append(_:)(v75);
    v76._countAndFlagsBits = 0x2020200A3B22325FLL;
    v76._object = (void *)0xED00002020202020;
    String.append(_:)(v76);
    v77 = BidirectionalCollection<>.joined(separator:)();
    v79 = v78;
    swift_bridgeObjectRelease();
    v80._countAndFlagsBits = v77;
    v80._object = v79;
    String.append(_:)(v80);
    swift_bridgeObjectRelease();
    v81._countAndFlagsBits = 0xD00000000000001ELL;
    v81._object = (void *)0x8000000245FCCD30;
    String.append(_:)(v81);
    v82._countAndFlagsBits = v103;
    v82._object = v102;
    String.append(_:)(v82);
    v83._countAndFlagsBits = 0xD000000000000036;
    v83._object = (void *)0x8000000245FCCD90;
    String.append(_:)(v83);
    v84._countAndFlagsBits = v103;
    v84._object = v102;
    String.append(_:)(v84);
    v85._countAndFlagsBits = 0x2020200A3B22335FLL;
    v85._object = (void *)0xED00002020202020;
    String.append(_:)(v85);
    v86 = BidirectionalCollection<>.joined(separator:)();
    v88 = v87;
    swift_bridgeObjectRelease();
    v89._countAndFlagsBits = v86;
    v89._object = v88;
    String.append(_:)(v89);
    swift_bridgeObjectRelease();
    v90._countAndFlagsBits = 0xA0A7D202020200ALL;
    v90._object = (void *)0xEC00000020202020;
    String.append(_:)(v90);
    v91 = BidirectionalCollection<>.joined(separator:)();
    v93 = v92;
    swift_bridgeObjectRelease();
    v94._countAndFlagsBits = v91;
    v94._object = v93;
    String.append(_:)(v94);
    swift_bridgeObjectRelease();
    v95._countAndFlagsBits = 32010;
    v95._object = (void *)0xE200000000000000;
    String.append(_:)(v95);
    outlined consume of NodePersonality(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v114);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  v18 = 48 * v14++;
  while (v17 < v12)
  {
    if (*(_QWORD *)(v15 + v18) != -7)
    {
      v16 = v18 + 48;
      goto LABEL_12;
    }
    v19 = v14 + 1;
    if (__OFADD__(v14, 1))
      goto LABEL_45;
    ++v14;
    v18 += 48;
    if (v19 >= v12)
      goto LABEL_43;
  }
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

void closure #1 in createNodeStatements #1 (_:) in graphDotText(representing:index:)(__int128 *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  Swift::String v36;
  _BYTE v37[8];
  __int128 v38;
  _BYTE v39[25];
  _BYTE v40[8];

  v8 = *(__int128 *)((char *)a1 + 25);
  v9 = a1[1];
  v38 = *a1;
  *(_OWORD *)v39 = v9;
  *(_OWORD *)&v39[9] = v8;
  specialized ShaderGraphNode.dotLabel.getter(v38);
  v32 = v11;
  v33 = v10;
  swift_bridgeObjectRetain();
  v12 = swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph5InputVG_SSs5NeverOTg504_s11d111Graph12graphDotText12representing5indexSSAA0B0V_SitKF20createNodeStatementsL_ySaySSGSayAA0abI0VGFSSAJXEfU_SSAA5F6VXEfU_SSTf1cn_nTf4ng_nTm(v12, a2, a3, (uint64_t)v40, (uint64_t (*)(uint64_t))Input.dotID.getter);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String], MEMORY[0x24BEE12B0]);
  v31 = BidirectionalCollection<>.joined(separator:)();
  v14 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v15 = swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph5InputVG_SSs5NeverOTg504_s11d111Graph12graphDotText12representing5indexSSAA0B0V_SitKF20createNodeStatementsL_ySaySSGSayAA0abI0VGFSSAJXEfU_SSAA5F6VXEfU_SSTf1cn_nTf4ng_nTm(v15, a2, a3, (uint64_t)v37, (uint64_t (*)(uint64_t))Output.dotID.getter);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = BidirectionalCollection<>.joined(separator:)();
  v18 = v17;
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  v36._countAndFlagsBits = specialized ShaderGraphNode.dotID.getter();
  v36._object = v19;
  swift_bridgeObjectRetain();
  v20._countAndFlagsBits = a2;
  v20._object = a3;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 0x6C6562616C5B2022;
  v21._object = (void *)0xEC0000007B7B223DLL;
  String.append(_:)(v21);
  v22._countAndFlagsBits = v31;
  v22._object = v14;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 2129021;
  v23._object = (void *)0xE300000000000000;
  String.append(_:)(v23);
  v24._countAndFlagsBits = v33;
  v24._object = v32;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 2065726496;
  v25._object = (void *)0xE400000000000000;
  String.append(_:)(v25);
  v26._countAndFlagsBits = v16;
  v26._object = v18;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 2260349;
  v27._object = (void *)0xE300000000000000;
  String.append(_:)(v27);
  if ((specialized static ShaderGraphNode.== infix(_:_:)((uint64_t)&v38, a4) & 1) != 0
    || (specialized static ShaderGraphNode.== infix(_:_:)((uint64_t)&v38, a5) & 1) != 0)
  {
    v28._countAndFlagsBits = 0x746469776E657020;
    v28._object = (void *)0xEB00000000323D68;
    String.append(_:)(v28);
  }
  v29._countAndFlagsBits = 93;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  *a6 = 34;
  a6[1] = 0xE100000000000000;
}

__int128 *closure #2 in graphDotText(representing:index:)@<X0>(__int128 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, unint64_t a5@<X8>)
{
  int64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  void *v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  Swift::String v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  Swift::String v46;
  void *v47;
  Swift::String v48;
  Swift::String v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  _QWORD *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  uint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  Swift::String v67;
  uint64_t v68;
  unint64_t v69;
  __int128 v70;
  __int128 v71;

  v71 = *result;
  v70 = *(__int128 *)((char *)result + 56);
  if (*(_QWORD *)result == -7)
    goto LABEL_5;
  if ((v71 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v11 = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(v11 + 16);
  if ((unint64_t)v71 >= v12)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if ((_QWORD)v70 == -7)
  {
LABEL_5:
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    return result;
  }
  if ((unint64_t)v70 < v12)
  {
    v64 = (uint64_t *)a5;
    v15 = v11 + 32;
    v16 = *(_QWORD *)(v15 + 48 * v70);
    v66 = *(_QWORD *)(v15 + 48 * v71);
    outlined copy of NodePersonality(v66);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v65 = v16;
    outlined copy of NodePersonality(v16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    v68 = 34;
    v69 = 0xE100000000000000;
    v67._countAndFlagsBits = specialized ShaderGraphNode.dotID.getter();
    v67._object = v17;
    swift_bridgeObjectRetain();
    v18._countAndFlagsBits = a3;
    v18._object = a4;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    String.append(_:)(v67);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 2243106;
    v19._object = (void *)0xE300000000000000;
    String.append(_:)(v19);
    v67._countAndFlagsBits = Output.dotID.getter();
    v67._object = v20;
    swift_bridgeObjectRetain();
    v21._countAndFlagsBits = a3;
    v21._object = a4;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    String.append(_:)(v67);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 0x22203E2D20653A22;
    v22._object = (void *)0xE800000000000000;
    String.append(_:)(v22);
    v67._countAndFlagsBits = specialized ShaderGraphNode.dotID.getter();
    v67._object = v23;
    swift_bridgeObjectRetain();
    v24._countAndFlagsBits = a3;
    v24._object = a4;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    String.append(_:)(v67);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = 2243106;
    v25._object = (void *)0xE300000000000000;
    String.append(_:)(v25);
    v67._countAndFlagsBits = Input.dotID.getter();
    v67._object = v26;
    swift_bridgeObjectRetain();
    v27._countAndFlagsBits = a3;
    v27._object = a4;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    String.append(_:)(v67);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = 7813666;
    v28._object = (void *)0xE300000000000000;
    String.append(_:)(v28);
    type metadata accessor for MaterialXDataType();
    if (swift_dynamicCastClass())
    {
      swift_retain();
      MaterialXDataType.description.getter();
      lazy protocol witness table accessor for type String and conformance String();
      v29 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      v31 = v30;
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      type metadata accessor for MetalDataType();
      v32 = swift_dynamicCastClass();
      if (v32)
      {
        v34 = *(_QWORD *)(v32 + 24);
        v33 = *(void **)(v32 + 32);
        swift_retain();
        swift_bridgeObjectRetain();
        v35._countAndFlagsBits = v34;
        v35._object = v33;
        String.append(_:)(v35);
        swift_release();
        swift_bridgeObjectRelease();
        v29 = 0x3A6C6174656DLL;
        v31 = (void *)0xE600000000000000;
      }
      else
      {
        v29 = (*(uint64_t (**)(void))(**((_QWORD **)&v71 + 1) + 136))();
        v31 = v36;
      }
    }
    v7 = v64;
    if (swift_dynamicCastClass())
    {
      swift_retain();
      MaterialXDataType.description.getter();
      lazy protocol witness table accessor for type String and conformance String();
      v37 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      v39 = v38;
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      type metadata accessor for MetalDataType();
      v40 = swift_dynamicCastClass();
      if (v40)
      {
        v45 = *(_QWORD *)(v40 + 24);
        v44 = *(void **)(v40 + 32);
        swift_retain();
        swift_bridgeObjectRetain();
        v46._countAndFlagsBits = v45;
        v46._object = v44;
        String.append(_:)(v46);
        swift_release();
        swift_bridgeObjectRelease();
        v37 = 0x3A6C6174656DLL;
        v39 = (void *)0xE600000000000000;
      }
      else
      {
        v37 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**((_QWORD **)&v70 + 1) + 136))(0, v41, v42, v43);
        v39 = v47;
      }
    }
    if (v29 == v37 && v31 == v39 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v48._countAndFlagsBits = v29;
      v48._object = v31;
      String.append(_:)(v48);
      swift_bridgeObjectRelease();
      v49._countAndFlagsBits = 34;
      v49._object = (void *)0xE100000000000000;
      String.append(_:)(v49);
      v8 = 0x6562616C6C696174;
      v6 = 0xEB00000000223D6CLL;
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
      v9 = v10[2];
      a5 = v10[3];
    }
    else
    {
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
      v51 = v10[2];
      v50 = v10[3];
      if (v51 >= v50 >> 1)
        v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v50 > 1), v51 + 1, 1, v10);
      v10[2] = v51 + 1;
      v52 = &v10[2 * v51];
      v52[4] = 0xD000000000000044;
      v52[5] = 0x8000000245FCCDD0;
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      v53._countAndFlagsBits = v29;
      v53._object = v31;
      String.append(_:)(v53);
      swift_bridgeObjectRelease();
      v54._countAndFlagsBits = 0x209286E220;
      v54._object = (void *)0xA500000000000000;
      String.append(_:)(v54);
      v55._countAndFlagsBits = v37;
      v55._object = v39;
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      v56._countAndFlagsBits = 34;
      v56._object = (void *)0xE100000000000000;
      String.append(_:)(v56);
      v8 = 0x6562616C6C696174;
      v6 = 0xEB00000000223D6CLL;
      v9 = v10[2];
      a5 = v10[3];
    }
    v5 = v9 + 1;
    if (v9 < a5 >> 1)
      goto LABEL_25;
    goto LABEL_29;
  }
LABEL_28:
  __break(1u);
LABEL_29:
  v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(a5 > 1), v5, 1, v10);
LABEL_25:
  v10[2] = v5;
  v57 = &v10[2 * v9];
  v57[4] = v8;
  v57[5] = v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String], MEMORY[0x24BEE12B0]);
  v58 = BidirectionalCollection<>.joined(separator:)();
  v60 = v59;
  swift_bridgeObjectRelease();
  v61._countAndFlagsBits = v58;
  v61._object = v60;
  String.append(_:)(v61);
  swift_bridgeObjectRelease();
  v62._countAndFlagsBits = 93;
  v62._object = (void *)0xE100000000000000;
  String.append(_:)(v62);
  v63._countAndFlagsBits = 23328;
  v63._object = (void *)0xE200000000000000;
  String.append(_:)(v63);
  outlined consume of NodePersonality(v66);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(v65);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = (__int128 *)swift_bridgeObjectRelease();
  *v7 = v68;
  v7[1] = v69;
  return result;
}

uint64_t MetalFunctionNode.dotLabel.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v3 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v10((char *)&v27 - v11, v2, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HasDebugLabel);
  if (!swift_dynamicCast())
  {
    v33 = 0;
    v31 = 0u;
    v32 = 0u;
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v31, &demangling cache variable for type metadata for HasDebugLabel?);
    v10(v9, v2, a1);
LABEL_5:
    v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
    *(_QWORD *)&v31 = 25705;
    *((_QWORD *)&v31 + 1) = 0xE200000000000000;
    v29 = v17;
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v16 = *((_QWORD *)&v31 + 1);
    v14 = v31;
    goto LABEL_6;
  }
  v12 = *((_QWORD *)&v32 + 1);
  v13 = v33;
  __swift_project_boxed_opaque_existential_1(&v31, *((uint64_t *)&v32 + 1));
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  v16 = v15;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v31);
  v10(v9, v3, a1);
  if (!v16)
    goto LABEL_5;
LABEL_6:
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a1);
  *(_QWORD *)&v31 = v14;
  *((_QWORD *)&v31 + 1) = v16;
  v29 = 60;
  v30 = 0xE100000000000000;
  v27 = 40;
  v28 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  v19 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v21 = v20;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v31 = v19;
  *((_QWORD *)&v31 + 1) = v21;
  v29 = 62;
  v30 = 0xE100000000000000;
  v27 = 41;
  v28 = 0xE100000000000000;
  v22 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v24 = v23;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v31 = v22;
  *((_QWORD *)&v31 + 1) = v24;
  v29 = 34;
  v30 = 0xE100000000000000;
  v27 = 8796;
  v28 = 0xE200000000000000;
  v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  return v25;
}

void closure #1 in createNodeStatements #1 (_:) in createDotText(representing:inputNodeIDs:outputNodeIDs:)(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;

  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 48))(v6, v7);
  _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay11ShaderGraph14FunctionNodeIDVGG_SSs5NeverOTg506_sSi11f7Graph14hi36IDVSSIgyyo_Si6offset_AC7elementtSSs5K194OIegnrzr_TR04_s11a41Graph13createDotText12representing12inputd43IDs06outputhI0SSAA05MetalA7ProgramC_SayAA08c29H2IDVGAJtKF0cH10StatementsL_yS42SSGSayAA0kmH0_pGFSSAaM_pXEfU_SSSi_AItXEfU_Tf3nnnpf_nTf1cn_n(v8);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String], MEMORY[0x24BEE12B0]);
  v9 = BidirectionalCollection<>.joined(separator:)();
  v11 = v10;
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v12 = a1[3];
  v13 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v12, v13);
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 25705;
  v15._object = (void *)0xE200000000000000;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0x6C6562616C5B2022;
  v16._object = (void *)0xEC0000007B7B223DLL;
  String.append(_:)(v16);
  v17._countAndFlagsBits = v9;
  v17._object = v11;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0x6C757365723C7C7DLL;
  v18._object = (void *)0xEB00000000203E74;
  String.append(_:)(v18);
  v19 = a1[3];
  v20 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v19);
  v21._countAndFlagsBits = MetalFunctionNode.dotLabel.getter(v19, v20);
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 8829;
  v22._object = (void *)0xE200000000000000;
  String.append(_:)(v22);
  v23 = a1[3];
  v24 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v23);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 24))(v23, v24);
  if ((specialized Sequence<>.contains(_:)(v25, a2) & 1) != 0)
  {
    v26._countAndFlagsBits = 0x746469776E657020;
    v26._object = (void *)0xEB00000000323D68;
    String.append(_:)(v26);
  }
  v27._countAndFlagsBits = 93;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  *a3 = 34;
  a3[1] = 0xE100000000000000;
}

uint64_t closure #1 in closure #4 in createDotText(representing:inputNodeIDs:outputNodeIDs:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  Swift::String v27;
  Swift::String v28;
  _QWORD *v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  Swift::String v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v10 = a3;
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a3 + 272))(v37, a2);
  if (!v5)
  {
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    v35 = 34;
    v36 = 0xE100000000000000;
    v34._countAndFlagsBits = 25705;
    v34._object = (void *)0xE200000000000000;
    v40 = a2;
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = 25705;
    v12._object = (void *)0xE200000000000000;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 0x746C757365723A22;
    v13._object = (void *)0xEF22203E2D20653ALL;
    String.append(_:)(v13);
    v15 = a4[3];
    v14 = a4[4];
    __swift_project_boxed_opaque_existential_1(a4, v15);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 24))(v15, v14);
    v34._object = (void *)0xE200000000000000;
    v40 = v16;
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 25705;
    v18._object = (void *)0xE200000000000000;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 0x6772613A22;
    v19._object = (void *)0xE500000000000000;
    String.append(_:)(v19);
    v34._countAndFlagsBits = a1;
    v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 30522;
    v21._object = (void *)0xE200000000000000;
    String.append(_:)(v21);
    v10 = 34;
    if ((specialized Sequence<>.contains(_:)(a2, *a5) & 1) == 0)
    {
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      strcpy((char *)&v34, " [headlabel=\"");
      HIWORD(v34._object) = -4864;
      v22 = v38;
      v23 = v39;
      __swift_project_boxed_opaque_existential_1(v37, v38);
      v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(v22, v23);
      v25 = *(_QWORD *)(v24 + 24);
      v26 = *(void **)(v24 + 32);
      swift_bridgeObjectRetain();
      swift_release();
      v27._countAndFlagsBits = v25;
      v27._object = v26;
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v28._countAndFlagsBits = 23842;
      v28._object = (void *)0xE200000000000000;
      String.append(_:)(v28);
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      v29 = (_QWORD *)*a5;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a5 = (uint64_t)v29;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
        *a5 = (uint64_t)v29;
      }
      v32 = v29[2];
      v31 = v29[3];
      if (v32 >= v31 >> 1)
        v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v29);
      v29[2] = v32 + 1;
      v29[v32 + 4] = a2;
      *a5 = (uint64_t)v29;
      v10 = v35;
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v37);
  }
  return v10;
}

unint64_t lazy protocol witness table accessor for type DotError and conformance DotError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DotError and conformance DotError;
  if (!lazy protocol witness table cache variable for type DotError and conformance DotError)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for DotError, &type metadata for DotError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DotError and conformance DotError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DotError and conformance DotError;
  if (!lazy protocol witness table cache variable for type DotError and conformance DotError)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for DotError, &type metadata for DotError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DotError and conformance DotError);
  }
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v6 = *(_QWORD *)(a4 + 16);
  if (a2)
  {
    if (a3)
    {
      if (a3 < 0)
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      if (!v6)
      {
LABEL_20:
        v8 = 0;
        goto LABEL_17;
      }
      v8 = v6 - 1;
      v9 = a4 + 56 * (v6 - 1);
      v11 = *(_QWORD *)(v9 + 32);
      v10 = *(_QWORD *)(v9 + 40);
      v12 = *(_QWORD *)(v9 + 48);
      v13 = *(_QWORD *)(v9 + 56);
      v14 = *(_QWORD *)(v9 + 64);
      v15 = *(_BYTE *)(v9 + 72);
      v16 = *(_QWORD *)(v9 + 80);
      *(_QWORD *)a2 = v11;
      *(_QWORD *)(a2 + 8) = v10;
      *(_QWORD *)(a2 + 16) = v12;
      *(_QWORD *)(a2 + 24) = v13;
      *(_QWORD *)(a2 + 32) = v14;
      *(_BYTE *)(a2 + 40) = v15;
      *(_QWORD *)(a2 + 48) = v16;
      if (a3 == 1)
      {
LABEL_15:
        v6 = a3;
      }
      else if (v6 != 1)
      {
        v17 = 0;
        v18 = a3 - 2;
        v19 = a4 + 56 * v6 - 40;
        v20 = a2 + 56;
        while (v6 + v17 - 1 <= *(_QWORD *)(a4 + 16))
        {
          v21 = *(_QWORD *)(v19 - 32);
          v22 = *(_QWORD *)(v19 - 24);
          v23 = *(_QWORD *)(v19 - 16);
          v24 = *(_QWORD *)(v19 - 8);
          v25 = *(_BYTE *)v19;
          v26 = *(_QWORD *)(v19 + 8);
          *(_QWORD *)v20 = *(_QWORD *)(v19 - 40);
          *(_QWORD *)(v20 + 8) = v21;
          *(_QWORD *)(v20 + 16) = v22;
          *(_QWORD *)(v20 + 24) = v23;
          *(_QWORD *)(v20 + 32) = v24;
          *(_BYTE *)(v20 + 40) = v25;
          *(_QWORD *)(v20 + 48) = v26;
          if (!(v18 + v17))
          {
            swift_retain();
            swift_bridgeObjectRetain();
            v8 = v6 + v17 - 2;
            goto LABEL_15;
          }
          swift_retain();
          swift_bridgeObjectRetain();
          --v17;
          v19 -= 56;
          v20 += 56;
          if (v6 + v17 == 1)
          {
            v8 = 0;
            goto LABEL_16;
          }
        }
        __break(1u);
        goto LABEL_19;
      }
LABEL_16:
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v8 = *(_QWORD *)(a4 + 16);
      v6 = 0;
    }
  }
  else
  {
    v8 = *(_QWORD *)(a4 + 16);
    v6 = 0;
  }
LABEL_17:
  *a1 = a4;
  a1[1] = v8;
  return v6;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  v7 = a5;
  v8 = a4;
  v9 = result;
  if (!a2)
  {
    v11 = 0;
    v10 = 0;
LABEL_18:
    *v9 = v8;
    v9[1] = v7;
    v9[2] = a6;
    v9[3] = v11;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_18;
  }
  if (a3 < 0)
    goto LABEL_20;
  v11 = *(_QWORD *)(a6 + 16);
  if (!v11)
  {
    v10 = 0;
    goto LABEL_18;
  }
  result = *(_QWORD **)(a6 + 32);
  *a2 = result;
  if (a3 == 1)
  {
LABEL_17:
    swift_unknownObjectRetain();
    v11 = v10;
    goto LABEL_18;
  }
  if (v11 == 1)
  {
    v10 = 1;
    goto LABEL_17;
  }
  v12 = 0;
  v13 = a3 - 2;
  v14 = a2 + 1;
  while ((unint64_t)(v12 + 1) < *(_QWORD *)(a6 + 16))
  {
    v15 = *(_QWORD **)(a6 + 40 + 8 * v12);
    v14[v12] = v15;
    swift_unknownObjectRetain();
    if (v13 == v12)
      goto LABEL_16;
    ++v12;
    result = v15;
    if (v11 - 1 == v12)
    {
      v10 = v11;
LABEL_16:
      v8 = a4;
      v7 = a5;
      goto LABEL_17;
    }
  }
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v5 = a4 + 64;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v11 = 0;
    v9 = 0;
LABEL_39:
    *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (_QWORD *)v9;
  }
  v9 = a3;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v10 = a2;
  v22 = -1 << *(_BYTE *)(a4 + 32);
  v23 = result;
  v11 = 0;
  v12 = 0;
  v13 = (unint64_t)(63 - v6) >> 6;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v15 = v14 | (v11 << 6);
  while (1)
  {
    ++v12;
    v19 = (_QWORD *)(*(_QWORD *)(a4 + 56) + 24 * v15);
    v20 = v19[1];
    v21 = v19[2];
    *v10 = *v19;
    v10[1] = v20;
    v10[2] = v21;
    if (v12 == v9)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      goto LABEL_38;
    }
    v10 += 3;
    swift_bridgeObjectRetain();
    result = (_QWORD *)swift_retain();
    if (v8)
      goto LABEL_8;
LABEL_9:
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v16 >= v13)
      goto LABEL_33;
    v17 = *(_QWORD *)(v5 + 8 * v16);
    if (!v17)
    {
      v11 += 2;
      if (v16 + 1 >= v13)
      {
        v8 = 0;
        v11 = v16;
      }
      else
      {
        v17 = *(_QWORD *)(v5 + 8 * v11);
        if (v17)
          goto LABEL_14;
        v18 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_33;
        v17 = *(_QWORD *)(v5 + 8 * v18);
        if (v17)
        {
LABEL_17:
          v16 = v18;
          goto LABEL_18;
        }
        v11 = v16 + 3;
        if (v16 + 3 < v13)
        {
          v17 = *(_QWORD *)(v5 + 8 * v11);
          if (v17)
          {
LABEL_14:
            v16 = v11;
            goto LABEL_18;
          }
          v18 = v16 + 4;
          if (v16 + 4 >= v13)
          {
LABEL_33:
            v8 = 0;
            goto LABEL_37;
          }
          v17 = *(_QWORD *)(v5 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              v16 = v18 + 1;
              if (__OFADD__(v18, 1))
                goto LABEL_42;
              if (v16 >= v13)
              {
                v8 = 0;
                v11 = v13 - 1;
                goto LABEL_37;
              }
              v17 = *(_QWORD *)(v5 + 8 * v16);
              ++v18;
              if (v17)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v8 = 0;
        v11 = v16 + 2;
      }
LABEL_37:
      v9 = v12;
LABEL_38:
      v6 = v22;
      result = v23;
      goto LABEL_39;
    }
LABEL_18:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v11 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a4 + 16);
  if (a2)
  {
    if (a3)
    {
      if (a3 < 0)
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      if (!v6)
      {
LABEL_20:
        v8 = 0;
        goto LABEL_17;
      }
      v8 = v6 - 1;
      v9 = a4 + 16 * (v6 - 1);
      v10 = *(_QWORD *)(v9 + 40);
      *a2 = *(_QWORD *)(v9 + 32);
      a2[1] = v10;
      if (a3 == 1)
      {
LABEL_15:
        v6 = a3;
      }
      else if (v6 != 1)
      {
        v11 = 0;
        v12 = a3 - 2;
        v13 = (uint64_t *)(a4 + 16 * v6 + 8);
        v14 = a2 + 3;
        while (v6 + v11 - 1 <= *(_QWORD *)(a4 + 16))
        {
          v15 = *v13;
          *(v14 - 1) = *(v13 - 1);
          *v14 = v15;
          if (!(v12 + v11))
          {
            swift_bridgeObjectRetain();
            v8 = v6 + v11 - 2;
            goto LABEL_15;
          }
          swift_bridgeObjectRetain();
          --v11;
          v13 -= 2;
          v14 += 2;
          if (v6 + v11 == 1)
          {
            v8 = 0;
            goto LABEL_16;
          }
        }
        __break(1u);
        goto LABEL_19;
      }
LABEL_16:
      swift_bridgeObjectRetain();
    }
    else
    {
      v8 = *(_QWORD *)(a4 + 16);
      v6 = 0;
    }
  }
  else
  {
    v8 = *(_QWORD *)(a4 + 16);
    v6 = 0;
  }
LABEL_17:
  *a1 = a4;
  a1[1] = v8;
  return v6;
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for SGEdge, (unint64_t *)&lazy protocol witness table cache variable for type [SGEdge] and conformance [A], &demangling cache variable for type metadata for [SGEdge], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for SGNode, (unint64_t *)&lazy protocol witness table cache variable for type [SGNode] and conformance [A], &demangling cache variable for type metadata for [SGNode], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, &demangling cache variable for type metadata for MTLLibrary, &lazy protocol witness table cache variable for type [MTLLibrary] and conformance [A], &demangling cache variable for type metadata for [MTLLibrary], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for MetalFunctionDefinitionNode, (unint64_t *)&lazy protocol witness table cache variable for type [MetalFunctionDefinitionNode] and conformance [A], &demangling cache variable for type metadata for [MetalFunctionDefinitionNode], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (uint64_t *)&demangling cache variable for type metadata for MTLFunction, &lazy protocol witness table cache variable for type [MTLFunction] and conformance [A], &demangling cache variable for type metadata for [MTLFunction], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, &demangling cache variable for type metadata for MTLFunctionStitchingNode, (unint64_t *)&lazy protocol witness table cache variable for type [MTLFunctionStitchingNode] and conformance [A], &demangling cache variable for type metadata for [MTLFunctionStitchingNode], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  void (*v22)(_BYTE *, _QWORD);
  id *v23;
  id v24;
  uint64_t result;
  _BYTE v26[32];

  v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        v19 = lazy protocol witness table accessor for type [String] and conformance [A](a5, a6, MEMORY[0x24BEE12E0]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v15; ++i)
        {
          v21 = __swift_instantiateConcreteTypeFromMangledName(a6);
          v22 = (void (*)(_BYTE *, _QWORD))a7(v26, i, a3, v21, v19);
          v24 = *v23;
          v22(v26, 0);
          *(_QWORD *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v17 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  void (*v22)(_BYTE *, _QWORD);
  uint64_t *v23;
  uint64_t v24;
  uint64_t result;
  _BYTE v26[32];

  v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        v19 = lazy protocol witness table accessor for type [String] and conformance [A](a5, a6, MEMORY[0x24BEE12E0]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v15; ++i)
        {
          v21 = __swift_instantiateConcreteTypeFromMangledName(a6);
          v22 = (void (*)(_BYTE *, _QWORD))a7(v26, i, a3, v21, v19);
          v24 = *v23;
          swift_retain();
          v22(v26, 0);
          *(_QWORD *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v17 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  void (*v22)(_BYTE *, _QWORD);
  uint64_t *v23;
  uint64_t v24;
  uint64_t result;
  _BYTE v26[32];

  v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        v19 = lazy protocol witness table accessor for type [String] and conformance [A](a5, a6, MEMORY[0x24BEE12E0]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v15; ++i)
        {
          v21 = __swift_instantiateConcreteTypeFromMangledName(a6);
          v22 = (void (*)(_BYTE *, _QWORD))a7(v26, i, a3, v21, v19);
          v24 = *v23;
          swift_unknownObjectRetain();
          v22(v26, 0);
          *(_QWORD *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v17 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(a4);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v21;
  uint64_t v22;
  id v23;

  if (a1 >> 62)
    goto LABEL_19;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v8 = 4;
    v18 = v6;
    while (1)
    {
      v10 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x24954B748](v8 - 4, a1) : *(id *)(a1 + 8 * v8);
      v11 = v10;
      v12 = v8 - 3;
      if (__OFADD__(v8 - 4, 1))
        break;
      v23 = v10;
      closure #2 in graphDotText(_:callNode:)((uint64_t *)&v23, a3, a4, &v21);
      if (v4)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v7;
      }

      v13 = v22;
      if (v22)
      {
        v14 = v21;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
        v16 = v7[2];
        v15 = v7[3];
        if (v16 >= v15 >> 1)
          v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v7);
        v7[2] = v16 + 1;
        v9 = &v7[2 * v16];
        v9[4] = v14;
        v9[5] = v13;
        v6 = v18;
      }
      ++v8;
      if (v12 == v6)
      {
        swift_bridgeObjectRelease();
        return v7;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return (_QWORD *)MEMORY[0x24BEE4AF8];
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(__int128 *);
  __int128 v23;
  Swift::UInt v24;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  char v38;
  char v39;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t result;
  char v51;
  char v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  Swift::UInt v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD v117[6];
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  char v125[8];
  __int128 v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  char v130[8];
  uint64_t v131;
  _QWORD *v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  Swift::UInt v136;
  _OWORD v137[2];
  uint64_t v138;

  v5 = *a1;
  v4 = (_QWORD *)a1[1];
  v6 = a1[2];
  v7 = (_QWORD *)a1[3];
  v131 = a1[4];
  v132 = v7;
  v115 = v131;
  v116 = v7;
  swift_retain();
  swift_retain();
  swift_retain();
  outlined retain of [Input]((uint64_t)&v132);
  outlined retain of [Input]((uint64_t)&v131);
  v78 = v6;
  if (v7[2])
  {
    v80 = (_QWORD *)(v5 + 16);
    v81 = v4 + 4;
    v79 = v5 + 32;
    v76 = v4 + 7;
    v77 = v6 + 32;
    v74 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v82 = v5;
    v90 = v4;
    while (1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v8 = v7[2];
        if (!v8)
          goto LABEL_83;
      }
      else
      {
        v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
        v8 = v7[2];
        if (!v8)
        {
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_82;
        }
      }
      v9 = v8 - 1;
      v10 = &v7[7 * v9];
      v11 = *((_OWORD *)v10 + 2);
      v12 = *((_OWORD *)v10 + 3);
      v13 = *((_OWORD *)v10 + 4);
      v136 = v10[10];
      v134 = v12;
      v135 = v13;
      v133 = v11;
      v15 = v10[4];
      v14 = v10[5];
      v17 = v10[6];
      v16 = v10[7];
      v18 = v10[8];
      v19 = *((_BYTE *)v10 + 72);
      v20 = v10[10];
      v7[2] = v9;
      v88 = v16;
      v89 = v14;
      v86 = v18;
      v87 = v17;
      v85 = v19;
      v84 = v20;
      if (*(_QWORD *)(v115 + 16))
      {
        v97 = v115;
        Hasher.init(_seed:)();
        v138 = v133;
        Hasher._combine(_:)(v133);
        v21 = *((_QWORD *)&v133 + 1);
        v22 = *(void (**)(__int128 *))(**((_QWORD **)&v133 + 1) + 120);
        swift_retain();
        v22(&v102);
        swift_release();
        v23 = v134;
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v24 = v135;
        v95 = BYTE8(v135);
        v91 = v135;
        if (BYTE8(v135) == 1)
        {
          Hasher._combine(_:)(0);
        }
        else
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v24);
        }
        v94 = v136;
        Hasher._combine(_:)(v136);
        v25 = Hasher._finalize()();
        v26 = v97;
        v27 = -1 << *(_BYTE *)(v97 + 32);
        v28 = v25 & ~v27;
        if (((*(_QWORD *)(v97 + 56 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) != 0)
        {
          v83 = v15;
          v99 = v21;
          v92 = v7;
          v29 = ~v27;
          while (1)
          {
            v30 = *(_QWORD *)(v26 + 48) + 56 * v28;
            if (*(_QWORD *)v30 == v138)
            {
              v31 = *(_QWORD *)(v30 + 16);
              v32 = *(_QWORD *)(v30 + 24);
              v33 = *(_QWORD *)(v30 + 32);
              v34 = *(_BYTE *)(v30 + 40);
              v35 = *(_QWORD *)(v30 + 48);
              v36 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v30 + 8) + 128);
              swift_retain();
              swift_bridgeObjectRetain();
              if ((v36(v99) & 1) != 0)
              {
                if (v31 == (_QWORD)v23 && v32 == *((_QWORD *)&v23 + 1))
                {
                  swift_bridgeObjectRelease();
                  swift_release();
                  v26 = v97;
                  if ((v34 & 1) != 0)
                  {
LABEL_24:
                    v39 = v95;
                    if (v35 != v94)
                      v39 = 0;
                    if ((v39 & 1) != 0)
                    {
LABEL_35:
                      swift_bridgeObjectRelease();
                      swift_release();
                      v5 = v82;
                      v4 = v90;
                      v7 = v92;
                      goto LABEL_4;
                    }
                    goto LABEL_15;
                  }
                  goto LABEL_29;
                }
                v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_release();
                v26 = v97;
                if ((v38 & 1) != 0)
                {
                  if ((v34 & 1) != 0)
                    goto LABEL_24;
LABEL_29:
                  if ((v95 & 1) == 0 && v33 == v91 && v35 == v94)
                    goto LABEL_35;
                }
              }
              else
              {
                swift_bridgeObjectRelease();
                swift_release();
                v26 = v97;
              }
            }
LABEL_15:
            v28 = (v28 + 1) & v29;
            if (((*(_QWORD *)(v97 + 56 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) == 0)
            {
              v5 = v82;
              v15 = v83;
              v4 = v90;
              v7 = v92;
              goto LABEL_38;
            }
          }
        }
        v4 = v90;
      }
LABEL_38:
      v137[0] = v134;
      swift_retain();
      outlined retain of String((uint64_t)v137);
      specialized Set._Variant.insert(_:)((uint64_t)&v102, (Swift::Int)&v133);
      swift_release();
      swift_bridgeObjectRelease();
      v41 = v4[2];
      if (v5)
      {
        v42 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v133, (uint64_t)v81, v41, v80, v79);
        if ((v43 & 1) != 0)
          goto LABEL_3;
        v44 = v78;
        if ((v42 & 0x8000000000000000) != 0)
          goto LABEL_85;
      }
      else
      {
        if (!v41)
          goto LABEL_3;
        if (*v81 == (_QWORD)v133)
        {
          v42 = 0;
        }
        else
        {
          if (v41 == 1)
            goto LABEL_3;
          if (v4[5] == (_QWORD)v133)
          {
            v42 = 1;
          }
          else
          {
            if (v41 == 2)
              goto LABEL_3;
            if (v4[6] != (_QWORD)v133)
            {
              v64 = 0;
              while (v41 - 3 != v64)
              {
                v65 = v76[v64++];
                if (v65 == (_QWORD)v133)
                {
                  v42 = v64 + 2;
                  v44 = v78;
                  if ((v42 & 0x8000000000000000) == 0)
                    goto LABEL_46;
                  goto LABEL_85;
                }
              }
LABEL_3:
              swift_release();
              outlined release of String((uint64_t)v137);
              goto LABEL_4;
            }
            v42 = 2;
          }
        }
        v44 = v78;
      }
LABEL_46:
      if (v42 >= *(_QWORD *)(v44 + 16))
        goto LABEL_84;
      v93 = v7;
      v45 = (_QWORD *)(v77 + 48 * v42);
      v46 = v45[3];
      v47 = v45[4];
      v48 = v45[5];
      v49 = *(_QWORD *)(v47 + 16);
      if (v46)
      {
        swift_retain();
        outlined retain of String((uint64_t)v137);
        swift_retain();
        swift_retain();
        swift_retain();
        result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v133, v47 + 32, v49, (_QWORD *)(v46 + 16), v46 + 32);
        if ((v51 & 1) != 0)
          goto LABEL_58;
      }
      else
      {
        swift_retain();
        outlined retain of String((uint64_t)v137);
        swift_retain();
        swift_retain();
        result = specialized Collection<>.firstIndex(of:)(&v133, v47 + 32, v49);
        if ((v52 & 1) != 0)
        {
LABEL_58:
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          outlined release of String((uint64_t)v137);
          swift_release();
          outlined release of String((uint64_t)v137);
          v7 = v93;
          v4 = v90;
          v5 = v82;
          goto LABEL_4;
        }
      }
      if ((result & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_88:
        __break(1u);
        return result;
      }
      if (result >= *(_QWORD *)(v48 + 16))
        goto LABEL_88;
      v53 = (_QWORD *)(v48 + 56 * result);
      v54 = v53[4];
      v55 = v53[5];
      v57 = v53[6];
      v56 = v53[7];
      v138 = v48;
      v59 = v53[8];
      v58 = v53[9];
      v60 = v53[10];
      v98 = v54;
      outlined copy of Output?(v54, v55);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined release of String((uint64_t)v137);
      if (v55)
      {
        v96 = v59;
        v138 = v57;
        v116 = v93;
        specialized OrderedDictionary.subscript.getter(v98, v82, v90, v78, v117);
        outlined init with take of MetalFunctionNode?((uint64_t)v117, (uint64_t)&v118, &demangling cache variable for type metadata for Graph.Adjacent?);
        if (*((_QWORD *)&v118 + 1))
        {
          v126 = v118;
          v123 = v120;
          v61 = v119;
          v62 = v121;
          outlined init with take of MetalFunctionNode?((uint64_t)&v123, (uint64_t)v125, &demangling cache variable for type metadata for _HashTable.Storage?);
          v63 = *((_QWORD *)&v123 + 1);
          v124 = *((_QWORD *)&v123 + 1);
          v122 = v62;
          v128 = v126;
          outlined init with take of MetalFunctionNode?((uint64_t)&v128, (uint64_t)v130, &demangling cache variable for type metadata for _HashTable.Storage?);
          swift_retain();
          outlined retain of String((uint64_t)v137);
          outlined retain of _HashTable.Storage?((uint64_t)v125);
          outlined retain of _HashTable.Storage?((uint64_t)&v124);
          outlined retain of _HashTable.Storage?((uint64_t)&v122);
          outlined release of _HashTable.Storage?((uint64_t)v130);
          v129 = *((_QWORD *)&v128 + 1);
          outlined release of _HashTable.Storage?((uint64_t)&v129);
          v127 = v61;
          outlined release of _HashTable.Storage?((uint64_t)&v127);
          outlined release of _HashTable.Storage?((uint64_t)v125);
          outlined release of _HashTable.Storage?((uint64_t)&v124);
          outlined release of _HashTable.Storage?((uint64_t)&v122);
          outlined release of _HashTable.Storage?((uint64_t)&v122);
          outlined release of _HashTable.Storage?((uint64_t)v125);
        }
        else
        {
          swift_retain();
          outlined retain of String((uint64_t)v137);
          v63 = MEMORY[0x24BEE4AF8];
        }
        specialized Array.append<A>(contentsOf:)(v63);
        swift_release();
        outlined release of String((uint64_t)v137);
        *(_QWORD *)&v102 = v98;
        *((_QWORD *)&v102 + 1) = v55;
        v103 = v138;
        v104 = v56;
        v105 = v96;
        v106 = v58 & 1;
        v107 = v60;
        v108 = v15;
        v109 = v89;
        v110 = v87;
        v111 = v88;
        v112 = v86;
        v113 = v85;
        v114 = v84;
        closure #2 in graphDotText(representing:index:)(&v102, a2, a3, a4, (unint64_t)&v100);
        if (v75)
          goto LABEL_86;
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        v66 = v101;
        v5 = v82;
        v4 = v90;
        if (v101)
        {
          v67 = v100;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v74[2] + 1, 1, v74);
          v69 = v74[2];
          v68 = v74[3];
          if (v69 >= v68 >> 1)
            v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v68 > 1), v69 + 1, 1, v74);
          v74[2] = v69 + 1;
          v70 = &v74[2 * v69];
          v70[4] = v67;
          v70[5] = v66;
          v7 = v116;
        }
        else
        {
          v7 = v116;
        }
      }
      else
      {
        swift_release();
        outlined release of String((uint64_t)v137);
        v5 = v82;
        v7 = v93;
        v4 = v90;
      }
LABEL_4:
      if (!v7[2])
        goto LABEL_81;
    }
  }
  v74 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_81:
  v116 = v7;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
LABEL_82:
  swift_bridgeObjectRelease();
  return (unint64_t)v74;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  result = MEMORY[0x24BEE4AF8];
  v29 = MEMORY[0x24BEE4AF8];
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return result;
  v8 = 0;
  v9 = a1 + 32;
  v10 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    outlined init with copy of MetalFunctionNode(v9 + 40 * v8, (uint64_t)&v26);
    v11 = v27;
    v12 = v28;
    __swift_project_boxed_opaque_existential_1(&v26, v27);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 24))(v11, v12);
    v13 = *(_QWORD *)(a2 + 16);
    if (v13)
    {
      if (*(_QWORD *)(a2 + 32) == result)
      {
LABEL_3:
        outlined init with copy of MetalFunctionNode((uint64_t)&v26, (uint64_t)&v23);
        goto LABEL_4;
      }
      if (v13 != 1)
        break;
    }
LABEL_13:
    outlined init with copy of MetalFunctionNode((uint64_t)&v26, (uint64_t)&v23);
    v16 = v24;
    v17 = v25;
    __swift_project_boxed_opaque_existential_1(&v23, v24);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 24))(v16, v17);
    v18 = *(_QWORD *)(a3 + 16);
    if (!v18)
      goto LABEL_20;
    if (*(_QWORD *)(a3 + 32) != result)
    {
      if (v18 != 1)
      {
        v19 = 5;
        do
        {
          v20 = v19 - 3;
          if (__OFADD__(v19 - 4, 1))
            goto LABEL_28;
          if (*(_QWORD *)(a3 + 8 * v19) == result)
            goto LABEL_4;
          ++v19;
        }
        while (v20 != v18);
      }
LABEL_20:
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v23);
      outlined init with take of MetalFunctionNode(&v26, (uint64_t)&v23);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1);
      v10 = v29;
      v22 = *(_QWORD *)(v29 + 16);
      v21 = *(_QWORD *)(v29 + 24);
      if (v22 >= v21 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
        v10 = v29;
      }
      *(_QWORD *)(v10 + 16) = v22 + 1;
      outlined init with take of MetalFunctionNode(&v23, v10 + 40 * v22 + 32);
      goto LABEL_5;
    }
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v23);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v26);
LABEL_5:
    if (++v8 == v5)
      return v29;
  }
  v14 = 5;
  while (1)
  {
    v15 = v14 - 3;
    if (__OFADD__(v14 - 4, 1))
      break;
    if (*(_QWORD *)(a2 + 8 * v14) == result)
      goto LABEL_3;
    ++v14;
    if (v15 == v13)
      goto LABEL_13;
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  id v4;
  void *v5;
  unint64_t v6;
  uint64_t v8;

  swift_getObjectType();
  v8 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_17;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      v3 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v4 = (id)MEMORY[0x24954B748](v3, a1);
LABEL_9:
        v5 = v4;
        v6 = v3 + 1;
        if (__OFADD__(v3, 1))
          goto LABEL_16;
        if ((static NSObject.== infix(_:_:)() & 1) != 0 || (static NSObject.== infix(_:_:)() & 1) != 0)
        {

        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        ++v3;
        if (v6 == v2)
          return v8;
      }
      if (v3 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    v4 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGNodeCG_SSs5NeverOTg504_s11d46Graph12graphDotText_8callNodeSSAA7SGGraphC_AA6F51CSgtF06createG10StatementsL_ySaySSGSayAGGFSSAGXEfU_SSA2HTf1cn_nTf4nggg_n(unint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v23;
  _QWORD v24[2];
  uint64_t v25;

  v6 = v5;
  if (a1 >> 62)
    goto LABEL_18;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v9 = MEMORY[0x24BEE4AF8];
    if (!v8)
      return v9;
    v25 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0)
      break;
    v11 = 0;
    v9 = v25;
    while (v8 != v11)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v12 = (id)MEMORY[0x24954B748](v11, a1);
      else
        v12 = *(id *)(a1 + 8 * v11 + 32);
      v13 = v12;
      v23 = v12;
      closure #1 in createNodeStatements #1 (_:) in graphDotText(_:callNode:)((uint64_t *)&v23, a2, a3, a4, a5, v24);
      if (v6)
      {
        swift_release();

        return v9;
      }
      v6 = 0;

      v14 = v24[0];
      v15 = v24[1];
      v25 = v9;
      v17 = *(_QWORD *)(v9 + 16);
      v16 = *(_QWORD *)(v9 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        v9 = v25;
      }
      ++v11;
      *(_QWORD *)(v9 + 16) = v17 + 1;
      v18 = v9 + 16 * v17;
      *(_QWORD *)(v18 + 32) = v14;
      *(_QWORD *)(v18 + 40) = v15;
      if (v8 == v11)
        return v9;
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17MetalFunctionNode_pG_SSs5NeverOTg504_s11d41Graph13createDotText12representing12inputh20IDs06outputhI0SSAA05f18A7ProgramC_SayAA08g29H2IDVGAJtKF0cH10StatementsL_yS29SSGSayAA0kmH0_pGFSSAaM_pXEfU_SayAF0gH2IDVGTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  uint64_t v16;

  v3 = v2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v16 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    v5 = v16;
    for (i = (_QWORD *)(a1 + 32); ; i += 5)
    {
      closure #1 in createNodeStatements #1 (_:) in createDotText(representing:inputNodeIDs:outputNodeIDs:)(i, a2, v15);
      if (v3)
        break;
      v3 = 0;
      v9 = v15[0];
      v10 = v15[1];
      v16 = v5;
      v12 = *(_QWORD *)(v5 + 16);
      v11 = *(_QWORD *)(v5 + 24);
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        v5 = v16;
      }
      *(_QWORD *)(v5 + 16) = v12 + 1;
      v13 = v5 + 16 * v12;
      *(_QWORD *)(v13 + 32) = v9;
      *(_QWORD *)(v13 + 40) = v10;
      if (!--v4)
        return v5;
    }
    swift_release();
  }
  return v5;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph14FunctionNodeIDVG_AF05MetalfG0_psAE_pTg504_s11d41Graph13createDotText12representing12inputg20IDs06outputhI0SSAA05i18A7ProgramC_SayAA08F28H2IDVGAJtKFAA0kmH0_pAIKXEfU_AF0idR0CTf1cn_nTf4ng_nTm(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t *v7;
  void (*v8)(__int128 *__return_ptr, uint64_t);
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v13[2];
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v14 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v4 = v14;
    v7 = (uint64_t *)(a1 + 32);
    v8 = *(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 272);
    while (1)
    {
      v9 = *v7++;
      v8(v13, v9);
      if (v2)
        break;
      v14 = v4;
      v11 = *(_QWORD *)(v4 + 16);
      v10 = *(_QWORD *)(v4 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        v4 = v14;
      }
      *(_QWORD *)(v4 + 16) = v11 + 1;
      outlined init with take of MetalFunctionNode(v13, v4 + 40 * v11 + 32);
      if (!--v3)
        return v4;
    }
    swift_release();
  }
  return v4;
}

uint64_t partial apply for closure #1 in closure #4 in createDotText(representing:inputNodeIDs:outputNodeIDs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in closure #4 in createDotText(representing:inputNodeIDs:outputNodeIDs:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD **)(v2 + 24), *(uint64_t **)(v2 + 32));
}

void specialized ShaderGraphNode.dotLabel.getter(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_245F49EB0()
{
  Swift::String v0;
  Swift::String v1;
  uint64_t v2;
  void *v3;
  void *v4;
  Swift::String v5;

  swift_bridgeObjectRetain();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v1._countAndFlagsBits = 28252;
  v1._object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  v2 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v4 = v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 1701080942;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph5InputVG_SSs5NeverOTg504_s11d111Graph12graphDotText12representing5indexSSAA0B0V_SitKF20createNodeStatementsL_ySaySSGSayAA0abI0VGFSSAJXEfU_SSAA5F6VXEfU_SSTf1cn_nTf4ng_nTm(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  int64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  Swift::String v23;
  uint64_t v24;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v24 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v6 = v24;
    v9 = a1 + 80;
    do
    {
      v10 = *(_QWORD *)(v9 - 32);
      v11 = *(void **)(v9 - 24);
      swift_retain();
      v12 = swift_bridgeObjectRetain();
      v23._countAndFlagsBits = a5(v12);
      v23._object = v13;
      swift_bridgeObjectRetain();
      v14._countAndFlagsBits = a2;
      v14._object = a3;
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      v15._countAndFlagsBits = 62;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      swift_bridgeObjectRetain();
      v16._countAndFlagsBits = v10;
      v16._object = v11;
      String.append(_:)(v16);
      swift_release();
      swift_bridgeObjectRelease_n();
      v18 = *(_QWORD *)(v24 + 16);
      v17 = *(_QWORD *)(v24 + 24);
      if (v18 >= v17 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
      v9 += 56;
      *(_QWORD *)(v24 + 16) = v18 + 1;
      v19 = v24 + 16 * v18;
      *(_QWORD *)(v19 + 32) = 60;
      *(_QWORD *)(v19 + 40) = 0xE100000000000000;
      --v5;
    }
    while (v5);
  }
  return v6;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_SSs5NeverOTg504_s11d61Graph12graphDotText12representing5indexSSAA0B0V_SitKF20createF41StatementsL_ySaySSGSayAA0abI0VGFSSAJXEfU_SSA2HTf1cn_nTf4nggg_n(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  _QWORD v29[2];
  uint64_t v30;

  v6 = v5;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = MEMORY[0x24BEE4AF8];
  if (v7)
  {
    v30 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    v8 = v30;
    for (i = (uint64_t *)(a1 + 40); ; i += 6)
    {
      v12 = *(i - 1);
      v13 = *i;
      v14 = i[1];
      v15 = *((_BYTE *)i + 32);
      *(_QWORD *)&v25 = v12;
      *((_QWORD *)&v25 + 1) = v13;
      v26 = v14;
      v27 = *((_OWORD *)i + 1);
      v28 = v15;
      outlined copy of NodePersonality(v12);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      closure #1 in createNodeStatements #1 (_:) in graphDotText(representing:index:)(&v25, a2, a3, a4, a5, v29);
      if (v6)
        break;
      v6 = 0;
      outlined consume of NodePersonality(v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16 = v29[0];
      v17 = v29[1];
      v30 = v8;
      v19 = *(_QWORD *)(v8 + 16);
      v18 = *(_QWORD *)(v8 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        v8 = v30;
      }
      *(_QWORD *)(v8 + 16) = v19 + 1;
      v20 = v8 + 16 * v19;
      *(_QWORD *)(v20 + 32) = v16;
      *(_QWORD *)(v20 + 40) = v17;
      if (!--v7)
        return v8;
    }
    outlined consume of NodePersonality(v12);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v8;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay11ShaderGraph14FunctionNodeIDVGG_SSsAE_pTg506_sSi11f7Graph14hi7IDVSSs5C48_pIgyyozo_Si6offset_AC7elementtSSsAD_pIegnrzr_TRSiAJSSsAE_pIgyyozo_Tf1cn_nTf4ng_n(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;

  v16 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v4 = *(_QWORD *)(a1 + 16);
  v15 = a1;
  swift_bridgeObjectRetain();
  if (v4)
  {
    v5 = 0;
    while (1)
    {
      v6 = a2(v5, *(_QWORD *)(v15 + 8 * v5 + 32));
      if (v2)
        break;
      v8 = v6;
      v9 = v7;
      v11 = *(_QWORD *)(v16 + 16);
      v10 = *(_QWORD *)(v16 + 24);
      if (v11 >= v10 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      ++v5;
      *(_QWORD *)(v16 + 16) = v11 + 1;
      v12 = v16 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v8;
      *(_QWORD *)(v12 + 40) = v9;
      if (v4 == v5)
        goto LABEL_9;
    }
    swift_release();
  }
LABEL_9:
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t storeEnumTagSinglePayload for DotError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_245F4A784 + 4 * byte_245FC322E[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_245F4A7A4 + 4 * byte_245FC3233[v4]))();
}

_BYTE *sub_245F4A784(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_245F4A7A4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_245F4A7AC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_245F4A7B4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_245F4A7BC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_245F4A7C4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DotError()
{
  return &type metadata for DotError;
}

uint64_t OrderedDictionary.makeIterator()(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t OrderedDictionary.Iterator.next()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v22;
  char *v23;
  char *v24;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v7 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v23 - v10;
  v12 = *(_QWORD *)(v2 + 24);
  swift_retain();
  v13 = ContiguousArray.count.getter();
  swift_release();
  if (v12 >= v13)
  {
    v22 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a2, 1, 1, v22);
  }
  else
  {
    v23 = &v11[*(int *)(TupleTypeMetadata2 + 48)];
    v24 = a2;
    swift_retain();
    swift_retain();
    ContiguousArray.subscript.getter();
    swift_release();
    swift_release();
    swift_retain();
    v14 = v23;
    ContiguousArray.subscript.getter();
    swift_release();
    *(_QWORD *)(v2 + 24) = v12 + 1;
    v15 = &v9[*(int *)(TupleTypeMetadata2 + 48)];
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v4 - 8) + 32);
    v16(v9, v11, v4);
    v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v5 - 8) + 32);
    v17(v15, v14, v5);
    v18 = swift_getTupleTypeMetadata2();
    v19 = v24;
    v20 = &v24[*(int *)(v18 + 48)];
    v16(v24, v9, v4);
    v17(v20, v15, v5);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v19, 0, 1, v18);
  }
}

uint64_t OrderedDictionary.Iterator._base.getter(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t OrderedDictionary.Iterator._position.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t OrderedDictionary.Iterator._position.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*OrderedDictionary.Iterator._position.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t OrderedDictionary.underestimatedCount.getter()
{
  return ContiguousArray.count.getter();
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in OrderedDictionary<A, B>()
{
  JUMPOUT(0x24954C264);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance OrderedDictionary<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = specialized Sequence._copyToContiguousArray()(v2, a1, a2);
  swift_release();
  swift_release();
  swift_release();
  return v3;
}

_QWORD *initializeWithCopy for OrderedDictionary.Iterator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for OrderedDictionary.Iterator(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for OrderedDictionary.Iterator(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for OrderedDictionary.Iterator(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OrderedDictionary.Iterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for OrderedDictionary.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrderedDictionary.Iterator);
}

uint64_t static OrderedSet.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = type metadata accessor for OrderedSet(0, a5, a6, a4);
  MEMORY[0x24954C264](&protocol conformance descriptor for OrderedSet<A>, v6);
  return Sequence<>.elementsEqual<A>(_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance OrderedSet<A>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static OrderedSet.== infix(_:_:)(*a1, a1[1], *a2, a2[1], *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t specialized Dictionary.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  char v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;

  v4 = 0uLL;
  if (*(_QWORD *)(a2 + 16))
  {
    result = specialized __RawDictionaryStorage.find<A>(_:)(result);
    if ((v6 & 1) != 0)
    {
      v7 = *(_QWORD *)(a2 + 56) + 48 * result;
      v8 = *(_QWORD *)v7;
      v9 = *(_QWORD *)(v7 + 8);
      v10 = *(_QWORD *)(v7 + 16);
      v12 = *(_OWORD *)(v7 + 24);
      v11 = *(_BYTE *)(v7 + 40);
      outlined copy of NodePersonality(*(_QWORD *)v7);
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRetain();
      v4 = v12;
    }
    else
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v4 = 0uLL;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
  }
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = v10;
  *(_OWORD *)(a3 + 24) = v4;
  *(_BYTE *)(a3 + 40) = v11;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Graph.replaceCreateSamplerNodes()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  char v37;
  _QWORD *v38;

  v2 = v0;
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v3 + 16);
  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v6 = v3 + 32;
    v7 = v3 + 56;
    v8 = 0;
    v9 = swift_bridgeObjectRetain() + 104;
    v10 = MEMORY[0x24BEE4AF8];
    v29 = v7;
    v30 = v6;
    while (v8 < v4)
    {
      v14 = 48 * v8;
      if (*(_QWORD *)(v7 + 48 * v8) == -7)
      {
        if ((uint64_t)(v8 + 1) >= v4)
        {
LABEL_19:
          swift_bridgeObjectRelease();
          v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
          goto LABEL_21;
        }
        v15 = 48 * v8++;
        while (1)
        {
          if (*(_QWORD *)(v9 + v15) != -7)
          {
            v14 = v15 + 48;
            goto LABEL_16;
          }
          v16 = v8 + 1;
          if (__OFADD__(v8, 1))
            break;
          ++v8;
          v15 += 48;
          if (v16 >= v4)
            goto LABEL_19;
        }
        __break(1u);
        break;
      }
LABEL_16:
      v17 = v6 + v14;
      if (*(_QWORD *)v17 == 0xE000000000000008)
      {
        v18 = *(_QWORD *)(v17 + 16);
        v33 = *(_OWORD *)(v17 + 24);
        v31 = *(_BYTE *)(v17 + 40);
        v32 = *(_QWORD *)(v17 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        *(_QWORD *)&v34 = v10;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1);
          v10 = v34;
        }
        v12 = *(_QWORD *)(v10 + 16);
        v11 = *(_QWORD *)(v10 + 24);
        if (v12 >= v11 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
          v10 = v34;
        }
        *(_QWORD *)(v10 + 16) = v12 + 1;
        v13 = v10 + 48 * v12;
        *(_QWORD *)(v13 + 32) = 0xE000000000000008;
        *(_QWORD *)(v13 + 40) = v32;
        *(_QWORD *)(v13 + 48) = v18;
        *(_OWORD *)(v13 + 56) = v33;
        *(_BYTE *)(v13 + 72) = v31;
        v7 = v29;
        v6 = v30;
      }
      if ((uint64_t)++v8 >= v4)
        goto LABEL_19;
    }
    __break(1u);
  }
  else
  {
    v10 = MEMORY[0x24BEE4AF8];
LABEL_21:
    v38 = v5;
    v19 = *(_QWORD *)(v10 + 16);
    if (v19)
    {
      swift_bridgeObjectRetain();
      v20 = (uint64_t *)(v10 + 40);
      do
      {
        v22 = *(v20 - 1);
        v21 = *v20;
        v23 = v20[1];
        v24 = *((_BYTE *)v20 + 32);
        v25 = *((_OWORD *)v20 + 1);
        *(_QWORD *)&v34 = v22;
        *((_QWORD *)&v34 + 1) = v21;
        v35 = v23;
        v36 = v25;
        v37 = v24;
        outlined copy of NodePersonality(v22);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        closure #2 in Graph.replaceCreateSamplerNodes()(&v34, v2, &v38);
        if (v1)
        {
          outlined consume of NodePersonality(v22);
          swift_release_n();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_33;
        }
        outlined consume of NodePersonality(v22);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v20 += 6;
        --v19;
      }
      while (v19);
      swift_release_n();
      v26 = v38;
      v27 = v38[2];
      if (v27)
        goto LABEL_28;
    }
    else
    {
      swift_release();
      v26 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v27 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      if (v27)
      {
LABEL_28:
        swift_bridgeObjectRetain();
        v28 = 7;
        do
        {
          specialized Graph.remove(_:)(v26[v28]);
          v28 += 6;
          --v27;
        }
        while (v27);
        swift_bridgeObjectRelease();
      }
    }
LABEL_33:
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Graph.replaceWellKnownConstants()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t (*v18)(id);

  v18 = (uint64_t (*)(id))specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = v2 + 32;
    swift_bridgeObjectRetain_n();
    v5 = 0;
    while (1)
    {
      v6 = v4 + 48 * v5;
      v7 = *(_QWORD *)(v6 + 24);
      if (v7 == -7)
      {
        if ((uint64_t)++v5 >= v3)
          goto LABEL_10;
      }
      else
      {
        v9 = *(_QWORD *)v6;
        v8 = *(_QWORD *)(v6 + 8);
        v10 = *(_QWORD *)(v6 + 16);
        v11 = *(_BYTE *)(v6 + 40);
        v12 = *(_QWORD *)(v6 + 32);
        *(_QWORD *)&v13 = v9;
        *((_QWORD *)&v13 + 1) = v8;
        v14 = v10;
        v15 = v7;
        v16 = v12;
        v17 = v11;
        outlined copy of NodePersonality(v9);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        closure #1 in Graph.replaceWellKnownConstants()(&v13, &v18, v0);
        if (v1)
        {
          outlined consume of NodePersonality(v9);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          break;
        }
        ++v5;
        outlined consume of NodePersonality(v9);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((uint64_t)v5 >= v3)
          goto LABEL_10;
      }
      if (v5 >= v3)
      {
        __break(1u);
LABEL_10:
        swift_bridgeObjectRelease_n();
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Key()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(_BYTE *);
  _BYTE v4[72];
  _BYTE v5[80];

  outlined init with take of SGDataTypeStorage(v0, (uint64_t)v5);
  v1 = *(_QWORD *)(v0 + 72);
  Hasher.init(_seed:)();
  SGDataTypeStorage.hash(into:)();
  v2 = *(void (**)(_BYTE *))(*(_QWORD *)v1 + 120);
  swift_retain();
  v2(v4);
  swift_release();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Key(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v6;

  outlined init with take of SGDataTypeStorage(v1, (uint64_t)&v6);
  v3 = *(_QWORD *)(v1 + 72);
  SGDataTypeStorage.hash(into:)();
  v4 = *(void (**)(uint64_t))(*(_QWORD *)v3 + 120);
  swift_retain();
  v4(a1);
  return swift_release();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Key()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(_BYTE *);
  _BYTE v4[72];
  _BYTE v5[80];

  outlined init with take of SGDataTypeStorage(v0, (uint64_t)v5);
  v1 = *(_QWORD *)(v0 + 72);
  Hasher.init(_seed:)();
  SGDataTypeStorage.hash(into:)();
  v2 = *(void (**)(_BYTE *))(*(_QWORD *)v1 + 120);
  swift_retain();
  v2(v4);
  swift_release();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Key(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  _BYTE v9[80];
  _BYTE v10[80];

  outlined init with take of SGDataTypeStorage(a1, (uint64_t)v9);
  v4 = *(_QWORD *)(a1 + 72);
  outlined init with take of SGDataTypeStorage(a2, (uint64_t)v10);
  v5 = *(_QWORD *)(a2 + 72);
  specialized static SGDataTypeStorage.== infix(_:_:)((uint64_t)v9);
  if ((v6 & 1) != 0)
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 128))(v5);
  else
    v7 = 0;
  return v7 & 1;
}

void *one-time initialization function for wellKnownConstantNodeData()
{
  void *result;

  result = (void *)createWellKnownConstantNodeData()();
  wellKnownConstantNodeData._rawValue = result;
  return result;
}

uint64_t createWellKnownConstantNodeData()()
{
  char *rawValue;
  int64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (one-time initialization token for wellKnownConstantMap != -1)
    swift_once();
  rawValue = (char *)wellKnownConstantMap._rawValue;
  v1 = *((_QWORD *)wellKnownConstantMap._rawValue + 2);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v25 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v25;
    v3 = rawValue + 64;
    do
    {
      v20 = v1;
      v4 = (void *)*((_QWORD *)v3 - 2);
      v5 = (void *)*((_QWORD *)v3 - 1);
      v6 = *((_QWORD *)v3 + 2);
      v18 = *((_QWORD *)v3 + 1);
      v19 = *(_QWORD *)v3;
      v7 = *((_QWORD *)v3 + 3);
      v8 = *((_QWORD *)v3 + 4);
      v9 = *((_QWORD *)v3 + 5);
      v10 = v3[48];
      v11 = *((_QWORD *)v3 + 8);
      v23 = *((_QWORD *)v3 + 7);
      v24 = *((_QWORD *)v3 - 4);
      swift_retain();
      v22 = v6;
      v21 = v7;
      outlined copy of SGDataTypeStorage(v4, v5, v19, v18, v6, v7, v8, v9, v10);
      v25 = v2;
      v12 = *(_QWORD *)(v2 + 16);
      v13 = *(_QWORD *)(v2 + 24);
      swift_bridgeObjectRetain();
      if (v12 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v12 + 1, 1);
        v2 = v25;
      }
      *(_QWORD *)(v2 + 16) = v12 + 1;
      v14 = v2 + 96 * v12;
      *(_QWORD *)(v14 + 32) = v4;
      *(_QWORD *)(v14 + 40) = v5;
      *(_QWORD *)(v14 + 48) = v19;
      *(_QWORD *)(v14 + 56) = v18;
      *(_QWORD *)(v14 + 64) = v22;
      *(_QWORD *)(v14 + 72) = v21;
      *(_QWORD *)(v14 + 80) = v8;
      *(_QWORD *)(v14 + 88) = v9;
      *(_BYTE *)(v14 + 96) = v10;
      *(_QWORD *)(v14 + 104) = v24;
      *(_QWORD *)(v14 + 112) = v23;
      v3 += 112;
      *(_QWORD *)(v14 + 120) = v11;
      v1 = v20 - 1;
    }
    while (v20 != 1);
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v2 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Key, String>);
    v15 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v15 = MEMORY[0x24BEE4B00];
  }
  v25 = v15;
  v16 = swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v16, 1, &v25);
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t closure #2 in Graph.replaceCreateSamplerNodes()(__int128 *a1, uint64_t a2, _QWORD **a3)
{
  uint64_t v3;
  __int128 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t inited;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30[6];
  _OWORD v31[3];
  _OWORD v32[3];
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _OWORD v39[2];
  unint64_t v40;
  _QWORD v41[3];
  _QWORD **v42;

  v6 = a1[1];
  v38 = *a1;
  v39[0] = v6;
  *(_OWORD *)((char *)v39 + 9) = *(__int128 *)((char *)a1 + 25);
  v7 = swift_bridgeObjectRetain();
  v8 = specialized Sequence.compactMap<A>(_:)(v7, (_OWORD *)a2);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v8 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    v9 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v9 = MEMORY[0x24BEE4B00];
  }
  v29 = v9;
  v10 = (_QWORD *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v10, 1, &v29);
  if (v3)
  {
    result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    v42 = a3;
    v11 = swift_bridgeObjectRelease();
    if (one-time initialization token for constantCreateSamplerFunctionNameToMatchingArguments != -1)
      v11 = swift_once();
    MEMORY[0x24BDAC7A8](v11);
    v12 = swift_bridgeObjectRetain();
    v13 = specialized Sequence.first(where:)(v12, (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #2 in closure #2 in Graph.replaceCreateSamplerNodes());
    v15 = v14;
    swift_release();
    result = swift_bridgeObjectRelease();
    if (v15)
    {
      swift_bridgeObjectRelease();
      v17 = swift_allocObject();
      *(_QWORD *)(v17 + 16) = v13;
      *(_QWORD *)(v17 + 24) = v15;
      if (one-time initialization token for sampler != -1)
        swift_once();
      v18 = static MetalDataType.sampler;
      *(_QWORD *)(v17 + 32) = static MetalDataType.sampler;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
      inited = swift_initStackObject();
      *(_QWORD *)(inited + 32) = 7632239;
      *(_OWORD *)(inited + 16) = xmmword_245FBECD0;
      *(_QWORD *)(inited + 40) = 0xE300000000000000;
      *(_QWORD *)(inited + 48) = v18;
      v20 = *(_QWORD *)(a2 + 40);
      swift_retain_n();
      specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v20, MEMORY[0x24BEE4AF8], inited, v17 | 0x2000000000000000, a2 + 64, a2, v30);
      swift_setDeallocating();
      swift_arrayDestroy();
      ShaderGraphNode.out.getter((uint64_t)v31);
      ShaderGraphNode.out.getter((uint64_t)v32);
      Graph.moveEdges(from:to:)((uint64_t)v31, (uint64_t)v32);
      swift_release();
      v37 = v32[1];
      outlined release of String((uint64_t)&v37);
      swift_release();
      v36 = v31[1];
      outlined release of String((uint64_t)&v36);
      outlined init with take of NodePersonality(&v38, &v40);
      v41[0] = *(_QWORD *)&v39[0];
      v21 = v42;
      v22 = *v42;
      swift_bridgeObjectRetain();
      outlined retain of NodePersonality(&v40);
      outlined retain of [Input]((uint64_t)v41);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v21 = v22;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
        *v21 = v22;
      }
      v25 = v22[2];
      v24 = v22[3];
      if (v25 >= v24 >> 1)
      {
        v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v22);
        *v21 = v22;
      }
      v22[2] = v25 + 1;
      v26 = &v22[6 * v25];
      v27 = v38;
      v28 = v39[0];
      *(_OWORD *)((char *)v26 + 57) = *(_OWORD *)((char *)v39 + 9);
      v26[2] = v27;
      v26[3] = v28;
      outlined init with take of NodePersonality(v30, &v35);
      outlined release of NodePersonality(&v35);
      v34 = v30[1];
      outlined release of [Input]((uint64_t)&v34);
      v33 = v30[2];
      outlined release of [Input]((uint64_t)&v33);
      return swift_release();
    }
  }
  return result;
}

BOOL closure #2 in closure #2 in Graph.replaceCreateSamplerNodes()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v5;

  swift_bridgeObjectRetain();
  v5 = specialized Sequence.allSatisfy(_:)(a4, partial apply for closure #1 in closure #2 in closure #2 in Graph.replaceCreateSamplerNodes());
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t closure #1 in closure #2 in closure #2 in Graph.replaceCreateSamplerNodes()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char v17;

  if (*(_QWORD *)(a6 + 16))
  {
    swift_bridgeObjectRetain();
    v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v12 & 1) != 0)
    {
      v13 = (uint64_t *)(*(_QWORD *)(a6 + 56) + 16 * v11);
      v15 = *v13;
      v14 = v13[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v15 == a4 && v14 == a5)
        v17 = 1;
      else
        v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    else
    {
      v17 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

void closure #1 in Graph.replaceWellKnownConstants()(__int128 *a1, uint64_t (**a2)(id), uint64_t a3)
{
  void *v3;
  __int128 v6;
  __int128 v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *rawValue;
  char v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t (*v57)(id);
  uint64_t v59;
  uint64_t v60;
  char v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t (*v83)(id);
  uint64_t v85;
  uint64_t v86;
  char isUniquelyReferenced_nonNull_native;
  _OWORD *v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t (**v110)(id);
  uint64_t v111;
  void *v112;
  int v113[2];
  id v114;
  void *v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123[12];
  _OWORD v124[12];
  __int128 v125;
  _BYTE v126[48];
  char v127[8];
  __int128 v128;
  char v129[8];
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  __int128 v133;
  _BYTE v134[25];
  __int128 v135;
  _OWORD v136[2];
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int128 v143;
  __int128 v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  _OWORD v149[2];
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  uint64_t (*v165)(id);
  _QWORD v166[5];
  char v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  uint64_t (*v175)(id);
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183[3];
  uint64_t (*v184)(id);

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)((char *)v149 + 9) = *(__int128 *)((char *)a1 + 25);
  v149[0] = v7;
  v148 = v6;
  outlined init with take of NodePersonality(&v148, &v182);
  outlined init with take of NodePersonality(&v182, v183);
  if (v183[0] >> 61)
    return;
  v110 = a2;
  v111 = a3;
  v112 = v3;
  v8 = *(void **)(v183[0] + 16);
  v9 = *(void **)(v183[0] + 24);
  v10 = *(_QWORD *)(v183[0] + 32);
  v11 = *(_QWORD *)(v183[0] + 40);
  v12 = *(_QWORD *)(v183[0] + 48);
  v13 = *(_QWORD *)(v183[0] + 56);
  v15 = *(_QWORD *)(v183[0] + 64);
  v14 = *(_QWORD *)(v183[0] + 72);
  v16 = *(_BYTE *)(v183[0] + 80);
  v184 = *(uint64_t (**)(id))(**(_QWORD **)(v183[0] + 88) + 144);
  swift_retain();
  v114 = v9;
  v115 = v8;
  v119 = v13;
  v120 = v10;
  *(_QWORD *)v113 = v11;
  v117 = v14;
  v118 = v12;
  v116 = v15;
  v17 = outlined copy of SGDataTypeStorage(v8, v9, v10, v11, v12, v13, v15, v14, v16);
  v18 = v184(v17);
  if (!v18)
  {
    swift_release();
    outlined consume of SGDataTypeStorage(v8, v9, v10, v11, v12, v13, v15, v14, v16);
    return;
  }
  v19 = v18;
  v184 = *v110;
  *(_QWORD *)&v150 = v8;
  *((_QWORD *)&v150 + 1) = v9;
  v151 = v10;
  v152 = *(_QWORD *)v113;
  v153 = v12;
  v154 = v13;
  v155 = v15;
  v156 = v14;
  v157 = v16;
  v158 = v18;
  outlined copy of SGDataTypeStorage(v8, v9, v10, v113[0], v12, v13, v15, v14, v16);
  swift_retain();
  outlined copy of SGDataTypeStorage(v8, v9, v10, v113[0], v12, v13, v15, v14, v16);
  swift_retain();
  specialized Dictionary.subscript.getter((uint64_t)&v150, (uint64_t)v184, (uint64_t)v126);
  v109 = v16;
  outlined consume of SGDataTypeStorage(v8, v9, v10, v113[0], v12, v13, v15, v14, v16);
  swift_release();
  outlined init with take of MetalFunctionNode?((uint64_t)v126, (uint64_t)&v133, &demangling cache variable for type metadata for ShaderGraphNode?);
  v108 = v19;
  if (*((_QWORD *)&v133 + 1))
  {
    v135 = v133;
    v136[0] = *(_OWORD *)v134;
    *(_OWORD *)((char *)v136 + 9) = *(_OWORD *)&v134[9];
    ShaderGraphNode.out.getter((uint64_t)v127);
    if (v112)
    {

      swift_release();
      outlined consume of SGDataTypeStorage(v8, v9, v10, v113[0], v12, v13, v15, v14, v16);
      swift_release();
      outlined consume of SGDataTypeStorage(v8, v9, v10, v113[0], v12, v13, v15, v14, v16);
      swift_release();
      outlined init with take of NodePersonality(&v135, &v140);
      outlined release of NodePersonality(&v140);
      v141 = *((_QWORD *)&v135 + 1);
      outlined release of [Input]((uint64_t)&v141);
      v142 = *(_QWORD *)&v136[0];
      outlined release of [Input]((uint64_t)&v142);
    }
    else
    {
      ShaderGraphNode.out.getter((uint64_t)v129);
      Graph.moveEdges(from:to:)((uint64_t)v127, (uint64_t)v129);
      swift_release();
      outlined consume of SGDataTypeStorage(v8, v9, v10, v113[0], v12, v13, v15, v14, v16);
      swift_release();
      outlined consume of SGDataTypeStorage(v8, v9, v10, v113[0], v12, v13, v15, v14, v16);
      swift_release();
      outlined init with take of NodePersonality(&v135, &v137);
      outlined release of NodePersonality(&v137);
      v138 = *((_QWORD *)&v135 + 1);
      outlined release of [Input]((uint64_t)&v138);
      v139 = *(_QWORD *)&v136[0];
      outlined release of [Input]((uint64_t)&v139);
      swift_release();
      v144 = v130;
      outlined release of String((uint64_t)&v144);
      swift_release();
      v143 = v128;
      outlined release of String((uint64_t)&v143);
    }
    return;
  }
  if (one-time initialization token for wellKnownConstantNodeData != -1)
    swift_once();
  rawValue = wellKnownConstantNodeData._rawValue;
  v21 = v16;
  v22 = v13;
  if (!*((_QWORD *)wellKnownConstantNodeData._rawValue + 2))
  {
LABEL_30:
    v61 = v21;
    outlined consume of SGDataTypeStorage(v8, v9, v10, v113[0], v12, v22, v15, v14, v21);
    swift_release();
    swift_release_n();
    outlined consume of SGDataTypeStorage(v8, v9, v10, v113[0], v12, v13, v15, v14, v61);
    return;
  }
  outlined copy of SGDataTypeStorage(v8, v9, v10, v113[0], v12, v13, v15, v14, v16);
  swift_retain();
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(&v150);
  if ((v24 & 1) == 0)
  {
    outlined consume of SGDataTypeStorage(v8, v9, v10, v113[0], v12, v13, v15, v14, v16);
    swift_release();
    v22 = v13;
    v21 = v16;
    goto LABEL_30;
  }
  v25 = (uint64_t *)(rawValue[7] + 16 * v23);
  v27 = *v25;
  v26 = v25[1];
  swift_bridgeObjectRetain();
  v28 = v14;
  outlined consume of SGDataTypeStorage(v8, v114, v10, v113[0], v12, v13, v15, v14, v109);
  v29 = swift_release();
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v108 + 144))(v29);
  if (!v30)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)&v123[0] = v108;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi28_((uint64_t)v123);
    outlined init with take of UserGraphError.ErrorType(v123, (uint64_t)v124);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v125 = 0uLL;
    swift_allocError();
    *v88 = v124[0];
    v89 = v124[4];
    v91 = v124[1];
    v90 = v124[2];
    v88[3] = v124[3];
    v88[4] = v89;
    v88[1] = v91;
    v88[2] = v90;
    v92 = v124[8];
    v94 = v124[5];
    v93 = v124[6];
    v88[7] = v124[7];
    v88[8] = v92;
    v88[5] = v94;
    v88[6] = v93;
    v95 = v125;
    v97 = v124[9];
    v96 = v124[10];
    v88[11] = v124[11];
    v88[12] = v95;
    v88[9] = v97;
    v88[10] = v96;
    swift_retain();
    swift_willThrow();
    outlined consume of SGDataTypeStorage(v8, v114, v10, v113[0], v12, v13, v15, v14, v109);
    swift_release();
    swift_release_n();
    outlined consume of SGDataTypeStorage(v8, v114, v10, v113[0], v12, v13, v15, v14, v109);
    return;
  }
  v31 = v30;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_245FBECD0;
  *(_QWORD *)(v32 + 32) = 7632239;
  *(_QWORD *)(v32 + 40) = 0xE300000000000000;
  *(_QWORD *)(v32 + 48) = v31;
  v33 = swift_allocObject();
  *(_QWORD *)(v33 + 16) = v27;
  *(_QWORD *)(v33 + 24) = v26;
  *(_QWORD *)(v33 + 32) = v31;
  v34 = v33 | 0x2000000000000000;
  v35 = *(_QWORD *)(v111 + 40);
  swift_retain_n();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v35, MEMORY[0x24BEE4AF8], v32, v34, v111 + 64, v111, (unint64_t *)&v131);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v147 = *((_QWORD *)&v131 + 1);
  v36 = v10;
  v37 = v15;
  v104 = *(_QWORD *)(*((_QWORD *)&v131 + 1) + 16);
  if (!v104)
    goto LABEL_33;
  v102 = *((_QWORD *)&v131 + 1) + 32;
  v38 = *((_QWORD *)&v148 + 1);
  swift_bridgeObjectRetain();
  v39 = 0;
  v98 = (_QWORD *)(v38 + 80);
  v100 = v38;
  while (2)
  {
    v41 = v102 + 56 * v39;
    v42 = *(_QWORD *)v41;
    v43 = *(_QWORD *)(v41 + 8);
    v44 = *(_QWORD *)(v41 + 16);
    v45 = *(_QWORD *)(v41 + 24);
    v46 = *(_QWORD *)(v41 + 32);
    v47 = *(_BYTE *)(v41 + 40);
    v48 = *(_QWORD *)(v41 + 48);
    *(_QWORD *)&v176 = v42;
    *((_QWORD *)&v176 + 1) = v43;
    v177 = v44;
    v178 = v45;
    v179 = v46;
    v180 = v47;
    v181 = v48;
    v49 = *(_QWORD *)(v100 + 16);
    if (!v49)
      goto LABEL_17;
    v106 = v39;
    v50 = v98;
    do
    {
      v51 = *(v50 - 6);
      v52 = *(v50 - 5);
      v54 = *(v50 - 4);
      v53 = *(v50 - 3);
      v55 = *(v50 - 2);
      v56 = *((_BYTE *)v50 - 8);
      v57 = (uint64_t (*)(id))*v50;
      if (v54 == v44 && v53 == v45)
      {
        v40 = v45;
LABEL_15:
        v169 = v51;
        v170 = v52;
        v171 = v44;
        v172 = v40;
        v173 = v55;
        v174 = v56;
        v175 = v57;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdge(from:to:)((uint64_t)&v169, &v176);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_16;
      }
      v121 = *(v50 - 6);
      v184 = (uint64_t (*)(id))*v50;
      v59 = v53;
      v60 = v44;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v44 = v54;
        v57 = v184;
        v40 = v59;
        v51 = v121;
        goto LABEL_15;
      }
      v50 += 7;
      --v49;
      v44 = v60;
    }
    while (v49);
    v169 = v121;
    v170 = v52;
    v171 = v54;
    v172 = v59;
    v173 = v55;
    v174 = v56;
    v175 = v184;
LABEL_16:
    v36 = v120;
    v39 = v106;
LABEL_17:
    if (++v39 != v104)
      continue;
    break;
  }
  outlined release of [Input]((uint64_t)&v147);
  v37 = v116;
  v28 = v117;
LABEL_33:
  v146 = v132;
  v63 = v118;
  v62 = v119;
  v105 = *(_QWORD *)(v132 + 16);
  if (!v105)
    goto LABEL_50;
  v103 = v132 + 32;
  v64 = *(_QWORD *)&v149[0];
  swift_bridgeObjectRetain();
  v65 = 0;
  v99 = (_QWORD *)(v64 + 80);
  v101 = v64;
  while (2)
  {
    v67 = (uint64_t *)(v103 + 56 * v65);
    v68 = *v67;
    v69 = v67[1];
    v70 = v67[2];
    v71 = v67[3];
    v72 = v67[4];
    v73 = *((_BYTE *)v67 + 40);
    v74 = v67[6];
    v166[0] = v68;
    v166[1] = v69;
    v166[2] = v70;
    v166[3] = v71;
    v166[4] = v72;
    v167 = v73;
    v168 = v74;
    v75 = *(_QWORD *)(v101 + 16);
    if (!v75)
      goto LABEL_38;
    v107 = v65;
    v76 = v99;
    while (2)
    {
      v77 = *(v76 - 6);
      v78 = *(v76 - 5);
      v80 = *(v76 - 4);
      v79 = *(v76 - 3);
      v81 = *(v76 - 2);
      v82 = *((_BYTE *)v76 - 8);
      v83 = (uint64_t (*)(id))*v76;
      if (v80 == v70 && v79 == v71)
      {
        v66 = v71;
LABEL_36:
        v159 = v77;
        v160 = v78;
        v161 = v70;
        v162 = v66;
        v163 = v81;
        v164 = v82;
        v165 = v83;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdges(from:to:)((uint64_t)&v159, (uint64_t)v166);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_37;
      }
      v122 = *(v76 - 6);
      v184 = (uint64_t (*)(id))*v76;
      v85 = v79;
      v86 = v70;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v70 = v80;
        v83 = v184;
        v66 = v85;
        v77 = v122;
        goto LABEL_36;
      }
      v76 += 7;
      --v75;
      v70 = v86;
      if (v75)
        continue;
      break;
    }
    v159 = v122;
    v160 = v78;
    v161 = v80;
    v162 = v85;
    v163 = v81;
    v164 = v82;
    v165 = v184;
LABEL_37:
    v63 = v118;
    v62 = v119;
    v36 = v120;
    v65 = v107;
LABEL_38:
    if (++v65 != v105)
      continue;
    break;
  }
  outlined release of [Input]((uint64_t)&v146);
  v37 = v116;
  v28 = v117;
LABEL_50:
  specialized Graph.remove(_:)(*((uint64_t *)&v149[0] + 1));
  outlined init with take of NodePersonality(&v131, &v145);
  outlined copy of SGDataTypeStorage(v115, v114, v36, v113[0], v63, v62, v37, v28, v109);
  swift_retain();
  outlined retain of [Input]((uint64_t)&v147);
  outlined retain of [Input]((uint64_t)&v146);
  outlined retain of NodePersonality(&v145);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v124[0] = *v110;
  *v110 = (uint64_t (*)(id))0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v131, &v150, isUniquelyReferenced_nonNull_native);
  *v110 = *(uint64_t (**)(id))&v124[0];
  swift_bridgeObjectRelease();
  outlined consume of SGDataTypeStorage(v115, v114, v36, v113[0], v63, v62, v37, v117, v109);
  swift_release();
  swift_release();
  outlined consume of SGDataTypeStorage(v115, v114, v36, v113[0], v63, v62, v37, v117, v109);
  swift_release();
  outlined consume of SGDataTypeStorage(v115, v114, v36, v113[0], v63, v62, v37, v117, v109);
  swift_release();
  swift_release();
  outlined release of NodePersonality(&v145);
  outlined release of [Input]((uint64_t)&v147);
  outlined release of [Input]((uint64_t)&v146);
}

uint64_t specialized EnumeratedSequence.Iterator.next()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v6 = v5;
  if (!v4)
  {
    v18 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_26;
    v19 = (unint64_t)(v1[2] + 64) >> 6;
    if (v18 < v19)
    {
      v20 = v1[1];
      v21 = *(_QWORD *)(v20 + 8 * v18);
      if (v21)
      {
LABEL_8:
        v7 = (v21 - 1) & v21;
        v8 = __clz(__rbit64(v21)) + (v18 << 6);
        v6 = v18;
        goto LABEL_3;
      }
      v22 = v5 + 2;
      v6 = v5 + 1;
      if (v5 + 2 < v19)
      {
        v21 = *(_QWORD *)(v20 + 8 * v22);
        if (v21)
        {
LABEL_11:
          v18 = v22;
          goto LABEL_8;
        }
        v6 = v5 + 2;
        if (v5 + 3 < v19)
        {
          v21 = *(_QWORD *)(v20 + 8 * (v5 + 3));
          if (v21)
          {
            v18 = v5 + 3;
            goto LABEL_8;
          }
          v22 = v5 + 4;
          v6 = v5 + 3;
          if (v5 + 4 < v19)
          {
            v21 = *(_QWORD *)(v20 + 8 * v22);
            if (v21)
              goto LABEL_11;
            v18 = v5 + 5;
            v6 = v5 + 4;
            if (v5 + 5 < v19)
            {
              v21 = *(_QWORD *)(v20 + 8 * v18);
              if (v21)
                goto LABEL_8;
              v6 = v19 - 1;
              v23 = v5 + 6;
              while (v19 != v23)
              {
                v21 = *(_QWORD *)(v20 + 8 * v23++);
                if (v21)
                {
                  v18 = v23 - 1;
                  goto LABEL_8;
                }
              }
            }
          }
        }
      }
    }
    v16 = 0;
    v12 = 0;
    v11 = 0;
    v15 = 0;
    v14 = 0;
    v1[3] = v6;
    v1[4] = 0;
    goto LABEL_24;
  }
  v7 = (v4 - 1) & v4;
  v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
  v9 = 16 * v8;
  v10 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v8);
  v12 = *v10;
  v11 = v10[1];
  v13 = (uint64_t *)(*(_QWORD *)(v3 + 56) + v9);
  v15 = *v13;
  v14 = v13[1];
  v1[3] = v6;
  v1[4] = v7;
  v16 = v1[5];
  if (!__OFADD__(v16, 1))
  {
    v1[5] = v16 + 1;
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
LABEL_24:
    *a1 = v16;
    a1[1] = v12;
    a1[2] = v11;
    a1[3] = v15;
    a1[4] = v14;
    return result;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  void *v31;
  id v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v3 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v3)
  {
LABEL_18:
    swift_bridgeObjectRelease_n();
    return;
  }
  v41 = 0;
  v4 = (uint64_t *)(a1 + 64);
  while (1)
  {
    if (v41 >= *(_QWORD *)(a1 + 16))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_24;
    }
    v51 = v4[7];
    v5 = v4[5];
    v6 = *v4;
    v8 = *(v4 - 2);
    v7 = *(v4 - 1);
    v10 = (void *)*(v4 - 4);
    v9 = (void *)*(v4 - 3);
    v39 = *((unsigned __int8 *)v4 + 32);
    v37 = v4[6];
    v38 = v4[1];
    v11 = v4[2];
    v12 = v4[3];
    outlined copy of SGDataTypeStorage(v10, v9, v8, v7, *v4, v38, v11, v12, *((_BYTE *)v4 + 32));
    swift_retain();
    swift_bridgeObjectRetain();
    if (!v5)
      goto LABEL_18;
    *(_QWORD *)&v46 = v10;
    *((_QWORD *)&v46 + 1) = v9;
    *(_QWORD *)&v47 = v8;
    *((_QWORD *)&v47 + 1) = v7;
    *(_QWORD *)&v48 = v6;
    *((_QWORD *)&v48 + 1) = v38;
    *(_QWORD *)&v49 = v11;
    *((_QWORD *)&v49 + 1) = v12;
    *(_QWORD *)&v50 = v39;
    *((_QWORD *)&v50 + 1) = v5;
    v44 = v48;
    v45 = v49;
    v42 = v46;
    v43 = v47;
    v13 = (_QWORD *)*a3;
    v15 = specialized __RawDictionaryStorage.find<A>(_:)(&v46);
    v16 = v13[2];
    v17 = (v14 & 1) == 0;
    v18 = v16 + v17;
    if (__OFADD__(v16, v17))
      goto LABEL_21;
    v19 = v14;
    if (v13[3] < v18)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v14 & 1) != 0)
        goto LABEL_16;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v19 & 1) != 0)
        goto LABEL_16;
    }
LABEL_12:
    v22 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    v23 = (_OWORD *)(v22[6] + 80 * v15);
    v24 = v49;
    v23[2] = v48;
    v23[3] = v24;
    v23[4] = v50;
    v25 = v47;
    *v23 = v46;
    v23[1] = v25;
    v26 = (_QWORD *)(v22[7] + 16 * v15);
    v27 = v51;
    *v26 = v37;
    v26[1] = v27;
    v28 = v22[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_22;
    v22[2] = v30;
    v4 += 12;
    a2 = 1;
    if (v3 == ++v41)
      goto LABEL_18;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a2 & 1);
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(&v46);
  if ((v19 & 1) != (v21 & 1))
    goto LABEL_23;
  v15 = v20;
  if ((v19 & 1) == 0)
    goto LABEL_12;
LABEL_16:
  v31 = (void *)swift_allocError();
  swift_willThrow();
  v32 = v31;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of SGDataTypeStorage((void *)v42, *((id *)&v42 + 1), v43, SDWORD2(v43), v44, SDWORD2(v44), v45, SDWORD2(v45), v39);
    swift_bridgeObjectRelease();
    swift_release();

    return;
  }
LABEL_24:
  _StringGuts.grow(_:)(30);
  v33._object = (void *)0x8000000245FC9990;
  v33._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v33);
  _print_unlocked<A, B>(_:_:)();
  v34._countAndFlagsBits = 39;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  _QWORD *v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  void *v36;
  id v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;

  v4 = a1;
  v5 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v41 = v5;
  if (!v5)
  {
LABEL_18:
    swift_bridgeObjectRelease_n();
    return;
  }
  v6 = 0;
  v7 = 0;
  v40 = v4;
  while (1)
  {
    if (v7 >= *(_QWORD *)(v4 + 16))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_24;
    }
    v8 = v4 + v6;
    v9 = *(_QWORD *)(v4 + v6 + 32);
    v10 = *(_QWORD *)(v4 + v6 + 40);
    v11 = *(_QWORD *)(v4 + v6 + 56);
    v47 = *(_QWORD *)(v4 + v6 + 48);
    v49 = v7;
    v12 = v6;
    v13 = a2;
    v15 = *(_QWORD *)(v8 + 64);
    v14 = *(_QWORD *)(v8 + 72);
    v16 = *(_QWORD *)(v8 + 80);
    v17 = *(_BYTE *)(v8 + 88);
    v46 = *(_BYTE *)(v8 + 89);
    v45 = *(_QWORD *)(v8 + 96);
    v44 = *(_BYTE *)(v8 + 104);
    swift_bridgeObjectRetain();
    v48 = v11;
    v18 = v15;
    v19 = v13;
    v20 = v12;
    swift_bridgeObjectRetain();
    swift_retain();
    outlined copy of GeomPropDef.GeomProp(v14, v16, v17);
    if (!v10)
      goto LABEL_18;
    v42 = v16;
    v43 = v17;
    v21 = (_QWORD *)*a3;
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10);
    v24 = v21[2];
    v25 = (v22 & 1) == 0;
    v26 = v24 + v25;
    if (__OFADD__(v24, v25))
      goto LABEL_21;
    v27 = v22;
    if (v21[3] < v26)
      break;
    if ((v19 & 1) != 0)
    {
      if ((v22 & 1) != 0)
        goto LABEL_16;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v27 & 1) != 0)
        goto LABEL_16;
    }
LABEL_12:
    v30 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v23 >> 6) + 64) |= 1 << v23;
    v31 = (uint64_t *)(v30[6] + 16 * v23);
    *v31 = v9;
    v31[1] = v10;
    v32 = v30[7] + (v23 << 6);
    *(_QWORD *)v32 = v47;
    *(_QWORD *)(v32 + 8) = v48;
    *(_QWORD *)(v32 + 16) = v18;
    *(_QWORD *)(v32 + 24) = v14;
    *(_QWORD *)(v32 + 32) = v42;
    *(_BYTE *)(v32 + 40) = v43;
    *(_BYTE *)(v32 + 41) = v46;
    *(_QWORD *)(v32 + 48) = v45;
    *(_BYTE *)(v32 + 56) = v44;
    v33 = v30[2];
    v34 = __OFADD__(v33, 1);
    v35 = v33 + 1;
    if (v34)
      goto LABEL_22;
    v7 = v49 + 1;
    v30[2] = v35;
    v6 = v20 + 80;
    a2 = 1;
    v4 = v40;
    if (v41 == v49 + 1)
      goto LABEL_18;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, v19 & 1);
  v28 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10);
  if ((v27 & 1) != (v29 & 1))
    goto LABEL_23;
  v23 = v28;
  if ((v27 & 1) == 0)
    goto LABEL_12;
LABEL_16:
  v36 = (void *)swift_allocError();
  swift_willThrow();
  v37 = v36;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of GeomPropDef.GeomProp(v14, v42, v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }
LABEL_24:
  _StringGuts.grow(_:)(30);
  v38._object = (void *)0x8000000245FC9990;
  v38._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v38);
  _print_unlocked<A, B>(_:_:)();
  v39._countAndFlagsBits = 39;
  v39._object = (void *)0xE100000000000000;
  String.append(_:)(v39);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  _QWORD *v29;
  uint64_t *v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  void *v41;
  id v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[160];
  _OWORD v58[2];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _QWORD *v77;

  v77 = a3;
  v4 = *(_QWORD *)(a1 + 16);
  v45 = a1 + 32;
  swift_bridgeObjectRetain();
  v5 = 0;
  if (v4)
    goto LABEL_3;
LABEL_2:
  _s11ShaderGraph19NodeDefinitionStoreV0C0VSgWOi0_(v58);
  outlined init with take of MetalFunctionNode?((uint64_t)v58, (uint64_t)&v67, &demangling cache variable for type metadata for (String, NodeDef)?);
  v6 = v4;
  while (1)
  {
    outlined init with take of MetalFunctionNode?((uint64_t)&v67, (uint64_t)v57, &demangling cache variable for type metadata for (String, NodeDef)?);
    outlined init with take of MetalFunctionNode?((uint64_t)v57, (uint64_t)v58, &demangling cache variable for type metadata for (String, NodeDef)?);
    if (getEnumTag for IOAttachment((uint64_t)v58) == 1)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
    v47 = v6;
    v19 = *((_QWORD *)&v67 + 1);
    v18 = v67;
    v54 = v74;
    v55 = v75;
    v56 = v76;
    v50 = v70;
    v51 = v71;
    v52 = v72;
    v53 = v73;
    v48 = v68;
    v49 = v69;
    v20 = (_QWORD *)*v77;
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(v67, *((uint64_t *)&v67 + 1));
    v23 = v20[2];
    v24 = (v21 & 1) == 0;
    v25 = v23 + v24;
    if (__OFADD__(v23, v24))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_24;
    }
    v26 = v21;
    if (v20[3] < v25)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v21 & 1) != 0)
        goto LABEL_17;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v26 & 1) != 0)
        goto LABEL_17;
    }
LABEL_13:
    v29 = (_QWORD *)*v77;
    v29[(v22 >> 6) + 8] |= 1 << v22;
    v30 = (uint64_t *)(v29[6] + 16 * v22);
    *v30 = v18;
    v30[1] = v19;
    v31 = (_OWORD *)(v29[7] + 144 * v22);
    *v31 = v48;
    v32 = v49;
    v33 = v50;
    v34 = v52;
    v31[3] = v51;
    v31[4] = v34;
    v31[1] = v32;
    v31[2] = v33;
    v35 = v53;
    v36 = v54;
    v37 = v56;
    v31[7] = v55;
    v31[8] = v37;
    v31[5] = v35;
    v31[6] = v36;
    v38 = v29[2];
    v39 = __OFADD__(v38, 1);
    v40 = v38 + 1;
    if (v39)
      goto LABEL_21;
    v29[2] = v40;
    a2 = 1;
    v5 = v47;
    if (v47 == v4)
      goto LABEL_2;
LABEL_3:
    if (v5 >= *(_QWORD *)(a1 + 16))
      goto LABEL_22;
    v7 = (_OWORD *)(v45 + 160 * v5);
    v8 = v7[7];
    v9 = v7[5];
    v63 = v7[6];
    v64 = v8;
    v10 = v7[7];
    v11 = v7[9];
    v65 = v7[8];
    v66 = v11;
    v12 = v7[3];
    v13 = v7[1];
    v59 = v7[2];
    v60 = v12;
    v14 = v7[3];
    v15 = v7[5];
    v61 = v7[4];
    v62 = v15;
    v16 = v7[1];
    v58[0] = *v7;
    v58[1] = v16;
    v73 = v63;
    v74 = v10;
    v17 = v7[9];
    v75 = v65;
    v76 = v17;
    v69 = v59;
    v70 = v14;
    v71 = v61;
    v72 = v9;
    v6 = v5 + 1;
    v67 = v58[0];
    v68 = v13;
    destructiveProjectEnumData for NodePersonality.ShaderType(&v67);
    outlined retain of (String, NodeDef)((uint64_t)v58);
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, a2 & 1);
  v27 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
  if ((v26 & 1) != (v28 & 1))
    goto LABEL_23;
  v22 = v27;
  if ((v26 & 1) == 0)
    goto LABEL_13;
LABEL_17:
  v41 = (void *)swift_allocError();
  swift_willThrow();
  v42 = v41;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    outlined release of NodeDef((uint64_t)&v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }
LABEL_24:
  _StringGuts.grow(_:)(30);
  v43._object = (void *)0x8000000245FC9990;
  v43._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v43);
  _print_unlocked<A, B>(_:_:)();
  v44._countAndFlagsBits = 39;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::UInt v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  void *v26;
  id v27;
  Swift::String v28;
  Swift::String v29;
  unint64_t v30;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35[2];
  __int128 v36;
  uint64_t v37;

  v5 = a1 + 32;
  swift_bridgeObjectRetain();
  v6 = 0;
  v7 = 0;
  v8 = 0;
  while (2)
  {
    if (v6)
    {
      v9 = *(_QWORD *)(v6 + 16);
      if (v7 != v9)
        goto LABEL_14;
      v33 = 0u;
      v34 = 0u;
      v32 = 0u;
      outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v32, &demangling cache variable for type metadata for (FunctionNodeID, MetalFunctionNode)?);
    }
    v10 = *(_QWORD *)(a1 + 16);
    if (v8 == v10)
    {
LABEL_28:
      v36 = 0u;
      memset(v35, 0, sizeof(v35));
LABEL_29:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      return;
    }
    if (v8 >= v10)
    {
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_35;
    }
    while (1)
    {
      v6 = *(_QWORD *)(v5 + 8 * v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v6)
        break;
LABEL_10:
      ++v8;
      v11 = *(_QWORD *)(a1 + 16);
      if (v8 == v11)
        goto LABEL_28;
      if (v8 >= v11)
        goto LABEL_30;
    }
    v9 = *(_QWORD *)(v6 + 16);
    if (!v9)
    {
      v33 = 0u;
      v34 = 0u;
      v32 = 0u;
      outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v32, &demangling cache variable for type metadata for (FunctionNodeID, MetalFunctionNode)?);
      goto LABEL_10;
    }
    v7 = 0;
    ++v8;
LABEL_14:
    if (v7 >= v9)
      goto LABEL_31;
    outlined init with copy of (FunctionNodeID, MetalFunctionNode)(v6 + 48 * v7 + 32, (uint64_t)&v32);
    outlined init with take of MetalFunctionNode?((uint64_t)&v32, (uint64_t)v35, &demangling cache variable for type metadata for (FunctionNodeID, MetalFunctionNode)?);
    if (!(_QWORD)v36)
      goto LABEL_29;
    v30 = v7;
    v12 = *(_QWORD *)&v35[0];
    v37 = *(_QWORD *)&v35[0];
    outlined init with take of MetalFunctionNode((__int128 *)((char *)v35 + 8), (uint64_t)&v32);
    v13 = (_QWORD *)*a3;
    v15 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
    v16 = v13[2];
    v17 = (v14 & 1) == 0;
    v18 = v16 + v17;
    if (__OFADD__(v16, v17))
      goto LABEL_32;
    v19 = v14;
    if (v13[3] >= v18)
    {
      if ((a2 & 1) != 0)
      {
        if ((v14 & 1) != 0)
          goto LABEL_26;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v19 & 1) != 0)
          goto LABEL_26;
      }
LABEL_23:
      v22 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v15 >> 6) + 64) |= 1 << v15;
      *(_QWORD *)(v22[6] + 8 * v15) = v12;
      outlined init with take of MetalFunctionNode(&v32, v22[7] + 40 * v15);
      v23 = v22[2];
      v24 = __OFADD__(v23, 1);
      v25 = v23 + 1;
      if (v24)
        goto LABEL_33;
      v7 = v30 + 1;
      v22[2] = v25;
      a2 = 1;
      continue;
    }
    break;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a2 & 1);
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
  if ((v19 & 1) != (v21 & 1))
    goto LABEL_34;
  v15 = v20;
  if ((v19 & 1) == 0)
    goto LABEL_23;
LABEL_26:
  v26 = (void *)swift_allocError();
  swift_willThrow();
  v27 = v26;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }
LABEL_35:
  _StringGuts.grow(_:)(30);
  v28._object = (void *)0x8000000245FC9990;
  v28._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v28);
  _print_unlocked<A, B>(_:_:)();
  v29._countAndFlagsBits = 39;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized Sequence.first(where:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  int64_t j;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v19 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  j = 0;
  if (!v7)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v10 | (j << 6); ; i = __clz(__rbit64(v13)) + (j << 6))
  {
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v17 = *v15;
    v16 = v15[1];
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((a2(v17, v16, v18) & 1) != 0)
    {
      swift_release();
      return v17;
    }
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (v7)
      goto LABEL_4;
LABEL_5:
    v12 = j + 1;
    if (__OFADD__(j, 1))
      break;
    if (v12 >= v19)
      goto LABEL_24;
    v13 = *(_QWORD *)(v4 + 8 * v12);
    ++j;
    if (v13)
      goto LABEL_19;
    j = v12 + 1;
    if (v12 + 1 >= v19)
      goto LABEL_24;
    v13 = *(_QWORD *)(v4 + 8 * j);
    if (v13)
      goto LABEL_19;
    j = v12 + 2;
    if (v12 + 2 >= v19)
      goto LABEL_24;
    v13 = *(_QWORD *)(v4 + 8 * j);
    if (v13)
      goto LABEL_19;
    j = v12 + 3;
    if (v12 + 3 >= v19)
      goto LABEL_24;
    v13 = *(_QWORD *)(v4 + 8 * j);
    if (v13)
      goto LABEL_19;
    v14 = v12 + 4;
    if (v14 >= v19)
    {
LABEL_24:
      swift_release();
      return 0;
    }
    v13 = *(_QWORD *)(v4 + 8 * v14);
    for (j = v14; !v13; ++v14)
    {
      j = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_27;
      if (j >= v19)
        goto LABEL_24;
      v13 = *(_QWORD *)(v4 + 8 * j);
    }
LABEL_19:
    v7 = (v13 - 1) & v13;
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

BOOL specialized Sequence.allSatisfy(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD v11[5];
  _BYTE v12[16];
  uint64_t v13;

  swift_bridgeObjectRetain();
  do
  {
    specialized EnumeratedSequence.Iterator.next()(v11);
    v3 = v11[0];
    v4 = v11[1];
    v5 = v11[2];
    v6 = v11[3];
    v7 = v11[4];
    outlined init with take of MetalFunctionNode?((uint64_t)v11, (uint64_t)v12, &demangling cache variable for type metadata for (offset: Int, element: (key: String, value: String))?);
    v8 = v13;
    if (!v13)
      break;
    v9 = a2(v3, v4, v5, v6, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  while ((v9 & 1) != 0);
  outlined consume of [String : InputSpec].Iterator._Variant();
  return v8 == 0;
}

uint64_t sub_245F4DD84()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

BOOL partial apply for closure #2 in closure #2 in Graph.replaceCreateSamplerNodes()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #2 in closure #2 in Graph.replaceCreateSamplerNodes()(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t partial apply for closure #1 in closure #2 in closure #2 in Graph.replaceCreateSamplerNodes()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return closure #1 in closure #2 in closure #2 in Graph.replaceCreateSamplerNodes()(a1, a2, a3, a4, a5, *(_QWORD *)(v5 + 16));
}

uint64_t destroy for Key(uint64_t a1)
{
  outlined consume of SGDataTypeStorage(*(void **)a1, *(id *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  return swift_release();
}

uint64_t initializeWithCopy for Key(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  v4 = *(id *)a2;
  v5 = *(void **)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v13 = *(_BYTE *)(a2 + 64);
  outlined copy of SGDataTypeStorage(*(id *)a2, v5, v6, v7, v8, v9, v10, v11, v13);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = v13;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Key(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v22;

  v4 = *(id *)a2;
  v5 = *(void **)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v22 = *(_BYTE *)(a2 + 64);
  outlined copy of SGDataTypeStorage(*(id *)a2, v5, v6, v7, v8, v9, v10, v11, v22);
  v12 = *(void **)a1;
  v13 = *(void **)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_BYTE *)(a1 + 64);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = v22;
  outlined consume of SGDataTypeStorage(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy80_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for Key(uint64_t a1, uint64_t a2)
{
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;

  v4 = *(_BYTE *)(a2 + 64);
  v5 = *(void **)a1;
  v6 = *(void **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_BYTE *)(a1 + 64);
  v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v14;
  v15 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v15;
  *(_BYTE *)(a1 + 64) = v4;
  outlined consume of SGDataTypeStorage(v5, v6, v7, v8, v9, v10, v11, v12, v13);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Key(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Key(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Key()
{
  return &type metadata for Key;
}

unint64_t lazy protocol witness table accessor for type Key and conformance Key()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Key and conformance Key;
  if (!lazy protocol witness table cache variable for type Key and conformance Key)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for Key, &type metadata for Key);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Key and conformance Key);
  }
  return result;
}

uint64_t logger.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for logger != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v0, (uint64_t)logger);
}

uint64_t static FileLogger.url(for:extension:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void *v17;
  id v18;
  id v19;
  void (*v20)(char *, uint64_t);
  id v21;
  NSURL *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  Swift::String v35;
  id v36;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47[3];

  v45 = a4;
  v43 = a5;
  v44 = a3;
  v42._countAndFlagsBits = a1;
  v42._object = a2;
  v47[2] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = type metadata accessor for Date();
  v40 = *(_QWORD *)(v5 - 8);
  v41 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v39 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v38 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v38 - v15;
  v17 = (void *)objc_opt_self();
  v18 = objc_msgSend(v17, sel_defaultManager);
  v19 = objc_msgSend(v18, sel_temporaryDirectory);

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  URL.appendingPathComponent(_:isDirectory:)();
  v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20(v11, v7);
  URL.appendingPathComponent(_:isDirectory:)();
  v20(v14, v7);
  v21 = objc_msgSend(v17, sel_defaultManager);
  URL._bridgeToObjectiveC()(v22);
  v24 = v23;
  v47[0] = 0;
  LODWORD(v19) = objc_msgSend(v21, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v23, 1, 0, v47);

  v25 = v47[0];
  if ((_DWORD)v19)
  {
    v26 = (void *)objc_opt_self();
    v27 = v25;
    v28 = objc_msgSend(v26, sel_standardUserDefaults);
    v29 = (void *)MEMORY[0x24954AF98](0xD000000000000024, 0x8000000245FC9620);
    v30 = (uint64_t)objc_msgSend(v28, sel_integerForKey_, v29);

    if (v30 < 1)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      v47[0] = (id)26483;
      v47[1] = (id)0xE200000000000000;
      v31 = v39;
      Date.init()();
      Date.timeIntervalSinceReferenceDate.getter();
      v33 = v32;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v31, v41);
      v46 = v33;
      v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      v35._countAndFlagsBits = 95;
      v35._object = (void *)0xE100000000000000;
      String.append(_:)(v35);
      String.append(_:)(v42);
    }
    URL.appendingPathComponent(_:)();
    swift_bridgeObjectRelease();
    URL.appendingPathExtension(_:)();
    v20(v14, v7);
    return ((uint64_t (*)(char *, uint64_t))v20)(v16, v7);
  }
  else
  {
    v36 = v47[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return ((uint64_t (*)(char *, uint64_t))v20)(v16, v7);
  }
}

uint64_t one-time initialization function for logger()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

uint64_t FileLogger.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t FileLogger.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t FileLogger.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t FileLogger.init()()
{
  uint64_t v0;

  return v0;
}

void specialized static FileLogger.saveDebugFile(_:name:extension:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, NSObject *a6)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  void *v23;
  id v24;
  id v25;
  void (*v26)(char *, uint64_t);
  id v27;
  NSURL *v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  unint64_t v43;
  os_log_t v44;
  char *v45;
  id v46;
  void *v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  int v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  os_log_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  os_log_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;

  v77 = a4;
  v78 = a6;
  v75 = a2;
  v76 = a5;
  v80 = a3;
  v74 = a1;
  v84 = *MEMORY[0x24BDAC8D0];
  v6 = type metadata accessor for Date();
  v72 = *(_QWORD *)(v6 - 8);
  v73 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v71 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v79 = (char *)&v70 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v70 - v16;
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v70 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v70 - v21;
  v23 = (void *)objc_opt_self();
  v24 = objc_msgSend(v23, sel_defaultManager);
  v25 = objc_msgSend(v24, sel_temporaryDirectory);

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  URL.appendingPathComponent(_:isDirectory:)();
  v70 = v10;
  v26 = *(void (**)(char *, uint64_t))(v10 + 8);
  v26(v17, v9);
  URL.appendingPathComponent(_:isDirectory:)();
  v26(v20, v9);
  v27 = objc_msgSend(v23, sel_defaultManager);
  URL._bridgeToObjectiveC()(v28);
  v30 = v29;
  v82 = 0;
  LODWORD(v25) = objc_msgSend(v27, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v29, 1, 0, &v82);

  v31 = (id)v82;
  if ((_DWORD)v25)
  {
    v32 = (void *)objc_opt_self();
    v33 = v31;
    v34 = objc_msgSend(v32, sel_standardUserDefaults);
    v35 = (void *)MEMORY[0x24954AF98](0xD000000000000024, 0x8000000245FC9620);
    v36 = (uint64_t)objc_msgSend(v34, sel_integerForKey_, v35);

    if (v36 < 1)
    {
      v43 = (unint64_t)v77;
      swift_bridgeObjectRetain();
      v44 = v78;
      v45 = v79;
      v42 = v80;
    }
    else
    {
      v82 = 26483;
      v83 = 0xE200000000000000;
      Date.init()();
      Date.timeIntervalSinceReferenceDate.getter();
      v38 = v37;
      (*(void (**)(char *, uint64_t))(v72 + 8))(v8, v73);
      v81 = v38;
      v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v39);
      swift_bridgeObjectRelease();
      v40._countAndFlagsBits = 95;
      v40._object = (void *)0xE100000000000000;
      String.append(_:)(v40);
      v41._countAndFlagsBits = v80;
      v41._object = v77;
      String.append(_:)(v41);
      v42 = v82;
      v43 = v83;
      v44 = v78;
      v45 = v79;
    }
    URL.appendingPathComponent(_:)();
    v48 = v76;
    URL.appendingPathExtension(_:)();
    v26(v20, v9);
    Data.write(to:options:)();
    v80 = v42;
    if (one-time initialization token for logger != -1)
      swift_once();
    v58 = type metadata accessor for Logger();
    __swift_project_value_buffer(v58, (uint64_t)logger);
    v59 = v71;
    (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v71, v45, v9);
    v60 = (unint64_t)v44;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v61 = Logger.logObject.getter();
    v62 = static os_log_type_t.debug.getter();
    v63 = v62;
    if (os_log_type_enabled(v61, v62))
    {
      v64 = swift_slowAlloc();
      v79 = (char *)swift_slowAlloc();
      v82 = (uint64_t)v79;
      *(_DWORD *)v64 = 136315650;
      v78 = v61;
      swift_bridgeObjectRetain();
      v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v43, &v82);
      LODWORD(v80) = v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v64 + 12) = 2080;
      swift_bridgeObjectRetain();
      v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v60, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v64 + 22) = 2080;
      v65 = v71;
      v66 = URL.path.getter();
      v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v26(v65, v9);
      v68 = v78;
      _os_log_impl(&dword_245E46000, v78, (os_log_type_t)v80, "%s.%s written to: %s", (uint8_t *)v64, 0x20u);
      v69 = v79;
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v69, -1, -1);
      MEMORY[0x24954C33C](v64, -1, -1);

    }
    else
    {

      v26(v59, v9);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    v26(v45, v9);
    v26(v22, v9);
  }
  else
  {
    v46 = (id)v82;
    v47 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    v26(v22, v9);
    v82 = (uint64_t)v47;
    v49 = v47;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v50 = String.init<A>(describing:)();
    v52 = v51;
    if (one-time initialization token for logger != -1)
      swift_once();
    v53 = type metadata accessor for Logger();
    __swift_project_value_buffer(v53, (uint64_t)logger);
    swift_bridgeObjectRetain();
    v54 = Logger.logObject.getter();
    v55 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc();
      v57 = swift_slowAlloc();
      v82 = v57;
      *(_DWORD *)v56 = 136315138;
      swift_bridgeObjectRetain();
      v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v52, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_245E46000, v54, v55, "Unable to write debug file to disk. %s", v56, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v57, -1, -1);
      MEMORY[0x24954C33C](v56, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

void specialized static FileLogger.saveDebugTextSource(_:name:extension:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, NSObject *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v10 = type metadata accessor for String.Encoding();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  v14 = String.data(using:allowLossyConversion:)();
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (v16 >> 60 == 15)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)logger);
    v18 = static os_log_type_t.error.getter();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v19 = Logger.logObject.getter();
    v20 = v18;
    if (os_log_type_enabled(v19, v18))
    {
      v21 = swift_slowAlloc();
      v22 = swift_slowAlloc();
      v24 = v22;
      *(_DWORD *)v21 = 136315394;
      swift_bridgeObjectRetain();
      v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, (unint64_t)a4, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v21 + 12) = 2080;
      swift_bridgeObjectRetain();
      v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a5, (unint64_t)a6, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_245E46000, v19, v20, "Unable to convert string to data %s.%s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v22, -1, -1);
      MEMORY[0x24954C33C](v21, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    specialized static FileLogger.saveDebugFile(_:name:extension:)(v14, v16, a3, a4, a5, a6);
    outlined consume of Data?(v14, v16);
  }
}

uint64_t type metadata accessor for FileLogger()
{
  return objc_opt_self();
}

uint64_t method lookup function for FileLogger()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FileLogger.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

Swift::String __swiftcall OrderedDictionary._debugDescription(typeName:)(Swift::String typeName)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t TupleTypeMetadata2;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  Swift::String v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_0;
  Swift::String v36;
  uint64_t v37;
  uint64_t *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;
  void *v45;
  Swift::String result;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;

  v7 = v5;
  v8 = v4;
  v9 = v3;
  v48 = v1;
  v49 = v2;
  object = typeName._object;
  countAndFlagsBits = typeName._countAndFlagsBits;
  v12 = *(_QWORD *)(v5 - 8);
  v54 = v6;
  v55 = v12;
  v13 = MEMORY[0x24BDAC7A8](typeName._countAndFlagsBits);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v21 = type metadata accessor for Optional();
  v57 = *(_QWORD *)(v21 - 8);
  v58 = v21;
  v22 = MEMORY[0x24BDAC7A8](v21);
  v56 = (char *)&v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v47 - v24;
  v60 = countAndFlagsBits;
  v61 = object;
  swift_bridgeObjectRetain();
  v26._countAndFlagsBits = 40;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  v64 = v60;
  v65 = v61;
  *(_QWORD *)&v59 = v9;
  v60 = v9;
  v27 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A60], v27);
  if ((Collection.isEmpty.getter() & 1) != 0)
  {
    v28 = 6109787;
    v29 = 0xE300000000000000;
  }
  else
  {
    v30._countAndFlagsBits = 91;
    v30._object = (void *)0xE100000000000000;
    String.append(_:)(v30);
    v60 = v48;
    v61 = v49;
    v62 = v59;
    v63 = 0;
    v53 = v8;
    v51 = v7;
    v54 = type metadata accessor for OrderedDictionary.Iterator(0, v8, v7, v54);
    swift_retain();
    swift_retain();
    swift_retain();
    v31 = 1;
    v59 = xmmword_245FBECD0;
    v52 = TupleTypeMetadata2;
    v50 = v25;
    v32 = v53;
    v33 = v51;
    while (1)
    {
      v39 = v56;
      OrderedDictionary.Iterator.next()(v54, v56);
      (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v25, v39, v58);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v25, 1, TupleTypeMetadata2) == 1)break;
      v40 = &v25[*(int *)(TupleTypeMetadata2 + 48)];
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v25, v32);
      v41 = v55;
      (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v15, v40, v33);
      if ((v31 & 1) == 0)
      {
        v42._countAndFlagsBits = 8236;
        v42._object = (void *)0xE200000000000000;
        String.append(_:)(v42);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = v59;
      *(_QWORD *)(v34 + 56) = v32;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v34 + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v17 + 16))(boxed_opaque_existential_0, v19, v32);
      debugPrint<A>(_:separator:terminator:to:)();
      swift_bridgeObjectRelease();
      v36._countAndFlagsBits = 8250;
      v36._object = (void *)0xE200000000000000;
      String.append(_:)(v36);
      v37 = swift_allocObject();
      *(_OWORD *)(v37 + 16) = v59;
      *(_QWORD *)(v37 + 56) = v33;
      v38 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v37 + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v41 + 16))(v38, v15, v33);
      debugPrint<A>(_:separator:terminator:to:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v15, v33);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v32);
      v31 = 0;
      TupleTypeMetadata2 = v52;
      v25 = v50;
    }
    swift_release();
    swift_release();
    swift_release();
    v28 = 93;
    v29 = 0xE100000000000000;
  }
  String.append(_:)(*(Swift::String *)&v28);
  v43._countAndFlagsBits = 41;
  v43._object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  v44 = v64;
  v45 = v65;
  result._object = v45;
  result._countAndFlagsBits = v44;
  return result;
}

uint64_t OrderedDictionary.debugDescription.getter()
{
  Swift::String v0;
  uint64_t countAndFlagsBits;

  v0._countAndFlagsBits = specialized OrderedDictionary._debugTypeName()();
  countAndFlagsBits = OrderedDictionary._debugDescription(typeName:)(v0)._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

Swift::String __swiftcall OrderedDictionary._debugTypeName()()
{
  unint64_t v0;
  void *v1;
  Swift::String result;

  v0 = specialized OrderedDictionary._debugTypeName()();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OrderedDictionary<A, B>()
{
  return OrderedDictionary.debugDescription.getter();
}

unint64_t specialized OrderedDictionary._debugTypeName()()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;

  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 8236;
  v1._object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 62;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0xD000000000000012;
}

uint64_t OrderedSet.UnorderedView._base.getter(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t OrderedSet.UnorderedView._base.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  swift_release();
  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*OrderedSet.UnorderedView._base.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t OrderedSet.unordered.getter(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t key path setter for OrderedSet.unordered : <A>OrderedSet<A>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v3 = *a1;
  v4 = a1[1];
  swift_retain();
  swift_retain();
  v5 = OrderedSet.init()();
  v7 = v6;
  swift_release();
  swift_release();
  *a2 = v5;
  a2[1] = v7;
  v9[0] = v3;
  v9[1] = v4;
  $defer #1 <A>() in OrderedSet.__unstable.modify(a2, v9);
  swift_release();
  return swift_release();
}

void (*OrderedSet.unordered.modify(_QWORD *a1, uint64_t a2))(_QWORD **a1)
{
  uint64_t *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  v6 = v2[1];
  *v5 = *v2;
  v5[1] = v6;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v5[2] = v2;
  v5[3] = v7;
  v5[4] = v8;
  *v2 = OrderedSet.init()();
  v2[1] = v9;
  return OrderedSet.__unstable.modify;
}

uint64_t OrderedSet.unordered.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  swift_retain();
  swift_retain();
  v5 = OrderedSet.init()();
  v7 = v6;
  swift_release();
  swift_release();
  *v2 = v5;
  v2[1] = v7;
  v9[0] = a1;
  v9[1] = a2;
  $defer #1 <A>() in OrderedSet.__unstable.modify(v2, v9);
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance OrderedSet<A>.UnorderedView(uint64_t a1)
{
  _QWORD *v1;

  return OrderedSet.UnorderedView.description.getter(*v1, v1[1], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t OrderedSet.UnorderedView.debugDescription.getter()
{
  uint64_t v0;
  void *v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t countAndFlagsBits;

  _StringGuts.grow(_:)(16);
  v0 = specialized OrderedSet._debugTypeName()();
  v2 = v1;
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x726564726F6E552ELL;
  v3._object = (void *)0xEE00776569566465;
  String.append(_:)(v3);
  v4._countAndFlagsBits = v0;
  v4._object = v2;
  countAndFlagsBits = OrderedSet._debugDescription(typeName:)(v4)._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OrderedSet<A>.UnorderedView()
{
  return OrderedSet.UnorderedView.debugDescription.getter();
}

uint64_t OrderedSet.UnorderedView.customMirror.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[4];

  v8 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[2] = a1;
  v20[3] = a2;
  v20[1] = a2;
  v14 = *MEMORY[0x24BEE4368];
  v15 = type metadata accessor for Mirror.DisplayStyle();
  v16 = *(_QWORD *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 104))(v13, v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  type metadata accessor for OrderedSet.UnorderedView(0, a3, a4, v17);
  v18 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A60], v18);
  default argument 3 of Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)((uint64_t)v10);
  swift_retain();
  swift_retain_n();
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance OrderedSet<A>.UnorderedView(uint64_t a1)
{
  uint64_t *v1;

  return OrderedSet.UnorderedView.customMirror.getter(*v1, v1[1], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t static OrderedSet.UnorderedView.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  BOOL v20;
  _QWORD v22[2];

  v22[1] = a6;
  v10 = *(_QWORD *)(a5 - 8);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v11 && a3 && a1 == a3)
    return 1;
  v15 = ContiguousArray.count.getter();
  if (v15 != ContiguousArray.count.getter())
    return 0;
  v16 = *(_QWORD *)(a2 + 16);
  if (!v16)
    return 1;
  swift_retain();
  swift_retain();
  ContiguousArray.subscript.getter();
  v17 = OrderedSet.contains(_:)();
  v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v13, a5);
  if (v17)
  {
    v19 = 1;
    while (v16 != v19)
    {
      ContiguousArray.subscript.getter();
      ++v19;
      v20 = OrderedSet.contains(_:)();
      v18(v13, a5);
      if (!v20)
        goto LABEL_11;
    }
    swift_release();
    v14 = 1;
  }
  else
  {
LABEL_11:
    swift_release();
    v14 = 0;
  }
  swift_release();
  return v14;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance OrderedSet<A>.UnorderedView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static OrderedSet.UnorderedView.== infix(_:_:)(*a1, a1[1], *a2, a2[1], *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void OrderedSet.UnorderedView.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  Swift::UInt v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v8 = *(_QWORD *)(a4 - 8);
  v9 = MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_OWORD *)(v9 + 48);
  v21 = *(_OWORD *)(v9 + 32);
  v22 = v12;
  v23 = *(_QWORD *)(v9 + 64);
  v13 = *(_OWORD *)(v9 + 16);
  v19 = *(_OWORD *)v9;
  v20 = v13;
  Hasher.finalize()();
  v14 = *(_QWORD *)(a3 + 16);
  if (v14)
  {
    v18[0] = a2;
    v18[1] = a1;
    swift_retain();
    swift_retain();
    v15 = 0;
    v16 = 0;
    do
    {
      ContiguousArray.subscript.getter();
      ++v16;
      v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, a4);
      v15 ^= v17;
    }
    while (v14 != v16);
    swift_release();
    swift_release();
  }
  else
  {
    v15 = 0;
  }
  Hasher._combine(_:)(v15);
}

Swift::Int OrderedSet.UnorderedView.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v7[72];

  Hasher.init(_seed:)();
  OrderedSet.UnorderedView.hash(into:)((uint64_t)v7, a1, a2, a3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance OrderedSet<A>.UnorderedView(uint64_t a1)
{
  uint64_t *v1;

  return OrderedSet.UnorderedView.hashValue.getter(*v1, v1[1], *(_QWORD *)(a1 + 16));
}

void protocol witness for Hashable.hash(into:) in conformance OrderedSet<A>.UnorderedView(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  OrderedSet.UnorderedView.hash(into:)(a1, *v2, v2[1], *(_QWORD *)(a2 + 16));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OrderedSet<A>.UnorderedView(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _BYTE v5[72];

  Hasher.init(_seed:)();
  OrderedSet.UnorderedView.hash(into:)((uint64_t)v5, *v2, v2[1], *(_QWORD *)(a2 + 16));
  return Hasher._finalize()();
}

uint64_t OrderedSet.UnorderedView.init(arrayLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(char *, uint64_t, uint64_t);
  uint64_t v8;

  v8 = a1;
  v5 = type metadata accessor for Array();
  v6 = (uint64_t (*)(char *, uint64_t, uint64_t))MEMORY[0x24954C264](MEMORY[0x24BEE12D8], v5);
  return OrderedSet.init<A>(_:)((uint64_t)&v8, a2, v5, a3, v6);
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance OrderedSet<A>.UnorderedView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v11 = a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = type metadata accessor for Array();
  v7 = *(_QWORD *)(a2 + 24);
  v8 = (uint64_t (*)(char *, uint64_t, uint64_t))MEMORY[0x24954C264](MEMORY[0x24BEE12D8], v6);
  result = OrderedSet.init<A>(_:)((uint64_t)&v11, v5, v6, v7, v8);
  *a3 = result;
  a3[1] = v10;
  return result;
}

uint64_t protocol witness for SetAlgebra.init() in conformance OrderedSet<A>.UnorderedView@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = OrderedSet.init()();
  *a1 = result;
  a1[1] = v3;
  return result;
}

BOOL protocol witness for SetAlgebra.contains(_:) in conformance OrderedSet<A>.UnorderedView()
{
  return OrderedSet.contains(_:)();
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance OrderedSet<A>.UnorderedView@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = specialized OrderedSet.UnorderedView.union(_:)(*a1, a1[1], *v3, v3[1], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  v7 = v6;
  swift_release();
  result = swift_release();
  *a3 = v5;
  a3[1] = v7;
  return result;
}

uint64_t OrderedSet.UnorderedView.union(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = specialized OrderedSet.UnorderedView.union(_:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  return v6;
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance OrderedSet<A>.UnorderedView@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = specialized OrderedSet.UnorderedView.intersection(_:)(*a1, a1[1], *v3, v3[1], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  v7 = v6;
  swift_release();
  result = swift_release();
  *a3 = v5;
  a3[1] = v7;
  return result;
}

uint64_t OrderedSet.UnorderedView.intersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = specialized OrderedSet.UnorderedView.intersection(_:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  return v6;
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance OrderedSet<A>.UnorderedView@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = specialized OrderedSet.UnorderedView.symmetricDifference(_:)(*a1, a1[1], *v3, v3[1], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  v7 = v6;
  swift_release();
  swift_release();
  swift_release();
  result = swift_release();
  *a3 = v5;
  a3[1] = v7;
  return result;
}

uint64_t OrderedSet.UnorderedView.symmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = specialized OrderedSet.UnorderedView.symmetricDifference(_:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v6;
}

uint64_t OrderedSet.UnorderedView.insert(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  char v6;

  v5 = *(_QWORD *)(a3 + 16);
  type metadata accessor for OrderedSet(0, v5, *(_QWORD *)(a3 + 24), a4);
  v6 = OrderedSet._append(_:)(a2);
  ContiguousArray.subscript.getter();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a2, v5);
  return v6 & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance OrderedSet<A>.UnorderedView@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for OrderedSet(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return OrderedSet.remove(_:)(v4, a3);
}

uint64_t OrderedSet.UnorderedView.remove(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for OrderedSet(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return OrderedSet.remove(_:)(v4, a3);
}

uint64_t OrderedSet.UnorderedView.update(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;

  v7 = *(_QWORD *)(a2 + 16);
  type metadata accessor for OrderedSet(0, v7, *(_QWORD *)(a2 + 24), a3);
  if ((OrderedSet._append(_:)(a1) & 1) != 0)
  {
    v9 = *(_QWORD *)(v7 - 8);
    v10 = 1;
  }
  else
  {
    v11 = v8;
    ContiguousArray.subscript.getter();
    v12 = type metadata accessor for ContiguousArray();
    ContiguousArray._makeMutableAndUnique()();
    v13 = *(_QWORD *)(v4 + 8);
    ContiguousArray._checkSubscript_mutating(_:)(v11);
    v9 = *(_QWORD *)(v7 - 8);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 24))(v13+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v11, a1, v7);
    destructiveProjectEnumData for NodePersonality.ShaderType(v12);
    v10 = 0;
  }
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a4, v10, 1, v7);
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance OrderedSet<A>.UnorderedView(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for OrderedSet(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  specialized OrderedSet.formUnion(_:)(v4, v5, v6);
  swift_release();
  return swift_release();
}

uint64_t OrderedSet.UnorderedView.formUnion(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = type metadata accessor for OrderedSet(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  specialized OrderedSet.formUnion(_:)(a1, a2, v6);
  swift_release();
  return swift_release();
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance OrderedSet<A>.UnorderedView(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OrderedSet.UnorderedView.formIntersection(_:)(*a1, a1[1], a2, a4);
}

uint64_t OrderedSet.UnorderedView.formIntersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = type metadata accessor for OrderedSet(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  return OrderedSet.formIntersection(_:)(a1, a2, v6);
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance OrderedSet<A>.UnorderedView(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized OrderedSet.UnorderedView.formSymmetricDifference(_:)(*a1, a1[1], a2, a4);
  swift_release();
  return swift_release();
}

uint64_t OrderedSet.UnorderedView.formSymmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized OrderedSet.UnorderedView.formSymmetricDifference(_:)(a1, a2, a3, a4);
  swift_release();
  return swift_release();
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance OrderedSet<A>.UnorderedView@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v6;

  result = OrderedSet.UnorderedView.subtracting(_:)(*a1, a1[1], *v3, v3[1], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  *a3 = result;
  a3[1] = v6;
  return result;
}

uint64_t OrderedSet.UnorderedView.subtracting(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  _QWORD v12[2];

  v12[0] = a1;
  v12[1] = a2;
  v10 = type metadata accessor for OrderedSet(0, a5, a6, a4);
  MEMORY[0x24954C264](&protocol conformance descriptor for OrderedSet<A>, v10);
  return OrderedSet._subtracting<A>(_:)((uint64_t)v12, a3, a4, a5, v10, a6);
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance OrderedSet<A>.UnorderedView(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SetAlgebra.isSubset(of:) in conformance OrderedSet<A>.UnorderedView(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))OrderedSet.UnorderedView.isSubset(of:));
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance OrderedSet<A>.UnorderedView(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SetAlgebra.isSubset(of:) in conformance OrderedSet<A>.UnorderedView(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))OrderedSet.UnorderedView.isDisjoint(with:));
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance OrderedSet<A>.UnorderedView(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SetAlgebra.isSubset(of:) in conformance OrderedSet<A>.UnorderedView(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))OrderedSet.UnorderedView.isSuperset(of:));
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance OrderedSet<A>.UnorderedView(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v4;

  return a4(*a1, a1[1], *v4, v4[1], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance OrderedSet<A>.UnorderedView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a2);
  v11 = OrderedSet.init<A>(_:)((uint64_t)v10, *(_QWORD *)(a3 + 16), a2, *(_QWORD *)(a3 + 24));
  v13 = v12;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, a2);
  *a4 = v11;
  a4[1] = v13;
  return result;
}

uint64_t OrderedSet.UnorderedView.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v8 + 16))(v10, a1);
  v11 = OrderedSet.init<A>(_:)((uint64_t)v10, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, a3);
  return v11;
}

{
  uint64_t v4;

  v4 = specialized OrderedSet.init<A>(_:)(a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance OrderedSet<A>.UnorderedView(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OrderedSet.UnorderedView.subtract(_:)(*a1, a1[1], a2, a4);
}

uint64_t OrderedSet.UnorderedView.subtract(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _QWORD v12[2];

  v5 = *v4;
  v6 = v4[1];
  v12[0] = a1;
  v12[1] = a2;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = type metadata accessor for OrderedSet(0, v7, v8, a4);
  MEMORY[0x24954C264](&protocol conformance descriptor for OrderedSet<A>, v9);
  result = OrderedSet._subtracting<A>(_:)((uint64_t)v12, v5, v6, v7, v9, v8);
  *v4 = result;
  v4[1] = v11;
  return result;
}

uint64_t OrderedSet.UnorderedView.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = specialized OrderedSet.init(_:)(a1, a2, a3);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t OrderedSet.UnorderedView.formUnion<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OrderedSet.UnorderedView.formUnion<A>(_:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized OrderedSet.formUnion<A>(_:));
}

uint64_t OrderedSet.UnorderedView.union<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;

  v8 = specialized OrderedSet.union<A>(_:)(a1, a2, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a1, a5);
  return v8;
}

uint64_t OrderedSet.UnorderedView.intersection<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = specialized OrderedSet.intersection<A>(_:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  return v6;
}

uint64_t OrderedSet.UnorderedView.formIntersection<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = type metadata accessor for OrderedSet(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  return OrderedSet.formIntersection<A>(_:)(a1, v6, a3);
}

uint64_t OrderedSet.UnorderedView.symmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;

  v8 = specialized OrderedSet.symmetricDifference<A>(_:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a1, a5);
  return v8;
}

uint64_t OrderedSet.UnorderedView.formSymmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OrderedSet.UnorderedView.formUnion<A>(_:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized OrderedSet.formSymmetricDifference<A>(_:));
}

uint64_t OrderedSet.UnorderedView.formUnion<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;

  v9 = type metadata accessor for OrderedSet(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  a5(a1, v9, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
}

uint64_t OrderedSet.UnorderedView.subtract<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;

  result = OrderedSet._subtracting<A>(_:)(a1, *v3, v3[1], *(_QWORD *)(a2 + 16), a3, *(_QWORD *)(a2 + 24));
  *v3 = result;
  v3[1] = v5;
  return result;
}

uint64_t specialized OrderedSet.UnorderedView.intersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;

  swift_retain();
  swift_retain();
  v12 = specialized OrderedSet.intersection(_:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  return v12;
}

uint64_t type metadata accessor for OrderedSet.UnorderedView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrderedSet.UnorderedView);
}

uint64_t specialized OrderedSet.UnorderedView.formSymmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = type metadata accessor for OrderedSet(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  return specialized OrderedSet.formSymmetricDifference(_:)(a1, a2, v6);
}

void base witness table accessor for Equatable in OrderedSet<A>.UnorderedView()
{
  JUMPOUT(0x24954C264);
}

void base witness table accessor for ExpressibleByArrayLiteral in OrderedSet<A>.UnorderedView()
{
  JUMPOUT(0x24954C264);
}

uint64_t sub_245F50D48@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  swift_retain();
  return swift_retain();
}

uint64_t sub_245F50D78()
{
  return 16;
}

__n128 sub_245F50D84(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t OrderedSet.init()()
{
  static Array._allocateUninitialized(_:)();
  ContiguousArray.init(arrayLiteral:)();
  return 0;
}

uint64_t OrderedSet.remove(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = OrderedSet._find(_:)();
  if ((v7 & 1) != 0)
  {
    v8 = 1;
  }
  else
  {
    OrderedSet._removeExistingMember(at:in:)(v5, v6, a1);
    v8 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a2, v8, 1, v4);
}

BOOL OrderedSet.contains(_:)()
{
  char v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (index: Int?, bucket: _HashTable.Bucket));
  ContiguousArray.withUnsafeBufferPointer<A>(_:)();
  return (v1 & 1) == 0;
}

uint64_t partial apply for closure #1 in OrderedSet._find_inlined(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return closure #1 in OrderedSet._find_inlined(_:)(a1, a2, v3[4], v3[6], v3[3], a3);
}

uint64_t ShaderGraphNode.materialXNodeDefName.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  outlined init with take of NodePersonality(v0, &v3);
  outlined init with take of NodePersonality(&v3, &v4);
  if (v4 >> 61 != 5)
    return 0;
  v1 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ShaderGraphNode.constantStringValue.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  outlined init with take of NodePersonality(v0, &v3);
  outlined init with take of NodePersonality(&v3, &v4);
  if (v4 >> 61 || *(_BYTE *)(v4 + 80) != 6)
    return 0;
  v1 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

void *ShaderGraphNode.constant.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  void *result;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;

  outlined init with take of NodePersonality(v1, &v13);
  result = outlined init with take of NodePersonality(&v13, &v14);
  if (v14 >> 61)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = -1;
  }
  else
  {
    v4 = *(void **)(v14 + 16);
    v5 = *(void **)(v14 + 24);
    v6 = *(_QWORD *)(v14 + 32);
    v7 = *(_QWORD *)(v14 + 40);
    v8 = *(_QWORD *)(v14 + 48);
    v9 = *(_QWORD *)(v14 + 56);
    v10 = *(_QWORD *)(v14 + 64);
    v11 = *(_QWORD *)(v14 + 72);
    v12 = *(_BYTE *)(v14 + 80);
    result = outlined copy of SGDataTypeStorage(v4, v5, v6, v7, v8, v9, v10, v11, v12);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = v12;
  return result;
}

uint64_t RESurfaceShaderFunctionNode.functionName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RESurfaceShaderFunctionNode.paramsInput.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  swift_retain();
  return v1;
}

uint64_t RESurfaceShaderFunctionNode.uniformsInput.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  outlined copy of (name: String, type: MetalDataType)?(v1, *(_QWORD *)(v0 + 64));
  return v1;
}

uint64_t RESurfaceShaderFunctionNode.isConstExpr.getter()
{
  return 0;
}

_QWORD *RESurfaceShaderFunctionNode.__allocating_init(id:named:paramsInput:uniformsInput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v15;

  v15 = (_QWORD *)swift_allocObject();
  if (one-time initialization token for void != -1)
    swift_once();
  v15[10] = static MetalDataType.void;
  v15[12] = MEMORY[0x24BEE4AF8];
  v15[14] = 0;
  v15[13] = 0;
  v15[2] = a2;
  v15[3] = a3;
  v15[4] = a4;
  v15[5] = a5;
  v15[6] = a6;
  v15[7] = a7;
  v15[8] = a8;
  v15[9] = a9;
  swift_beginAccess();
  v15[13] = a2;
  v15[14] = a3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15[11] = a1;
  return v15;
}

_QWORD *RESurfaceShaderFunctionNode.init(id:named:paramsInput:uniformsInput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v17;

  if (one-time initialization token for void != -1)
  {
    v17 = a8;
    swift_once();
    a8 = v17;
  }
  v9[10] = static MetalDataType.void;
  v9[12] = MEMORY[0x24BEE4AF8];
  v9[14] = 0;
  v9[13] = 0;
  v9[2] = a2;
  v9[3] = a3;
  v9[4] = a4;
  v9[5] = a5;
  v9[6] = a6;
  v9[7] = a7;
  v9[8] = a8;
  v9[9] = a9;
  swift_beginAccess();
  v9[13] = a2;
  v9[14] = a3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9[11] = a1;
  return v9;
}

uint64_t RESurfaceShaderFunctionNode.resultType.getter()
{
  return swift_retain();
}

uint64_t RESurfaceShaderFunctionNode.id.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 88);
}

uint64_t RESurfaceShaderFunctionNode.id.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 88) = a1;
  return result;
}

uint64_t (*RESurfaceShaderFunctionNode.id.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t RESurfaceShaderFunctionNode.inputs.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t RESurfaceShaderFunctionNode.inputs.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 96) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*RESurfaceShaderFunctionNode.inputs.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t RESurfaceShaderFunctionNode.debugLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 104);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RESurfaceShaderFunctionNode.debugLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 104) = a1;
  *(_QWORD *)(v2 + 112) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*RESurfaceShaderFunctionNode.debugLabel.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.StringNode.children.modify;
}

uint64_t RESurfaceShaderFunctionNode.generateMetalSource(in:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t (*v6)(uint64_t *);
  void (*v7)(uint64_t *, _QWORD);
  _QWORD **v8;
  _QWORD *v9;
  _QWORD *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  Swift::String v18;
  uint64_t v19;
  void *v20;
  Swift::String v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  Swift::String v34;
  uint64_t v35;
  void *v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  void *v40;
  void *v41;
  Swift::String v42;
  Swift::String v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t *);
  void (*v47)(uint64_t *, _QWORD);
  _QWORD **v48;
  _QWORD *v49;
  _QWORD *v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v58)(uint64_t *, _QWORD);
  _QWORD **v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;

  v3 = v1;
  v5 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 112))();
  v6 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v5 + 376);
  v69 = v5;
  v7 = (void (*)(uint64_t *, _QWORD))v6(&v67);
  v9 = v8;
  v10 = *v8;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v9 = v10;
  v66 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    *v9 = v10;
  }
  v13 = v10[2];
  v12 = v10[3];
  if (v13 >= v12 >> 1)
  {
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
    *v9 = v10;
  }
  v10[2] = v13 + 1;
  v14 = &v10[2 * v13];
  v14[4] = 0xD000000000000016;
  v14[5] = 0x8000000245FCCED0;
  v7(&v67, 0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_245FBECD0;
  v16 = v3[6];
  v17 = *(_QWORD *)(v16 + 32);
  v67 = *(_QWORD *)(v16 + 24);
  v68 = v17;
  swift_bridgeObjectRetain();
  v18._countAndFlagsBits = 32;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  v19 = v3[4];
  v20 = (void *)v3[5];
  swift_bridgeObjectRetain();
  v21._countAndFlagsBits = v19;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22 = v68;
  *(_QWORD *)(v15 + 32) = v67;
  *(_QWORD *)(v15 + 40) = v22;
  v23 = (void *)v3[8];
  if (v23)
  {
    v24 = v3[9];
    v25 = v3[7];
    v26 = *(_QWORD *)(v24 + 32);
    v67 = *(_QWORD *)(v24 + 24);
    v68 = v26;
    outlined copy of (name: String, type: MetalDataType)?(v25, (uint64_t)v23);
    swift_bridgeObjectRetain();
    v27._countAndFlagsBits = 32;
    v27._object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    v28._countAndFlagsBits = v25;
    v28._object = v23;
    String.append(_:)(v28);
    v29 = v67;
    v30 = v68;
    v32 = *(_QWORD *)(v15 + 16);
    v31 = *(_QWORD *)(v15 + 24);
    if (v32 >= v31 >> 1)
      v15 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, (_QWORD *)v15);
    *(_QWORD *)(v15 + 16) = v32 + 1;
    v33 = v15 + 16 * v32;
    *(_QWORD *)(v33 + 32) = v29;
    *(_QWORD *)(v33 + 40) = v30;
    swift_release();
    swift_bridgeObjectRelease();
  }
  v67 = 0;
  v68 = 0xE000000000000000;
  _StringGuts.grow(_:)(58);
  v34._countAndFlagsBits = 0xD000000000000024;
  v34._object = (void *)0x8000000245FCCEF0;
  String.append(_:)(v34);
  v35 = v3[2];
  v36 = (void *)v3[3];
  swift_bridgeObjectRetain();
  v37._countAndFlagsBits = v35;
  v37._object = v36;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  v38._countAndFlagsBits = 0x202020200A28;
  v38._object = (void *)0xE600000000000000;
  String.append(_:)(v38);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v39 = BidirectionalCollection<>.joined(separator:)();
  v41 = v40;
  swift_bridgeObjectRelease();
  v42._countAndFlagsBits = v39;
  v42._object = v41;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  v43._countAndFlagsBits = 0x200A29202020200ALL;
  v43._object = (void *)0xEC0000007B202020;
  String.append(_:)(v43);
  v45 = v67;
  v44 = v68;
  v46 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v69 + 400);
  v47 = (void (*)(uint64_t *, _QWORD))v46(&v67);
  v49 = v48;
  v50 = *v48;
  v51 = swift_isUniquelyReferenced_nonNull_native();
  *v49 = v50;
  if ((v51 & 1) == 0)
  {
    v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50[2] + 1, 1, v50);
    *v49 = v50;
  }
  v53 = v50[2];
  v52 = v50[3];
  if (v53 >= v52 >> 1)
  {
    v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v52 > 1), v53 + 1, 1, v50);
    *v49 = v50;
  }
  v50[2] = v53 + 1;
  v54 = &v50[2 * v53];
  v54[4] = v45;
  v54[5] = v44;
  v47(&v67, 0);
  swift_beginAccess();
  swift_retain();
  v55 = swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph14FunctionNodeIDVG_AF05MetalfG0_psAE_pTg504_s11d19Graph09RESurfaceA12fg11C19generateI53Source2inyAA0gA8CompilerC_tKFAA0gdE0_pAA0dE2IDVKXEfU_AF0idR0CTf1cn_nTf4ng_n(v55, a1);
  swift_bridgeObjectRelease();
  if (v66)
  {
    swift_release();
  }
  else
  {
    v56 = swift_release();
    MEMORY[0x24BDAC7A8](v56);
    (*(void (**)(uint64_t (*)(uint64_t)))(*(_QWORD *)a1 + 152))(partial apply for closure #2 in RESurfaceShaderFunctionNode.generateMetalSource(in:));
    swift_bridgeObjectRelease();
    v58 = (void (*)(uint64_t *, _QWORD))v46(&v67);
    v60 = v59;
    v61 = *v59;
    v62 = swift_isUniquelyReferenced_nonNull_native();
    *v60 = v61;
    if ((v62 & 1) == 0)
    {
      v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61[2] + 1, 1, v61);
      *v60 = v61;
    }
    v64 = v61[2];
    v63 = v61[3];
    if (v64 >= v63 >> 1)
    {
      v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v63 > 1), v64 + 1, 1, v61);
      *v60 = v61;
    }
    v61[2] = v64 + 1;
    v65 = &v61[2 * v64];
    v65[4] = 125;
    v65[5] = 0xE100000000000000;
    v58(&v67, 0);
  }
  return swift_release();
}

uint64_t closure #2 in RESurfaceShaderFunctionNode.generateMetalSource(in:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = v3;
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v7 = result;
    v8 = a2 + 32;
    swift_bridgeObjectRetain();
    v9 = v5 - 1;
    do
    {
      v10 = v9;
      closure #1 in closure #2 in RESurfaceShaderFunctionNode.generateMetalSource(in:)(v8, a3, v7);
      if (v4)
        break;
      v9 = v10 - 1;
      v8 += 40;
    }
    while (v10);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #1 in closure #2 in RESurfaceShaderFunctionNode.generateMetalSource(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t *);
  void (*v16)(uint64_t *, _QWORD);
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t *, _QWORD);
  _QWORD **v21;
  _QWORD *v22;
  _QWORD *v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  outlined init with copy of MetalFunctionNode(a1, (uint64_t)&v31);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetalFunctionNode);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HasMetalInvocation);
  swift_dynamicCast();
  v6 = v29;
  v7 = v30;
  __swift_project_boxed_opaque_existential_1(v28, v29);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 8))(a2, v6, v7);
  if (v3)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v28);
  v12 = v8;
  v13 = v9;
  v14 = v10;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v28);
  v15 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)a3 + 400);
  v16 = (void (*)(uint64_t *, _QWORD))v15(&v31);
  specialized Array.append<A>(contentsOf:)(v14);
  v16(&v31, 0);
  v31 = v12;
  v32 = v13;
  v17._countAndFlagsBits = 59;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  v18 = v31;
  v19 = v32;
  v20 = (uint64_t (*)(uint64_t *, _QWORD))v15(&v31);
  v22 = v21;
  v23 = *v21;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v22 = v23;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
    *v22 = v23;
  }
  v26 = v23[2];
  v25 = v23[3];
  if (v26 >= v25 >> 1)
  {
    v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v23);
    *v22 = v23;
  }
  v23[2] = v26 + 1;
  v27 = &v23[2 * v26];
  v27[4] = v18;
  v27[5] = v19;
  return v20(&v31, 0);
}

uint64_t RESurfaceShaderFunctionNode.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of (name: String, type: MetalDataType)?(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t RESurfaceShaderFunctionNode.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of (name: String, type: MetalDataType)?(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for MetalFunctionNode.resultType.getter in conformance RESurfaceShaderFunctionNode()
{
  return swift_retain();
}

uint64_t protocol witness for MetalFunctionNode.id.getter in conformance RESurfaceShaderFunctionNode()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  return *(_QWORD *)(v1 + 88);
}

uint64_t protocol witness for MetalFunctionNode.id.setter in conformance RESurfaceShaderFunctionNode(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_beginAccess();
  *(_QWORD *)(v3 + 88) = a1;
  return result;
}

uint64_t (*protocol witness for MetalFunctionNode.id.modify in conformance RESurfaceShaderFunctionNode())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t protocol witness for MetalFunctionNode.inputs.getter in conformance RESurfaceShaderFunctionNode()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for MetalFunctionNode.inputs.setter in conformance RESurfaceShaderFunctionNode(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_beginAccess();
  *(_QWORD *)(v3 + 96) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for MetalFunctionNode.inputs.modify in conformance RESurfaceShaderFunctionNode())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t protocol witness for MetalSourceGenerator.generateMetalSource(in:) in conformance RESurfaceShaderFunctionNode(uint64_t a1)
{
  return RESurfaceShaderFunctionNode.generateMetalSource(in:)(a1);
}

uint64_t protocol witness for HasDebugLabel.debugLabel.getter in conformance RESurfaceShaderFunctionNode()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 104);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for HasDebugLabel.debugLabel.setter in conformance RESurfaceShaderFunctionNode(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;

  v5 = *v2;
  swift_beginAccess();
  *(_QWORD *)(v5 + 104) = a1;
  *(_QWORD *)(v5 + 112) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for HasDebugLabel.debugLabel.modify in conformance RESurfaceShaderFunctionNode())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph14FunctionNodeIDVG_AF05MetalfG0_psAE_pTg504_s11d19Graph09RESurfaceA12fg11C19generateI53Source2inyAA0gA8CompilerC_tKFAA0gdE0_pAA0dE2IDVKXEfU_AF0idR0CTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t *v7;
  void (*v8)(__int128 *__return_ptr, uint64_t);
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v13[2];
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v14 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v4 = v14;
    v7 = (uint64_t *)(a1 + 32);
    v8 = *(void (**)(__int128 *__return_ptr, uint64_t))(**(_QWORD **)(a2 + 16) + 272);
    while (1)
    {
      v9 = *v7++;
      v8(v13, v9);
      if (v2)
        break;
      v14 = v4;
      v11 = *(_QWORD *)(v4 + 16);
      v10 = *(_QWORD *)(v4 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        v4 = v14;
      }
      *(_QWORD *)(v4 + 16) = v11 + 1;
      outlined init with take of MetalFunctionNode(v13, v4 + 40 * v11 + 32);
      if (!--v3)
        return v4;
    }
    swift_release();
  }
  return v4;
}

uint64_t partial apply for closure #2 in RESurfaceShaderFunctionNode.generateMetalSource(in:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in RESurfaceShaderFunctionNode.generateMetalSource(in:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t outlined consume of (name: String, type: MetalDataType)?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t type metadata accessor for RESurfaceShaderFunctionNode()
{
  return objc_opt_self();
}

uint64_t method lookup function for RESurfaceShaderFunctionNode()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RESurfaceShaderFunctionNode.__allocating_init(id:named:paramsInput:uniformsInput:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

Swift::Void __swiftcall OrderedSet.reserveCapacity(_:)(Swift::Int a1)
{
  OrderedSet._reserveCapacity(_:persistent:)(a1, 0);
}

uint64_t OrderedSet.init(minimumCapacity:persistent:)(Swift::Int a1, Swift::Bool a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v10;

  v10 = OrderedSet.init()();
  type metadata accessor for OrderedSet(0, a3, a4, v8);
  OrderedSet._reserveCapacity(_:persistent:)(a1, a2);
  return v10;
}

Swift::Void __swiftcall OrderedSet._reserveCapacity(_:persistent:)(Swift::Int _, Swift::Bool persistent)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  int64_t v11;
  Swift::Int v12;
  uint64_t v13;

  if (_ < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v3 = v2;
  type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(_);
  v6 = *v2;
  v7 = OrderedSet._scale.getter(*v2);
  v8 = specialized static _HashTable.scale(forCapacity:)(_);
  v9 = v8;
  if (!persistent)
    v9 = OrderedSet._reservedScale.getter(v6);
  if (v7 < v8)
  {
    v10 = v8;
LABEL_12:
    OrderedSet._regenerateHashTable(scale:reservedScale:)(v10, v9);
    return;
  }
  v11 = ContiguousArray.count.getter();
  v10 = specialized static _HashTable.scale(forCapacity:)(v11);
  if (v9 <= v8)
    v12 = v8;
  else
    v12 = v9;
  if (v10 <= v12)
    v10 = v12;
  if (v10 < v7)
    goto LABEL_12;
  OrderedSet._ensureUnique()();
  v13 = *v3;
  if (OrderedSet._reservedScale.getter(*v3) != v9)
  {
    if (v13)
    {
      swift_beginAccess();
      *(_QWORD *)(v13 + 24) = *(_QWORD *)(v13 + 24) & 0xFFFFFFFFFFFFFFC0 | v9 & 0x3F;
      return;
    }
LABEL_18:
    __break(1u);
  }
}

uint64_t *MetalDataType.re.surface_parameters_private.unsafeMutableAddressor()
{
  if (one-time initialization token for surface_parameters_private != -1)
    swift_once();
  return &static MetalDataType.re.surface_parameters_private;
}

uint64_t *MetalDataType.re.geometry_parameters_private.unsafeMutableAddressor()
{
  if (one-time initialization token for geometry_parameters_private != -1)
    swift_once();
  return &static MetalDataType.re.geometry_parameters_private;
}

uint64_t *MetalDataType.re.HoverData.unsafeMutableAddressor()
{
  if (one-time initialization token for HoverData != -1)
    swift_once();
  return &static MetalDataType.re.HoverData;
}

uint64_t *MetalDataType.re.EnvironmentRadianceResult.unsafeMutableAddressor()
{
  if (one-time initialization token for EnvironmentRadianceResult != -1)
    swift_once();
  return &static MetalDataType.re.EnvironmentRadianceResult;
}

uint64_t one-time initialization function for surface_parameters()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DataTypeProperty>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_245FC2020;
  if (one-time initialization token for uniforms != -1)
    swift_once();
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  v1 = swift_retain();
  v2 = MEMORY[0x24BEE4AF8];
  v3 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v1, MEMORY[0x24BEE4AF8]);
  swift_release();
  *(_QWORD *)(v0 + 32) = 0x736D726F66696E75;
  *(_QWORD *)(v0 + 40) = 0xE800000000000000;
  *(_QWORD *)(v0 + 48) = v3;
  *(_QWORD *)(v0 + 56) = v2;
  *(_BYTE *)(v0 + 64) = 1;
  *(_QWORD *)(v0 + 72) = 0;
  if (one-time initialization token for geometry != -1)
    swift_once();
  swift_allocObject();
  v4 = swift_retain();
  v5 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v4, v2);
  swift_release();
  *(_QWORD *)(v0 + 80) = 0x797274656D6F6567;
  *(_QWORD *)(v0 + 88) = 0xE800000000000000;
  *(_QWORD *)(v0 + 96) = v5;
  *(_QWORD *)(v0 + 104) = v2;
  *(_BYTE *)(v0 + 112) = 1;
  *(_QWORD *)(v0 + 120) = 1;
  if (one-time initialization token for surface_properties != -1)
    swift_once();
  swift_allocObject();
  v6 = swift_retain();
  v7 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v6, v2);
  swift_release();
  *(_QWORD *)(v0 + 128) = 0x65636166727573;
  *(_QWORD *)(v0 + 136) = 0xE700000000000000;
  *(_QWORD *)(v0 + 144) = v7;
  *(_QWORD *)(v0 + 152) = v2;
  *(_BYTE *)(v0 + 160) = 1;
  *(_QWORD *)(v0 + 168) = 2;
  if (one-time initialization token for textures != -1)
    swift_once();
  swift_allocObject();
  v8 = swift_retain();
  v9 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v8, v2);
  swift_release();
  *(_QWORD *)(v0 + 176) = 0x7365727574786574;
  *(_QWORD *)(v0 + 184) = 0xE800000000000000;
  *(_QWORD *)(v0 + 192) = v9;
  *(_QWORD *)(v0 + 200) = v2;
  *(_BYTE *)(v0 + 208) = 1;
  *(_QWORD *)(v0 + 216) = 3;
  if (one-time initialization token for material_parameters != -1)
    swift_once();
  swift_allocObject();
  v10 = swift_retain();
  v11 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v10, v2);
  swift_release();
  *(_QWORD *)(v0 + 224) = 0xD000000000000012;
  *(_QWORD *)(v0 + 232) = 0x8000000245FCD170;
  *(_QWORD *)(v0 + 240) = v11;
  *(_QWORD *)(v0 + 248) = v2;
  *(_BYTE *)(v0 + 256) = 1;
  *(_QWORD *)(v0 + 264) = 4;
  type metadata accessor for MetalDataType.Struct();
  v12 = swift_allocObject();
  v13 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0xD000000000000022, 0x8000000245FCD310, 0xD00000000000001ELL, 0x8000000245FCD340, 0x100000000, 0x100000000, 0, v0, v12);
  result = swift_release();
  static MetalDataType.re.surface_parameters = v13;
  return result;
}

uint64_t *MetalDataType.re.surface.uniforms.unsafeMutableAddressor()
{
  if (one-time initialization token for uniforms != -1)
    swift_once();
  return &static MetalDataType.re.surface.uniforms;
}

uint64_t *MetalDataType.re.surface.geometry.unsafeMutableAddressor()
{
  if (one-time initialization token for geometry != -1)
    swift_once();
  return &static MetalDataType.re.surface.geometry;
}

uint64_t *MetalDataType.re.surface.surface_properties.unsafeMutableAddressor()
{
  if (one-time initialization token for surface_properties != -1)
    swift_once();
  return &static MetalDataType.re.surface.surface_properties;
}

uint64_t *MetalDataType.re.texture.textures.unsafeMutableAddressor()
{
  if (one-time initialization token for textures != -1)
    swift_once();
  return &static MetalDataType.re.texture.textures;
}

uint64_t *MetalDataType.re.material.material_parameters.unsafeMutableAddressor()
{
  if (one-time initialization token for material_parameters != -1)
    swift_once();
  return &static MetalDataType.re.material.material_parameters;
}

uint64_t *MetalDataType.re.surface_parameters.unsafeMutableAddressor()
{
  if (one-time initialization token for surface_parameters != -1)
    swift_once();
  return &static MetalDataType.re.surface_parameters;
}

uint64_t static MetalDataType.re.surface_parameters.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for surface_parameters);
}

uint64_t one-time initialization function for geometry_parameters()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DataTypeProperty>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_245FC2010;
  if (one-time initialization token for uniforms != -1)
    swift_once();
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  v1 = swift_retain();
  v2 = MEMORY[0x24BEE4AF8];
  v3 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v1, MEMORY[0x24BEE4AF8]);
  swift_release();
  *(_QWORD *)(v0 + 32) = 0x736D726F66696E75;
  *(_QWORD *)(v0 + 40) = 0xE800000000000000;
  *(_QWORD *)(v0 + 48) = v3;
  *(_QWORD *)(v0 + 56) = v2;
  *(_BYTE *)(v0 + 64) = 1;
  *(_QWORD *)(v0 + 72) = 0;
  if (one-time initialization token for geometry != -1)
    swift_once();
  swift_allocObject();
  v4 = swift_retain();
  v5 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v4, v2);
  swift_release();
  *(_QWORD *)(v0 + 80) = 0x797274656D6F6567;
  *(_QWORD *)(v0 + 88) = 0xE800000000000000;
  *(_QWORD *)(v0 + 96) = v5;
  *(_QWORD *)(v0 + 104) = v2;
  *(_BYTE *)(v0 + 112) = 1;
  *(_QWORD *)(v0 + 120) = 1;
  if (one-time initialization token for textures != -1)
    swift_once();
  swift_allocObject();
  v6 = swift_retain();
  v7 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v6, v2);
  swift_release();
  *(_QWORD *)(v0 + 128) = 0x7365727574786574;
  *(_QWORD *)(v0 + 136) = 0xE800000000000000;
  *(_QWORD *)(v0 + 144) = v7;
  *(_QWORD *)(v0 + 152) = v2;
  *(_BYTE *)(v0 + 160) = 1;
  *(_QWORD *)(v0 + 168) = 2;
  if (one-time initialization token for material_parameters != -1)
    swift_once();
  swift_allocObject();
  v8 = swift_retain();
  v9 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v8, v2);
  swift_release();
  *(_QWORD *)(v0 + 176) = 0xD000000000000012;
  *(_QWORD *)(v0 + 184) = 0x8000000245FCD170;
  *(_QWORD *)(v0 + 192) = v9;
  *(_QWORD *)(v0 + 200) = v2;
  *(_BYTE *)(v0 + 208) = 1;
  *(_QWORD *)(v0 + 216) = 3;
  type metadata accessor for MetalDataType.Struct();
  v10 = swift_allocObject();
  v11 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0xD000000000000023, 0x8000000245FCD120, 0xD00000000000001FLL, 0x8000000245FCD150, 0x100000000, 0x100000000, 0, v0, v10);
  result = swift_release();
  static MetalDataType.re.geometry_parameters = v11;
  return result;
}

uint64_t *MetalDataType.re.geometry_modifier.uniforms.unsafeMutableAddressor()
{
  if (one-time initialization token for uniforms != -1)
    swift_once();
  return &static MetalDataType.re.geometry_modifier.uniforms;
}

uint64_t *MetalDataType.re.geometry_modifier.geometry.unsafeMutableAddressor()
{
  if (one-time initialization token for geometry != -1)
    swift_once();
  return &static MetalDataType.re.geometry_modifier.geometry;
}

uint64_t *MetalDataType.re.geometry_parameters.unsafeMutableAddressor()
{
  if (one-time initialization token for geometry_parameters != -1)
    swift_once();
  return &static MetalDataType.re.geometry_parameters;
}

uint64_t static MetalDataType.re.geometry_parameters.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for geometry_parameters);
}

uint64_t one-time initialization function for uniforms()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DataTypeProperty>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_245FBECD0;
  if (one-time initialization token for float != -1)
    swift_once();
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  v1 = swift_retain();
  v2 = MEMORY[0x24BEE4AF8];
  v3 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v1, MEMORY[0x24BEE4AF8]);
  swift_release();
  *(_QWORD *)(v0 + 32) = 1701669236;
  *(_QWORD *)(v0 + 40) = 0xE400000000000000;
  *(_QWORD *)(v0 + 48) = v3;
  *(_QWORD *)(v0 + 56) = v2;
  *(_BYTE *)(v0 + 64) = 1;
  *(_QWORD *)(v0 + 72) = 0;
  type metadata accessor for MetalDataType.Struct();
  v4 = swift_allocObject();
  v5 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD00000000000001DLL, 0x8000000245FCD520, 0x100000000, 0x100000000, 0, v0, v4);
  result = swift_release();
  static MetalDataType.re.surface.uniforms = v5;
  return result;
}

{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String, type: MetalDataType)>);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 32) = 1701669236;
  *(_OWORD *)(inited + 16) = xmmword_245FC37E0;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  if (one-time initialization token for float != -1)
    swift_once();
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  v1 = swift_retain();
  v2 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v1, MEMORY[0x24BEE4AF8]);
  swift_release();
  *(_QWORD *)(inited + 48) = v2;
  strcpy((char *)(inited + 56), "model_to_world");
  *(_BYTE *)(inited + 71) = -18;
  if (one-time initialization token for float4x4 != -1)
    swift_once();
  swift_allocObject();
  v3 = swift_retain();
  v4 = MEMORY[0x24BEE4AF8];
  v5 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v3, MEMORY[0x24BEE4AF8]);
  swift_release();
  *(_QWORD *)(inited + 72) = v5;
  strcpy((char *)(inited + 80), "world_to_model");
  *(_BYTE *)(inited + 95) = -18;
  swift_allocObject();
  v6 = swift_retain();
  v7 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v6, v4);
  swift_release();
  *(_QWORD *)(inited + 96) = v7;
  *(_QWORD *)(inited + 104) = 0x745F6C616D726F6ELL;
  *(_QWORD *)(inited + 112) = 0xEF646C726F775F6FLL;
  if (one-time initialization token for float3x3 != -1)
    swift_once();
  swift_allocObject();
  v8 = swift_retain();
  v9 = MEMORY[0x24BEE4AF8];
  v10 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v8, MEMORY[0x24BEE4AF8]);
  swift_release();
  *(_QWORD *)(inited + 120) = v10;
  strcpy((char *)(inited + 128), "model_to_view");
  *(_WORD *)(inited + 142) = -4864;
  swift_allocObject();
  v11 = swift_retain();
  v12 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v11, v9);
  swift_release();
  *(_QWORD *)(inited + 144) = v12;
  *(_QWORD *)(inited + 152) = 0xD000000000000012;
  *(_QWORD *)(inited + 160) = 0x8000000245FCD2B0;
  swift_allocObject();
  v13 = swift_retain();
  v14 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v13, v9);
  swift_release();
  *(_QWORD *)(inited + 168) = v14;
  *(_QWORD *)(inited + 176) = 0xD000000000000012;
  *(_QWORD *)(inited + 184) = 0x8000000245FCD2D0;
  swift_allocObject();
  v15 = swift_retain();
  v16 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v15, v9);
  swift_release();
  *(_QWORD *)(inited + 192) = v16;
  *(_QWORD *)(inited + 200) = 0xD000000000000010;
  *(_QWORD *)(inited + 208) = 0x8000000245FCD2F0;
  if (one-time initialization token for float4 != -1)
    swift_once();
  swift_allocObject();
  v17 = swift_retain();
  v18 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v17, MEMORY[0x24BEE4AF8]);
  swift_release();
  *(_QWORD *)(inited + 216) = v18;
  v19 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySS5label_11ShaderGraph13MetalDataTypeC4typetGG_AI0jK8PropertyVs5NeverOTg508_sSiSS11g7Graph13ijk7CAA0dE8m48VIgyggo_Si6offset_SS5label_AC4typet7elementtAEs5n98OIegnrzr_TR04_s11a7Graph13cde69C6StructC4note8typeName10fieldSpecsAESSSg_S2S5label_AC0H0tdtcfcAA0dT32F19VSi_SSAJ_AcKttXEfU_Tf3nnnpf_nTf1cn_n(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: String, type: MetalDataType));
  swift_arrayDestroy();
  type metadata accessor for MetalDataType.Struct();
  v20 = swift_allocObject();
  v21 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD000000000000027, 0x8000000245FCD280, 0x100000000, 0x100000000, 0, v19, v20);
  result = swift_release();
  static MetalDataType.re.geometry_modifier.uniforms = v21;
  return result;
}

uint64_t static MetalDataType.re.surface.uniforms.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for uniforms);
}

uint64_t one-time initialization function for geometry()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String, type: MetalDataType)>);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 32) = 0x705F6E6565726373;
  *(_OWORD *)(inited + 16) = xmmword_245FC37C0;
  *(_QWORD *)(inited + 40) = 0xEF6E6F697469736FLL;
  if (one-time initialization token for float4 != -1)
    swift_once();
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  v1 = swift_retain();
  v2 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v1, MEMORY[0x24BEE4AF8]);
  swift_release();
  *(_QWORD *)(inited + 48) = v2;
  strcpy((char *)(inited + 56), "world_position");
  *(_BYTE *)(inited + 71) = -18;
  if (one-time initialization token for float3 != -1)
    swift_once();
  swift_allocObject();
  v3 = swift_retain();
  v4 = MEMORY[0x24BEE4AF8];
  v5 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v3, MEMORY[0x24BEE4AF8]);
  swift_release();
  *(_QWORD *)(inited + 72) = v5;
  *(_QWORD *)(inited + 80) = 0x726F6C6F63;
  *(_QWORD *)(inited + 88) = 0xE500000000000000;
  swift_allocObject();
  v6 = swift_retain();
  v7 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v6, v4);
  swift_release();
  *(_QWORD *)(inited + 96) = v7;
  *(_QWORD *)(inited + 104) = 0x6C616D726F6ELL;
  *(_QWORD *)(inited + 112) = 0xE600000000000000;
  swift_allocObject();
  v8 = swift_retain();
  v9 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v8, v4);
  swift_release();
  *(_QWORD *)(inited + 120) = v9;
  *(_QWORD *)(inited + 128) = 0x746E65676E6174;
  *(_QWORD *)(inited + 136) = 0xE700000000000000;
  swift_allocObject();
  v10 = swift_retain();
  v11 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v10, v4);
  swift_release();
  *(_QWORD *)(inited + 144) = v11;
  *(_QWORD *)(inited + 152) = 0x6E65676E61746962;
  *(_QWORD *)(inited + 160) = 0xE900000000000074;
  swift_allocObject();
  v12 = swift_retain();
  v13 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v12, v4);
  swift_release();
  *(_QWORD *)(inited + 168) = v13;
  *(_QWORD *)(inited + 176) = 3176053;
  *(_QWORD *)(inited + 184) = 0xE300000000000000;
  if (one-time initialization token for float2 != -1)
    swift_once();
  swift_allocObject();
  v14 = swift_retain();
  v15 = MEMORY[0x24BEE4AF8];
  v16 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v14, MEMORY[0x24BEE4AF8]);
  swift_release();
  *(_QWORD *)(inited + 192) = v16;
  *(_QWORD *)(inited + 200) = 3241589;
  *(_QWORD *)(inited + 208) = 0xE300000000000000;
  swift_allocObject();
  v17 = swift_retain();
  v18 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v17, v15);
  swift_release();
  *(_QWORD *)(inited + 216) = v18;
  *(_QWORD *)(inited + 224) = 0xD000000000000010;
  *(_QWORD *)(inited + 232) = 0x8000000245FCD200;
  swift_allocObject();
  v19 = swift_retain();
  v20 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v19, v15);
  swift_release();
  *(_QWORD *)(inited + 240) = v20;
  strcpy((char *)(inited + 248), "view_direction");
  *(_BYTE *)(inited + 263) = -18;
  swift_allocObject();
  v21 = swift_retain();
  v22 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v21, v15);
  swift_release();
  *(_QWORD *)(inited + 264) = v22;
  v23 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySS5label_11ShaderGraph13MetalDataTypeC4typetGG_AI0jK8PropertyVs5NeverOTg508_sSiSS11g7Graph13ijk7CAA0dE8m48VIgyggo_Si6offset_SS5label_AC4typet7elementtAEs5n98OIegnrzr_TR04_s11a7Graph13cde69C6StructC4note8typeName10fieldSpecsAESSSg_S2S5label_AC0H0tdtcfcAA0dT32F19VSi_SSAJ_AcKttXEfU_Tf3nnnpf_nTf1cn_n(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: String, type: MetalDataType));
  swift_arrayDestroy();
  type metadata accessor for MetalDataType.Struct();
  v24 = swift_allocObject();
  v25 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD00000000000001DLL, 0x8000000245FCD500, 0x100000000, 0x100000000, 0, v23, v24);
  result = swift_release();
  static MetalDataType.re.surface.geometry = v25;
  return result;
}

{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String, type: MetalDataType)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_245FC37F0;
  *(_QWORD *)(inited + 32) = 0x695F786574726576;
  *(_QWORD *)(inited + 40) = 0xE900000000000064;
  if (one-time initialization token for uint32 != -1)
    swift_once();
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  v1 = swift_retain_n();
  v2 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v1, MEMORY[0x24BEE4AF8]);
  swift_release_n();
  *(_QWORD *)(inited + 48) = v2;
  strcpy((char *)(inited + 56), "model_position");
  *(_BYTE *)(inited + 71) = -18;
  if (one-time initialization token for float3 != -1)
    swift_once();
  swift_allocObject();
  v3 = swift_retain();
  v4 = MEMORY[0x24BEE4AF8];
  v5 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v3, MEMORY[0x24BEE4AF8]);
  swift_release();
  *(_QWORD *)(inited + 72) = v5;
  strcpy((char *)(inited + 80), "world_position");
  *(_BYTE *)(inited + 95) = -18;
  swift_allocObject();
  v6 = swift_retain();
  v7 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v6, v4);
  swift_release();
  *(_QWORD *)(inited + 96) = v7;
  *(_QWORD *)(inited + 104) = 0xD000000000000015;
  *(_QWORD *)(inited + 112) = 0x8000000245FCD1C0;
  swift_allocObject();
  v8 = swift_retain();
  v9 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v8, v4);
  swift_release();
  *(_QWORD *)(inited + 120) = v9;
  *(_QWORD *)(inited + 128) = 0xD000000000000015;
  *(_QWORD *)(inited + 136) = 0x8000000245FCD1E0;
  swift_allocObject();
  v10 = swift_retain();
  v11 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v10, v4);
  swift_release();
  *(_QWORD *)(inited + 144) = v11;
  *(_QWORD *)(inited + 152) = 0x726F6C6F63;
  *(_QWORD *)(inited + 160) = 0xE500000000000000;
  if (one-time initialization token for float4 != -1)
    swift_once();
  swift_allocObject();
  v12 = swift_retain();
  v13 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v12, v4);
  swift_release();
  *(_QWORD *)(inited + 168) = v13;
  *(_QWORD *)(inited + 176) = 0x6C616D726F6ELL;
  *(_QWORD *)(inited + 184) = 0xE600000000000000;
  swift_allocObject();
  v14 = swift_retain();
  v15 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v14, v4);
  swift_release();
  *(_QWORD *)(inited + 192) = v15;
  *(_QWORD *)(inited + 200) = 0x6E65676E61746962;
  *(_QWORD *)(inited + 208) = 0xE900000000000074;
  swift_allocObject();
  v16 = swift_retain();
  v17 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v16, v4);
  swift_release();
  *(_QWORD *)(inited + 216) = v17;
  *(_QWORD *)(inited + 224) = 3176053;
  *(_QWORD *)(inited + 232) = 0xE300000000000000;
  if (one-time initialization token for float2 != -1)
    swift_once();
  swift_allocObject();
  v18 = swift_retain();
  v19 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v18, v4);
  swift_release();
  *(_QWORD *)(inited + 240) = v19;
  *(_QWORD *)(inited + 248) = 3241589;
  *(_QWORD *)(inited + 256) = 0xE300000000000000;
  swift_allocObject();
  v20 = swift_retain();
  v21 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v20, v4);
  swift_release();
  *(_QWORD *)(inited + 264) = v21;
  *(_QWORD *)(inited + 272) = 0xD000000000000010;
  *(_QWORD *)(inited + 280) = 0x8000000245FCD200;
  swift_allocObject();
  v22 = swift_retain();
  v23 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v22, v4);
  swift_release();
  *(_QWORD *)(inited + 288) = v23;
  *(_QWORD *)(inited + 296) = 0xD000000000000019;
  *(_QWORD *)(inited + 304) = 0x8000000245FCD220;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_245FBF370;
  *(_QWORD *)(v24 + 32) = static MetalDataType.float3;
  v53 = v24;
  specialized Array._endMutation()();
  v25 = one-time initialization token for void;
  swift_retain();
  if (v25 != -1)
    swift_once();
  v26 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_bridgeObjectRetain();
  v27 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v26, v53);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(_QWORD *)(inited + 312) = v27;
  *(_QWORD *)(inited + 320) = 0xD000000000000019;
  *(_QWORD *)(inited + 328) = 0x8000000245FCD240;
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_245FBF370;
  *(_QWORD *)(v28 + 32) = static MetalDataType.float3;
  v54 = v28;
  specialized Array._endMutation()();
  v29 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v30 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v29, v54);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(_QWORD *)(inited + 336) = v30;
  *(_QWORD *)(inited + 344) = 0x6F6C6F635F746573;
  *(_QWORD *)(inited + 352) = 0xE900000000000072;
  v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_245FBF370;
  *(_QWORD *)(v31 + 32) = static MetalDataType.float4;
  v55 = v31;
  specialized Array._endMutation()();
  v32 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v33 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v32, v55);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(_QWORD *)(inited + 360) = v33;
  *(_QWORD *)(inited + 368) = 0x6D726F6E5F746573;
  *(_QWORD *)(inited + 376) = 0xEA00000000006C61;
  v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_245FBF370;
  *(_QWORD *)(v34 + 32) = static MetalDataType.float3;
  v56 = v34;
  specialized Array._endMutation()();
  v35 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v36 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v35, v56);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(_QWORD *)(inited + 384) = v36;
  strcpy((char *)(inited + 392), "set_bitangent");
  *(_WORD *)(inited + 406) = -4864;
  v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_245FBF370;
  *(_QWORD *)(v37 + 32) = static MetalDataType.float3;
  v57 = v37;
  specialized Array._endMutation()();
  v38 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v39 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v38, v57);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(_QWORD *)(inited + 408) = v39;
  *(_QWORD *)(inited + 416) = 0x3076755F746573;
  *(_QWORD *)(inited + 424) = 0xE700000000000000;
  v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_245FBF370;
  *(_QWORD *)(v40 + 32) = static MetalDataType.float2;
  v58 = v40;
  specialized Array._endMutation()();
  v41 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v42 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v41, v58);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(_QWORD *)(inited + 432) = v42;
  *(_QWORD *)(inited + 440) = 0x3176755F746573;
  *(_QWORD *)(inited + 448) = 0xE700000000000000;
  v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_245FBF370;
  *(_QWORD *)(v43 + 32) = static MetalDataType.float2;
  v59 = v43;
  specialized Array._endMutation()();
  v44 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v45 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v44, v59);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(_QWORD *)(inited + 456) = v45;
  *(_QWORD *)(inited + 464) = 0xD000000000000014;
  *(_QWORD *)(inited + 472) = 0x8000000245FCD260;
  v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_245FBF370;
  *(_QWORD *)(v46 + 32) = static MetalDataType.float4;
  v60 = v46;
  specialized Array._endMutation()();
  v47 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v48 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v47, v60);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(_QWORD *)(inited + 480) = v48;
  v49 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySS5label_11ShaderGraph13MetalDataTypeC4typetGG_AI0jK8PropertyVs5NeverOTg508_sSiSS11g7Graph13ijk7CAA0dE8m48VIgyggo_Si6offset_SS5label_AC4typet7elementtAEs5n98OIegnrzr_TR04_s11a7Graph13cde69C6StructC4note8typeName10fieldSpecsAESSSg_S2S5label_AC0H0tdtcfcAA0dT32F19VSi_SSAJ_AcKttXEfU_Tf3nnnpf_nTf1cn_n(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: String, type: MetalDataType));
  swift_arrayDestroy();
  type metadata accessor for MetalDataType.Struct();
  v50 = swift_allocObject();
  v51 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD000000000000027, 0x8000000245FCD190, 0x100000000, 0x100000000, 0, v49, v50);
  result = swift_release();
  static MetalDataType.re.geometry_modifier.geometry = v51;
  return result;
}

uint64_t static MetalDataType.re.surface.geometry.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for geometry);
}

uint64_t one-time initialization function for surface_properties()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t result;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String, type: MetalDataType)>);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 32) = 0x6C6F635F65736162;
  *(_OWORD *)(inited + 16) = xmmword_245FC37D0;
  *(_QWORD *)(inited + 40) = 0xEA0000000000726FLL;
  if (one-time initialization token for half3 != -1)
    swift_once();
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  v1 = swift_retain();
  v2 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v1, MEMORY[0x24BEE4AF8]);
  swift_release();
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 56) = 0x6C616D726F6ELL;
  *(_QWORD *)(inited + 64) = 0xE600000000000000;
  if (one-time initialization token for float3 != -1)
    swift_once();
  swift_allocObject();
  v3 = swift_retain();
  v4 = MEMORY[0x24BEE4AF8];
  v5 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v3, MEMORY[0x24BEE4AF8]);
  swift_release();
  *(_QWORD *)(inited + 72) = v5;
  strcpy((char *)(inited + 80), "emissive_color");
  *(_BYTE *)(inited + 95) = -18;
  swift_allocObject();
  v6 = swift_retain();
  v7 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v6, v4);
  swift_release();
  *(_QWORD *)(inited + 96) = v7;
  *(_QWORD *)(inited + 104) = 0x73656E6867756F72;
  *(_QWORD *)(inited + 112) = 0xE900000000000073;
  if (one-time initialization token for half != -1)
    swift_once();
  swift_allocObject();
  v8 = swift_retain();
  v9 = MEMORY[0x24BEE4AF8];
  v10 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v8, MEMORY[0x24BEE4AF8]);
  swift_release();
  *(_QWORD *)(inited + 120) = v10;
  *(_QWORD *)(inited + 128) = 0x63696C6C6174656DLL;
  *(_QWORD *)(inited + 136) = 0xE800000000000000;
  swift_allocObject();
  v11 = swift_retain();
  v12 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v11, v9);
  swift_release();
  *(_QWORD *)(inited + 144) = v12;
  *(_QWORD *)(inited + 152) = 0xD000000000000011;
  *(_QWORD *)(inited + 160) = 0x8000000245FCD3F0;
  swift_allocObject();
  v13 = swift_retain();
  v14 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v13, v9);
  swift_release();
  *(_QWORD *)(inited + 168) = v14;
  *(_QWORD *)(inited + 176) = 0x72616C7563657073;
  *(_QWORD *)(inited + 184) = 0xE800000000000000;
  swift_allocObject();
  v15 = swift_retain();
  v16 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v15, v9);
  swift_release();
  *(_QWORD *)(inited + 192) = v16;
  *(_QWORD *)(inited + 200) = 0x7974696361706FLL;
  *(_QWORD *)(inited + 208) = 0xE700000000000000;
  swift_allocObject();
  v17 = swift_retain();
  v18 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v17, v9);
  swift_release();
  *(_QWORD *)(inited + 216) = v18;
  *(_QWORD *)(inited + 224) = 0x616F637261656C63;
  *(_QWORD *)(inited + 232) = 0xE900000000000074;
  swift_allocObject();
  v19 = swift_retain();
  v20 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v19, v9);
  swift_release();
  *(_QWORD *)(inited + 240) = v20;
  *(_QWORD *)(inited + 248) = 0xD000000000000013;
  *(_QWORD *)(inited + 256) = 0x8000000245FCD410;
  swift_allocObject();
  v21 = swift_retain();
  v22 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v21, v9);
  swift_release();
  *(_QWORD *)(inited + 264) = v22;
  *(_QWORD *)(inited + 272) = 0xD000000000000010;
  *(_QWORD *)(inited + 280) = 0x8000000245FCD430;
  v23 = static MetalDataType.half3;
  swift_allocObject();
  v24 = swift_retain();
  v25 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v24, v9);
  swift_release();
  *(_QWORD *)(inited + 288) = v25;
  strcpy((char *)(inited + 296), "set_base_color");
  *(_BYTE *)(inited + 311) = -18;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_245FBF370;
  *(_QWORD *)(v26 + 32) = v23;
  v64 = v26;
  specialized Array._endMutation()();
  v27 = one-time initialization token for void;
  swift_retain();
  if (v27 != -1)
    swift_once();
  v28 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_bridgeObjectRetain();
  v29 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v28, v64);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(_QWORD *)(inited + 312) = v29;
  *(_QWORD *)(inited + 320) = 0x6D726F6E5F746573;
  *(_QWORD *)(inited + 328) = 0xEA00000000006C61;
  v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_245FBF370;
  *(_QWORD *)(v30 + 32) = static MetalDataType.float3;
  v65 = v30;
  specialized Array._endMutation()();
  v31 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v32 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v31, v65);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(_QWORD *)(inited + 336) = v32;
  *(_QWORD *)(inited + 344) = 0xD000000000000012;
  *(_QWORD *)(inited + 352) = 0x8000000245FCD480;
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_245FBF370;
  *(_QWORD *)(v33 + 32) = static MetalDataType.half3;
  v66 = v33;
  specialized Array._endMutation()();
  v34 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v35 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v34, v66);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(_QWORD *)(inited + 360) = v35;
  strcpy((char *)(inited + 368), "set_roughness");
  *(_WORD *)(inited + 382) = -4864;
  v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_245FBF370;
  *(_QWORD *)(v36 + 32) = static MetalDataType.half;
  v67 = v36;
  specialized Array._endMutation()();
  v37 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v38 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v37, v67);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(_QWORD *)(inited + 384) = v38;
  strcpy((char *)(inited + 392), "set_metallic");
  *(_BYTE *)(inited + 405) = 0;
  *(_WORD *)(inited + 406) = -5120;
  v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_245FBF370;
  *(_QWORD *)(v39 + 32) = static MetalDataType.half;
  v68 = v39;
  specialized Array._endMutation()();
  v40 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v41 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v40, v68);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(_QWORD *)(inited + 408) = v41;
  *(_QWORD *)(inited + 416) = 0xD000000000000015;
  *(_QWORD *)(inited + 424) = 0x8000000245FCD4A0;
  v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_245FBF370;
  *(_QWORD *)(v42 + 32) = static MetalDataType.half;
  v69 = v42;
  specialized Array._endMutation()();
  v43 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v44 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v43, v69);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(_QWORD *)(inited + 432) = v44;
  strcpy((char *)(inited + 440), "set_specular");
  *(_BYTE *)(inited + 453) = 0;
  *(_WORD *)(inited + 454) = -5120;
  v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_245FBF370;
  *(_QWORD *)(v45 + 32) = static MetalDataType.half;
  v70 = v45;
  specialized Array._endMutation()();
  v46 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v47 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v46, v70);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(_QWORD *)(inited + 456) = v47;
  *(_QWORD *)(inited + 464) = 0x6361706F5F746573;
  *(_QWORD *)(inited + 472) = 0xEB00000000797469;
  v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = xmmword_245FBF370;
  *(_QWORD *)(v48 + 32) = static MetalDataType.half;
  v71 = v48;
  specialized Array._endMutation()();
  v49 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v50 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v49, v71);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(_QWORD *)(inited + 480) = v50;
  strcpy((char *)(inited + 488), "set_clearcoat");
  *(_WORD *)(inited + 502) = -4864;
  v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_245FBF370;
  *(_QWORD *)(v51 + 32) = static MetalDataType.half;
  v72 = v51;
  specialized Array._endMutation()();
  v52 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v53 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v52, v72);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(_QWORD *)(inited + 504) = v53;
  *(_QWORD *)(inited + 512) = 0xD000000000000017;
  *(_QWORD *)(inited + 520) = 0x8000000245FCD4C0;
  v54 = swift_allocObject();
  *(_OWORD *)(v54 + 16) = xmmword_245FBF370;
  *(_QWORD *)(v54 + 32) = static MetalDataType.half;
  v73 = v54;
  specialized Array._endMutation()();
  v55 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v56 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v55, v73);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(_QWORD *)(inited + 528) = v56;
  *(_QWORD *)(inited + 536) = 0xD000000000000014;
  *(_QWORD *)(inited + 544) = 0x8000000245FCD4E0;
  v57 = swift_allocObject();
  *(_OWORD *)(v57 + 16) = xmmword_245FBF370;
  *(_QWORD *)(v57 + 32) = static MetalDataType.half3;
  v74 = v57;
  specialized Array._endMutation()();
  v58 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v59 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v58, v74);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(_QWORD *)(inited + 552) = v59;
  v60 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySS5label_11ShaderGraph13MetalDataTypeC4typetGG_AI0jK8PropertyVs5NeverOTg508_sSiSS11g7Graph13ijk7CAA0dE8m48VIgyggo_Si6offset_SS5label_AC4typet7elementtAEs5n98OIegnrzr_TR04_s11a7Graph13cde69C6StructC4note8typeName10fieldSpecsAESSSg_S2S5label_AC0H0tdtcfcAA0dT32F19VSi_SSAJ_AcKttXEfU_Tf3nnnpf_nTf1cn_n(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: String, type: MetalDataType));
  swift_arrayDestroy();
  type metadata accessor for MetalDataType.Struct();
  v61 = swift_allocObject();
  v62 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD000000000000027, 0x8000000245FCD450, 0x100000000, 0x100000000, 0, v60, v61);
  result = swift_release();
  static MetalDataType.re.surface.surface_properties = v62;
  return result;
}

uint64_t static MetalDataType.re.surface.surface_properties.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for surface_properties);
}

uint64_t static MetalDataType.re.geometry_modifier.uniforms.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for uniforms);
}

uint64_t static MetalDataType.re.geometry_modifier.geometry.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for geometry);
}

uint64_t one-time initialization function for textures()
{
  uint64_t inited;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String, type: MetalDataType)>);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 32) = 0x6C6F635F65736162;
  *(_OWORD *)(inited + 16) = xmmword_245FC3800;
  *(_QWORD *)(inited + 40) = 0xEA0000000000726FLL;
  if (one-time initialization token for texture2d_half != -1)
    swift_once();
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  v1 = swift_retain();
  v2 = MEMORY[0x24BEE4AF8];
  v3 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v1, MEMORY[0x24BEE4AF8]);
  swift_release();
  *(_QWORD *)(inited + 48) = v3;
  *(_QWORD *)(inited + 56) = 0x7974696361706FLL;
  *(_QWORD *)(inited + 64) = 0xE700000000000000;
  swift_allocObject();
  v4 = swift_retain();
  v5 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v4, v2);
  swift_release();
  *(_QWORD *)(inited + 72) = v5;
  *(_QWORD *)(inited + 80) = 0x6C616D726F6ELL;
  *(_QWORD *)(inited + 88) = 0xE600000000000000;
  swift_allocObject();
  v6 = swift_retain();
  v7 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v6, v2);
  swift_release();
  *(_QWORD *)(inited + 96) = v7;
  strcpy((char *)(inited + 104), "emissive_color");
  *(_BYTE *)(inited + 119) = -18;
  swift_allocObject();
  v8 = swift_retain();
  v9 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v8, v2);
  swift_release();
  *(_QWORD *)(inited + 120) = v9;
  *(_QWORD *)(inited + 128) = 0x73656E6867756F72;
  *(_QWORD *)(inited + 136) = 0xE900000000000073;
  swift_allocObject();
  v10 = swift_retain();
  v11 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v10, v2);
  swift_release();
  *(_QWORD *)(inited + 144) = v11;
  *(_QWORD *)(inited + 152) = 0x63696C6C6174656DLL;
  *(_QWORD *)(inited + 160) = 0xE800000000000000;
  swift_allocObject();
  v12 = swift_retain();
  v13 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v12, v2);
  swift_release();
  *(_QWORD *)(inited + 168) = v13;
  *(_QWORD *)(inited + 176) = 0xD000000000000011;
  *(_QWORD *)(inited + 184) = 0x8000000245FCD3F0;
  swift_allocObject();
  v14 = swift_retain();
  v15 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v14, v2);
  swift_release();
  *(_QWORD *)(inited + 192) = v15;
  *(_QWORD *)(inited + 200) = 0x72616C7563657073;
  *(_QWORD *)(inited + 208) = 0xE800000000000000;
  swift_allocObject();
  v16 = swift_retain();
  v17 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v16, v2);
  swift_release();
  *(_QWORD *)(inited + 216) = v17;
  *(_QWORD *)(inited + 224) = 0x616F637261656C63;
  *(_QWORD *)(inited + 232) = 0xE900000000000074;
  swift_allocObject();
  v18 = swift_retain();
  v19 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v18, v2);
  swift_release();
  *(_QWORD *)(inited + 240) = v19;
  *(_QWORD *)(inited + 248) = 0xD000000000000013;
  *(_QWORD *)(inited + 256) = 0x8000000245FCD410;
  swift_allocObject();
  v20 = swift_retain();
  v21 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v20, v2);
  swift_release();
  *(_QWORD *)(inited + 264) = v21;
  *(_QWORD *)(inited + 272) = 0xD000000000000010;
  *(_QWORD *)(inited + 280) = 0x8000000245FCD430;
  swift_allocObject();
  v22 = swift_retain();
  v23 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v22, v2);
  swift_release();
  *(_QWORD *)(inited + 288) = v23;
  *(_QWORD *)(inited + 296) = 0x6D6F74737563;
  *(_QWORD *)(inited + 304) = 0xE600000000000000;
  swift_allocObject();
  v24 = swift_retain();
  v25 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v24, v2);
  swift_release();
  *(_QWORD *)(inited + 312) = v25;
  v26 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySS5label_11ShaderGraph13MetalDataTypeC4typetGG_AI0jK8PropertyVs5NeverOTg508_sSiSS11g7Graph13ijk7CAA0dE8m48VIgyggo_Si6offset_SS5label_AC4typet7elementtAEs5n98OIegnrzr_TR04_s11a7Graph13cde69C6StructC4note8typeName10fieldSpecsAESSSg_S2S5label_AC0H0tdtcfcAA0dT32F19VSi_SSAJ_AcKttXEfU_Tf3nnnpf_nTf1cn_n(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: String, type: MetalDataType));
  swift_arrayDestroy();
  type metadata accessor for MetalDataType.Struct();
  v27 = swift_allocObject();
  v28 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD00000000000001DLL, 0x8000000245FCD3D0, 0x100000000, 0x100000000, 0, v26, v27);
  result = swift_release();
  static MetalDataType.re.texture.textures = v28;
  return result;
}

uint64_t static MetalDataType.re.texture.textures.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for textures);
}

uint64_t one-time initialization function for material_parameters()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String, type: MetalDataType)>);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 32) = 0x6C6F635F65736162;
  *(_OWORD *)(inited + 16) = xmmword_245FC2000;
  *(_QWORD *)(inited + 40) = 0xEF746E69745F726FLL;
  if (one-time initialization token for float3 != -1)
    swift_once();
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  v1 = swift_retain();
  v2 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v1, MEMORY[0x24BEE4AF8]);
  swift_release();
  *(_QWORD *)(inited + 48) = v2;
  strcpy((char *)(inited + 56), "opacity_scale");
  *(_WORD *)(inited + 70) = -4864;
  if (one-time initialization token for float != -1)
    swift_once();
  swift_allocObject();
  v3 = swift_retain();
  v4 = MEMORY[0x24BEE4AF8];
  v5 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v3, MEMORY[0x24BEE4AF8]);
  swift_release();
  *(_QWORD *)(inited + 72) = v5;
  *(_QWORD *)(inited + 80) = 0xD000000000000011;
  *(_QWORD *)(inited + 88) = 0x8000000245FCD390;
  swift_allocObject();
  v6 = swift_retain();
  v7 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v6, v4);
  swift_release();
  *(_QWORD *)(inited + 96) = v7;
  *(_QWORD *)(inited + 104) = 0x73656E6867756F72;
  *(_QWORD *)(inited + 112) = 0xEF656C6163735F73;
  swift_allocObject();
  v8 = swift_retain();
  v9 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v8, v4);
  swift_release();
  *(_QWORD *)(inited + 120) = v9;
  strcpy((char *)(inited + 128), "metallic_scale");
  *(_BYTE *)(inited + 143) = -18;
  swift_allocObject();
  v10 = swift_retain();
  v11 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v10, v4);
  swift_release();
  *(_QWORD *)(inited + 144) = v11;
  strcpy((char *)(inited + 152), "specular_scale");
  *(_BYTE *)(inited + 167) = -18;
  swift_allocObject();
  v12 = swift_retain();
  v13 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v12, v4);
  swift_release();
  *(_QWORD *)(inited + 168) = v13;
  strcpy((char *)(inited + 176), "emissive_color");
  *(_BYTE *)(inited + 191) = -18;
  swift_allocObject();
  v14 = swift_retain();
  v15 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v14, v4);
  swift_release();
  *(_QWORD *)(inited + 192) = v15;
  *(_QWORD *)(inited + 200) = 0x616F637261656C63;
  *(_QWORD *)(inited + 208) = 0xEF656C6163735F74;
  swift_allocObject();
  v16 = swift_retain();
  v17 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v16, v4);
  swift_release();
  *(_QWORD *)(inited + 216) = v17;
  *(_QWORD *)(inited + 224) = 0xD000000000000019;
  *(_QWORD *)(inited + 232) = 0x8000000245FCD3B0;
  swift_allocObject();
  v18 = swift_retain();
  v19 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v18, v4);
  swift_release();
  *(_QWORD *)(inited + 240) = v19;
  v20 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySS5label_11ShaderGraph13MetalDataTypeC4typetGG_AI0jK8PropertyVs5NeverOTg508_sSiSS11g7Graph13ijk7CAA0dE8m48VIgyggo_Si6offset_SS5label_AC4typet7elementtAEs5n98OIegnrzr_TR04_s11a7Graph13cde69C6StructC4note8typeName10fieldSpecsAESSSg_S2S5label_AC0H0tdtcfcAA0dT32F19VSi_SSAJ_AcKttXEfU_Tf3nnnpf_nTf1cn_n(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: String, type: MetalDataType));
  swift_arrayDestroy();
  type metadata accessor for MetalDataType.Struct();
  v21 = swift_allocObject();
  v22 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD000000000000029, 0x8000000245FCD360, 0x100000000, 0x100000000, 0, v20, v21);
  result = swift_release();
  static MetalDataType.re.material.material_parameters = v22;
  return result;
}

uint64_t static MetalDataType.re.material.material_parameters.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for material_parameters);
}

uint64_t one-time initialization function for CameraView()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, (MetalDataType, Any?)?)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_245FC1530;
  *(_QWORD *)(inited + 32) = 0x6F6E6F4D6BLL;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  if (one-time initialization token for uint32 != -1)
    swift_once();
  v1 = static MetalDataType.uint32;
  v2 = MEMORY[0x24BEE1768];
  *(_QWORD *)(inited + 48) = static MetalDataType.uint32;
  *(_QWORD *)(inited + 56) = 0;
  *(_QWORD *)(inited + 80) = v2;
  *(_QWORD *)(inited + 88) = 0x7466654C6BLL;
  *(_QWORD *)(inited + 96) = 0xE500000000000000;
  *(_QWORD *)(inited + 104) = v1;
  *(_QWORD *)(inited + 112) = 1;
  *(_QWORD *)(inited + 136) = v2;
  *(_QWORD *)(inited + 144) = 0x74686769526BLL;
  *(_QWORD *)(inited + 152) = 0xE600000000000000;
  *(_QWORD *)(inited + 160) = v1;
  *(_QWORD *)(inited + 192) = v2;
  *(_QWORD *)(inited + 168) = 2;
  swift_retain_n();
  v3 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for MetalDataType.Enum();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 72) = v3;
  v5 = swift_bridgeObjectRetain();
  v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph13MetalDataTypeC_ypSgtSg_G_s6UInt32Vs5NeverOTg504_s11e7Graph13ghi58C4EnumC4note8typeName5typesAESSSg_SSSDySSAC_ypSgtSgGtcfcs6J8VAKXEfU_Tf1cn_n(v5);
  v7 = specialized Sequence<>.max()(v6);
  swift_bridgeObjectRelease();
  v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph13MetalDataTypeC_ypSgtSg_G_s6UInt32Vs5NeverOTg504_s11e7Graph13ghi58C4EnumC4note8typeName5typesAESSSg_SSSDySSAC_ypSgtSgGtcfcs6J9VAKXEfU0_Tf1cn_n(v3);
  swift_bridgeObjectRelease();
  v9 = specialized Sequence<>.max()(v8);
  swift_bridgeObjectRelease();
  v10 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD000000000000016, 0x8000000245FCD100, v7 | ((HIDWORD(v7) & 1) << 32), v9 | ((HIDWORD(v9) & 1) << 32), 0, MEMORY[0x24BEE4AF8], v4);
  result = swift_release();
  static MetalDataType.re.CameraView = v10;
  return result;
}

uint64_t *MetalDataType.re.CameraView.unsafeMutableAddressor()
{
  if (one-time initialization token for CameraView != -1)
    swift_once();
  return &static MetalDataType.re.CameraView;
}

uint64_t static MetalDataType.re.CameraView.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for CameraView);
}

uint64_t one-time initialization function for EnvironmentRadianceResult()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DataTypeProperty>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_245FBECE0;
  if (one-time initialization token for half3 != -1)
    swift_once();
  v1 = static MetalDataType.half3;
  *(_QWORD *)(v0 + 32) = 0x5265737566666964;
  *(_QWORD *)(v0 + 40) = 0xEF65636E61696461;
  v2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 48) = v1;
  *(_QWORD *)(v0 + 56) = v2;
  *(_BYTE *)(v0 + 64) = 1;
  *(_OWORD *)(v0 + 72) = xmmword_245FC16F0;
  *(_QWORD *)(v0 + 88) = 0x8000000245FCB7D0;
  *(_QWORD *)(v0 + 96) = v1;
  *(_QWORD *)(v0 + 104) = v2;
  *(_BYTE *)(v0 + 112) = 1;
  *(_QWORD *)(v0 + 120) = 1;
  type metadata accessor for MetalDataType.Struct();
  v3 = swift_allocObject();
  swift_retain_n();
  v4 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD000000000000019, 0x8000000245FCD540, 0x100000000, 0x100000000, 0, v0, v3);
  result = swift_release();
  static MetalDataType.re.EnvironmentRadianceResult = v4;
  return result;
}

uint64_t static MetalDataType.re.EnvironmentRadianceResult.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for EnvironmentRadianceResult);
}

uint64_t one-time initialization function for HoverData()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DataTypeProperty>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_245FC2010;
  if (one-time initialization token for float != -1)
    swift_once();
  v1 = static MetalDataType.float;
  *(_QWORD *)(v0 + 32) = 0x6E695F7265766F68;
  *(_QWORD *)(v0 + 40) = 0xEF797469736E6574;
  v2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 48) = v1;
  *(_QWORD *)(v0 + 56) = v2;
  *(_BYTE *)(v0 + 64) = 1;
  *(_QWORD *)(v0 + 72) = 0;
  v3 = one-time initialization token for float3;
  swift_retain();
  if (v3 != -1)
  {
    swift_once();
    v1 = static MetalDataType.float;
  }
  v4 = static MetalDataType.float3;
  strcpy((char *)(v0 + 80), "hover_position");
  *(_BYTE *)(v0 + 95) = -18;
  *(_QWORD *)(v0 + 96) = v4;
  *(_QWORD *)(v0 + 104) = v2;
  *(_BYTE *)(v0 + 112) = 1;
  *(_OWORD *)(v0 + 120) = xmmword_245FC3810;
  *(_QWORD *)(v0 + 136) = 0x8000000245FCD590;
  *(_QWORD *)(v0 + 144) = v1;
  *(_QWORD *)(v0 + 152) = v2;
  *(_BYTE *)(v0 + 160) = 1;
  *(_QWORD *)(v0 + 168) = 2;
  v5 = one-time initialization token for BOOL;
  swift_retain();
  swift_retain();
  if (v5 != -1)
    swift_once();
  v6 = static MetalDataType.BOOL;
  *(_QWORD *)(v0 + 176) = 0x76697463615F7369;
  *(_QWORD *)(v0 + 184) = 0xE900000000000065;
  *(_QWORD *)(v0 + 192) = v6;
  *(_QWORD *)(v0 + 200) = v2;
  *(_BYTE *)(v0 + 208) = 1;
  *(_QWORD *)(v0 + 216) = 4;
  type metadata accessor for MetalDataType.Struct();
  v7 = swift_allocObject();
  swift_retain();
  v8 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD000000000000020, 0x8000000245FCD560, 0x100000000, 0x100000000, 0, v0, v7);
  result = swift_release();
  static MetalDataType.re.HoverData = v8;
  return result;
}

uint64_t static MetalDataType.re.HoverData.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for HoverData);
}

uint64_t one-time initialization function for surface_parameters_private()
{
  unint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  _QWORD *v13;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  int64_t v16;
  _QWORD *v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;

  if (one-time initialization token for surface_parameters != -1)
    swift_once();
  v1 = static MetalDataType.re.surface_parameters;
  swift_beginAccess();
  v2 = *(_QWORD **)(v1 + 16);
  v3 = one-time initialization token for uniforms_private;
  swift_bridgeObjectRetain();
  if (v3 != -1)
    swift_once();
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  v4 = swift_retain();
  v5 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v4, MEMORY[0x24BEE4AF8]);
  swift_release();
  if (one-time initialization token for uniforms_private != -1)
    swift_once();
  swift_allocObject();
  v6 = swift_retain();
  v7 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v6, MEMORY[0x24BEE4AF8]);
  swift_release();
  if (one-time initialization token for void != -1)
    swift_once();
  type metadata accessor for MetalDataType.Pointer();
  swift_allocObject();
  v8 = (_QWORD *)swift_retain();
  v9 = specialized MetalDataType.Pointer.init(to:isConst:addressSpace:)(v8, 0, 0);
  swift_release();
  swift_allocObject();
  v10 = MEMORY[0x24BEE4AF8];
  v11 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v9, MEMORY[0x24BEE4AF8]);
  swift_release();
  v12 = v2[2];
  v13 = (_QWORD *)(v12 + 3);
  if (__OFADD__(v12, 3))
  {
    __break(1u);
LABEL_24:
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v0 > 1), v9, 1, v13);
    v0 = v13[3];
    v15 = v0 >> 1;
    goto LABEL_18;
  }
  v26 = v11;
  v11 = v7;
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && (v0 = v2[3], v15 = v0 >> 1, (uint64_t)(v0 >> 1) >= (uint64_t)v13))
  {
    v7 = v10;
    v13 = v2;
  }
  else
  {
    v7 = v10;
    if (v12 <= (uint64_t)v13)
      v16 = v12 + 3;
    else
      v16 = v12;
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v16, 1, v2);
    v0 = v13[3];
    v15 = v0 >> 1;
  }
  v10 = v13[2];
  v9 = v10 + 1;
  swift_retain();
  if (v15 <= v10)
    goto LABEL_24;
LABEL_18:
  v13[2] = v9;
  v17 = &v13[6 * v10];
  v17[4] = 0xD000000000000010;
  v17[5] = 0x8000000245FCD5B0;
  v17[6] = v5;
  v17[7] = v7;
  *((_BYTE *)v17 + 64) = 1;
  v17[9] = 0;
  v18 = v10 + 2;
  swift_retain();
  if (v15 <= v9)
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v0 > 1), v18, 1, v13);
  v13[2] = v18;
  v19 = &v13[6 * v9];
  v19[4] = 0xD000000000000010;
  v19[5] = 0x8000000245FCD5D0;
  v19[6] = v11;
  v19[7] = v7;
  *((_BYTE *)v19 + 64) = 1;
  v19[9] = 0;
  v20 = v13[2];
  v21 = v13[3];
  swift_retain();
  if (v20 >= v21 >> 1)
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v20 + 1, 1, v13);
  v13[2] = v20 + 1;
  v22 = (char *)&v13[6 * v20];
  strcpy(v22 + 32, "user_constants");
  v22[47] = -18;
  *((_QWORD *)v22 + 6) = v26;
  *((_QWORD *)v22 + 7) = v7;
  v22[64] = 1;
  *((_QWORD *)v22 + 9) = 0;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  type metadata accessor for MetalDataType.Struct();
  v23 = swift_allocObject();
  v24 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD000000000000026, 0x8000000245FCD5F0, 0x100000000, 0x100000000, 0, (uint64_t)v13, v23);
  result = swift_release();
  static MetalDataType.re.surface_parameters_private = v24;
  return result;
}

uint64_t *MetalDataType.re.surface_private.uniforms_private.unsafeMutableAddressor()
{
  if (one-time initialization token for uniforms_private != -1)
    swift_once();
  return &static MetalDataType.re.surface_private.uniforms_private;
}

uint64_t *MetalDataType.re.geometry_modifier_private.uniforms_private.unsafeMutableAddressor()
{
  if (one-time initialization token for uniforms_private != -1)
    swift_once();
  return &static MetalDataType.re.geometry_modifier_private.uniforms_private;
}

uint64_t static MetalDataType.re.surface_parameters_private.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for surface_parameters_private);
}

uint64_t one-time initialization function for uniforms_private()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DataTypeProperty>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_245FBECD0;
  if (one-time initialization token for float3 != -1)
    swift_once();
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  v1 = swift_retain();
  v2 = MEMORY[0x24BEE4AF8];
  v3 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v1, MEMORY[0x24BEE4AF8]);
  swift_release();
  *(_QWORD *)(v0 + 32) = 0xD000000000000017;
  *(_QWORD *)(v0 + 40) = 0x8000000245FCD0E0;
  *(_QWORD *)(v0 + 48) = v3;
  *(_QWORD *)(v0 + 56) = v2;
  *(_BYTE *)(v0 + 64) = 1;
  *(_QWORD *)(v0 + 72) = 0;
  type metadata accessor for MetalDataType.Struct();
  v4 = swift_allocObject();
  v5 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD00000000000002DLL, 0x8000000245FCD0B0, 0x100000000, 0x100000000, 0, v0, v4);
  result = swift_release();
  static MetalDataType.re.surface_private.uniforms_private = v5;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DataTypeProperty>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_245FBECD0;
  if (one-time initialization token for float4x4 != -1)
    swift_once();
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  v1 = swift_retain();
  v2 = MEMORY[0x24BEE4AF8];
  v3 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v1, MEMORY[0x24BEE4AF8]);
  swift_release();
  *(_QWORD *)(v0 + 32) = 0xD000000000000011;
  *(_QWORD *)(v0 + 40) = 0x8000000245FCD090;
  *(_QWORD *)(v0 + 48) = v3;
  *(_QWORD *)(v0 + 56) = v2;
  *(_BYTE *)(v0 + 64) = 1;
  *(_QWORD *)(v0 + 72) = 0;
  type metadata accessor for MetalDataType.Struct();
  v4 = swift_allocObject();
  v5 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD000000000000037, 0x8000000245FCD050, 0x100000000, 0x100000000, 0, v0, v4);
  result = swift_release();
  static MetalDataType.re.geometry_modifier_private.uniforms_private = v5;
  return result;
}

uint64_t static MetalDataType.re.surface_private.uniforms_private.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for uniforms_private);
}

uint64_t one-time initialization function for geometry_private()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DataTypeProperty>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_245FBECD0;
  if (one-time initialization token for float3 != -1)
    swift_once();
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  v1 = swift_retain();
  v2 = MEMORY[0x24BEE4AF8];
  v3 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v1, MEMORY[0x24BEE4AF8]);
  swift_release();
  strcpy((char *)(v0 + 32), "crws_position");
  *(_WORD *)(v0 + 46) = -4864;
  *(_QWORD *)(v0 + 48) = v3;
  *(_QWORD *)(v0 + 56) = v2;
  *(_BYTE *)(v0 + 64) = 1;
  *(_QWORD *)(v0 + 72) = 0;
  type metadata accessor for MetalDataType.Struct();
  v4 = swift_allocObject();
  v5 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD00000000000002DLL, 0x8000000245FCD020, 0x100000000, 0x100000000, 0, v0, v4);
  result = swift_release();
  static MetalDataType.re.surface_private.geometry_private = v5;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DataTypeProperty>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_245FBECD0;
  if (one-time initialization token for CameraView != -1)
    swift_once();
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  v1 = swift_retain();
  v2 = MEMORY[0x24BEE4AF8];
  v3 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v1, MEMORY[0x24BEE4AF8]);
  swift_release();
  *(_QWORD *)(v0 + 32) = 0xD000000000000011;
  *(_QWORD *)(v0 + 40) = 0x8000000245FCD000;
  *(_QWORD *)(v0 + 48) = v3;
  *(_QWORD *)(v0 + 56) = v2;
  *(_BYTE *)(v0 + 64) = 1;
  *(_QWORD *)(v0 + 72) = 0;
  type metadata accessor for MetalDataType.Struct();
  v4 = swift_allocObject();
  v5 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD000000000000037, 0x8000000245FCCFC0, 0x100000000, 0x100000000, 0, v0, v4);
  result = swift_release();
  static MetalDataType.re.geometry_modifier_private.geometry_private = v5;
  return result;
}

uint64_t *MetalDataType.re.surface_private.geometry_private.unsafeMutableAddressor()
{
  if (one-time initialization token for geometry_private != -1)
    swift_once();
  return &static MetalDataType.re.surface_private.geometry_private;
}

uint64_t static MetalDataType.re.surface_private.geometry_private.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for geometry_private);
}

uint64_t one-time initialization function for geometry_parameters_private()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  int64_t v15;
  _QWORD *v16;
  int64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  if (one-time initialization token for geometry_parameters != -1)
    swift_once();
  v2 = static MetalDataType.re.geometry_parameters;
  swift_beginAccess();
  v3 = *(_QWORD **)(v2 + 16);
  v4 = one-time initialization token for uniforms_private;
  swift_bridgeObjectRetain();
  if (v4 != -1)
    swift_once();
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  v5 = swift_retain();
  v6 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v5, MEMORY[0x24BEE4AF8]);
  swift_release();
  if (one-time initialization token for void != -1)
    swift_once();
  type metadata accessor for MetalDataType.Pointer();
  swift_allocObject();
  v7 = (_QWORD *)swift_retain();
  v8 = specialized MetalDataType.Pointer.init(to:isConst:addressSpace:)(v7, 0, 0);
  swift_release();
  swift_allocObject();
  v9 = MEMORY[0x24BEE4AF8];
  v10 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v8, MEMORY[0x24BEE4AF8]);
  swift_release();
  v11 = (_QWORD *)v3[2];
  v12 = (int64_t)v11 + 2;
  if (__OFADD__(v11, 2))
  {
    __break(1u);
LABEL_20:
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v1 > 1), v12, 1, v11);
    v1 = v11[3];
    v14 = v1 >> 1;
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && (v1 = v3[3], v14 = v1 >> 1, (uint64_t)(v1 >> 1) >= v12))
  {
    v11 = v3;
  }
  else
  {
    if ((uint64_t)v11 <= v12)
      v15 = (int64_t)v11 + 2;
    else
      v15 = (int64_t)v11;
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
    v1 = v11[3];
    v14 = v1 >> 1;
  }
  v0 = v11[2];
  v12 = v0 + 1;
  swift_retain();
  if (v14 <= v0)
    goto LABEL_20;
LABEL_16:
  v11[2] = v12;
  v16 = &v11[6 * v0];
  v16[4] = 0xD000000000000010;
  v16[5] = 0x8000000245FCD5B0;
  v16[6] = v6;
  v16[7] = v9;
  *((_BYTE *)v16 + 64) = 1;
  v16[9] = 0;
  v17 = v0 + 2;
  swift_retain();
  if (v14 <= v12)
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v1 > 1), v17, 1, v11);
  v11[2] = v17;
  v18 = (char *)&v11[6 * v12];
  strcpy(v18 + 32, "user_constants");
  v18[47] = -18;
  *((_QWORD *)v18 + 6) = v10;
  *((_QWORD *)v18 + 7) = v9;
  v18[64] = 1;
  *((_QWORD *)v18 + 9) = 0;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  type metadata accessor for MetalDataType.Struct();
  v19 = swift_allocObject();
  v20 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD000000000000027, 0x8000000245FCD620, 0x100000000, 0x100000000, 0, (uint64_t)v11, v19);
  result = swift_release();
  static MetalDataType.re.geometry_parameters_private = v20;
  return result;
}

uint64_t static MetalDataType.re.geometry_parameters_private.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for geometry_parameters_private);
}

uint64_t static MetalDataType.re.geometry_modifier_private.uniforms_private.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for uniforms_private);
}

uint64_t *MetalDataType.re.geometry_modifier_private.geometry_private.unsafeMutableAddressor()
{
  if (one-time initialization token for geometry_private != -1)
    swift_once();
  return &static MetalDataType.re.geometry_modifier_private.geometry_private;
}

uint64_t static MetalDataType.re.geometry_modifier_private.geometry_private.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for geometry_private);
}

uint64_t one-time initialization function for BlendFactor()
{
  uint64_t result;

  result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0x614620646E656C42, 0xEC000000726F7463, 0x636146646E656C42, 0xEB00000000726F74, (uint64_t)&outlined read-only object #0 of one-time initialization function for BlendFactor);
  static MetalDataType.BlendFactor = result;
  return result;
}

uint64_t *MetalDataType.BlendFactor.unsafeMutableAddressor()
{
  if (one-time initialization token for BlendFactor != -1)
    swift_once();
  return &static MetalDataType.BlendFactor;
}

uint64_t static MetalDataType.BlendFactor.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for BlendFactor);
}

uint64_t one-time initialization function for BlendOperation()
{
  uint64_t result;

  result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0x704F20646E656C42, 0xEF6E6F6974617265, 0x65704F646E656C42, 0xEE006E6F69746172, (uint64_t)&outlined read-only object #0 of one-time initialization function for BlendOperation);
  static MetalDataType.BlendOperation = result;
  return result;
}

uint64_t *MetalDataType.BlendOperation.unsafeMutableAddressor()
{
  if (one-time initialization token for BlendOperation != -1)
    swift_once();
  return &static MetalDataType.BlendOperation;
}

uint64_t static MetalDataType.BlendOperation.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for BlendOperation);
}

uint64_t one-time initialization function for CompareFunction()
{
  uint64_t result;

  result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0xD000000000000010, 0x8000000245FCCFA0, 0x46657261706D6F43, 0xEF6E6F6974636E75, (uint64_t)&outlined read-only object #0 of one-time initialization function for CompareFunction);
  static MetalDataType.CompareFunction = result;
  return result;
}

uint64_t *MetalDataType.CompareFunction.unsafeMutableAddressor()
{
  if (one-time initialization token for CompareFunction != -1)
    swift_once();
  return &static MetalDataType.CompareFunction;
}

uint64_t static MetalDataType.CompareFunction.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for CompareFunction);
}

ValueMetadata *type metadata accessor for MetalDataType.re()
{
  return &type metadata for MetalDataType.re;
}

ValueMetadata *type metadata accessor for MetalDataType.re.surface()
{
  return &type metadata for MetalDataType.re.surface;
}

ValueMetadata *type metadata accessor for MetalDataType.re.geometry_modifier()
{
  return &type metadata for MetalDataType.re.geometry_modifier;
}

ValueMetadata *type metadata accessor for MetalDataType.re.texture()
{
  return &type metadata for MetalDataType.re.texture;
}

ValueMetadata *type metadata accessor for MetalDataType.re.material()
{
  return &type metadata for MetalDataType.re.material;
}

ValueMetadata *type metadata accessor for MetalDataType.re.surface_private()
{
  return &type metadata for MetalDataType.re.surface_private;
}

ValueMetadata *type metadata accessor for MetalDataType.re.geometry_modifier_private()
{
  return &type metadata for MetalDataType.re.geometry_modifier_private;
}

const char *ShaderGraphNode.paramsInputLabel.unsafeMutableAddressor()
{
  return "$0";
}

void *ShaderGraphNode.customUniformsArgumentName.unsafeMutableAddressor()
{
  return &static ShaderGraphNode.customUniformsArgumentName;
}

void *ShaderGraphNode.customUniformsInputLabel.unsafeMutableAddressor()
{
  return &static ShaderGraphNode.customUniformsInputLabel;
}

void *ShaderGraphNode.surfaceShaderNodeLabel.unsafeMutableAddressor()
{
  return &static ShaderGraphNode.surfaceShaderNodeLabel;
}

unint64_t static ShaderGraphNode.surfaceShaderNodeLabel.getter()
{
  return 0xD000000000000017;
}

void *ShaderGraphNode.geometryModifierNodeLabel.unsafeMutableAddressor()
{
  return &static ShaderGraphNode.geometryModifierNodeLabel;
}

unint64_t static ShaderGraphNode.geometryModifierNodeLabel.getter()
{
  return 0xD000000000000018;
}

uint64_t static ShaderGraphNode.paramsInputLabel.getter()
{
  return 12324;
}

uint64_t static ShaderGraphNode.customUniformsArgumentName.getter()
{
  return 12580;
}

uint64_t static ShaderGraphNode.customUniformsInputLabel.getter()
{
  return 12580;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = MEMORY[0x24BEE4AF8];
  v8 = MEMORY[0x24BEE4AF8];
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = a1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of WeakBox<SGEdge>(v4, (uint64_t)&v7);
      v5 = MEMORY[0x24954C3E4](&v7);
      v6 = outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v7, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
      if (v5)
      {
        MEMORY[0x24954B1A8](v6);
        if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v4 += 8;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v8;
  }
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  char *v4;
  void *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v14 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_17;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (i = 4; ; ++i)
    {
      v4 = (a1 & 0xC000000000000001) != 0
         ? (char *)MEMORY[0x24954B748](i - 4, a1)
         : (char *)*(id *)(a1 + 8 * i);
      v5 = v4;
      v6 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v7 = &v4[OBJC_IVAR___SGInput_edge];
      swift_beginAccess();
      v8 = MEMORY[0x24954C3E4](v7);
      if (v8)
      {
        v9 = (void *)v8;
        v10 = (_QWORD *)(v8 + OBJC_IVAR___SGEdge_from);
        swift_beginAccess();
        v11 = *v10 + OBJC_IVAR___SGOutput_node;
        swift_beginAccess();
        v12 = MEMORY[0x24954C3E4](v11);

        if (v12)
        {
          MEMORY[0x24954B1A8]();
          if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      else
      {

      }
      if (v6 == v2)
      {
        swift_bridgeObjectRelease();
        return v14;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGNodeCG_SSs5NeverOTg504_s11d29Graph7SGGraphC6insertyySayAA6F62CGSgKFSSAFcfu_32b446a066102f7f77dfc7f44f189789ecAFSSTf3nnnpk_nTf1cn_nTm(unint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char *v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;

  if (a1 >> 62)
    goto LABEL_15;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v5 = MEMORY[0x24BEE4AF8];
    if (!v4)
      return v5;
    v17 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0)
      break;
    v7 = 0;
    v5 = v17;
    while (v4 != v7)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v8 = (char *)MEMORY[0x24954B748](v7, a1);
      else
        v8 = (char *)*(id *)(a1 + 8 * v7 + 32);
      v9 = v8;
      v10 = &v8[*a3];
      swift_beginAccess();
      v11 = *(_QWORD *)v10;
      v12 = *((_QWORD *)v10 + 1);
      swift_bridgeObjectRetain();

      v14 = *(_QWORD *)(v17 + 16);
      v13 = *(_QWORD *)(v17 + 24);
      if (v14 >= v13 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      ++v7;
      *(_QWORD *)(v17 + 16) = v14 + 1;
      v15 = v17 + 16 * v14;
      *(_QWORD *)(v15 + 32) = v11;
      *(_QWORD *)(v15 + 40) = v12;
      if (v4 == v7)
        return v5;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay11ShaderGraph16DataTypePropertyVGG_AJs5NeverOTg506_sSi11f7Graph16hij34VACIgygo_Si6offset_AC7elementtACs5K173OIegnrzr_TR04_s11a94Graph7SGGraphC24createCustomUniformsType5named18textureAssignmentsAA17SGTypeDescriptionCSS_Sayq26TextureAssignmentVGtKFAA04c2G8E13VSi_AMtXEfU4_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;

  v12 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v2 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v2)
  {
    v3 = 0;
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4;
      v11 = *(_OWORD *)(v4 + 1);
      v6 = *((_BYTE *)v4 + 32);
      v8 = *(_QWORD *)(v12 + 16);
      v7 = *(_QWORD *)(v12 + 24);
      swift_bridgeObjectRetain();
      swift_retain();
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      *(_QWORD *)(v12 + 16) = v8 + 1;
      v9 = v12 + 48 * v8;
      *(_QWORD *)(v9 + 72) = v3;
      v4 += 6;
      *(_QWORD *)(v9 + 32) = v5;
      *(_OWORD *)(v9 + 40) = v11;
      *(_QWORD *)(v9 + 56) = MEMORY[0x24BEE4AF8];
      *(_BYTE *)(v9 + 64) = v6;
      ++v3;
    }
    while (v2 != v3);
  }
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t specialized Array.remove(at:)(unint64_t a1)
{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    v5 = v4 - 1;
    v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      v7 = &v3[2 * a1];
      v8 = v7[4];
      memmove(v7 + 4, v7 + 6, 16 * v6);
      v3[2] = v5;
      *v1 = v3;
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    v5 = v4 - 1;
    v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      v7 = &v3[a1];
      v8 = v7[4];
      memmove(v7 + 4, v7 + 5, 8 * v6);
      v3[2] = v5;
      *v1 = v3;
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.remove(at:)(unint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t *v2;
  uint64_t v5;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v5 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v5;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v5 < 0 || (v5 & 0x4000000000000000) != 0)
  {
    v5 = a2(v5);
    *v2 = v5;
  }
  v7 = v5 & 0xFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(v7 + 16);
  if (v8 <= a1)
  {
    __break(1u);
  }
  else
  {
    v9 = v8 - 1;
    v10 = v8 - 1 - a1;
    if (v10 >= 0)
    {
      v11 = v7 + 8 * a1;
      v12 = *(_QWORD *)(v11 + 32);
      memmove((void *)(v11 + 32), (const void *)(v11 + 40), 8 * v10);
      *(_QWORD *)(v7 + 16) = v9;
      specialized Array._endMutation()();
      return v12;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t SGGraph.edgeConnected(toInputNamed:on:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  v5 = (char *)specialized Sequence.first(where:)(v4, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v5)
    return 0;
  v6 = &v5[OBJC_IVAR___SGInput_edge];
  swift_beginAccess();
  v7 = MEMORY[0x24954C3E4](v6);

  return v7;
}

void SGGraph.remove(edge:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  Swift::Int v6;
  uint64_t v7;
  char v8;
  char v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _BYTE v20[24];
  _BYTE v21[8];

  v2 = v1;
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  v4 = *(_QWORD *)(a1 + OBJC_IVAR___SGEdge_from);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<SGEdge>((uint64_t)v20, (uint64_t)v21);
  v5 = (uint64_t *)(v4 + OBJC_IVAR___SGOutput_edges);
  swift_beginAccess();
  v6 = specialized OrderedSet._find(_:)((uint64_t)v21, *v5, v5[1]);
  v9 = v8;
  if ((v8 & 1) != 0)
    v18 = 0;
  else
    specialized OrderedSet._removeExistingMember(at:in:)(v6, v7, (uint64_t)&v18);
  v19 = v9 & 1;
  swift_endAccess();
  outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
  outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v18, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>?);
  v10 = (unint64_t *)(v2 + OBJC_IVAR___SGGraph_edges);
  swift_beginAccess();
  v11 = *v10;
  swift_bridgeObjectRetain();
  specialized Collection<>.firstIndex(of:)(a1, v11);
  v13 = v12;
  v15 = v14;
  swift_bridgeObjectRelease();
  if ((v15 & 1) != 0)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(_QWORD *)v17 = 0xD000000000000032;
    *(_QWORD *)(v17 + 8) = 0x8000000245FCD690;
    *(_BYTE *)(v17 + 16) = 1;
    swift_willThrow();
  }
  else
  {
    swift_beginAccess();
    v16 = (void *)specialized Array.remove(at:)(v13, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
    swift_endAccess();

  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SGGraph.insert(_:)(Swift::OpaquePointer_optional a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t rawValue;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void *v14;
  BOOL v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  BOOL v25;
  uint64_t v26;
  _QWORD *v27;
  BOOL v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  id v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  char *v59;
  uint64_t v60;
  id v61;
  char isUniquelyReferenced_nonNull_native;
  char *v63;
  BOOL v64;
  BOOL v65;
  _QWORD *v66;
  uint64_t v67;
  char *v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  void *v74;
  char *v75;
  uint64_t *v76;
  uint64_t i;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char v81[8];

  if (!a1.value._rawValue)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v29 = (void *)swift_allocError();
    *(_OWORD *)v30 = xmmword_245FC38C0;
    *(_BYTE *)(v30 + 16) = 1;
    swift_willThrow();
LABEL_30:
    type metadata accessor for SGError();
    v34 = v29;
    SGError.__allocating_init(_:)(v29);
    swift_willThrow();

    return;
  }
  v2 = v1;
  rawValue = (unint64_t)a1.value._rawValue;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGNodeCG_SSs5NeverOTg504_s11d29Graph7SGGraphC6insertyySayAA6F62CGSgKFSSAFcfu_32b446a066102f7f77dfc7f44f189789ecAFSSTf3nnnpk_nTf1cn_nTm(v4, (uint64_t)v81, &OBJC_IVAR___SGNode_name);
  swift_bridgeObjectRelease();
  v6 = specialized Set.init<A>(_:)(v5);
  swift_bridgeObjectRelease();
  v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17BuiltInDefinitionV13ReservedNamesOG_SSs5NeverOTg504_s11d84Graph03mapB033_409C205F32E965F544D867255561D769LL_4intoyAA7SGGraphC_AA0B0VztKFSSAA17fgh3V13iJ54Ocfu_33_9a8543e77c82589f922673eb5cf911b0ALSSTf3nnnpk_nTf1cn_n((uint64_t)&outlined read-only object #0 of SGGraph.insert(_:));
  v8 = specialized Set.init<A>(_:)(v7);
  swift_bridgeObjectRelease();
  v9 = specialized Set.union<A>(_:)(v8, v6);
  v71 = v2;
  v72 = rawValue;
  if (rawValue >> 62)
    goto LABEL_33;
  v10 = *(_QWORD *)((rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (i = v10; i; i = _CocoaArrayWrapper.endIndex.getter())
  {
    v11 = 0;
    v12 = rawValue & 0xC000000000000001;
    v75 = (char *)(rawValue + 32);
    v2 = v9 + 56;
    v78 = v9;
    v79 = rawValue & 0xC000000000000001;
    while (1)
    {
      v13 = v12 ? (char *)MEMORY[0x24954B748](v11, rawValue) : (char *)*(id *)&v75[8 * v11];
      v14 = v13;
      v15 = __OFADD__(v11++, 1);
      if (v15)
        break;
      if (*(_QWORD *)(v9 + 16))
      {
        v16 = &v13[OBJC_IVAR___SGNode_name];
        v18 = *(_QWORD *)&v13[OBJC_IVAR___SGNode_name];
        v17 = *(_QWORD *)&v13[OBJC_IVAR___SGNode_name + 8];
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v19 = Hasher._finalize()();
        v20 = v9;
        v21 = -1 << *(_BYTE *)(v9 + 32);
        v22 = v19 & ~v21;
        if (((*(_QWORD *)(v2 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
        {
          v23 = *(_QWORD *)(v20 + 48);
          v24 = (_QWORD *)(v23 + 16 * v22);
          v25 = *v24 == v18 && v24[1] == v17;
          if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
LABEL_29:
            swift_bridgeObjectRelease();
            v32 = *(_QWORD *)v16;
            v31 = *((_QWORD *)v16 + 1);
            lazy protocol witness table accessor for type APIError and conformance APIError();
            v29 = (void *)swift_allocError();
            *(_QWORD *)v33 = v32;
            *(_QWORD *)(v33 + 8) = v31;
            *(_BYTE *)(v33 + 16) = 9;
            swift_bridgeObjectRetain();
            swift_willThrow();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();

            goto LABEL_30;
          }
          v26 = ~v21;
          while (1)
          {
            v22 = (v22 + 1) & v26;
            if (((*(_QWORD *)(v2 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
              break;
            v27 = (_QWORD *)(v23 + 16 * v22);
            v28 = *v27 == v18 && v27[1] == v17;
            if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              goto LABEL_29;
          }

          swift_bridgeObjectRelease();
          rawValue = v72;
          v9 = v78;
          v12 = v79;
        }
        else
        {

          swift_bridgeObjectRelease();
          rawValue = v72;
          v9 = v20;
          v12 = v79;
        }
      }
      else
      {

      }
      if (v11 == i)
      {
        swift_bridgeObjectRelease();
        v2 = v71;
        goto LABEL_35;
      }
    }
    __break(1u);
LABEL_33:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
LABEL_35:
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v35 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v35);
  swift_endAccess();
  if (!i)
  {
LABEL_90:
    swift_bridgeObjectRelease();
    return;
  }
  v73 = rawValue & 0xC000000000000001;
  v69 = (char *)(rawValue + 32);
  v76 = (uint64_t *)(v2 + OBJC_IVAR___SGGraph_nodeMap);
  v36 = (_QWORD *)(v2 + OBJC_IVAR___SGGraph_nodeMap + 16);
  swift_bridgeObjectRetain();
  v37 = 0;
  v70 = v36;
  while (1)
  {
    v42 = v73 ? (char *)MEMORY[0x24954B748](v37, v72) : (char *)*(id *)&v69[8 * v37];
    v43 = v42;
    v15 = __OFADD__(v37, 1);
    v44 = v37 + 1;
    if (v15)
      break;
    v80 = v44;
    swift_beginAccess();
    swift_unknownObjectWeakAssign();
    v46 = *(_QWORD *)&v43[OBJC_IVAR___SGNode_name];
    v45 = *(_QWORD *)&v43[OBJC_IVAR___SGNode_name + 8];
    swift_beginAccess();
    v47 = v2;
    v49 = *v76;
    v48 = (_QWORD *)v76[1];
    v50 = v48[2];
    if (*v76)
    {
      swift_bridgeObjectRetain();
      v74 = v43;
      v51 = v43;
      swift_retain();
      swift_retain();
      v52 = v45;
      v53 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v46, v45, (uint64_t)(v48 + 4), v50, (_QWORD *)(v49 + 16), v49 + 32);
      v55 = v54;
      v57 = v56;
      swift_release();
      swift_release();
      if ((v55 & 1) != 0)
      {
        v36 = v70;
        v2 = v71;
        v38 = v52;
        v39 = v74;
        goto LABEL_38;
      }
      v36 = v70;
      v2 = v71;
      v39 = v74;
    }
    else
    {
      v38 = v45;
      if (!v50)
        goto LABEL_61;
      v58 = v48[4] == v46 && v48[5] == v45;
      if (v58 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v53 = 0;
      }
      else
      {
        if (v50 == 1)
          goto LABEL_61;
        v64 = v48[6] == v46 && v48[7] == v45;
        if (v64 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          v53 = 1;
        }
        else
        {
          if (v50 == 2)
            goto LABEL_61;
          v65 = v48[8] == v46 && v48[9] == v45;
          if (v65 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            v53 = 2;
          }
          else
          {
            if (v50 == 3)
              goto LABEL_61;
            if ((v48[10] != v46 || v48[11] != v45) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            {
              v66 = v48 + 13;
              v67 = 4;
              while (v50 != v67)
              {
                if (*(v66 - 1) == v46 && *v66 == v38)
                {
                  v53 = v67;
                  goto LABEL_54;
                }
                v53 = v67++;
                v66 += 2;
                if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  goto LABEL_54;
              }
LABEL_61:
              swift_bridgeObjectRetain();
              v39 = v43;
              v63 = v43;
              v57 = 0;
              v2 = v47;
LABEL_38:
              v40 = v39;
              specialized OrderedSet._appendNew(_:in:)(v46, v38, v57);
              v41 = v40;
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              goto LABEL_39;
            }
            v53 = 3;
          }
        }
      }
LABEL_54:
      swift_bridgeObjectRetain();
      v39 = v43;
      v59 = v43;
      v2 = v47;
    }
    v60 = *v36;
    v61 = v39;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v36 = v60;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v60);
    if ((v53 & 0x8000000000000000) != 0)
      goto LABEL_92;
    if (v53 >= *(_QWORD *)(v60 + 16))
      goto LABEL_93;
    objc_storeStrong((id *)(v60 + 8 * v53 + 32), v39);
LABEL_39:
    specialized ContiguousArray._endMutation()();
    swift_bridgeObjectRelease();
    swift_endAccess();

    v37 = v80;
    if (v80 == i)
    {
      swift_bridgeObjectRelease();
      goto LABEL_90;
    }
  }
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
}

void SGGraph.connect(_:to:)(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  objc_class *v15;
  char *v16;
  char *v17;
  char *v18;
  id v19;
  char *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  Swift::String v40;
  uint64_t v41;
  void *v42;
  Swift::String v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  char v50;
  _QWORD *v51;
  id v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  char *v56;
  char *v57;
  void *v58;
  char v59[24];
  uint64_t v60;
  uint64_t v61;
  objc_super v62;
  char v63[8];

  if (!a1)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    v25 = xmmword_245FC38E0;
LABEL_11:
    *(_OWORD *)v24 = v25;
    *(_BYTE *)(v24 + 16) = 1;
    swift_willThrow();
    return;
  }
  if (!a2)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    v25 = xmmword_245FC38D0;
    goto LABEL_11;
  }
  v4 = v2;
  v6 = (uint64_t *)&a1[OBJC_IVAR___SGOutput_attachment];
  swift_beginAccess();
  v7 = *v6;
  v8 = (void *)v6[1];
  v9 = (uint64_t *)&a2[OBJC_IVAR___SGInput_attachment];
  swift_beginAccess();
  v10 = (void *)v9[1];
  if (!v8)
  {
    if (!v10)
    {
      v37 = *(_QWORD *)&a2[OBJC_IVAR___SGInput_name + 8];
      v60 = *(_QWORD *)&a2[OBJC_IVAR___SGInput_name];
      v61 = v37;
      v38 = a1;
      v39 = a2;
      swift_bridgeObjectRetain();
      v40._countAndFlagsBits = 8236;
      v40._object = (void *)0xE200000000000000;
      String.append(_:)(v40);
      v41 = *(_QWORD *)&v38[OBJC_IVAR___SGOutput_name];
      v42 = *(void **)&v38[OBJC_IVAR___SGOutput_name + 8];
      swift_bridgeObjectRetain();
      v43._countAndFlagsBits = v41;
      v43._object = v42;
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type APIError and conformance APIError();
      v22 = (void *)swift_allocError();
      *(_QWORD *)v44 = v60;
      *(_QWORD *)(v44 + 8) = v37;
      v45 = 5;
LABEL_27:
      *(_BYTE *)(v44 + 16) = v45;
      goto LABEL_28;
    }
    v27 = *(_QWORD *)&a1[OBJC_IVAR___SGOutput_name];
    v26 = *(_QWORD *)&a1[OBJC_IVAR___SGOutput_name + 8];
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v22 = (void *)swift_allocError();
    *(_QWORD *)v28 = v27;
    *(_QWORD *)(v28 + 8) = v26;
    v29 = 6;
LABEL_15:
    *(_BYTE *)(v28 + 16) = v29;
    v32 = a1;
    v33 = a2;
    swift_bridgeObjectRetain();
LABEL_28:
    swift_willThrow();
    goto LABEL_29;
  }
  if (!v10)
  {
    v31 = *(_QWORD *)&a2[OBJC_IVAR___SGInput_name];
    v30 = *(_QWORD *)&a2[OBJC_IVAR___SGInput_name + 8];
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v22 = (void *)swift_allocError();
    *(_QWORD *)v28 = v31;
    *(_QWORD *)(v28 + 8) = v30;
    v29 = 7;
    goto LABEL_15;
  }
  v11 = *v9;
  swift_bridgeObjectRetain_n();
  v57 = a1;
  v56 = a2;
  swift_bridgeObjectRetain();
  v55 = v7;
  v12 = SGGraph.node(named:)(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v13 = SGGraph.node(named:)(v11, v10);
  swift_bridgeObjectRelease();
  v58 = (void *)v12;
  if (!v12)
  {
    if (v13)
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v34 = (void *)v13;
      v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = xmmword_245FBECD0;
      *(_QWORD *)(v35 + 32) = v55;
      *(_QWORD *)(v35 + 40) = v8;
      lazy protocol witness table accessor for type APIError and conformance APIError();
      v22 = (void *)swift_allocError();
      *(_QWORD *)v36 = v35;
      *(_QWORD *)(v36 + 8) = 0;
      *(_BYTE *)(v36 + 16) = 8;
      swift_willThrow();

LABEL_29:
      type metadata accessor for SGError();
      v54 = v22;
      SGError.__allocating_init(_:)(v22);
      swift_willThrow();

      return;
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v53 = swift_allocObject();
    *(_OWORD *)(v53 + 16) = xmmword_245FBECE0;
    *(_QWORD *)(v53 + 32) = v11;
    *(_QWORD *)(v53 + 40) = v10;
    *(_QWORD *)(v53 + 48) = v55;
    *(_QWORD *)(v53 + 56) = v8;
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v22 = (void *)swift_allocError();
    *(_QWORD *)v44 = v53;
    *(_QWORD *)(v44 + 8) = 0;
    v45 = 8;
    goto LABEL_27;
  }
  swift_bridgeObjectRelease();
  if (!v13)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v46 + 32) = v11;
    *(_QWORD *)(v46 + 40) = v10;
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v22 = (void *)swift_allocError();
    *(_QWORD *)v47 = v46;
    *(_QWORD *)(v47 + 8) = 0;
    *(_BYTE *)(v47 + 16) = 8;
    swift_willThrow();
    goto LABEL_20;
  }
  v14 = (void *)v13;
  swift_bridgeObjectRelease();
  v15 = (objc_class *)type metadata accessor for SGEdge();
  v16 = (char *)objc_allocWithZone(v15);
  *(_QWORD *)&v16[OBJC_IVAR___SGEdge_from] = v57;
  *(_QWORD *)&v16[OBJC_IVAR___SGEdge_to] = v56;
  v62.receiver = v16;
  v62.super_class = v15;
  v17 = v57;
  v18 = v56;
  v19 = objc_msgSendSuper2(&v62, sel_init);
  v20 = &v18[OBJC_IVAR___SGInput_edge];
  swift_beginAccess();
  v21 = (void *)MEMORY[0x24954C3E4](v20);
  if (v21)
  {

    lazy protocol witness table accessor for type APIError and conformance APIError();
    v22 = (void *)swift_allocError();
    *(_QWORD *)v23 = 0;
    *(_QWORD *)(v23 + 8) = 0;
    *(_BYTE *)(v23 + 16) = 21;
    swift_willThrow();

LABEL_20:
    goto LABEL_29;
  }
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<SGEdge>((uint64_t)v59, (uint64_t)v63);
  v48 = (uint64_t *)&v17[OBJC_IVAR___SGOutput_edges];
  swift_beginAccess();
  specialized OrderedSet._find(_:)((uint64_t)v63, *v48, v48[1]);
  if ((v50 & 1) != 0)
    specialized OrderedSet._appendNew(_:in:)((uint64_t)v63, v49);
  swift_endAccess();
  outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v63, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
  v51 = (_QWORD *)(v4 + OBJC_IVAR___SGGraph_edges);
  swift_beginAccess();
  v52 = v19;
  MEMORY[0x24954B1A8]();
  if (*(_QWORD *)((*v51 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v51 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();

}

uint64_t SGGraph.edgeConnected(to:)(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + OBJC_IVAR___SGInput_edge;
  swift_beginAccess();
  return MEMORY[0x24954C3E4](v1);
}

unint64_t SGGraph.node(containing:)(uint64_t a1)
{
  return SGGraph.node(containing:)(a1, &OBJC_IVAR___SGOutput_attachment);
}

{
  return SGGraph.node(containing:)(a1, &OBJC_IVAR___SGInput_attachment);
}

uint64_t SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(void *a1, char a2, uint64_t a3, uint64_t a4, void (*a5)(char *, char *))
{
  return specialized SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(a1, a2, a3, a4, a5);
}

_OWORD *SGGraph.topologicalSort()()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  __int128 v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[13];
  _OWORD v23[13];
  __int128 v24;
  uint64_t v25;

  v25 = MEMORY[0x24BEE4AF8];
  specialized SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(*(void **)(v0 + OBJC_IVAR___SGGraph_resultsNode), 1, (uint64_t)default argument 1 of OSSignpostIntervalState.init(id:isOpen:), 0, (void (*)(char *, char *))partial apply for closure #1 in SGGraph.topologicalSort());
  v2 = (_OWORD *)v25;
  if (!v1)
  {
    v3 = *(_QWORD *)(v25 + 16);
    if (v3)
    {
      v4 = v25 + 24 * v3;
      v5 = *(void **)(v4 + 16);
      v6 = *(void **)(v4 + 24);
      v7 = *(id *)(v4 + 8);
      v8 = v5;
      v9 = v6;
      return v2;
    }
    v2 = v23;
    _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi9_((uint64_t)v22);
    outlined init with take of SGInternalError.ErrorType(v22, v23);
    lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
    v24 = 0uLL;
    swift_allocError();
    v11 = v23[1];
    *v12 = v23[0];
    v12[1] = v11;
    v13 = v23[5];
    v15 = v23[2];
    v14 = v23[3];
    v12[4] = v23[4];
    v12[5] = v13;
    v12[2] = v15;
    v12[3] = v14;
    v16 = v23[9];
    v18 = v23[6];
    v17 = v23[7];
    v12[8] = v23[8];
    v12[9] = v16;
    v12[6] = v18;
    v12[7] = v17;
    v19 = v24;
    v21 = v23[10];
    v20 = v23[11];
    v12[12] = v23[12];
    v12[13] = v19;
    v12[10] = v21;
    v12[11] = v20;
    swift_willThrow();
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t specialized Sequence.flatMap<A>(_:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v11 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_11;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (i = 4; ; ++i)
    {
      v4 = (a1 & 0xC000000000000001) != 0
         ? (char *)MEMORY[0x24954B748](i - 4, a1)
         : (char *)*(id *)(a1 + 8 * i);
      v5 = v4;
      v6 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v7 = (uint64_t *)&v4[OBJC_IVAR___SGOutput_edges];
      swift_beginAccess();
      v9 = *v7;
      v8 = v7[1];
      swift_retain();
      swift_retain();

      specialized Array.append<A>(contentsOf:)(v9, v8);
      if (v6 == v2)
      {
        swift_bridgeObjectRelease();
        return v11;
      }
    }
    __break(1u);
LABEL_11:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(_QWORD *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];

  v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v4);
  v5 = *(_QWORD *)(v4 + 16);
  v7[0] = v4 + 32;
  v7[1] = v5;
  result = a2(v7);
  *a1 = v4;
  return result;
}

uint64_t key path getter for SGInput.edge : SGInput@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1 + OBJC_IVAR___SGInput_edge;
  swift_beginAccess();
  result = MEMORY[0x24954C3E4](v3);
  *a2 = result;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SGGraph.collapseConstantAndPassthroughNodes()()
{
  uint64_t v0;
  _OWORD *v1;
  void *v2;
  void *v3;
  void *v4;
  _OWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  id *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  id v13;
  id v14;
  unsigned __int8 *v15;
  id v16;
  Swift::String v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  _OWORD *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  uint64_t v37;
  void **v38;
  id v39;
  void *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  id v43;
  Swift::String v44;
  __int128 v45;
  unint64_t v46;
  unint64_t v47;
  _OWORD *v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;
  id v56;
  id v57;
  __int128 v58;
  __int128 v59;
  _QWORD v60[3];
  _OWORD *v61;

  v1 = SGGraph.topologicalSort()();
  if (!v0)
  {
    v5 = v1;
    v6 = v2;
    v7 = v4;

    v8 = *((_QWORD *)v5 + 2);
    if (v8)
    {
      v9 = v8 - 1;
      v10 = (id *)v5 + 3 * v8 + 3;
      v11 = MEMORY[0x24BEE4AF8];
      v61 = v5;
      while (v9 < *((_QWORD *)v5 + 2))
      {
        v12 = (unsigned __int8 *)*(v10 - 2);
        if (v12[OBJC_IVAR___SGNode_data + 80] <= 0x3Fu)
        {
          v13 = *v10;
          v58 = *((_OWORD *)v10 - 1);
          v14 = *v10;
          v15 = v12;
          v16 = *((id *)&v58 + 1);
          v17._countAndFlagsBits = 0x5F746F645F444ELL;
          v17._object = (void *)0xE700000000000000;
          if (String.hasPrefix(_:)(v17))
          {
            v60[0] = v11;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v11 + 16) + 1, 1);
              v11 = v60[0];
            }
            v18 = v58;
            v20 = *(_QWORD *)(v11 + 16);
            v19 = *(_QWORD *)(v11 + 24);
            if (v20 >= v19 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
              v18 = v58;
              v11 = v60[0];
            }
            *(_QWORD *)(v11 + 16) = v20 + 1;
            v21 = v11 + 24 * v20;
            *(_OWORD *)(v21 + 32) = v18;
            *(_QWORD *)(v21 + 48) = v13;
          }
          else
          {

          }
          v5 = v61;
        }
        --v9;
        v10 -= 3;
        if (v9 == -1)
          goto LABEL_17;
      }
      __break(1u);
    }
    v11 = MEMORY[0x24BEE4AF8];
LABEL_17:
    swift_bridgeObjectRelease();
    v22 = *(_QWORD *)(v11 + 16);
    if (v22)
    {
      swift_retain();
      v23 = (id *)(v11 + 48);
      do
      {
        v24 = *(v23 - 2);
        v25 = *(v23 - 1);
        v26 = *v23;
        v27 = v24;
        v28 = v25;
        v29 = v27;
        v30 = v28;
        SGGraph.extract(node:)((uint64_t)v29);
        v23 += 3;

        --v22;
      }
      while (v22);
      swift_release();
    }
    swift_release();
    v31 = SGGraph.topologicalSort()();
    v33 = v32;
    v35 = v34;

    v37 = *((_QWORD *)v31 + 2);
    if (!v37)
    {
LABEL_37:
      v61 = (_OWORD *)MEMORY[0x24BEE4AF8];
      goto LABEL_38;
    }
    v61 = (_OWORD *)MEMORY[0x24BEE4AF8];
LABEL_23:
    v38 = (void **)v31 + 3 * v37-- + 3;
    while (1)
    {
      if (v37 >= *((_QWORD *)v31 + 2))
      {
        __break(1u);
        goto LABEL_37;
      }
      v40 = *v38;
      v41 = (unsigned __int8 *)*(v38 - 2);
      if (v41[OBJC_IVAR___SGNode_data + 80] > 0x3Fu)
      {
        v39 = v40;
      }
      else
      {
        v59 = *((_OWORD *)v38 - 1);
        v39 = v40;
        v42 = v41;
        v43 = *((id *)&v59 + 1);
        v44._countAndFlagsBits = 0x74736E6F635F444ELL;
        v44._object = (void *)0xEC0000005F746E61;
        if (String.hasPrefix(_:)(v44))
        {
          v60[0] = v61;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v61 + 2) + 1, 1);
            v61 = (_OWORD *)v60[0];
          }
          v45 = v59;
          v47 = *((_QWORD *)v61 + 2);
          v46 = *((_QWORD *)v61 + 3);
          if (v47 >= v46 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1);
            v45 = v59;
            v61 = (_OWORD *)v60[0];
          }
          v48 = v61;
          *((_QWORD *)v61 + 2) = v47 + 1;
          v49 = (uint64_t)v48 + 24 * v47;
          *(_OWORD *)(v49 + 32) = v45;
          *(_QWORD *)(v49 + 48) = v40;
          if (!v37)
          {
LABEL_38:
            swift_bridgeObjectRelease();
            v50 = *((_QWORD *)v61 + 2);
            if (v50)
            {
              v51 = (void **)(swift_retain() + 48);
              do
              {
                v53 = *(v51 - 1);
                v54 = *v51;
                v60[0] = *(v51 - 2);
                v52 = (void *)v60[0];
                v60[1] = v53;
                v60[2] = v54;
                v55 = v54;
                v56 = v52;
                v57 = v53;
                closure #4 in SGGraph.collapseConstantAndPassthroughNodes()((uint64_t)v60);
                v51 += 3;

                --v50;
              }
              while (v50);
              swift_release_n();
            }
            else
            {
              swift_release();
            }
            return;
          }
          goto LABEL_23;
        }

      }
      --v37;
      v38 -= 3;
      if (v37 == -1)
        goto LABEL_38;
    }
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SGGraph.removeUnconnectedNodesAndEdges()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  id v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  id v29;
  unint64_t v30;
  unint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  char v46;
  id v47;
  id v48;
  char v49;
  id v50;
  char v51;
  void **v52;
  void *v53;
  id v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  void **v64;
  uint64_t v65;
  _QWORD *v66;

  v2 = v1;
  v3 = specialized SGGraph.connectedUpstreamSubgraph(rootedAt:)(*(void **)(v0 + OBJC_IVAR___SGGraph_resultsNode));
  v59 = v4;
  swift_release();
  swift_release();
  v5 = (unint64_t *)(v0 + OBJC_IVAR___SGGraph_nodes);
  swift_beginAccess();
  v6 = *v5;
  v7 = v6 >> 62;
  if (v6 >> 62)
    goto LABEL_79;
  v8 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  if ((unint64_t)v8 >= 2)
  {
    while (1)
    {
      if ((v6 & 0xC000000000000001) != 0 && v8 != 2)
      {
        type metadata accessor for SGNode();
        v10 = 2;
        do
        {
          v11 = v10 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v10);
          v10 = v11;
        }
        while (v8 != v11);
      }
      if (v7)
      {
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.subscript.getter();
        v62 = v13;
        v12 = v14;
        v16 = v15;
        swift_bridgeObjectRelease();
        v8 = v16 >> 1;
      }
      else
      {
        v62 = (v6 & 0xFFFFFFFFFFFFFF8) + 32;
        swift_bridgeObjectRetain();
        v12 = 2;
      }
      swift_endAccess();
      if (v12 == v8)
      {
        swift_unknownObjectRelease();
LABEL_71:
        swift_release();
        swift_release();
        return;
      }
      v64 = (void **)(v59 + 32);
      v66 = (_QWORD *)(v3 + 16);
      v63 = v3 + 32;
      swift_unknownObjectRetain();
      v65 = v3;
      v58 = v8;
      while (1)
      {
        if (v12 >= v8)
          goto LABEL_76;
        v17 = *(void **)(v62 + 8 * v12);
        if (v3)
          break;
        v7 = *(_QWORD *)(v59 + 16);
        if (!v7)
        {
          v47 = v17;
          goto LABEL_60;
        }
        type metadata accessor for SGNode();
        v44 = *v64;
        v6 = v17;
        v45 = v44;
        v46 = static NSObject.== infix(_:_:)();

        if ((v46 & 1) != 0)
          goto LABEL_56;
        if (v7 == 1)
          goto LABEL_59;
        v48 = *(id *)(v59 + 40);
        v49 = static NSObject.== infix(_:_:)();

        if ((v49 & 1) != 0)
          goto LABEL_56;
        if (v7 == 2)
        {
LABEL_59:
          v3 = v65;
          goto LABEL_60;
        }
        v50 = *(id *)(v59 + 48);
        v51 = static NSObject.== infix(_:_:)();

        if ((v51 & 1) != 0)
        {
LABEL_56:

          v3 = v65;
          goto LABEL_16;
        }
        v61 = v17;
        v7 -= 3;
        v52 = (void **)(v59 + 56);
        while (v7)
        {
          v53 = *v52++;
          v54 = v53;
          v55 = static NSObject.== infix(_:_:)();

          --v7;
          if ((v55 & 1) != 0)
            goto LABEL_56;
        }
        v3 = v65;
LABEL_53:
        v17 = v61;
LABEL_60:
        SGGraph.remove(node:)((uint64_t)v17);
        if (v2)
        {
          swift_release();
          swift_release();
          swift_unknownObjectRelease_n();

          return;
        }

LABEL_16:
        if (++v12 == v8)
        {
          swift_unknownObjectRelease_n();
          goto LABEL_71;
        }
      }
      v6 = *(_QWORD *)(v3 + 16);
      v18 = v17;
      swift_retain();
      v19 = NSObject._rawHashValue(seed:)(v6);
      v20 = 1 << *(_QWORD *)(v3 + 16);
      v21 = v20 - 1;
      if (__OFSUB__(v20, 1))
        goto LABEL_78;
      v61 = v17;
      v6 = v21 & v19;
      v22 = _HashTable.UnsafeHandle._startIterator(bucket:)(v21 & v19, v66, v63);
      if (!v22)
        break;
      v25 = v23;
      v26 = v24;
      v60 = v2;
      v27 = (v22 ^ v21) + (*(uint64_t *)(v3 + 24) >> 6);
      if (v27 >= v21)
        v28 = v21;
      else
        v28 = 0;
      v7 = v27 - v28;
      type metadata accessor for SGNode();
      v29 = v64[v7];
      v2 = static NSObject.== infix(_:_:)();

      if ((v2 & 1) != 0)
      {
LABEL_15:

        v3 = v65;
        swift_release();
        v2 = v60;
        v8 = v58;
        goto LABEL_16;
      }
      v7 = 0;
      while (1)
      {
        ++v6;
        v33 = *v66 & 0x3FLL;
        v34 = 1 << *v66;
        v3 = v65;
        if (v6 == v34)
        {
          if ((v7 & 1) != 0)
            goto LABEL_86;
          v6 = 0;
          v7 = 1;
        }
        if (v26 >= v33)
          break;
        v35 = (uint64_t)(v6 * v33) >> 6;
        if (v26)
        {
          if (__OFADD__(v33 << v33, 64))
            goto LABEL_77;
          v36 = (v33 << v33) + 126;
          if ((v33 << v33) + 64 >= 1)
            v36 = (v33 << v33) + 63;
          if (v35 + 1 == v36 >> 6)
            v35 = 0;
          else
            ++v35;
        }
        v37 = v33 - v26;
        if (__OFSUB__(v33, v26))
          goto LABEL_74;
        v38 = v35 == 2 && v33 == 5;
        v39 = 64;
        if (v38)
          v39 = 32;
        v40 = __OFSUB__(v39, v37);
        v41 = v39 - v37;
        if (v40)
          goto LABEL_75;
        v42 = *(_QWORD *)(v63 + 8 * v35);
        v43 = ((v42 << v26) | v25) & (v34 - 1);
        v25 = v42 >> v37;
        v26 = v41;
        if (!v43)
          goto LABEL_51;
LABEL_26:
        v30 = v34 - 1;
        v31 = (v43 ^ v30) + (*(uint64_t *)(v65 + 24) >> 6);
        if (v31 < v30)
          v30 = 0;
        v32 = v64[v31 - v30];
        v2 = static NSObject.== infix(_:_:)();

        if ((v2 & 1) != 0)
          goto LABEL_15;
      }
      v40 = __OFSUB__(v26, v33);
      v26 -= v33;
      if (!v40)
      {
        v43 = (v34 - 1) & v25;
        v25 >>= v33;
        if (!v43)
        {
LABEL_51:
          v2 = v60;
          break;
        }
        goto LABEL_26;
      }
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v8 < 2)
        goto LABEL_84;
      swift_bridgeObjectRetain();
      v56 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v56 < 2)
        goto LABEL_85;
      swift_bridgeObjectRetain();
      v57 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v57 < v8)
      {
        __break(1u);
        goto LABEL_83;
      }
    }
    swift_release();
    v8 = v58;
    goto LABEL_53;
  }
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

char *SGGraph.surfaceNodeElement(ofType:)(char a1)
{
  char *v1;
  uint64_t v2;
  char v3;
  void *v4;
  char *v5;
  id v6;
  _BYTE v8[32];
  id v9;
  char *v10;

  v3 = a1 & 1;
  v10 = 0;
  v9 = 0;
  v4 = *(void **)&v1[OBJC_IVAR___SGGraph_resultsNode];
  v8[16] = v3;
  specialized SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(v4, 1, (uint64_t)partial apply for closure #1 in SGGraph.surfaceNodeElement(ofType:), (uint64_t)v8, (void (*)(char *, char *))partial apply for closure #2 in SGGraph.surfaceNodeElement(ofType:));
  if (v2)
  {

  }
  else
  {
    v1 = v10;
    if (!v10 || (v5 = &v10[OBJC_IVAR___SGNode_graph], swift_beginAccess(), !MEMORY[0x24954C3E4](v5)))
    {
      v6 = v9;

      return 0;
    }
  }
  return v1;
}

uint64_t mapUniforms(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<Int>>);
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in mapUniforms(_:);
  *(_QWORD *)(v3 + 24) = v2;
  v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph12TypedTextureVG_AF0G10AssignmentVs5NeverOTg504_s11d26Graph11mapUniformsySayAA17gh9VGSayAA05F14E0VGFAdGXEfU0_s11AnyIteratorVySiGTf1cn_nTf4ng_n(a1);
  swift_release();
  return v4;
}

id createCustomUniformsType(graph:textureAssignments:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id result;
  id v4;
  objc_class *v5;
  _BYTE *v6;
  _QWORD *v7;
  objc_super v8;

  result = (id)SGGraph.createCustomUniformsType(named:textureAssignments:)(0x736D726F66696E55, 0xE800000000000000, a2);
  v4 = result;
  if (!v2)
  {
    v5 = (objc_class *)type metadata accessor for SGPropertyDescription();
    v6 = objc_allocWithZone(v5);
    v7 = &v6[OBJC_IVAR___SGPropertyDescription_name];
    *v7 = 0x736D726F66696E55;
    v7[1] = 0xE800000000000000;
    *(_QWORD *)&v6[OBJC_IVAR___SGPropertyDescription_type] = v4;
    v6[OBJC_IVAR___SGPropertyDescription_visible] = 1;
    v8.receiver = v6;
    v8.super_class = v5;
    return objc_msgSendSuper2(&v8, sel_init);
  }
  return result;
}

void SGGraph.remove(node:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  id v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  double v45;
  char isUniquelyReferenced_native;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  id v58;
  void *v59;
  char v60;
  unint64_t v61;
  id v62;
  void *v63;
  char v64;
  unint64_t v65;
  int isUniquelyReferenced_nonNull_bridgeObject;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  id v73;
  void *v74;
  char v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  char *v97;
  char v98[24];
  char v99[8];
  uint64_t v100;
  char v101;
  unint64_t v102;

  v3 = (unint64_t *)(v1 + OBJC_IVAR___SGGraph_nodes);
  swift_beginAccess();
  v4 = *v3;
  swift_bridgeObjectRetain();
  specialized Collection<>.firstIndex(of:)(a1, v4);
  v90 = v5;
  v7 = v6;
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
    return;
  v8 = swift_bridgeObjectRetain();
  v9 = specialized Sequence.flatMap<A>(_:)(v8);
  swift_bridgeObjectRelease();
  v10 = specialized Sequence.compactMap<A>(_:)(v9);
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a1 + OBJC_IVAR___SGNode_inputs);
  v102 = MEMORY[0x24BEE4AF8];
  v88 = a1;
  if (v11 >> 62)
    goto LABEL_16;
  v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v12; v12 = _CocoaArrayWrapper.endIndex.getter())
  {
    v13 = 4;
    while (1)
    {
      v14 = (v11 & 0xC000000000000001) != 0
          ? (char *)MEMORY[0x24954B748](v13 - 4, v11)
          : (char *)*(id *)(v11 + 8 * v13);
      v15 = v14;
      v16 = v13 - 3;
      if (__OFADD__(v13 - 4, 1))
        break;
      v17 = &v14[OBJC_IVAR___SGInput_edge];
      swift_beginAccess();
      v18 = MEMORY[0x24954C3E4](v17);

      if (v18)
      {
        MEMORY[0x24954B1A8]();
        if (*(_QWORD *)((v102 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v102 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v13;
      if (v16 == v12)
      {
        swift_bridgeObjectRelease();
        v19 = v102;
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain_n();
  }
  swift_bridgeObjectRelease();
  v19 = MEMORY[0x24BEE4AF8];
LABEL_18:
  swift_bridgeObjectRelease();
  v102 = v10;
  specialized Array.append<A>(contentsOf:)(v19);
  if (v10 >> 62)
    goto LABEL_108;
  v20 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v20)
  {
LABEL_109:
    swift_bridgeObjectRelease_n();
    swift_beginAccess();
    v77 = (void *)specialized Array.remove(at:)(v90, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
    swift_endAccess();

    v79 = *(_QWORD *)(v88 + OBJC_IVAR___SGNode_name);
    v78 = *(_QWORD *)(v88 + OBJC_IVAR___SGNode_name + 8);
    v80 = (uint64_t *)(v91 + OBJC_IVAR___SGGraph_nodeMap);
    swift_beginAccess();
    v81 = *v80;
    v82 = (_QWORD *)v80[1];
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    v83 = specialized OrderedSet._find(_:)(v79, v78, v81, v82);
    v85 = v84;
    v87 = v86;
    swift_release();
    swift_release();
    if ((v85 & 1) == 0)
    {
      specialized OrderedSet._removeExistingMember(at:in:)(v83, v87);
      swift_bridgeObjectRelease();

    }
    swift_bridgeObjectRelease();
    swift_endAccess();
    return;
  }
LABEL_20:
  v94 = v10 & 0xC000000000000001;
  v96 = (unint64_t *)(v91 + OBJC_IVAR___SGGraph_edges);
  swift_beginAccess();
  v21 = 0;
  v89 = v10 + 32;
  v92 = v20;
  v93 = v10;
  while (1)
  {
    if (v94)
      v22 = (char *)MEMORY[0x24954B748](v21, v10);
    else
      v22 = (char *)*(id *)(v89 + 8 * v21);
    v97 = v22;
    v23 = __OFADD__(v21, 1);
    v24 = v21 + 1;
    if (v23)
      goto LABEL_105;
    v95 = v24;
    swift_beginAccess();
    swift_unknownObjectWeakAssign();
    v25 = *(_QWORD *)&v97[OBJC_IVAR___SGEdge_from];
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of WeakBox<SGEdge>((uint64_t)v98, (uint64_t)v99);
    v26 = v25 + OBJC_IVAR___SGOutput_edges;
    swift_beginAccess();
    v27 = *(_QWORD *)v26;
    v28 = *(_QWORD *)(v26 + 8);
    v29 = v28 + 32;
    v30 = *(_QWORD *)(v28 + 16);
    if (!*(_QWORD *)v26)
    {
      if (!v30)
      {
LABEL_38:
        v100 = 0;
        v41 = 1;
        goto LABEL_68;
      }
      v31 = 0;
      while (1)
      {
        outlined init with copy of WeakBox<SGEdge>(v29, (uint64_t)&v100);
        v36 = (void *)MEMORY[0x24954C3E4](&v100);
        v37 = MEMORY[0x24954C3E4](v99);
        v38 = (void *)v37;
        if (!v36)
          break;
        if (!v37)
        {
          v38 = v36;
LABEL_31:

          goto LABEL_32;
        }
        type metadata accessor for SGEdge();
        v39 = v36;
        v40 = static NSObject.== infix(_:_:)();

        if ((v40 & 1) != 0)
        {
LABEL_39:
          outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v100, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
          v35 = 0;
          goto LABEL_40;
        }
LABEL_32:
        outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v100, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
        ++v31;
        v29 += 8;
        if (v30 == v31)
          goto LABEL_38;
      }
      if (!v37)
        goto LABEL_39;
      goto LABEL_31;
    }
    swift_retain();
    v31 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v99, v29, v30, (_QWORD *)(v27 + 16), v27 + 32);
    v33 = v32;
    v35 = v34;
    swift_release();
    if ((v33 & 1) != 0)
      goto LABEL_38;
LABEL_40:
    v42 = *(_QWORD *)v26;
    v43 = *(_QWORD *)(*(_QWORD *)(v26 + 8) + 16);
    if (!*(_QWORD *)v26)
    {
      if (v43)
      {
        specialized ContiguousArray.remove(at:)(v31, (uint64_t)&v100);
        v41 = 0;
        goto LABEL_68;
      }
LABEL_58:
      specialized ContiguousArray.remove(at:)(v31, (uint64_t)&v100);
      v49 = *(_QWORD *)v26;
      v50 = *(_QWORD *)(v26 + 8);
      if (*(_QWORD *)v26)
      {
        swift_beginAccess();
        v51 = *(_QWORD *)(v49 + 24) & 0x3FLL;
      }
      else
      {
        v51 = 0;
      }
      v52 = *(_QWORD *)(v50 + 16);
      if (v51 || v52 >= 0x10)
      {
        v53 = specialized static _HashTable.scale(forCapacity:)(v52);
        if (v51 <= v53)
          v54 = v53;
        else
          v54 = v51;
        v55 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v50, v54, 0, v51);
        swift_release();
        v41 = 0;
        *(_QWORD *)v26 = v55;
      }
      else
      {
        swift_release();
        v41 = 0;
        *(_QWORD *)v26 = 0;
      }
      goto LABEL_68;
    }
    swift_beginAccess();
    v44 = *(_QWORD *)(v42 + 16) & 0x3FLL;
    if (v44 == (*(_QWORD *)(v42 + 24) & 0x3FLL) || v44 < 5)
    {
      if (!v43)
        goto LABEL_58;
    }
    else
    {
      v45 = (double)(1 << v44) * 0.25;
      if ((~*(_QWORD *)&v45 & 0x7FF0000000000000) == 0)
        goto LABEL_116;
      if (v45 <= -9.22337204e18)
        goto LABEL_117;
      if (v45 >= 9.22337204e18)
        goto LABEL_118;
      if (v43 <= (uint64_t)v45)
        goto LABEL_58;
    }
    isUniquelyReferenced_native = swift_isUniquelyReferenced_native();
    v47 = *(_QWORD *)v26;
    if ((isUniquelyReferenced_native & 1) == 0)
    {
      if (!v47)
        goto LABEL_120;
      v47 = _HashTable.copy()(*(_QWORD **)v26);
      swift_release();
      *(_QWORD *)v26 = v47;
    }
    if (!v47)
      goto LABEL_119;
    swift_retain();
    specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(v35, (_QWORD *)(v47 + 16), v47 + 32, v26);
    if (__OFADD__(v31, 1))
      goto LABEL_114;
    if (v31 + 1 < v31)
      goto LABEL_115;
    v48 = *(_QWORD *)(v26 + 8);
    swift_retain();
    specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(v31, v31 + 1, v48, (uint64_t *)(v47 + 16), (_QWORD *)(v47 + 32));
    swift_release();
    swift_release();
    specialized ContiguousArray.remove(at:)(v31, (uint64_t)&v100);
    v41 = 0;
LABEL_68:
    v101 = v41;
    swift_endAccess();
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v99, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v100, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>?);
    v10 = *v96;
    if (*v96 >> 62)
    {
      swift_bridgeObjectRetain_n();
      v56 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v56)
      {
LABEL_101:
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type APIError and conformance APIError();
        swift_allocError();
        *(_QWORD *)v76 = 0xD000000000000032;
        *(_QWORD *)(v76 + 8) = 0x8000000245FCD690;
        *(_BYTE *)(v76 + 16) = 1;
        swift_willThrow();
        swift_bridgeObjectRelease_n();

        return;
      }
    }
    else
    {
      v56 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v56)
        goto LABEL_101;
    }
    v57 = v10 & 0xC000000000000001;
    if ((v10 & 0xC000000000000001) != 0)
    {
      v58 = (id)MEMORY[0x24954B748](0, v10);
    }
    else
    {
      if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_106;
      v58 = *(id *)(v10 + 32);
    }
    v59 = v58;
    type metadata accessor for SGEdge();
    v60 = static NSObject.== infix(_:_:)();

    v61 = 0;
    if ((v60 & 1) != 0)
      goto LABEL_81;
    if (v56 == 1)
      goto LABEL_101;
    if (!v57)
      break;
    v62 = (id)MEMORY[0x24954B748](1, v10);
LABEL_79:
    v63 = v62;
    v64 = static NSObject.== infix(_:_:)();

    if ((v64 & 1) == 0)
    {
      v72 = 1;
      while (1)
      {
        v61 = v72 + 1;
        if (__OFADD__(v72, 1))
          break;
        if (v61 == v56)
          goto LABEL_101;
        if (v57)
        {
          v73 = (id)MEMORY[0x24954B748](v72 + 1, v10);
        }
        else
        {
          if ((v61 & 0x8000000000000000) != 0)
            goto LABEL_103;
          if (v61 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_104;
          v73 = *(id *)(v10 + 32 + 8 * v61);
        }
        v74 = v73;
        v75 = static NSObject.== infix(_:_:)();

        ++v72;
        if ((v75 & 1) != 0)
          goto LABEL_81;
      }
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      swift_bridgeObjectRetain();
      v20 = _CocoaArrayWrapper.endIndex.getter();
      if (!v20)
        goto LABEL_109;
      goto LABEL_20;
    }
    v61 = 1;
LABEL_81:
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v65 = *v96;
    isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
    *v96 = v65;
    if (!isUniquelyReferenced_nonNull_bridgeObject
      || (v65 & 0x8000000000000000) != 0
      || (v65 & 0x4000000000000000) != 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew()(v65);
    }
    v10 = v65 & 0xFFFFFFFFFFFFFF8;
    v67 = *(_QWORD *)(v10 + 16);
    if (v61 >= v67)
      goto LABEL_107;
    v68 = v67 - 1;
    v69 = v67 - 1 - v61;
    if (v69 < 0)
      goto LABEL_121;
    v70 = v10 + 8 * v61;
    v71 = *(void **)(v70 + 32);
    memmove((void *)(v70 + 32), (const void *)(v70 + 40), 8 * v69);
    *(_QWORD *)(v10 + 16) = v68;
    specialized Array._endMutation()();
    swift_endAccess();

    v10 = v93;
    v21 = v95;
    if (v95 == v92)
      goto LABEL_109;
  }
  if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
  {
    v62 = *(id *)(v10 + 40);
    goto LABEL_79;
  }
  __break(1u);
LABEL_114:
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized Set.union<A>(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::Int *v11;
  Swift::Int v12;
  Swift::Int v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  Swift::Int v17;
  uint64_t v18;

  v2 = result;
  v3 = 0;
  v18 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (Swift::Int *)(*(_QWORD *)(v2 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v17, v12, v13);
    result = swift_bridgeObjectRelease();
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t SGGraph.nodeWithOutput(_:)(char *a1)
{
  return SGGraph.nodeWithOutput(_:)(a1, &OBJC_IVAR___SGOutput_attachment, "WARNING: Unable to find node with output: %@");
}

unint64_t SGGraph.nodeWithInput(_:)(char *a1)
{
  return SGGraph.nodeWithOutput(_:)(a1, &OBJC_IVAR___SGInput_attachment, "WARNING: Unable to find node with input: %@");
}

unint64_t SGGraph.nodeWithOutput(_:)(char *a1, _QWORD *a2, const char *a3)
{
  uint64_t *v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  NSObject *v11;
  NSObject *v12;
  uint8_t *v13;
  _QWORD *v14;
  NSObject *v15;

  v5 = (uint64_t *)&a1[*a2];
  swift_beginAccess();
  v6 = (void *)v5[1];
  if (!v6)
    return 0;
  v7 = *v5;
  swift_bridgeObjectRetain();
  v8 = SGGraph.node(named:)(v7, v6);
  swift_bridgeObjectRelease();
  if (!v8)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)logger);
    v10 = static os_log_type_t.error.getter();
    v11 = a1;
    v12 = Logger.logObject.getter();
    if (os_log_type_enabled(v12, v10))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v13 = 138412290;
      v15 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v14 = v11;

      _os_log_impl(&dword_245E46000, v12, v10, a3, v13, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v14, -1, -1);
      MEMORY[0x24954C33C](v13, -1, -1);
    }
    else
    {

      v12 = v11;
    }

    return 0;
  }
  return v8;
}

uint64_t SGGraph.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___SGGraph_name);
  swift_bridgeObjectRetain();
  return v1;
}

id SGGraph.argumentsNode.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___SGGraph_argumentsNode);
}

id SGGraph.resultsNode.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___SGGraph_resultsNode);
}

uint64_t SGGraph.nodes.getter()
{
  return SGGraph.nodes.getter();
}

{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t SGGraph.nodes.setter(uint64_t a1)
{
  return SGGraph.nodes.setter(a1, &OBJC_IVAR___SGGraph_nodes);
}

uint64_t (*SGGraph.nodes.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t SGGraph.childNodes.getter()
{
  return SGGraph.nodes.getter();
}

uint64_t SGGraph.edges.getter()
{
  return SGGraph.nodes.getter();
}

uint64_t SGGraph.edges.setter(uint64_t a1)
{
  return SGGraph.nodes.setter(a1, &OBJC_IVAR___SGGraph_edges);
}

uint64_t (*SGGraph.edges.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.StringNode.children.modify;
}

uint64_t SGGraph.inputs.getter()
{
  return SGGraph.nodes.getter();
}

uint64_t SGGraph.inputs.setter(uint64_t a1)
{
  return SGGraph.nodes.setter(a1, &OBJC_IVAR___SGGraph_inputs);
}

uint64_t (*SGGraph.inputs.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

Class @objc SGGraph.childNodes.getter(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  Class isa;

  swift_beginAccess();
  a4(0);
  swift_bridgeObjectRetain();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

uint64_t SGGraph.outputs.getter()
{
  return SGGraph.nodes.getter();
}

uint64_t @objc SGGraph.edges.setter(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), _QWORD *a5)
{
  uint64_t v7;
  uint64_t *v8;

  a4(0);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = (uint64_t *)(a1 + *a5);
  swift_beginAccess();
  *v8 = v7;
  return swift_bridgeObjectRelease();
}

uint64_t SGGraph.outputs.setter(uint64_t a1)
{
  return SGGraph.nodes.setter(a1, &OBJC_IVAR___SGGraph_outputs);
}

uint64_t SGGraph.nodes.setter(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)(v2 + *a2);
  swift_beginAccess();
  *v4 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SGGraph.outputs.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t SGGraph.__allocating_init(name:inputs:outputs:)(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  objc_class *v4;
  id v9;

  v9 = objc_allocWithZone(v4);
  return SGGraph.init(name:inputs:outputs:)(a1, a2, a3, a4);
}

uint64_t SGGraph.init(name:inputs:outputs:)(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  char *v4;
  void *v5;
  unint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  void *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  id v47;
  char *v48;
  objc_class *v49;
  void *v50;
  objc_super v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v5 = v4;
  ObjectType = swift_getObjectType();
  v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v11 = a1 & 0xFFFFFFFFFFFFLL;
  if (v11)
  {
    swift_bridgeObjectRetain();
    v12 = a1;
    v13 = a2;
  }
  else
  {
    v13 = 0xE800000000000000;
    v12 = 0x64656C7469746E55;
  }
  v14 = (uint64_t *)&v4[OBJC_IVAR___SGGraph_name];
  *v14 = v12;
  v14[1] = v13;
  if (a3 >> 62)
    goto LABEL_30;
  v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v16 = v4;
  while (1)
  {
    v17 = MEMORY[0x24BEE4AF8];
    v49 = (objc_class *)ObjectType;
    v50 = v5;
    if (!v15)
      break;
    v54 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v15 < 0)
    {
      __break(1u);
LABEL_35:
      __break(1u);
      return result;
    }
    v48 = (char *)a4;
    v5 = 0;
    ObjectType = a3 & 0xC000000000000001;
    while ((void *)v15 != v5)
    {
      if (ObjectType)
        v19 = (char *)MEMORY[0x24954B748](v5, a3);
      else
        v19 = (char *)*(id *)(a3 + 8 * (_QWORD)v5 + 32);
      a4 = (unint64_t)v19;
      v5 = (char *)v5 + 1;
      v20 = (uint64_t *)&v19[OBJC_IVAR___SGInput_attachment];
      swift_beginAccess();
      *v20 = a1;
      v20[1] = a2;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if ((void *)v15 == v5)
      {
        v21 = v54;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v5 = v50;
        v17 = MEMORY[0x24BEE4AF8];
        a4 = (unint64_t)v48;
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    swift_bridgeObjectRetain();
    v26 = v5;
    v15 = _CocoaArrayWrapper.endIndex.getter();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21 = MEMORY[0x24BEE4AF8];
LABEL_18:
  *(_QWORD *)((char *)v5 + OBJC_IVAR___SGGraph_inputs) = v21;
  if (!(a4 >> 62))
  {
    v22 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v22)
      goto LABEL_32;
    goto LABEL_20;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v22)
  {
LABEL_20:
    v53 = v17;
    result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v22 < 0)
      goto LABEL_35;
    v5 = 0;
    a3 = a4;
    ObjectType = a4 & 0xC000000000000001;
    while ((void *)v22 != v5)
    {
      if (ObjectType)
        v23 = (char *)MEMORY[0x24954B748](v5, a3);
      else
        v23 = (char *)*(id *)(a3 + 8 * (_QWORD)v5 + 32);
      a4 = (unint64_t)v23;
      v5 = (char *)v5 + 1;
      v24 = (uint64_t *)&v23[OBJC_IVAR___SGOutput_attachment];
      swift_beginAccess();
      *v24 = a1;
      v24[1] = a2;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if ((void *)v22 == v5)
      {
        v25 = v53;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        v5 = v50;
        goto LABEL_33;
      }
    }
    goto LABEL_29;
  }
LABEL_32:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v25 = MEMORY[0x24BEE4AF8];
LABEL_33:
  *(_QWORD *)((char *)v5 + OBJC_IVAR___SGGraph_outputs) = v25;
  v27 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)((char *)v5 + OBJC_IVAR___SGGraph_edges) = MEMORY[0x24BEE4AF8];
  swift_beginAccess();
  v28 = swift_bridgeObjectRetain();
  v29 = specialized static SGGraph.generateArgumentsNode(inputs:)(v28);
  swift_bridgeObjectRelease();
  v30 = OBJC_IVAR___SGGraph_argumentsNode;
  *(_QWORD *)((char *)v5 + OBJC_IVAR___SGGraph_argumentsNode) = v29;
  swift_beginAccess();
  v31 = swift_bridgeObjectRetain();
  v32 = specialized static SGGraph.generateResultsNode(outputs:)(v31);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v5 + OBJC_IVAR___SGGraph_resultsNode) = v32;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_245FBFF50;
  v34 = *(void **)((char *)v5 + v30);
  *(_QWORD *)(v33 + 32) = v34;
  *(_QWORD *)(v33 + 40) = v32;
  v52 = v33;
  specialized Array._endMutation()();
  *(_QWORD *)((char *)v5 + OBJC_IVAR___SGGraph_nodes) = v52;
  v35 = v34;
  v36 = v32;
  v37 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(v27);
  v38 = (uint64_t *)((char *)v5 + OBJC_IVAR___SGGraph_nodeMap);
  *v38 = v37;
  v38[1] = v39;
  v38[2] = v40;
  v41 = *(_QWORD *)&v35[OBJC_IVAR___SGNode_name];
  v42 = *(_QWORD *)&v35[OBJC_IVAR___SGNode_name + 8];
  swift_beginAccess();
  v43 = v35;
  swift_bridgeObjectRetain();
  specialized OrderedDictionary.subscript.setter(v35, v41, v42);
  v44 = *(_QWORD *)&v36[OBJC_IVAR___SGNode_name];
  v45 = *(_QWORD *)&v36[OBJC_IVAR___SGNode_name + 8];
  v46 = v36;
  swift_bridgeObjectRetain();
  specialized OrderedDictionary.subscript.setter(v36, v44, v45);
  swift_endAccess();

  v51.receiver = v5;
  v51.super_class = v49;
  v47 = objc_msgSendSuper2(&v51, sel_init);
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  return (uint64_t)v47;
}

ShaderGraph::SGGraph::CodingKeys_optional __swiftcall SGGraph.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = stringValue._object;
  v2._countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SGGraph.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5)
    return (ShaderGraph::SGGraph::CodingKeys_optional)5;
  else
    return (ShaderGraph::SGGraph::CodingKeys_optional)v3;
}

ShaderGraph::SGGraph::CodingKeys_optional __swiftcall SGGraph.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (ShaderGraph::SGGraph::CodingKeys_optional)5;
}

uint64_t SGGraph.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t SGGraph.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_245F5B65C + 4 * byte_245FC3960[a1]))(0x7365646F6ELL, 0xE500000000000000);
}

uint64_t sub_245F5B65C()
{
  return 0x7365676465;
}

uint64_t sub_245F5B66C()
{
  return 0x737475706E69;
}

uint64_t sub_245F5B680()
{
  return 0x7374757074756FLL;
}

uint64_t sub_245F5B698()
{
  return 1701667182;
}

uint64_t SGGraph.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_245F5B6D8 + 4 * byte_245FC3965[a1]))(0x7365646F6ELL, 0xE500000000000000);
}

uint64_t sub_245F5B6D8()
{
  return 0x7365676465;
}

uint64_t sub_245F5B6E8()
{
  return 0x737475706E69;
}

uint64_t sub_245F5B6FC()
{
  return 0x7374757074756FLL;
}

uint64_t sub_245F5B714()
{
  return 1701667182;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SGGraph.CodingKeys(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_245F5B770@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_245F5B7D4 + 4 * byte_245FC396F[a1]))(0x7365676465);
}

uint64_t sub_245F5B7D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x7365676465 && v1 == v2)
    v3 = 1;
  else
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

void protocol witness for Hashable.hashValue.getter in conformance SGGraph.CodingKeys()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_245F5B8CC()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SGGraph.CodingKeys()
{
  __asm { BR              X10 }
}

uint64_t sub_245F5B978()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance SGGraph.CodingKeys()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_245F5BA1C()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SGGraph.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized SGGraph.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SGGraph.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_245F5BAE8 + 4 * byte_245FC3983[*v0]))();
}

void sub_245F5BAE8(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x7365676465;
  a1[1] = v1;
}

void sub_245F5BAFC(_QWORD *a1@<X8>)
{
  *a1 = 0x737475706E69;
  a1[1] = 0xE600000000000000;
}

void sub_245F5BB14(_QWORD *a1@<X8>)
{
  *a1 = 0x7374757074756FLL;
  a1[1] = 0xE700000000000000;
}

void sub_245F5BB30(_QWORD *a1@<X8>)
{
  *a1 = 1701667182;
  a1[1] = 0xE400000000000000;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SGGraph.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_245F5BB70 + 4 * byte_245FC3988[*v0]))(0x7365646F6ELL, 0xE500000000000000);
}

uint64_t sub_245F5BB70()
{
  return 0x7365676465;
}

uint64_t sub_245F5BB80()
{
  return 0x737475706E69;
}

uint64_t sub_245F5BB94()
{
  return 0x7374757074756FLL;
}

uint64_t sub_245F5BBAC()
{
  return 1701667182;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance SGGraph.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized SGGraph.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance SGGraph.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SGGraph.CodingKeys()
{
  lazy protocol witness table accessor for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SGGraph.CodingKeys()
{
  lazy protocol witness table accessor for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t SGGraph.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SGGraph.init(from:)(a1);
}

uint64_t SGGraph.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v3;
  void (**v4)(char *, uint64_t);
  uint64_t v5;
  char *v6;
  void (**v7)(char *, uint64_t);
  void *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char *v13;
  id v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t *v20;
  Swift::String v21;
  Swift::String v22;
  void *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t *v44;
  uint64_t v45;
  void *v46;
  Swift::String v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  id v54;
  id v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  __int128 v71;
  char *v72;
  unint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  Swift::String v85;
  uint64_t v86;
  void *v87;
  Swift::String v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  Swift::String v108;
  uint64_t v109;
  void *v110;
  Swift::String v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  char *v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  id v130;
  void *v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  unint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  unint64_t v145;
  uint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  objc_class *ObjectType;
  _QWORD *v151;
  void (**v152)(char *, uint64_t);
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  objc_super v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  char v161;
  unint64_t v162;
  char v163[8];

  ObjectType = (objc_class *)swift_getObjectType();
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SGGraph.CodingKeys>);
  v4 = *(void (***)(char *, uint64_t))(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v133 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys();
  v153 = v1;
  v7 = v152;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v8 = v7;
  v151 = a1;
  if (v7)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    goto LABEL_4;
  }
  v152 = v4;
  LOBYTE(v162) = 4;
  v17 = KeyedDecodingContainer.decode(_:forKey:)();
  v19 = v18;
  v20 = (uint64_t *)&v153[OBJC_IVAR___SGGraph_name];
  *v20 = v17;
  v20[1] = (uint64_t)v18;
  swift_bridgeObjectRetain();
  v21._countAndFlagsBits = v17;
  v21._object = v19;
  v22._countAndFlagsBits = 1701667182;
  v22._object = (void *)0xE400000000000000;
  validate(_:named:)(v21, v22);
  v8 = v23;
  if (v23)
  {
    swift_bridgeObjectRelease();
    v152[1](v6, v3);
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v9 = 1;
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SGInput]);
  v161 = 2;
  lazy protocol witness table accessor for type [SGInput] and conformance <A> [A]();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v24 = v153;
  *(_QWORD *)&v153[OBJC_IVAR___SGGraph_inputs] = v162;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SGOutput]);
  v161 = 3;
  lazy protocol witness table accessor for type [SGOutput] and conformance <A> [A]();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_QWORD *)&v24[OBJC_IVAR___SGGraph_outputs] = v162;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SGNode]);
  v161 = 0;
  lazy protocol witness table accessor for type [SGNode] and conformance <A> [A]();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v149 = v3;
  v144 = v6;
  v25 = v162;
  swift_beginAccess();
  v26 = swift_bridgeObjectRetain();
  v27 = specialized static SGGraph.generateArgumentsNode(inputs:)(v26);
  swift_bridgeObjectRelease();
  v28 = OBJC_IVAR___SGGraph_argumentsNode;
  *(_QWORD *)&v24[OBJC_IVAR___SGGraph_argumentsNode] = v27;
  swift_beginAccess();
  v29 = swift_bridgeObjectRetain();
  v30 = specialized static SGGraph.generateResultsNode(outputs:)(v29);
  swift_bridgeObjectRelease();
  v31 = OBJC_IVAR___SGGraph_resultsNode;
  *(_QWORD *)&v24[OBJC_IVAR___SGGraph_resultsNode] = v30;
  v32 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGNodeCG_SSs5NeverOTg504_s11d29Graph7SGGraphC6insertyySayAA6F62CGSgKFSSAFcfu_32b446a066102f7f77dfc7f44f189789ecAFSSTf3nnnpk_nTf1cn_nTm(v25, (uint64_t)v163, &OBJC_IVAR___SGNode_name);
  v33 = specialized Set.init<A>(_:)(v32);
  swift_bridgeObjectRelease();
  v34 = (uint64_t *)(*(_QWORD *)&v24[v28] + OBJC_IVAR___SGNode_name);
  v35 = *v34;
  v36 = v34[1];
  swift_bridgeObjectRetain();
  LOBYTE(v27) = specialized Set.contains(_:)(v35, v36, v33);
  swift_bridgeObjectRelease();
  if ((v27 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v159 = 0;
    *(_QWORD *)&v160 = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    v159 = 0xD000000000000017;
    *(_QWORD *)&v160 = 0x8000000245FCD6E0;
    v37 = *(_QWORD *)&v24[v28];
    v38 = OBJC_IVAR___SGNode_name;
LABEL_21:
    v44 = (uint64_t *)(v37 + v38);
    v45 = *v44;
    v46 = (void *)v44[1];
    swift_bridgeObjectRetain();
    v47._countAndFlagsBits = v45;
    v47._object = v46;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48 = v159;
    v49 = v160;
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v8 = (void *)swift_allocError();
    *(_QWORD *)v50 = v48;
    *(_QWORD *)(v50 + 8) = v49;
    *(_BYTE *)(v50 + 16) = 14;
    swift_willThrow();
    v152[1](v144, v149);
    v9 = 1;
    v10 = 1;
    v11 = 1;
    v12 = 1;
LABEL_4:
    v13 = (char *)type metadata accessor for SGError();
    v14 = v8;
    SGError.__allocating_init(_:)(v8);
    swift_willThrow();

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v151);
    v15 = v153;
    if (v9)
    {
      swift_bridgeObjectRelease();
      if (!v10)
        goto LABEL_6;
    }
    else if (!v10)
    {
      goto LABEL_6;
    }

LABEL_6:
    if (v11)
    {
      swift_bridgeObjectRelease();
      if (v12)
        goto LABEL_8;
    }
    else if (v12)
    {
LABEL_8:

      swift_bridgeObjectRelease();
LABEL_13:
      swift_deallocPartialClassInstance();
      return (uint64_t)v13;
    }

    goto LABEL_13;
  }
  v146 = 0;
  v39 = v25;
  v40 = (uint64_t *)(*(_QWORD *)&v24[v31] + OBJC_IVAR___SGNode_name);
  v41 = *v40;
  v42 = v40[1];
  swift_bridgeObjectRetain();
  v43 = specialized Set.contains(_:)(v41, v42, v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v43 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v159 = 0;
    *(_QWORD *)&v160 = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    v159 = 0xD000000000000017;
    *(_QWORD *)&v160 = 0x8000000245FCD6E0;
    v37 = *(_QWORD *)&v24[v31];
    v38 = OBJC_IVAR___SGNode_name;
    goto LABEL_21;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_245FBFF50;
  v52 = *(void **)&v24[v28];
  *(_QWORD *)(v51 + 32) = v52;
  v53 = *(void **)&v24[v31];
  *(_QWORD *)(v51 + 40) = v53;
  v159 = v51;
  specialized Array._endMutation()();
  v54 = v52;
  v55 = v53;
  specialized Array.append<A>(contentsOf:)(v39);
  v56 = v159;
  v137 = &v24[OBJC_IVAR___SGGraph_nodes];
  *(_QWORD *)&v24[OBJC_IVAR___SGGraph_nodes] = v159;
  if (v56 >> 62)
    goto LABEL_62;
  v57 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_24:
  v58 = v146;
  v59 = MEMORY[0x24BEE4AF8];
  if (v57)
  {
    v159 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v57 & ~(v57 >> 63), 0);
    if (v57 < 0)
    {
      __break(1u);
      goto LABEL_64;
    }
    v60 = 0;
    v61 = v159;
    v147 = v56 & 0xC000000000000001;
    v148 = v56;
    v62 = v57;
    do
    {
      if (v147)
        v63 = (char *)MEMORY[0x24954B748](v60, v56);
      else
        v63 = (char *)*(id *)(v56 + 8 * v60 + 32);
      v64 = v63;
      v65 = *(_QWORD *)&v63[OBJC_IVAR___SGNode_name];
      v66 = *(_QWORD *)&v63[OBJC_IVAR___SGNode_name + 8];
      v159 = v61;
      v67 = *(_QWORD *)(v61 + 16);
      v68 = *(_QWORD *)(v61 + 24);
      swift_bridgeObjectRetain();
      if (v67 >= v68 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v68 > 1, v67 + 1, 1);
        v61 = v159;
      }
      ++v60;
      *(_QWORD *)(v61 + 16) = v67 + 1;
      v69 = (_QWORD *)(v61 + 24 * v67);
      v69[4] = v65;
      v69[5] = v66;
      v69[6] = v64;
      v56 = v148;
    }
    while (v62 != v60);
    swift_bridgeObjectRelease();
    v24 = v153;
    v59 = MEMORY[0x24BEE4AF8];
    v58 = v146;
  }
  else
  {
    swift_bridgeObjectRelease();
    v61 = MEMORY[0x24BEE4AF8];
  }
  v70 = (_QWORD *)v59;
  if ((v59 & 0xC000000000000000) != 0)
    v70 = specialized _copyCollectionToContiguousArray<A>(_:)(MEMORY[0x24BEE4AF8]);
  v159 = 0;
  *(_QWORD *)&v160 = v59;
  *((_QWORD *)&v160 + 1) = v70;
  specialized OrderedDictionary.merge<A>(_:uniquingKeysWith:)(v61, (void (*)(uint64_t *__return_ptr, _QWORD *))specialized closure #1 in OrderedDictionary.merge<A>(_:uniquingKeysWith:), 0, &v159);
  if (v58)
  {
LABEL_111:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    __break(1u);
    goto LABEL_112;
  }
  swift_bridgeObjectRelease();
  v71 = v160;
  v72 = &v24[OBJC_IVAR___SGGraph_nodeMap];
  *(_QWORD *)v72 = v159;
  *(_OWORD *)(v72 + 8) = v71;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SGEdge]);
  LOBYTE(v155) = 1;
  lazy protocol witness table accessor for type [SGEdge] and conformance <A> [A]();
  v24 = (char *)v149;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v39 = 0;
  v136 = v159;
  v73 = (unint64_t *)v137;
  swift_beginAccess();
  v59 = *v73;
  v154 = MEMORY[0x24BEE4AF8];
  if (!(v59 >> 62))
  {
    v74 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v74)
    {
LABEL_40:
      v75 = 0;
      v141 = v59 & 0xC000000000000001;
      v138 = (_QWORD *)(v59 + 32);
      v140 = (_QWORD *)v59;
      v139 = v74;
      while (1)
      {
        if (v141)
          v76 = (char *)MEMORY[0x24954B748](v75, v59);
        else
          v76 = (char *)(id)v138[v75];
        v77 = v76;
        v78 = __OFADD__(v75++, 1);
        if (v78)
        {
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          swift_bridgeObjectRetain();
          v57 = _CocoaArrayWrapper.endIndex.getter();
          goto LABEL_24;
        }
        v56 = *(_QWORD *)&v76[OBJC_IVAR___SGNode_inputs];
        if (v56 >> 62)
        {
          swift_bridgeObjectRetain();
          v79 = _CocoaArrayWrapper.endIndex.getter();
          if (v79)
          {
LABEL_48:
            v143 = v77;
            v142 = v75;
            v158 = MEMORY[0x24BEE4AF8];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v79 & ~(v79 >> 63), 0);
            v148 = v79;
            if (v79 < 0)
              goto LABEL_61;
            v80 = 0;
            v81 = v158;
            v146 = (uint64_t *)&v143[OBJC_IVAR___SGNode_name];
            v145 = v56 & 0xC000000000000001;
            v147 = v56;
            do
            {
              if (v145)
                v82 = (char *)MEMORY[0x24954B748](v80, v56);
              else
                v82 = (char *)*(id *)(v56 + 8 * v80 + 32);
              v83 = v82;
              v84 = v146[1];
              v155 = *v146;
              v156 = v84;
              swift_bridgeObjectRetain();
              v85._countAndFlagsBits = 58;
              v85._object = (void *)0xE100000000000000;
              String.append(_:)(v85);
              v86 = *(_QWORD *)&v83[OBJC_IVAR___SGInput_name];
              v87 = *(void **)&v83[OBJC_IVAR___SGInput_name + 8];
              swift_bridgeObjectRetain();
              v88._countAndFlagsBits = v86;
              v88._object = v87;
              String.append(_:)(v88);
              swift_bridgeObjectRelease();
              v89 = v155;
              v90 = v156;
              v158 = v81;
              v92 = *(_QWORD *)(v81 + 16);
              v91 = *(_QWORD *)(v81 + 24);
              if (v92 >= v91 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v91 > 1, v92 + 1, 1);
                v81 = v158;
              }
              ++v80;
              *(_QWORD *)(v81 + 16) = v92 + 1;
              v93 = (_QWORD *)(v81 + 24 * v92);
              v93[4] = v89;
              v93[5] = v90;
              v93[6] = v83;
              v24 = (char *)v149;
              v56 = v147;
            }
            while (v148 != v80);

            swift_bridgeObjectRelease();
            v59 = (unint64_t)v140;
            v74 = v139;
            v75 = v142;
            goto LABEL_41;
          }
        }
        else
        {
          v79 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v79)
            goto LABEL_48;
        }

        swift_bridgeObjectRelease();
        v81 = MEMORY[0x24BEE4AF8];
LABEL_41:
        specialized Array.append<A>(contentsOf:)(v81);
        if (v75 == v74)
        {
          swift_bridgeObjectRelease_n();
          v94 = v154;
          goto LABEL_66;
        }
      }
    }
    goto LABEL_65;
  }
LABEL_64:
  swift_bridgeObjectRetain_n();
  v74 = _CocoaArrayWrapper.endIndex.getter();
  if (v74)
    goto LABEL_40;
LABEL_65:
  swift_bridgeObjectRelease_n();
  v94 = MEMORY[0x24BEE4AF8];
LABEL_66:
  if (*(_QWORD *)(v94 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, SGInput>);
    v95 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v95 = MEMORY[0x24BEE4B00];
  }
  v155 = v95;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v94, 1, &v155, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
  v134 = v39;
  if (!v39)
  {
    swift_bridgeObjectRelease();
    v135 = v155;
    v96 = *(_QWORD *)v137;
    v97 = MEMORY[0x24BEE4AF8];
    v154 = MEMORY[0x24BEE4AF8];
    if (v96 >> 62)
      goto LABEL_94;
    v98 = *(_QWORD *)((v96 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    for (; v98; v98 = _CocoaArrayWrapper.endIndex.getter())
    {
      v99 = 0;
      v141 = v96 & 0xC000000000000001;
      v138 = (_QWORD *)(v96 + 32);
      v140 = (_QWORD *)v96;
      v139 = v98;
      while (1)
      {
        v100 = v141 ? (char *)MEMORY[0x24954B748](v99, v96) : (char *)(id)v138[v99];
        v101 = v100;
        v78 = __OFADD__(v99++, 1);
        if (v78)
          break;
        v102 = *(_QWORD *)&v100[OBJC_IVAR___SGNode_outputs];
        if (v102 >> 62)
        {
          swift_bridgeObjectRetain();
          v103 = _CocoaArrayWrapper.endIndex.getter();
          if (!v103)
          {
LABEL_90:

            swift_bridgeObjectRelease();
            goto LABEL_73;
          }
        }
        else
        {
          v103 = *(_QWORD *)((v102 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v103)
            goto LABEL_90;
        }
        v143 = v101;
        v142 = v99;
        v158 = v97;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v103 & ~(v103 >> 63), 0);
        if (v103 < 0)
          goto LABEL_93;
        v104 = 0;
        v97 = v158;
        v146 = (uint64_t *)&v143[OBJC_IVAR___SGNode_name];
        v145 = v102 & 0xC000000000000001;
        v148 = v102;
        v147 = v103;
        do
        {
          if (v145)
            v105 = (char *)MEMORY[0x24954B748](v104, v102);
          else
            v105 = (char *)*(id *)(v102 + 8 * v104 + 32);
          v106 = v105;
          v107 = v146[1];
          v155 = *v146;
          v156 = v107;
          swift_bridgeObjectRetain();
          v108._countAndFlagsBits = 58;
          v108._object = (void *)0xE100000000000000;
          String.append(_:)(v108);
          v109 = *(_QWORD *)&v106[OBJC_IVAR___SGOutput_name];
          v110 = *(void **)&v106[OBJC_IVAR___SGOutput_name + 8];
          swift_bridgeObjectRetain();
          v111._countAndFlagsBits = v109;
          v111._object = v110;
          String.append(_:)(v111);
          swift_bridgeObjectRelease();
          v112 = v155;
          v113 = v156;
          v158 = v97;
          v115 = *(_QWORD *)(v97 + 16);
          v114 = *(_QWORD *)(v97 + 24);
          if (v115 >= v114 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v114 > 1, v115 + 1, 1);
            v97 = v158;
          }
          ++v104;
          *(_QWORD *)(v97 + 16) = v115 + 1;
          v116 = (_QWORD *)(v97 + 24 * v115);
          v116[4] = v112;
          v116[5] = v113;
          v116[6] = v106;
          v102 = v148;
        }
        while (v147 != v104);

        swift_bridgeObjectRelease();
        v96 = (unint64_t)v140;
        v98 = v139;
        v99 = v142;
LABEL_73:
        specialized Array.append<A>(contentsOf:)(v97);
        v97 = MEMORY[0x24BEE4AF8];
        if (v99 == v98)
        {
          swift_bridgeObjectRelease_n();
          v117 = v154;
          goto LABEL_96;
        }
      }
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      swift_bridgeObjectRetain_n();
    }
    swift_bridgeObjectRelease_n();
    v117 = MEMORY[0x24BEE4AF8];
LABEL_96:
    v118 = v136;
    v119 = v135;
    if (*(_QWORD *)(v117 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, SGOutput>);
      v120 = static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v120 = MEMORY[0x24BEE4B00];
    }
    v155 = v120;
    v121 = v134;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v117, 1, &v155, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
    if (!v121)
    {
      swift_bridgeObjectRelease();
      v122 = v155;
      swift_retain();
      swift_retain();
      v123 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGEdgeCG_AHsAE_pTg504_s11d41Graph7SGGraphC4fromACs7Decoder_p_tKcfcAA6F10CAGKXEfU5_SDySSAF7SGInputCGSDySSAF8SGOutputCGTf1cn_nTf4ngg_n(v118, v119, v122);
      v148 = 0;
      swift_bridgeObjectRelease();
      swift_release_n();
      swift_release_n();
      v124 = v153;
      *(_QWORD *)&v153[OBJC_IVAR___SGGraph_edges] = v123;

      v157.receiver = v124;
      v157.super_class = ObjectType;
      v13 = (char *)objc_msgSendSuper2(&v157, sel_init);
      v125 = &v13[OBJC_IVAR___SGGraph_nodes];
      swift_beginAccess();
      v126 = *(_QWORD *)v125;
      if (v126 >> 62)
      {
        swift_bridgeObjectRetain_n();
        v132 = v13;
        v127 = _CocoaArrayWrapper.endIndex.getter();
        if (v127)
          goto LABEL_102;
      }
      else
      {
        v127 = *(_QWORD *)((v126 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        v128 = v13;
        if (v127)
        {
LABEL_102:
          if (v127 >= 1)
          {
            v129 = 0;
            do
            {
              if ((v126 & 0xC000000000000001) != 0)
                v130 = (id)MEMORY[0x24954B748](v129, v126);
              else
                v130 = *(id *)(v126 + 8 * v129 + 32);
              v131 = v130;
              ++v129;
              swift_beginAccess();
              swift_unknownObjectWeakAssign();

            }
            while (v127 != v129);
            goto LABEL_109;
          }
          __break(1u);
          goto LABEL_111;
        }
      }
LABEL_109:
      swift_bridgeObjectRelease_n();
      v152[1](v144, v149);

      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v151);
      return (uint64_t)v13;
    }
  }
LABEL_112:
  swift_bridgeObjectRelease();
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t closure #7 in SGGraph.init(from:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  Swift::String v23;
  unint64_t v24;
  char v25;
  id v26;
  unint64_t v27;
  char v28;
  id v29;
  objc_class *v30;
  char *v31;
  id v32;
  char *v33;
  id v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  char v46[24];
  uint64_t v47;
  uint64_t v48;
  objc_super v49;
  char v50[8];

  v6 = *a1;
  v7 = *(_QWORD *)(*a1 + OBJC_IVAR___SGEdge_to);
  v8 = (uint64_t *)(v7 + OBJC_IVAR___SGInput_attachment);
  swift_beginAccess();
  v9 = v8[1];
  if (!v9
    || (v10 = *v8,
        v11 = OBJC_IVAR___SGEdge_from,
        v12 = (uint64_t *)(*(_QWORD *)(v6 + OBJC_IVAR___SGEdge_from) + OBJC_IVAR___SGOutput_attachment),
        swift_beginAccess(),
        (v13 = v12[1]) == 0))
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v40 = swift_allocError();
    *(_QWORD *)v39 = 0xD00000000000001ELL;
    v41 = 0x8000000245FCD8E0;
    v42 = a4;
LABEL_14:
    *(_QWORD *)(v39 + 8) = v41;
    *(_BYTE *)(v39 + 16) = 14;
    result = swift_willThrow();
    *v42 = v40;
    return result;
  }
  v14 = *v12;
  v47 = v10;
  v48 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = 58;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  v16 = *(_QWORD *)(v7 + OBJC_IVAR___SGInput_name);
  v17 = *(void **)(v7 + OBJC_IVAR___SGInput_name + 8);
  swift_bridgeObjectRetain();
  v18._countAndFlagsBits = v16;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v47 = v14;
  v48 = v13;
  v19._countAndFlagsBits = 58;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20 = (uint64_t *)(*(_QWORD *)(v6 + v11) + OBJC_IVAR___SGOutput_name);
  v21 = *v20;
  v22 = (void *)v20[1];
  swift_bridgeObjectRetain();
  v23._countAndFlagsBits = v21;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a2 + 16) || (v24 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9), (v25 & 1) == 0))
  {
    swift_bridgeObjectRelease();
LABEL_13:
    v42 = a4;
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v40 = swift_allocError();
    *(_QWORD *)v39 = 0xD000000000000012;
    v41 = 0x8000000245FCD900;
    goto LABEL_14;
  }
  v26 = *(id *)(*(_QWORD *)(a2 + 56) + 8 * v24);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a3 + 16) || (v27 = specialized __RawDictionaryStorage.find<A>(_:)(v47, v13), (v28 & 1) == 0))
  {

    goto LABEL_13;
  }
  v29 = *(id *)(*(_QWORD *)(a3 + 56) + 8 * v27);
  swift_bridgeObjectRelease();
  v30 = (objc_class *)type metadata accessor for SGEdge();
  v31 = (char *)objc_allocWithZone(v30);
  *(_QWORD *)&v31[OBJC_IVAR___SGEdge_from] = v29;
  *(_QWORD *)&v31[OBJC_IVAR___SGEdge_to] = v26;
  v49.receiver = v31;
  v49.super_class = v30;
  v32 = v26;
  v33 = (char *)v29;
  v34 = objc_msgSendSuper2(&v49, sel_init);
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<SGEdge>((uint64_t)v46, (uint64_t)v50);
  v35 = (uint64_t *)&v33[OBJC_IVAR___SGOutput_edges];
  swift_beginAccess();
  specialized OrderedSet._find(_:)((uint64_t)v50, *v35, v35[1]);
  if ((v37 & 1) != 0)
    specialized OrderedSet._appendNew(_:in:)((uint64_t)v50, v36);
  swift_endAccess();

  result = outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v50, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
  *a5 = v34;
  return result;
}

void SGGraph.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  Swift::Int v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SGGraph.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  lazy protocol witness table accessor for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v32 = 4;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    type metadata accessor for SGError();
    v24 = v2;
    SGError.__allocating_init(_:)(v2);
    swift_willThrow();

  }
  else
  {
    v10 = (uint64_t *)(v3 + OBJC_IVAR___SGGraph_inputs);
    swift_beginAccess();
    v31 = *v10;
    LOBYTE(v30) = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SGInput]);
    lazy protocol witness table accessor for type [SGInput] and conformance <A> [A]();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11 = (uint64_t *)(v3 + OBJC_IVAR___SGGraph_outputs);
    swift_beginAccess();
    v30 = *v11;
    LOBYTE(v33) = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SGOutput]);
    lazy protocol witness table accessor for type [SGOutput] and conformance <A> [A]();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v12 = (unint64_t *)(v3 + OBJC_IVAR___SGGraph_nodes);
    swift_beginAccess();
    v13 = *v12;
    v28 = v13 >> 62;
    if (!(v13 >> 62))
    {
      v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v14 >= 2)
      {
LABEL_4:
        if ((v13 & 0xC000000000000001) != 0 && v14 != 2)
        {
          type metadata accessor for SGNode();
          v15 = 2;
          do
          {
            v16 = v15 + 1;
            _ArrayBuffer._typeCheckSlowPath(_:)(v15);
            v15 = v16;
          }
          while (v14 != v16);
        }
        if (v28)
        {
          swift_bridgeObjectRetain();
          v9 = _CocoaArrayWrapper.subscript.getter();
          v17 = v18;
          v28 = v19;
          v14 = v20;
          swift_bridgeObjectRelease();
        }
        else
        {
          v9 = v13 & 0xFFFFFFFFFFFFFF8;
          v17 = (v13 & 0xFFFFFFFFFFFFFF8) + 32;
          v14 = (2 * v14) | 1;
          swift_bridgeObjectRetain();
          v28 = 2;
        }
        swift_endAccess();
        if ((v14 & 1) == 0)
          goto LABEL_12;
        v27 = v17;
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain_n();
        v22 = swift_dynamicCastClass();
        if (!v22)
        {
          swift_unknownObjectRelease();
          v22 = MEMORY[0x24BEE4AF8];
        }
        v23 = *(_QWORD *)(v22 + 16);
        swift_release();
        if (!__OFSUB__(v14 >> 1, v28))
        {
          if (v23 == (v14 >> 1) - v28)
          {
            v21 = swift_dynamicCastClass();
            if (!v21)
            {
              swift_unknownObjectRelease();
              v21 = MEMORY[0x24BEE4AF8];
            }
            goto LABEL_19;
          }
          goto LABEL_27;
        }
LABEL_26:
        __break(1u);
LABEL_27:
        swift_unknownObjectRelease();
        v17 = v27;
LABEL_12:
        v21 = specialized _copyCollectionToContiguousArray<A>(_:)(v9, v17, v28, v14);
LABEL_19:
        swift_unknownObjectRelease();
        v30 = v21;
        LOBYTE(v33) = 0;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SGNode]);
        lazy protocol witness table accessor for type [SGNode] and conformance <A> [A]();
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        swift_release();
        v25 = (uint64_t *)(v3 + OBJC_IVAR___SGGraph_edges);
        swift_beginAccess();
        v33 = *v25;
        v29 = 1;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SGEdge]);
        lazy protocol witness table accessor for type [SGEdge] and conformance <A> [A]();
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        return;
      }
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if ((uint64_t)v14 < 2)
    {
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRetain();
      v26 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v26 >= 2)
      {
        swift_bridgeObjectRetain();
        v9 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v9 >= (uint64_t)v14)
          goto LABEL_4;
        __break(1u);
        goto LABEL_25;
      }
    }
    __break(1u);
  }
}

uint64_t SGGraph.bodyNodes.getter()
{
  uint64_t v0;
  unint64_t *v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (unint64_t *)(v0 + OBJC_IVAR___SGGraph_nodes);
  result = swift_beginAccess();
  v3 = *v1;
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v4 < 2)
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v9 < 2)
    {
LABEL_19:
      __break(1u);
      return result;
    }
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v10 >= v4)
      goto LABEL_3;
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  if ((unint64_t)v4 < 2)
    goto LABEL_17;
LABEL_3:
  if ((v3 & 0xC000000000000001) != 0 && v4 != 2)
  {
    type metadata accessor for SGNode();
    v6 = 2;
    do
    {
      v7 = v6 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v6);
      v6 = v7;
    }
    while (v4 != v7);
  }
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.subscript.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  swift_endAccess();
  return v8;
}

id SGGraph.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SGGraph.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SGGraph.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SGGraph@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  objc_class *v2;
  uint64_t v3;
  id v6;
  uint64_t result;

  v6 = objc_allocWithZone(v2);
  result = SGGraph.init(from:)(a1);
  if (!v3)
    *a2 = result;
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance SGGraph(_QWORD *a1)
{
  SGGraph.encode(to:)(a1);
}

void *static SGGraph.create(data:)(uint64_t a1, unint64_t a2)
{
  return specialized static SGGraph.create(data:)(a1, a2);
}

unint64_t SGGraph.node(named:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  Swift::String v5;
  Swift::String v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t result;
  char v27;
  id v28;
  uint64_t v29[3];
  uint64_t v30;

  if (!a2)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v8 = (void *)swift_allocError();
    *(_OWORD *)v9 = xmmword_245FBF5D0;
    *(_BYTE *)(v9 + 16) = 1;
    swift_willThrow();
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = a1;
  v5._object = a2;
  v6._countAndFlagsBits = 1701667182;
  v6._object = (void *)0xE400000000000000;
  validate(_:named:)(v5, v6);
  if (v7)
  {
    v8 = v7;
    swift_bridgeObjectRelease();
LABEL_5:
    if (one-time initialization token for logger != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)logger);
    v11 = static os_log_type_t.error.getter();
    v12 = v8;
    v13 = v8;
    v14 = Logger.logObject.getter();
    v15 = v11;
    if (os_log_type_enabled(v14, v11))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v29[0] = v17;
      *(_DWORD *)v16 = 136315138;
      v30 = (uint64_t)v8;
      v18 = v8;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      v19 = String.init<A>(describing:)();
      v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_245E46000, v14, v15, "%s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v17, -1, -1);
      MEMORY[0x24954C33C](v16, -1, -1);

    }
    else
    {

    }
    return 0;
  }
  v22 = (uint64_t *)(v2 + OBJC_IVAR___SGGraph_nodeMap);
  swift_beginAccess();
  v23 = *v22;
  v24 = (_QWORD *)v22[1];
  v25 = v22[2];
  swift_bridgeObjectRetain();
  result = specialized OrderedSet._find(_:)(a1, (uint64_t)a2, v23, v24);
  v21 = 0;
  if ((v27 & 1) != 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_bridgeObjectRelease();
    return (unint64_t)v21;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)(v25 + 16))
  {
    v21 = *(void **)(v25 + 8 * result + 32);
    v28 = v21;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SGGraph.connect(outputInputPairs:)(Swift::OpaquePointer_optional outputInputPairs)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t rawValue;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  const char *v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;

  if (!outputInputPairs.value._rawValue)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(_OWORD *)v6 = xmmword_245FC38F0;
    v9 = 1;
LABEL_36:
    *(_BYTE *)(v6 + 16) = v9;
    swift_willThrow();
    return;
  }
  v2 = v1;
  rawValue = (unint64_t)outputInputPairs.value._rawValue;
  v4 = (uint64_t)outputInputPairs.value._rawValue & 0xFFFFFFFFFFFFFF8;
  if ((unint64_t)outputInputPairs.value._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    if ((v5 & 1) == 0)
      goto LABEL_4;
LABEL_34:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    v7 = 0xD00000000000003BLL;
    v8 = "connectOutputInputPairs requires an even number of elements";
    goto LABEL_35;
  }
  v5 = *(_QWORD *)(((uint64_t)outputInputPairs.value._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if ((v5 & 1) != 0)
    goto LABEL_34;
LABEL_4:
  if (v5 < 2)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    v7 = 0xD000000000000032;
    v8 = "connectOutputInputPairs requires at least one pair";
LABEL_35:
    *(_QWORD *)v6 = v7;
    *(_QWORD *)(v6 + 8) = (unint64_t)(v8 - 32) | 0x8000000000000000;
    v9 = 5;
    goto LABEL_36;
  }
  v10 = 0;
  v11 = rawValue & 0xC000000000000001;
  while (1)
  {
    if (v11)
    {
      MEMORY[0x24954B748](v10, rawValue);
      goto LABEL_12;
    }
    if ((unint64_t)v10 >= *(_QWORD *)(v4 + 16))
      break;
    swift_unknownObjectRetain();
LABEL_12:
    type metadata accessor for SGOutput();
    v12 = swift_dynamicCastClass();
    if (!v12)
    {
      swift_unknownObjectRelease();
      _StringGuts.grow(_:)(44);
      v16._countAndFlagsBits = 0xD00000000000001ALL;
      v16._object = (void *)0x8000000245FCD760;
      String.append(_:)(v16);
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._countAndFlagsBits = 0x6F66207475622027;
      v18._object = (void *)0xED00002720646E75;
      String.append(_:)(v18);
      if (v11)
        MEMORY[0x24954B748](v10, rawValue);
      else
        swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
      _print_unlocked<A, B>(_:_:)();
      swift_unknownObjectRelease();
      v22._countAndFlagsBits = 39;
      v22._object = (void *)0xE100000000000000;
      String.append(_:)(v22);
      lazy protocol witness table accessor for type APIError and conformance APIError();
      swift_allocError();
      *(_QWORD *)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0xE000000000000000;
      v9 = 6;
      goto LABEL_36;
    }
    v13 = (char *)v12;
    if (v10 + 1 >= v5)
    {
      swift_unknownObjectRelease();
LABEL_28:
      swift_bridgeObjectRelease();
      return;
    }
    if (v11)
    {
      MEMORY[0x24954B748]();
    }
    else
    {
      if ((unint64_t)(v10 + 1) >= *(_QWORD *)(v4 + 16))
        goto LABEL_38;
      swift_unknownObjectRetain();
    }
    type metadata accessor for SGInput();
    v14 = swift_dynamicCastClass();
    if (!v14)
    {
      swift_unknownObjectRelease();
      _StringGuts.grow(_:)(43);
      v19._object = (void *)0x8000000245FCD780;
      v19._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v19);
      v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      v21._countAndFlagsBits = 0x6F66207475622027;
      v21._object = (void *)0xED00002720646E75;
      String.append(_:)(v21);
      if ((rawValue & 0xC000000000000001) != 0)
        MEMORY[0x24954B748](v10 + 1, rawValue);
      else
        swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
      _print_unlocked<A, B>(_:_:)();
      swift_unknownObjectRelease();
      v23._countAndFlagsBits = 39;
      v23._object = (void *)0xE100000000000000;
      String.append(_:)(v23);
      lazy protocol witness table accessor for type APIError and conformance APIError();
      swift_allocError();
      *(_QWORD *)v24 = 0;
      *(_QWORD *)(v24 + 8) = 0xE000000000000000;
      *(_BYTE *)(v24 + 16) = 7;
      swift_willThrow();
      swift_unknownObjectRelease();
      return;
    }
    v15 = (char *)v14;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    SGGraph.connect(_:to:)(v13, v15);
    if (v2)
    {
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease_n();
      goto LABEL_28;
    }
    swift_unknownObjectRelease_n();
    swift_unknownObjectRelease_n();
    v10 += 2;
    v11 = rawValue & 0xC000000000000001;
    if (v10 >= v5)
      goto LABEL_28;
  }
  __break(1u);
LABEL_38:
  __break(1u);
}

void SGGraph.extract(node:)(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  void *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  id *v17;
  id v18;
  char *v19;
  void *v20;
  unint64_t v21;
  id v22;
  char *v23;
  char *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  double v41;
  char isUniquelyReferenced_native;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int64_t v46;
  int64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  char v51;
  unint64_t v52;
  id v53;
  char v54;
  uint64_t v55;
  int isUniquelyReferenced_nonNull_bridgeObject;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  char *v62;
  uint64_t v63;
  id v64;
  char v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  unint64_t v72;
  void *v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  char *v81;
  char v82[8];
  uint64_t v83;
  char v84;

  v4 = v2;
  v5 = v1;
  v6 = a1;
  v7 = *(_QWORD *)(a1 + OBJC_IVAR___SGNode_inputs);
  if (v7 >> 62)
  {
LABEL_113:
    swift_bridgeObjectRetain();
    if (!_CocoaArrayWrapper.endIndex.getter())
      goto LABEL_122;
  }
  else
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v8)
      goto LABEL_122;
  }
  if ((v7 & 0xC000000000000001) != 0)
    goto LABEL_119;
  if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v9 = (char *)*(id *)(v7 + 32);
    goto LABEL_6;
  }
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  v11 = (id)MEMORY[0x24954B748](0, v6);
  while (2)
  {
    v12 = v11;
    swift_bridgeObjectRelease();
    v13 = specialized SGGraph.edges(from:)((uint64_t)v12);
    v14 = &v3[OBJC_IVAR___SGInput_edge];
    swift_beginAccess();
    v15 = MEMORY[0x24954C3E4](v14);
    v16 = (void *)v15;
    if (v15)
    {
      v17 = (id *)(v15 + OBJC_IVAR___SGEdge_from);
      swift_beginAccess();
      v18 = *v17;
      v19 = v16;
      SGGraph.remove(edge:)((uint64_t)v19);
      if (v4)
      {

        swift_bridgeObjectRelease();
        v12 = v18;
        v20 = v19;
        v3 = v19;
        goto LABEL_107;
      }
      v68 = v16;

      v16 = v18;
      if (v13 >> 62)
      {
LABEL_109:
        swift_bridgeObjectRetain();
        v6 = _CocoaArrayWrapper.endIndex.getter();
        if (!v6)
        {
LABEL_110:

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          return;
        }
        goto LABEL_16;
      }
    }
    else
    {
      v68 = 0;
      if (v13 >> 62)
        goto LABEL_109;
    }
    v6 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v6)
      goto LABEL_110;
LABEL_16:
    v75 = v13 & 0xC000000000000001;
    v80 = (uint64_t *)(v5 + OBJC_IVAR___SGGraph_edges);
    swift_beginAccess();
    v21 = 0;
    v67 = v13 + 32;
    v70 = v5;
    v71 = v16;
    v73 = v12;
    v74 = v3;
    v72 = v13;
    v69 = v6;
    while (2)
    {
      if (v75)
        v23 = (char *)MEMORY[0x24954B748](v21, v13);
      else
        v23 = (char *)*(id *)(v67 + 8 * v21);
      v24 = v23;
      v25 = __OFADD__(v21, 1);
      v7 = v21 + 1;
      if (v25)
        goto LABEL_117;
      v79 = v4;
      v76 = OBJC_IVAR___SGEdge_to;
      swift_beginAccess();
      swift_unknownObjectWeakAssign();
      v26 = *(_QWORD *)&v24[OBJC_IVAR___SGEdge_from];
      swift_unknownObjectWeakInit();
      v27 = swift_unknownObjectWeakAssign();
      outlined init with take of WeakBox<SGEdge>(v27, (uint64_t)v82);
      v28 = v26 + OBJC_IVAR___SGOutput_edges;
      swift_beginAccess();
      v29 = *(_QWORD *)v28;
      v30 = *(_QWORD *)(v28 + 8);
      v31 = v30 + 32;
      v6 = *(_QWORD *)(v30 + 16);
      v78 = v7;
      v81 = v24;
      if (*(_QWORD *)v28)
      {
        v77 = v28 + 8;
        swift_retain();
        v32 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v82, v31, v6, (_QWORD *)(v29 + 16), v29 + 32);
        v6 = v33;
        v7 = v34;
        swift_release();
        if ((v6 & 1) == 0)
          goto LABEL_38;
LABEL_36:
        v83 = 0;
        v38 = 1;
        goto LABEL_67;
      }
      if (!v6)
        goto LABEL_36;
      v77 = v28 + 8;
      v32 = 0;
      while (1)
      {
        outlined init with copy of WeakBox<SGEdge>(v31, (uint64_t)&v83);
        v7 = MEMORY[0x24954C3E4](&v83);
        v35 = MEMORY[0x24954C3E4](v82);
        v36 = (void *)v35;
        if (!v7)
        {
          if (!v35)
            goto LABEL_37;
          goto LABEL_29;
        }
        if (v35)
          break;
        v36 = (void *)v7;
LABEL_29:

LABEL_30:
        outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v83, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
        ++v32;
        v31 += 8;
        if (v6 == v32)
          goto LABEL_36;
      }
      type metadata accessor for SGEdge();
      v37 = (id)v7;
      v7 = static NSObject.== infix(_:_:)();

      if ((v7 & 1) == 0)
        goto LABEL_30;
LABEL_37:
      outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v83, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
      v7 = 0;
LABEL_38:
      v39 = *(_QWORD *)v28;
      v6 = *(_QWORD *)(*(_QWORD *)(v28 + 8) + 16);
      if (!*(_QWORD *)v28)
      {
        if (v6)
          goto LABEL_56;
LABEL_57:
        specialized ContiguousArray.remove(at:)(v32, (uint64_t)&v83);
        v6 = *(_QWORD *)v28;
        v7 = *(_QWORD *)(v28 + 8);
        if (*(_QWORD *)v28)
        {
          swift_beginAccess();
          v44 = *(_QWORD *)(v6 + 24) & 0x3FLL;
          v45 = *(_QWORD *)(v7 + 16);
          if (v44)
          {
LABEL_63:
            v46 = specialized static _HashTable.scale(forCapacity:)(v45);
            if (v44 <= v46)
              v47 = v46;
            else
              v47 = v44;
            v7 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v7, v47, 0, v44);
            swift_release();
            v38 = 0;
            *(_QWORD *)v28 = v7;
            goto LABEL_67;
          }
        }
        else
        {
          v44 = 0;
          v45 = *(_QWORD *)(v7 + 16);
        }
        if (v45 < 0x10)
        {
          swift_release();
          v38 = 0;
          *(_QWORD *)v28 = 0;
          goto LABEL_67;
        }
        goto LABEL_63;
      }
      swift_beginAccess();
      v40 = *(_QWORD *)(v39 + 16) & 0x3FLL;
      if (v40 != (*(_QWORD *)(v39 + 24) & 0x3FLL) && v40 >= 5)
      {
        v41 = (double)(1 << v40) * 0.25;
        if ((~*(_QWORD *)&v41 & 0x7FF0000000000000) != 0)
        {
          if (v41 > -9.22337204e18)
          {
            if (v41 < 9.22337204e18)
            {
              if (v6 <= (uint64_t)v41)
                goto LABEL_57;
              goto LABEL_49;
            }
            goto LABEL_132;
          }
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
          goto LABEL_134;
        }
LABEL_130:
        __break(1u);
        goto LABEL_131;
      }
      if (!v6)
        goto LABEL_57;
LABEL_49:
      isUniquelyReferenced_native = swift_isUniquelyReferenced_native();
      v6 = *(_QWORD *)v28;
      if ((isUniquelyReferenced_native & 1) == 0)
      {
        if (v6)
        {
          v6 = _HashTable.copy()(*(_QWORD **)v28);
          swift_release();
          *(_QWORD *)v28 = v6;
          goto LABEL_52;
        }
LABEL_134:
        __break(1u);
LABEL_135:
        _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return;
      }
LABEL_52:
      if (!v6)
        goto LABEL_133;
      swift_retain();
      specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(v7, (_QWORD *)(v6 + 16), v6 + 32, v28);
      if (__OFADD__(v32, 1))
        goto LABEL_128;
      if (v32 + 1 < v32)
        goto LABEL_129;
      v43 = *(_QWORD *)(v28 + 8);
      swift_retain();
      specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(v32, v32 + 1, v43, (uint64_t *)(v6 + 16), (_QWORD *)(v6 + 32));
      swift_release();
      swift_release();
LABEL_56:
      v7 = v77;
      specialized ContiguousArray.remove(at:)(v32, (uint64_t)&v83);
      v38 = 0;
LABEL_67:
      v84 = v38;
      swift_endAccess();
      outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v82, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
      outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v83, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>?);
      v4 = *v80;
      if (!((unint64_t)*v80 >> 62))
      {
        v48 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v48)
          goto LABEL_69;
LABEL_105:
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type APIError and conformance APIError();
        swift_allocError();
        *(_QWORD *)v66 = 0xD000000000000032;
        *(_QWORD *)(v66 + 8) = 0x8000000245FCD690;
        *(_BYTE *)(v66 + 16) = 1;
        swift_willThrow();
        swift_bridgeObjectRelease();
        v12 = v73;
        v3 = v74;
        v16 = v71;

LABEL_106:
        swift_bridgeObjectRelease();

        v20 = v68;
LABEL_107:

        return;
      }
      if (v4 < 0)
        v6 = *v80;
      else
        v6 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n();
      v48 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v48)
        goto LABEL_105;
LABEL_69:
      v5 = v4 & 0xC000000000000001;
      if ((v4 & 0xC000000000000001) != 0)
      {
        v49 = (id)MEMORY[0x24954B748](0, v4);
      }
      else
      {
        if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_118;
        v49 = *(id *)(v4 + 32);
      }
      v50 = v49;
      v7 = type metadata accessor for SGEdge();
      v51 = static NSObject.== infix(_:_:)();

      if ((v51 & 1) != 0)
      {
        v52 = 0;
LABEL_81:
        swift_bridgeObjectRelease();
        swift_beginAccess();
        v55 = *v80;
        isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *v80 = v55;
        if (!isUniquelyReferenced_nonNull_bridgeObject || v55 < 0 || (v55 & 0x4000000000000000) != 0)
          specialized _ArrayBuffer._consumeAndCreateNew()(v55);
        v6 = v55 & 0xFFFFFFFFFFFFFF8;
        v57 = *(_QWORD *)(v6 + 16);
        v12 = v73;
        v3 = v74;
        v5 = v70;
        v16 = v71;
        v13 = v72;
        if (v52 < v57)
        {
          v58 = v57 - 1;
          v59 = v57 - 1 - v52;
          if (v59 < 0)
            goto LABEL_135;
          v60 = v6 + 8 * v52;
          v61 = *(void **)(v60 + 32);
          memmove((void *)(v60 + 32), (const void *)(v60 + 40), 8 * v59);
          *(_QWORD *)(v6 + 16) = v58;
          specialized Array._endMutation()();
          swift_endAccess();

          if (v71)
          {
            v62 = *(char **)&v81[v76];
            v22 = v71;
            SGGraph.connect(_:to:)((char *)v71, v62);
            v4 = v79;
            if (v79)
            {
              swift_bridgeObjectRelease();

              goto LABEL_106;
            }

          }
          else
          {
            v22 = v81;
            v4 = v79;
          }

          v6 = v69;
          v21 = v78;
          if (v78 == v69)
            goto LABEL_110;
          continue;
        }
        goto LABEL_124;
      }
      break;
    }
    if (v48 == 1)
      goto LABEL_105;
    if (v5)
    {
      v53 = (id)MEMORY[0x24954B748](1, v4);
      goto LABEL_79;
    }
    if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
      goto LABEL_127;
    v53 = *(id *)(v4 + 40);
LABEL_79:
    v6 = (uint64_t)v53;
    v54 = static NSObject.== infix(_:_:)();

    if ((v54 & 1) != 0)
    {
      v52 = 1;
      goto LABEL_81;
    }
    v3 = (char *)(v4 + 32);
    v63 = 1;
    while (2)
    {
      v52 = v63 + 1;
      if (__OFADD__(v63, 1))
      {
        __break(1u);
        goto LABEL_113;
      }
      if (v52 == v48)
        goto LABEL_105;
      if (v5)
      {
        v64 = (id)MEMORY[0x24954B748](v63 + 1, v4);
LABEL_92:
        v6 = (uint64_t)v64;
        v65 = static NSObject.== infix(_:_:)();

        ++v63;
        if ((v65 & 1) != 0)
          goto LABEL_81;
        continue;
      }
      break;
    }
    if ((v52 & 0x8000000000000000) == 0)
    {
      if (v52 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_116;
      v64 = *(id *)&v3[8 * v52];
      goto LABEL_92;
    }
    __break(1u);
LABEL_116:
    __break(1u);
LABEL_117:
    __break(1u);
LABEL_118:
    __break(1u);
LABEL_119:
    v9 = (char *)MEMORY[0x24954B748](0, v7);
LABEL_6:
    v3 = v9;
    swift_bridgeObjectRelease();
    v6 = *(_QWORD *)(v6 + OBJC_IVAR___SGNode_outputs);
    if ((unint64_t)v6 >> 62)
    {
      swift_bridgeObjectRetain();
      if (!_CocoaArrayWrapper.endIndex.getter())
        goto LABEL_121;
LABEL_8:
      if ((v6 & 0xC000000000000001) == 0)
      {
        if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v11 = *(id *)(v6 + 32);
          continue;
        }
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
        goto LABEL_130;
      }
      goto LABEL_125;
    }
    break;
  }
  v10 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v10)
    goto LABEL_8;
LABEL_121:

LABEL_122:
  swift_bridgeObjectRelease();
}

void closure #4 in SGGraph.collapseConstantAndPassthroughNodes()(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;

  v1 = *(void **)(a1 + 8);
  v2 = *(id *)a1;
  v3 = v1;
  SGGraph.extract(node:)((uint64_t)v2);

}

void closure #2 in SGGraph.surfaceNodeElement(ofType:)(char *a1, void *a2, char a3, _QWORD *a4, void **a5)
{
  uint64_t *v5;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  void *v14;
  char *v15;
  id v16;

  v5 = (uint64_t *)&a1[OBJC_IVAR___SGNode_data];
  if (a1[OBJC_IVAR___SGNode_data + 80] <= 0x3Fu)
  {
    v12 = *v5;
    v11 = v5[1];
    swift_bridgeObjectRetain();
    v13 = specialized Surface.init(nodeDefID:)(v12, v11);
    if (v13 < 3)
    {
      if ((a3 & 1) != 0)
        return;
      goto LABEL_7;
    }
    if (v13 == 3 && (a3 & 1) != 0)
    {
LABEL_7:
      if (!*a4)
      {
        *a4 = a1;
        v14 = *a5;
        *a5 = a2;
        v15 = a1;
        v16 = a2;

      }
    }
  }
}

unint64_t SGGraph.node(containing:)(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;

  v2 = (uint64_t *)(a1 + *a2);
  swift_beginAccess();
  v3 = (void *)v2[1];
  if (!v3)
    return 0;
  v4 = *v2;
  swift_bridgeObjectRetain();
  v5 = SGGraph.node(named:)(v4, v3);
  swift_bridgeObjectRelease();
  return v5;
}

unint64_t SGGraph.node(connectedTo:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  id v7;
  unint64_t v8;

  v1 = a1 + OBJC_IVAR___SGInput_edge;
  swift_beginAccess();
  v2 = MEMORY[0x24954C3E4](v1);
  if (!v2)
    return 0;
  v3 = (void *)v2;
  v4 = (uint64_t *)(*(_QWORD *)(v2 + OBJC_IVAR___SGEdge_from) + OBJC_IVAR___SGOutput_attachment);
  swift_beginAccess();
  v5 = (void *)v4[1];
  if (!v5)
  {

    return 0;
  }
  v6 = *v4;
  v7 = v3;
  swift_bridgeObjectRetain();
  v8 = SGGraph.node(named:)(v6, v5);

  swift_bridgeObjectRelease();
  return v8;
}

uint64_t closure #1 in SGGraph.connectedUpstreamSubgraph(rootedAt:)(char *a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  _QWORD *v25;
  Swift::Int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  id v38;
  unint64_t v39;
  unint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  void *v54;
  char v55;
  id v56;
  char v57;
  id v58;
  char v59;
  id v60;
  char v61;
  uint64_t v62;
  void **v63;
  void *v64;
  id v65;
  char v66;
  uint64_t result;
  unint64_t v68;
  unint64_t i;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  id *v74;
  void *v75;
  void *v76;
  unint64_t v77;

  specialized OrderedSet._find(_:)((uint64_t)a1, *a3, a3[1]);
  if ((v7 & 1) != 0)
    specialized OrderedSet._appendNew(_:in:)(a1, v6);
  v8 = *(_QWORD *)&a1[OBJC_IVAR___SGNode_inputs];
  v77 = MEMORY[0x24BEE4AF8];
  if (v8 >> 62)
    goto LABEL_17;
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (i = a4; v9; i = a4)
  {
    a4 = v8 & 0xC000000000000001;
    v10 = 4;
    while (1)
    {
      v11 = a4 ? (char *)MEMORY[0x24954B748](v10 - 4, v8) : (char *)*(id *)(v8 + 8 * v10);
      v12 = v11;
      v13 = v10 - 3;
      if (__OFADD__(v10 - 4, 1))
        break;
      v14 = &v11[OBJC_IVAR___SGInput_edge];
      swift_beginAccess();
      v15 = MEMORY[0x24954C3E4](v14);

      if (v15)
      {
        MEMORY[0x24954B1A8]();
        if (*(_QWORD *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v10;
      if (v13 == v9)
      {
        swift_bridgeObjectRelease();
        v16 = v77;
        a4 = i;
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain_n();
    v9 = _CocoaArrayWrapper.endIndex.getter();
  }
  swift_bridgeObjectRelease();
  v16 = MEMORY[0x24BEE4AF8];
LABEL_19:
  swift_bridgeObjectRelease();
  if (v16 >> 62)
    goto LABEL_86;
  v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v17)
    return swift_bridgeObjectRelease_n();
LABEL_21:
  v18 = 0;
  v71 = v16;
  v72 = v16 & 0xC000000000000001;
  v68 = v16 + 32;
  v70 = v17;
  while (1)
  {
    while (1)
    {
      if (v72)
        v19 = (id)MEMORY[0x24954B748](v18, v16);
      else
        v19 = *(id *)(v68 + 8 * v18);
      v20 = v19;
      v21 = __OFADD__(v18++, 1);
      if (v21)
      {
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        swift_bridgeObjectRetain();
        v17 = _CocoaArrayWrapper.endIndex.getter();
        if (!v17)
          return swift_bridgeObjectRelease_n();
        goto LABEL_21;
      }
      v22 = *(_QWORD *)a4;
      v23 = *(_QWORD *)(a4 + 8);
      v74 = (id *)(v23 + 32);
      if (*(_QWORD *)a4)
        break;
      v52 = *(_QWORD *)(v23 + 16);
      if (!v52)
      {
        v73 = v18;
        v29 = 0;
        goto LABEL_74;
      }
      type metadata accessor for SGEdge();
      v53 = *v74;
      v54 = v20;
      v55 = static NSObject.== infix(_:_:)();

      if ((v55 & 1) == 0)
      {
        v76 = v54;
        if (v52 == 1)
          goto LABEL_73;
        v56 = *(id *)(v23 + 40);
        v57 = static NSObject.== infix(_:_:)();

        if ((v57 & 1) == 0)
        {
          if (v52 == 2)
            goto LABEL_73;
          v58 = *(id *)(v23 + 48);
          v59 = static NSObject.== infix(_:_:)();

          if ((v59 & 1) == 0)
          {
            if (v52 == 3)
              goto LABEL_73;
            v60 = *(id *)(v23 + 56);
            v61 = static NSObject.== infix(_:_:)();

            if ((v61 & 1) == 0)
            {
              v62 = v52 - 4;
              v63 = (void **)(v23 + 64);
              while (v62)
              {
                v64 = *v63++;
                v65 = v64;
                v54 = v76;
                v66 = static NSObject.== infix(_:_:)();

                --v62;
                if ((v66 & 1) != 0)
                  goto LABEL_69;
              }
LABEL_73:
              v73 = v18;
              v29 = 0;
              v20 = v76;
              v16 = v71;
LABEL_74:
              specialized OrderedSet._appendNew(_:in:)(v20, v29);

              goto LABEL_23;
            }
          }
        }
      }
LABEL_69:

      v16 = v71;
      if (v18 == v17)
        return swift_bridgeObjectRelease_n();
    }
    v25 = (_QWORD *)(v22 + 16);
    v24 = *(_QWORD *)(v22 + 16);
    swift_retain();
    v26 = NSObject._rawHashValue(seed:)(v24);
    v27 = 1 << *(_QWORD *)(v22 + 16);
    v28 = v27 - 1;
    if (__OFSUB__(v27, 1))
      goto LABEL_85;
    v75 = v20;
    v73 = v18;
    v29 = v28 & v26;
    v30 = _HashTable.UnsafeHandle._startIterator(bucket:)(v28 & v26, (_QWORD *)(v22 + 16), v22 + 32);
    if (!v30)
    {
LABEL_62:
      swift_release();
      v17 = v70;
      v20 = v75;
      goto LABEL_74;
    }
    v33 = v31;
    v34 = v32;
    v35 = (v30 ^ v28) + (*(uint64_t *)(v22 + 24) >> 6);
    v36 = v35 >= v28 ? v28 : 0;
    v37 = v35 - v36;
    type metadata accessor for SGEdge();
    v38 = v74[v37];
    v16 = static NSObject.== infix(_:_:)();

    if ((v16 & 1) == 0)
      break;
LABEL_22:

    swift_release();
    a4 = i;
    v17 = v70;
    v16 = v71;
LABEL_23:
    v18 = v73;
    if (v73 == v17)
      return swift_bridgeObjectRelease_n();
  }
  a4 = 0;
  while (1)
  {
    ++v29;
    v42 = *v25 & 0x3FLL;
    v43 = 1 << *v25;
    if (v29 != v43)
      goto LABEL_42;
    if ((a4 & 1) != 0)
      break;
    v29 = 0;
    a4 = 1;
LABEL_42:
    if (v34 >= v42)
    {
      v21 = __OFSUB__(v34, v42);
      v34 -= v42;
      if (v21)
      {
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
      v51 = (v43 - 1) & v33;
      v33 >>= v42;
      if (!v51)
      {
LABEL_61:
        a4 = i;
        v16 = v71;
        goto LABEL_62;
      }
    }
    else
    {
      v44 = (v29 * v42) >> 6;
      if (v34)
      {
        if (__OFADD__(v42 << v42, 64))
          goto LABEL_84;
        v45 = (v42 << v42) + 126;
        if ((v42 << v42) + 64 >= 1)
          v45 = (v42 << v42) + 63;
        if (v44 + 1 == v45 >> 6)
          v44 = 0;
        else
          ++v44;
      }
      v46 = v42 - v34;
      if (__OFSUB__(v42, v34))
        goto LABEL_81;
      v47 = v44 == 2 && v42 == 5;
      v48 = 64;
      if (v47)
        v48 = 32;
      v21 = __OFSUB__(v48, v46);
      v49 = v48 - v46;
      if (v21)
        goto LABEL_82;
      v50 = *(_QWORD *)(v22 + 32 + 8 * v44);
      v51 = ((v50 << v34) | v33) & (v43 - 1);
      v33 = v50 >> v46;
      v34 = v49;
      if (!v51)
        goto LABEL_61;
    }
    v39 = v43 - 1;
    v40 = (v51 ^ v39) + (*(uint64_t *)(v22 + 24) >> 6);
    if (v40 < v39)
      v39 = 0;
    v41 = v74[v40 - v39];
    v16 = static NSObject.== infix(_:_:)();

    if ((v16 & 1) != 0)
      goto LABEL_22;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t SGGraph.nodesUpstreamOf(node:)()
{
  unint64_t v0;
  uint64_t v1;

  v0 = swift_bridgeObjectRetain();
  v1 = specialized Sequence.compactMap<A>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

void *TopologicalSort.Element.nodeGraphCallNode.getter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = a3;
  return a3;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TopologicalSort.Element(uint64_t a1, uint64_t a2)
{
  return specialized static TopologicalSort.Element.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16));
}

void *TopologicalSort.rootElement.getter(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  return a2;
}

void closure #1 in SGGraph.topologicalSort()(char *a1, void *a2, _QWORD **a3)
{
  char *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  id v10;
  char *v11;
  id v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  __int128 v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[13];
  __int128 v30;

  v6 = &a1[OBJC_IVAR___SGNode_graph];
  swift_beginAccess();
  v7 = MEMORY[0x24954C3E4](v6);
  if (v7)
  {
    v8 = (void *)v7;
    v9 = *a3;
    v10 = a2;
    v11 = a1;
    v12 = v8;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v9;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      *a3 = v9;
    }
    v15 = v9[2];
    v14 = v9[3];
    if (v15 >= v14 >> 1)
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v9);
    v9[2] = v15 + 1;
    v16 = &v9[3 * v15];
    v16[4] = v11;
    v16[5] = v12;
    v16[6] = a2;
    *a3 = v9;

  }
  else
  {
    _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi9_((uint64_t)&v28);
    outlined init with take of SGInternalError.ErrorType(&v28, v29);
    lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
    v30 = 0uLL;
    swift_allocError();
    v17 = v29[1];
    *v18 = v29[0];
    v18[1] = v17;
    v19 = v29[5];
    v20 = v29[3];
    v21 = v29[2];
    v18[4] = v29[4];
    v18[5] = v19;
    v18[2] = v21;
    v18[3] = v20;
    v22 = v29[9];
    v23 = v29[7];
    v24 = v29[6];
    v18[8] = v29[8];
    v18[9] = v22;
    v18[6] = v24;
    v18[7] = v23;
    v25 = v30;
    v26 = v29[11];
    v27 = v29[10];
    v18[12] = v29[12];
    v18[13] = v25;
    v18[10] = v27;
    v18[11] = v26;
    swift_willThrow();
  }
}

uint64_t implicit closure #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(uint64_t (*a1)(id), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t *v27;
  uint64_t *v29;
  uint64_t v30;

  v5 = a3 + OBJC_IVAR___SGNode_graph;
  swift_beginAccess();
  v6 = MEMORY[0x24954C3E4](v5);
  if (v6)
  {
    v7 = (uint64_t *)v6;
    v8 = swift_bridgeObjectRetain();
    v9 = specialized _ArrayProtocol.filter(_:)(v8, a1, a2);
    v30 = MEMORY[0x24BEE4AF8];
    if (v9 >> 62)
      goto LABEL_23;
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = v7;
    swift_bridgeObjectRetain();
    for (; v10; v10 = _CocoaArrayWrapper.endIndex.getter())
    {
      v29 = v7;
      v12 = 4;
      v7 = &OBJC_IVAR___SGOutput_node;
      while (1)
      {
        v13 = (v9 & 0xC000000000000001) != 0
            ? (char *)MEMORY[0x24954B748](v12 - 4, v9)
            : (char *)*(id *)(v9 + 8 * v12);
        v14 = v13;
        v15 = v12 - 3;
        if (__OFADD__(v12 - 4, 1))
          break;
        v16 = &v13[OBJC_IVAR___SGInput_edge];
        swift_beginAccess();
        v17 = MEMORY[0x24954C3E4](v16);
        if (v17)
        {
          v18 = (void *)v17;
          v19 = (char *)*(id *)(v17 + OBJC_IVAR___SGEdge_from);

          v20 = &v19[OBJC_IVAR___SGOutput_node];
          swift_beginAccess();
          v21 = MEMORY[0x24954C3E4](v20);

          if (v21)
          {
            MEMORY[0x24954B1A8]();
            if (*(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
        }
        else
        {

        }
        ++v12;
        if (v15 == v10)
        {
          swift_bridgeObjectRelease();
          v22 = v30;
          v7 = v29;
          goto LABEL_25;
        }
      }
      __break(1u);
LABEL_23:
      v27 = v7;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    v22 = MEMORY[0x24BEE4AF8];
LABEL_25:
    swift_bridgeObjectRelease();

  }
  else
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)logger);
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      _os_log_impl(&dword_245E46000, v24, v25, "Node isn't contained in a graph.", v26, 2u);
      MEMORY[0x24954C33C](v26, -1, -1);
    }

    return MEMORY[0x24BEE4AF8];
  }
  return v22;
}

uint64_t closure #1 in mapUniforms(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v4 = (_QWORD *)(a1 + 16);
  swift_beginAccess();
  v5 = *(_QWORD *)(a1 + 16);
  result = swift_beginAccess();
  v7 = *(_QWORD *)(a1 + 16);
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
  {
    __break(1u);
  }
  else
  {
    *v4 = v9;
    *(_QWORD *)a2 = v5;
    *(_BYTE *)(a2 + 8) = 0;
  }
  return result;
}

uint64_t SGGraph.createCustomUniformsType(named:textureAssignments:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  BOOL v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  objc_class *v37;
  char *v38;
  uint64_t (*v39)(uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  objc_super v58;
  char v59[8];
  char v60[8];
  uint64_t v61;
  uint64_t v62;

  v5 = v4;
  v7 = *(_QWORD *)(*(_QWORD *)(v3 + OBJC_IVAR___SGGraph_argumentsNode) + OBJC_IVAR___SGNode_outputs);
  v8 = MEMORY[0x24BEE4AF8];
  v62 = MEMORY[0x24BEE4AF8];
  if (v7 >> 62)
    goto LABEL_29;
  v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v9; v9 = _CocoaArrayWrapper.endIndex.getter())
  {
    v46 = v5;
    v47 = a3;
    v10 = 0;
    v53 = v9;
    v54 = v7 & 0xC000000000000001;
    v50 = v7 + 32;
    v51 = v7 & 0xFFFFFFFFFFFFFF8;
    v52 = v7;
    while (v54)
    {
      v11 = (char *)MEMORY[0x24954B748](v10, v7);
      v12 = __OFADD__(v10++, 1);
      if (v12)
        goto LABEL_27;
LABEL_12:
      v56 = v11;
      v13 = &v11[OBJC_IVAR___SGOutput_edges];
      swift_beginAccess();
      v5 = *((_QWORD *)v13 + 1);
      v61 = v8;
      a3 = *(_QWORD *)(v5 + 16);
      if (a3)
      {
        v14 = v5 + 32;
        swift_retain();
        swift_retain();
        do
        {
          outlined init with copy of WeakBox<SGEdge>(v14, (uint64_t)v60);
          v15 = MEMORY[0x24954C3E4](v60);
          v16 = outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v60, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
          if (v15)
          {
            MEMORY[0x24954B1A8](v16);
            if (*(_QWORD *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          v14 += 8;
          --a3;
        }
        while (a3);
        v17 = v61;
        v8 = MEMORY[0x24BEE4AF8];
        v7 = v52;
      }
      else
      {
        swift_retain();
        swift_retain();
        v17 = v8;
      }
      swift_release();
      swift_release();
      if (v17 >> 62)
      {
        swift_bridgeObjectRetain();
        v18 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v18)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {

      }
      if (v10 == v53)
      {
        swift_bridgeObjectRelease();
        v19 = v62;
        v5 = v46;
        a3 = v47;
        goto LABEL_31;
      }
    }
    if (v10 >= *(_QWORD *)(v51 + 16))
      goto LABEL_28;
    v11 = (char *)*(id *)(v50 + 8 * v10);
    v12 = __OFADD__(v10++, 1);
    if (!v12)
      goto LABEL_12;
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  v19 = MEMORY[0x24BEE4AF8];
LABEL_31:
  v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGNodeCG_SSs5NeverOTg504_s11d29Graph7SGGraphC6insertyySayAA6F62CGSgKFSSAFcfu_32b446a066102f7f77dfc7f44f189789ecAFSSTf3nnnpk_nTf1cn_nTm(v19, (uint64_t)v59, &OBJC_IVAR___SGOutput_name);
  swift_release();
  v21 = specialized Set.init<A>(_:)(v20);
  swift_bridgeObjectRelease();
  v62 = v8;
  v22 = *(_QWORD *)(a3 + 16);
  if (v22)
  {
    v55 = v5;
    v57 = v21;
    v61 = v8;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
    v23 = v61;
    v24 = (uint64_t *)(a3 + 40);
    do
    {
      v25 = *(v24 - 1);
      v26 = *v24;
      v27 = v24[1];
      v28 = *((_BYTE *)v24 + 32);
      v61 = v23;
      v30 = *(_QWORD *)(v23 + 16);
      v29 = *(_QWORD *)(v23 + 24);
      swift_bridgeObjectRetain();
      swift_retain();
      if (v30 >= v29 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
        v23 = v61;
      }
      *(_QWORD *)(v23 + 16) = v30 + 1;
      v31 = v23 + 48 * v30;
      *(_QWORD *)(v31 + 32) = v25;
      *(_QWORD *)(v31 + 40) = v26;
      *(_QWORD *)(v31 + 48) = v27;
      *(_QWORD *)(v31 + 56) = MEMORY[0x24BEE4AF8];
      *(_BYTE *)(v31 + 64) = v28;
      *(_QWORD *)(v31 + 72) = 0;
      v24 += 6;
      --v22;
    }
    while (v22);
    v5 = v55;
    v21 = v57;
  }
  else
  {
    v23 = v8;
  }
  specialized Array.append<A>(contentsOf:)(v23);
  swift_bridgeObjectRetain();
  v32 = swift_bridgeObjectRetain();
  v33 = specialized Sequence.compactMap<A>(_:)(v32, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  specialized Array.append<A>(contentsOf:)((uint64_t)v33);
  v61 = v62;
  swift_bridgeObjectRetain_n();
  specialized MutableCollection<>.sort(by:)(&v61, specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  if (v5)
  {
    result = swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_retain();
    specialized MutableCollection<>.sort(by:)(&v61, specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
    swift_release();
    v34 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay11ShaderGraph16DataTypePropertyVGG_AJs5NeverOTg506_sSi11f7Graph16hij34VACIgygo_Si6offset_AC7elementtACs5K173OIegnrzr_TR04_s11a94Graph7SGGraphC24createCustomUniformsType5named18textureAssignmentsAA17SGTypeDescriptionCSS_Sayq26TextureAssignmentVGtKFAA04c2G8E13VSi_AMtXEfU4_Tf3nnnpf_nTf1cn_n(v61);
    swift_bridgeObjectRelease();
    swift_release();
    type metadata accessor for MetalDataType.Struct();
    v35 = swift_allocObject();
    swift_bridgeObjectRetain();
    LOBYTE(v61) = 1;
    v36 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, a1, a2, 0x100000000, 0x100000000, 0, v34, v35);
    swift_release();
    v37 = (objc_class *)type metadata accessor for SGTypeDescription();
    v38 = (char *)objc_allocWithZone(v37);
    *(_DWORD *)&v38[OBJC_IVAR___SGTypeDescription_offset] = 0;
    *(_QWORD *)&v38[OBJC_IVAR___SGTypeDescription_type] = v36;
    v39 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 232);
    v40 = v38;
    v41 = swift_retain();
    v42 = v39(v41);
    v43 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph16DataTypePropertyV_s6UInt32VtG_AF21SGPropertyDescriptionCs5NeverOTg504_s11d7Graph16fgh3Vs6i5VAA21jk17CIggyo_AC_AEtAGs5L96OIegnrzr_TR04_s11a13Graph17SGTypeh12CyAcA13Metalcd9CcfcAA010g9D0CAA0fG8e4V_s6F7VtXEfU_Tf3nnnpf_nTf1cn_n(v42);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v40[OBJC_IVAR___SGTypeDescription_properties] = v43;

    v58.receiver = v40;
    v58.super_class = v37;
    v44 = objc_msgSendSuper2(&v58, sel_init);
    swift_release();
    return (uint64_t)v44;
  }
  return result;
}

void closure #3 in SGGraph.createCustomUniformsType(named:textureAssignments:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19[7];

  v5 = *a1;
  v6 = (uint64_t *)(*a1 + OBJC_IVAR___SGOutput_name);
  v7 = *v6;
  v8 = v6[1];
  swift_bridgeObjectRetain();
  LOBYTE(v7) = specialized Set.contains(_:)(v7, v8, a2);
  swift_bridgeObjectRelease();
  if ((v7 & 1) == 0 || (v9 = (uint64_t *)(v5 + OBJC_IVAR___SGOutput_type), swift_beginAccess(), *v9 == 13))
  {
LABEL_3:
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    return;
  }
  v10 = SGDataType.metalDataType.getter(*v9);
  if (!v10)
  {
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    v19[0] = 0xD000000000000016;
    v19[1] = 0x8000000245FCD8C0;
    v13._countAndFlagsBits = SGDataType.stringValue.getter(*v9);
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    if (one-time initialization token for logger != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)logger);
    swift_bridgeObjectRetain();
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      v19[0] = v18;
      *(_DWORD *)v17 = 136315138;
      swift_bridgeObjectRetain();
      v19[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, 0x8000000245FCD8C0, v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_245E46000, v15, v16, "%s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v18, -1, -1);
      MEMORY[0x24954C33C](v17, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    goto LABEL_3;
  }
  v11 = v6[1];
  v12 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)a3 = *v6;
  *(_QWORD *)(a3 + 8) = v11;
  *(_QWORD *)(a3 + 16) = v10;
  *(_QWORD *)(a3 + 24) = v12;
  *(_OWORD *)(a3 + 32) = xmmword_245FC1E10;
  swift_bridgeObjectRetain();
}

NSString __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SGGraph.createDotRepresentation()()
{
  char *v0;
  void *v1;
  id v2;
  NSString result;
  void *v4;

  createDotText(representing:)(v0);
  if (v1)
  {
    type metadata accessor for SGError();
    v2 = v1;
    SGError.__allocating_init(_:)(v1);
    swift_willThrow();

  }
  else
  {
    v4 = (void *)MEMORY[0x24954AF98]();
    swift_bridgeObjectRelease();
    return v4;
  }
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  Swift::Int v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  Swift::Int v35;
  uint64_t v36;
  _OWORD *v37;
  _OWORD *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  char v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  Swift::Int v107;
  Swift::Int v108;
  uint64_t v109;
  char *__dst;
  uint64_t v111;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_130;
    if (v3)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_138;
  v107 = result;
  v111 = v1;
  v104 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_96:
      v95 = v11;
      v106 = v8;
      if (v12 >= 2)
      {
        v96 = *v104;
        do
        {
          v97 = v12 - 2;
          if (v12 < 2)
            goto LABEL_125;
          if (!v96)
            goto LABEL_137;
          v98 = v95;
          v99 = *(_QWORD *)&v95[16 * v97 + 32];
          v100 = *(_QWORD *)&v95[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v96 + 48 * v99), (char *)(v96 + 48 * *(_QWORD *)&v95[16 * v12 + 16]), v96 + 48 * v100, __dst);
          if (v111)
            break;
          if (v100 < v99)
            goto LABEL_126;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v98 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v98);
          if (v97 >= *((_QWORD *)v98 + 2))
            goto LABEL_127;
          v101 = &v98[16 * v97 + 32];
          *(_QWORD *)v101 = v99;
          *((_QWORD *)v101 + 1) = v100;
          v102 = *((_QWORD *)v98 + 2);
          if (v12 > v102)
            goto LABEL_128;
          memmove(&v98[16 * v12 + 16], &v98[16 * v12 + 32], 16 * (v102 - v12));
          v95 = v98;
          *((_QWORD *)v98 + 2) = v102 - 1;
          v12 = v102 - 1;
        }
        while (v102 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v106 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v106 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v106 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v105 = *a1 + 112;
  v103 = *a1 + 40;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v108 = v3;
  v109 = v10;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(_DWORD *)(*(_QWORD *)(v10 + 48 * v9 + 16) + 60);
      v15 = *(_DWORD *)(*(_QWORD *)(v10 + 48 * v13 + 16) + 60);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v105 + 48 * v13;
        v17 = v14;
        while (1)
        {
          v18 = *(_DWORD *)(*(_QWORD *)v16 + 60);
          if (v15 < v14 == v17 >= v18)
            break;
          ++v9;
          v16 += 48;
          v17 = v18;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v15 < v14)
      {
        if (v9 < v13)
          goto LABEL_131;
        if (v13 < v9)
        {
          v19 = 48 * v9;
          v20 = 48 * v13;
          v21 = v9;
          v22 = v13;
          do
          {
            if (v22 != --v21)
            {
              if (!v10)
                goto LABEL_136;
              v23 = (_OWORD *)(v10 + v20);
              v24 = *(_QWORD *)(v10 + v20);
              v25 = v10 + v19;
              v26 = *(_QWORD *)(v10 + v20 + 24);
              v27 = *(_BYTE *)(v10 + v20 + 32);
              v28 = *(_QWORD *)(v10 + v20 + 40);
              v29 = *(_OWORD *)(v10 + v20 + 8);
              v31 = *(_OWORD *)(v10 + v19 - 32);
              v30 = *(_OWORD *)(v10 + v19 - 16);
              *v23 = *(_OWORD *)(v10 + v19 - 48);
              v23[1] = v31;
              v23[2] = v30;
              *(_QWORD *)(v25 - 48) = v24;
              *(_OWORD *)(v25 - 40) = v29;
              *(_QWORD *)(v25 - 24) = v26;
              *(_BYTE *)(v25 - 16) = v27;
              *(_QWORD *)(v25 - 8) = v28;
            }
            ++v22;
            v19 -= 48;
            v20 += 48;
          }
          while (v22 < v21);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v9, v13))
      goto LABEL_129;
    if (v9 - v13 >= v107)
      goto LABEL_46;
    v32 = v13 + v107;
    if (__OFADD__(v13, v107))
      goto LABEL_132;
    if (v32 >= v3)
      v32 = v3;
    if (v32 < v13)
      break;
    if (v9 != v32)
    {
      v33 = v103 + 48 * v9;
      do
      {
        v34 = *(_QWORD *)(v10 + 48 * v9 + 16);
        v35 = v13;
        v36 = v33;
        do
        {
          if (*(_DWORD *)(*(_QWORD *)(v36 - 72) + 60) >= *(_DWORD *)(v34 + 60))
            break;
          if (!v10)
            goto LABEL_134;
          v37 = (_OWORD *)(v36 - 40);
          v38 = (_OWORD *)(v36 - 88);
          v40 = *(_OWORD *)(v36 - 72);
          v39 = *(_OWORD *)(v36 - 56);
          *(_QWORD *)(v36 - 48) = *(_QWORD *)v36;
          v36 -= 48;
          v41 = *(_QWORD *)(v36 + 8);
          v42 = *(_QWORD *)(v36 + 16);
          v43 = *(_QWORD *)(v36 + 32);
          v44 = *(_BYTE *)(v36 + 40);
          *v37 = *v38;
          v37[1] = v40;
          v37[2] = v39;
          *(_QWORD *)(v36 - 40) = v41;
          *(_QWORD *)(v36 - 32) = v42;
          *(_QWORD *)(v36 - 24) = v34;
          *(_QWORD *)(v36 - 16) = v43;
          *(_BYTE *)(v36 - 8) = v44;
          ++v35;
        }
        while (v9 != v35);
        ++v9;
        v33 += 48;
      }
      while (v9 != v32);
      v9 = v32;
    }
LABEL_46:
    if (v9 < v13)
      goto LABEL_124;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v46 = *((_QWORD *)v11 + 2);
    v45 = *((_QWORD *)v11 + 3);
    v12 = v46 + 1;
    v10 = v109;
    if (v46 >= v45 >> 1)
    {
      v94 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v45 > 1), v46 + 1, 1, v11);
      v10 = v109;
      v11 = v94;
    }
    *((_QWORD *)v11 + 2) = v12;
    v47 = v11 + 32;
    v48 = &v11[16 * v46 + 32];
    *(_QWORD *)v48 = v13;
    *((_QWORD *)v48 + 1) = v9;
    if (v46)
    {
      while (1)
      {
        v49 = v12 - 1;
        if (v12 >= 4)
        {
          v54 = &v47[16 * v12];
          v55 = *((_QWORD *)v54 - 8);
          v56 = *((_QWORD *)v54 - 7);
          v60 = __OFSUB__(v56, v55);
          v57 = v56 - v55;
          if (v60)
            goto LABEL_113;
          v59 = *((_QWORD *)v54 - 6);
          v58 = *((_QWORD *)v54 - 5);
          v60 = __OFSUB__(v58, v59);
          v52 = v58 - v59;
          v53 = v60;
          if (v60)
            goto LABEL_114;
          v61 = v12 - 2;
          v62 = &v47[16 * v12 - 32];
          v64 = *(_QWORD *)v62;
          v63 = *((_QWORD *)v62 + 1);
          v60 = __OFSUB__(v63, v64);
          v65 = v63 - v64;
          if (v60)
            goto LABEL_116;
          v60 = __OFADD__(v52, v65);
          v66 = v52 + v65;
          if (v60)
            goto LABEL_119;
          if (v66 >= v57)
          {
            v84 = &v47[16 * v49];
            v86 = *(_QWORD *)v84;
            v85 = *((_QWORD *)v84 + 1);
            v60 = __OFSUB__(v85, v86);
            v87 = v85 - v86;
            if (v60)
              goto LABEL_123;
            v77 = v52 < v87;
            goto LABEL_83;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v78 = *((_QWORD *)v11 + 4);
            v79 = *((_QWORD *)v11 + 5);
            v60 = __OFSUB__(v79, v78);
            v71 = v79 - v78;
            v72 = v60;
            goto LABEL_77;
          }
          v51 = *((_QWORD *)v11 + 4);
          v50 = *((_QWORD *)v11 + 5);
          v60 = __OFSUB__(v50, v51);
          v52 = v50 - v51;
          v53 = v60;
        }
        if ((v53 & 1) != 0)
          goto LABEL_115;
        v61 = v12 - 2;
        v67 = &v47[16 * v12 - 32];
        v69 = *(_QWORD *)v67;
        v68 = *((_QWORD *)v67 + 1);
        v70 = __OFSUB__(v68, v69);
        v71 = v68 - v69;
        v72 = v70;
        if (v70)
          goto LABEL_118;
        v73 = &v47[16 * v49];
        v75 = *(_QWORD *)v73;
        v74 = *((_QWORD *)v73 + 1);
        v60 = __OFSUB__(v74, v75);
        v76 = v74 - v75;
        if (v60)
          goto LABEL_121;
        if (__OFADD__(v71, v76))
          goto LABEL_122;
        if (v71 + v76 >= v52)
        {
          v77 = v52 < v76;
LABEL_83:
          if (v77)
            v49 = v61;
          goto LABEL_85;
        }
LABEL_77:
        if ((v72 & 1) != 0)
          goto LABEL_117;
        v80 = &v47[16 * v49];
        v82 = *(_QWORD *)v80;
        v81 = *((_QWORD *)v80 + 1);
        v60 = __OFSUB__(v81, v82);
        v83 = v81 - v82;
        if (v60)
          goto LABEL_120;
        if (v83 < v71)
          goto LABEL_15;
LABEL_85:
        v88 = v49 - 1;
        if (v49 - 1 >= v12)
        {
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
          goto LABEL_133;
        }
        if (!v10)
          goto LABEL_135;
        v89 = &v47[16 * v88];
        v90 = *(_QWORD *)v89;
        v91 = &v47[16 * v49];
        v92 = *((_QWORD *)v91 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v10 + 48 * *(_QWORD *)v89), (char *)(v10 + 48 * *(_QWORD *)v91), v10 + 48 * v92, __dst);
        if (v111)
          goto LABEL_93;
        if (v92 < v90)
          goto LABEL_110;
        if (v49 > *((_QWORD *)v11 + 2))
          goto LABEL_111;
        *(_QWORD *)v89 = v90;
        *(_QWORD *)&v47[16 * v88 + 8] = v92;
        v93 = *((_QWORD *)v11 + 2);
        if (v49 >= v93)
          goto LABEL_112;
        v12 = v93 - 1;
        memmove(&v47[16 * v49], v91 + 16, 16 * (v93 - 1 - v49));
        *((_QWORD *)v11 + 2) = v93 - 1;
        v10 = v109;
        if (v93 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v108;
    if (v9 >= v108)
    {
      v8 = v106;
      goto LABEL_96;
    }
  }
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  Swift::Int v20;
  _QWORD *v21;
  Swift::Int v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  Swift::Int v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  Swift::Int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  _OWORD *v45;
  BOOL v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  char v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  Swift::Int v115;
  Swift::Int v116;
  uint64_t v117;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_151;
    if (v3)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_159;
  v115 = result;
  v112 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_117:
      v103 = v11;
      v114 = v8;
      if (v12 >= 2)
      {
        v104 = *v112;
        do
        {
          v105 = v12 - 2;
          if (v12 < 2)
            goto LABEL_146;
          if (!v104)
            goto LABEL_158;
          v106 = v103;
          v107 = *(_QWORD *)&v103[16 * v105 + 32];
          v108 = *(_QWORD *)&v103[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v104 + 48 * v107), (char *)(v104 + 48 * *(_QWORD *)&v103[16 * v12 + 16]), v104 + 48 * v108, __dst);
          if (v1)
            break;
          if (v108 < v107)
            goto LABEL_147;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v106 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v106);
          if (v105 >= *((_QWORD *)v106 + 2))
            goto LABEL_148;
          v109 = &v106[16 * v105 + 32];
          *(_QWORD *)v109 = v107;
          *((_QWORD *)v109 + 1) = v108;
          v110 = *((_QWORD *)v106 + 2);
          if (v12 > v110)
            goto LABEL_149;
          memmove(&v106[16 * v12 + 16], &v106[16 * v12 + 32], 16 * (v110 - v12));
          v103 = v106;
          *((_QWORD *)v106 + 2) = v110 - 1;
          v12 = v110 - 1;
        }
        while (v110 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v114 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v114 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v114 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v113 = *a1 + 8;
  v111 = *a1 + 40;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v116 = v3;
  v117 = *a1;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      break;
    v14 = (uint64_t *)(v10 + 48 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 48 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_42;
      v19 = 0;
LABEL_25:
      v21 = (_QWORD *)(v113 + 48 * v20);
      do
      {
        v23 = (_QWORD *)(v10 + 48 * v9);
        if (*(v21 - 1) == *v23 && *v21 == v23[1])
        {
          if ((v19 & 1) != 0)
            goto LABEL_34;
        }
        else if (((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()) & 1) != 0)
        {
          goto LABEL_33;
        }
        v21 += 6;
        v22 = v20 + 1;
        v9 = v20;
        v20 = v22;
      }
      while (v22 < v3);
      v20 = v22;
      v9 = v22;
      if ((v19 & 1) == 0)
        break;
      goto LABEL_34;
    }
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v20 = v13 + 2;
    if (v13 + 2 < v3)
      goto LABEL_25;
LABEL_33:
    v9 = v20;
    if ((v19 & 1) == 0)
      break;
LABEL_34:
    if (v20 < v13)
      goto LABEL_154;
    if (v13 < v20)
    {
      v25 = 48 * v20;
      v26 = 48 * v13;
      v27 = v20;
      v28 = v13;
      do
      {
        if (v28 != --v27)
        {
          if (!v10)
            goto LABEL_157;
          v29 = (_OWORD *)(v10 + v26);
          v30 = *(_QWORD *)(v10 + v26);
          v31 = v10 + v25;
          v32 = *(_QWORD *)(v10 + v26 + 24);
          v33 = *(_BYTE *)(v10 + v26 + 32);
          v34 = *(_QWORD *)(v10 + v26 + 40);
          v35 = *(_OWORD *)(v10 + v26 + 8);
          v37 = *(_OWORD *)(v10 + v25 - 32);
          v36 = *(_OWORD *)(v10 + v25 - 16);
          *v29 = *(_OWORD *)(v10 + v25 - 48);
          v29[1] = v37;
          v29[2] = v36;
          *(_QWORD *)(v31 - 48) = v30;
          *(_OWORD *)(v31 - 40) = v35;
          *(_QWORD *)(v31 - 24) = v32;
          *(_BYTE *)(v31 - 16) = v33;
          *(_QWORD *)(v31 - 8) = v34;
        }
        ++v28;
        v25 -= 48;
        v26 += 48;
      }
      while (v28 < v27);
    }
LABEL_42:
    v9 = v20;
    if (v20 < v3)
      goto LABEL_46;
LABEL_66:
    if (v9 < v13)
      goto LABEL_145;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v53 = *((_QWORD *)v11 + 2);
    v52 = *((_QWORD *)v11 + 3);
    v12 = v53 + 1;
    if (v53 >= v52 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v52 > 1), v53 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v54 = v11 + 32;
    v55 = &v11[16 * v53 + 32];
    *(_QWORD *)v55 = v13;
    *((_QWORD *)v55 + 1) = v9;
    if (v53)
    {
      v10 = v117;
      while (1)
      {
        v56 = v12 - 1;
        if (v12 >= 4)
        {
          v61 = &v54[16 * v12];
          v62 = *((_QWORD *)v61 - 8);
          v63 = *((_QWORD *)v61 - 7);
          v67 = __OFSUB__(v63, v62);
          v64 = v63 - v62;
          if (v67)
            goto LABEL_134;
          v66 = *((_QWORD *)v61 - 6);
          v65 = *((_QWORD *)v61 - 5);
          v67 = __OFSUB__(v65, v66);
          v59 = v65 - v66;
          v60 = v67;
          if (v67)
            goto LABEL_135;
          v68 = v12 - 2;
          v69 = &v54[16 * v12 - 32];
          v71 = *(_QWORD *)v69;
          v70 = *((_QWORD *)v69 + 1);
          v67 = __OFSUB__(v70, v71);
          v72 = v70 - v71;
          if (v67)
            goto LABEL_137;
          v67 = __OFADD__(v59, v72);
          v73 = v59 + v72;
          if (v67)
            goto LABEL_140;
          if (v73 >= v64)
          {
            v91 = &v54[16 * v56];
            v93 = *(_QWORD *)v91;
            v92 = *((_QWORD *)v91 + 1);
            v67 = __OFSUB__(v92, v93);
            v94 = v92 - v93;
            if (v67)
              goto LABEL_144;
            v84 = v59 < v94;
            goto LABEL_104;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v85 = *((_QWORD *)v11 + 4);
            v86 = *((_QWORD *)v11 + 5);
            v67 = __OFSUB__(v86, v85);
            v78 = v86 - v85;
            v79 = v67;
            goto LABEL_98;
          }
          v58 = *((_QWORD *)v11 + 4);
          v57 = *((_QWORD *)v11 + 5);
          v67 = __OFSUB__(v57, v58);
          v59 = v57 - v58;
          v60 = v67;
        }
        if ((v60 & 1) != 0)
          goto LABEL_136;
        v68 = v12 - 2;
        v74 = &v54[16 * v12 - 32];
        v76 = *(_QWORD *)v74;
        v75 = *((_QWORD *)v74 + 1);
        v77 = __OFSUB__(v75, v76);
        v78 = v75 - v76;
        v79 = v77;
        if (v77)
          goto LABEL_139;
        v80 = &v54[16 * v56];
        v82 = *(_QWORD *)v80;
        v81 = *((_QWORD *)v80 + 1);
        v67 = __OFSUB__(v81, v82);
        v83 = v81 - v82;
        if (v67)
          goto LABEL_142;
        if (__OFADD__(v78, v83))
          goto LABEL_143;
        if (v78 + v83 >= v59)
        {
          v84 = v59 < v83;
LABEL_104:
          if (v84)
            v56 = v68;
          goto LABEL_106;
        }
LABEL_98:
        if ((v79 & 1) != 0)
          goto LABEL_138;
        v87 = &v54[16 * v56];
        v89 = *(_QWORD *)v87;
        v88 = *((_QWORD *)v87 + 1);
        v67 = __OFSUB__(v88, v89);
        v90 = v88 - v89;
        if (v67)
          goto LABEL_141;
        if (v90 < v78)
          goto LABEL_15;
LABEL_106:
        v95 = v56 - 1;
        if (v56 - 1 >= v12)
        {
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
          goto LABEL_153;
        }
        if (!v10)
          goto LABEL_156;
        v96 = v11;
        v97 = v10;
        v98 = &v54[16 * v95];
        v99 = *(_QWORD *)v98;
        v100 = &v54[16 * v56];
        v101 = *((_QWORD *)v100 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v97 + 48 * *(_QWORD *)v98), (char *)(v97 + 48 * *(_QWORD *)v100), v97 + 48 * v101, __dst);
        if (v1)
          goto LABEL_114;
        if (v101 < v99)
          goto LABEL_131;
        if (v56 > *((_QWORD *)v96 + 2))
          goto LABEL_132;
        *(_QWORD *)v98 = v99;
        *(_QWORD *)&v54[16 * v95 + 8] = v101;
        v102 = *((_QWORD *)v96 + 2);
        if (v56 >= v102)
          goto LABEL_133;
        v11 = v96;
        v12 = v102 - 1;
        memmove(&v54[16 * v56], v100 + 16, 16 * (v102 - 1 - v56));
        *((_QWORD *)v96 + 2) = v102 - 1;
        v84 = v102 > 2;
        v10 = v117;
        if (!v84)
          goto LABEL_15;
      }
    }
    v12 = 1;
    v10 = v117;
LABEL_15:
    v3 = v116;
    if (v9 >= v116)
    {
      v8 = v114;
      goto LABEL_117;
    }
  }
  if (v9 >= v3)
    goto LABEL_66;
LABEL_46:
  if (__OFSUB__(v9, v13))
    goto LABEL_150;
  if (v9 - v13 >= v115)
    goto LABEL_66;
  if (__OFADD__(v13, v115))
    goto LABEL_152;
  if (v13 + v115 >= v3)
    v38 = v3;
  else
    v38 = v13 + v115;
  if (v38 >= v13)
  {
    if (v9 != v38)
    {
      v39 = v111 + 48 * v9;
      do
      {
        v40 = (uint64_t *)(v10 + 48 * v9);
        v41 = *v40;
        v42 = v40[1];
        v43 = v13;
        v44 = v39;
        do
        {
          v45 = (_OWORD *)(v44 - 88);
          v46 = v41 == *(_QWORD *)(v44 - 88) && v42 == *(_QWORD *)(v44 - 80);
          if (v46 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_155;
          v48 = *(_OWORD *)(v44 - 72);
          v47 = *(_OWORD *)(v44 - 56);
          *(_QWORD *)(v44 - 48) = *(_QWORD *)v44;
          v44 -= 48;
          v41 = *(_QWORD *)(v44 + 8);
          v49 = *(_QWORD *)(v44 + 32);
          v50 = *(_BYTE *)(v44 + 40);
          v51 = *(_OWORD *)(v44 + 16);
          v45[3] = *v45;
          v45[4] = v48;
          v45[5] = v47;
          *(_QWORD *)(v44 - 40) = v41;
          *(_OWORD *)(v44 - 32) = v51;
          *(_QWORD *)(v44 - 16) = v49;
          *(_BYTE *)(v44 - 8) = v50;
          v42 = v51;
          ++v43;
        }
        while (v9 != v43);
        ++v9;
        v39 += 48;
      }
      while (v9 != v38);
      v9 = v38;
    }
    goto LABEL_66;
  }
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  Swift::Int result;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v24;
  Swift::Int v25;
  Swift::Int v26;
  uint64_t *v27;
  uint64_t v28;
  Swift::Int v29;
  _QWORD *v30;
  uint64_t v31;
  Swift::Int v32;
  _QWORD *v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  char v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  Swift::Int v97;
  Swift::Int v98;
  uint64_t v99;
  char *__dst;
  uint64_t v101;

  v2 = v1;
  v4 = a1[1];
  result = _minimumMergeRunLength(_:)(v4);
  if (result >= v4)
  {
    if (v4 < 0)
      goto LABEL_150;
    if (v4)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1);
    return result;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_158;
  v7 = result;
  v95 = a1;
  if (v4 < 2)
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
    v101 = MEMORY[0x24BEE4AF8];
    __dst = (char *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_116:
      v87 = v10;
      if (v13 >= 2)
      {
        v88 = *v95;
        do
        {
          v89 = v13 - 2;
          if (v13 < 2)
            goto LABEL_145;
          if (!v88)
            goto LABEL_157;
          v90 = v87;
          v91 = *(_QWORD *)&v87[16 * v89 + 32];
          v92 = *(_QWORD *)&v87[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v88 + 8 * v91), (char *)(v88 + 8 * *(_QWORD *)&v87[16 * v13 + 16]), v88 + 8 * v92, __dst);
          if (v2)
            break;
          if (v92 < v91)
            goto LABEL_146;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v90 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v90);
          if (v89 >= *((_QWORD *)v90 + 2))
            goto LABEL_147;
          v93 = &v90[16 * v89 + 32];
          *(_QWORD *)v93 = v91;
          *((_QWORD *)v93 + 1) = v92;
          v94 = *((_QWORD *)v90 + 2);
          if (v13 > v94)
            goto LABEL_148;
          memmove(&v90[16 * v13 + 16], &v90[16 * v13 + 32], 16 * (v94 - v13));
          v87 = v90;
          *((_QWORD *)v90 + 2) = v94 - 1;
          v13 = v94 - 1;
        }
        while (v94 > 2);
      }
LABEL_113:
      swift_bridgeObjectRelease();
      *(_QWORD *)((v101 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v8 = v6 >> 1;
    type metadata accessor for MetalFunctionDefinitionNode();
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    __dst = (char *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    v101 = v9;
  }
  v11 = 0;
  v12 = *a1;
  v96 = v12 - 8;
  v97 = v7;
  v10 = (char *)MEMORY[0x24BEE4AF8];
  v98 = v4;
  v99 = v12;
  while (1)
  {
    v14 = v11++;
    if (v11 < v4)
    {
      v15 = *(_QWORD *)(v12 + 8 * v11);
      v16 = *(_QWORD *)(v12 + 8 * v14);
      if (*(_QWORD *)(v15 + 56) == *(_QWORD *)(v16 + 56) && *(_QWORD *)(v15 + 64) == *(_QWORD *)(v16 + 64))
      {
        v19 = v14 + 2;
        if (v14 + 2 >= v4)
          goto LABEL_43;
        v18 = 0;
        do
        {
LABEL_26:
          v21 = *(_QWORD *)(v12 + 8 * v19);
          v22 = *(_QWORD *)(v12 + 8 * v11);
          if (*(_QWORD *)(v21 + 56) == *(_QWORD *)(v22 + 56) && *(_QWORD *)(v21 + 64) == *(_QWORD *)(v22 + 64))
          {
            if ((v18 & 1) != 0)
              goto LABEL_35;
          }
          else if (((v18 ^ _stringCompareWithSmolCheck(_:_:expecting:)()) & 1) != 0)
          {
            goto LABEL_34;
          }
          v20 = v19 + 1;
          v11 = v19;
          v19 = v20;
        }
        while (v20 < v4);
        v19 = v20;
      }
      else
      {
        v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v19 = v14 + 2;
        if (v14 + 2 < v4)
          goto LABEL_26;
      }
LABEL_34:
      v11 = v19;
      if ((v18 & 1) != 0)
      {
LABEL_35:
        if (v19 < v14)
          goto LABEL_153;
        if (v14 < v19)
        {
          v24 = (uint64_t *)(v96 + 8 * v19);
          v25 = v19;
          v26 = v14;
          v27 = (uint64_t *)(v12 + 8 * v14);
          do
          {
            if (v26 != --v25)
            {
              if (!v12)
                goto LABEL_156;
              v28 = *v27;
              *v27 = *v24;
              *v24 = v28;
            }
            ++v26;
            --v24;
            ++v27;
          }
          while (v26 < v25);
        }
LABEL_43:
        v11 = v19;
      }
    }
    if (v11 < v4)
    {
      if (__OFSUB__(v11, v14))
        goto LABEL_149;
      if (v11 - v14 < v97)
        break;
    }
LABEL_65:
    if (v11 < v14)
      goto LABEL_144;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v37 = *((_QWORD *)v10 + 2);
    v36 = *((_QWORD *)v10 + 3);
    v13 = v37 + 1;
    if (v37 >= v36 >> 1)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v37 + 1, 1, v10);
    *((_QWORD *)v10 + 2) = v13;
    v38 = v10 + 32;
    v39 = &v10[16 * v37 + 32];
    *(_QWORD *)v39 = v14;
    *((_QWORD *)v39 + 1) = v11;
    if (v37)
    {
      v12 = v99;
      while (1)
      {
        v40 = v13 - 1;
        if (v13 >= 4)
        {
          v45 = &v38[16 * v13];
          v46 = *((_QWORD *)v45 - 8);
          v47 = *((_QWORD *)v45 - 7);
          v51 = __OFSUB__(v47, v46);
          v48 = v47 - v46;
          if (v51)
            goto LABEL_133;
          v50 = *((_QWORD *)v45 - 6);
          v49 = *((_QWORD *)v45 - 5);
          v51 = __OFSUB__(v49, v50);
          v43 = v49 - v50;
          v44 = v51;
          if (v51)
            goto LABEL_134;
          v52 = v13 - 2;
          v53 = &v38[16 * v13 - 32];
          v55 = *(_QWORD *)v53;
          v54 = *((_QWORD *)v53 + 1);
          v51 = __OFSUB__(v54, v55);
          v56 = v54 - v55;
          if (v51)
            goto LABEL_136;
          v51 = __OFADD__(v43, v56);
          v57 = v43 + v56;
          if (v51)
            goto LABEL_139;
          if (v57 >= v48)
          {
            v75 = &v38[16 * v40];
            v77 = *(_QWORD *)v75;
            v76 = *((_QWORD *)v75 + 1);
            v51 = __OFSUB__(v76, v77);
            v78 = v76 - v77;
            if (v51)
              goto LABEL_143;
            v68 = v43 < v78;
            goto LABEL_103;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v69 = *((_QWORD *)v10 + 4);
            v70 = *((_QWORD *)v10 + 5);
            v51 = __OFSUB__(v70, v69);
            v62 = v70 - v69;
            v63 = v51;
            goto LABEL_97;
          }
          v42 = *((_QWORD *)v10 + 4);
          v41 = *((_QWORD *)v10 + 5);
          v51 = __OFSUB__(v41, v42);
          v43 = v41 - v42;
          v44 = v51;
        }
        if ((v44 & 1) != 0)
          goto LABEL_135;
        v52 = v13 - 2;
        v58 = &v38[16 * v13 - 32];
        v60 = *(_QWORD *)v58;
        v59 = *((_QWORD *)v58 + 1);
        v61 = __OFSUB__(v59, v60);
        v62 = v59 - v60;
        v63 = v61;
        if (v61)
          goto LABEL_138;
        v64 = &v38[16 * v40];
        v66 = *(_QWORD *)v64;
        v65 = *((_QWORD *)v64 + 1);
        v51 = __OFSUB__(v65, v66);
        v67 = v65 - v66;
        if (v51)
          goto LABEL_141;
        if (__OFADD__(v62, v67))
          goto LABEL_142;
        if (v62 + v67 >= v43)
        {
          v68 = v43 < v67;
LABEL_103:
          if (v68)
            v40 = v52;
          goto LABEL_105;
        }
LABEL_97:
        if ((v63 & 1) != 0)
          goto LABEL_137;
        v71 = &v38[16 * v40];
        v73 = *(_QWORD *)v71;
        v72 = *((_QWORD *)v71 + 1);
        v51 = __OFSUB__(v72, v73);
        v74 = v72 - v73;
        if (v51)
          goto LABEL_140;
        if (v74 < v62)
          goto LABEL_14;
LABEL_105:
        v79 = v40 - 1;
        if (v40 - 1 >= v13)
        {
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
          goto LABEL_152;
        }
        if (!v12)
          goto LABEL_155;
        v80 = v10;
        v81 = v12;
        v82 = &v38[16 * v79];
        v83 = *(_QWORD *)v82;
        v84 = &v38[16 * v40];
        v85 = *((_QWORD *)v84 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v81 + 8 * *(_QWORD *)v82), (char *)(v81 + 8 * *(_QWORD *)v84), v81 + 8 * v85, __dst);
        if (v1)
          goto LABEL_113;
        if (v85 < v83)
          goto LABEL_130;
        if (v40 > *((_QWORD *)v80 + 2))
          goto LABEL_131;
        *(_QWORD *)v82 = v83;
        *(_QWORD *)&v38[16 * v79 + 8] = v85;
        v86 = *((_QWORD *)v80 + 2);
        if (v40 >= v86)
          goto LABEL_132;
        v10 = v80;
        v13 = v86 - 1;
        memmove(&v38[16 * v40], v84 + 16, 16 * (v86 - 1 - v40));
        *((_QWORD *)v80 + 2) = v86 - 1;
        v68 = v86 > 2;
        v12 = v99;
        if (!v68)
          goto LABEL_14;
      }
    }
    v13 = 1;
    v12 = v99;
LABEL_14:
    v4 = v98;
    if (v11 >= v98)
    {
      v2 = v1;
      goto LABEL_116;
    }
  }
  if (__OFADD__(v14, v97))
    goto LABEL_151;
  if (v14 + v97 >= v4)
    v29 = v4;
  else
    v29 = v14 + v97;
  if (v29 >= v14)
  {
    if (v11 != v29)
    {
      v30 = (_QWORD *)(v96 + 8 * v11);
      do
      {
        v31 = *(_QWORD *)(v12 + 8 * v11);
        v32 = v14;
        v33 = v30;
        do
        {
          v34 = *(_QWORD *)(v31 + 56) == *(_QWORD *)(*v33 + 56) && *(_QWORD *)(v31 + 64) == *(_QWORD *)(*v33 + 64);
          if (v34 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            break;
          if (!v12)
            goto LABEL_154;
          v35 = *v33;
          v31 = v33[1];
          *v33 = v31;
          v33[1] = v35;
          --v33;
          ++v32;
        }
        while (v11 != v32);
        ++v11;
        ++v30;
      }
      while (v11 != v29);
      v11 = v29;
    }
    goto LABEL_65;
  }
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 48 * a3 + 40;
LABEL_5:
    v6 = *(_QWORD *)(v4 + 48 * a3 + 16);
    v7 = result;
    v8 = v5;
    while (1)
    {
      if (*(_DWORD *)(*(_QWORD *)(v8 - 72) + 60) >= *(_DWORD *)(v6 + 60))
      {
LABEL_4:
        ++a3;
        v5 += 48;
        if (a3 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v4)
        break;
      v9 = (_OWORD *)(v8 - 40);
      v10 = (_OWORD *)(v8 - 88);
      v12 = *(_OWORD *)(v8 - 72);
      v11 = *(_OWORD *)(v8 - 56);
      *(_QWORD *)(v8 - 48) = *(_QWORD *)v8;
      v8 -= 48;
      v13 = *(_QWORD *)(v8 + 8);
      v14 = *(_QWORD *)(v8 + 16);
      v15 = *(_QWORD *)(v8 + 32);
      v16 = *(_BYTE *)(v8 + 40);
      *v9 = *v10;
      v9[1] = v12;
      v9[2] = v11;
      *(_QWORD *)(v8 - 40) = v13;
      *(_QWORD *)(v8 - 32) = v14;
      *(_QWORD *)(v8 - 24) = v6;
      *(_QWORD *)(v8 - 16) = v15;
      *(_BYTE *)(v8 - 8) = v16;
      if (a3 == ++v7)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  BOOL v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  __int128 v19;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 48 * a3 + 40;
LABEL_5:
    v9 = (uint64_t *)(v7 + 48 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = v8;
    while (1)
    {
      v13 = (_OWORD *)(v12 - 88);
      v14 = result == *(_QWORD *)(v12 - 88) && v10 == *(_QWORD *)(v12 - 80);
      if (v14 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 48;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      v16 = *(_OWORD *)(v12 - 72);
      v15 = *(_OWORD *)(v12 - 56);
      *(_QWORD *)(v12 - 48) = *(_QWORD *)v12;
      v12 -= 48;
      result = *(_QWORD *)(v12 + 8);
      v17 = *(_QWORD *)(v12 + 32);
      v18 = *(_BYTE *)(v12 + 40);
      v19 = *(_OWORD *)(v12 + 16);
      v13[3] = *v13;
      v13[4] = v16;
      v13[5] = v15;
      *(_QWORD *)(v12 - 40) = result;
      *(_OWORD *)(v12 - 32) = v19;
      *(_QWORD *)(v12 - 16) = v17;
      *(_BYTE *)(v12 - 8) = v18;
      v10 = v19;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 8 * a3 - 8;
LABEL_5:
    v9 = *(_QWORD *)(v7 + 8 * v4);
    v10 = v6;
    v11 = (_QWORD *)v8;
    while (1)
    {
      result = *(_QWORD *)(v9 + 56);
      v12 = result == *(_QWORD *)(*v11 + 56) && *(_QWORD *)(v9 + 64) == *(_QWORD *)(*v11 + 64);
      if (v12 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 8;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      v13 = *v11;
      v9 = v11[1];
      *v11 = v9;
      v11[1] = v13;
      --v11;
      if (v4 == ++v10)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t result;
  char *v27;
  const void *v28;
  char *v29;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 48;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 48;
  v29 = __src;
  v28 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -47)
    {
      if (__dst != a2 || &a2[48 * v11] <= __dst)
        memmove(__dst, a2, 48 * v11);
      v18 = &v4[48 * v11];
      v27 = v18;
      v29 = v6;
      if (v7 < v6 && v10 >= 48)
      {
        v19 = (char *)(a3 - 48);
        do
        {
          v20 = v19 + 48;
          if (*(_DWORD *)(*((_QWORD *)v6 - 4) + 60) >= *(_DWORD *)(*((_QWORD *)v18 - 4) + 60))
          {
            v27 = v18 - 48;
            if (v20 < v18 || v19 >= v18 || v20 != v18)
            {
              v24 = *((_OWORD *)v18 - 3);
              v25 = *((_OWORD *)v18 - 1);
              *((_OWORD *)v19 + 1) = *((_OWORD *)v18 - 2);
              *((_OWORD *)v19 + 2) = v25;
              *(_OWORD *)v19 = v24;
            }
            v21 = v6;
            v18 -= 48;
            if (v6 <= v7)
              break;
          }
          else
          {
            v21 = v6 - 48;
            if (v20 != v6 || v19 >= v6)
            {
              v22 = *(_OWORD *)v21;
              v23 = *((_OWORD *)v6 - 1);
              *((_OWORD *)v19 + 1) = *((_OWORD *)v6 - 2);
              *((_OWORD *)v19 + 2) = v23;
              *(_OWORD *)v19 = v22;
            }
            v29 = v6 - 48;
            if (v21 <= v7)
              break;
          }
          v19 -= 48;
          v6 = v21;
        }
        while (v18 > v4);
      }
LABEL_40:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v29, &v28, &v27);
      return 1;
    }
  }
  else if (v8 >= -47)
  {
    if (__dst != __src || &__src[48 * v9] <= __dst)
      memmove(__dst, __src, 48 * v9);
    v12 = &v4[48 * v9];
    v27 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 48)
    {
      v13 = v4;
      while (1)
      {
        if (*(_DWORD *)(*((_QWORD *)v13 + 2) + 60) >= *(_DWORD *)(*((_QWORD *)v6 + 2) + 60))
        {
          v4 = v13 + 48;
          v15 = v13;
          v14 = v6;
          if (v7 == v13)
          {
            v13 += 48;
            if (v7 < v4)
              goto LABEL_18;
          }
          else
          {
            v13 += 48;
          }
        }
        else
        {
          v14 = v6 + 48;
          v15 = v6;
          if (v7 == v6 && v7 < v14)
            goto LABEL_18;
        }
        v16 = *(_OWORD *)v15;
        v17 = *((_OWORD *)v15 + 2);
        *((_OWORD *)v7 + 1) = *((_OWORD *)v15 + 1);
        *((_OWORD *)v7 + 2) = v17;
        *(_OWORD *)v7 = v16;
LABEL_18:
        v7 += 48;
        if (v13 < v12)
        {
          v6 = v14;
          if ((unint64_t)v14 < a3)
            continue;
        }
        v28 = v4;
        v29 = v7;
        goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t result;
  char *v31;
  char *v32;
  char *v33;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 48;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 48;
  v33 = __src;
  v32 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -47)
    {
      if (__dst != a2 || &a2[48 * v11] <= __dst)
        memmove(__dst, a2, 48 * v11);
      v19 = &v4[48 * v11];
      v31 = v19;
      v33 = v6;
      if (v7 < v6 && v10 >= 48)
      {
        v20 = (char *)(a3 - 48);
        v21 = v6;
        while (1)
        {
          v22 = v20 + 48;
          v23 = *((_QWORD *)v21 - 6);
          v24 = *((_QWORD *)v21 - 5);
          v21 -= 48;
          v25 = *((_QWORD *)v19 - 6) == v23 && *((_QWORD *)v19 - 5) == v24;
          if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            v31 = v19 - 48;
            if (v22 < v19 || v20 >= v19 || v22 != v19)
            {
              v28 = *((_OWORD *)v19 - 3);
              v29 = *((_OWORD *)v19 - 1);
              *((_OWORD *)v20 + 1) = *((_OWORD *)v19 - 2);
              *((_OWORD *)v20 + 2) = v29;
              *(_OWORD *)v20 = v28;
            }
            v21 = v6;
            v19 -= 48;
            if (v6 <= v7)
              goto LABEL_46;
          }
          else
          {
            if (v22 != v6 || v20 >= v6)
            {
              v26 = *(_OWORD *)v21;
              v27 = *((_OWORD *)v21 + 2);
              *((_OWORD *)v20 + 1) = *((_OWORD *)v21 + 1);
              *((_OWORD *)v20 + 2) = v27;
              *(_OWORD *)v20 = v26;
            }
            v33 = v21;
            if (v21 <= v7)
              goto LABEL_46;
          }
          v20 -= 48;
          v6 = v21;
          if (v19 <= v4)
            goto LABEL_46;
        }
      }
      goto LABEL_46;
    }
  }
  else if (v8 >= -47)
  {
    if (__dst != __src || &__src[48 * v9] <= __dst)
      memmove(__dst, __src, 48 * v9);
    v12 = &v4[48 * v9];
    v31 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 48)
    {
      do
      {
        v13 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4)
          {
            v17 = *(_OWORD *)v4;
            v18 = *((_OWORD *)v4 + 2);
            *((_OWORD *)v7 + 1) = *((_OWORD *)v4 + 1);
            *((_OWORD *)v7 + 2) = v18;
            *(_OWORD *)v7 = v17;
          }
          v4 += 48;
          v32 = v4;
          v14 = v6;
        }
        else
        {
          v14 = v6 + 48;
          if (v7 < v6 || v7 >= v14 || v7 != v6)
          {
            v15 = *(_OWORD *)v6;
            v16 = *((_OWORD *)v6 + 2);
            *((_OWORD *)v7 + 1) = *((_OWORD *)v6 + 1);
            *((_OWORD *)v7 + 2) = v16;
            *(_OWORD *)v7 = v15;
          }
        }
        v7 += 48;
        if (v4 >= v12)
          break;
        v6 = v14;
      }
      while ((unint64_t)v14 < a3);
      v33 = v7;
    }
LABEL_46:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v33, (const void **)&v32, &v31);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t result;
  char *v26;
  const void *v27;
  char *v28;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v28 = __src;
  v27 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v17 = &v4[8 * v13];
      v26 = v17;
      v28 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v18 = (char *)(a3 - 8);
        v19 = v6;
        while (1)
        {
          v20 = v18 + 8;
          v21 = *((_QWORD *)v17 - 1);
          v22 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          v23 = *(_QWORD *)(v22 + 64);
          v24 = *(_QWORD *)(v21 + 56) == *(_QWORD *)(v22 + 56) && *(_QWORD *)(v21 + 64) == v23;
          if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            v26 = v17 - 8;
            if (v20 < v17 || v18 >= v17 || v20 != v17)
              *(_QWORD *)v18 = *((_QWORD *)v17 - 1);
            v19 = v6;
            v17 -= 8;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v20 != v6 || v18 >= v6)
              *(_QWORD *)v18 = *(_QWORD *)v19;
            v28 = v19;
            if (v19 <= v7)
              goto LABEL_50;
          }
          v18 -= 8;
          v6 = v19;
          if (v17 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[8 * v10];
    v26 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        v15 = *(_QWORD *)(*(_QWORD *)v6 + 56) == *(_QWORD *)(*(_QWORD *)v4 + 56)
           && *(_QWORD *)(*(_QWORD *)v6 + 64) == *(_QWORD *)(*(_QWORD *)v4 + 64);
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4)
            *(_QWORD *)v7 = *(_QWORD *)v4;
          v4 += 8;
          v27 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 8;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            *(_QWORD *)v7 = *(_QWORD *)v6;
        }
        v7 += 8;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v28 = v7;
    }
LABEL_50:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v28, &v27, &v26);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -48)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 48;
    if (result != v3 || result >= &v3[48 * v6])
      return (char *)memmove(result, v3, 48 * v6);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

id specialized closure #1 in OrderedDictionary.merge<A>(_:uniquingKeysWith:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id v4;

  v2 = a1[1];
  v4 = (id)a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v4;
  swift_bridgeObjectRetain();
  return v4;
}

BOOL specialized static TopologicalSort.Element.== infix(_:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  _BOOL8 result;
  id v10;
  id v11;
  char v12;

  result = 0;
  if (a1 == a4 && a2 == a5)
  {
    result = (a3 | a6) == 0;
    if (a3)
    {
      if (a6)
      {
        type metadata accessor for SGNode();
        v10 = (id)a6;
        v11 = (id)a3;
        v12 = static NSObject.== infix(_:_:)();

        return v12 & 1;
      }
    }
  }
  return result;
}

uint64_t outlined init with take of WeakBox<SGEdge>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t (*a2)(id), uint64_t a3)
{
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v6 = a1;
  v18 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_18;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      v8 = 0;
      v16 = v6 & 0xFFFFFFFFFFFFFF8;
      v17 = v6 & 0xC000000000000001;
      v15 = v6;
      while (v17)
      {
        v9 = (id)MEMORY[0x24954B748](v8, v6);
LABEL_9:
        v10 = v9;
        v11 = v8 + 1;
        if (__OFADD__(v8, 1))
          goto LABEL_17;
        v12 = a3;
        v13 = a2(v9);
        if (v3)
        {
          swift_bridgeObjectRelease();

          swift_release();
          return v12;
        }
        if ((v13 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          v6 = v15;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {

        }
        ++v8;
        if (v11 == v7)
        {
          v12 = v18;
          goto LABEL_20;
        }
      }
      if (v8 < *(_QWORD *)(v16 + 16))
        break;
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      v7 = _CocoaArrayWrapper.endIndex.getter();
      if (!v7)
        goto LABEL_19;
    }
    v9 = *(id *)(v6 + 8 * v8 + 32);
    goto LABEL_9;
  }
LABEL_19:
  v12 = MEMORY[0x24BEE4AF8];
LABEL_20:
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGEdgeCG_AHsAE_pTg504_s11d41Graph7SGGraphC4fromACs7Decoder_p_tKcfcAA6F10CAGKXEfU5_SDySSAF7SGInputCGSDySSAF8SGOutputCGTf1cn_nTf4ngg_n(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 >> 62)
    goto LABEL_16;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = MEMORY[0x24BEE4AF8];
    if (!v6)
      break;
    v15 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v6 < 0)
    {
      __break(1u);
      return result;
    }
    v8 = 0;
    while (v6 != v8)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v9 = (id)MEMORY[0x24954B748](v8, a1);
      else
        v9 = *(id *)(a1 + 8 * v8 + 32);
      v10 = v9;
      v13 = v9;
      closure #7 in SGGraph.init(from:)((uint64_t *)&v13, a2, a3, &v12, &v14);

      if (v3)
        return swift_release();
      ++v8;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v6 == v8)
        return v15;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized SGGraph.edges(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = a1 + OBJC_IVAR___SGOutput_edges;
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 8);
  v7 = MEMORY[0x24BEE4AF8];
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = v2 + 32;
    swift_retain();
    swift_retain();
    do
    {
      if (MEMORY[0x24954C3E4](v4))
      {
        MEMORY[0x24954B1A8]();
        if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v4 += 8;
      --v3;
    }
    while (v3);
    v5 = v7;
  }
  else
  {
    swift_retain();
    swift_retain();
    v5 = MEMORY[0x24BEE4AF8];
  }
  swift_release();
  swift_release();
  return v5;
}

uint64_t specialized SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(void *a1, char a2, uint64_t a3, uint64_t a4, void (*a5)(char *, char *))
{
  uint64_t inited;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)@<X0>(uint64_t *@<X8>);
  uint64_t (*v23)();
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  id v36;
  void *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  id *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  id v63;
  BOOL v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  _QWORD *v69;
  id *v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void *v76;
  char *v77;
  unsigned __int8 v78;
  char *v79;
  uint64_t v80;
  void *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  id *v90;
  uint64_t v91;
  unsigned __int8 v92;
  char v93;
  uint64_t v94;
  char v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  void **v101;
  char *v102;
  uint64_t v103;
  void **v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  void **v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  void *v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  char *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  id v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  void *v158;
  char *v159;
  _QWORD *v162;
  unint64_t *v163;
  int64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  _QWORD *v175;
  unint64_t v176;
  _QWORD *v177;
  _QWORD *v178;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Context #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_245FBECD0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_245FBF370;
  *(_QWORD *)(v7 + 32) = a1;
  v170 = v7;
  specialized Array._endMutation()();
  v8 = a1;
  v9 = MEMORY[0x24BEE4AF8];
  v10 = specialized OrderedSet.init<A>(_:)(MEMORY[0x24BEE4AF8]);
  v12 = v11;
  v13 = specialized OrderedSet.init<A>(_:)(v9);
  v15 = v14;
  v16 = v9;
  v17 = (_QWORD *)inited;
  v18 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(v16);
  *(_QWORD *)(inited + 32) = v170;
  *(_QWORD *)(inited + 40) = v10;
  *(_QWORD *)(inited + 48) = v12;
  *(_QWORD *)(inited + 56) = v13;
  *(_QWORD *)(inited + 64) = v15;
  *(_QWORD *)(inited + 72) = v18;
  *(_QWORD *)(inited + 80) = v19;
  *(_QWORD *)(inited + 88) = v20;
  v163 = (unint64_t *)(inited + 16);
  v21 = *(_QWORD *)(inited + 16);
  if (!v21)
  {
    v23 = 0;
    v22 = 0;
    goto LABEL_175;
  }
  v22 = 0;
  v23 = 0;
  do
  {
    v24 = v21 - 1;
    v154 = v17 + 4;
    v25 = &v17[8 * v24 + 4];
    v26 = *v25;
    v27 = v25[1];
    v28 = (_QWORD *)v25[2];
    v29 = v25[3];
    v30 = (_QWORD *)v25[4];
    v31 = v25[5];
    v32 = (_QWORD *)v25[6];
    v33 = (_QWORD *)v25[7];
    v162 = v17;
    v17[2] = v24;
    v171 = v26;
    v172 = v27;
    v173 = v28;
    v174 = v29;
    v175 = v30;
    v176 = v31;
    v177 = v32;
    v178 = v33;
    if (!(v26 >> 62))
    {
      v34 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v34)
        goto LABEL_5;
LABEL_169:
      swift_bridgeObjectRelease();
      v17 = v162;
      goto LABEL_170;
    }
    swift_bridgeObjectRetain_n();
    v34 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v34)
      goto LABEL_169;
    while (1)
    {
LABEL_5:
      v35 = v34 - 1;
      if (__OFSUB__(v34, 1))
        goto LABEL_179;
      if ((v26 & 0xC000000000000001) != 0)
      {
        v36 = (id)MEMORY[0x24954B748](v35, v26);
      }
      else
      {
        if ((v35 & 0x8000000000000000) != 0)
          goto LABEL_180;
        if (v35 >= *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
LABEL_185:
          __break(1u);
LABEL_186:
          __break(1u);
LABEL_187:
          __break(1u);
LABEL_188:
          __break(1u);
LABEL_189:
          __break(1u);
LABEL_190:
          __break(1u);
LABEL_191:
          __break(1u);
        }
        v36 = *(id *)(v26 + 8 * v35 + 32);
      }
      v37 = v36;
      swift_bridgeObjectRelease();
      v38 = (_QWORD *)swift_allocObject();
      v38[2] = a3;
      v38[3] = a4;
      v38[4] = v37;
      v39 = v37;
      outlined consume of (@escaping @callee_guaranteed () -> (@owned IndexingIterator<[SGNode]>))?((uint64_t)v23);
      v40 = swift_allocObject();
      *(_QWORD *)(v40 + 16) = partial apply for implicit closure #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:);
      *(_QWORD *)(v40 + 24) = v38;
      outlined consume of (@escaping @callee_guaranteed () -> (@owned IndexingIterator<[SGNode]>))?((uint64_t)v22);
      v41 = (id *)(v177 + 4);
      v42 = v177[2];
      if (v176)
      {
        v43 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v39, (uint64_t)v41, v42, (uint64_t *)(v176 + 16), v176 + 32);
        if ((v44 & 1) == 0)
        {
          v45 = v43;
          goto LABEL_26;
        }
      }
      else if (v42)
      {
        if (*v41 == v39)
        {
          v45 = 0;
          goto LABEL_26;
        }
        if (v42 != 1)
        {
          if ((char *)v177[5] == v39)
          {
            v45 = 1;
            goto LABEL_26;
          }
          if (v42 != 2)
          {
            if ((char *)v177[6] == v39)
            {
              v45 = 2;
              goto LABEL_26;
            }
            if (v42 != 3)
            {
              if ((char *)v177[7] == v39)
              {
                v45 = 3;
                goto LABEL_26;
              }
              v60 = 0;
              while (v42 - 4 != v60)
              {
                v61 = (char *)v177[v60++ + 8];
                if (v61 == v39)
                {
                  v45 = v60 + 3;
                  goto LABEL_26;
                }
              }
            }
          }
        }
        v42 = 0;
      }
      v46 = specialized OrderedSet._appendNew(_:in:)((uint64_t)v39, v42);
      v47 = v177[2];
      v48 = (*(uint64_t (**)(unint64_t))(v40 + 16))(v46);
      v50 = v49;
      v51 = v178;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v178[2] + 1, 1);
        v51 = v178;
      }
      v53 = v51[2];
      v52 = v51[3];
      if (v53 >= v52 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1);
        v51 = v178;
      }
      v45 = v47 - 1;
      v51[2] = v53 + 1;
      v54 = &v51[2 * v53];
      v54[4] = v48;
      v54[5] = v50;
LABEL_26:
      v55 = v178;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v55 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v178);
      v56 = &v55[2 * v45];
      v57 = v56[4];
      v58 = v56[5];
      if (v57 >> 62)
      {
        swift_bridgeObjectRetain();
        v62 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v58 == v62)
        {
LABEL_30:
          v59 = 0;
          goto LABEL_47;
        }
      }
      else if (v58 == *(_QWORD *)((v57 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_30;
      }
      if ((v57 & 0xC000000000000001) != 0)
      {
        v63 = (id)MEMORY[0x24954B748](v58, v57);
      }
      else
      {
        if ((v58 & 0x8000000000000000) != 0)
          goto LABEL_182;
        if (v58 >= *(_QWORD *)((v57 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_183;
        v63 = *(id *)(v57 + 8 * v58 + 32);
      }
      v59 = v63;
      v64 = __OFADD__(v58++, 1);
      if (v64)
        goto LABEL_184;
LABEL_47:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v55 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v55);
      v65 = &v55[2 * v45];
      v65[4] = v57;
      v65[5] = v58;
      v178 = v55;
      if (v59)
      {
        if (v171 >> 62)
        {
          swift_bridgeObjectRetain_n();
          v66 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v66)
            goto LABEL_52;
        }
        else
        {
          v66 = *(_QWORD *)((v171 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n();
          if (v66)
          {
LABEL_52:
            if ((v171 & 0xC000000000000001) == 0)
            {
              if (*(void **)(v171 + 32) == v59)
                goto LABEL_172;
              goto LABEL_54;
            }
            v112 = MEMORY[0x24954B748](0, v171);
            swift_unknownObjectRelease();
            if ((void *)v112 != v59)
            {
LABEL_54:
              if (v66 != 1)
              {
                v73 = 1;
                while (1)
                {
                  if ((v171 & 0xC000000000000001) != 0)
                  {
                    v74 = MEMORY[0x24954B748](v73, v171);
                    v64 = __OFADD__(v73++, 1);
                    if (v64)
                    {
                      __break(1u);
LABEL_178:
                      __break(1u);
LABEL_179:
                      __break(1u);
LABEL_180:
                      __break(1u);
                      goto LABEL_181;
                    }
                    v75 = (void *)v74;
                    swift_unknownObjectRelease();
                    if (v75 == v59)
                      goto LABEL_172;
                  }
                  else
                  {
                    if (__OFADD__(v73, 1))
                      goto LABEL_178;
                    v76 = *(void **)(v171 + 32 + 8 * v73++);
                    if (v76 == v59)
                      goto LABEL_172;
                  }
                  if (v73 == v66)
                    goto LABEL_55;
                }
              }
              goto LABEL_55;
            }
LABEL_172:
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            lazy protocol witness table accessor for type APIError and conformance APIError();
            swift_allocError();
            *(_OWORD *)v141 = xmmword_245FC3900;
            *(_BYTE *)(v141 + 16) = 21;
            swift_willThrow();

            swift_release();
            swift_release();
LABEL_173:
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            return swift_release();
          }
        }
LABEL_55:
        swift_bridgeObjectRelease_n();
        v67 = v59;
        MEMORY[0x24954B1A8]();
        if (*(_QWORD *)((v171 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v171 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
LABEL_150:

        v39 = v67;
        goto LABEL_151;
      }
      v68 = v172;
      v69 = v173;
      v70 = (id *)(v173 + 4);
      v71 = v173[2];
      if (v172)
      {
        specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v39, (uint64_t)(v173 + 4), v71, (uint64_t *)(v172 + 16), v172 + 32);
        if ((v72 & 1) != 0)
          goto LABEL_77;
        goto LABEL_118;
      }
      if (!v71)
        goto LABEL_77;
      if (*v70 != v39)
      {
        if (v71 == 1)
          goto LABEL_77;
        if ((char *)v173[5] != v39)
        {
          if (v71 == 2)
            goto LABEL_77;
          if ((char *)v173[6] != v39)
          {
            if (v71 == 3)
              goto LABEL_77;
            if ((char *)v173[7] != v39)
              break;
          }
        }
      }
LABEL_118:
      if (v171 >> 62)
      {
        swift_bridgeObjectRetain();
        v113 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v113)
          goto LABEL_187;
      }
      else if (!*(_QWORD *)((v171 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_187;
      }
      if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
        || (v171 & 0x8000000000000000) != 0
        || (v171 & 0x4000000000000000) != 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew()(v171);
      }
      v106 = *(_QWORD *)((v171 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v106)
        goto LABEL_188;
      v107 = v106 - 1;
      v108 = *(void **)((v171 & 0xFFFFFFFFFFFFFF8) + 8 * v107 + 0x20);
      *(_QWORD *)((v171 & 0xFFFFFFFFFFFFFF8) + 0x10) = v107;
      specialized Array._endMutation()();

LABEL_151:
      v26 = v171;
      if (v171 >> 62)
      {
        swift_bridgeObjectRetain_n();
        v34 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v34 = *(_QWORD *)((v171 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
      }
      v23 = partial apply for implicit closure #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:);
      v22 = partial apply for thunk for @callee_guaranteed () -> (@owned IndexingIterator<[SGNode]>);
      if (!v34)
        goto LABEL_169;
    }
    v103 = v71 - 4;
    v104 = (void **)(v173 + 8);
    while (v103)
    {
      v105 = (char *)*v104++;
      --v103;
      if (v105 == v39)
        goto LABEL_118;
    }
LABEL_77:
    if ((a2 & 1) == 0
      || (v77 = &v39[OBJC_IVAR___SGNode_data], v78 = v39[OBJC_IVAR___SGNode_data + 80], (v78 & 0xC0) != 0x40))
    {
LABEL_81:
      v94 = v173[2];
      if (v172)
      {
        specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v39, (uint64_t)(v173 + 4), v94, (uint64_t *)(v172 + 16), v172 + 32);
        if ((v95 & 1) == 0)
        {
LABEL_93:
          if (*v163)
          {
            v96 = v154[8 * *v163 - 8];
            if (v96 >> 62)
            {
              swift_bridgeObjectRetain();
              v97 = _CocoaArrayWrapper.endIndex.getter();
              if (v97)
                goto LABEL_96;
            }
            else
            {
              v97 = *(_QWORD *)((v96 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
              if (v97)
              {
LABEL_96:
                v98 = v97 - 1;
                if (__OFSUB__(v97, 1))
                  goto LABEL_189;
                if ((v96 & 0xC000000000000001) != 0)
                {
                  v99 = (char *)MEMORY[0x24954B748](v98, v96);
                }
                else
                {
                  if ((v98 & 0x8000000000000000) != 0)
                    goto LABEL_190;
                  if (v98 >= *(_QWORD *)((v96 & 0xFFFFFFFFFFFFF8) + 0x10))
                    goto LABEL_191;
                  v99 = (char *)*(id *)(v96 + 8 * v98 + 32);
                }
                v67 = v99;
                swift_bridgeObjectRelease();
                goto LABEL_141;
              }
            }
            swift_bridgeObjectRelease();
          }
          v67 = 0;
LABEL_141:
          a5(v39, v67);
          if (!v166)
          {
            if (v171 >> 62)
            {
              swift_bridgeObjectRetain();
              v117 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (!v117)
                goto LABEL_185;
            }
            else if (!*(_QWORD *)((v171 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              goto LABEL_185;
            }
            if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
              || (v171 & 0x8000000000000000) != 0
              || (v171 & 0x4000000000000000) != 0)
            {
              specialized _ArrayBuffer._consumeAndCreateNew()(v171);
            }
            v114 = *(_QWORD *)((v171 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (!v114)
              goto LABEL_186;
            v115 = v114 - 1;
            v116 = *(void **)((v171 & 0xFFFFFFFFFFFFFF8) + 8 * v115 + 0x20);
            *(_QWORD *)((v171 & 0xFFFFFFFFFFFFFF8) + 0x10) = v115;
            specialized Array._endMutation()();

            goto LABEL_150;
          }

          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_173;
        }
      }
      else if (v94)
      {
        if (*v70 == v39)
          goto LABEL_93;
        if (v94 != 1)
        {
          if ((char *)v173[5] == v39)
            goto LABEL_93;
          if (v94 != 2)
          {
            if ((char *)v173[6] == v39)
              goto LABEL_93;
            if (v94 != 3)
            {
              if ((char *)v173[7] == v39)
                goto LABEL_93;
              v109 = v94 - 4;
              v110 = (void **)(v173 + 8);
              while (v109)
              {
                v111 = (char *)*v110++;
                --v109;
                if (v111 == v39)
                  goto LABEL_93;
              }
            }
          }
        }
        v94 = 0;
      }
      specialized OrderedSet._appendNew(_:in:)((uint64_t)v39, v94);
      goto LABEL_93;
    }
    v79 = *(char **)v77;
    v80 = *((_QWORD *)v77 + 1);
    v82 = (void *)*((_QWORD *)v77 + 2);
    v81 = (void *)*((_QWORD *)v77 + 3);
    v83 = *((_QWORD *)v77 + 4);
    v84 = *((_QWORD *)v77 + 5);
    v85 = *((_QWORD *)v77 + 6);
    v86 = *((_QWORD *)v77 + 7);
    v87 = *((_QWORD *)v77 + 8);
    v88 = *((_QWORD *)v77 + 9);
    v89 = v175;
    v90 = (id *)(v175 + 4);
    v91 = v175[2];
    if (v174)
    {
      v92 = v39[OBJC_IVAR___SGNode_data + 80];
      v158 = (void *)*((_QWORD *)v77 + 2);
      v159 = *(char **)v77;
      v148 = *((_QWORD *)v77 + 9);
      v149 = *((_QWORD *)v77 + 8);
      v147 = *((_QWORD *)v77 + 7);
      v150 = *((_QWORD *)v77 + 6);
      v151 = *((_QWORD *)v77 + 5);
      v152 = *((_QWORD *)v77 + 4);
      v153 = (id)*((_QWORD *)v77 + 3);
      v157 = *((_QWORD *)v77 + 1);
      specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v39, (uint64_t)v90, v91, (uint64_t *)(v174 + 16), v174 + 32);
      if ((v93 & 1) != 0)
      {
        v143 = v159;
        v155 = v174;
        v119 = v174;
        v78 = v92;
        goto LABEL_161;
      }
      goto LABEL_81;
    }
    if (!v91)
      goto LABEL_159;
    if (*v90 == v39)
      goto LABEL_81;
    if (v91 == 1)
      goto LABEL_159;
    if ((char *)v175[5] == v39)
      goto LABEL_81;
    if (v91 == 2)
      goto LABEL_159;
    if ((char *)v175[6] == v39)
      goto LABEL_81;
    if (v91 == 3)
      goto LABEL_159;
    if ((char *)v175[7] == v39)
      goto LABEL_81;
    v100 = v91 - 4;
    v101 = (void **)(v175 + 8);
    while (v100)
    {
      v102 = (char *)*v101++;
      --v100;
      if (v102 == v39)
        goto LABEL_81;
    }
LABEL_159:
    v155 = v174;
    v157 = v80;
    v148 = v88;
    v149 = v87;
    v158 = v82;
    v153 = v81;
    v151 = v84;
    v152 = v83;
    v150 = v85;
    v118 = v79;
    v147 = v86;
    outlined copy of NodeData(v79, v80, v82, v81, v83, v84, v85, v86, v87, v88, v78);
    v119 = 0;
    v159 = v118;
    v143 = v118;
LABEL_161:
    specialized OrderedSet._find(_:)((uint64_t)v39, v119, v175);
    if ((v121 & 1) != 0)
    {
      specialized OrderedSet._appendNew(_:in:)((uint64_t)v39, v120);
      v68 = v172;
      v69 = v173;
      v89 = v175;
      v155 = v174;
    }
    v122 = *v163;
    v144 = v162[3];
    v164 = *v163 + 1;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v122 >= v144 >> 1)
      v162 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v144 > 1), v164, 1, v162);
    v162[2] = v164;
    v123 = &v162[8 * v122];
    v123[4] = v171;
    v123[5] = v68;
    v123[6] = v69;
    v123[7] = v155;
    v123[8] = v89;
    v123[9] = v176;
    v123[10] = v177;
    v123[11] = v55;
    v124 = swift_allocObject();
    *(_OWORD *)(v124 + 16) = xmmword_245FBF370;
    v125 = *(void **)&v143[OBJC_IVAR___SGGraph_resultsNode];
    *(_QWORD *)(v124 + 32) = v125;
    v169 = v124;
    specialized Array._endMutation()();
    v126 = v125;
    v127 = MEMORY[0x24BEE4AF8];
    v165 = specialized OrderedSet.init<A>(_:)(MEMORY[0x24BEE4AF8]);
    v156 = v128;
    v129 = specialized OrderedSet.init<A>(_:)(v127);
    v145 = v130;
    v146 = v129;
    v132 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(v127);
    v133 = v131;
    v135 = v134;
    v137 = v162[2];
    v136 = v162[3];
    if (v137 >= v136 >> 1)
    {
      v139 = v131;
      v140 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v136 > 1), v137 + 1, 1, v162);
      v133 = v139;
      v162 = v140;
    }
    v162[2] = v137 + 1;
    v17 = v162;
    v138 = &v162[8 * v137];
    v138[4] = v169;
    v138[5] = v165;
    v138[6] = v156;
    v138[7] = v146;
    v138[8] = v145;
    v138[9] = v132;
    v138[10] = v133;
    v138[11] = v135;
    outlined consume of NodeData(v159, v157, v158, v153, v152, v151, v150, v147, v149, v148, v78);

    v23 = partial apply for implicit closure #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:);
    v22 = partial apply for thunk for @callee_guaranteed () -> (@owned IndexingIterator<[SGNode]>);
LABEL_170:
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    v21 = v17[2];
    v163 = v17 + 2;
  }
  while (v21);
LABEL_175:
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> (@owned IndexingIterator<[SGNode]>))?((uint64_t)v23);
  return outlined consume of (@escaping @callee_guaranteed () -> (@owned IndexingIterator<[SGNode]>))?((uint64_t)v22);
}

uint64_t specialized SGGraph.connectedUpstreamSubgraph(rootedAt:)(void *a1)
{
  unint64_t v2;
  uint64_t v4;

  v2 = MEMORY[0x24BEE4AF8];
  v4 = specialized OrderedSet.init<A>(_:)(MEMORY[0x24BEE4AF8]);
  specialized OrderedSet.init<A>(_:)(v2);
  specialized SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(a1, 0, (uint64_t)default argument 1 of OSSignpostIntervalState.init(id:isOpen:), 0, (void (*)(char *, char *))partial apply for closure #1 in SGGraph.connectedUpstreamSubgraph(rootedAt:));
  return v4;
}

void partial apply for closure #1 in SGGraph.topologicalSort()(char *a1, void *a2)
{
  uint64_t v2;

  closure #1 in SGGraph.topologicalSort()(a1, a2, *(_QWORD ***)(v2 + 16));
}

double _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi9_(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 6;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0x200000000000000;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  return result;
}

unint64_t lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGInternalError and conformance SGInternalError;
  if (!lazy protocol witness table cache variable for type SGInternalError and conformance SGInternalError)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGInternalError, &type metadata for SGInternalError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGInternalError and conformance SGInternalError);
  }
  return result;
}

BOOL partial apply for closure #1 in SGGraph.surfaceNodeElement(ofType:)(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(unsigned __int8 *)(v1 + 16);
  v3 = (uint64_t *)(a1 + OBJC_IVAR___SGInput_type);
  swift_beginAccess();
  v4 = *v3;
  v5 = 53;
  if (v2)
    v5 = 54;
  return v4 == v5 || v4 == 12;
}

void partial apply for closure #2 in SGGraph.surfaceNodeElement(ofType:)(char *a1, void *a2)
{
  uint64_t v2;

  closure #2 in SGGraph.surfaceNodeElement(ofType:)(a1, a2, *(_BYTE *)(v2 + 16), *(_QWORD **)(v2 + 24), *(void ***)(v2 + 32));
}

uint64_t sub_245F63D74()
{
  return swift_deallocObject();
}

char *specialized static SGGraph.generateArgumentsNode(inputs:)(unint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  char *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  objc_class *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char **v29;
  objc_class *v30;
  uint64_t *v31;
  char **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  void *v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  objc_super v57;
  objc_super v58;
  _QWORD *v59;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v59 = (_QWORD *)MEMORY[0x24BEE4AF8];
    result = (char *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
    {
      __break(1u);
      goto LABEL_41;
    }
    v3 = v59;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      do
      {
        v6 = MEMORY[0x24954B748](v5, a1);
        v8 = *(_QWORD *)(v6 + OBJC_IVAR___SGInput_name);
        v7 = *(_QWORD *)(v6 + OBJC_IVAR___SGInput_name + 8);
        v9 = (uint64_t *)(v6 + OBJC_IVAR___SGInput_type);
        swift_beginAccess();
        v10 = *v9;
        swift_bridgeObjectRetain();
        swift_unknownObjectRelease();
        v59 = v3;
        v12 = v3[2];
        v11 = v3[3];
        if (v12 >= v11 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
          v3 = v59;
        }
        ++v5;
        v3[2] = v12 + 1;
        v13 = &v3[3 * v12];
        v13[4] = v8;
        v13[5] = v7;
        v13[6] = v10;
      }
      while (v2 != v5);
    }
    else
    {
      v14 = (_QWORD *)(a1 + 32);
      do
      {
        v15 = (uint64_t *)(*v14 + OBJC_IVAR___SGInput_name);
        v17 = *v15;
        v16 = v15[1];
        v18 = (uint64_t *)(*v14 + OBJC_IVAR___SGInput_type);
        swift_beginAccess();
        v19 = *v18;
        v59 = v3;
        v21 = v3[2];
        v20 = v3[3];
        swift_bridgeObjectRetain();
        if (v21 >= v20 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
          v3 = v59;
        }
        v3[2] = v21 + 1;
        v22 = &v3[3 * v21];
        v22[4] = v17;
        v22[5] = v16;
        v22[6] = v19;
        ++v14;
        --v2;
      }
      while (v2);
    }
  }
  v23 = (objc_class *)type metadata accessor for SGNode();
  v24 = (char *)objc_allocWithZone(v23);
  swift_unknownObjectWeakInit();
  v25 = &v24[OBJC_IVAR___SGNode_name];
  *(_QWORD *)v25 = 0x746E656D75677241;
  *((_QWORD *)v25 + 1) = 0xE900000000000073;
  v26 = v24;
  v27 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v26[OBJC_IVAR___SGNode_inputs] = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17BuiltInDefinitionV9InputSpecVG_AF7SGInputCs5NeverOTg504_s11d78Graph14recreateInputs33_C327379532F5DB2AB731A2524F70C7764from8nodeNameSayAA7k24CGAA8NodeDataO_SStFAgA17fgh2V9iJ6VXEfU_SSTf1cn_nTf4ng_n(MEMORY[0x24BEE4AF8], 0x746E656D75677241, 0xE900000000000073);
  v28 = v3[2];
  v29 = &selRef_materialFromGraph_configuration_error_;
  if (v28)
  {
    v55 = v26;
    v56 = v27;
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    v30 = (objc_class *)type metadata accessor for SGOutput();
    v54 = v3;
    v31 = v3 + 6;
    do
    {
      v32 = v29;
      v34 = *(v31 - 2);
      v33 = *(v31 - 1);
      v35 = *v31;
      v31 += 3;
      v36 = (char *)objc_allocWithZone(v30);
      v37 = &v36[OBJC_IVAR___SGOutput_attachment];
      *(_QWORD *)v37 = 0;
      *((_QWORD *)v37 + 1) = 0;
      v38 = &v36[OBJC_IVAR___SGOutput_edges];
      *(_QWORD *)v38 = 0;
      *((_QWORD *)v38 + 1) = MEMORY[0x24BEE4AF8];
      swift_unknownObjectWeakInit();
      v39 = &v36[OBJC_IVAR___SGOutput_name];
      *(_QWORD *)v39 = v34;
      *((_QWORD *)v39 + 1) = v33;
      *(_QWORD *)&v36[OBJC_IVAR___SGOutput_type] = v35;
      swift_beginAccess();
      *(_OWORD *)v37 = xmmword_245FC3910;
      swift_bridgeObjectRetain_n();
      v29 = v32;
      swift_bridgeObjectRelease();
      v58.receiver = v36;
      v58.super_class = v30;
      objc_msgSendSuper2(&v58, (SEL)v32 + 3528);
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v28;
    }
    while (v28);
    v40 = v56;
    v3 = v54;
    swift_bridgeObjectRelease();
    v26 = v55;
    v27 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v40 = v27;
  }
  *(_QWORD *)&v26[OBJC_IVAR___SGNode_outputs] = v40;
  v41 = &v26[OBJC_IVAR___SGNode_data];
  *(_OWORD *)v41 = xmmword_245FC3920;
  *((_QWORD *)v41 + 2) = v27;
  *((_QWORD *)v41 + 3) = v3;
  *((_OWORD *)v41 + 2) = xmmword_245FBFF10;
  *((_OWORD *)v41 + 3) = 0u;
  *((_OWORD *)v41 + 4) = 0u;
  v41[80] = 0;
  swift_bridgeObjectRetain();

  v57.receiver = v26;
  v57.super_class = v23;
  v42 = (char *)objc_msgSendSuper2(&v57, v29[20]);
  v43 = *(_QWORD *)&v42[OBJC_IVAR___SGNode_inputs];
  if (v43 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v48 = v42;
    result = (char *)_CocoaArrayWrapper.endIndex.getter();
    v44 = (uint64_t)result;
    if (!result)
      goto LABEL_30;
  }
  else
  {
    v44 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    result = v42;
    if (!v44)
      goto LABEL_30;
  }
  if (v44 < 1)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v45 = 0;
  do
  {
    if ((v43 & 0xC000000000000001) != 0)
      v46 = (id)MEMORY[0x24954B748](v45, v43);
    else
      v46 = *(id *)(v43 + 8 * v45 + 32);
    v47 = v46;
    ++v45;
    swift_beginAccess();
    swift_unknownObjectWeakAssign();

  }
  while (v44 != v45);
LABEL_30:
  swift_bridgeObjectRelease_n();
  v49 = *(_QWORD *)&v42[OBJC_IVAR___SGNode_outputs];
  if (!(v49 >> 62))
  {
    v50 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (char *)swift_bridgeObjectRetain_n();
    if (v50)
      goto LABEL_32;
LABEL_39:

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    return v42;
  }
  swift_bridgeObjectRetain_n();
  result = (char *)_CocoaArrayWrapper.endIndex.getter();
  v50 = (uint64_t)result;
  if (!result)
    goto LABEL_39;
LABEL_32:
  if (v50 >= 1)
  {
    v51 = 0;
    do
    {
      if ((v49 & 0xC000000000000001) != 0)
        v52 = (id)MEMORY[0x24954B748](v51, v49);
      else
        v52 = *(id *)(v49 + 8 * v51 + 32);
      v53 = v52;
      ++v51;
      swift_beginAccess();
      swift_unknownObjectWeakAssign();

    }
    while (v50 != v51);
    goto LABEL_39;
  }
LABEL_42:
  __break(1u);
  return result;
}

char *specialized static SGGraph.generateResultsNode(outputs:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  objc_class *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  objc_super v44;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v43 = MEMORY[0x24BEE4AF8];
    result = (char *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
    {
      __break(1u);
      goto LABEL_38;
    }
    v5 = v43;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v6 = 0;
      do
      {
        v7 = MEMORY[0x24954B748](v6, a1);
        v9 = *(_QWORD *)(v7 + OBJC_IVAR___SGOutput_name);
        v8 = *(_QWORD *)(v7 + OBJC_IVAR___SGOutput_name + 8);
        v10 = (uint64_t *)(v7 + OBJC_IVAR___SGOutput_type);
        swift_beginAccess();
        v11 = *v10;
        swift_bridgeObjectRetain();
        swift_unknownObjectRelease();
        v13 = *(_QWORD *)(v43 + 16);
        v12 = *(_QWORD *)(v43 + 24);
        if (v13 >= v12 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        ++v6;
        *(_QWORD *)(v43 + 16) = v13 + 1;
        v14 = v43 + 32 * v13;
        *(_QWORD *)(v14 + 32) = v9;
        *(_QWORD *)(v14 + 40) = v8;
        *(_QWORD *)(v14 + 48) = v11;
        *(_BYTE *)(v14 + 56) = 0;
      }
      while (v2 != v6);
    }
    else
    {
      v15 = (_QWORD *)(a1 + 32);
      do
      {
        v16 = (uint64_t *)(*v15 + OBJC_IVAR___SGOutput_name);
        v18 = *v16;
        v17 = v16[1];
        v19 = (uint64_t *)(*v15 + OBJC_IVAR___SGOutput_type);
        swift_beginAccess();
        v20 = *v19;
        v22 = *(_QWORD *)(v43 + 16);
        v21 = *(_QWORD *)(v43 + 24);
        swift_bridgeObjectRetain();
        if (v22 >= v21 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
        *(_QWORD *)(v43 + 16) = v22 + 1;
        v23 = v43 + 32 * v22;
        *(_QWORD *)(v23 + 32) = v18;
        *(_QWORD *)(v23 + 40) = v17;
        *(_QWORD *)(v23 + 48) = v20;
        *(_BYTE *)(v23 + 56) = 0;
        ++v15;
        --v2;
      }
      while (v2);
    }
    v3 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v5 = MEMORY[0x24BEE4AF8];
  }
  v24 = (objc_class *)type metadata accessor for SGNode();
  v25 = (char *)objc_allocWithZone(v24);
  swift_unknownObjectWeakInit();
  v26 = &v25[OBJC_IVAR___SGNode_name];
  *(_QWORD *)v26 = 0x746C75736552;
  *((_QWORD *)v26 + 1) = 0xE600000000000000;
  v27 = v25;
  v28 = swift_bridgeObjectRetain();
  v29 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17BuiltInDefinitionV9InputSpecVG_AF7SGInputCs5NeverOTg504_s11d78Graph14recreateInputs33_C327379532F5DB2AB731A2524F70C7764from8nodeNameSayAA7k24CGAA8NodeDataO_SStFAgA17fgh2V9iJ6VXEfU_SSTf1cn_nTf4ng_n(v28, 0x746C75736552, 0xE600000000000000);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v27[OBJC_IVAR___SGNode_inputs] = v29;
  *(_QWORD *)&v27[OBJC_IVAR___SGNode_outputs] = v3;
  v30 = &v27[OBJC_IVAR___SGNode_data];
  *(_OWORD *)v30 = xmmword_245FC3930;
  *((_QWORD *)v30 + 2) = v5;
  *((_QWORD *)v30 + 3) = v3;
  *((_OWORD *)v30 + 2) = xmmword_245FBFF10;
  *((_OWORD *)v30 + 3) = 0u;
  *((_OWORD *)v30 + 4) = 0u;
  v30[80] = 0;
  swift_bridgeObjectRetain();

  v44.receiver = v27;
  v44.super_class = v24;
  v31 = (char *)objc_msgSendSuper2(&v44, sel_init);
  v32 = *(_QWORD *)&v31[OBJC_IVAR___SGNode_inputs];
  if (v32 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v37 = v31;
    result = (char *)_CocoaArrayWrapper.endIndex.getter();
    v33 = (uint64_t)result;
    if (!result)
      goto LABEL_27;
  }
  else
  {
    v33 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    result = v31;
    if (!v33)
      goto LABEL_27;
  }
  if (v33 < 1)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v34 = 0;
  do
  {
    if ((v32 & 0xC000000000000001) != 0)
      v35 = (id)MEMORY[0x24954B748](v34, v32);
    else
      v35 = *(id *)(v32 + 8 * v34 + 32);
    v36 = v35;
    ++v34;
    swift_beginAccess();
    swift_unknownObjectWeakAssign();

  }
  while (v33 != v34);
LABEL_27:
  swift_bridgeObjectRelease_n();
  v38 = *(_QWORD *)&v31[OBJC_IVAR___SGNode_outputs];
  if (!(v38 >> 62))
  {
    v39 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (char *)swift_bridgeObjectRetain_n();
    if (v39)
      goto LABEL_29;
LABEL_36:

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    return v31;
  }
  swift_bridgeObjectRetain_n();
  result = (char *)_CocoaArrayWrapper.endIndex.getter();
  v39 = (uint64_t)result;
  if (!result)
    goto LABEL_36;
LABEL_29:
  if (v39 >= 1)
  {
    v40 = 0;
    do
    {
      if ((v38 & 0xC000000000000001) != 0)
        v41 = (id)MEMORY[0x24954B748](v40, v38);
      else
        v41 = *(id *)(v38 + 8 * v40 + 32);
      v42 = v41;
      ++v40;
      swift_beginAccess();
      swift_unknownObjectWeakAssign();

    }
    while (v39 != v40);
    goto LABEL_36;
  }
LABEL_39:
  __break(1u);
  return result;
}

unint64_t specialized SGGraph.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SGGraph.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGGraph.CodingKeys, &type metadata for SGGraph.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGGraph.CodingKeys, &type metadata for SGGraph.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGGraph.CodingKeys, &type metadata for SGGraph.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGGraph.CodingKeys, &type metadata for SGGraph.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [SGInput] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [SGInput] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SGInput] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SGInput]);
    v2 = lazy protocol witness table accessor for type SGOutput and conformance SGOutput(&lazy protocol witness table cache variable for type SGInput and conformance SGInput, 255, (uint64_t (*)(uint64_t))type metadata accessor for SGInput, (uint64_t)&protocol conformance descriptor for SGInput);
    result = MEMORY[0x24954C264](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SGInput] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [SGInput] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SGInput] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SGInput]);
    v2 = lazy protocol witness table accessor for type SGOutput and conformance SGOutput(&lazy protocol witness table cache variable for type SGInput and conformance SGInput, 255, (uint64_t (*)(uint64_t))type metadata accessor for SGInput, (uint64_t)&protocol conformance descriptor for SGInput);
    result = MEMORY[0x24954C264](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SGInput] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [SGOutput] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [SGOutput] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SGOutput] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SGOutput]);
    v2 = lazy protocol witness table accessor for type SGOutput and conformance SGOutput(&lazy protocol witness table cache variable for type SGOutput and conformance SGOutput, 255, (uint64_t (*)(uint64_t))type metadata accessor for SGOutput, (uint64_t)&protocol conformance descriptor for SGOutput);
    result = MEMORY[0x24954C264](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SGOutput] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [SGOutput] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SGOutput] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SGOutput]);
    v2 = lazy protocol witness table accessor for type SGOutput and conformance SGOutput(&lazy protocol witness table cache variable for type SGOutput and conformance SGOutput, 255, (uint64_t (*)(uint64_t))type metadata accessor for SGOutput, (uint64_t)&protocol conformance descriptor for SGOutput);
    result = MEMORY[0x24954C264](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SGOutput] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [SGNode] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [SGNode] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SGNode] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SGNode]);
    v2 = lazy protocol witness table accessor for type SGOutput and conformance SGOutput(&lazy protocol witness table cache variable for type SGNode and conformance SGNode, 255, (uint64_t (*)(uint64_t))type metadata accessor for SGNode, (uint64_t)&protocol conformance descriptor for SGNode);
    result = MEMORY[0x24954C264](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SGNode] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [SGNode] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SGNode] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SGNode]);
    v2 = lazy protocol witness table accessor for type SGOutput and conformance SGOutput(&lazy protocol witness table cache variable for type SGNode and conformance SGNode, 255, (uint64_t (*)(uint64_t))type metadata accessor for SGNode, (uint64_t)&protocol conformance descriptor for SGNode);
    result = MEMORY[0x24954C264](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SGNode] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [SGEdge] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [SGEdge] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SGEdge] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SGEdge]);
    v2 = lazy protocol witness table accessor for type SGOutput and conformance SGOutput(&lazy protocol witness table cache variable for type SGEdge and conformance SGEdge, 255, (uint64_t (*)(uint64_t))type metadata accessor for SGEdge, (uint64_t)&protocol conformance descriptor for SGEdge);
    result = MEMORY[0x24954C264](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SGEdge] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [SGEdge] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SGEdge] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SGEdge]);
    v2 = lazy protocol witness table accessor for type SGOutput and conformance SGOutput(&lazy protocol witness table cache variable for type SGEdge and conformance SGEdge, 255, (uint64_t (*)(uint64_t))type metadata accessor for SGEdge, (uint64_t)&protocol conformance descriptor for SGEdge);
    result = MEMORY[0x24954C264](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SGEdge] and conformance <A> [A]);
  }
  return result;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t result, char a2, _QWORD *a3, void (*a4)(void), void (*a5)(void))
{
  uint64_t v5;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  void **i;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _QWORD *v37;
  id v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  char v44;
  char v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  id v51;
  _QWORD *v52;

  v5 = *(_QWORD *)(result + 16);
  if (v5)
  {
    v9 = (_QWORD *)swift_bridgeObjectRetain();
    v10 = v9[4];
    v11 = v9[5];
    v52 = v9;
    v12 = (void *)v9[6];
    v13 = (_QWORD *)*a3;
    swift_bridgeObjectRetain();
    v51 = v12;
    v14 = v10;
    v16 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
    v17 = v13[2];
    v18 = (v15 & 1) == 0;
    if (__OFADD__(v17, v18))
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v19 = v15;
    if (v13[3] < v17 + v18)
    {
      a5();
      v20 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v11);
      if ((v19 & 1) != (v21 & 1))
      {
LABEL_27:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      v16 = v20;
      v22 = (_QWORD *)*a3;
      if ((v19 & 1) == 0)
        goto LABEL_12;
LABEL_9:
      v23 = *(id *)(v22[7] + 8 * v16);
      swift_bridgeObjectRelease();

      v24 = v22[7];
      *(_QWORD *)(v24 + 8 * v16) = v23;
      v25 = v5 - 1;
      if (v5 == 1)
        return swift_bridgeObjectRelease();
LABEL_16:
      for (i = (void **)(v52 + 9); ; i += 3)
      {
        v35 = (uint64_t)*(i - 2);
        v34 = (uint64_t)*(i - 1);
        v36 = *i;
        v37 = (_QWORD *)*a3;
        swift_bridgeObjectRetain();
        v38 = v36;
        v39 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v34);
        v41 = v37[2];
        v42 = (v40 & 1) == 0;
        v28 = __OFADD__(v41, v42);
        v43 = v41 + v42;
        if (v28)
          break;
        v44 = v40;
        if (v37[3] < v43)
        {
          ((void (*)(uint64_t, uint64_t))a5)(v43, 1);
          v39 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v34);
          if ((v44 & 1) != (v45 & 1))
            goto LABEL_27;
        }
        v46 = (_QWORD *)*a3;
        if ((v44 & 1) != 0)
        {
          v31 = 8 * v39;
          v32 = *(id *)(v46[7] + 8 * v39);
          swift_bridgeObjectRelease();

          v33 = v46[7];
          *(_QWORD *)(v33 + v31) = v32;
        }
        else
        {
          v46[(v39 >> 6) + 8] |= 1 << v39;
          v47 = (uint64_t *)(v46[6] + 16 * v39);
          *v47 = v35;
          v47[1] = v34;
          *(_QWORD *)(v46[7] + 8 * v39) = v38;
          v48 = v46[2];
          v28 = __OFADD__(v48, 1);
          v49 = v48 + 1;
          if (v28)
            goto LABEL_26;
          v46[2] = v49;
        }
        if (!--v25)
          return swift_bridgeObjectRelease();
      }
      goto LABEL_25;
    }
    if ((a2 & 1) != 0)
    {
      v22 = (_QWORD *)*a3;
      if ((v15 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      a4();
      v22 = (_QWORD *)*a3;
      if ((v19 & 1) != 0)
        goto LABEL_9;
    }
LABEL_12:
    v22[(v16 >> 6) + 8] |= 1 << v16;
    v26 = (uint64_t *)(v22[6] + 16 * v16);
    *v26 = v14;
    v26[1] = v11;
    *(_QWORD *)(v22[7] + 8 * v16) = v51;
    v27 = v22[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v22[2] = v29;
    v25 = v5 - 1;
    if (v5 == 1)
      return swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  return result;
}

uint64_t specialized static SGGraph.create(name:inputs:outputs:)(uint64_t a1, void *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  Swift::String v19;
  Swift::String v20;
  void *v21;
  void *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  os_log_type_t v26;
  id v27;
  id v28;
  NSObject *v29;
  uint8_t *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t *v41;
  BOOL v42;
  uint64_t v43;
  uint64_t j;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t *v48;
  BOOL v49;
  _BYTE *v50;
  _BYTE *v51;
  NSObject *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  os_signpost_id_t v60;
  void (*v61)(_BYTE *, uint64_t);
  id v62;
  _BYTE v63[4];
  int v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76[4];

  v8 = type metadata accessor for OSSignpostID();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = &v63[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v10);
  v14 = &v63[-v13];
  v15 = type metadata accessor for OSSignposter();
  MEMORY[0x24BDAC7A8](v15);
  v18 = &v63[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (!a2)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v22 = (void *)swift_allocError();
    v24 = xmmword_245FBF5D0;
LABEL_9:
    *(_OWORD *)v23 = v24;
    *(_BYTE *)(v23 + 16) = 1;
    swift_willThrow();
    goto LABEL_10;
  }
  if (!a3)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v22 = (void *)swift_allocError();
    v24 = xmmword_245FC3950;
    goto LABEL_9;
  }
  if (!a4)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v22 = (void *)swift_allocError();
    v24 = xmmword_245FC3940;
    goto LABEL_9;
  }
  v70 = v16;
  v71 = v18;
  v72 = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19._countAndFlagsBits = a1;
  v19._object = a2;
  v20._countAndFlagsBits = 1701667182;
  v20._object = (void *)0xE400000000000000;
  validate(_:named:)(v19, v20);
  if (!v21)
  {
    v66 = v15;
    if (a3 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v36 = result;
    }
    else
    {
      v36 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
    }
    v67 = v8;
    v68 = a1;
    v69 = v9;
    v65 = v12;
    if (v36)
    {
      if (v36 < 1)
      {
        __break(1u);
        goto LABEL_56;
      }
      for (i = 0; i != v36; ++i)
      {
        if ((a3 & 0xC000000000000001) != 0)
          v39 = (char *)MEMORY[0x24954B748](i, a3);
        else
          v39 = (char *)*(id *)(a3 + 8 * i + 32);
        v40 = v39;
        v41 = (uint64_t *)&v39[OBJC_IVAR___SGInput_type];
        swift_beginAccess();
        v38 = *v41;
        if (*v41 == 12)
        {
          v42 = *(_QWORD *)&v40[OBJC_IVAR___SGInput_name] == 0x65636166727573
             && *(_QWORD *)&v40[OBJC_IVAR___SGInput_name + 8] == 0xE700000000000000;
          if (v42 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            v38 = 53;
          else
            v38 = 12;
        }
        *v41 = v38;

      }
    }
    swift_bridgeObjectRelease();
    if (a4 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v43 = result;
      if (result)
      {
LABEL_35:
        if (v43 >= 1)
        {
          for (j = 0; j != v43; ++j)
          {
            if ((a4 & 0xC000000000000001) != 0)
              v46 = (char *)MEMORY[0x24954B748](j, a4);
            else
              v46 = (char *)*(id *)(a4 + 8 * j + 32);
            v47 = v46;
            v48 = (uint64_t *)&v46[OBJC_IVAR___SGOutput_type];
            swift_beginAccess();
            v45 = *v48;
            if (*v48 == 12)
            {
              v49 = *(_QWORD *)&v47[OBJC_IVAR___SGOutput_name] == 0x65636166727573
                 && *(_QWORD *)&v47[OBJC_IVAR___SGOutput_name + 8] == 0xE700000000000000;
              if (v49 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                v45 = 53;
              else
                v45 = 12;
            }
            *v48 = v45;

          }
          goto LABEL_51;
        }
LABEL_56:
        __break(1u);
        return result;
      }
    }
    else
    {
      v43 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v43)
        goto LABEL_35;
    }
LABEL_51:
    swift_bridgeObjectRelease();
    v50 = v71;
    OSSignposter.init(subsystem:category:)();
    swift_bridgeObjectRetain_n();
    v51 = v72;
    static OSSignpostID.exclusive.getter();
    v52 = OSSignposter.logHandle.getter();
    v53 = static os_signpost_type_t.event.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v54 = v67;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v69 + 16))(v65, v51, v67);
      v55 = swift_slowAlloc();
      v64 = v53;
      v56 = v55;
      v57 = swift_slowAlloc();
      *(_DWORD *)v56 = 141558275;
      v73 = 1752392040;
      v74 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v56 + 12) = 2081;
      swift_bridgeObjectRetain();
      v58 = v68;
      v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, (unint64_t)a2, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      v59 = v65;
      v60 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_245E46000, v52, (os_signpost_type_t)v64, v60, "graphInit", "%{private,mask.hash}s", (uint8_t *)v56, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v57, -1, -1);
      MEMORY[0x24954C33C](v56, -1, -1);

      v61 = *(void (**)(_BYTE *, uint64_t))(v69 + 8);
      v61(v72, v54);
      (*(void (**)(_BYTE *, uint64_t))(v70 + 8))(v71, v66);
      v61(v59, v54);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(_BYTE *, uint64_t))(v69 + 8))(v51, v67);
      (*(void (**)(_BYTE *, uint64_t))(v70 + 8))(v50, v66);
      v58 = v68;
    }
    v62 = objc_allocWithZone((Class)type metadata accessor for SGGraph());
    return SGGraph.init(name:inputs:outputs:)(v58, (unint64_t)a2, a3, a4);
  }
  v22 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  if (one-time initialization token for logger != -1)
    swift_once();
  v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)logger);
  v26 = static os_log_type_t.error.getter();
  v27 = v22;
  v28 = v22;
  v29 = Logger.logObject.getter();
  if (os_log_type_enabled(v29, v26))
  {
    v30 = (uint8_t *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v76[0] = v31;
    *(_DWORD *)v30 = 136315138;
    v75 = (uint64_t)v22;
    v32 = v22;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v33 = String.init<A>(describing:)();
    v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_245E46000, v29, v26, "%s", v30, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24954C33C](v31, -1, -1);
    MEMORY[0x24954C33C](v30, -1, -1);

  }
  else
  {

  }
  return 0;
}

void *specialized static SGGraph.create(data:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  uint8_t *v20;
  uint8_t *v21;
  os_signpost_id_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;

  v5 = type metadata accessor for OSSignpostID();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v29 - v10;
  v12 = type metadata accessor for OSSignposter();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 >> 60 == 15)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v17 = (void *)swift_allocError();
    *(_OWORD *)v18 = xmmword_245FBFF90;
    *(_BYTE *)(v18 + 16) = 1;
    swift_willThrow();
    type metadata accessor for SGError();
    v27 = v17;
    SGError.__allocating_init(_:)(v17);
    swift_willThrow();

  }
  else
  {
    v32 = v14;
    v33 = v2;
    v37 = a1;
    outlined copy of Data._Representation(a1, a2);
    OSSignposter.init(subsystem:category:)();
    static OSSignpostID.exclusive.getter();
    v19 = OSSignposter.logHandle.getter();
    v31 = static os_signpost_type_t.event.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
      v20 = (uint8_t *)swift_slowAlloc();
      v30 = a2;
      v21 = v20;
      *(_WORD *)v20 = 0;
      v22 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_245E46000, v19, (os_signpost_type_t)v31, v22, "archiveDecode", "", v21, 2u);
      MEMORY[0x24954C33C](v21, -1, -1);

      v23 = *(void (**)(char *, uint64_t))(v6 + 8);
      v23(v11, v5);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v32);
      v23(v9, v5);
      a2 = v30;
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v32);
    }
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    lazy protocol witness table accessor for type MaterialCodingContainer and conformance MaterialCodingContainer();
    v24 = v37;
    v25 = v33;
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    if (v25)
    {

      swift_release();
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      type metadata accessor for SGGraph();
      lazy protocol witness table accessor for type SGOutput and conformance SGOutput(&lazy protocol witness table cache variable for type SGGraph and conformance SGGraph, v26, (uint64_t (*)(uint64_t))type metadata accessor for SGGraph, (uint64_t)&protocol conformance descriptor for SGGraph);
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      outlined consume of Data?(v24, a2);
      swift_release();
      return (void *)v34;
    }
    else
    {
      outlined consume of Data?(v24, a2);
      swift_release();
      v17 = v35;

    }
  }
  return v17;
}

uint64_t type metadata accessor for SGGraph()
{
  return objc_opt_self();
}

uint64_t method lookup function for SGGraph()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SGGraph.__allocating_init(name:inputs:outputs:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of SGGraph.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t getEnumTagSinglePayload for SGGraph.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SGGraph.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_245F65E10 + 4 * byte_245FC3992[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_245F65E44 + 4 * byte_245FC398D[v4]))();
}

uint64_t sub_245F65E44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_245F65E4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x245F65E54);
  return result;
}

uint64_t sub_245F65E60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x245F65E68);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_245F65E6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_245F65E74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SGGraph.CodingKeys()
{
  return &type metadata for SGGraph.CodingKeys;
}

void destroy for TopologicalSort(id *a1)
{
  swift_bridgeObjectRelease();

}

_QWORD *initializeWithCopy for TopologicalSort(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  v5 = (void *)a2[3];
  a1[2] = v4;
  a1[3] = v5;
  swift_bridgeObjectRetain();
  v6 = v3;
  v7 = v4;
  v8 = v5;
  return a1;
}

_QWORD *assignWithCopy for TopologicalSort(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a2[1];
  v5 = (void *)a1[1];
  a1[1] = v4;
  v6 = v4;

  v7 = (void *)a2[2];
  v8 = (void *)a1[2];
  a1[2] = v7;
  v9 = v7;

  v10 = (void *)a1[3];
  v11 = (void *)a2[3];
  a1[3] = v11;
  v12 = v11;

  return a1;
}

uint64_t assignWithTake for TopologicalSort(uint64_t a1, _OWORD *a2)
{
  void *v4;
  void *v5;

  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];

  return a1;
}

uint64_t getEnumTagSinglePayload for TopologicalSort(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TopologicalSort(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TopologicalSort()
{
  return &type metadata for TopologicalSort;
}

_QWORD *initializeBufferWithCopyOfBuffer for TopologicalSort.Element(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = *(void **)(a2 + 16);
  a1[2] = v5;
  v6 = v3;
  v7 = v4;
  v8 = v5;
  return a1;
}

void destroy for TopologicalSort.Element(id *a1)
{

}

uint64_t assignWithCopy for TopologicalSort.Element(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  v10 = *(void **)(a1 + 16);
  v11 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  v12 = v11;

  return a1;
}

uint64_t assignWithTake for TopologicalSort.Element(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for TopologicalSort.Element()
{
  return &type metadata for TopologicalSort.Element;
}

uint64_t partial apply for closure #1 in SGGraph.connectedUpstreamSubgraph(rootedAt:)(char *a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in SGGraph.connectedUpstreamSubgraph(rootedAt:)(a1, a2, *(uint64_t **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_245F661CC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)()
{
  uint64_t v0;

  return implicit closure #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(*(uint64_t (**)(id))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t outlined consume of (@escaping @callee_guaranteed () -> (@owned IndexingIterator<[SGNode]>))?(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_245F6620C()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed () -> (@owned IndexingIterator<[SGNode]>)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t destroy for Context #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for Context #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for Context #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  a1[7] = a2[7];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_OWORD *assignWithTake for Context #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_release();
  swift_release();
  a1[1] = a2[1];
  swift_release();
  swift_release();
  a1[2] = a2[2];
  swift_release();
  swift_release();
  a1[3] = a2[3];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Context #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Context #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Context #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)()
{
  return &type metadata for Context #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:);
}

uint64_t OrderedDictionary.values.getter(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t OrderedDictionary.index(forKey:)()
{
  return OrderedSet._find(_:)();
}

uint64_t OrderedDictionary.count.getter()
{
  return ContiguousArray.count.getter();
}

uint64_t OrderedDictionary.isEmpty.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A60], v0);
  return Collection.isEmpty.getter() & 1;
}

uint64_t OrderedDictionary.subscript.getter@<X0>(uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t v5;

  OrderedSet._find(_:)();
  if ((v4 & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    ContiguousArray.subscript.getter();
    v5 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, v5, 1, a1);
}

uint64_t OrderedDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(char *, uint64_t);
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;

  v58 = (char *)a2;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v54 = a1;
  v55 = v6;
  v7 = MEMORY[0x24BDAC7A8](a1);
  v49 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 24);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v7);
  v50 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v53 = (char *)&v49 - v14;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Int?);
  v15 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v18 = (char *)&v49 - v17;
  v52 = v3;
  v19 = *(_QWORD *)(a3 + 32);
  swift_retain();
  swift_retain();
  v57 = v5;
  v20 = OrderedSet._find(_:)();
  LOBYTE(v5) = v21;
  v51 = v22;
  swift_release();
  swift_release();
  v23 = &v18[*(int *)(TupleTypeMetadata2 + 48)];
  *(_QWORD *)v18 = v20;
  v18[8] = v5 & 1;
  v24 = v54;
  v25 = *(_QWORD *)(v15 - 8);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  v56 = v15;
  v27 = v15;
  v28 = v10;
  v26(v23, v54, v27);
  v29 = v11;
  v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v23, 1, v10);
  if ((v5 & 1) != 0)
  {
    if (v30 == 1)
    {
      (*(void (**)(char *, uint64_t))(v55 + 8))(v58, v57);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v24, v56);
    }
    v38 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v39 = v53;
    v38(v53, v23, v10);
    v40 = v57;
    type metadata accessor for OrderedSet(0, v57, v19, v41);
    v42 = (uint64_t)v58;
    OrderedSet._appendNew(_:in:)((uint64_t)v58, v51);
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v50, v39, v10);
    type metadata accessor for ContiguousArray();
    ContiguousArray.append(_:)();
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v42, v40);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v56);
    v43 = *(uint64_t (**)(char *, uint64_t))(v29 + 8);
    v44 = v39;
  }
  else
  {
    if (v30 == 1)
    {
      v33 = v57;
      v34 = type metadata accessor for OrderedSet(0, v57, v19, v31);
      v35 = v49;
      OrderedSet._removeExistingMember(at:in:)(v20, v51, v34);
      v36 = v24;
      v37 = *(void (**)(char *, uint64_t))(v55 + 8);
      v37(v35, v33);
      type metadata accessor for ContiguousArray();
      v45 = v53;
      ContiguousArray.remove(at:)();
      v37(v58, v33);
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v36, v56);
      v43 = *(uint64_t (**)(char *, uint64_t))(v29 + 8);
    }
    else
    {
      v45 = v53;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v53, v23, v28);
      v46 = v52;
      v47 = type metadata accessor for ContiguousArray();
      ContiguousArray._makeMutableAndUnique()();
      v48 = *(_QWORD *)(v46 + 16);
      ContiguousArray._checkSubscript_mutating(_:)(v20);
      (*(void (**)(unint64_t, char *, uint64_t))(v11 + 24))(v48+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v20, v45, v28);
      destructiveProjectEnumData for NodePersonality.ShaderType(v47);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v58, v57);
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v56);
      v43 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
    }
    v44 = v45;
  }
  return v43(v44, v28);
}

uint64_t OrderedDictionary.keys.getter(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

void (*OrderedDictionary.subscript.modify(_QWORD *a1, uint64_t a2, _QWORD *a3))(uint64_t *a1)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  void (*result)(uint64_t *);
  uint64_t v21;
  void (*v22)(void *, uint64_t, uint64_t, uint64_t);

  v7 = malloc(0x70uLL);
  *a1 = v7;
  v7[2] = a2;
  v7[3] = v3;
  v8 = a3[3];
  v7[4] = v8;
  v9 = type metadata accessor for Optional();
  v7[5] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[6] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v12 = malloc(v11);
  v7[7] = v12;
  v13 = malloc(v11);
  v14 = a3[2];
  v7[8] = v13;
  v7[9] = v14;
  v7[10] = a3[4];
  v15 = OrderedSet._find(_:)();
  v17 = v16;
  v19 = v18;
  v7[11] = v15;
  *((_BYTE *)v7 + 104) = v16;
  v22 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56);
  v22(v13, 1, 1, v8);
  if ((v17 & 1) != 0)
    goto LABEL_4;
  *v7 = v15;
  result = (void (*)(uint64_t *))ContiguousArray.count.getter();
  if (!__OFSUB__(result, 1))
  {
    v7[1] = (char *)result - 1;
    v21 = type metadata accessor for ContiguousArray();
    MEMORY[0x24954C264](MEMORY[0x24BEE2A40], v21);
    MutableCollection.swapAt(_:_:)();
    MEMORY[0x24954C264](MEMORY[0x24BEE2A38], v21);
    MEMORY[0x24954C264](MEMORY[0x24BEE2A68], v21);
    RangeReplaceableCollection<>.removeLast()();
    v22(v12, 0, 1, v8);
    (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v13, v12, v9);
LABEL_4:
    v7[12] = v19;
    return OrderedDictionary.subscript.modify;
  }
  __break(1u);
  return result;
}

void OrderedDictionary.subscript.modify(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *a1;
  v3 = *(void **)(*a1 + 56);
  v2 = *(void **)(*a1 + 64);
  v4 = *(_QWORD *)(*a1 + 40);
  v5 = *(_QWORD *)(*a1 + 48);
  $defer #1 <A, B>() in OrderedDictionary.subscript.modify(*(_QWORD *)(*a1 + 88), *(_BYTE *)(v1 + 104) & 1, *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 80));
  (*(void (**)(void *, uint64_t))(v5 + 8))(v2, v4);
  free(v2);
  free(v3);
  free((void *)v1);
}

uint64_t OrderedDictionary.updateValue<A>(forKey:default:with:)(uint64_t a1, void (*a2)(void), uint64_t a3, void (*a4)(unint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v26;

  v7 = v6;
  v26 = *(_QWORD *)(*(_QWORD *)(a6 + 24) - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(_QWORD *)(v9 + 32);
  swift_retain();
  swift_retain();
  v12 = OrderedSet._find(_:)();
  v14 = v13;
  v16 = v15;
  swift_release();
  swift_release();
  if ((v14 & 1) != 0)
  {
    type metadata accessor for OrderedSet(0, v10, v11, v17);
    OrderedSet._appendNew(_:in:)(a1, v16);
    a2();
    v21 = type metadata accessor for ContiguousArray();
    ContiguousArray.append(_:)();
    v22 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 16) - 1;
    ContiguousArray._makeMutableAndUnique()();
    v23 = *(_QWORD *)(v7 + 16);
    ContiguousArray._checkSubscript_mutating(_:)(v22);
    a4(v23+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(_QWORD *)(v26 + 72) * v22);
    v20 = v21;
  }
  else
  {
    v18 = type metadata accessor for ContiguousArray();
    ContiguousArray._makeMutableAndUnique()();
    v19 = *(_QWORD *)(v7 + 16);
    ContiguousArray._checkSubscript_mutating(_:)(v12);
    a4(v19+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(_QWORD *)(v26 + 72) * v12);
    v20 = v18;
  }
  return destructiveProjectEnumData for NodePersonality.ShaderType(v20);
}

void (*OrderedDictionary.subscript.modify(_QWORD *a1, uint64_t a2, void (*a3)(void), uint64_t a4, _QWORD *a5))(uint64_t **a1)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v25[3];

  v6 = v5;
  v10 = malloc(0x40uLL);
  *a1 = v10;
  v11 = a5[3];
  *v10 = v6;
  v10[1] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v10[2] = v12;
  v13 = *(_QWORD *)(v12 + 64);
  v10[3] = malloc(v13);
  v14 = malloc(v13);
  v15 = a5[2];
  v10[4] = v14;
  v10[5] = v15;
  v16 = a5[4];
  v10[6] = v16;
  type metadata accessor for OrderedSet(0, v15, v16, v17);
  v18 = OrderedSet._append(_:)(a2);
  v20 = v19;
  if ((v18 & 1) != 0)
  {
    a3();
    type metadata accessor for ContiguousArray();
    ContiguousArray.append(_:)();
  }
  v10[7] = v20;
  type metadata accessor for ContiguousArray();
  ContiguousArray._makeMutableAndUnique()();
  v21 = *(_QWORD *)(v6 + 16);
  v22 = *(_QWORD *)(v21 + 16);
  v25[0] = v21 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v25[1] = v22;
  closure #1 in OrderedDictionary.subscript.modify();
  $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v25, v25[0], v22);
  return OrderedDictionary.subscript.modify;
}

void OrderedDictionary.subscript.modify(uint64_t **a1)
{
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *a1;
  v2 = (void *)(*a1)[4];
  v4 = (*a1)[2];
  v3 = (void *)(*a1)[3];
  v5 = (*a1)[1];
  $defer #1 <A, B>() in OrderedDictionary.subscript.modify(**a1, (*a1)[7], (uint64_t)v3, (*a1)[5], v5);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  free(v2);
  free(v3);
  free(v1);
}

uint64_t OrderedDictionary._keys.getter(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t OrderedDictionary._keys.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  swift_release();
  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*OrderedDictionary._keys.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t OrderedDictionary._values.getter()
{
  return swift_retain();
}

uint64_t OrderedDictionary._values.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*OrderedDictionary._values.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t key path setter for OrderedDictionary.values : <A, B>OrderedDictionary<A, B>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[3];

  v5 = *(_QWORD *)(a4 + a3 - 24);
  v6 = *(_QWORD *)(a4 + a3 - 16);
  v7 = *(_QWORD *)(a4 + a3 - 8);
  v8 = *a1;
  v9 = a1[1];
  v10 = a1[2];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_getTupleTypeMetadata2();
  v11 = static Array._allocateUninitialized(_:)();
  v12 = specialized OrderedDictionary.init(dictionaryLiteral:)(v11, v5, v6, v7);
  v14 = v13;
  v16 = v15;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  *a2 = v12;
  a2[1] = v14;
  a2[2] = v16;
  v18[0] = v8;
  v18[1] = v9;
  v18[2] = v10;
  $defer #1 <A, B>() in OrderedDictionary.elements.modify(a2, v18);
  swift_release();
  swift_release();
  return swift_release();
}

void (*OrderedDictionary.values.modify(_QWORD *a1, _QWORD *a2))(_QWORD **a1)
{
  uint64_t v2;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = (char *)malloc(0x38uLL);
  *a1 = v5;
  *(_QWORD *)v5 = *(_QWORD *)v2;
  *(_OWORD *)(v5 + 8) = *(_OWORD *)(v2 + 8);
  v6 = a2[2];
  v7 = a2[3];
  *((_QWORD *)v5 + 3) = v2;
  *((_QWORD *)v5 + 4) = v6;
  *((_QWORD *)v5 + 5) = v7;
  swift_getTupleTypeMetadata2();
  v8 = static Array._allocateUninitialized(_:)();
  v9 = a2[4];
  *((_QWORD *)v5 + 6) = v9;
  v10 = specialized OrderedDictionary.init(dictionaryLiteral:)(v8, v6, v7, v9);
  v12 = v11;
  v14 = v13;
  swift_bridgeObjectRelease();
  *(_QWORD *)v2 = v10;
  *(_QWORD *)(v2 + 8) = v12;
  *(_QWORD *)(v2 + 16) = v14;
  return OrderedDictionary.values.modify;
}

void OrderedDictionary.values.modify(_QWORD **a1)
{
  void *v1;

  v1 = *a1;
  $defer #1 <A, B>() in OrderedDictionary.elements.modify((_QWORD *)(*a1)[3], *a1);
  swift_release();
  swift_release();
  swift_release();
  free(v1);
}

uint64_t OrderedDictionary.values.setter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v19[3];

  v5 = v4;
  v9 = a4[2];
  v10 = a4[3];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_getTupleTypeMetadata2();
  v11 = static Array._allocateUninitialized(_:)();
  v12 = specialized OrderedDictionary.init(dictionaryLiteral:)(v11, v9, v10, a4[4]);
  v14 = v13;
  v16 = v15;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  *v5 = v12;
  v5[1] = v14;
  v5[2] = v16;
  v19[0] = a1;
  v19[1] = a2;
  v19[2] = a3;
  $defer #1 <A, B>() in OrderedDictionary.elements.modify(v5, v19);
  swift_release_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t $defer #1 <A, B>() in OrderedDictionary.subscript.modify(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t TupleTypeMetadata2;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t result;
  char *v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v41 = a6;
  v48 = a4;
  v44 = a9;
  v45 = a5;
  v13 = a2 & 1;
  v46 = a7;
  v43 = *(_QWORD *)(a7 - 8);
  v14 = MEMORY[0x24BDAC7A8](a1);
  v42 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v14);
  v20 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v47 = (char *)&v41 - v21;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Int?);
  v22 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v24 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v26 = (char *)&v41 - v25;
  v27 = &v26[*(int *)(v24 + 48)];
  v28 = a1;
  *(_QWORD *)v26 = a1;
  v26[8] = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v27, a3, v22);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v27, 1, a8);
  if ((a2 & 1) != 0)
  {
    if ((_DWORD)result == 1)
      return result;
    v30 = v47;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v47, v27, a8);
    type metadata accessor for OrderedSet(0, v46, v44, v31);
    OrderedSet._appendNew(_:in:)(v41, v45);
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v30, a8);
    type metadata accessor for ContiguousArray();
    ContiguousArray.append(_:)();
    v32 = *(uint64_t (**)(char *, uint64_t))(v17 + 8);
  }
  else
  {
    if ((_DWORD)result != 1)
    {
      v38 = v47;
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v47, v27, a8);
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v38, a8);
      v39 = type metadata accessor for ContiguousArray();
      ContiguousArray.append(_:)();
      v50 = v28;
      swift_retain();
      v40 = ContiguousArray.count.getter();
      result = swift_release();
      if (__OFSUB__(v40, 1))
      {
        __break(1u);
        return result;
      }
      v49 = v40 - 1;
      MEMORY[0x24954C264](MEMORY[0x24BEE2A40], v39);
      MutableCollection.swapAt(_:_:)();
      v32 = *(uint64_t (**)(char *, uint64_t))(v17 + 8);
      v37 = v38;
      return v32(v37, a8);
    }
    swift_retain();
    v33 = ContiguousArray.count.getter();
    swift_release();
    if (v33 > a1)
    {
      type metadata accessor for ContiguousArray();
      v35 = v47;
      ContiguousArray.remove(at:)();
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v35, a8);
      ContiguousArray.append(_:)();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v35, a8);
    }
    a8 = v46;
    v36 = type metadata accessor for OrderedSet(0, v46, v44, v34);
    v30 = v42;
    OrderedSet._removeExistingMember(at:in:)(a1, v45, v36);
    v32 = *(uint64_t (**)(char *, uint64_t))(v43 + 8);
  }
  v37 = v30;
  return v32(v37, a8);
}

uint64_t key path setter for OrderedDictionary.subscript(_:) : <A, B>OrderedDictionary<A, B>AB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v6 = *(_QWORD *)(a4 + a3 - 24);
  v7 = *(_QWORD *)(a4 + a3 - 16);
  v8 = *(_QWORD *)(a4 + a3 - 8);
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v19 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v19 - v14, a3, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  v17 = type metadata accessor for OrderedDictionary(0, v6, v7, v8);
  return OrderedDictionary.subscript.setter((uint64_t)v13, (uint64_t)v15, v17);
}

uint64_t OrderedDictionary.subscript.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;
  char v4;

  v3 = OrderedSet._find(_:)();
  if ((v4 & 1) != 0)
    return a2(v3);
  else
    return ContiguousArray.subscript.getter();
}

uint64_t closure #1 in OrderedDictionary.subscript.modify()
{
  uint64_t result;

  result = UnsafeBufferPointer.baseAddress.getter();
  if (result)
    return UnsafeMutablePointer.move()();
  __break(1u);
  return result;
}

_QWORD *$defer #1 <A, B>() in OrderedDictionary.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  type metadata accessor for ContiguousArray();
  ContiguousArray._makeMutableAndUnique()();
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = *(unsigned __int8 *)(*(_QWORD *)(a5 - 8) + 80);
  v13 = v10 + ((v12 + 32) & ~v12);
  v15[0] = v13;
  v15[1] = v11;
  closure #1 in $defer #1 <A, B>() in OrderedDictionary.subscript.modify((uint64_t)v15, a2, a3, a4, a5);
  return $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v15, v13, v11);
}

uint64_t OrderedDictionary.subscript.setter(char *a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *);
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t);
  void (*v31)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD v40[2];

  v6 = v5;
  v39 = a1;
  v9 = *(_QWORD *)(a5 + 24);
  v37 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = *(_QWORD *)(v14 + 16);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = v18;
  v19 = *(void (**)(char *))(v18 + 16);
  v38 = v20;
  v19(v17);
  type metadata accessor for OrderedSet(0, v15, *(_QWORD *)(a5 + 32), v21);
  v36 = v17;
  v22 = OrderedSet._append(_:)((uint64_t)v17);
  v34 = v23;
  if ((v22 & 1) != 0)
  {
    a3();
    type metadata accessor for ContiguousArray();
    ContiguousArray.append(_:)();
  }
  type metadata accessor for ContiguousArray();
  ContiguousArray._makeMutableAndUnique()();
  v24 = *(_QWORD *)(v6 + 16);
  v33 = v6;
  v25 = *(_QWORD *)(v24 + 16);
  v26 = v37;
  v40[0] = v24 + ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80));
  v27 = v40[0];
  v40[1] = v25;
  v28 = v34;
  closure #1 in OrderedDictionary.subscript.modify();
  $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v40, v27, v25);
  v29 = v39;
  (*(void (**)(char *, char *, uint64_t))(v26 + 24))(v12, v39, v9);
  $defer #1 <A, B>() in OrderedDictionary.subscript.modify(v33, v28, (uint64_t)v12, v15, v9);
  v30 = *(void (**)(char *, uint64_t))(v26 + 8);
  v30(v12, v9);
  v31 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
  v31(v38, v15);
  v30(v29, v9);
  return ((uint64_t (*)(char *, uint64_t))v31)(v36, v15);
}

uint64_t OrderedDictionary.updateValue(_:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v23 = a1;
  v24 = a4;
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v10 + 32);
  swift_retain();
  swift_retain();
  v22 = a2;
  v13 = OrderedSet._find(_:)();
  LOBYTE(a2) = v14;
  v21 = v15;
  swift_release();
  swift_release();
  if ((a2 & 1) != 0)
  {
    type metadata accessor for OrderedSet(0, v11, v12, v16);
    OrderedSet._appendNew(_:in:)(v22, v21);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v23, v6);
    type metadata accessor for ContiguousArray();
    ContiguousArray.append(_:)();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v24, 1, 1, v6);
  }
  else
  {
    v17 = v24;
    ContiguousArray.subscript.getter();
    v18 = type metadata accessor for ContiguousArray();
    ContiguousArray._makeMutableAndUnique()();
    v19 = *(_QWORD *)(v4 + 16);
    ContiguousArray._checkSubscript_mutating(_:)(v13);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 24))(v19+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v13, v23, v6);
    destructiveProjectEnumData for NodePersonality.ShaderType(v18);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
  }
}

Swift::Int OrderedDictionary.updateValue(_:forKey:insertingAt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v10 = *(_QWORD *)(a5 + 24);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for OrderedSet(0, *(_QWORD *)(v14 + 16), *(_QWORD *)(v14 + 32), v15);
  v17 = OrderedSet.insert(_:at:)(a3, a4, v16);
  v19 = v18;
  if ((v17 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
    type metadata accessor for ContiguousArray();
    ContiguousArray.insert(_:at:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a1, 1, 1, v10);
  }
  else
  {
    ContiguousArray.subscript.getter();
    v20 = type metadata accessor for ContiguousArray();
    ContiguousArray._makeMutableAndUnique()();
    v21 = *(_QWORD *)(v5 + 16);
    ContiguousArray._checkSubscript_mutating(_:)(v19);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 24))(v21+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v19, a2, v10);
    destructiveProjectEnumData for NodePersonality.ShaderType(v20);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
  }
  return v19;
}

uint64_t OrderedDictionary.updateValue<A>(forKey:insertingDefault:at:with:)(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, void (*a5)(unint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v28;

  v8 = v7;
  v28 = *(_QWORD *)(*(_QWORD *)(a7 + 24) - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v10 + 32);
  swift_retain();
  swift_retain();
  v13 = OrderedSet._find(_:)();
  v15 = v14;
  v17 = v16;
  swift_release();
  swift_release();
  if ((v15 & 1) != 0)
  {
    v22 = type metadata accessor for OrderedSet(0, v11, v12, v18);
    OrderedSet._insertNew(_:at:in:)(a1, a4, v17, v22);
    a2();
    v23 = type metadata accessor for ContiguousArray();
    ContiguousArray.insert(_:at:)();
    ContiguousArray._makeMutableAndUnique()();
    v24 = *(_QWORD *)(v8 + 16);
    ContiguousArray._checkSubscript_mutating(_:)(a4);
    a5(v24+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(_QWORD *)(v28 + 72) * a4);
    v21 = v23;
  }
  else
  {
    v19 = type metadata accessor for ContiguousArray();
    ContiguousArray._makeMutableAndUnique()();
    v20 = *(_QWORD *)(v8 + 16);
    ContiguousArray._checkSubscript_mutating(_:)(v13);
    a5(v20+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(_QWORD *)(v28 + 72) * v13);
    v21 = v19;
  }
  return destructiveProjectEnumData for NodePersonality.ShaderType(v21);
}

uint64_t OrderedDictionary.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v5 = a2[2];
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a2[4];
  v10 = OrderedSet._find(_:)();
  if ((v13 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2[3] - 8) + 56))(a3, 1, 1);
  v14 = v10;
  v15 = v11;
  v16 = type metadata accessor for OrderedSet(0, v5, v9, v12);
  OrderedSet._removeExistingMember(at:in:)(v14, v15, v16);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v17 = a2[3];
  type metadata accessor for ContiguousArray();
  ContiguousArray.remove(at:)();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a3, 0, 1, v17);
}

uint64_t OrderedDictionary.merge<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return OrderedDictionary.merge<A>(_:uniquingKeysWith:)(a1, a2, a3, a4, a5, a6, (void (*)(void))specialized OrderedDictionary.merge<A>(_:uniquingKeysWith:));
}

{
  return OrderedDictionary.merge<A>(_:uniquingKeysWith:)(a1, a2, a3, a4, a5, a6, (void (*)(void))specialized OrderedDictionary.merge<A>(_:uniquingKeysWith:));
}

uint64_t closure #1 in OrderedDictionary.merge<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v16;

  v9 = *(_QWORD *)(a6 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v14(v10, v13);
  if (!v6)
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, a6);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v12, a6);
  }
  return result;
}

uint64_t OrderedDictionary.merge<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  a7();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a1, a5);
}

uint64_t closure #1 in OrderedDictionary.merge<A>(_:uniquingKeysWith:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  v24 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v26 = TupleTypeMetadata2;
  v9 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v23 - v12;
  v28 = a4 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  v14 = *(int *)(TupleTypeMetadata2 + 48);
  v15 = &v13[v14];
  v27 = &v13[v14];
  v25 = a1;
  v16 = a1 + v14;
  v17 = *(_QWORD *)(a2 - 8);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v18(v13, a1, a2);
  v19 = *(_QWORD *)(a3 - 8);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v20(v15, v16, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v24, v13, a2);
  v21 = &v11[*(int *)(v26 + 48)];
  v18(v11, v25, a2);
  v20(v21, v16, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v28, v21, a3);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v11, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v27, a3);
}

uint64_t OrderedDictionary.merging<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return OrderedDictionary.merging<A>(_:uniquingKeysWith:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized OrderedDictionary.merge<A>(_:uniquingKeysWith:));
}

{
  return OrderedDictionary.merging<A>(_:uniquingKeysWith:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized OrderedDictionary.merge<A>(_:uniquingKeysWith:));
}

uint64_t OrderedDictionary.merging<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void (*a12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v14;
  uint64_t result;
  uint64_t v18;

  v14 = type metadata accessor for OrderedDictionary(0, a7, a8, a10);
  swift_retain();
  swift_retain();
  swift_retain();
  a12(a1, a2, a3, v14, a9, a11);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a9 - 8) + 8))(a1, a9);
  result = a4;
  if (v18)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t OrderedDictionary.filter(_:)(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3, void (*a4)(_QWORD, _QWORD, _QWORD), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  _QWORD *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  char v47;
  char v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t (*v61)(char *, uint64_t, uint64_t);
  uint64_t v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  void (*v66)(_QWORD, _QWORD, _QWORD);
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(char *, char *);
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(_QWORD, _QWORD, _QWORD);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;

  v66 = a4;
  v67 = a5;
  v69 = a1;
  v70 = a2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v13 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v73 = TupleTypeMetadata2;
  v14 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v58 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v71 = (char *)&v58 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v72 = (uint64_t)&v58 - v18;
  v19 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v58 - v20;
  swift_getTupleTypeMetadata2();
  v22 = static Array._allocateUninitialized(_:)();
  v23 = specialized OrderedDictionary.init(dictionaryLiteral:)(v22, a6, a7, a8);
  v25 = v24;
  v63 = v26;
  v27 = v13;
  swift_bridgeObjectRelease();
  v79 = v23;
  v80 = v25;
  v81 = v63;
  v75 = a3;
  v76 = v66;
  v77 = v67;
  v78 = 0;
  v59 = a8;
  v28 = type metadata accessor for OrderedDictionary.Iterator(0, a6, a7, a8);
  v29 = v73;
  swift_retain();
  swift_retain();
  swift_retain();
  OrderedDictionary.Iterator.next()(v28, v21);
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v30(v21, 1, v29) == 1)
  {
LABEL_2:
    swift_release();
    swift_release();
    swift_release();
    return v79;
  }
  else
  {
    v61 = v30;
    v62 = v28;
    v32 = *(_QWORD **)(a6 - 8);
    v66 = (void (*)(_QWORD, _QWORD, _QWORD))v32[4];
    v67 = a7;
    v33 = v72;
    v68 = v27;
    v63 = v32;
    v64 = v21;
    v65 = a6;
    while (1)
    {
      v35 = *(int *)(v29 + 48);
      v36 = v33 + v35;
      v37 = &v21[v35];
      v66(v33, v21, a6);
      v38 = v67;
      v39 = *(_QWORD *)(v67 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v36, v37, v67);
      v40 = *(int *)(v29 + 48);
      v41 = v71;
      v42 = &v71[v40];
      v43 = v33;
      v44 = (void (*)(char *, uint64_t, uint64_t))v32[2];
      v44(v71, v43, a6);
      v45 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 16);
      v45(v42, v36, v38);
      v46 = v74;
      v47 = v69(v41, v42);
      v74 = v46;
      if (v46)
        break;
      v48 = v47;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v42, v38);
      v49 = (void (*)(char *, uint64_t))v32[1];
      v50 = v65;
      v49(v41, v65);
      if ((v48 & 1) != 0)
      {
        v52 = type metadata accessor for OrderedSet(0, v50, v59, v51);
        v53 = v72;
        OrderedSet._appendNew(_:)(v72, v52);
        v29 = v73;
        v54 = *(int *)(v73 + 48);
        v55 = v38;
        v56 = v58;
        v60 = v49;
        v57 = &v58[v54];
        v44(v58, v53, v50);
        v33 = v53;
        v45(v57, v36, v55);
        type metadata accessor for ContiguousArray();
        ContiguousArray.append(_:)();
        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v53, v29);
        v60(v56, v50);
      }
      else
      {
        v33 = v72;
        v29 = v73;
        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v72, v73);
      }
      a6 = v50;
      v21 = v64;
      OrderedDictionary.Iterator.next()(v62, v64);
      v34 = v61(v21, 1, v29);
      v32 = v63;
      if (v34 == 1)
        goto LABEL_2;
    }
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v72, v73);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v42, v38);
    return ((uint64_t (*)(char *, uint64_t))v32[1])(v41, v65);
  }
}

uint64_t OrderedDictionary.mapValues<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[9];
  uint64_t v20;
  uint64_t v21;

  v21 = a5;
  v19[2] = a6;
  v19[3] = a7;
  v19[4] = a8;
  v19[5] = a9;
  v19[6] = a1;
  v19[7] = a2;
  v12 = type metadata accessor for ContiguousArray();
  swift_retain();
  swift_retain();
  swift_retain();
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  v14 = MEMORY[0x24954C264](MEMORY[0x24BEE2A60], v12);
  v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed B) -> (@out A1, @error @owned Error), (uint64_t)v19, v12, a8, v13, v14, MEMORY[0x24BEE3F20], (uint64_t)&v20);
  if (v9)
  {
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    v16 = v15;
    swift_release();
    v21 = v16;
    v17 = type metadata accessor for Array();
    MEMORY[0x24954C264](MEMORY[0x24BEE12C8], v17);
    Array.init<A>(_:)();
  }
  return a3;
}

uint64_t OrderedDictionary.compactMapValues<A>(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t TupleTypeMetadata2;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *);
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v10 = v9;
  v52 = a5;
  v61 = a4;
  v53 = a3;
  v63 = a2;
  v64 = a1;
  v60 = a9;
  v59 = type metadata accessor for Optional();
  v58 = *(_QWORD *)(v59 - 8);
  v14 = MEMORY[0x24BDAC7A8](v59);
  v65 = (char *)&v51 - v15;
  v62 = *(_QWORD *)(a8 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v57 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v56 = (char *)&v51 - v19;
  v20 = *(_QWORD *)(a7 - 8);
  v21 = MEMORY[0x24BDAC7A8](v18);
  v72 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v70 = (uint64_t)&v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v25 = type metadata accessor for Optional();
  v68 = *(_QWORD *)(v25 - 8);
  v69 = v25;
  v26 = MEMORY[0x24BDAC7A8](v25);
  v67 = (char *)&v51 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)&v51 - v28;
  v73 = a6;
  swift_getTupleTypeMetadata2();
  v30 = static Array._allocateUninitialized(_:)();
  v31 = specialized OrderedDictionary.init(dictionaryLiteral:)(v30, a6, a8, a9);
  v33 = v32;
  v66 = v34;
  swift_bridgeObjectRelease();
  v78 = v31;
  v79 = v33;
  v80 = v66;
  v74 = v53;
  v75 = v61;
  v76 = v52;
  v77 = 0;
  v66 = type metadata accessor for OrderedDictionary.Iterator(0, v73, a7, v60);
  swift_retain();
  swift_retain();
  swift_retain();
  v55 = v20;
  v54 = TupleTypeMetadata2;
  while (1)
  {
    v35 = v67;
    OrderedDictionary.Iterator.next()(v66, v67);
    (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v29, v35, v69);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v29, 1, TupleTypeMetadata2) == 1)
    {
      swift_release();
      swift_release();
      swift_release();
      return v78;
    }
    v36 = &v29[*(int *)(TupleTypeMetadata2 + 48)];
    v37 = v29;
    (*(void (**)(uint64_t, char *, uint64_t))(v71 + 32))(v70, v29, v73);
    v38 = v72;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v72, v36, a7);
    v39 = v65;
    v64(v38);
    if (v10)
      break;
    v40 = v62;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v39, 1, a8) == 1)
    {
      (*(void (**)(char *, uint64_t))(v20 + 8))(v72, a7);
      (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v70, v73);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v39, v59);
    }
    else
    {
      v41 = v56;
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v56, v39, a8);
      v42 = a7;
      v43 = v73;
      v45 = type metadata accessor for OrderedSet(0, v73, v60, v44);
      v61 = 0;
      v46 = v70;
      OrderedSet._appendNew(_:)(v70, v45);
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v57, v41, a8);
      type metadata accessor for ContiguousArray();
      ContiguousArray.append(_:)();
      v10 = v61;
      v47 = v41;
      v20 = v55;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v47, a8);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v72, v42);
      v48 = v46;
      TupleTypeMetadata2 = v54;
      v49 = v43;
      a7 = v42;
      (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v48, v49);
    }
    v29 = v37;
  }
  (*(void (**)(char *, uint64_t))(v20 + 8))(v72, a7);
  (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v70, v73);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in $defer #1 <A, B>() in OrderedDictionary.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v8 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = UnsafeBufferPointer.baseAddress.getter();
  if (result)
  {
    v12 = result + *(_QWORD *)(v8 + 72) * a2;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a3, a5);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v12, v10, a5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized OrderedDictionary.merge<A>(_:uniquingKeysWith:)(uint64_t a1, void (*a2)(_BYTE *__return_ptr, uint64_t *), uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[24];
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v6 = a4[2];
  v49 = a4 + 2;
  swift_bridgeObjectRetain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v6);
  *v49 = v6;
  v47 = *(_QWORD *)(a1 + 16);
  if (!v47)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  v7 = 0;
  v46 = a1 + 32;
  while (1)
  {
    v52 = v6;
    v16 = (uint64_t *)(v46 + (v7 << 6));
    v18 = v16[6];
    v17 = v16[7];
    v20 = v16[4];
    v19 = v16[5];
    v21 = v16[2];
    v22 = v16[3];
    v23 = v16[1];
    v61 = *v16;
    v62 = v23;
    v63 = v21;
    v64 = v22;
    v65 = v20;
    v66 = v19;
    v67 = v18;
    v68 = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of MaterialXAvailability(v18, v17);
    a2(v56, &v61);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MaterialXAvailability(v18, v17);
    v24 = *(_QWORD *)v56;
    v25 = *(_QWORD *)&v56[16];
    v9 = *(_QWORD *)&v56[8];
    v51 = v57;
    v26 = *((_QWORD *)&v58 + 1);
    v8 = v58;
    v55 = v59;
    v69 = v60;
    v27 = *a4;
    v28 = (_QWORD *)a4[1];
    v29 = v28[2];
    v54 = *(_QWORD *)&v56[8];
    if (*a4)
    {
      v53 = v58;
      swift_retain();
      swift_retain();
      v30 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v24, v9, (uint64_t)(v28 + 4), v29, (_QWORD *)(v27 + 16), v27 + 32);
      v32 = v31;
      v29 = v33;
      swift_release();
      result = swift_release();
      if ((v32 & 1) == 0)
      {
        v6 = v52;
        goto LABEL_18;
      }
      v45 = v25;
      v6 = v52;
      v8 = v53;
      v9 = v54;
LABEL_6:
      specialized OrderedSet._appendNew(_:in:)(v24, v9, v29);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of MaterialXAvailability(v55, v69);
      a4[2] = v6;
      v10 = v26;
      v11 = v8;
      v13 = *(_QWORD *)(v6 + 16);
      v12 = *(_QWORD *)(v6 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v6 = *v49;
      }
      *(_QWORD *)(v6 + 16) = v13 + 1;
      v14 = (_QWORD *)(v6 + 48 * v13);
      v14[4] = v45;
      v14[5] = v51;
      v14[6] = v11;
      v14[7] = v10;
      v15 = v69;
      v14[8] = v55;
      v14[9] = v15;
      goto LABEL_9;
    }
    if (!v29)
    {
      v45 = *(_QWORD *)&v56[16];
      v6 = v52;
      goto LABEL_6;
    }
    result = v28[4];
    if (*(_OWORD *)(a4[1] + 32) == *(_OWORD *)v56
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      v53 = v8;
      v30 = 0;
LABEL_17:
      v6 = v52;
      goto LABEL_18;
    }
    if (v29 == 1)
      goto LABEL_24;
    result = v28[6];
    if (result == v24 && v28[7] == v9 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      v53 = v8;
      v30 = 1;
      goto LABEL_17;
    }
    if (v29 == 2)
      goto LABEL_24;
    result = v28[8];
    if (result == v24 && v28[9] == v9 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      v53 = v8;
      v30 = 2;
      goto LABEL_17;
    }
    if (v29 == 3)
    {
LABEL_24:
      v45 = v25;
      v29 = 0;
      v6 = v52;
      goto LABEL_6;
    }
    result = v28[10];
    v53 = v8;
    if (result == v24 && v28[11] == v9 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      v30 = 3;
      goto LABEL_17;
    }
    v42 = v28 + 13;
    v43 = 4;
    v6 = v52;
    while (1)
    {
      if (v29 == v43)
      {
        v45 = v25;
        v29 = 0;
        v8 = v53;
        v9 = v54;
        goto LABEL_6;
      }
      result = *(v42 - 1);
      if (result == v24 && *v42 == v54)
        break;
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      v30 = v43++;
      v42 += 2;
      if ((result & 1) != 0)
        goto LABEL_18;
    }
    v30 = v43;
LABEL_18:
    if ((v30 & 0x8000000000000000) != 0)
      break;
    if (v30 >= *(_QWORD *)(v6 + 16))
      goto LABEL_53;
    v61 = v25;
    v62 = v51;
    v35 = v6 + 32 + 48 * v30;
    v63 = v53;
    v64 = v26;
    v65 = v55;
    v66 = v69;
    closure #2 in BuiltInDefinitionStore.init(nodeDefStore:)((uint64_t *)v35, (uint64_t *)v56);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of MaterialXAvailability(v55, v69);
      result = swift_bridgeObjectRelease();
      *v49 = v6;
      return result;
    }
    swift_bridgeObjectRelease();
    v36 = (_QWORD *)(v6 + 32 + 48 * v30);
    swift_bridgeObjectRelease();
    v37 = v36[4];
    v38 = v36[5];
    swift_bridgeObjectRelease();
    outlined consume of MaterialXAvailability(v37, v38);
    v39 = v57;
    v40 = *(_OWORD *)&v56[8];
    v41 = v58;
    *(_QWORD *)v35 = *(_QWORD *)v56;
    *(_OWORD *)(v35 + 8) = v40;
    v36[3] = v39;
    *((_OWORD *)v36 + 2) = v41;
LABEL_9:
    ++v7;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MaterialXAvailability(v55, v69);
    swift_bridgeObjectRelease();
    *v49 = v6;
    if (v7 == v47)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

uint64_t specialized OrderedDictionary.merge<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t AssociatedTypeWitness;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  Swift::Int v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t TupleTypeMetadata2;
  uint64_t AssociatedConformanceWitness;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v7 = v6;
  v62 = a2;
  v63 = a3;
  v79 = a1;
  v10 = *(_QWORD *)(a4 + 24);
  v77 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v61 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v76 = (uint64_t)&v58 - v14;
  v68 = v15;
  v80 = *(_QWORD *)(*(_QWORD *)(v15 + 16) - 8);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = v18;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v19 = type metadata accessor for Optional();
  v74 = *(_QWORD *)(v19 - 8);
  v75 = v19;
  v20 = MEMORY[0x24BDAC7A8](v19);
  v73 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v72 = (char *)&v58 - v23;
  v24 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v58 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v58 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v29 = (char *)&v58 - v28;
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v31 = v76;
  v30(v26, v79, a5);
  v78 = v29;
  v32 = v77;
  dispatch thunk of Sequence.makeIterator()();
  v33 = v10;
  v34 = type metadata accessor for ContiguousArray();
  ContiguousArray._makeMutableAndUnique()();
  destructiveProjectEnumData for NodePersonality.ShaderType(v34);
  ContiguousArray._makeMutableAndUnique()();
  v66 = v34;
  v67 = (uint64_t *)(v7 + 16);
  destructiveProjectEnumData for NodePersonality.ShaderType(v34);
  v64 = a5;
  v35 = TupleTypeMetadata2;
  v79 = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v60 = v17;
  v59 = v7;
  while (1)
  {
    v36 = v73;
    dispatch thunk of IteratorProtocol.next()();
    v37 = v72;
    (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v72, v36, v75);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v37, 1, v35) == 1)
      return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v78, v79);
    v38 = v37;
    v39 = &v37[*(int *)(v35 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v17, v38, v81);
    v40 = v39;
    v41 = v33;
    (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v31, v40, v33);
    swift_retain();
    v42 = v7;
    v43 = *(_QWORD *)(v68 + 32);
    swift_retain();
    v44 = OrderedSet._find(_:)();
    v45 = v41;
    v46 = (uint64_t)v17;
    v48 = v47;
    v50 = v49;
    swift_release();
    swift_release();
    if ((v48 & 1) != 0)
    {
      type metadata accessor for OrderedSet(0, v81, v43, v51);
      OrderedSet._appendNew(_:in:)(v46, v50);
      v31 = v76;
      v32 = v77;
      (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v61, v76, v45);
      ContiguousArray.append(_:)();
      v33 = v45;
      v7 = v42;
      v17 = (char *)v46;
      goto LABEL_3;
    }
    v53 = v66;
    v52 = v67;
    ContiguousArray._makeMutableAndUnique()();
    v54 = *v52;
    ContiguousArray._checkSubscript_mutating(_:)(v44);
    v32 = v77;
    v55 = v76;
    v56 = v69;
    closure #1 in OrderedDictionary.merge<A>(_:uniquingKeysWith:)(v54+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(_QWORD *)(v77 + 72) * v44, v62, v63, v76, v81, v45);
    v33 = v45;
    if (v56)
      break;
    v69 = 0;
    destructiveProjectEnumData for NodePersonality.ShaderType(v53);
    v7 = v59;
    v31 = v55;
    v17 = v60;
LABEL_3:
    v35 = TupleTypeMetadata2;
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v17, v81);
  }
  destructiveProjectEnumData for NodePersonality.ShaderType(v53);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v55, v45);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v60, v81);
  return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v78, v79);
}

{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t TupleTypeMetadata2;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a3;
  v26 = a2;
  v9 = type metadata accessor for LazySequence();
  v25 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v21 - v10;
  v12 = *(_QWORD *)(a4 + 24);
  v21 = *(_QWORD *)(a4 + 16);
  v22 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v13 = type metadata accessor for LazyMapSequence();
  v24 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v21 - v14;
  MEMORY[0x24954B148](a5, a6);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v21;
  v16[3] = v12;
  v17 = v22;
  v18 = *(_QWORD *)(v22 + 32);
  v16[4] = a5;
  v16[5] = v18;
  v16[6] = a6;
  MEMORY[0x24954C264](MEMORY[0x24BEE25B0], v9);
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v9);
  v19 = MEMORY[0x24954C264](MEMORY[0x24BEE2B40], v13);
  specialized OrderedDictionary.merge<A>(_:uniquingKeysWith:)((uint64_t)v15, v26, v27, v17, v13, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v15, v13);
}

uint64_t type metadata accessor for OrderedDictionary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrderedDictionary);
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed B) -> (@out A1, @error @owned Error)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v2 + 48))();
  if (v3)
    *a2 = v3;
  return result;
}

uint64_t sub_245F6A03C()
{
  return 24;
}

__n128 sub_245F6A048(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_245F6A05C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return OrderedDictionary.subscript.getter(*(_QWORD *)(a2 + a1 - 16), a3);
}

uint64_t sub_245F6A080()
{
  return 24;
}

__n128 sub_245F6A08C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t specialized OrderedDictionary.merge<A>(_:uniquingKeysWith:)(uint64_t a1, void (*a2)(uint64_t *__return_ptr, _QWORD *), uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t *v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t result;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _QWORD v37[3];
  uint64_t *v38;

  v38 = a4;
  v6 = a4 + 2;
  v5 = a4[2];
  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v6 = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v5);
  specialized ContiguousArray._endMutation()();
  v32 = *(_QWORD *)(a1 + 16);
  if (!v32)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  v8 = 0;
  v30 = v6;
  v31 = a1 + 32;
  while (1)
  {
    v11 = (_QWORD *)(v31 + 24 * v8);
    v12 = v11[1];
    v13 = (void *)v11[2];
    v37[0] = *v11;
    v37[1] = v12;
    v37[2] = v13;
    swift_bridgeObjectRetain();
    v14 = v13;
    a2(&v34, v37);

    swift_bridgeObjectRelease();
    v15 = v34;
    v16 = v35;
    v17 = v36;
    v19 = *v38;
    v18 = (_QWORD *)v38[1];
    v9 = v18[2];
    if (*v38)
    {
      swift_retain();
      swift_retain();
      v20 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v15, v16, (uint64_t)(v18 + 4), v9, (_QWORD *)(v19 + 16), v19 + 32);
      v22 = v21;
      v9 = v23;
      swift_release();
      swift_release();
      if ((v22 & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      if (!v9)
        goto LABEL_6;
      v24 = v18[4] == v34 && v18[5] == v35;
      if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v20 = 0;
      }
      else
      {
        if (v9 == 1)
          goto LABEL_5;
        if (v18[6] == v15 && v18[7] == v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          v20 = 1;
        }
        else
        {
          if (v9 == 2)
            goto LABEL_5;
          if (v18[8] == v15 && v18[9] == v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            v20 = 2;
          }
          else
          {
            if (v9 == 3)
              goto LABEL_5;
            if ((v18[10] != v15 || v18[11] != v16) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            {
              v27 = v18 + 13;
              v28 = 4;
              while (v9 != v28)
              {
                if (*(v27 - 1) == v15 && *v27 == v16)
                {
                  v20 = v28;
                  goto LABEL_18;
                }
                v20 = v28++;
                v27 += 2;
                if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  goto LABEL_18;
              }
LABEL_5:
              v9 = 0;
LABEL_6:
              specialized OrderedSet._appendNew(_:in:)(v15, v16, v9);
              v10 = v17;
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              goto LABEL_7;
            }
            v20 = 3;
          }
        }
      }
    }
LABEL_18:
    v25 = *v30;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v30 = v25;
    if ((result & 1) == 0)
      specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v25);
    if ((v20 & 0x8000000000000000) != 0)
      break;
    if (v20 >= *(_QWORD *)(v25 + 16))
      goto LABEL_51;
LABEL_7:
    ++v8;
    specialized ContiguousArray._endMutation()();
    swift_bridgeObjectRelease();

    if (v8 == v32)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

uint64_t sub_245F6A400()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OrderedDictionary.merge<A>(_:uniquingKeysWith:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in OrderedDictionary.merge<A>(_:uniquingKeysWith:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t OrderedSet.isSubset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  BOOL v17;
  _QWORD v19[2];

  v8 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = ContiguousArray.count.getter();
  if (v11 < ContiguousArray.count.getter())
    return 0;
  v13 = *(_QWORD *)(a4 + 16);
  if (!v13)
    return 1;
  v19[1] = a3;
  swift_retain();
  swift_retain();
  ContiguousArray.subscript.getter();
  v14 = OrderedSet.contains(_:)();
  v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, a5);
  if (v14)
  {
    v16 = 1;
    while (v13 != v16)
    {
      ContiguousArray.subscript.getter();
      ++v16;
      v17 = OrderedSet.contains(_:)();
      v15(v10, a5);
      if (!v17)
        goto LABEL_8;
    }
    swift_release();
    v12 = 1;
  }
  else
  {
LABEL_8:
    swift_release();
    v12 = 0;
  }
  swift_release();
  return v12;
}

uint64_t OrderedSet.isSubset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;

  v6 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = Set.count.getter();
  if (v9 < ContiguousArray.count.getter())
    return 0;
  v11 = *(_QWORD *)(a3 + 16);
  if (!v11)
    return 1;
  swift_retain();
  swift_retain();
  ContiguousArray.subscript.getter();
  v12 = Set.contains(_:)();
  v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v8, a4);
  if ((v12 & 1) != 0)
  {
    v14 = 1;
    while (v11 != v14)
    {
      ContiguousArray.subscript.getter();
      ++v14;
      v15 = Set.contains(_:)();
      v13(v8, a4);
      if ((v15 & 1) == 0)
        goto LABEL_8;
    }
    swift_release();
    v10 = 1;
  }
  else
  {
LABEL_8:
    swift_release();
    v10 = 0;
  }
  swift_release();
  return v10;
}

uint64_t OrderedSet.isSubset<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = a3;
  v3 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A60], v3);
  if ((Collection.isEmpty.getter() & 1) != 0)
    return 1;
  v5 = ContiguousArray.count.getter();
  v6 = MEMORY[0x24BDAC7A8](v5);
  LOBYTE(v7) = 2;
  result = (uint64_t)_s11ShaderGraph13_UnsafeBitsetV014_withTemporaryD08capacity3runySi_yACzKXEtKFZ04_s11a8Graph13_cd8V013withf32D08capacity3runxSi_xACzKXEtKlFZyN12KXEfU_Sb_Tg5SbSgACxs5Error_pRi_zRi0_zlySbIsglrzo_Tf1ncn_nTf4ndnn_n(v6, &v7, (_QWORD *(*)(char *__return_ptr, _QWORD **))partial apply for closure #1 in OrderedSet.isSubset<A>(of:));
  if (v7 != 2)
    return v7 & 1;
  __break(1u);
  return result;
}

uint64_t OrderedSet.isSuperset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return OrderedSet.isSubset(of:)(a3, a4, a1, a2, a5);
}

{
  return OrderedSet.isSubset(of:)(a3, a4, a1, a2, a5);
}

BOOL OrderedSet.isSuperset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v14;

  v10 = ContiguousArray.count.getter();
  if (v10 >= Set.count.getter())
  {
    v14 = a1;
    v12 = type metadata accessor for Set();
    MEMORY[0x24954C264](MEMORY[0x24BEE1718], v12);
    return OrderedSet._isSuperset<A>(of:)((uint64_t)&v14, a2, a3, a4, v12, a5);
  }
  else
  {
    return 0;
  }
}

uint64_t OrderedSet.isStrictSubset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = ContiguousArray.count.getter();
  if (v10 >= ContiguousArray.count.getter())
    return 0;
  else
    return OrderedSet.isSubset(of:)(a1, a2, a3, a4, a5);
}

uint64_t OrderedSet.isStrictSubset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = ContiguousArray.count.getter();
  if (v8 >= Set.count.getter())
    return 0;
  else
    return OrderedSet.isSubset(of:)(a1, a2, a3, a4);
}

_QWORD *OrderedSet.isStrictSubset<A>(of:)()
{
  uint64_t v0;
  _QWORD *result;
  char v2;

  v0 = ContiguousArray.count.getter();
  v2 = 2;
  result = _s11ShaderGraph13_UnsafeBitsetV014_withTemporaryD08capacity3runySi_yACzKXEtKFZ04_s11a8Graph13_cd8V013withf32D08capacity3runxSi_xACzKXEtKlFZyN12KXEfU_Sb_Tg5SbSgACxs5Error_pRi_zRi0_zlySbIsglrzo_Tf1ncn_nTf4ndnn_n(v0, &v2, (_QWORD *(*)(char *__return_ptr, _QWORD **))partial apply for closure #1 in OrderedSet.isStrictSubset<A>(of:));
  if (v2 != 2)
    return (_QWORD *)(v2 & 1);
  __break(1u);
  return result;
}

uint64_t OrderedSet.isStrictSuperset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = ContiguousArray.count.getter();
  if (ContiguousArray.count.getter() >= v10)
    return 0;
  else
    return OrderedSet.isSubset(of:)(a3, a4, a1, a2, a5);
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v7 = ContiguousArray.count.getter();
  if (Set.count.getter() >= v7)
  {
    v10 = 0;
  }
  else
  {
    v9 = type metadata accessor for OrderedSet(0, a4, a5, v8);
    MEMORY[0x24954C264](&protocol conformance descriptor for OrderedSet<A>, v9);
    v10 = Set.isSubset<A>(of:)();
  }
  return v10 & 1;
}

_QWORD *OrderedSet.isStrictSuperset<A>(of:)()
{
  uint64_t v0;
  _QWORD *result;
  char v2;

  v0 = ContiguousArray.count.getter();
  v2 = 2;
  result = _s11ShaderGraph13_UnsafeBitsetV014_withTemporaryD08capacity3runySi_yACzKXEtKFZ04_s11a8Graph13_cd8V013withf32D08capacity3runxSi_xACzKXEtKlFZyN12KXEfU_Sb_Tg5SbSgACxs5Error_pRi_zRi0_zlySbIsglrzo_Tf1ncn_nTf4ndnn_n(v0, &v2, (_QWORD *(*)(char *__return_ptr, _QWORD **))partial apply for closure #1 in OrderedSet.isStrictSuperset<A>(of:));
  if (v2 != 2)
    return (_QWORD *)(v2 & 1);
  __break(1u);
  return result;
}

uint64_t OrderedSet.isDisjoint(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  BOOL v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  BOOL v29;
  _QWORD v30[3];
  uint64_t v31;

  v30[1] = a1;
  v30[2] = a6;
  v9 = *(_QWORD *)(a5 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v30 - v13;
  v31 = v15;
  v16 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A60], v16);
  if ((Collection.isEmpty.getter() & 1) != 0)
    return 1;
  v31 = a2;
  if ((Collection.isEmpty.getter() & 1) != 0)
    return 1;
  v19 = ContiguousArray.count.getter();
  if (ContiguousArray.count.getter() >= v19)
  {
    v23 = *(_QWORD *)(a4 + 16);
    if (v23)
    {
      swift_retain();
      swift_retain();
      ContiguousArray.subscript.getter();
      v24 = OrderedSet.contains(_:)();
      v25 = *(void (**)(char *, uint64_t))(v9 + 8);
      v25(v14, a5);
      if (v24)
        goto LABEL_18;
      v26 = 1;
      while (v23 != v26)
      {
        ContiguousArray.subscript.getter();
        ++v26;
        v27 = OrderedSet.contains(_:)();
        v25(v14, a5);
        if (v27)
          goto LABEL_18;
      }
      goto LABEL_19;
    }
  }
  else
  {
    v20 = *(_QWORD *)(a2 + 16);
    if (v20)
    {
      swift_retain();
      swift_retain();
      ContiguousArray.subscript.getter();
      v21 = OrderedSet.contains(_:)();
      v22 = *(void (**)(char *, uint64_t))(v9 + 8);
      v22(v12, a5);
      if (v21)
      {
LABEL_18:
        swift_release();
        v17 = 0;
LABEL_20:
        swift_release();
        return v17;
      }
      v28 = 1;
      while (v20 != v28)
      {
        ContiguousArray.subscript.getter();
        ++v28;
        v29 = OrderedSet.contains(_:)();
        v22(v12, a5);
        if (v29)
          goto LABEL_18;
      }
LABEL_19:
      swift_release();
      v17 = 1;
      goto LABEL_20;
    }
  }
  return 1;
}

uint64_t OrderedSet.isDisjoint(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD v41[2];
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;

  v10 = type metadata accessor for Optional();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v41 - v12;
  v14 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = a3;
  v17 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A60], v17);
  if ((Collection.isEmpty.getter() & 1) != 0 || (Set.isEmpty.getter() & 1) != 0)
    return 1;
  v20 = ContiguousArray.count.getter();
  if (Set.count.getter() >= v20)
  {
    v24 = *(_QWORD *)(a3 + 16);
    if (v24)
    {
      swift_retain();
      swift_retain();
      ContiguousArray.subscript.getter();
      v25 = Set.contains(_:)();
      v26 = *(void (**)(char *, uint64_t))(v14 + 8);
      v26(v16, a4);
      if ((v25 & 1) != 0)
      {
LABEL_13:
        swift_release();
        swift_release();
        return 0;
      }
      v27 = 1;
      while (v24 != v27)
      {
        ContiguousArray.subscript.getter();
        ++v27;
        v28 = Set.contains(_:)();
        v26(v16, a4);
        if ((v28 & 1) != 0)
          goto LABEL_13;
      }
      swift_release();
      swift_release();
    }
    return 1;
  }
  v45 = a3;
  v46 = a2;
  v44 = a5;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    result = Set.Iterator.init(_cocoa:)();
    a1 = v47;
    v43 = v48;
    v21 = v49;
    v22 = v50;
    v23 = v51;
  }
  else
  {
    v29 = -1 << *(_BYTE *)(a1 + 32);
    v30 = *(_QWORD *)(a1 + 56);
    v43 = a1 + 56;
    v21 = ~v29;
    v31 = -v29;
    if (v31 < 64)
      v32 = ~(-1 << v31);
    else
      v32 = -1;
    v23 = v32 & v30;
    result = swift_bridgeObjectRetain();
    v22 = 0;
  }
  v41[1] = v21;
  v42 = (unint64_t)(v21 + 64) >> 6;
  while (1)
  {
    v36 = v22;
    if ((a1 & 0x8000000000000000) == 0)
      break;
    if (!__CocoaSet.Iterator.next()())
      goto LABEL_40;
    _forceBridgeFromObjectiveC<A>(_:_:)();
    swift_unknownObjectRelease();
LABEL_21:
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v13, 0, 1, a4);
    v35 = OrderedSet.contains(_:)();
    result = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v13, a4);
    if (v35)
    {
      outlined consume of [String : InputSpec].Iterator._Variant();
      return 0;
    }
  }
  if (v23)
  {
    v33 = __clz(__rbit64(v23));
    v23 &= v23 - 1;
    v34 = v33 | (v22 << 6);
LABEL_20:
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v13, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v14 + 72) * v34, a4);
    goto LABEL_21;
  }
  v37 = v22 + 1;
  if (!__OFADD__(v22, 1))
  {
    if (v37 >= v42)
      goto LABEL_40;
    v38 = *(_QWORD *)(v43 + 8 * v37);
    ++v22;
    if (!v38)
    {
      v22 = v36 + 2;
      if (v36 + 2 >= v42)
        goto LABEL_40;
      v38 = *(_QWORD *)(v43 + 8 * v22);
      if (!v38)
      {
        v22 = v36 + 3;
        if (v36 + 3 >= v42)
          goto LABEL_40;
        v38 = *(_QWORD *)(v43 + 8 * v22);
        if (!v38)
        {
          v39 = v36 + 4;
          while (v42 != v39)
          {
            v38 = *(_QWORD *)(v43 + 8 * v39++);
            if (v38)
            {
              v22 = v39 - 1;
              goto LABEL_35;
            }
          }
LABEL_40:
          v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
          v18 = 1;
          v40(v13, 1, 1, a4);
          outlined consume of [String : InputSpec].Iterator._Variant();
          return v18;
        }
      }
    }
LABEL_35:
    v23 = (v38 - 1) & v38;
    v34 = __clz(__rbit64(v38)) + (v22 << 6);
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t OrderedSet.isDisjoint<A>(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _BOOL8 v24;
  int v25;
  BOOL v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = a2;
  v34 = a6;
  v29 = a1;
  v11 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Optional();
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v28 - v16;
  v18 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v28 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = a5;
  v32 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v22 = (char *)&v28 - v21;
  v35 = a3;
  v23 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A60], v23);
  if ((Collection.isEmpty.getter() & 1) != 0)
    return 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v28, v29, v31);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  do
  {
    dispatch thunk of IteratorProtocol.next()();
    v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v17, 1, a4);
    v24 = v25 == 1;
    if (v25 == 1)
      break;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v17, a4);
    v26 = OrderedSet.contains(_:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a4);
  }
  while (!v26);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v22, AssociatedTypeWitness);
  return v24;
}

unint64_t closure #1 in OrderedSet.isSubset<A>(of:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X8>)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  char v25;
  unint64_t result;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v37 = a8;
  v39 = a7;
  v40 = a1;
  v44 = a4;
  v41 = a3;
  v43 = a2;
  v38 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Optional();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v35 - v14;
  v16 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v36 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v21 = (char *)&v35 - v20;
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v23 = v38;
  v22(v18, v43, a6);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  v42 = v21;
  v43 = AssociatedTypeWitness;
  dispatch thunk of IteratorProtocol.next()();
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  if (v24(v15, 1, a5) != 1)
  {
    v27 = v23;
    v28 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v28(v11, v15, a5);
    while (1)
    {
      result = OrderedSet._find(_:)();
      if ((v29 & 1) != 0
        || (v30 = (result >> 3) & 0x1FFFFFFFFFFFFFF8,
            v31 = *(_QWORD *)(*v40 + v30),
            *(_QWORD *)(*v40 + v30) = v31 | (1 << result),
            (v31 & (1 << result)) != 0))
      {
        (*(void (**)(char *, uint64_t))(v27 + 8))(v11, a5);
      }
      else
      {
        v32 = v40[2];
        v33 = v32 + 1;
        if (__OFADD__(v32, 1))
        {
          __break(1u);
          return result;
        }
        v40[2] = v33;
        v34 = ContiguousArray.count.getter();
        (*(void (**)(char *, uint64_t))(v27 + 8))(v11, a5);
        if (v33 == v34)
        {
          v25 = 1;
          goto LABEL_3;
        }
      }
      dispatch thunk of IteratorProtocol.next()();
      if (v24(v15, 1, a5) == 1)
        break;
      v28(v11, v15, a5);
    }
  }
  v25 = 0;
LABEL_3:
  result = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v42, v43);
  *v37 = v25;
  return result;
}

uint64_t partial apply for closure #1 in OrderedSet.isSubset<A>(of:)(uint64_t a1)
{
  return partial apply for closure #1 in OrderedSet.isSubset<A>(of:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in OrderedSet.isSubset<A>(of:));
}

BOOL OrderedSet._isSuperset<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  char *v19;
  int v20;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a3;
  v28 = a6;
  v25 = a1;
  v8 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Optional();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v23 - v13;
  v24 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v26 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v19 = (char *)&v23 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v16, v25, a5);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  do
  {
    dispatch thunk of IteratorProtocol.next()();
    v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v14, 1, a4);
    if (v20 == 1)
      break;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v14, a4);
    v21 = OrderedSet.contains(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a4);
  }
  while (v21);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v19, AssociatedTypeWitness);
  return v20 == 1;
}

unint64_t closure #1 in OrderedSet.isStrictSubset<A>(of:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _BYTE *a8@<X8>)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  char *v21;
  uint64_t AssociatedConformanceWitness;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  unint64_t result;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  char v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;

  v41 = a8;
  v45 = a3;
  v46 = a7;
  v49 = a4;
  v48 = a2;
  v42 = *(_QWORD *)(a5 - 8);
  v43 = a1;
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Optional();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v40 - v14;
  v16 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v40 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v21 = (char *)&v40 - v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v48, a6);
  dispatch thunk of Sequence.makeIterator()();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v47 = v21;
  v48 = AssociatedTypeWitness;
  v44 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  v23 = v42;
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
  if (v24(v15, 1, a5) != 1)
  {
    v27 = 0;
    v28 = v23;
    v29 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v29(v11, v15, a5);
    while (1)
    {
      result = OrderedSet._find(_:)();
      if ((v30 & 1) != 0)
      {
        if ((v27 & 1) != 0)
        {
          v27 = 1;
LABEL_6:
          (*(void (**)(char *, uint64_t))(v28 + 8))(v11, a5);
          v25 = v27;
          goto LABEL_7;
        }
        v38 = v43[2];
        v39 = ContiguousArray.count.getter();
        (*(void (**)(char *, uint64_t))(v28 + 8))(v11, a5);
        v25 = 1;
        if (v38 == v39)
          goto LABEL_3;
      }
      else
      {
        v31 = v43;
        v32 = (result >> 3) & 0x1FFFFFFFFFFFFFF8;
        v33 = *(_QWORD *)(*v43 + v32);
        *(_QWORD *)(*v43 + v32) = v33 | (1 << result);
        if ((v33 & (1 << result)) != 0)
          goto LABEL_6;
        v34 = v31[2];
        v35 = v34 + 1;
        if (__OFADD__(v34, 1))
        {
          __break(1u);
          return result;
        }
        v31[2] = v35;
        v36 = ContiguousArray.count.getter();
        (*(void (**)(char *, uint64_t))(v28 + 8))(v11, a5);
        v37 = v35 == v36;
        v25 = (v35 != v36) & v27;
        if (v37 && ((v27 ^ 1) & 1) == 0)
        {
          LOBYTE(v25) = 1;
          goto LABEL_3;
        }
      }
LABEL_7:
      dispatch thunk of IteratorProtocol.next()();
      v27 = v25;
      if (v24(v15, 1, a5) == 1)
        break;
      v29(v11, v15, a5);
    }
  }
  LOBYTE(v25) = 0;
LABEL_3:
  result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v47, v48);
  *v41 = v25;
  return result;
}

uint64_t closure #1 in OrderedSet.isStrictSuperset<A>(of:)@<X0>(_QWORD *a1@<X0>, unsigned int (*a2)(char *, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, BOOL *a8@<X8>)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t AssociatedTypeWitness;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, unsigned int (*)(_QWORD, _QWORD, _QWORD), uint64_t);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t AssociatedConformanceWitness;
  uint64_t v28;
  uint64_t result;
  BOOL v30;
  char v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  BOOL *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  unsigned int (*v48)(char *, uint64_t, uint64_t);
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;

  v46 = a3;
  v51 = a4;
  v48 = a2;
  v49 = a1;
  v45 = a8;
  v50 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Optional();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v44 - v15;
  v17 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v22 = (char *)&v44 - v21;
  v23 = *(void (**)(char *, unsigned int (*)(_QWORD, _QWORD, _QWORD), uint64_t))(v17 + 16);
  v24 = a7;
  v25 = v22;
  v23(v19, (unsigned int (*)(_QWORD, _QWORD, _QWORD))v48, a6);
  dispatch thunk of Sequence.makeIterator()();
  v26 = v46;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
  if (v48(v16, 1, a5) != 1)
  {
    v47 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
    v47(v12, v16, a5);
    while (1)
    {
      result = OrderedSet._find(_:)();
      if ((v31 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t))(v50 + 8))(v12, a5);
LABEL_14:
        result = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v25, AssociatedTypeWitness);
        v30 = 0;
        goto LABEL_15;
      }
      v32 = v49;
      v33 = ((unint64_t)result >> 3) & 0x1FFFFFFFFFFFFFF8;
      v34 = *(_QWORD *)(*v49 + v33);
      *(_QWORD *)(*v49 + v33) = v34 | (1 << result);
      if ((v34 & (1 << result)) != 0)
      {
        (*(void (**)(char *, uint64_t))(v50 + 8))(v12, a5);
      }
      else
      {
        v35 = v16;
        v36 = AssociatedConformanceWitness;
        v37 = v25;
        v38 = AssociatedTypeWitness;
        v39 = v26;
        v40 = v24;
        v41 = v32[2];
        v42 = v41 + 1;
        if (__OFADD__(v41, 1))
        {
          __break(1u);
          return result;
        }
        v32[2] = v42;
        v46 = ContiguousArray.count.getter();
        (*(void (**)(char *, uint64_t))(v50 + 8))(v12, a5);
        v43 = v42 == v46;
        v24 = v40;
        v26 = v39;
        AssociatedTypeWitness = v38;
        v25 = v37;
        AssociatedConformanceWitness = v36;
        v16 = v35;
        if (v43)
          goto LABEL_14;
      }
      dispatch thunk of IteratorProtocol.next()();
      if (v48(v16, 1, a5) == 1)
        break;
      v47(v12, v16, a5);
    }
  }
  (*(void (**)(char *, uint64_t))(v44 + 8))(v25, AssociatedTypeWitness);
  v28 = v49[2];
  result = ContiguousArray.count.getter();
  v30 = v28 < result;
LABEL_15:
  *v45 = v30;
  return result;
}

uint64_t partial apply for closure #1 in OrderedSet.isStrictSubset<A>(of:)(uint64_t a1)
{
  return partial apply for closure #1 in OrderedSet.isSubset<A>(of:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in OrderedSet.isStrictSubset<A>(of:));
}

uint64_t partial apply for closure #1 in OrderedSet.isStrictSuperset<A>(of:)(uint64_t a1)
{
  return partial apply for closure #1 in OrderedSet.isSubset<A>(of:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in OrderedSet.isStrictSuperset<A>(of:));
}

uint64_t partial apply for closure #1 in OrderedSet.isSubset<A>(of:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[6], v2[7], v2[8], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t Surface.dataType.getter(unsigned __int8 a1)
{
  if (a1 < 3u)
    return 53;
  else
    return 54;
}

uint64_t ShaderType.dataType.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 54;
  else
    return 53;
}

unint64_t SGDataType.stringValue.getter(uint64_t a1)
{
  unint64_t result;

  result = 1819242338;
  switch(a1)
  {
    case 0:
      result = 0x64696C61766E69;
      break;
    case 1:
      return result;
    case 2:
      result = 0x7261686375;
      break;
    case 3:
      result = 7630441;
      break;
    case 6:
      result = 1953393013;
      break;
    case 7:
      result = 1718378856;
      break;
    case 9:
      result = 0x74616F6C66;
      break;
    case 10:
      result = 0x65646F63656D6974;
      break;
    case 11:
      result = 0x676E69727473;
      break;
    case 12:
      result = 0x6E656B6F74;
      break;
    case 13:
      result = 0x7465737361;
      break;
    case 14:
      result = 0x663278697274616DLL;
      break;
    case 15:
      result = 0x663378697274616DLL;
      break;
    case 17:
      result = 0x663478697274616DLL;
      break;
    case 18:
      result = 0x6674617571;
      break;
    case 20:
      result = 0x6874617571;
      break;
    case 21:
      result = 0x3274616F6C66;
      break;
    case 22:
      result = 0x32666C6168;
      break;
    case 24:
      result = 846491241;
      break;
    case 25:
      result = 0x3374616F6C66;
      break;
    case 26:
      result = 0x33666C6168;
      break;
    case 28:
      result = 863268457;
      break;
    case 29:
      result = 0x3474616F6C66;
      break;
    case 30:
      result = 0x34666C6168;
      break;
    case 31:
      result = 880045673;
      break;
    case 32:
      result = 0x6633746E696F70;
      break;
    case 33:
      result = 0x6833746E696F70;
      break;
    case 35:
      result = 0x66336C616D726F6ELL;
      break;
    case 36:
      result = 0x68336C616D726F6ELL;
      break;
    case 38:
      result = 0x6633726F74636576;
      break;
    case 39:
      result = 0x6833726F74636576;
      break;
    case 41:
      result = 0x6633726F6C6F63;
      break;
    case 42:
      result = 0x6833726F6C6F63;
      break;
    case 44:
      result = 0x6634726F6C6F63;
      break;
    case 45:
      result = 0x6834726F6C6F63;
      break;
    case 47:
      result = 0x64726F6F43786574;
      break;
    case 49:
      result = 0x64726F6F43786574;
      break;
    case 50:
      result = 0x64726F6F43786574;
      break;
    case 52:
      result = 0x64726F6F43786574;
      break;
    case 53:
      result = 0x5365636166727573;
      break;
    case 54:
      result = 0xD000000000000010;
      break;
    case 55:
      result = 0x33726F6C6F436763;
      break;
    case 56:
      result = 0x34726F6C6F436763;
      break;
    default:
      result = 0xD000000000000014;
      break;
  }
  return result;
}

uint64_t SGDataType.vectorElementType()(uint64_t a1)
{
  uint64_t result;

  result = 0;
  switch(a1)
  {
    case 3:
    case 7:
    case 9:
      result = a1;
      break;
    case 14:
    case 15:
    case 17:
    case 18:
    case 21:
    case 25:
    case 29:
    case 32:
    case 35:
    case 38:
    case 41:
    case 44:
    case 49:
    case 52:
      result = 9;
      break;
    case 20:
    case 22:
    case 26:
    case 30:
    case 33:
    case 36:
    case 39:
    case 42:
    case 45:
    case 47:
    case 50:
    case 55:
    case 56:
      result = 7;
      break;
    case 24:
    case 28:
    case 31:
      result = 3;
      break;
    default:
      return result;
  }
  return result;
}

BOOL static Surface.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

Swift::Int static SGDataType.invalidMaterialInputTypes.getter()
{
  return specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of static SGDataType.invalidMaterialInputTypes.getter);
}

uint64_t SGDataType.canonicalized()(uint64_t result)
{
  uint64_t v1;

  v1 = result - 32;
  if ((unint64_t)(result - 32) <= 0x18 && ((0x1F680DBu >> v1) & 1) != 0)
    return qword_245FC42E8[v1];
  return result;
}

unint64_t SGDataTypeStorage.bitPattern.getter()
{
  uint64_t v0;
  unsigned __int8 v1;
  unsigned int v2;
  unsigned int v4[16];
  char v5;

  outlined init with take of SGDataTypeStorage(v0, (uint64_t)v4);
  switch(v5)
  {
    case 0:
      v1 = 0;
      v2 = v4[0] & 1;
      break;
    case 1:
      v1 = 0;
      v2 = LOBYTE(v4[0]);
      break;
    case 2:
    case 3:
    case 5:
      v1 = 0;
      v2 = v4[0];
      break;
    case 4:
      v1 = 0;
      v2 = LOWORD(v4[0]);
      break;
    default:
      v2 = 0;
      v1 = 1;
      break;
  }
  return v2 | ((unint64_t)v1 << 32);
}

void SGDataTypeStorage.valueString.getter()
{
  uint64_t v0;
  _BYTE v1[80];

  outlined init with take of SGDataTypeStorage(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_245F6C824()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  CGColor *v10;

  outlined retain of SGDataTypeStorage(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of SGDataTypeStorage);
  outlined retain of SGDataTypeStorage(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of SGDataTypeStorage);
  specialized CGColorCodingContainer.init(_:)(v10);
  v3 = v2;
  v5 = v4;
  v6 = swift_bridgeObjectRetain();
  v7 = MEMORY[0x24954B1D8](v6, MEMORY[0x24BEE50B0]);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 2112032;
  v8._object = (void *)0xE300000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = v3;
  v9._object = v5;
  String.append(_:)(v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  outlined retain of SGDataTypeStorage(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of SGDataTypeStorage);
  return v7;
}

BOOL Surface.shaderType.getter(unsigned __int8 a1)
{
  return a1 > 2u;
}

uint64_t CGColorCodingContainer.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;

  v12 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CGColorCodingContainer.CodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v15 = a2;
  v14 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CGFloat]);
  lazy protocol witness table accessor for type [CGFloat] and conformance <A> [A](&lazy protocol witness table cache variable for type [CGFloat] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x24BEE12A0]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CGColorCodingContainer.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x617073726F6C6F63;
  else
    return 0x6E656E6F706D6F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CGColorCodingContainer.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized CGColorCodingContainer.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CGColorCodingContainer.CodingKeys()
{
  lazy protocol witness table accessor for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CGColorCodingContainer.CodingKeys()
{
  lazy protocol witness table accessor for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance CGColorCodingContainer@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = specialized CGColorCodingContainer.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CGColorCodingContainer(_QWORD *a1)
{
  uint64_t *v1;

  return CGColorCodingContainer.encode(to:)(a1, *v1, v1[1], v1[2]);
}

void SGDataTypeStorage.init(type:scalar:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _BYTE v6[80];

  specialized SGDataTypeStorage.init(type:scalar:)(a2, a1, (uint64_t)v6);

  if (!v3)
    outlined init with take of SGDataTypeStorage((uint64_t)v6, a3);
}

void SGDataTypeStorage.init(type:value:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _BYTE v5[80];

  specialized SGDataTypeStorage.init(type:value:)(a1, a2, (uint64_t)v5);
  if (!v3)
    outlined init with take of SGDataTypeStorage((uint64_t)v5, a3);
}

ShaderGraph::SGDataTypeStorage::CodingKeys_optional __swiftcall SGDataTypeStorage.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  ShaderGraph::SGDataTypeStorage::CodingKeys_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SGDataTypeStorage.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1)
    v4.value = ShaderGraph_SGDataTypeStorage_CodingKeys_value;
  else
    v4.value = ShaderGraph_SGDataTypeStorage_CodingKeys_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

ShaderGraph::SGDataTypeStorage::CodingKeys_optional __swiftcall SGDataTypeStorage.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  ShaderGraph::SGDataTypeStorage::CodingKeys_optional v4;

  object = stringValue._object;
  v2._countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SGDataTypeStorage.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1)
    v4.value = ShaderGraph_SGDataTypeStorage_CodingKeys_value;
  else
    v4.value = ShaderGraph_SGDataTypeStorage_CodingKeys_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

ShaderGraph::SGDataTypeStorage::CodingKeys_optional __swiftcall SGDataTypeStorage.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (ShaderGraph::SGDataTypeStorage::CodingKeys_optional)2;
}

uint64_t SGDataTypeStorage.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t SGDataTypeStorage.CodingKeys.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x65756C6176;
  else
    return 1701869940;
}

uint64_t SGDataTypeStorage.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x65756C6176;
  else
    return 1701869940;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SGDataTypeStorage.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;

  v2 = *a1 == 0;
  if (*a1)
    v3 = 0x65756C6176;
  else
    v3 = 1701869940;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  if (*a2)
    v5 = 0x65756C6176;
  else
    v5 = 1701869940;
  if (*a2)
    v6 = 0xE500000000000000;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SGDataTypeStorage.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SGDataTypeStorage.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SGDataTypeStorage.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SGDataTypeStorage.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;
  char v5;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SGDataTypeStorage.CodingKeys.init(rawValue:), *a1);
  result = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SGDataTypeStorage.CodingKeys(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1701869940;
  if (*v1)
    v2 = 0x65756C6176;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xE500000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SGDataTypeStorage.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x65756C6176;
  else
    return 1701869940;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SGDataTypeStorage.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SGDataTypeStorage.CodingKeys.init(rawValue:), v3);
  result = swift_bridgeObjectRelease();
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SGDataTypeStorage.CodingKeys()
{
  lazy protocol witness table accessor for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SGDataTypeStorage.CodingKeys()
{
  lazy protocol witness table accessor for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t SGDataTypeStorage.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v5[80];

  result = specialized SGDataTypeStorage.init(from:)(a1, (uint64_t)v5);
  if (!v2)
    return outlined init with take of SGDataTypeStorage((uint64_t)v5, a2);
  return result;
}

void SGDataTypeStorage.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE v5[80];
  _BYTE v6[80];

  v2 = v1;
  outlined init with take of SGDataTypeStorage(v2, (uint64_t)v5);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SGDataTypeStorage.CodingKeys>);
  MEMORY[0x24BDAC7A8](v4);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of SGDataTypeStorage(v2, (uint64_t)v6);
  __asm { BR              X10 }
}

uint64_t sub_245F6E3E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 304) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    *(_BYTE *)(v4 - 304) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
}

void sub_245F6EFA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  CGColor *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *(CGColor **)(v6 - 192);
  *(_BYTE *)(v6 - 304) = 0;
  v8 = v5;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    outlined retain of SGDataTypeStorage(v3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of SGDataTypeStorage);
    *(_QWORD *)(v6 - 304) = specialized CGColorCodingContainer.init(_:)(v7);
    *(_QWORD *)(v6 - 296) = v9;
    *(_QWORD *)(v6 - 288) = v10;
    *(_BYTE *)(v6 - 65) = 1;
    lazy protocol witness table accessor for type CGColorCodingContainer and conformance CGColorCodingContainer();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    outlined retain of SGDataTypeStorage(v3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of SGDataTypeStorage);
    swift_bridgeObjectRelease();
    JUMPOUT(0x245F6EF64);
  }
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v0);
  outlined retain of SGDataTypeStorage(v3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of SGDataTypeStorage);
  JUMPOUT(0x245F6EF78);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SGDataTypeStorage@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v5[80];

  result = specialized SGDataTypeStorage.init(from:)(a1, (uint64_t)v5);
  if (!v2)
    return outlined init with take of SGDataTypeStorage((uint64_t)v5, a2);
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance SGDataTypeStorage(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  outlined init with take of SGDataTypeStorage(v1, (uint64_t)&v3);
  SGDataTypeStorage.encode(to:)(a1);
}

void SGDataTypeStorage.hash(into:)()
{
  uint64_t v0;
  _QWORD v1[10];
  _BYTE v2[80];

  outlined init with take of SGDataTypeStorage(v0, (uint64_t)v1);
  outlined init with take of SGDataTypeStorage(v0, (uint64_t)v2);
  __asm { BR              X10 }
}

void sub_245F6F1B4()
{
  char v0;

  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v0 & 1);
}

Swift::Int SGDataTypeStorage.hashValue.getter()
{
  Hasher.init(_seed:)();
  SGDataTypeStorage.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SGDataTypeStorage()
{
  uint64_t v0;
  _BYTE v2[80];

  outlined init with take of SGDataTypeStorage(v0, (uint64_t)v2);
  Hasher.init(_seed:)();
  SGDataTypeStorage.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SGDataTypeStorage()
{
  uint64_t v0;
  uint64_t v1;

  outlined init with take of SGDataTypeStorage(v0, (uint64_t)&v1);
  SGDataTypeStorage.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SGDataTypeStorage()
{
  uint64_t v0;
  _BYTE v2[80];

  outlined init with take of SGDataTypeStorage(v0, (uint64_t)v2);
  Hasher.init(_seed:)();
  SGDataTypeStorage.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SGDataTypeStorage(uint64_t a1, uint64_t a2)
{
  char v3;
  _BYTE v5[80];
  _BYTE v6[80];

  outlined init with take of SGDataTypeStorage(a1, (uint64_t)v5);
  outlined init with take of SGDataTypeStorage(a2, (uint64_t)v6);
  specialized static SGDataTypeStorage.== infix(_:_:)((uint64_t)v5);
  return v3 & 1;
}

uint64_t SGDataType.init(_:)(uint64_t a1, unint64_t a2)
{
  return specialized SGDataType.init(_:)(a1, a2);
}

_QWORD *SGDataType.init(from:)(_QWORD *a1)
{
  return specialized SGDataType.init(from:)(a1);
}

uint64_t SGDataType.encode(to:)(_QWORD *a1, uint64_t a2)
{
  _BYTE v4[24];
  uint64_t v5;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  SGDataType.stringValue.getter(a2);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
}

_QWORD *protocol witness for Decodable.init(from:) in conformance SGDataType@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = specialized SGDataType.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SGDataType(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];
  uint64_t v5;

  v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  SGDataType.stringValue.getter(v2);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
}

BOOL static ShaderType.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void ShaderType.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int ShaderType.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

void Surface.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int Surface.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

void specialized SIMD.hash(into:)(__n128 a1)
{
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;
  Swift::UInt32 v4;

  if ((a1.n128_u32[0] & 0x7FFFFFFF) != 0)
    v1 = a1.n128_u32[0];
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
  if ((a1.n128_u32[1] & 0x7FFFFFFF) != 0)
    v2 = a1.n128_u32[1];
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  if ((a1.n128_u32[2] & 0x7FFFFFFF) != 0)
    v3 = a1.n128_u32[2];
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((a1.n128_u32[3] & 0x7FFFFFFF) != 0)
    v4 = a1.n128_u32[3];
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
}

{
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;

  if ((a1.n128_u32[0] & 0x7FFFFFFF) != 0)
    v1 = a1.n128_u32[0];
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
  if ((a1.n128_u32[1] & 0x7FFFFFFF) != 0)
    v2 = a1.n128_u32[1];
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  if ((a1.n128_u32[2] & 0x7FFFFFFF) != 0)
    v3 = a1.n128_u32[2];
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
}

void specialized static SGDataTypeStorage.== infix(_:_:)(uint64_t a1)
{
  _BYTE v1[80];

  outlined init with take of SGDataTypeStorage(a1, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_245F6FBF0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;

  v2 = *(_BYTE *)(v1 - 176);
  outlined init with take of SGDataTypeStorage(v0, v1 - 256);
  if (*(_BYTE *)(v1 - 192))
    v3 = 0;
  else
    v3 = ((v2 & 1) == 0) ^ *(_BYTE *)(v1 - 256);
  return v3 & 1;
}

uint64_t specialized CGColorCodingContainer.init(_:)(CGColor *a1)
{
  uint64_t v1;
  uint64_t v3;
  CGColorSpace *v4;
  CGColorSpace *v5;
  __CFString *v6;
  uint64_t v7;

  v3 = CGColorRef.components.getter();
  if (v3)
  {
    v1 = v3;
    v4 = CGColorGetColorSpace(a1);
    if (v4)
    {
      v5 = v4;
      v6 = (__CFString *)CGColorSpaceCopyName(v4);

      if (v6)
      {
        static String._conditionallyBridgeFromObjectiveC(_:result:)();

      }
    }
    swift_bridgeObjectRelease();
  }
  lazy protocol witness table accessor for type APIError and conformance APIError();
  swift_allocError();
  *(_QWORD *)v7 = a1;
  *(_QWORD *)(v7 + 8) = 0;
  *(_BYTE *)(v7 + 16) = 13;
  swift_willThrow();
  return v1;
}

uint64_t specialized Surface.init(nodeDefID:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000021 && a2 == 0x8000000245FC64B0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  if (a1 == 0xD00000000000001FLL && a2 == 0x8000000245FC64E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if (a1 == 0xD000000000000022 && a2 == 0x8000000245FC6480
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  if (a1 == 0xD000000000000021 && a2 == 0x8000000245FC81B0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  if (a1 == 0xD00000000000002BLL && a2 == 0x8000000245FC81E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD00000000000002FLL && a2 == 0x8000000245FC8210)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) == 0)
      return 4;
    return 3;
  }
}

uint64_t specialized CGColorCodingContainer.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E656E6F706D6F63 && a2 == 0xEA00000000007374;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x617073726F6C6F63 && a2 == 0xEE00656D614E6563)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized CGColorCodingContainer.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CGColorCodingContainer.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  lazy protocol witness table accessor for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CGFloat]);
    v9[7] = 0;
    lazy protocol witness table accessor for type [CGFloat] and conformance <A> [A](&lazy protocol witness table cache variable for type [CGFloat] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x24BEE12D0]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v7 = v10;
    v9[6] = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

id specialized SGDataTypeStorage.init(type:scalar:)@<X0>(id a1@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  id result;
  unsigned int v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  switch(a2)
  {
    case 1:
      result = objc_msgSend(a1, sel_BOOLValue);
      v7 = 0;
      v6 = result;
      goto LABEL_9;
    case 2:
      result = objc_msgSend(a1, sel_unsignedCharValue);
      v6 = result;
      v7 = 1;
      goto LABEL_9;
    case 3:
      result = objc_msgSend(a1, sel_intValue);
      v6 = result;
      v7 = 2;
      goto LABEL_9;
    case 6:
      result = objc_msgSend(a1, sel_unsignedIntValue);
      v6 = result;
      v7 = 3;
      goto LABEL_9;
    case 7:
      result = objc_msgSend(a1, sel_unsignedShortValue);
      v6 = result;
      v7 = 4;
      goto LABEL_9;
    case 9:
    case 10:
      result = objc_msgSend(a1, sel_floatValue);
      v6 = v5;
      v7 = 5;
LABEL_9:
      *(_QWORD *)a3 = v6;
      *(_OWORD *)(a3 + 8) = 0u;
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 40) = 0u;
      *(_QWORD *)(a3 + 56) = 0;
      *(_BYTE *)(a3 + 64) = v7;
      break;
    default:
      v8 = SGDataType.stringValue.getter(a2);
      v10 = v9;
      lazy protocol witness table accessor for type APIError and conformance APIError();
      swift_allocError();
      *(_QWORD *)v11 = v8;
      *(_QWORD *)(v11 + 8) = v10;
      *(_BYTE *)(v11 + 16) = 2;
      result = (id)swift_willThrow();
      break;
  }
  return result;
}

void specialized SGDataTypeStorage.init(type:value:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  void *v3;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  __int128 v43;
  _OWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  unint64_t v54;
  unint64_t *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  id v93;

  switch(a1)
  {
    case 14:
      toSIMDMat2fCols(_:)();
      v6 = v3;
      if (v3)
        goto LABEL_31;
      v59 = v11;
      v62 = v10;

      *(_QWORD *)&v12 = v62;
      *((_QWORD *)&v12 + 1) = v59;
      v13 = 0uLL;
      v14 = 16;
      v26 = 0uLL;
      v27 = 0uLL;
      goto LABEL_27;
    case 15:
      toSIMDMat3fCols(_:)();
      v6 = v3;
      if (v3)
        goto LABEL_31;
      v60 = v16;
      v63 = v15;
      v57 = v17;

      v26 = v57;
      v13 = v60;
      v12 = v63;
      v27 = 0uLL;
      v14 = 17;
      goto LABEL_27;
    case 17:
      toSIMDMat4fCols(_:)();
      v6 = v3;
      if (v3)
        goto LABEL_31;
      v61 = v23;
      v64 = v22;
      v56 = v25;
      v58 = v24;

      v27 = v56;
      v26 = v58;
      v13 = v61;
      v12 = v64;
      v14 = 18;
LABEL_27:
      *(_OWORD *)a3 = v12;
      *(_OWORD *)(a3 + 16) = v13;
      *(_OWORD *)(a3 + 32) = v26;
      *(_OWORD *)(a3 + 48) = v27;
      *(_BYTE *)(a3 + 64) = v14;
      return;
    case 18:
    case 29:
    case 44:
      NSArray.validateExactCount(_:)(4uLL);
      v6 = v3;
      if (!v3)
        goto LABEL_11;
      goto LABEL_31;
    case 20:
    case 30:
    case 45:
      NSArray.validateExactCount(_:)(4uLL);
      v6 = v3;
      if (!v3)
        goto LABEL_13;
      goto LABEL_31;
    case 21:
    case 49:
      NSArray.validateExactCount(_:)(2uLL);
      v6 = v3;
      if (!v3)
        goto LABEL_11;
      goto LABEL_31;
    case 22:
    case 47:
      NSArray.validateExactCount(_:)(2uLL);
      v6 = v3;
      if (!v3)
        goto LABEL_13;
      goto LABEL_31;
    case 24:
      NSArray.validateExactCount(_:)(2uLL);
      v6 = v3;
      if (!v3)
        goto LABEL_26;
      goto LABEL_31;
    case 25:
    case 32:
    case 35:
    case 38:
    case 41:
    case 52:
      NSArray.validateExactCount(_:)(3uLL);
      v6 = v3;
      if (v3)
        goto LABEL_31;
LABEL_11:
      *(_QWORD *)&v79 = 0;
      static Array._conditionallyBridgeFromObjectiveC(_:result:)();
      v7 = 0xE700000000000000;
      *(_QWORD *)&v65 = 0x7961727241534ELL;
      *((_QWORD *)&v65 + 1) = 0xE700000000000000;
      v8 = 0x74616F6C465BLL;
      goto LABEL_28;
    case 26:
    case 33:
    case 36:
    case 39:
    case 42:
    case 50:
      NSArray.validateExactCount(_:)(3uLL);
      v6 = v3;
      if (v3)
        goto LABEL_31;
LABEL_13:
      *(_QWORD *)&v79 = 0;
      static Array._conditionallyBridgeFromObjectiveC(_:result:)();
      *(_QWORD *)&v65 = 0x7961727241534ELL;
      *((_QWORD *)&v65 + 1) = 0xE700000000000000;
      v9 = 0x5D3631746E49555BLL;
      v7 = 0xE800000000000000;
      goto LABEL_29;
    case 28:
      NSArray.validateExactCount(_:)(3uLL);
      v6 = v3;
      if (!v3)
        goto LABEL_26;
      goto LABEL_31;
    case 31:
      NSArray.validateExactCount(_:)(4uLL);
      v6 = v3;
      if (v3)
        goto LABEL_31;
LABEL_26:
      *(_QWORD *)&v79 = 0;
      static Array._conditionallyBridgeFromObjectiveC(_:result:)();
      v7 = 0xE700000000000000;
      *(_QWORD *)&v65 = 0x7961727241534ELL;
      *((_QWORD *)&v65 + 1) = 0xE700000000000000;
      v8 = 0x3233746E495BLL;
LABEL_28:
      v9 = v8 & 0xFFFFFFFFFFFFLL | 0x5D000000000000;
LABEL_29:
      *(_QWORD *)&v66 = v9;
      *((_QWORD *)&v66 + 1) = v7;
      _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi1_((uint64_t)&v65);
      outlined init with take of SGInternalError.ErrorType(&v65, &v79);
      lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
      v92 = 0uLL;
      v6 = (void *)swift_allocError();
      v28 = v80;
      *v29 = v79;
      v29[1] = v28;
      v30 = v84;
      v32 = v81;
      v31 = v82;
      v29[4] = v83;
      v29[5] = v30;
      v29[2] = v32;
      v29[3] = v31;
      v33 = v88;
      v35 = v85;
      v34 = v86;
      v29[8] = v87;
      v29[9] = v33;
      v29[6] = v35;
      v29[7] = v34;
      v36 = v92;
      v38 = v89;
      v37 = v90;
      v29[12] = v91;
      v29[13] = v36;
      v29[10] = v38;
      v29[11] = v37;
LABEL_30:
      swift_willThrow();
LABEL_31:
      v93 = v6;
      v39 = v6;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      if (swift_dynamicCast())
      {

        v75 = v89;
        v76 = v90;
        v77 = v91;
        v78 = v92;
        v71 = v85;
        v72 = v86;
        v73 = v87;
        v74 = v88;
        v67 = v81;
        v68 = v82;
        v69 = v83;
        v70 = v84;
        v65 = v79;
        v66 = v80;
        lazy protocol witness table accessor for type APIError and conformance APIError();
        v40 = swift_allocError();
        *(_OWORD *)v41 = xmmword_245FBFF40;
        *(_BYTE *)(v41 + 16) = 21;
        lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
        v42 = (void *)swift_allocError();
        v43 = v66;
        *v44 = v65;
        v44[1] = v43;
        v45 = v70;
        v47 = v67;
        v46 = v68;
        v44[4] = v69;
        v44[5] = v45;
        v44[2] = v47;
        v44[3] = v46;
        v48 = v74;
        v50 = v71;
        v49 = v72;
        v44[8] = v73;
        v44[9] = v48;
        v44[6] = v50;
        v44[7] = v49;
        v51 = v78;
        v53 = v75;
        v52 = v76;
        v44[12] = v77;
        v44[13] = v51;
        v44[10] = v53;
        v44[11] = v52;
        outlined retain of SGInternalError((uint64_t)&v65);
        v54 = specialized NestedError.init(_:_:)(v40, v42);
        lazy protocol witness table accessor for type NestedError and conformance NestedError();
        swift_allocError();
        *v55 = v54;
        swift_willThrow();

        outlined release of SGInternalError((uint64_t)&v65);
      }
      else
      {

      }
      return;
    default:
      v18 = SGDataType.stringValue.getter(a1);
      v20 = v19;
      lazy protocol witness table accessor for type APIError and conformance APIError();
      v6 = (void *)swift_allocError();
      *(_QWORD *)v21 = v18;
      *(_QWORD *)(v21 + 8) = v20;
      *(_BYTE *)(v21 + 16) = 3;
      goto LABEL_30;
  }
}

uint64_t specialized SGDataTypeStorage.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  BOOL v13;
  char v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  const char *v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  __int128 v40;
  __int128 v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void *v58;
  __CFString *v59;
  CGColorSpace *v60;
  CGColorRef v61;
  __CFString *v62;
  CGColorRef v63;
  Swift::String v64;
  Swift::String v65;
  __int128 v66;
  uint64_t v67;
  Swift::String v68;
  Swift::String v69;
  Swift::String v70;
  Swift::String v71;
  __int128 v72;
  uint64_t v73;
  Swift::String v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _OWORD v83[13];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SGDataTypeStorage.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v81 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  lazy protocol witness table accessor for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v81);
  v80 = v6;
  LOBYTE(v84) = 0;
  v11 = KeyedDecodingContainer.decode(_:forKey:)();
  v12 = v10;
  v13 = v11 == 1819242338 && v10 == (void *)0xE400000000000000;
  if (!v13 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    v24 = v11 == 0x7261686375 && v12 == (void *)0xE500000000000000;
    if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      LOBYTE(v84) = 1;
      LOBYTE(v21) = KeyedDecodingContainer.decode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      v16 = 0;
      v17 = 0;
      v78 = 0;
      v79 = 0;
      v77 = 0;
      v18 = 0;
      v19 = 0;
      v21 = v21;
      v20 = 1;
      goto LABEL_9;
    }
    v25 = v11 == 7630441 && v12 == (void *)0xE300000000000000;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      LOBYTE(v84) = 1;
      LODWORD(v21) = KeyedDecodingContainer.decode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      v16 = 0;
      v17 = 0;
      v78 = 0;
      v79 = 0;
      v77 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 2;
      v21 = v21;
      goto LABEL_9;
    }
    v26 = v11 == 1953393013 && v12 == (void *)0xE400000000000000;
    if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      LOBYTE(v84) = 1;
      LODWORD(v21) = KeyedDecodingContainer.decode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      v16 = 0;
      v17 = 0;
      v78 = 0;
      v79 = 0;
      v77 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 3;
      v21 = v21;
      goto LABEL_9;
    }
    v27 = v11 == 1718378856 && v12 == (void *)0xE400000000000000;
    if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      LOBYTE(v84) = 1;
      LOWORD(v21) = KeyedDecodingContainer.decode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      v16 = 0;
      v17 = 0;
      v78 = 0;
      v79 = 0;
      v77 = 0;
      v18 = 0;
      v19 = 0;
      v21 = (unsigned __int16)v21;
      v20 = 4;
      goto LABEL_9;
    }
    if (v11 == 0x74616F6C66 && v12 == (void *)0xE500000000000000
      || (v28 = v5, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      swift_bridgeObjectRelease();
      LOBYTE(v84) = 1;
      KeyedDecodingContainer.decode(_:forKey:)();
      v30 = v29;
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      v16 = 0;
      v17 = 0;
      v78 = 0;
      v79 = 0;
      v77 = 0;
      v18 = 0;
      v19 = 0;
      v21 = v30;
      v20 = 5;
      goto LABEL_9;
    }
    if (v11 == 0x676E69727473 && v12 == (void *)0xE600000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      LOBYTE(v84) = 1;
      v31 = KeyedDecodingContainer.decode(_:forKey:)();
      v75 = v32;
      v76 = v31;
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      v17 = 0;
      v78 = 0;
      v79 = 0;
      v77 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 6;
      v16 = v75;
      v21 = v76;
      goto LABEL_9;
    }
    if (v11 == 0x6632726F74636576 && v12 == (void *)0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
      LOBYTE(v83[0]) = 1;
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD2<Float> and conformance SIMD2<A>, &demangling cache variable for type metadata for SIMD2<Float>, MEMORY[0x24BEE40E8]);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      v16 = 0;
      v17 = 0;
      v78 = 0;
      v79 = 0;
      v77 = 0;
      v18 = 0;
      v19 = 0;
      v21 = v84;
      v20 = 7;
      goto LABEL_9;
    }
    if (v11 == 0x6633726F74636576 && v12 == (void *)0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      LOBYTE(v83[0]) = 1;
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>, MEMORY[0x24BEE4118]);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      v17 = 0;
      v78 = 0;
      v79 = 0;
      v77 = 0;
      v18 = 0;
      v19 = 0;
      v16 = *((_QWORD *)&v84 + 1);
      v21 = v84;
      v20 = 8;
      goto LABEL_9;
    }
    if (v11 == 0x6634726F74636576 && v12 == (void *)0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Float>);
      LOBYTE(v83[0]) = 1;
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, &demangling cache variable for type metadata for SIMD4<Float>, MEMORY[0x24BEE4178]);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      v17 = 0;
      v78 = 0;
      v79 = 0;
      v77 = 0;
      v18 = 0;
      v19 = 0;
      v16 = *((_QWORD *)&v84 + 1);
      v21 = v84;
      v20 = 9;
      goto LABEL_9;
    }
    if (v11 == 0x6832726F74636576 && v12 == (void *)0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<UInt16>);
      LOBYTE(v83[0]) = 1;
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD2<UInt16> and conformance SIMD2<A>, &demangling cache variable for type metadata for SIMD2<UInt16>, MEMORY[0x24BEE40E8]);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      v16 = 0;
      v17 = 0;
      v78 = 0;
      v79 = 0;
      v77 = 0;
      v18 = 0;
      v19 = 0;
      v21 = v84;
      v20 = 10;
      goto LABEL_9;
    }
    if (v11 == 0x6833726F74636576 && v12 == (void *)0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<UInt16>);
      LOBYTE(v83[0]) = 1;
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD3<UInt16> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<UInt16>, MEMORY[0x24BEE4118]);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      v16 = 0;
      v17 = 0;
      v78 = 0;
      v79 = 0;
      v77 = 0;
      v18 = 0;
      v19 = 0;
      v21 = v84;
      v20 = 11;
      goto LABEL_9;
    }
    if (v11 == 0x6834726F74636576 && v12 == (void *)0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<UInt16>);
      LOBYTE(v83[0]) = 1;
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD4<UInt16> and conformance SIMD4<A>, &demangling cache variable for type metadata for SIMD4<UInt16>, MEMORY[0x24BEE4178]);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      v16 = 0;
      v17 = 0;
      v78 = 0;
      v79 = 0;
      v77 = 0;
      v18 = 0;
      v19 = 0;
      v21 = v84;
      v20 = 12;
      goto LABEL_9;
    }
    if (v11 == 0x6932726F74636576 && v12 == (void *)0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Int32>);
      LOBYTE(v83[0]) = 1;
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD2<Int32> and conformance SIMD2<A>, &demangling cache variable for type metadata for SIMD2<Int32>, MEMORY[0x24BEE40E8]);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      v16 = 0;
      v17 = 0;
      v78 = 0;
      v79 = 0;
      v77 = 0;
      v18 = 0;
      v19 = 0;
      v21 = v84;
      v20 = 13;
      goto LABEL_9;
    }
    if (v11 == 0x6933726F74636576 && v12 == (void *)0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Int32>);
      LOBYTE(v83[0]) = 1;
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD3<Int32> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Int32>, MEMORY[0x24BEE4118]);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      v17 = 0;
      v78 = 0;
      v79 = 0;
      v77 = 0;
      v18 = 0;
      v19 = 0;
      v16 = *((_QWORD *)&v84 + 1);
      v21 = v84;
      v20 = 14;
      goto LABEL_9;
    }
    if (v11 == 0x6934726F74636576 && v12 == (void *)0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Int32>);
      LOBYTE(v83[0]) = 1;
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD4<Int32> and conformance SIMD4<A>, &demangling cache variable for type metadata for SIMD4<Int32>, MEMORY[0x24BEE4178]);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      v17 = 0;
      v78 = 0;
      v79 = 0;
      v77 = 0;
      v18 = 0;
      v19 = 0;
      v16 = *((_QWORD *)&v84 + 1);
      v21 = v84;
      v20 = 15;
      goto LABEL_9;
    }
    if (v11 == 0x663278697274616DLL && v12 == (void *)0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD2<Float>]);
      LOBYTE(v83[0]) = 1;
      lazy protocol witness table accessor for type [SIMD2<Float>] and conformance <A> [A]();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v33 = *(_QWORD *)(v84 + 16);
      if (v33 == 2)
      {
        v21 = *(_QWORD *)(v84 + 32);
        v34 = *(_QWORD *)(v84 + 40);
        swift_bridgeObjectRelease();
        v35 = v8;
        v16 = v34;
        (*(void (**)(char *, uint64_t))(v80 + 8))(v35, v28);
        v17 = 0;
        v78 = 0;
        v79 = 0;
        v77 = 0;
        v18 = 0;
        v19 = 0;
        v20 = 16;
        goto LABEL_9;
      }
      _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi6_((uint64_t)v83);
      *(_QWORD *)&v84 = 0;
      *((_QWORD *)&v84 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(61);
      v36 = "Incorrect number of columns for matrix2f. Expected 2, got ";
      goto LABEL_88;
    }
    if (v11 == 0x663378697274616DLL && v12 == (void *)0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD3<Float>]);
      LOBYTE(v83[0]) = 1;
      lazy protocol witness table accessor for type [SIMD3<Float>] and conformance <A> [A]();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v33 = *(_QWORD *)(v84 + 16);
      if (v33 == 3)
      {
        v21 = *(_QWORD *)(v84 + 32);
        v52 = *(_QWORD *)(v84 + 40);
        v17 = *(_QWORD *)(v84 + 48);
        v53 = *(_QWORD *)(v84 + 56);
        v77 = *(_QWORD *)(v84 + 72);
        v78 = *(_QWORD *)(v84 + 64);
        v79 = v53;
        swift_bridgeObjectRelease();
        v54 = v8;
        v16 = v52;
        (*(void (**)(char *, uint64_t))(v80 + 8))(v54, v28);
        v18 = 0;
        v19 = 0;
        v20 = 17;
        goto LABEL_9;
      }
      _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi6_((uint64_t)v83);
      *(_QWORD *)&v84 = 0;
      *((_QWORD *)&v84 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(61);
      v36 = "Incorrect number of columns for matrix3f. Expected 3, got ";
      goto LABEL_88;
    }
    if (v11 == 0x663478697274616DLL && v12 == (void *)0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD4<Float>]);
      LOBYTE(v83[0]) = 1;
      lazy protocol witness table accessor for type [SIMD4<Float>] and conformance <A> [A]();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v33 = *(_QWORD *)(v84 + 16);
      if (v33 == 4)
      {
        v21 = *(_QWORD *)(v84 + 32);
        v75 = *(_QWORD *)(v84 + 40);
        v17 = *(_QWORD *)(v84 + 48);
        v55 = *(_QWORD *)(v84 + 56);
        v77 = *(_QWORD *)(v84 + 72);
        v78 = *(_QWORD *)(v84 + 64);
        v79 = v55;
        v19 = *(_QWORD *)(v84 + 88);
        v18 = *(_QWORD *)(v84 + 80);
        swift_bridgeObjectRelease();
        v56 = v8;
        v16 = v75;
        (*(void (**)(char *, uint64_t))(v80 + 8))(v56, v28);
        v20 = 18;
        goto LABEL_9;
      }
      _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi6_((uint64_t)v83);
      *(_QWORD *)&v84 = 0;
      *((_QWORD *)&v84 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(61);
      v36 = "Incorrect number of columns for matrix4f. Expected 4, got ";
LABEL_88:
      v37._object = (void *)((unint64_t)(v36 - 32) | 0x8000000000000000);
      v37._countAndFlagsBits = 0xD00000000000003ALL;
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      v82 = v33;
      v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      v39._countAndFlagsBits = 46;
      v39._object = (void *)0xE100000000000000;
      String.append(_:)(v39);
LABEL_89:
      v40 = v84;
      outlined init with take of SGInternalError.ErrorType(v83, &v84);
      v97 = v40;
      lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
      swift_allocError();
      v41 = v85;
      *v42 = v84;
      v42[1] = v41;
      v43 = v89;
      v45 = v86;
      v44 = v87;
      v42[4] = v88;
      v42[5] = v43;
      v42[2] = v45;
      v42[3] = v44;
      v46 = v93;
      v48 = v90;
      v47 = v91;
      v42[8] = v92;
      v42[9] = v46;
      v42[6] = v48;
      v42[7] = v47;
      v49 = v97;
      v51 = v94;
      v50 = v95;
      v42[12] = v96;
      v42[13] = v49;
      v42[10] = v51;
      v42[11] = v50;
LABEL_90:
      swift_willThrow();
LABEL_42:
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v28);
      return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v81);
    }
    if (v11 == 0x33726F6C6F636763 && v12 == (void *)0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      LOBYTE(v83[0]) = 1;
      lazy protocol witness table accessor for type CGColorCodingContainer and conformance CGColorCodingContainer();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v57 = *((_QWORD *)&v84 + 1);
      v79 = v84;
      v58 = (void *)v85;
      v59 = (__CFString *)MEMORY[0x24954AF98](*((_QWORD *)&v84 + 1), v85);
      v60 = CGColorSpaceCreateWithName(v59);

      if (v60)
      {
        swift_bridgeObjectRelease();
        v61 = CGColorCreate(v60, (const CGFloat *)(v79 + 32));
        if (v61)
        {
          v21 = (unint64_t)v61;
          (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v28);

          swift_bridgeObjectRelease();
          v16 = 0;
          v17 = 0;
          v78 = 0;
          v79 = 0;
          v77 = 0;
          v18 = 0;
          v19 = 0;
          v20 = 22;
          goto LABEL_9;
        }
        goto LABEL_116;
      }
    }
    else
    {
      if ((v11 != 0x34726F6C6F636763 || v12 != (void *)0xE800000000000000)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi3_((uint64_t)v83);
        *(_QWORD *)&v84 = 0;
        *((_QWORD *)&v84 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(28);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v84 = 0xD00000000000001ALL;
        *((_QWORD *)&v84 + 1) = 0x8000000245FCD940;
        v74._countAndFlagsBits = v11;
        v74._object = v12;
        String.append(_:)(v74);
        swift_bridgeObjectRelease();
        goto LABEL_89;
      }
      swift_bridgeObjectRelease();
      LOBYTE(v83[0]) = 1;
      lazy protocol witness table accessor for type CGColorCodingContainer and conformance CGColorCodingContainer();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v57 = *((_QWORD *)&v84 + 1);
      v79 = v84;
      v58 = (void *)v85;
      v62 = (__CFString *)MEMORY[0x24954AF98](*((_QWORD *)&v84 + 1), v85);
      v60 = CGColorSpaceCreateWithName(v62);

      if (v60)
      {
        swift_bridgeObjectRelease();
        v63 = CGColorCreate(v60, (const CGFloat *)(v79 + 32));
        if (v63)
        {
          v21 = (unint64_t)v63;
          (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v28);

          swift_bridgeObjectRelease();
          v16 = 0;
          v17 = 0;
          v78 = 0;
          v79 = 0;
          v77 = 0;
          v18 = 0;
          v19 = 0;
          v20 = 23;
          goto LABEL_9;
        }
LABEL_116:
        *(_QWORD *)&v84 = 0;
        *((_QWORD *)&v84 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(65);
        v68._countAndFlagsBits = 0xD00000000000002BLL;
        v68._object = (void *)0x8000000245FCD990;
        String.append(_:)(v68);
        v69._countAndFlagsBits = MEMORY[0x24954B1D8](v79, MEMORY[0x24BEE50B0]);
        String.append(_:)(v69);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v70._countAndFlagsBits = 0xD000000000000011;
        v70._object = (void *)0x8000000245FCD9C0;
        String.append(_:)(v70);
        *(_QWORD *)&v83[0] = v60;
        type metadata accessor for CGColorSpaceRef(0);
        _print_unlocked<A, B>(_:_:)();
        v71._countAndFlagsBits = 39;
        v71._object = (void *)0xE100000000000000;
        String.append(_:)(v71);
        v72 = v84;
        lazy protocol witness table accessor for type APIError and conformance APIError();
        swift_allocError();
        *(_OWORD *)v73 = v72;
        *(_BYTE *)(v73 + 16) = 14;
        swift_willThrow();

        goto LABEL_42;
      }
    }
    *(_QWORD *)&v84 = 0;
    *((_QWORD *)&v84 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v84 = 0xD00000000000002ALL;
    *((_QWORD *)&v84 + 1) = 0x8000000245FCD960;
    swift_bridgeObjectRetain();
    v64._countAndFlagsBits = v57;
    v64._object = v58;
    String.append(_:)(v64);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v65._countAndFlagsBits = 39;
    v65._object = (void *)0xE100000000000000;
    String.append(_:)(v65);
    v66 = v84;
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(_OWORD *)v67 = v66;
    *(_BYTE *)(v67 + 16) = 14;
    goto LABEL_90;
  }
  swift_bridgeObjectRelease();
  LOBYTE(v84) = 1;
  v14 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
  v16 = 0;
  v17 = 0;
  v78 = 0;
  v79 = 0;
  v77 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = v14 & 1;
LABEL_9:
  result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v81);
  *(_QWORD *)a2 = v21;
  *(_QWORD *)(a2 + 8) = v16;
  v22 = v79;
  *(_QWORD *)(a2 + 16) = v17;
  *(_QWORD *)(a2 + 24) = v22;
  v23 = v77;
  *(_QWORD *)(a2 + 32) = v78;
  *(_QWORD *)(a2 + 40) = v23;
  *(_QWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = v19;
  *(_BYTE *)(a2 + 64) = v20;
  return result;
}

unint64_t lazy protocol witness table accessor for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGDataTypeStorage.CodingKeys, &type metadata for SGDataTypeStorage.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGDataTypeStorage.CodingKeys, &type metadata for SGDataTypeStorage.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGDataTypeStorage.CodingKeys, &type metadata for SGDataTypeStorage.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGDataTypeStorage.CodingKeys, &type metadata for SGDataTypeStorage.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CGColorCodingContainer and conformance CGColorCodingContainer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGColorCodingContainer and conformance CGColorCodingContainer;
  if (!lazy protocol witness table cache variable for type CGColorCodingContainer and conformance CGColorCodingContainer)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for CGColorCodingContainer, &unk_251712230);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGColorCodingContainer and conformance CGColorCodingContainer);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGColorCodingContainer and conformance CGColorCodingContainer;
  if (!lazy protocol witness table cache variable for type CGColorCodingContainer and conformance CGColorCodingContainer)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for CGColorCodingContainer, &unk_251712230);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGColorCodingContainer and conformance CGColorCodingContainer);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [SIMD4<UInt16>] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [SIMD4<UInt16>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SIMD4<UInt16>] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SIMD4<UInt16>]);
    v2 = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD4<UInt16> and conformance SIMD4<A>, &demangling cache variable for type metadata for SIMD4<UInt16>, MEMORY[0x24BEE4168]);
    result = MEMORY[0x24954C264](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SIMD4<UInt16>] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [SIMD3<UInt16>] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [SIMD3<UInt16>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SIMD3<UInt16>] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SIMD3<UInt16>]);
    v2 = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD3<UInt16> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<UInt16>, MEMORY[0x24BEE4108]);
    result = MEMORY[0x24954C264](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SIMD3<UInt16>] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [SIMD2<UInt16>] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [SIMD2<UInt16>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SIMD2<UInt16>] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SIMD2<UInt16>]);
    v2 = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD2<UInt16> and conformance SIMD2<A>, &demangling cache variable for type metadata for SIMD2<UInt16>, MEMORY[0x24BEE40D8]);
    result = MEMORY[0x24954C264](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SIMD2<UInt16>] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [SIMD4<Float>] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [SIMD4<Float>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SIMD4<Float>] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SIMD4<Float>]);
    v2 = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, &demangling cache variable for type metadata for SIMD4<Float>, MEMORY[0x24BEE4168]);
    result = MEMORY[0x24954C264](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SIMD4<Float>] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [SIMD4<Float>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SIMD4<Float>] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SIMD4<Float>]);
    v2 = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, &demangling cache variable for type metadata for SIMD4<Float>, MEMORY[0x24BEE4178]);
    result = MEMORY[0x24954C264](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SIMD4<Float>] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [SIMD3<Float>] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [SIMD3<Float>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SIMD3<Float>] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SIMD3<Float>]);
    v2 = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>, MEMORY[0x24BEE4108]);
    result = MEMORY[0x24954C264](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SIMD3<Float>] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [SIMD3<Float>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SIMD3<Float>] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SIMD3<Float>]);
    v2 = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>, MEMORY[0x24BEE4118]);
    result = MEMORY[0x24954C264](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SIMD3<Float>] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [SIMD2<Float>] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [SIMD2<Float>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SIMD2<Float>] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SIMD2<Float>]);
    v2 = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD2<Float> and conformance SIMD2<A>, &demangling cache variable for type metadata for SIMD2<Float>, MEMORY[0x24BEE40D8]);
    result = MEMORY[0x24954C264](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SIMD2<Float>] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [SIMD2<Float>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SIMD2<Float>] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SIMD2<Float>]);
    v2 = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD2<Float> and conformance SIMD2<A>, &demangling cache variable for type metadata for SIMD2<Float>, MEMORY[0x24BEE40E8]);
    result = MEMORY[0x24954C264](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SIMD2<Float>] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef;
  if (!lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef)
  {
    type metadata accessor for CGColorRef(255);
    result = MEMORY[0x24954C264](&protocol conformance descriptor for CGColorRef, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef);
  }
  return result;
}

uint64_t specialized SGDataType.init(_:)(uint64_t a1, unint64_t a2)
{
  BOOL v2;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a1 == 1819242338 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7261686375 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 7630441 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1953393013 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 1718378856 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x74616F6C66 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x65646F63656D6974 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x676E69727473 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x6E656B6F74 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x7465737361 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x663278697274616DLL && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x663378697274616DLL && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x663478697274616DLL && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0x6674617571 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0x6874617571 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0x3274616F6C66 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0x32666C6168 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 846491241 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else if (a1 == 0x3374616F6C66 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 25;
  }
  else if (a1 == 0x33666C6168 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 26;
  }
  else if (a1 == 863268457 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 28;
  }
  else if (a1 == 0x3474616F6C66 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 29;
  }
  else if (a1 == 0x34666C6168 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 30;
  }
  else if (a1 == 880045673 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 31;
  }
  else if (a1 == 0x6633746E696F70 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 32;
  }
  else if (a1 == 0x6833746E696F70 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 33;
  }
  else if (a1 == 0x66336C616D726F6ELL && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 35;
  }
  else if (a1 == 0x68336C616D726F6ELL && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 36;
  }
  else if (a1 == 0x6633726F74636576 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 38;
  }
  else if (a1 == 0x6833726F74636576 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 39;
  }
  else if (a1 == 0x6633726F6C6F63 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 41;
  }
  else if (a1 == 0x6833726F6C6F63 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 42;
  }
  else if (a1 == 0x6634726F6C6F63 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 44;
  }
  else if (a1 == 0x6834726F6C6F63 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 45;
  }
  else if (a1 == 0x64726F6F43786574 && a2 == 0xEA00000000006832
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 47;
  }
  else if (a1 == 0x64726F6F43786574 && a2 == 0xEA00000000006632
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 49;
  }
  else if (a1 == 0x64726F6F43786574 && a2 == 0xEA00000000006833
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 50;
  }
  else if (a1 == 0x64726F6F43786574 && a2 == 0xEA00000000006633
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 52;
  }
  else if (a1 == 0x5365636166727573 && a2 == 0xED00007265646168
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 53;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000245FC6360
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
         || a1 == 0x786574726576 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 54;
  }
  else if (a1 == 0x33726F6C6F436763 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 55;
  }
  else if (a1 == 0x34726F6C6F436763 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 56;
  }
  else if (a1 == 0x64696C61766E69 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)logger);
    swift_bridgeObjectRetain();
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v11 = v10;
      *(_DWORD *)v9 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_245E46000, v7, v8, "Unable to construct SGDataType from: %s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v10, -1, -1);
      MEMORY[0x24954C33C](v9, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
}

_QWORD *specialized SGDataType.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  char v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  _QWORD v13[4];

  v3 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v1)
    goto LABEL_7;
  __swift_project_boxed_opaque_existential_1(v13, v13[3]);
  v4 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  v6 = v5;
  swift_bridgeObjectRetain();
  v7 = specialized SGDataType.init(_:)(v4, (unint64_t)v6);
  if ((v8 & 1) != 0)
  {
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = v4;
    v9._object = v6;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 0x61444753206F7420;
    v10._object = (void *)0xEE00657079546174;
    String.append(_:)(v10);
    v3 = (_QWORD *)0xD000000000000012;
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(_QWORD *)v11 = 0xD000000000000012;
    *(_QWORD *)(v11 + 8) = 0x8000000245FCB990;
    *(_BYTE *)(v11 + 16) = 11;
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
LABEL_7:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    return v3;
  }
  v3 = (_QWORD *)v7;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v3;
}

unint64_t lazy protocol witness table accessor for type SGDataTypeStorage and conformance SGDataTypeStorage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGDataTypeStorage and conformance SGDataTypeStorage;
  if (!lazy protocol witness table cache variable for type SGDataTypeStorage and conformance SGDataTypeStorage)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGDataTypeStorage, &type metadata for SGDataTypeStorage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGDataTypeStorage and conformance SGDataTypeStorage);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGDataTypeStorage and conformance SGDataTypeStorage;
  if (!lazy protocol witness table cache variable for type SGDataTypeStorage and conformance SGDataTypeStorage)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGDataTypeStorage, &type metadata for SGDataTypeStorage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGDataTypeStorage and conformance SGDataTypeStorage);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGDataTypeStorage and conformance SGDataTypeStorage;
  if (!lazy protocol witness table cache variable for type SGDataTypeStorage and conformance SGDataTypeStorage)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGDataTypeStorage, &type metadata for SGDataTypeStorage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGDataTypeStorage and conformance SGDataTypeStorage);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShaderType and conformance ShaderType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShaderType and conformance ShaderType;
  if (!lazy protocol witness table cache variable for type ShaderType and conformance ShaderType)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for ShaderType, &type metadata for ShaderType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShaderType and conformance ShaderType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Surface and conformance Surface()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Surface and conformance Surface;
  if (!lazy protocol witness table cache variable for type Surface and conformance Surface)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for Surface, &type metadata for Surface);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Surface and conformance Surface);
  }
  return result;
}

void destroy for SGDataTypeStorage(uint64_t a1)
{
  outlined consume of SGDataTypeStorage(*(void **)a1, *(id *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
}

uint64_t initializeWithCopy for SGDataTypeStorage(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_BYTE *)(a2 + 64);
  outlined copy of SGDataTypeStorage(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  return a1;
}

uint64_t assignWithCopy for SGDataTypeStorage(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_BYTE *)(a2 + 64);
  outlined copy of SGDataTypeStorage(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  v12 = *(void **)a1;
  v13 = *(void **)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_BYTE *)(a1 + 64);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  outlined consume of SGDataTypeStorage(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

__n128 __swift_memcpy65_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for SGDataTypeStorage(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;

  v3 = *(_BYTE *)(a2 + 64);
  v4 = *(void **)a1;
  v6 = *(void **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_BYTE *)(a1 + 64);
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(_BYTE *)(a1 + 64) = v3;
  outlined consume of SGDataTypeStorage(v4, v6, v5, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for SGDataTypeStorage(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xE9 && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 233);
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 <= 0x17)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SGDataTypeStorage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xE8)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 233;
    if (a3 >= 0xE9)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xE9)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)(result + 64) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for SGDataTypeStorage(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t destructiveInjectEnumTag for SGDataTypeStorage(uint64_t result, char a2)
{
  *(_BYTE *)(result + 64) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SGDataTypeStorage()
{
  return &type metadata for SGDataTypeStorage;
}

ValueMetadata *type metadata accessor for SGDataTypeStorage.CodingKeys()
{
  return &type metadata for SGDataTypeStorage.CodingKeys;
}

ValueMetadata *type metadata accessor for ShaderType()
{
  return &type metadata for ShaderType;
}

uint64_t storeEnumTagSinglePayload for Surface(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_245F74B6C + 4 * byte_245FC3DB3[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_245F74BA0 + 4 * byte_245FC3DAE[v4]))();
}

uint64_t sub_245F74BA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_245F74BA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x245F74BB0);
  return result;
}

uint64_t sub_245F74BBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x245F74BC4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_245F74BC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_245F74BD0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Surface()
{
  return &type metadata for Surface;
}

uint64_t destroy for CGColorCodingContainer()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for CGColorCodingContainer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CGColorCodingContainer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for CGColorCodingContainer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for CGColorCodingContainer()
{
  return &unk_251712230;
}

unint64_t lazy protocol witness table accessor for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys;
  if (!lazy protocol witness table cache variable for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for CGColorCodingContainer.CodingKeys, &unk_2517122C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys;
  if (!lazy protocol witness table cache variable for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for CGColorCodingContainer.CodingKeys, &unk_2517122C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys;
  if (!lazy protocol witness table cache variable for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for CGColorCodingContainer.CodingKeys, &unk_2517122C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys;
  if (!lazy protocol witness table cache variable for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for CGColorCodingContainer.CodingKeys, &unk_2517122C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [CGFloat] and conformance <A> [A](unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CGFloat]);
    v8 = a2();
    result = MEMORY[0x24954C264](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CGFloat and conformance CGFloat()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x24954C264](MEMORY[0x24BEE50C0], MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x24954C264](MEMORY[0x24BEE50E8], MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

double _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi3_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0x200000000000000;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  return result;
}

double _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi6_(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 3;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0x200000000000000;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  return result;
}

uint64_t outlined retain of SGInternalError(uint64_t a1)
{
  outlined copy of SGInternalError.ErrorType(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168));
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type NestedError and conformance NestedError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NestedError and conformance NestedError;
  if (!lazy protocol witness table cache variable for type NestedError and conformance NestedError)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for NestedError, &type metadata for NestedError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NestedError and conformance NestedError);
  }
  return result;
}

uint64_t outlined release of SGInternalError(uint64_t a1)
{
  outlined consume of SGInternalError.ErrorType(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi1_(uint64_t result)
{
  *(_QWORD *)(result + 168) = *(_QWORD *)(result + 168) & 0xFC00000000000001 | 0x100000000000000;
  return result;
}

uint64_t storeEnumTagSinglePayload for SGDataTypeStorage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_245F751F0 + 4 * byte_245FC3E11[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_245F75224 + 4 * byte_245FC3E0C[v4]))();
}

uint64_t sub_245F75224(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_245F7522C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x245F75234);
  return result;
}

uint64_t sub_245F75240(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x245F75248);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_245F7524C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_245F75254(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for CGColorCodingContainer.CodingKeys()
{
  return &unk_2517122C8;
}

uint64_t OrderedDictionary.init<A>(grouping:by:)(uint64_t *a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  swift_getAssociatedTypeWitness();
  v15 = type metadata accessor for Array();
  v16 = MEMORY[0x24954C264](MEMORY[0x24BEE12E8], v15);
  v17 = specialized OrderedDictionary.init<A>(_grouping:by:)(a1, a2, a3, a4, v15, a5, a6, v16, a7);
  if (!v7)
    a7 = v17;
  (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a1, a5);
  return a7;
}

uint64_t OrderedDictionary.init()()
{
  uint64_t v0;

  v0 = OrderedSet.init()();
  static Array._allocateUninitialized(_:)();
  ContiguousArray.init(arrayLiteral:)();
  return v0;
}

uint64_t OrderedDictionary.init<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return OrderedDictionary.init<A>(_:uniquingKeysWith:)(a1, a2, a3, a4, a5, a6, a7, a8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized OrderedDictionary.merge<A>(_:uniquingKeysWith:));
}

{
  return OrderedDictionary.init<A>(_:uniquingKeysWith:)(a1, a2, a3, a4, a5, a6, a7, a8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized OrderedDictionary.merge<A>(_:uniquingKeysWith:));
}

uint64_t OrderedDictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return OrderedDictionary.init<A>(uniqueKeysWithValues:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))specialized OrderedDictionary.init<A>(uniqueKeysWithValues:));
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t TupleTypeMetadata2;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t AssociatedConformanceWitness;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t AssociatedTypeWitness;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;

  v55 = a5;
  v47 = a1;
  v10 = *(_QWORD *)(a3 - 8);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v49 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v43 - v14;
  v50 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v20 = type metadata accessor for Optional();
  v53 = *(_QWORD *)(v20 - 8);
  v54 = v20;
  v21 = MEMORY[0x24BDAC7A8](v20);
  v52 = (char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v43 - v24;
  v26 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v45 = (char *)&v43 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedConformanceWitness = a6;
  v28 = v55;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v56 = (char *)&v43 - v29;
  if (type metadata accessor for Dictionary() == a4)
  {
    v40 = v47;
    v41 = specialized OrderedDictionary.init<A>(_uncheckedUniqueKeysWithValues:)(v47, a2, a3, a4, v28, AssociatedConformanceWitness);
    v42 = v26;
    v39 = v41;
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v40, a4);
    return v39;
  }
  else
  {
    v30 = OrderedSet.init()();
    v48 = v31;
    static Array._allocateUninitialized(_:)();
    v32 = ContiguousArray.init(arrayLiteral:)();
    v58 = v30;
    v59 = v48;
    v48 = &v60;
    v60 = v32;
    v46 = a4;
    v43 = dispatch thunk of Sequence.underestimatedCount.getter();
    type metadata accessor for OrderedDictionary(0, a2, a3, v55);
    OrderedDictionary.reserveCapacity(_:)(v43);
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v45, v47, a4);
    dispatch thunk of Sequence.makeIterator()();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    while (1)
    {
      v33 = v52;
      dispatch thunk of IteratorProtocol.next()();
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v25, v33, v54);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v25, 1, TupleTypeMetadata2) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v47, v46);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v56, AssociatedTypeWitness);
        return v58;
      }
      v34 = v26;
      v35 = &v25[*(int *)(TupleTypeMetadata2 + 48)];
      v36 = v50;
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v18, v25, a2);
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v35, a3);
      type metadata accessor for OrderedSet(0, a2, v55, v37);
      result = OrderedSet._append(_:)((uint64_t)v18);
      if ((result & 1) == 0)
        break;
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v49, v15, a3);
      type metadata accessor for ContiguousArray();
      ContiguousArray.append(_:)();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v15, a3);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v18, a2);
      v26 = v34;
    }
    __break(1u);
  }
  return result;
}

uint64_t OrderedDictionary.init<A, B>(uniqueKeys:values:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v31 = a7;
  v35 = a9;
  v13 = *(_QWORD *)(a6 - 8);
  v14 = MEMORY[0x24BDAC7A8](a1);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(void (**)(char *))(v18 + 16);
  v34 = v22;
  v21(v20);
  v23 = Array.init<A>(_:)();
  v32 = v13;
  v33 = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a2, a6);
  Array.init<A>(_:)();
  v24 = ContiguousArray.count.getter();
  result = ContiguousArray.count.getter();
  if (v24 == result)
  {
    v36 = v23;
    v26 = type metadata accessor for ContiguousArray();
    v27 = (uint64_t (*)(char *, uint64_t, uint64_t))MEMORY[0x24954C264](MEMORY[0x24BEE2A58], v26);
    v28 = OrderedSet.init<A>(_:)((uint64_t)&v36, a3, v26, v31, v27);
    swift_retain();
    swift_retain();
    swift_retain();
    v29 = ContiguousArray.count.getter();
    v30 = ContiguousArray.count.getter();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, a6);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v34, a5);
    swift_release();
    swift_release();
    result = swift_release();
    if (v29 == v30)
      return v28;
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t OrderedDictionary.init<A, B>(uncheckedUniqueKeys:values:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *);
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;

  v41 = a4;
  v42 = a2;
  v12 = *(_QWORD *)(a6 - 8);
  v39 = a9;
  v40 = v12;
  v13 = MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v13);
  v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v39 - v21;
  v23 = *(void (**)(char *))(v17 + 16);
  v43 = v24;
  v23((char *)&v39 - v21);
  ((void (*)(char *, char *, uint64_t))v23)(v20, v22, a5);
  v25 = Array.init<A>(_:)();
  v44 = v25;
  v26 = specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)();
  v27 = type metadata accessor for ContiguousArray();
  v28 = MEMORY[0x24954C264](MEMORY[0x24BEE2A58], v27);
  v29 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)((uint64_t)&v44, 0, 1, v26, v27, v28, a7);
  v30 = ContiguousArray.count.getter();
  v31 = 0;
  if (v30 >= 16)
  {
    swift_retain();
    v31 = v29;
  }
  v32 = OrderedSet.init(_uniqueElements:_:)(v25, v31);
  swift_release();
  v33 = *(void (**)(char *, uint64_t))(v17 + 8);
  v33(v22, a5);
  v34 = v40;
  v35 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v15, v42, a6);
  swift_retain();
  swift_retain();
  Array.init<A>(_:)();
  v36 = ContiguousArray.count.getter();
  v37 = ContiguousArray.count.getter();
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v35, a6);
  v33(v43, a5);
  swift_release();
  result = swift_release();
  if (v36 == v37)
    return v32;
  __break(1u);
  return result;
}

uint64_t OrderedDictionary.init(minimumCapacity:persistent:)(Swift::Int a1, Swift::Bool a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;

  v6 = OrderedSet.init(minimumCapacity:persistent:)(a1, a2, a3, a5);
  static Array._allocateUninitialized(_:)();
  ContiguousArray.init(arrayLiteral:)();
  type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(a1);
  return v6;
}

uint64_t OrderedDictionary.init<A>(_uncheckedUniqueKeysWithValues:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return OrderedDictionary.init<A>(uniqueKeysWithValues:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))specialized OrderedDictionary.init<A>(_uncheckedUniqueKeysWithValues:));
}

uint64_t OrderedDictionary.init<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v20;

  v16 = OrderedSet.init()();
  static Array._allocateUninitialized(_:)();
  ContiguousArray.init(arrayLiteral:)();
  v17 = type metadata accessor for OrderedDictionary(0, a4, a5, a7);
  a9(a1, a2, a3, v17, a6, a8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 8))(a1, a6);
  result = v16;
  if (v20)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t OrderedDictionary.init<A>(grouping:by:)(uint64_t *a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;

  v13 = specialized OrderedDictionary.init<A>(_grouping:by:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (!v9)
    v10 = v13;
  (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(a6 - 8) + 8))(a1, a6);
  return v10;
}

uint64_t OrderedDictionary.init<A>(_grouping:by:)(uint64_t *a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;

  v13 = specialized OrderedDictionary.init<A>(_grouping:by:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (!v9)
    v10 = v13;
  (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(a6 - 8) + 8))(a1, a6);
  return v10;
}

uint64_t closure #1 in OrderedDictionary.init<A>(_grouping:by:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v7 - v5, a2);
  return dispatch thunk of RangeReplaceableCollection.append(_:)();
}

uint64_t OrderedDictionary.init<A>(uncheckedUniqueKeysWithValues:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return OrderedDictionary.init<A>(uniqueKeysWithValues:)(a1, a2, a3, a4, a5, a6, specialized OrderedDictionary.init<A>(uncheckedUniqueKeysWithValues:));
}

{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t TupleTypeMetadata2;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v26 = a1;
  v27 = a5;
  v24 = a2;
  v9 = type metadata accessor for LazySequence();
  v28 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v22 - v10;
  v12 = a3;
  v23 = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v13 = type metadata accessor for LazyMapSequence();
  v29 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v22 - v14;
  MEMORY[0x24954B148](a4, a6);
  v16 = (_QWORD *)swift_allocObject();
  v17 = v24;
  v16[2] = v24;
  v16[3] = v12;
  v18 = v27;
  v16[4] = a4;
  v16[5] = v18;
  v16[6] = a6;
  MEMORY[0x24954C264](MEMORY[0x24BEE25B0], v9);
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v9);
  v19 = MEMORY[0x24954C264](MEMORY[0x24BEE2B40], v13);
  v20 = specialized OrderedDictionary.init<A>(_uncheckedUniqueKeysWithValues:)((uint64_t)v15, v17, v23, v13, v18, v19);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(v26, a4);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v15, v13);
  return v20;
}

uint64_t OrderedDictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  uint64_t v9;

  v9 = a7();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a1, a4);
  return v9;
}

uint64_t specialized OrderedDictionary.init<A>(_grouping:by:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  BOOL v14;
  uint64_t result;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;

  v1 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v34 = MEMORY[0x24BEE4AF8];
  v31 = *(_QWORD *)(a1 + 16);
  if (!v31)
    return 0;
  v30 = a1 + 32;
  swift_bridgeObjectRetain();
  v2 = 0;
  v3 = v1;
  while (1)
  {
    v7 = v30 + 32 * v2;
    v8 = *(_QWORD *)v7;
    v9 = *(_QWORD *)(v7 + 8);
    v10 = *(_BYTE *)(v7 + 16);
    v11 = *(_QWORD *)(v34 + 16);
    v33 = *(_QWORD *)(v7 + 24);
    if (v11)
      break;
LABEL_26:
    outlined copy of TextureSource();
    outlined copy of TextureSource();
    swift_retain();
    specialized OrderedSet._appendNew(_:in:)(v8, v9, v10, 0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1);
    v23 = v3[2];
    v22 = v3[3];
    if (v23 >= v22 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
    v3[2] = v23 + 1;
    v24 = v3 + 4;
    v25 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v3[v23 + 4] = MEMORY[0x24BEE4AF8];
    outlined copy of TextureSource();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v3[v23 + 4] = v25;
    v27 = v25;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16) + 1, 1, MEMORY[0x24BEE4AF8]);
      v24[v23] = v27;
    }
    v29 = v27[2];
    v28 = v27[3];
    if (v29 >= v28 >> 1)
    {
      v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v27);
      v24[v23] = v27;
    }
    v4 = v33;
    v27[2] = v29 + 1;
    v5 = &v27[4 * v29];
    v5[4] = v8;
    v5[5] = v9;
    *((_BYTE *)v5 + 48) = v10;
    v6 = v5 + 7;
LABEL_4:
    ++v2;
    *v6 = v4;
    outlined consume of TextureSource();
    outlined consume of TextureSource();
    swift_release();
    if (v2 == v31)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  v12 = 0;
  v13 = (_BYTE *)(v34 + 48);
  while ((*v13 & 1) != 0)
  {
    if ((v10 & 1) != 0)
      goto LABEL_12;
LABEL_7:
    v13 += 24;
    if (v11 == ++v12)
      goto LABEL_26;
  }
  if ((v10 & 1) != 0)
    goto LABEL_7;
LABEL_12:
  v14 = *((_QWORD *)v13 - 2) == v8 && *((_QWORD *)v13 - 1) == v9;
  if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    goto LABEL_7;
  outlined copy of TextureSource();
  outlined copy of TextureSource();
  swift_retain();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
    v3 = (_QWORD *)result;
  }
  if ((v12 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v12 < v3[2])
  {
    v16 = v3 + 4;
    v17 = (_QWORD *)v3[v12 + 4];
    outlined copy of TextureSource();
    swift_retain();
    v18 = swift_isUniquelyReferenced_nonNull_native();
    v3[v12 + 4] = v17;
    v32 = v3;
    if ((v18 & 1) == 0)
    {
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
      v16[v12] = v17;
    }
    v20 = v17[2];
    v19 = v17[3];
    if (v20 >= v19 >> 1)
    {
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v17);
      v16[v12] = v17;
    }
    v17[2] = v20 + 1;
    v21 = &v17[4 * v20];
    v21[4] = v8;
    v21[5] = v9;
    *((_BYTE *)v21 + 48) = v10;
    v6 = v21 + 7;
    v3 = v32;
    v4 = v33;
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

uint64_t specialized OrderedDictionary.init<A>(_grouping:by:)(uint64_t *a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t AssociatedConformanceWitness;
  char *v35;
  uint64_t v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(char *);
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t *v74;

  v10 = v9;
  v64 = a2;
  v65 = a3;
  v74 = a1;
  v68 = a9;
  v61 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v52 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = v16;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v67 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v19 = (char *)&v51 - v18;
  v20 = type metadata accessor for Optional();
  v21 = MEMORY[0x24BDAC7A8](v20);
  v54 = (char *)&v51 - v22;
  v69 = a6;
  v23 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v51 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = swift_getAssociatedTypeWitness();
  v55 = *(_QWORD *)(v70 - 8);
  MEMORY[0x24BDAC7A8](v70);
  v27 = (char *)&v51 - v26;
  v53 = a4;
  v28 = OrderedSet.init()();
  v66 = v29;
  static Array._allocateUninitialized(_:)();
  v62 = a5;
  v30 = ContiguousArray.init(arrayLiteral:)();
  v71 = v28;
  v72 = v66;
  v73 = v30;
  v31 = *(void (**)(char *, uint64_t *, uint64_t))(v23 + 16);
  v32 = AssociatedTypeWitness;
  v33 = v67;
  v31(v25, v74, v69);
  dispatch thunk of Sequence.makeIterator()();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v66 = v27;
  v35 = v54;
  v36 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
  if (v37(v35, 1, v32) == 1)
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v55 + 8))(v66, v70);
    return v71;
  }
  else
  {
    v58 = v36;
    v60 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
    v56 = MEMORY[0x24BEE4AE0] + 8;
    v38 = v53;
    v39 = (uint64_t)v52;
    v59 = v32;
    v57 = v37;
    while (1)
    {
      v60(v19, v35, v32);
      v40 = v64(v19);
      if (v10)
        break;
      v74 = &v51;
      v41 = MEMORY[0x24BDAC7A8](v40);
      v42 = v62;
      v43 = v63;
      *(&v51 - 6) = v38;
      *(&v51 - 5) = v42;
      v44 = v68;
      *(&v51 - 4) = v69;
      *(&v51 - 3) = a7;
      *(&v51 - 2) = v43;
      *(&v51 - 1) = v44;
      MEMORY[0x24BDAC7A8](v41);
      *(&v51 - 8) = v38;
      *(&v51 - 7) = v45;
      *(&v51 - 6) = v46;
      *(&v51 - 5) = a7;
      *(&v51 - 4) = v47;
      *(&v51 - 3) = v48;
      *(&v51 - 2) = (uint64_t)v19;
      v49 = type metadata accessor for OrderedDictionary(0, v38, v45, a7);
      v32 = v59;
      OrderedDictionary.updateValue<A>(forKey:default:with:)(v39, (void (*)(void))partial apply for implicit closure #1 in OrderedDictionary.init<A>(_grouping:by:), (uint64_t)(&v51 - 8), (void (*)(unint64_t))partial apply for closure #1 in OrderedDictionary.init<A>(_grouping:by:), (uint64_t)(&v51 - 10), v49);
      v10 = 0;
      v33 = v67;
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v39, v38);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v19, v32);
      dispatch thunk of IteratorProtocol.next()();
      if (v57(v35, 1, v32) == 1)
        goto LABEL_5;
    }
    (*(void (**)(char *, uint64_t))(v55 + 8))(v66, v70);
    swift_release();
    swift_release();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v19, v32);
  }
}

uint64_t specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t TupleTypeMetadata2;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  Swift::Int v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t AssociatedConformanceWitness;
  char *v39;
  uint64_t v40;
  uint64_t AssociatedTypeWitness;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v35 = a6;
  v42 = a5;
  AssociatedConformanceWitness = a1;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v39 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v33 - v13;
  v40 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v19 = type metadata accessor for Optional();
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v33 - v21;
  v37 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v36 = (char *)&v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v33 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v43 = (char *)&v33 - v24;
  v25 = OrderedSet.init()();
  v27 = v26;
  static Array._allocateUninitialized(_:)();
  v28 = ContiguousArray.init(arrayLiteral:)();
  v44 = v25;
  v45 = v27;
  v46 = v28;
  v34 = dispatch thunk of Sequence.underestimatedCount.getter();
  type metadata accessor for OrderedDictionary(0, a2, a3, v42);
  OrderedDictionary.reserveCapacity(_:)(v34);
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v36, AssociatedConformanceWitness, a4);
  dispatch thunk of Sequence.makeIterator()();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  v37 = *(_QWORD *)(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v37)(v22, 1, TupleTypeMetadata2) == 1)
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v33 + 8))(v43, AssociatedTypeWitness);
    return v44;
  }
  else
  {
    v29 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
    while (1)
    {
      v30 = &v22[*(int *)(TupleTypeMetadata2 + 48)];
      v29(v17, v22, a2);
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v30, a3);
      type metadata accessor for OrderedSet(0, a2, v42, v31);
      result = OrderedSet._append(_:)((uint64_t)v17);
      if ((result & 1) == 0)
        break;
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v39, v14, a3);
      type metadata accessor for ContiguousArray();
      ContiguousArray.append(_:)();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, a3);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v17, a2);
      dispatch thunk of IteratorProtocol.next()();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v37)(v22, 1, TupleTypeMetadata2) == 1)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized OrderedDictionary.init<A>(_uncheckedUniqueKeysWithValues:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t TupleTypeMetadata2;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  char *v46;
  uint64_t AssociatedConformanceWitness;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t AssociatedTypeWitness;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v42 = a4;
  v43 = a6;
  v50 = a5;
  AssociatedConformanceWitness = a1;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v46 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v38 - v13;
  v45 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v19 = type metadata accessor for Optional();
  v48 = *(_QWORD *)(v19 - 8);
  v49 = v19;
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v20);
  v25 = (char *)&v38 - v24;
  v40 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v39 = (char *)&v38 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v41 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v51 = (char *)&v38 - v27;
  v28 = OrderedSet.init()();
  v30 = v29;
  static Array._allocateUninitialized(_:)();
  v31 = ContiguousArray.init(arrayLiteral:)();
  v53 = v28;
  v54 = v30;
  v44 = &v55;
  v55 = v31;
  v32 = v42;
  v38 = dispatch thunk of Sequence.underestimatedCount.getter();
  type metadata accessor for OrderedDictionary(0, a2, a3, v50);
  OrderedDictionary.reserveCapacity(_:)(v38);
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v39, AssociatedConformanceWitness, v32);
  dispatch thunk of Sequence.makeIterator()();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  for (i = v45; ; (*(void (**)(char *, uint64_t))(i + 8))(v17, a2))
  {
    dispatch thunk of IteratorProtocol.next()();
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v25, v22, v49);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v25, 1, TupleTypeMetadata2) == 1)break;
    v34 = &v25[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(char *, char *, uint64_t))(i + 32))(v17, v25, a2);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v34, a3);
    v36 = type metadata accessor for OrderedSet(0, a2, v50, v35);
    OrderedSet._appendNew(_:)((uint64_t)v17, v36);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v46, v14, a3);
    type metadata accessor for ContiguousArray();
    ContiguousArray.append(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, a3);
  }
  (*(void (**)(char *, uint64_t))(v41 + 8))(v51, AssociatedTypeWitness);
  return v53;
}

uint64_t sub_245F773A4()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in OrderedDictionary.init<A>(_grouping:by:)()
{
  return dispatch thunk of RangeReplaceableCollection.init()();
}

uint64_t partial apply for closure #1 in OrderedDictionary.init<A>(_grouping:by:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in OrderedDictionary.init<A>(_grouping:by:)(a1, *(_QWORD *)(v1 + 64));
}

uint64_t Input.spec.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  return v1;
}

uint64_t (*InputSpec.label.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t InputSpec.type.getter()
{
  return swift_retain();
}

uint64_t (*InputSpec.type.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t OutputSpec.label.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t OutputSpec.label.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*OutputSpec.label.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t OutputSpec.type.getter()
{
  return swift_retain();
}

uint64_t OutputSpec.type.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*OutputSpec.type.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t InputSpec.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v6)(uint64_t);

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v6 = *(void (**)(uint64_t))(*(_QWORD *)a4 + 120);
  swift_retain();
  v6(a1);
  return swift_release();
}

uint64_t static InputSpec.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 == a4 && a2 == a5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 128))(a6) & 1;
  else
    return 0;
}

Swift::Int InputSpec.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v4)(_BYTE *);
  _BYTE v6[72];

  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v4 = *(void (**)(_BYTE *))(*(_QWORD *)a3 + 120);
  swift_retain();
  v4(v6);
  swift_release();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InputSpec()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(_BYTE *);
  _BYTE v4[72];

  v1 = *(_QWORD *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v2 = *(void (**)(_BYTE *))(*(_QWORD *)v1 + 120);
  swift_retain();
  v2(v4);
  swift_release();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InputSpec(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void (*v4)(uint64_t);

  v3 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v4 = *(void (**)(uint64_t))(*(_QWORD *)v3 + 120);
  swift_retain();
  v4(a1);
  return swift_release();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InputSpec()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(_BYTE *);
  _BYTE v4[72];

  v1 = *(_QWORD *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v2 = *(void (**)(_BYTE *))(*(_QWORD *)v1 + 120);
  swift_retain();
  v2(v4);
  swift_release();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InputSpec(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = a1[2];
  v3 = a2[2];
  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 128))(v3) & 1;
  else
    return 0;
}

unint64_t lazy protocol witness table accessor for type InputSpec and conformance InputSpec()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InputSpec and conformance InputSpec;
  if (!lazy protocol witness table cache variable for type InputSpec and conformance InputSpec)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for InputSpec, &type metadata for InputSpec);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InputSpec and conformance InputSpec);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OutputSpec and conformance OutputSpec()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OutputSpec and conformance OutputSpec;
  if (!lazy protocol witness table cache variable for type OutputSpec and conformance OutputSpec)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for OutputSpec, &type metadata for OutputSpec);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OutputSpec and conformance OutputSpec);
  }
  return result;
}

ValueMetadata *type metadata accessor for InputSpec()
{
  return &type metadata for InputSpec;
}

uint64_t destroy for InputSpec()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *initializeBufferWithCopyOfBuffer for InputSpec(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for InputSpec(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for InputSpec(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for OutputSpec()
{
  return &type metadata for OutputSpec;
}

id toSIMDMat2fCols(_:)()
{
  uint64_t v0;
  id result;
  __int128 v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD v16[13];
  __int128 v17;

  result = NSArray.validateExactCount(_:)(2uLL);
  if (!v0)
  {
    *(_QWORD *)&v16[0] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    *(_QWORD *)&v13 = 0x7961727241534ELL;
    *((_QWORD *)&v13 + 1) = 0xE700000000000000;
    v14 = 0x5D74616F6C465B5BLL;
    v15 = 0xE90000000000005DLL;
    _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi1_((uint64_t)&v13);
    outlined init with take of SGInternalError.ErrorType(&v13, v16);
    lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
    v17 = 0uLL;
    swift_allocError();
    v2 = v16[1];
    *v3 = v16[0];
    v3[1] = v2;
    v4 = v16[5];
    v6 = v16[2];
    v5 = v16[3];
    v3[4] = v16[4];
    v3[5] = v4;
    v3[2] = v6;
    v3[3] = v5;
    v7 = v16[9];
    v9 = v16[6];
    v8 = v16[7];
    v3[8] = v16[8];
    v3[9] = v7;
    v3[6] = v9;
    v3[7] = v8;
    v10 = v17;
    v12 = v16[10];
    v11 = v16[11];
    v3[12] = v16[12];
    v3[13] = v10;
    v3[10] = v12;
    v3[11] = v11;
    return (id)swift_willThrow();
  }
  return result;
}

id toSIMDMat3fCols(_:)()
{
  uint64_t v0;
  id result;
  __int128 v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD v16[13];
  __int128 v17;

  result = NSArray.validateExactCount(_:)(3uLL);
  if (!v0)
  {
    *(_QWORD *)&v16[0] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    *(_QWORD *)&v13 = 0x7961727241534ELL;
    *((_QWORD *)&v13 + 1) = 0xE700000000000000;
    v14 = 0x5D74616F6C465B5BLL;
    v15 = 0xE90000000000005DLL;
    _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi1_((uint64_t)&v13);
    outlined init with take of SGInternalError.ErrorType(&v13, v16);
    lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
    v17 = 0uLL;
    swift_allocError();
    v2 = v16[1];
    *v3 = v16[0];
    v3[1] = v2;
    v4 = v16[5];
    v6 = v16[2];
    v5 = v16[3];
    v3[4] = v16[4];
    v3[5] = v4;
    v3[2] = v6;
    v3[3] = v5;
    v7 = v16[9];
    v9 = v16[6];
    v8 = v16[7];
    v3[8] = v16[8];
    v3[9] = v7;
    v3[6] = v9;
    v3[7] = v8;
    v10 = v17;
    v12 = v16[10];
    v11 = v16[11];
    v3[12] = v16[12];
    v3[13] = v10;
    v3[10] = v12;
    v3[11] = v11;
    return (id)swift_willThrow();
  }
  return result;
}

id toSIMDMat4fCols(_:)()
{
  uint64_t v0;
  id result;
  __int128 v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD v16[13];
  __int128 v17;

  result = NSArray.validateExactCount(_:)(4uLL);
  if (!v0)
  {
    *(_QWORD *)&v16[0] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    *(_QWORD *)&v13 = 0x7961727241534ELL;
    *((_QWORD *)&v13 + 1) = 0xE700000000000000;
    v14 = 0x5D74616F6C465B5BLL;
    v15 = 0xE90000000000005DLL;
    _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi1_((uint64_t)&v13);
    outlined init with take of SGInternalError.ErrorType(&v13, v16);
    lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
    v17 = 0uLL;
    swift_allocError();
    v2 = v16[1];
    *v3 = v16[0];
    v3[1] = v2;
    v4 = v16[5];
    v6 = v16[2];
    v5 = v16[3];
    v3[4] = v16[4];
    v3[5] = v4;
    v3[2] = v6;
    v3[3] = v5;
    v7 = v16[9];
    v9 = v16[6];
    v8 = v16[7];
    v3[8] = v16[8];
    v3[9] = v7;
    v3[6] = v9;
    v3[7] = v8;
    v10 = v17;
    v12 = v16[10];
    v11 = v16[11];
    v3[12] = v16[12];
    v3[13] = v10;
    v3[10] = v12;
    v3[11] = v11;
    return (id)swift_willThrow();
  }
  return result;
}

id toSIMD2i(_:)()
{
  uint64_t v0;
  id result;
  __int128 v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD v16[13];
  __int128 v17;

  result = NSArray.validateExactCount(_:)(2uLL);
  if (!v0)
  {
    *(_QWORD *)&v16[0] = 0;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    *(_QWORD *)&v13 = 0x7961727241534ELL;
    *((_QWORD *)&v13 + 1) = 0xE700000000000000;
    v14 = 0x5D3233746E495BLL;
    v15 = 0xE700000000000000;
    _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi1_((uint64_t)&v13);
    outlined init with take of SGInternalError.ErrorType(&v13, v16);
    lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
    v17 = 0uLL;
    swift_allocError();
    v2 = v16[1];
    *v3 = v16[0];
    v3[1] = v2;
    v4 = v16[5];
    v6 = v16[2];
    v5 = v16[3];
    v3[4] = v16[4];
    v3[5] = v4;
    v3[2] = v6;
    v3[3] = v5;
    v7 = v16[9];
    v9 = v16[6];
    v8 = v16[7];
    v3[8] = v16[8];
    v3[9] = v7;
    v3[6] = v9;
    v3[7] = v8;
    v10 = v17;
    v12 = v16[10];
    v11 = v16[11];
    v3[12] = v16[12];
    v3[13] = v10;
    v3[10] = v12;
    v3[11] = v11;
    return (id)swift_willThrow();
  }
  return result;
}

id toSIMD3i(_:)()
{
  uint64_t v0;
  id result;
  __int128 v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD v16[13];
  __int128 v17;

  result = NSArray.validateExactCount(_:)(3uLL);
  if (!v0)
  {
    *(_QWORD *)&v16[0] = 0;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    *(_QWORD *)&v13 = 0x7961727241534ELL;
    *((_QWORD *)&v13 + 1) = 0xE700000000000000;
    v14 = 0x5D3233746E495BLL;
    v15 = 0xE700000000000000;
    _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi1_((uint64_t)&v13);
    outlined init with take of SGInternalError.ErrorType(&v13, v16);
    lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
    v17 = 0uLL;
    swift_allocError();
    v2 = v16[1];
    *v3 = v16[0];
    v3[1] = v2;
    v4 = v16[5];
    v6 = v16[2];
    v5 = v16[3];
    v3[4] = v16[4];
    v3[5] = v4;
    v3[2] = v6;
    v3[3] = v5;
    v7 = v16[9];
    v9 = v16[6];
    v8 = v16[7];
    v3[8] = v16[8];
    v3[9] = v7;
    v3[6] = v9;
    v3[7] = v8;
    v10 = v17;
    v12 = v16[10];
    v11 = v16[11];
    v3[12] = v16[12];
    v3[13] = v10;
    v3[10] = v12;
    v3[11] = v11;
    return (id)swift_willThrow();
  }
  return result;
}

id toSIMD4i(_:)()
{
  uint64_t v0;
  id result;
  __int128 v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD v16[13];
  __int128 v17;

  result = NSArray.validateExactCount(_:)(4uLL);
  if (!v0)
  {
    *(_QWORD *)&v16[0] = 0;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    *(_QWORD *)&v13 = 0x7961727241534ELL;
    *((_QWORD *)&v13 + 1) = 0xE700000000000000;
    v14 = 0x5D3233746E495BLL;
    v15 = 0xE700000000000000;
    _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi1_((uint64_t)&v13);
    outlined init with take of SGInternalError.ErrorType(&v13, v16);
    lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
    v17 = 0uLL;
    swift_allocError();
    v2 = v16[1];
    *v3 = v16[0];
    v3[1] = v2;
    v4 = v16[5];
    v6 = v16[2];
    v5 = v16[3];
    v3[4] = v16[4];
    v3[5] = v4;
    v3[2] = v6;
    v3[3] = v5;
    v7 = v16[9];
    v9 = v16[6];
    v8 = v16[7];
    v3[8] = v16[8];
    v3[9] = v7;
    v3[6] = v9;
    v3[7] = v8;
    v10 = v17;
    v12 = v16[10];
    v11 = v16[11];
    v3[12] = v16[12];
    v3[13] = v10;
    v3[10] = v12;
    v3[11] = v11;
    return (id)swift_willThrow();
  }
  return result;
}

id toSIMD4f(_:)()
{
  uint64_t v0;
  id result;
  __int128 v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD v16[13];
  __int128 v17;

  result = NSArray.validateExactCount(_:)(4uLL);
  if (!v0)
  {
    *(_QWORD *)&v16[0] = 0;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    *(_QWORD *)&v13 = 0x7961727241534ELL;
    *((_QWORD *)&v13 + 1) = 0xE700000000000000;
    v14 = 0x5D74616F6C465BLL;
    v15 = 0xE700000000000000;
    _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi1_((uint64_t)&v13);
    outlined init with take of SGInternalError.ErrorType(&v13, v16);
    lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
    v17 = 0uLL;
    swift_allocError();
    v2 = v16[1];
    *v3 = v16[0];
    v3[1] = v2;
    v4 = v16[5];
    v6 = v16[2];
    v5 = v16[3];
    v3[4] = v16[4];
    v3[5] = v4;
    v3[2] = v6;
    v3[3] = v5;
    v7 = v16[9];
    v9 = v16[6];
    v8 = v16[7];
    v3[8] = v16[8];
    v3[9] = v7;
    v3[6] = v9;
    v3[7] = v8;
    v10 = v17;
    v12 = v16[10];
    v11 = v16[11];
    v3[12] = v16[12];
    v3[13] = v10;
    v3[10] = v12;
    v3[11] = v11;
    return (id)swift_willThrow();
  }
  return result;
}

id toSIMD2f(_:)()
{
  uint64_t v0;
  id result;
  __int128 v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD v16[13];
  __int128 v17;

  result = NSArray.validateExactCount(_:)(2uLL);
  if (!v0)
  {
    *(_QWORD *)&v16[0] = 0;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    *(_QWORD *)&v13 = 0x7961727241534ELL;
    *((_QWORD *)&v13 + 1) = 0xE700000000000000;
    v14 = 0x5D74616F6C465BLL;
    v15 = 0xE700000000000000;
    _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi1_((uint64_t)&v13);
    outlined init with take of SGInternalError.ErrorType(&v13, v16);
    lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
    v17 = 0uLL;
    swift_allocError();
    v2 = v16[1];
    *v3 = v16[0];
    v3[1] = v2;
    v4 = v16[5];
    v6 = v16[2];
    v5 = v16[3];
    v3[4] = v16[4];
    v3[5] = v4;
    v3[2] = v6;
    v3[3] = v5;
    v7 = v16[9];
    v9 = v16[6];
    v8 = v16[7];
    v3[8] = v16[8];
    v3[9] = v7;
    v3[6] = v9;
    v3[7] = v8;
    v10 = v17;
    v12 = v16[10];
    v11 = v16[11];
    v3[12] = v16[12];
    v3[13] = v10;
    v3[10] = v12;
    v3[11] = v11;
    return (id)swift_willThrow();
  }
  return result;
}

id toSIMD2h(_:)()
{
  uint64_t v0;
  id result;
  __int128 v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD v16[13];
  __int128 v17;

  result = NSArray.validateExactCount(_:)(2uLL);
  if (!v0)
  {
    *(_QWORD *)&v16[0] = 0;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    *(_QWORD *)&v13 = 0x7961727241534ELL;
    *((_QWORD *)&v13 + 1) = 0xE700000000000000;
    v14 = 0x5D3631746E49555BLL;
    v15 = 0xE800000000000000;
    _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi1_((uint64_t)&v13);
    outlined init with take of SGInternalError.ErrorType(&v13, v16);
    lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
    v17 = 0uLL;
    swift_allocError();
    v2 = v16[1];
    *v3 = v16[0];
    v3[1] = v2;
    v4 = v16[5];
    v6 = v16[2];
    v5 = v16[3];
    v3[4] = v16[4];
    v3[5] = v4;
    v3[2] = v6;
    v3[3] = v5;
    v7 = v16[9];
    v9 = v16[6];
    v8 = v16[7];
    v3[8] = v16[8];
    v3[9] = v7;
    v3[6] = v9;
    v3[7] = v8;
    v10 = v17;
    v12 = v16[10];
    v11 = v16[11];
    v3[12] = v16[12];
    v3[13] = v10;
    v3[10] = v12;
    v3[11] = v11;
    return (id)swift_willThrow();
  }
  return result;
}

id toSIMD3f(_:)()
{
  uint64_t v0;
  id result;
  __int128 v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD v16[13];
  __int128 v17;

  result = NSArray.validateExactCount(_:)(3uLL);
  if (!v0)
  {
    *(_QWORD *)&v16[0] = 0;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    *(_QWORD *)&v13 = 0x7961727241534ELL;
    *((_QWORD *)&v13 + 1) = 0xE700000000000000;
    v14 = 0x5D74616F6C465BLL;
    v15 = 0xE700000000000000;
    _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi1_((uint64_t)&v13);
    outlined init with take of SGInternalError.ErrorType(&v13, v16);
    lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
    v17 = 0uLL;
    swift_allocError();
    v2 = v16[1];
    *v3 = v16[0];
    v3[1] = v2;
    v4 = v16[5];
    v6 = v16[2];
    v5 = v16[3];
    v3[4] = v16[4];
    v3[5] = v4;
    v3[2] = v6;
    v3[3] = v5;
    v7 = v16[9];
    v9 = v16[6];
    v8 = v16[7];
    v3[8] = v16[8];
    v3[9] = v7;
    v3[6] = v9;
    v3[7] = v8;
    v10 = v17;
    v12 = v16[10];
    v11 = v16[11];
    v3[12] = v16[12];
    v3[13] = v10;
    v3[10] = v12;
    v3[11] = v11;
    return (id)swift_willThrow();
  }
  return result;
}

id toSIMD3h(_:)()
{
  uint64_t v0;
  id result;
  __int128 v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD v16[13];
  __int128 v17;

  result = NSArray.validateExactCount(_:)(3uLL);
  if (!v0)
  {
    *(_QWORD *)&v16[0] = 0;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    *(_QWORD *)&v13 = 0x7961727241534ELL;
    *((_QWORD *)&v13 + 1) = 0xE700000000000000;
    v14 = 0x5D3631746E49555BLL;
    v15 = 0xE800000000000000;
    _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi1_((uint64_t)&v13);
    outlined init with take of SGInternalError.ErrorType(&v13, v16);
    lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
    v17 = 0uLL;
    swift_allocError();
    v2 = v16[1];
    *v3 = v16[0];
    v3[1] = v2;
    v4 = v16[5];
    v6 = v16[2];
    v5 = v16[3];
    v3[4] = v16[4];
    v3[5] = v4;
    v3[2] = v6;
    v3[3] = v5;
    v7 = v16[9];
    v9 = v16[6];
    v8 = v16[7];
    v3[8] = v16[8];
    v3[9] = v7;
    v3[6] = v9;
    v3[7] = v8;
    v10 = v17;
    v12 = v16[10];
    v11 = v16[11];
    v3[12] = v16[12];
    v3[13] = v10;
    v3[10] = v12;
    v3[11] = v11;
    return (id)swift_willThrow();
  }
  return result;
}

id toSIMD4h(_:)()
{
  uint64_t v0;
  id result;
  __int128 v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD v16[13];
  __int128 v17;

  result = NSArray.validateExactCount(_:)(4uLL);
  if (!v0)
  {
    *(_QWORD *)&v16[0] = 0;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    *(_QWORD *)&v13 = 0x7961727241534ELL;
    *((_QWORD *)&v13 + 1) = 0xE700000000000000;
    v14 = 0x5D3631746E49555BLL;
    v15 = 0xE800000000000000;
    _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi1_((uint64_t)&v13);
    outlined init with take of SGInternalError.ErrorType(&v13, v16);
    lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
    v17 = 0uLL;
    swift_allocError();
    v2 = v16[1];
    *v3 = v16[0];
    v3[1] = v2;
    v4 = v16[5];
    v6 = v16[2];
    v5 = v16[3];
    v3[4] = v16[4];
    v3[5] = v4;
    v3[2] = v6;
    v3[3] = v5;
    v7 = v16[9];
    v9 = v16[6];
    v8 = v16[7];
    v3[8] = v16[8];
    v3[9] = v7;
    v3[6] = v9;
    v3[7] = v8;
    v10 = v17;
    v12 = v16[10];
    v11 = v16[11];
    v3[12] = v16[12];
    v3[13] = v10;
    v3[10] = v12;
    v3[11] = v11;
    return (id)swift_willThrow();
  }
  return result;
}

id NSArray.validateExactCount(_:)(unint64_t a1)
{
  void *v1;
  void *v2;
  id result;
  unint64_t v5;
  __int128 v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[13];
  _OWORD v18[13];
  __int128 v19;

  v2 = v1;
  result = objc_msgSend(v2, sel_count);
  if (result != (id)a1)
  {
    if ((a1 & 0x8000000000000000) != 0
      || (v5 = (unint64_t)objc_msgSend(v2, sel_count), (v5 & 0x8000000000000000) != 0))
    {
      result = (id)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      *(_QWORD *)&v17[0] = a1;
      *((_QWORD *)&v17[0] + 1) = v5;
      _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi2_((uint64_t)v17);
      outlined init with take of SGInternalError.ErrorType(v17, v18);
      lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
      v19 = 0uLL;
      swift_allocError();
      v6 = v18[1];
      *v7 = v18[0];
      v7[1] = v6;
      v8 = v18[5];
      v10 = v18[2];
      v9 = v18[3];
      v7[4] = v18[4];
      v7[5] = v8;
      v7[2] = v10;
      v7[3] = v9;
      v11 = v18[9];
      v13 = v18[6];
      v12 = v18[7];
      v7[8] = v18[8];
      v7[9] = v11;
      v7[6] = v13;
      v7[7] = v12;
      v14 = v19;
      v16 = v18[10];
      v15 = v18[11];
      v7[12] = v18[12];
      v7[13] = v14;
      v7[10] = v16;
      v7[11] = v15;
      return (id)swift_willThrow();
    }
  }
  return result;
}

uint64_t _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi2_(uint64_t result)
{
  *(_QWORD *)(result + 168) = *(_QWORD *)(result + 168) & 0xFC00000000000001 | 0x180000000000000;
  return result;
}

uint64_t specialized SIMD.init<A>(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = 2;
    if ((unint64_t)(v1 - 1) < 2)
      v3 = v1 - 1;
    v4 = 0;
    do
    {
      if ((unint64_t)(v1 - 1) > 1)
      {
        __break(1u);
        goto LABEL_10;
      }
      v5 = *(_DWORD *)(result + 32 + 4 * v2);
      v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v2 & 1))) = v5;
      v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (!v3)
      goto LABEL_10;
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  __int128 v4;
  int v5;
  __int128 v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = 3;
    if ((unint64_t)(v1 - 1) < 3)
      v3 = v1 - 1;
    v4 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 2)
      {
        __break(1u);
        goto LABEL_10;
      }
      v5 = *(_DWORD *)(result + 32 + 4 * v2);
      v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3))) = v5;
      v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 2)
      goto LABEL_10;
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  __int128 v4;
  int v5;
  __int128 v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = 4;
    if ((unint64_t)(v1 - 1) < 4)
      v3 = v1 - 1;
    v4 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 3)
      {
        __break(1u);
        goto LABEL_10;
      }
      v5 = *(_DWORD *)(result + 32 + 4 * v2);
      v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3))) = v5;
      v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 3)
      goto LABEL_10;
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  __int128 v4;
  int v5;
  __int128 v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = 3;
    if ((unint64_t)(v1 - 1) < 3)
      v3 = v1 - 1;
    v4 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 2)
      {
        __break(1u);
        goto LABEL_10;
      }
      v5 = *(_DWORD *)(result + 32 + 4 * v2);
      v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3))) = v5;
      v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 2)
      goto LABEL_10;
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  __int128 v4;
  int v5;
  __int128 v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = 4;
    if ((unint64_t)(v1 - 1) < 4)
      v3 = v1 - 1;
    v4 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 3)
      {
        __break(1u);
        goto LABEL_10;
      }
      v5 = *(_DWORD *)(result + 32 + 4 * v2);
      v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3))) = v5;
      v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 3)
      goto LABEL_10;
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = 2;
    if ((unint64_t)(v1 - 1) < 2)
      v3 = v1 - 1;
    v4 = 0;
    do
    {
      if ((unint64_t)(v1 - 1) > 1)
      {
        __break(1u);
        goto LABEL_10;
      }
      v5 = *(_DWORD *)(result + 32 + 4 * v2);
      v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v2 & 1))) = v5;
      v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (!v3)
      goto LABEL_10;
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = 2;
    if ((unint64_t)(v1 - 1) < 2)
      v3 = v1 - 1;
    v4 = 0;
    do
    {
      if ((unint64_t)(v1 - 1) > 1)
      {
        __break(1u);
        goto LABEL_10;
      }
      v5 = *(unsigned __int16 *)(result + 32 + 2 * v2);
      v7 = v4;
      *(_DWORD *)((unint64_t)&v7 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v2 & 1))) = v5;
      v4 = v7;
      ++v2;
    }
    while (v1 != v2);
    if (!v3)
      goto LABEL_10;
    HIWORD(v6) = WORD2(v7);
    LOWORD(v6) = v7;
    return v6;
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = 3;
    if ((unint64_t)(v1 - 1) < 3)
      v3 = v1 - 1;
    v4 = 0;
    do
    {
      if ((unint64_t)(v1 - 1) > 2)
      {
        __break(1u);
        goto LABEL_10;
      }
      v5 = *(_WORD *)(result + 32 + 2 * v2);
      v6 = v4;
      *(_WORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF9 | (2 * (v2 & 3))) = v5;
      v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 2)
      goto LABEL_10;
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = 4;
    if ((unint64_t)(v1 - 1) < 4)
      v3 = v1 - 1;
    v4 = 0;
    do
    {
      if ((unint64_t)(v1 - 1) > 3)
      {
        __break(1u);
        goto LABEL_10;
      }
      v5 = *(_WORD *)(result + 32 + 2 * v2);
      v6 = v4;
      *(_WORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF9 | (2 * (v2 & 3))) = v5;
      v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 3)
      goto LABEL_10;
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

uint64_t specialized SIMD.init<A>(_:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  __int128 v7;

  if (a3 >> 1 == a2)
    goto LABEL_10;
  if ((uint64_t)(a3 >> 1) <= a2)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v3 = 0;
  v4 = 0uLL;
  do
  {
    if ((a3 >> 1) + ~a2 > 2)
    {
      __break(1u);
      goto LABEL_9;
    }
    v5 = *(_DWORD *)(result + 4 * a2 + 4 * v3);
    v6 = v3 + 1;
    v7 = v4;
    *(_DWORD *)((unint64_t)&v7 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3))) = v5;
    v4 = v7;
    v3 = v6;
  }
  while ((a3 >> 1) - a2 != v6);
  if ((unint64_t)(v6 - 1) < 2)
    goto LABEL_10;
  return result;
}

{
  uint64_t v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  __int128 v7;

  if (a3 >> 1 == a2)
    goto LABEL_10;
  if ((uint64_t)(a3 >> 1) <= a2)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v3 = 0;
  v4 = 0uLL;
  do
  {
    if ((a3 >> 1) + ~a2 > 3)
    {
      __break(1u);
      goto LABEL_9;
    }
    v5 = *(_DWORD *)(result + 4 * a2 + 4 * v3);
    v6 = v3 + 1;
    v7 = v4;
    *(_DWORD *)((unint64_t)&v7 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3))) = v5;
    v4 = v7;
    v3 = v6;
  }
  while ((a3 >> 1) - a2 != v6);
  if ((unint64_t)(v6 - 1) < 3)
    goto LABEL_10;
  return result;
}

uint64_t OrderedDictionary<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t TupleTypeMetadata2;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  Swift::UInt v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v41 = a7;
  v35 = *(_QWORD *)(a6 - 8);
  v36 = a8;
  v14 = MEMORY[0x24BDAC7A8](a1);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v21 = type metadata accessor for Optional();
  v39 = *(_QWORD *)(v21 - 8);
  v40 = v21;
  v22 = MEMORY[0x24BDAC7A8](v21);
  v38 = (char *)&v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v32 - v24;
  v26 = ContiguousArray.count.getter();
  v34 = a1;
  Hasher._combine(_:)(v26);
  v42 = a2;
  v43 = a3;
  v44 = a4;
  v45 = 0;
  v37 = type metadata accessor for OrderedDictionary.Iterator(0, a5, a6, v41);
  swift_retain();
  swift_retain();
  swift_retain();
  v27 = v35;
  while (1)
  {
    v28 = v38;
    OrderedDictionary.Iterator.next()(v37, v38);
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v25, v28, v40);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v25, 1, TupleTypeMetadata2) == 1)break;
    v29 = &v25[*(int *)(TupleTypeMetadata2 + 48)];
    v30 = v33;
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v19, v25, a5);
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v16, v29, a6);
    dispatch thunk of Hashable.hash(into:)();
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v16, a6);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v19, a5);
  }
  swift_release();
  swift_release();
  return swift_release();
}

Swift::Int OrderedDictionary<>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _BYTE v15[72];

  Hasher.init(_seed:)();
  OrderedDictionary<>.hash(into:)((uint64_t)v15, a1, a2, a3, a4, a5, a6, a7);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> OrderedDictionary<A, B>(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;

  return OrderedDictionary<>.hashValue.getter(*v2, v2[1], v2[2], a1[2], a1[3], a1[4], *(_QWORD *)(a2 - 8));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> OrderedDictionary<A, B>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;

  return OrderedDictionary<>.hash(into:)(a1, *v3, v3[1], v3[2], a2[2], a2[3], a2[4], *(_QWORD *)(a3 - 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> OrderedDictionary<A, B>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  _BYTE v7[72];

  v5 = *(_QWORD *)(a3 - 8);
  Hasher.init(_seed:)();
  OrderedDictionary<>.hash(into:)((uint64_t)v7, *v3, v3[1], v3[2], a2[2], a2[3], a2[4], v5);
  return Hasher._finalize()();
}

uint64_t base witness table accessor for Equatable in <> OrderedDictionary<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x24954C264](&protocol conformance descriptor for <> OrderedDictionary<A, B>, a1, &v4);
}

uint64_t MetalFunctionNode.importPaths.getter()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t FunctionNodeID.description.getter()
{
  Swift::String v0;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 25705;
}

void FunctionNodeID.hash(into:)(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
}

BOOL static FunctionNodeID.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

Swift::Int FunctionNodeID.hashValue.getter(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FunctionNodeID()
{
  Swift::String v0;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 25705;
}

uint64_t MetalFunctionNode.setInputs(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v18 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v8 = a1 + 32;
    v6 = v18;
    do
    {
      outlined init with copy of MetalFunctionNode(v8, (uint64_t)v15);
      v9 = v16;
      v10 = v17;
      __swift_project_boxed_opaque_existential_1(v15, v16);
      v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 24))(v9, v10);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v15);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
        v6 = v18;
      }
      v13 = *(_QWORD *)(v6 + 16);
      v12 = *(_QWORD *)(v6 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v6 = v18;
      }
      *(_QWORD *)(v6 + 16) = v13 + 1;
      *(_QWORD *)(v6 + 8 * v13 + 32) = v11;
      v8 += 40;
      --v5;
    }
    while (v5);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 56))(v6, a2, a3);
}

uint64_t MetalFunctionNode.requiredLibraryNames.getter()
{
  return MEMORY[0x24BEE4AF8];
}

ValueMetadata *type metadata accessor for FunctionNodeID()
{
  return &type metadata for FunctionNodeID;
}

uint64_t dispatch thunk of HasDebugLabel.debugLabel.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of HasDebugLabel.debugLabel.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of HasDebugLabel.debugLabel.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of MetalFunctionNode.importPaths.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of MetalFunctionNode.resultType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of MetalFunctionNode.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of MetalFunctionNode.id.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of MetalFunctionNode.id.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of MetalFunctionNode.inputs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of MetalFunctionNode.inputs.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of MetalFunctionNode.inputs.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of MetalConstExprFunctionNode.isConstExpr.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of MetalConstExprFunctionNode.isConstExpr.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of MetalConstExprFunctionNode.isConstExpr.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14[2];
  uint64_t v15;

  v3 = v2;
  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of MetalFunctionNode((__int128 *)a1, (uint64_t)v14);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of MetalFunctionNode?(a1);
    v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v8 & 1) != 0)
    {
      v9 = v7;
      v10 = swift_isUniquelyReferenced_nonNull_native();
      v11 = *v2;
      v13 = *v3;
      *v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v11 = v13;
      }
      outlined init with take of MetalFunctionNode((__int128 *)(*(_QWORD *)(v11 + 56) + 40 * v9), (uint64_t)v14);
      specialized _NativeDictionary._delete(at:)(v9, v11);
      *v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = 0;
      memset(v14, 0, sizeof(v14));
    }
    return outlined destroy of MetalFunctionNode?((uint64_t)v14);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  char v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  _QWORD v19[5];
  uint64_t v20;
  uint64_t v21;
  char v22;
  _BYTE v23[8];
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v4 = v3;
  outlined init with take of GeomPropDef?(a1, (uint64_t)v19);
  v6 = v19[0];
  v7 = v19[1];
  v9 = v19[2];
  v8 = v19[3];
  v10 = v19[4];
  v11 = v20;
  v12 = v21;
  v13 = v22;
  outlined init with take of GeomPropDef?(a1, (uint64_t)v23);
  if (v24)
  {
    *(_QWORD *)&v25 = v6;
    *((_QWORD *)&v25 + 1) = v7;
    v26 = v9;
    v27 = v8;
    v28 = v10;
    LOWORD(v29) = v11 & 0xFF01;
    v30 = v12;
    v31 = v13 & 1;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = *v4;
    *v4 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v25, a2, a3, isUniquelyReferenced_nonNull_native);
    *v4 = v18;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)&v25);
    swift_bridgeObjectRelease();
    return outlined consume of GeomPropDef?(v25, *((uint64_t *)&v25 + 1), v26, v27, v28, v29);
  }
}

ShaderGraph::NodeDefStore __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NodeDefStore.including(_:)(Swift::OpaquePointer a1)
{
  char *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  uint64_t rawValue;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  char *v43;
  char v44;
  _OWORD *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  void *v55;
  void *v56;
  void *v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  char *v68;
  void *v69;
  uint64_t v70;
  unsigned int v71;
  __int128 v72;
  _OWORD v73[12];
  __int128 v74;
  uint64_t v75;
  ShaderGraph::NodeDefStore result;

  v4 = v3;
  v5 = v2;
  v6 = v1;
  rawValue = (uint64_t)a1._rawValue;
  if ((unint64_t)a1._rawValue >> 62)
  {
LABEL_40:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8)
      goto LABEL_3;
LABEL_33:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_37;
  }
  v8 = *(_QWORD *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v8)
    goto LABEL_33;
LABEL_3:
  v64 = rawValue & 0xC000000000000001;
  if ((rawValue & 0xC000000000000001) != 0)
LABEL_43:
    v9 = (char *)MEMORY[0x24954B748](0, rawValue);
  else
    v9 = (char *)*(id *)(rawValue + 32);
  v68 = v9;
  v11 = *(_QWORD *)&v9[OBJC_IVAR___SGGeometryPropertyDefinition_referencedGeomPropName];
  v10 = *(_QWORD *)&v9[OBJC_IVAR___SGGeometryPropertyDefinition_referencedGeomPropName + 8];
  if (v5[2])
  {
    swift_bridgeObjectRetain_n();
    v12 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
    if ((v13 & 1) != 0)
    {
      v58 = v6;
      v59 = v4;
      v6 = 0;
      v62 = v5;
      v63 = v8 - 1;
      v4 = v5;
      v14 = v68;
      v61 = rawValue;
      while (1)
      {
        v15 = v5[7] + (v12 << 6);
        v16 = *(_QWORD *)(v15 + 16);
        v18 = *(_QWORD *)(v15 + 24);
        v17 = *(_QWORD *)(v15 + 32);
        v19 = *(unsigned __int8 *)(v15 + 40);
        v65 = *(_BYTE *)(v15 + 41);
        v66 = *(_QWORD *)(v15 + 48);
        v67 = *(_BYTE *)(v15 + 56);
        swift_bridgeObjectRetain();
        v70 = v16;
        swift_retain();
        v75 = v17;
        v71 = v19;
        outlined copy of GeomPropDef.GeomProp(v18, v17, v19);
        swift_bridgeObjectRelease_n();
        v20 = (uint64_t *)&v14[OBJC_IVAR___SGGeometryPropertyDefinition_name];
        if (v4[2])
        {
          v22 = *v20;
          v21 = v20[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized __RawDictionaryStorage.find<A>(_:)(v22, v21);
          v24 = v23;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v24 & 1) != 0)
          {
            swift_release();
            swift_bridgeObjectRelease();
            outlined consume of GeomPropDef.GeomProp(v18, v75, v71);

            goto LABEL_23;
          }
        }
        v69 = v14;
        v26 = *v20;
        v25 = v20[1];
        swift_bridgeObjectRetain_n();
        swift_retain();
        outlined copy of GeomPropDef.GeomProp(v18, v75, v71);
        rawValue = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v73[0] = v4;
        v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v25);
        v29 = v4[2];
        v30 = (v27 & 1) == 0;
        v31 = v29 + v30;
        if (__OFADD__(v29, v30))
          goto LABEL_39;
        v5 = v27;
        if (v4[3] >= v31)
        {
          if ((rawValue & 1) != 0)
          {
            v4 = *(_QWORD **)&v73[0];
            if ((v27 & 1) == 0)
              goto LABEL_20;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            v4 = *(_QWORD **)&v73[0];
            if ((v5 & 1) == 0)
              goto LABEL_20;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v31, rawValue);
          v32 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v25);
          if ((v5 & 1) != (v33 & 1))
          {
            v55 = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            goto LABEL_45;
          }
          v28 = v32;
          v4 = *(_QWORD **)&v73[0];
          if ((v5 & 1) == 0)
          {
LABEL_20:
            v4[(v28 >> 6) + 8] |= 1 << v28;
            v38 = (uint64_t *)(v4[6] + 16 * v28);
            *v38 = v26;
            v38[1] = v25;
            v39 = v4[7] + (v28 << 6);
            *(_QWORD *)v39 = v26;
            *(_QWORD *)(v39 + 8) = v25;
            *(_QWORD *)(v39 + 16) = v70;
            *(_QWORD *)(v39 + 24) = v18;
            v37 = v75;
            *(_QWORD *)(v39 + 32) = v75;
            v8 = v71;
            *(_BYTE *)(v39 + 40) = v71;
            *(_BYTE *)(v39 + 41) = v65;
            *(_QWORD *)(v39 + 48) = v66;
            *(_BYTE *)(v39 + 56) = v67;
            v40 = v4[2];
            v41 = __OFADD__(v40, 1);
            v42 = v40 + 1;
            if (v41)
            {
              __break(1u);
              goto LABEL_43;
            }
            v4[2] = v42;
            swift_bridgeObjectRetain();
            goto LABEL_22;
          }
        }
        v34 = v18;
        v35 = v4[7] + (v28 << 6);
        v8 = *(_QWORD *)(v35 + 24);
        v60 = *(_QWORD *)(v35 + 32);
        v36 = *(_BYTE *)(v35 + 40);
        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of GeomPropDef.GeomProp(v8, v60, v36);
        *(_QWORD *)v35 = v26;
        *(_QWORD *)(v35 + 8) = v25;
        *(_QWORD *)(v35 + 16) = v70;
        *(_QWORD *)(v35 + 24) = v34;
        v37 = v75;
        *(_QWORD *)(v35 + 32) = v75;
        LOBYTE(v8) = v71;
        *(_BYTE *)(v35 + 40) = v71;
        *(_BYTE *)(v35 + 41) = v65;
        *(_QWORD *)(v35 + 48) = v66;
        *(_BYTE *)(v35 + 56) = v67;
        v18 = v34;
LABEL_22:
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of GeomPropDef.GeomProp(v18, v37, v8);

        rawValue = v61;
        v5 = v62;
LABEL_23:
        if ((char *)v63 == v6)
        {
          v5 = v4;
          v4 = v59;
          v6 = v58;
          goto LABEL_33;
        }
        if (v64)
          v43 = (char *)MEMORY[0x24954B748](v6 + 1, rawValue);
        else
          v43 = (char *)*(id *)(rawValue + 8 * (_QWORD)v6 + 40);
        v14 = v43;
        if (__OFADD__(v6 + 1, 1))
        {
          __break(1u);
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }
        v11 = *(_QWORD *)&v43[OBJC_IVAR___SGGeometryPropertyDefinition_referencedGeomPropName];
        v10 = *(_QWORD *)&v43[OBJC_IVAR___SGGeometryPropertyDefinition_referencedGeomPropName + 8];
        if (!v5[2])
        {
          v68 = v43;
          v5 = v4;
          goto LABEL_35;
        }
        swift_bridgeObjectRetain_n();
        v12 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
        ++v6;
        if ((v44 & 1) == 0)
        {
          v68 = v14;
          swift_bridgeObjectRelease();
          v5 = v4;
          goto LABEL_36;
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_35:
    swift_bridgeObjectRetain();
  }
LABEL_36:
  *(_QWORD *)&v72 = v11;
  *((_QWORD *)&v72 + 1) = v10;
  _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi20_((uint64_t)&v72);
  outlined init with take of UserGraphError.ErrorType(&v72, (uint64_t)v73);
  lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
  v74 = 0uLL;
  swift_allocError();
  *v45 = v73[0];
  v46 = v73[4];
  v47 = v73[2];
  v48 = v73[1];
  v45[3] = v73[3];
  v45[4] = v46;
  v45[1] = v48;
  v45[2] = v47;
  v49 = v73[8];
  v50 = v73[6];
  v51 = v73[5];
  v45[7] = v73[7];
  v45[8] = v49;
  v45[5] = v51;
  v45[6] = v50;
  v52 = v74;
  v53 = v73[10];
  v54 = v73[9];
  v45[11] = v73[11];
  v45[12] = v52;
  v45[9] = v54;
  v45[10] = v53;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_37:
  v55 = v6;
  v56 = v5;
  v57 = v4;
LABEL_45:
  result.implementations._rawValue = v57;
  result.geomPropDefs._rawValue = v56;
  result.nodeDefs._rawValue = v55;
  return result;
}

uint64_t SGGeometryPropertyDefinition.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___SGGeometryPropertyDefinition_name);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t static SGGeometryPropertyDefinition.create(name:mappingTo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  if (a2)
  {
    if (a4)
    {
      v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return v9(a1, a2, a3, a4);
    }
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v12 = (void *)swift_allocError();
    *(_QWORD *)v11 = 0xD000000000000016;
    v13 = 0x8000000245FCDAF0;
  }
  else
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v12 = (void *)swift_allocError();
    *(_QWORD *)v11 = 1701667182;
    v13 = 0xE400000000000000;
  }
  *(_QWORD *)(v11 + 8) = v13;
  *(_BYTE *)(v11 + 16) = 1;
  swift_willThrow();
  if (one-time initialization token for logger != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)logger);
  v15 = static os_log_type_t.error.getter();
  v16 = v12;
  v17 = v12;
  v18 = Logger.logObject.getter();
  v19 = v15;
  if (os_log_type_enabled(v18, v15))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    v21 = swift_slowAlloc();
    v25 = v21;
    *(_DWORD *)v20 = 136315138;
    v22 = v12;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v23 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_245E46000, v18, v19, "%s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24954C33C](v21, -1, -1);
    MEMORY[0x24954C33C](v20, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t SGGeometryPropertyDefinition.referencedGeomPropName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___SGGeometryPropertyDefinition_referencedGeomPropName);
  swift_bridgeObjectRetain();
  return v1;
}

id SGGeometryPropertyDefinition.__allocating_init(name:referencedGeomPropName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_class *v4;
  char *v9;
  char *v10;
  char *v11;
  objc_super v13;

  v9 = (char *)objc_allocWithZone(v4);
  v10 = &v9[OBJC_IVAR___SGGeometryPropertyDefinition_referencedGeomPropName];
  *(_QWORD *)v10 = a3;
  *((_QWORD *)v10 + 1) = a4;
  v11 = &v9[OBJC_IVAR___SGGeometryPropertyDefinition_name];
  *(_QWORD *)v11 = a1;
  *((_QWORD *)v11 + 1) = a2;
  v13.receiver = v9;
  v13.super_class = v4;
  return objc_msgSendSuper2(&v13, sel_init);
}

id SGGeometryPropertyDefinition.init(name:referencedGeomPropName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  char *v6;
  objc_super v8;

  v5 = &v4[OBJC_IVAR___SGGeometryPropertyDefinition_referencedGeomPropName];
  *(_QWORD *)v5 = a3;
  *((_QWORD *)v5 + 1) = a4;
  v6 = &v4[OBJC_IVAR___SGGeometryPropertyDefinition_name];
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  v8.receiver = v4;
  v8.super_class = (Class)type metadata accessor for SGGeometryPropertyDefinition();
  return objc_msgSendSuper2(&v8, sel_init);
}

unint64_t SGGeometryPropertyDefinition.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;

  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + OBJC_IVAR___SGGeometryPropertyDefinition_name);
  v2 = *(void **)(v0 + OBJC_IVAR___SGGeometryPropertyDefinition_name + 8);
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x22203E2D2D2022;
  v4._object = (void *)0xE700000000000000;
  String.append(_:)(v4);
  v5 = *(_QWORD *)(v0 + OBJC_IVAR___SGGeometryPropertyDefinition_referencedGeomPropName);
  v6 = *(void **)(v0 + OBJC_IVAR___SGGeometryPropertyDefinition_referencedGeomPropName + 8);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 15906;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  return 0xD00000000000001FLL;
}

BOOL static SGGeometryPropertyDefinition.CodingKey.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void SGGeometryPropertyDefinition.CodingKey.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

ShaderGraph::SGGeometryPropertyDefinition::CodingKey_optional __swiftcall SGGeometryPropertyDefinition.CodingKey.init(intValue:)(Swift::Int intValue)
{
  return (ShaderGraph::SGGeometryPropertyDefinition::CodingKey_optional)2;
}

Swift::Int SGGeometryPropertyDefinition.CodingKey.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

uint64_t SGGeometryPropertyDefinition.CodingKey.intValue.getter()
{
  return 0;
}

uint64_t SGGeometryPropertyDefinition.CodingKey.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000016;
  else
    return 1701667182;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SGGeometryPropertyDefinition.CodingKey()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000016;
  else
    return 1701667182;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SGGeometryPropertyDefinition.CodingKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized SGGeometryPropertyDefinition.CodingKey.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SGGeometryPropertyDefinition.CodingKey()
{
  lazy protocol witness table accessor for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SGGeometryPropertyDefinition.CodingKey()
{
  lazy protocol witness table accessor for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey();
  return CodingKey.debugDescription.getter();
}

uint64_t SGGeometryPropertyDefinition.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SGGeometryPropertyDefinition.CodingKey>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

id SGGeometryPropertyDefinition.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SGGeometryPropertyDefinition.init(from:)(a1);
}

id SGGeometryPropertyDefinition.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  objc_class *v21;
  uint64_t v22;
  char *v23;
  objc_super v24;
  char v25;

  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SGGeometryPropertyDefinition.CodingKey>);
  v4 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey();
  v23 = v1;
  v8 = v7;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    v12 = v23;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);

    type metadata accessor for SGGeometryPropertyDefinition();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v9 = v4;
    v25 = 0;
    v10 = v22;
    v11 = KeyedDecodingContainer.decode(_:forKey:)();
    v14 = v23;
    v15 = (uint64_t *)&v23[OBJC_IVAR___SGGeometryPropertyDefinition_name];
    *v15 = v11;
    v15[1] = v16;
    v25 = 1;
    v17 = KeyedDecodingContainer.decode(_:forKey:)();
    v19 = v18;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v10);
    v20 = (uint64_t *)&v14[OBJC_IVAR___SGGeometryPropertyDefinition_referencedGeomPropName];
    *v20 = v17;
    v20[1] = v19;

    v21 = (objc_class *)type metadata accessor for SGGeometryPropertyDefinition();
    v24.receiver = v14;
    v24.super_class = v21;
    v8 = objc_msgSendSuper2(&v24, sel_init);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  return v8;
}

id SGGeometryPropertyDefinition.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SGGeometryPropertyDefinition();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  double result;
  uint64_t v18;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v18 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v18;
    }
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v11 + 56) + (v8 << 6);
    v13 = *(_BYTE *)(v12 + 40);
    v14 = *(_BYTE *)(v12 + 41);
    v15 = *(_QWORD *)(v12 + 48);
    v16 = *(_BYTE *)(v12 + 56);
    *(_QWORD *)a3 = *(_QWORD *)v12;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(v12 + 8);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(v12 + 24);
    *(_BYTE *)(a3 + 40) = v13;
    *(_BYTE *)(a3 + 41) = v14;
    *(_QWORD *)(a3 + 48) = v15;
    *(_BYTE *)(a3 + 56) = v16;
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *(_OWORD *)(a3 + 41) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
  }
  return result;
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi20_(uint64_t result)
{
  *(_QWORD *)(result + 168) = *(_QWORD *)(result + 168) & 1 | 0x5400000000000000;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, __int128 *a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = outlined init with take of MetalFunctionNode(a3, a4[7] + 40 * a1);
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = a4[6] + 56 * result;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = 8 * result;
  *(_QWORD *)(a4[6] + v4) = a2;
  *(_QWORD *)(a4[7] + v4) = a3;
  v5 = a4[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a4[2] = v7;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a5[6] + 8 * result) = a2;
  v5 = (_QWORD *)(a5[7] + 16 * result);
  *v5 = a3;
  v5[1] = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  v6 = (_OWORD *)(a5[7] + (result << 6));
  v7 = a4[1];
  *v6 = *a4;
  v6[1] = v7;
  v6[2] = a4[2];
  *(_OWORD *)((char *)v6 + 41) = *(_OWORD *)((char *)a4 + 41);
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

{
  _QWORD *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  v6 = (_OWORD *)(a5[7] + 144 * result);
  v7 = a4[3];
  v6[2] = a4[2];
  v6[3] = v7;
  v8 = a4[8];
  v9 = a4[6];
  v6[7] = a4[7];
  v6[8] = v8;
  v10 = a4[5];
  v6[4] = a4[4];
  v6[5] = v10;
  v6[6] = v9;
  v11 = a4[1];
  *v6 = *a4;
  v6[1] = v11;
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, _OWORD *a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = (_OWORD *)(a4[6] + 80 * result);
  v5 = a2[3];
  v4[2] = a2[2];
  v4[3] = v5;
  v4[4] = a2[4];
  v6 = a2[1];
  *v4 = *a2;
  v4[1] = v6;
  v7 = (_OWORD *)(a4[7] + 48 * result);
  v8 = a3[1];
  *v7 = *a3;
  v7[1] = v8;
  *(_OWORD *)((char *)v7 + 25) = *(_OWORD *)((char *)a3 + 25);
  v9 = a4[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a4[2] = v11;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, _OWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_OWORD *)(a5[6] + 80 * result);
  v6 = a2[3];
  v5[2] = a2[2];
  v5[3] = v6;
  v5[4] = a2[4];
  v7 = a2[1];
  *v5 = *a2;
  v5[1] = v7;
  v8 = (_QWORD *)(a5[7] + 16 * result);
  *v8 = a3;
  v8[1] = a4;
  v9 = a5[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a5[2] = v11;
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MetalDataType?>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_retain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  __int128 v22[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<FunctionNodeID, MetalFunctionNode>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 40 * v15;
    outlined init with copy of MetalFunctionNode(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)outlined init with take of MetalFunctionNode(v22, *(_QWORD *)(v4 + 56) + v18);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<Output, FunctionNodeID>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<ShaderGraphNode.ID, FunctionNodeID>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<Input, FunctionNodeID>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [NodeDef.Implementation]>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  unint64_t v5;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t *v33;
  uint64_t v34;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, GeomPropDef>);
  v33 = v0;
  v1 = *v0;
  v2 = static _DictionaryStorage.copy(original:)();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v33 = v3;
    return result;
  }
  result = (void *)(v2 + 64);
  v5 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5)
    result = memmove(result, (const void *)(v1 + 64), 8 * v5);
  v34 = v1 + 64;
  v7 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v8 = 1 << *(_BYTE *)(v1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v1 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v7 << 6);
      goto LABEL_12;
    }
    v30 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v30 >= v11)
      goto LABEL_26;
    v31 = *(_QWORD *)(v34 + 8 * v30);
    ++v7;
    if (!v31)
    {
      v7 = v30 + 1;
      if (v30 + 1 >= v11)
        goto LABEL_26;
      v31 = *(_QWORD *)(v34 + 8 * v7);
      if (!v31)
        break;
    }
LABEL_25:
    v10 = (v31 - 1) & v31;
    v13 = __clz(__rbit64(v31)) + (v7 << 6);
LABEL_12:
    v14 = 16 * v13;
    v15 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v13);
    v17 = *v15;
    v16 = v15[1];
    v18 = v13 << 6;
    v19 = *(_QWORD *)(v1 + 56) + v18;
    v20 = *(_QWORD *)v19;
    v21 = *(_QWORD *)(v19 + 8);
    v22 = *(_QWORD *)(v19 + 16);
    v23 = *(_QWORD *)(v19 + 24);
    v24 = *(_QWORD *)(v19 + 32);
    v25 = *(_BYTE *)(v19 + 40);
    v26 = *(_BYTE *)(v19 + 41);
    v27 = *(_QWORD *)(v19 + 48);
    LOBYTE(v19) = *(_BYTE *)(v19 + 56);
    v28 = (_QWORD *)(*(_QWORD *)(v3 + 48) + v14);
    *v28 = v17;
    v28[1] = v16;
    v29 = *(_QWORD *)(v3 + 56) + v18;
    *(_QWORD *)v29 = v20;
    *(_QWORD *)(v29 + 8) = v21;
    *(_QWORD *)(v29 + 16) = v22;
    *(_QWORD *)(v29 + 24) = v23;
    *(_QWORD *)(v29 + 32) = v24;
    *(_BYTE *)(v29 + 40) = v25;
    *(_BYTE *)(v29 + 41) = v26;
    *(_QWORD *)(v29 + 48) = v27;
    *(_BYTE *)(v29 + 56) = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    result = (void *)outlined copy of GeomPropDef.GeomProp(v23, v24, v25);
  }
  v32 = v30 + 2;
  if (v32 >= v11)
    goto LABEL_26;
  v31 = *(_QWORD *)(v34 + 8 * v32);
  if (v31)
  {
    v7 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    v7 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v7 >= v11)
      goto LABEL_26;
    v31 = *(_QWORD *)(v34 + 8 * v7);
    ++v32;
    if (v31)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD *v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NodeDef>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v36 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v36 >= v13)
      goto LABEL_26;
    v37 = *(_QWORD *)(v6 + 8 * v36);
    ++v9;
    if (!v37)
    {
      v9 = v36 + 1;
      if (v36 + 1 >= v13)
        goto LABEL_26;
      v37 = *(_QWORD *)(v6 + 8 * v9);
      if (!v37)
        break;
    }
LABEL_25:
    v12 = (v37 - 1) & v37;
    v15 = __clz(__rbit64(v37)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 56);
    v18 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v18;
    v19 = v18[1];
    v21 = 144 * v15;
    v23 = *(_OWORD *)(v17 + v21 + 16);
    v22 = *(_OWORD *)(v17 + v21 + 32);
    v24 = *(_OWORD *)(v17 + v21 + 64);
    v42 = *(_OWORD *)(v17 + v21 + 48);
    v43 = v24;
    v25 = *(_OWORD *)(v17 + v21 + 128);
    v27 = *(_OWORD *)(v17 + v21 + 80);
    v26 = *(_OWORD *)(v17 + v21 + 96);
    v46 = *(_OWORD *)(v17 + v21 + 112);
    v47 = v25;
    v44 = v27;
    v45 = v26;
    v39 = *(_OWORD *)(v17 + v21);
    v40 = v23;
    v41 = v22;
    v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v28 = v20;
    v28[1] = v19;
    v29 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v21);
    *v29 = v39;
    v30 = v40;
    v31 = v41;
    v32 = v43;
    v29[3] = v42;
    v29[4] = v32;
    v29[1] = v30;
    v29[2] = v31;
    v33 = v44;
    v34 = v45;
    v35 = v47;
    v29[7] = v46;
    v29[8] = v35;
    v29[5] = v33;
    v29[6] = v34;
    swift_bridgeObjectRetain();
    result = (void *)outlined retain of NodeDef((uint64_t)&v39);
  }
  v38 = v36 + 2;
  if (v38 >= v13)
    goto LABEL_26;
  v37 = *(_QWORD *)(v6 + 8 * v38);
  if (v37)
  {
    v9 = v38;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v38 + 1;
    if (__OFADD__(v38, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v37 = *(_QWORD *)(v6 + 8 * v9);
    ++v38;
    if (v37)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, (uniformPropertyName: String, type: MetalDataType)>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, Int>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, ShaderGraphNode.ID>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, InputSpec>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ShaderGraphNode.ID>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<ShaderGraphNode.ID, ShaderGraphNode.ID>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<Key, String>);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  uint64_t v5;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t *v39;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Key, ShaderGraphNode>);
  v39 = v0;
  v1 = *v0;
  v2 = static _DictionaryStorage.copy(original:)();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v39 = v3;
    return result;
  }
  result = (void *)(v2 + 64);
  v5 = v1 + 64;
  v6 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v6)
    result = memmove(result, (const void *)(v1 + 64), 8 * v6);
  v8 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v9 = 1 << *(_BYTE *)(v1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v1 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    v36 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v36 >= v12)
      goto LABEL_26;
    v37 = *(_QWORD *)(v5 + 8 * v36);
    ++v8;
    if (!v37)
    {
      v8 = v36 + 1;
      if (v36 + 1 >= v12)
        goto LABEL_26;
      v37 = *(_QWORD *)(v5 + 8 * v8);
      if (!v37)
        break;
    }
LABEL_25:
    v11 = (v37 - 1) & v37;
    v14 = __clz(__rbit64(v37)) + (v8 << 6);
LABEL_12:
    v15 = 80 * v14;
    v16 = *(_QWORD *)(v1 + 48) + 80 * v14;
    v17 = *(void **)v16;
    v18 = *(void **)(v16 + 8);
    v19 = *(_QWORD *)(v16 + 16);
    v20 = *(_QWORD *)(v16 + 24);
    v21 = *(_QWORD *)(v16 + 32);
    v22 = *(_QWORD *)(v16 + 40);
    v23 = *(_QWORD *)(v16 + 48);
    v24 = *(_QWORD *)(v16 + 56);
    v25 = *(_BYTE *)(v16 + 64);
    v26 = *(_QWORD *)(v16 + 72);
    v27 = 48 * v14;
    v28 = *(_QWORD *)(v1 + 56) + v27;
    v29 = *(_QWORD *)v28;
    v30 = *(_QWORD *)(v28 + 8);
    v31 = *(_QWORD *)(v28 + 16);
    v32 = *(_BYTE *)(v28 + 40);
    v33 = *(_QWORD *)(v3 + 48) + v15;
    v34 = *(_OWORD *)(v28 + 24);
    *(_QWORD *)v33 = v17;
    *(_QWORD *)(v33 + 8) = v18;
    *(_QWORD *)(v33 + 16) = v19;
    *(_QWORD *)(v33 + 24) = v20;
    *(_QWORD *)(v33 + 32) = v21;
    *(_QWORD *)(v33 + 40) = v22;
    *(_QWORD *)(v33 + 48) = v23;
    *(_QWORD *)(v33 + 56) = v24;
    *(_BYTE *)(v33 + 64) = v25;
    *(_QWORD *)(v33 + 72) = v26;
    v35 = *(_QWORD *)(v3 + 56) + v27;
    *(_QWORD *)v35 = v29;
    *(_QWORD *)(v35 + 8) = v30;
    *(_QWORD *)(v35 + 16) = v31;
    *(_OWORD *)(v35 + 24) = v34;
    *(_BYTE *)(v35 + 40) = v32;
    outlined copy of SGDataTypeStorage(v17, v18, v19, v20, v21, v22, v23, v24, v25);
    swift_retain();
    outlined copy of NodePersonality(v29);
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v38 = v36 + 2;
  if (v38 >= v12)
    goto LABEL_26;
  v37 = *(_QWORD *)(v5 + 8 * v38);
  if (v37)
  {
    v8 = v38;
    goto LABEL_25;
  }
  while (1)
  {
    v8 = v38 + 1;
    if (__OFADD__(v38, 1))
      break;
    if (v8 >= v12)
      goto LABEL_26;
    v37 = *(_QWORD *)(v5 + 8 * v8);
    ++v38;
    if (v37)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<FunctionNodeID, String>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v18);
    v21 = *v19;
    v20 = v19[1];
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v22 = v21;
    v22[1] = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  unint64_t v5;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  _QWORD *v26;
  __int128 v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t *v32;
  int64_t v33;
  uint64_t v34;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NodeDefinitionStore.GeomProp>);
  v32 = v0;
  v1 = *v0;
  v2 = static _DictionaryStorage.copy(original:)();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v32 = v3;
    return result;
  }
  result = (void *)(v2 + 64);
  v5 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5)
    result = memmove(result, (const void *)(v1 + 64), 8 * v5);
  v34 = v1 + 64;
  v7 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v8 = 1 << *(_BYTE *)(v1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v1 + 64);
  v33 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v12 = v11 | (v7 << 6);
      goto LABEL_12;
    }
    v29 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v33)
      goto LABEL_26;
    v30 = *(_QWORD *)(v34 + 8 * v29);
    ++v7;
    if (!v30)
    {
      v7 = v29 + 1;
      if (v29 + 1 >= v33)
        goto LABEL_26;
      v30 = *(_QWORD *)(v34 + 8 * v7);
      if (!v30)
        break;
    }
LABEL_25:
    v10 = (v30 - 1) & v30;
    v12 = __clz(__rbit64(v30)) + (v7 << 6);
LABEL_12:
    v13 = 16 * v12;
    v14 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v12);
    v15 = *v14;
    v16 = v14[1];
    v17 = v12 << 6;
    v18 = *(_QWORD *)(v1 + 56) + v17;
    v19 = *(_QWORD *)v18;
    v20 = *(_QWORD *)(v18 + 8);
    v21 = *(_QWORD *)(v18 + 32);
    v22 = *(_QWORD *)(v18 + 40);
    v23 = *(_QWORD *)(v18 + 48);
    v24 = *(_BYTE *)(v18 + 56);
    v25 = *(_BYTE *)(v18 + 57);
    v26 = (_QWORD *)(*(_QWORD *)(v3 + 48) + v13);
    v27 = *(_OWORD *)(v18 + 16);
    *v26 = v15;
    v26[1] = v16;
    v28 = *(_QWORD *)(v3 + 56) + v17;
    *(_QWORD *)v28 = v19;
    *(_QWORD *)(v28 + 8) = v20;
    *(_OWORD *)(v28 + 16) = v27;
    *(_QWORD *)(v28 + 32) = v21;
    *(_QWORD *)(v28 + 40) = v22;
    *(_QWORD *)(v28 + 48) = v23;
    *(_BYTE *)(v28 + 56) = v24;
    *(_BYTE *)(v28 + 57) = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (void *)outlined copy of GeomPropDef.GeomProp(v22, v23, v24);
  }
  v31 = v29 + 2;
  if (v31 >= v33)
    goto LABEL_26;
  v30 = *(_QWORD *)(v34 + 8 * v31);
  if (v30)
  {
    v7 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    v7 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v7 >= v33)
      goto LABEL_26;
    v30 = *(_QWORD *)(v34 + 8 * v7);
    ++v31;
    if (v30)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _QWORD *v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NodeDefinitionStore.Node>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v38 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v38 >= v13)
      goto LABEL_26;
    v39 = *(_QWORD *)(v6 + 8 * v38);
    ++v9;
    if (!v39)
    {
      v9 = v38 + 1;
      if (v38 + 1 >= v13)
        goto LABEL_26;
      v39 = *(_QWORD *)(v6 + 8 * v9);
      if (!v39)
        break;
    }
LABEL_25:
    v12 = (v39 - 1) & v39;
    v15 = __clz(__rbit64(v39)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 56);
    v18 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v18;
    v19 = v18[1];
    v21 = 160 * v15;
    v22 = *(_OWORD *)(v17 + v21 + 32);
    v23 = *(_OWORD *)(v17 + v21 + 48);
    v24 = *(_OWORD *)(v17 + v21 + 80);
    v45 = *(_OWORD *)(v17 + v21 + 64);
    v46 = v24;
    v44 = v23;
    v25 = *(_OWORD *)(v17 + v21 + 144);
    v27 = *(_OWORD *)(v17 + v21 + 96);
    v26 = *(_OWORD *)(v17 + v21 + 112);
    v49 = *(_OWORD *)(v17 + v21 + 128);
    v50 = v25;
    v47 = v27;
    v48 = v26;
    v28 = *(_OWORD *)(v17 + v21 + 16);
    v41 = *(_OWORD *)(v17 + v21);
    v42 = v28;
    v43 = v22;
    v29 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v29 = v20;
    v29[1] = v19;
    v30 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v21);
    v31 = v42;
    *v30 = v41;
    v30[1] = v31;
    v32 = v43;
    v33 = v44;
    v34 = v46;
    v30[4] = v45;
    v30[5] = v34;
    v30[2] = v32;
    v30[3] = v33;
    v35 = v47;
    v36 = v48;
    v37 = v50;
    v30[8] = v49;
    v30[9] = v37;
    v30[6] = v35;
    v30[7] = v36;
    swift_bridgeObjectRetain();
    result = (void *)outlined retain of NodeDefinitionStore.Node((uint64_t)&v41);
  }
  v40 = v38 + 2;
  if (v40 >= v13)
    goto LABEL_26;
  v39 = *(_QWORD *)(v6 + 8 * v40);
  if (v39)
  {
    v9 = v40;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v40 + 1;
    if (__OFADD__(v40, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v39 = *(_QWORD *)(v6 + 8 * v9);
    ++v40;
    if (v39)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<ConstantKey #1 in MetalStitchingBackend.stitchingGraphs(for:augmenting:coreLibrary:additionalLibraries:), String>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MetalDataType>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v30 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v30 >= v14)
      goto LABEL_26;
    v31 = *(_QWORD *)(v7 + 8 * v30);
    ++v10;
    if (!v31)
    {
      v10 = v30 + 1;
      if (v30 + 1 >= v14)
        goto LABEL_26;
      v31 = *(_QWORD *)(v7 + 8 * v10);
      if (!v31)
        break;
    }
LABEL_25:
    v13 = (v31 - 1) & v31;
    v16 = __clz(__rbit64(v31)) + (v10 << 6);
LABEL_12:
    v17 = v16 << 6;
    v18 = 8 * v16;
    v19 = v17 - v18;
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + v19);
    v22 = *v20;
    v21 = v20[1];
    v23 = v20[2];
    v24 = v20[3];
    v25 = v20[4];
    v26 = *((_BYTE *)v20 + 40);
    v27 = v20[6];
    v28 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v18);
    v29 = *(_QWORD *)(v5 + 48) + v19;
    *(_QWORD *)v29 = v22;
    *(_QWORD *)(v29 + 8) = v21;
    *(_QWORD *)(v29 + 16) = v23;
    *(_QWORD *)(v29 + 24) = v24;
    *(_QWORD *)(v29 + 32) = v25;
    *(_BYTE *)(v29 + 40) = v26;
    *(_QWORD *)(v29 + 48) = v27;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v18) = v28;
    swift_retain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v32 = v30 + 2;
  if (v32 >= v14)
    goto LABEL_26;
  v31 = *(_QWORD *)(v7 + 8 * v32);
  if (v31)
  {
    v10 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v31 = *(_QWORD *)(v7 + 8 * v10);
    ++v32;
    if (v31)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  __int128 v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v27 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v14)
      goto LABEL_26;
    v28 = *(_QWORD *)(v7 + 8 * v27);
    ++v10;
    if (!v28)
    {
      v10 = v27 + 1;
      if (v27 + 1 >= v14)
        goto LABEL_26;
      v28 = *(_QWORD *)(v7 + 8 * v10);
      if (!v28)
        break;
    }
LABEL_25:
    v13 = (v28 - 1) & v28;
    v16 = __clz(__rbit64(v28)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v20 = *v18;
    v19 = v18[1];
    v21 = 24 * v16;
    v22 = *(_QWORD *)(v3 + 56) + v21;
    v23 = *(_QWORD *)v22;
    v24 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    v25 = *(_OWORD *)(v22 + 8);
    *v24 = v20;
    v24[1] = v19;
    v26 = *(_QWORD *)(v5 + 56) + v21;
    *(_QWORD *)v26 = v23;
    *(_OWORD *)(v26 + 8) = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v29 = v27 + 2;
  if (v29 >= v14)
    goto LABEL_26;
  v28 = *(_QWORD *)(v7 + 8 * v29);
  if (v28)
  {
    v10 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v28 = *(_QWORD *)(v7 + 8 * v10);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_26;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
        break;
    }
LABEL_25:
    v22 = __clz(__rbit64(v20));
    v13 = (v20 - 1) & v20;
    v16 = v22 + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v18;
  }
  v21 = v19 + 2;
  if (v21 >= v14)
    goto LABEL_26;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v35 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v35 >= v14)
      goto LABEL_26;
    v36 = *(_QWORD *)(v7 + 8 * v35);
    ++v10;
    if (!v36)
    {
      v10 = v35 + 1;
      if (v35 + 1 >= v14)
        goto LABEL_26;
      v36 = *(_QWORD *)(v7 + 8 * v10);
      if (!v36)
        break;
    }
LABEL_25:
    v13 = (v36 - 1) & v36;
    v16 = __clz(__rbit64(v36)) + (v10 << 6);
LABEL_12:
    v17 = 80 * v16;
    v18 = *(_QWORD *)(v3 + 48) + 80 * v16;
    v19 = *(void **)v18;
    v20 = *(void **)(v18 + 8);
    v21 = *(_QWORD *)(v18 + 16);
    v22 = *(_QWORD *)(v18 + 24);
    v23 = *(_QWORD *)(v18 + 32);
    v24 = *(_QWORD *)(v18 + 40);
    v25 = *(_QWORD *)(v18 + 48);
    v26 = *(_QWORD *)(v18 + 56);
    v27 = *(_BYTE *)(v18 + 64);
    v28 = *(_QWORD *)(v18 + 72);
    v29 = 16 * v16;
    v30 = (uint64_t *)(*(_QWORD *)(v3 + 56) + v29);
    v31 = *v30;
    v32 = v30[1];
    v33 = *(_QWORD *)(v5 + 48) + v17;
    *(_QWORD *)v33 = v19;
    *(_QWORD *)(v33 + 8) = v20;
    *(_QWORD *)(v33 + 16) = v21;
    *(_QWORD *)(v33 + 24) = v22;
    *(_QWORD *)(v33 + 32) = v23;
    *(_QWORD *)(v33 + 40) = v24;
    *(_QWORD *)(v33 + 48) = v25;
    *(_QWORD *)(v33 + 56) = v26;
    *(_BYTE *)(v33 + 64) = v27;
    *(_QWORD *)(v33 + 72) = v28;
    v34 = (_QWORD *)(*(_QWORD *)(v5 + 56) + v29);
    *v34 = v31;
    v34[1] = v32;
    outlined copy of SGDataTypeStorage(v19, v20, v21, v22, v23, v24, v25, v26, v27);
    swift_retain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v37 = v35 + 2;
  if (v37 >= v14)
    goto LABEL_26;
  v36 = *(_QWORD *)(v7 + 8 * v37);
  if (v36)
  {
    v10 = v37;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v37 + 1;
    if (__OFADD__(v37, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v36 = *(_QWORD *)(v7 + 8 * v10);
    ++v37;
    if (v36)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for SGGeometryPropertyDefinition()
{
  return objc_opt_self();
}

id specialized _NativeDictionary.copy()()
{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, SGOutput>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, SGInput>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, MTLFunctionStitchingInputNode>);
}

id specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(void **)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    result = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized SGGeometryPropertyDefinition.CodingKey.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000245FCDAF0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t lazy protocol witness table accessor for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey;
  if (!lazy protocol witness table cache variable for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGGeometryPropertyDefinition.CodingKey, &type metadata for SGGeometryPropertyDefinition.CodingKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey;
  if (!lazy protocol witness table cache variable for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGGeometryPropertyDefinition.CodingKey, &type metadata for SGGeometryPropertyDefinition.CodingKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey;
  if (!lazy protocol witness table cache variable for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGGeometryPropertyDefinition.CodingKey, &type metadata for SGGeometryPropertyDefinition.CodingKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey;
  if (!lazy protocol witness table cache variable for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGGeometryPropertyDefinition.CodingKey, &type metadata for SGGeometryPropertyDefinition.CodingKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey);
  }
  return result;
}

uint64_t method lookup function for SGGeometryPropertyDefinition()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static SGGeometryPropertyDefinition.create(name:mappingTo:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of SGGeometryPropertyDefinition.__allocating_init(name:referencedGeomPropName:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of SGGeometryPropertyDefinition.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SGGeometryPropertyDefinition.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t storeEnumTagSinglePayload for SGGeometryPropertyDefinition.CodingKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_245F7D760 + 4 * byte_245FC4615[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_245F7D794 + 4 * asc_245FC4610[v4]))();
}

uint64_t sub_245F7D794(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_245F7D79C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x245F7D7A4);
  return result;
}

uint64_t sub_245F7D7B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x245F7D7B8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_245F7D7BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_245F7D7C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SGGeometryPropertyDefinition.CodingKey()
{
  return &type metadata for SGGeometryPropertyDefinition.CodingKey;
}

uint64_t outlined destroy of MetalFunctionNode?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MetalFunctionNode?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of GeomPropDef?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeomPropDef?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined consume of GeomPropDef?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return outlined consume of GeomPropDef.GeomProp(a4, a5, a6 & 1);
  }
  return result;
}

Swift::String __swiftcall OrderedSet._debugTypeName()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = specialized OrderedSet._debugTypeName()();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::String __swiftcall OrderedSet._debugDescription(typeName:)(Swift::String typeName)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  Swift::String v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t *boxed_opaque_existential_0;
  void (*v20)(uint64_t *, char *, uint64_t);
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t *v25;
  Swift::String v26;
  uint64_t v27;
  void *v28;
  Swift::String result;
  _QWORD v30[2];
  __int128 v31;
  uint64_t v32;
  void *v33;

  v4 = v3;
  v5 = v2;
  v6 = v1;
  v7 = *(_QWORD **)(v3 - 8);
  v8 = MEMORY[0x24BDAC7A8](typeName._countAndFlagsBits);
  v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)v30 - v12;
  v32 = v11;
  v33 = v14;
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = 23336;
  v15._object = (void *)0xE200000000000000;
  String.append(_:)(v15);
  v16 = *(_QWORD *)(v5 + 16);
  if (v16)
  {
    v30[1] = v6;
    swift_retain();
    swift_retain();
    ContiguousArray.subscript.getter();
    v17 = (void (*)(char *, char *, uint64_t))v7[4];
    v17(v10, v13, v4);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v18 = swift_allocObject();
    v31 = xmmword_245FBECD0;
    *(_OWORD *)(v18 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v18 + 56) = v4;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v18 + 32));
    v20 = (void (*)(uint64_t *, char *, uint64_t))v7[2];
    v20(boxed_opaque_existential_0, v10, v4);
    debugPrint<A>(_:separator:terminator:to:)();
    swift_bridgeObjectRelease();
    v21 = (void (*)(char *, uint64_t))v7[1];
    v21(v10, v4);
    if (v16 != 1)
    {
      v22 = 1;
      do
      {
        ContiguousArray.subscript.getter();
        ++v22;
        v17(v10, v13, v4);
        v23._countAndFlagsBits = 8236;
        v23._object = (void *)0xE200000000000000;
        String.append(_:)(v23);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
        v24 = swift_allocObject();
        *(_OWORD *)(v24 + 16) = v31;
        *(_QWORD *)(v24 + 56) = v4;
        v25 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v24 + 32));
        v20(v25, v10, v4);
        debugPrint<A>(_:separator:terminator:to:)();
        swift_bridgeObjectRelease();
        v21(v10, v4);
      }
      while (v16 != v22);
    }
    swift_release();
    swift_release();
  }
  v26._countAndFlagsBits = 10589;
  v26._object = (void *)0xE200000000000000;
  String.append(_:)(v26);
  v27 = v32;
  v28 = v33;
  result._object = v28;
  result._countAndFlagsBits = v27;
  return result;
}

uint64_t OrderedSet.debugDescription.getter()
{
  Swift::String v0;
  uint64_t countAndFlagsBits;

  v0._countAndFlagsBits = specialized OrderedSet._debugTypeName()();
  countAndFlagsBits = OrderedSet._debugDescription(typeName:)(v0)._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OrderedSet<A>()
{
  return OrderedSet.debugDescription.getter();
}

uint64_t specialized OrderedSet._debugTypeName()()
{
  Swift::String v0;
  Swift::String v1;

  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 62;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0x536465726564724FLL;
}

BOOL static SGNode.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

char *static SGNode.create(nodeDefName:name:)(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  return specialized static SGNode.create(nodeDefName:name:)(a1, a2, a3, a4);
}

char *SGNode.__allocating_init(name:data:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  return SGNode.init(name:data:)(a1, a2, a3);
}

uint64_t SGNode.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___SGNode_name);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SGNode.inputs.getter()
{
  return swift_bridgeObjectRetain();
}

Class @objc SGNode.inputs.getter(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  Class isa;

  a4(0);
  swift_bridgeObjectRetain();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

uint64_t SGNode.outputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SGNode.data.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of NodeData(v1 + OBJC_IVAR___SGNode_data, a1);
}

uint64_t SGNode.graph.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___SGNode_graph;
  swift_beginAccess();
  return MEMORY[0x24954C3E4](v1);
}

void SGNode.graph.setter(void *a1)
{
  swift_beginAccess();
  swift_unknownObjectWeakAssign();

}

void (*SGNode.graph.modify(_QWORD *a1))(id **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR___SGNode_graph;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x24954C3E4](v5);
  return SGInput.edge.modify;
}

char *SGNode.init(name:data:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  objc_class *ObjectType;
  uint64_t *v8;
  int v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  char *result;
  uint64_t v22;
  id v23;
  void *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  objc_super v31;
  uint64_t v32;
  unsigned __int8 v33;

  ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  v8 = (uint64_t *)&v3[OBJC_IVAR___SGNode_name];
  *v8 = a1;
  v8[1] = a2;
  outlined init with take of NodeData(a3, (uint64_t)&v32);
  v9 = v33 >> 6;
  if (!v9)
  {
    v33 &= 0x3Fu;
    swift_bridgeObjectRetain();
    v13 = v3;
    v14 = swift_bridgeObjectRetain();
    v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17BuiltInDefinitionV9InputSpecVG_AF7SGInputCs5NeverOTg504_s11d78Graph14recreateInputs33_C327379532F5DB2AB731A2524F70C7764from8nodeNameSayAA7k24CGAA8NodeDataO_SStFAgA17fgh2V9iJ6VXEfU_SSTf1cn_nTf4ng_n(v14, a1, a2);
    goto LABEL_5;
  }
  if (v9 == 1)
  {
    v33 &= 0x3Fu;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v10 = v3;
    v11 = swift_bridgeObjectRetain();
    v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph7SGInputCG_AHs5NeverOTg504_s11d78Graph14recreateInputs33_C327379532F5DB2AB731A2524F70C7764from8nodeNameSayAA7F28CGAA8NodeDataO_SStFA2GXEfU0_SSTf1cn_nTf4ng_n(v11, a1, a2);
LABEL_5:
    v15 = v12;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v33 &= 0x3Fu;
  swift_bridgeObjectRetain();
  v16 = v3;
  v15 = MEMORY[0x24BEE4AF8];
LABEL_7:
  *(_QWORD *)&v3[OBJC_IVAR___SGNode_inputs] = v15;
  v17 = recreateOutputs(from:nodeName:)(a3, a1, a2);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v3[OBJC_IVAR___SGNode_outputs] = v17;
  outlined init with take of NodeData(a3, (uint64_t)&v3[OBJC_IVAR___SGNode_data]);
  outlined retain of NodeData(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of NodeData);

  v31.receiver = v3;
  v31.super_class = ObjectType;
  v18 = (char *)objc_msgSendSuper2(&v31, sel_init);
  v19 = *(_QWORD *)&v18[OBJC_IVAR___SGNode_inputs];
  if (v19 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v25 = v18;
    result = (char *)_CocoaArrayWrapper.endIndex.getter();
    v20 = (uint64_t)result;
    if (!result)
      goto LABEL_16;
  }
  else
  {
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    result = v18;
    if (!v20)
      goto LABEL_16;
  }
  if (v20 < 1)
  {
    __break(1u);
    goto LABEL_27;
  }
  v22 = 0;
  do
  {
    if ((v19 & 0xC000000000000001) != 0)
      v23 = (id)MEMORY[0x24954B748](v22, v19);
    else
      v23 = *(id *)(v19 + 8 * v22 + 32);
    v24 = v23;
    ++v22;
    swift_beginAccess();
    swift_unknownObjectWeakAssign();

  }
  while (v20 != v22);
LABEL_16:
  swift_bridgeObjectRelease_n();
  v26 = *(_QWORD *)&v18[OBJC_IVAR___SGNode_outputs];
  if (!(v26 >> 62))
  {
    v27 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (char *)swift_bridgeObjectRetain_n();
    if (v27)
      goto LABEL_18;
LABEL_25:

    swift_bridgeObjectRelease();
    outlined retain of NodeData(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of NodeData);
    swift_bridgeObjectRelease();
    return v18;
  }
  swift_bridgeObjectRetain_n();
  result = (char *)_CocoaArrayWrapper.endIndex.getter();
  v27 = (uint64_t)result;
  if (!result)
    goto LABEL_25;
LABEL_18:
  if (v27 >= 1)
  {
    v28 = 0;
    do
    {
      if ((v26 & 0xC000000000000001) != 0)
        v29 = (id)MEMORY[0x24954B748](v28, v26);
      else
        v29 = *(id *)(v26 + 8 * v28 + 32);
      v30 = v29;
      ++v28;
      swift_beginAccess();
      swift_unknownObjectWeakAssign();

    }
    while (v27 != v28);
    goto LABEL_25;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t recreateOutputs(from:nodeName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  objc_class *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  objc_class *v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  id v28;
  uint64_t v29;
  objc_super v31;
  uint64_t v32;
  objc_super v33;
  uint64_t v34[3];
  uint64_t v35;
  unsigned __int8 v36;
  _QWORD v37[2];

  outlined init with take of NodeData(a1, (uint64_t)v34);
  v6 = v36 >> 6;
  if (v6)
  {
    v36 &= 0x3Fu;
    if (v6 == 1)
    {
      swift_beginAccess();
      swift_bridgeObjectRetain();
      outlined retain of NodeData(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of NodeData);
      v7 = swift_bridgeObjectRetain();
      v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph8SGOutputCG_AHs5NeverOTg504_s11d79Graph15recreateOutputs33_C327379532F5DB2AB731A2524F70C7764from8nodeNameSayAA8F28CGAA8NodeDataO_SStFA2GXEfU0_SSTf1cn_nTf4ng_n(v7, a2, a3);
      swift_bridgeObjectRelease();
      outlined retain of NodeData(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of NodeData);
      swift_bridgeObjectRelease();
    }
    else
    {
      v21 = v34[0];
      v22 = (objc_class *)type metadata accessor for SGOutput();
      v23 = (char *)objc_allocWithZone(v22);
      v24 = (uint64_t *)&v23[OBJC_IVAR___SGOutput_attachment];
      *v24 = 0;
      v24[1] = 0;
      v25 = &v23[OBJC_IVAR___SGOutput_edges];
      v26 = MEMORY[0x24BEE4AF8];
      *(_QWORD *)v25 = 0;
      *((_QWORD *)v25 + 1) = v26;
      swift_unknownObjectWeakInit();
      v27 = &v23[OBJC_IVAR___SGOutput_name];
      *(_QWORD *)v27 = 7632239;
      *((_QWORD *)v27 + 1) = 0xE300000000000000;
      *(_QWORD *)&v23[OBJC_IVAR___SGOutput_type] = v21;
      swift_beginAccess();
      *v24 = a2;
      v24[1] = a3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v33.receiver = v23;
      v33.super_class = v22;
      v28 = objc_msgSendSuper2(&v33, sel_init);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = xmmword_245FBF370;
      *(_QWORD *)(v29 + 32) = v28;
      v37[0] = v29;
      specialized Array._endMutation()();
      return v37[0];
    }
  }
  else
  {
    v36 &= 0x3Fu;
    v9 = v35;
    v37[0] = v35;
    v10 = *(_QWORD *)(v35 + 16);
    v8 = MEMORY[0x24BEE4AF8];
    if (v10)
    {
      v32 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      outlined retain of [Input]((uint64_t)v37);
      specialized ContiguousArray.reserveCapacity(_:)();
      v11 = (objc_class *)type metadata accessor for SGOutput();
      v12 = (uint64_t *)(v9 + 48);
      v13 = a2;
      do
      {
        v15 = *(v12 - 2);
        v14 = *(v12 - 1);
        v16 = *v12;
        v12 += 3;
        v17 = (char *)objc_allocWithZone(v11);
        v18 = (uint64_t *)&v17[OBJC_IVAR___SGOutput_attachment];
        *v18 = 0;
        v18[1] = 0;
        v19 = &v17[OBJC_IVAR___SGOutput_edges];
        *(_QWORD *)v19 = 0;
        *((_QWORD *)v19 + 1) = MEMORY[0x24BEE4AF8];
        swift_unknownObjectWeakInit();
        v20 = &v17[OBJC_IVAR___SGOutput_name];
        *(_QWORD *)v20 = v15;
        *((_QWORD *)v20 + 1) = v14;
        *(_QWORD *)&v17[OBJC_IVAR___SGOutput_type] = v16;
        swift_beginAccess();
        *v18 = v13;
        v18[1] = a3;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v31.receiver = v17;
        v31.super_class = v11;
        objc_msgSendSuper2(&v31, sel_init);
        swift_bridgeObjectRelease();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v10;
      }
      while (v10);
      v8 = v32;
      swift_bridgeObjectRelease();
      outlined release of [Input]((uint64_t)v37);
    }
  }
  return v8;
}

ShaderGraph::SGNode::CodingKeys_optional __swiftcall SGNode.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = stringValue._object;
  v2._countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SGNode.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return (ShaderGraph::SGNode::CodingKeys_optional)4;
  else
    return (ShaderGraph::SGNode::CodingKeys_optional)v3;
}

ShaderGraph::SGNode::CodingKeys_optional __swiftcall SGNode.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (ShaderGraph::SGNode::CodingKeys_optional)4;
}

uint64_t SGNode.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t SGNode.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_245F7E67C + 4 * byte_245FC4860[a1]))(1701667182, 0xE400000000000000);
}

uint64_t sub_245F7E67C()
{
  return 0x737475706E69;
}

uint64_t sub_245F7E690()
{
  return 0x7374757074756FLL;
}

uint64_t sub_245F7E6A8()
{
  return 1635017060;
}

uint64_t SGNode.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_245F7E6E0 + 4 * byte_245FC4864[a1]))(1701667182, 0xE400000000000000);
}

uint64_t sub_245F7E6E0()
{
  return 0x737475706E69;
}

uint64_t sub_245F7E6F4()
{
  return 0x7374757074756FLL;
}

uint64_t sub_245F7E70C()
{
  return 1635017060;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SGNode.CodingKeys(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_245F7E75C@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_245F7E7AC + 4 * byte_245FC486C[a1]))(0x737475706E69);
}

uint64_t sub_245F7E7AC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x737475706E69 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void protocol witness for Hashable.hashValue.getter in conformance SGNode.CodingKeys()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_245F7E888()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SGNode.CodingKeys()
{
  __asm { BR              X10 }
}

uint64_t sub_245F7E91C()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance SGNode.CodingKeys()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_245F7E9A8()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SGNode.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized SGNode.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SGNode.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_245F7EA5C + 4 * byte_245FC487C[*v0]))();
}

void sub_245F7EA5C(_QWORD *a1@<X8>)
{
  *a1 = 0x737475706E69;
  a1[1] = 0xE600000000000000;
}

void sub_245F7EA74(_QWORD *a1@<X8>)
{
  *a1 = 0x7374757074756FLL;
  a1[1] = 0xE700000000000000;
}

void sub_245F7EA90(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 1635017060;
  a1[1] = v1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SGNode.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_245F7EAC8 + 4 * byte_245FC4880[*v0]))(1701667182, 0xE400000000000000);
}

uint64_t sub_245F7EAC8()
{
  return 0x737475706E69;
}

uint64_t sub_245F7EADC()
{
  return 0x7374757074756FLL;
}

uint64_t sub_245F7EAF4()
{
  return 1635017060;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance SGNode.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized SGNode.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance SGNode.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SGNode.CodingKeys()
{
  lazy protocol witness table accessor for type SGNode.CodingKeys and conformance SGNode.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SGNode.CodingKeys()
{
  lazy protocol witness table accessor for type SGNode.CodingKeys and conformance SGNode.CodingKeys();
  return CodingKey.debugDescription.getter();
}

char *SGNode.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SGNode.init(from:)(a1);
}

char *SGNode.init(from:)(_QWORD *a1)
{
  char *v1;
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int v11;
  id v12;
  char *result;
  void *v14;
  void *v15;
  char *v16;
  uint64_t *v17;
  Swift::String v18;
  Swift::String v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  id v56;
  void *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  id v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[3];
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  _QWORD *v84;
  char *v85;
  objc_class *ObjectType;
  char v87;
  objc_super v88;
  char *v89;
  uint64_t v90;
  void *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 v99;
  _BYTE v100[96];

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType();
  v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SGNode.CodingKeys>);
  v5 = *(_QWORD *)(v82 - 8);
  MEMORY[0x24BDAC7A8](v82);
  v7 = (char *)v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = &v1[OBJC_IVAR___SGNode_graph];
  swift_unknownObjectWeakInit();
  v8 = (char *)a1[3];
  v84 = a1;
  __swift_project_boxed_opaque_existential_1(a1, (uint64_t)v8);
  lazy protocol witness table accessor for type SGNode.CodingKeys and conformance SGNode.CodingKeys();
  v85 = v1;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    v11 = 0;
    v16 = v85;
LABEL_4:
    type metadata accessor for SGError();
    v12 = v3;
    SGError.__allocating_init(_:)(v3);
    swift_willThrow();

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v84);
    if (v11)
      swift_bridgeObjectRelease();
    swift_unknownObjectWeakDestroy();

    swift_deallocPartialClassInstance();
    return v8;
  }
  v81 = v5;
  LOBYTE(v89) = 0;
  v9 = v82;
  v10 = v7;
  v8 = (char *)KeyedDecodingContainer.decode(_:forKey:)();
  v15 = v14;
  v16 = v85;
  v17 = (uint64_t *)&v85[OBJC_IVAR___SGNode_name];
  *v17 = (uint64_t)v8;
  v17[1] = (uint64_t)v14;
  swift_bridgeObjectRetain();
  v18._countAndFlagsBits = (uint64_t)v8;
  v18._object = v15;
  v19._countAndFlagsBits = 1701667182;
  v19._object = (void *)0xE400000000000000;
  validate(_:named:)(v18, v19);
  v3 = v20;
  if (v20)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v81 + 8))(v10, v9);
    v11 = 1;
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  v87 = 3;
  lazy protocol witness table accessor for type NodeData and conformance NodeData();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v75 = v10;
  v21 = v90;
  v23 = v91;
  v22 = v92;
  v24 = v93;
  v25 = v94;
  v26 = v95;
  v27 = v96;
  v28 = v97;
  v29 = v98;
  v30 = v99;
  v31 = (uint64_t)&v16[OBJC_IVAR___SGNode_data];
  v83 = v89;
  *(_QWORD *)v31 = v89;
  *(_QWORD *)(v31 + 8) = v21;
  *(_QWORD *)(v31 + 16) = v23;
  *(_QWORD *)(v31 + 24) = v22;
  *(_QWORD *)(v31 + 32) = v24;
  *(_QWORD *)(v31 + 40) = v25;
  *(_QWORD *)(v31 + 48) = v26;
  *(_QWORD *)(v31 + 56) = v27;
  *(_QWORD *)(v31 + 64) = v28;
  *(_QWORD *)(v31 + 72) = v29;
  *(_BYTE *)(v31 + 80) = v30;
  v32 = *v17;
  v33 = v17[1];
  if (!(v30 >> 6))
  {
    v79 = v26;
    v80 = v22;
    v77 = v24;
    v78 = v25;
    v76 = v27;
    v42 = v28;
    v43 = v30;
    v69 = v32;
    v44 = swift_bridgeObjectRetain();
    v70 = v43;
    v71 = v29;
    v74 = v42;
    v66 = v42;
    v45 = v44;
    v73 = v21;
    outlined copy of NodeData(v83, v21, v23, v80, v77, v78, v79, v76, v66, v29, v43);
    v46 = swift_bridgeObjectRetain();
    v47 = v23;
    v41 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17BuiltInDefinitionV9InputSpecVG_AF7SGInputCs5NeverOTg504_s11d78Graph14recreateInputs33_C327379532F5DB2AB731A2524F70C7764from8nodeNameSayAA7k24CGAA8NodeDataO_SStFAgA17fgh2V9iJ6VXEfU_SSTf1cn_nTf4ng_n(v46, v69, v45);
    v72 = v47;
    goto LABEL_14;
  }
  if (v30 >> 6 == 1)
  {
    v72 = v23;
    v73 = v21;
    v34 = v83;
    v35 = &v83[OBJC_IVAR___SGGraph_inputs];
    v69 = v32;
    v68[1] = v33;
    v79 = v26;
    v80 = v22;
    v77 = v24;
    v78 = v25;
    v76 = v27;
    v74 = v28;
    v36 = v29;
    v37 = v30;
    swift_beginAccess();
    v68[2] = *(_QWORD *)v35;
    v38 = swift_bridgeObjectRetain();
    v70 = v37;
    v71 = v36;
    v67 = v36;
    v39 = v38;
    outlined copy of NodeData(v34, v73, v72, v80, v77, v78, v79, v76, v74, v67, v37);
    v40 = swift_bridgeObjectRetain();
    v41 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph7SGInputCG_AHs5NeverOTg504_s11d78Graph14recreateInputs33_C327379532F5DB2AB731A2524F70C7764from8nodeNameSayAA7F28CGAA8NodeDataO_SStFA2GXEfU0_SSTf1cn_nTf4ng_n(v40, v69, v39);
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodeData(v83, v73, v72, v80, v77, v78, v79, v76, v74, v71, v70);
    goto LABEL_16;
  }
  v41 = MEMORY[0x24BEE4AF8];
LABEL_16:
  *(_QWORD *)&v16[OBJC_IVAR___SGNode_inputs] = v41;
  outlined init with take of NodeData(v31, (uint64_t)v100);
  v48 = *v17;
  v49 = v17[1];
  outlined retain of NodeData((uint64_t)v100, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of NodeData);
  swift_bridgeObjectRetain();
  v50 = recreateOutputs(from:nodeName:)((uint64_t)v100, v48, v49);
  swift_bridgeObjectRelease();
  outlined retain of NodeData((uint64_t)v100, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of NodeData);
  *(_QWORD *)&v16[OBJC_IVAR___SGNode_outputs] = v50;

  v88.receiver = v16;
  v88.super_class = ObjectType;
  v8 = (char *)objc_msgSendSuper2(&v88, sel_init);
  v51 = *(_QWORD *)&v8[OBJC_IVAR___SGNode_inputs];
  if (v51 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v58 = v8;
    result = (char *)_CocoaArrayWrapper.endIndex.getter();
    v52 = (uint64_t)result;
    if (!result)
      goto LABEL_25;
  }
  else
  {
    v52 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    result = v8;
    if (!v52)
      goto LABEL_25;
  }
  if (v52 < 1)
  {
    __break(1u);
    goto LABEL_36;
  }
  v53 = 0;
  v54 = v51 & 0xC000000000000001;
  v55 = v51;
  do
  {
    if (v54)
      v56 = (id)MEMORY[0x24954B748](v53, v51);
    else
      v56 = *(id *)(v51 + 8 * v53 + 32);
    v57 = v56;
    ++v53;
    swift_beginAccess();
    swift_unknownObjectWeakAssign();

    v51 = v55;
  }
  while (v52 != v53);
LABEL_25:
  swift_bridgeObjectRelease_n();
  v59 = *(_QWORD *)&v8[OBJC_IVAR___SGNode_outputs];
  if (!(v59 >> 62))
  {
    v60 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (char *)swift_bridgeObjectRetain_n();
    if (v60)
      goto LABEL_27;
LABEL_34:
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v81 + 8))(v75, v82);

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v84);
    return v8;
  }
  swift_bridgeObjectRetain_n();
  result = (char *)_CocoaArrayWrapper.endIndex.getter();
  v60 = (uint64_t)result;
  if (!result)
    goto LABEL_34;
LABEL_27:
  if (v60 >= 1)
  {
    v61 = 0;
    v62 = v59 & 0xC000000000000001;
    v63 = v59;
    do
    {
      if (v62)
        v64 = (id)MEMORY[0x24954B748](v61, v59);
      else
        v64 = *(id *)(v59 + 8 * v61 + 32);
      v65 = v64;
      ++v61;
      swift_beginAccess();
      swift_unknownObjectWeakAssign();

      v59 = v63;
    }
    while (v60 != v61);
    goto LABEL_34;
  }
LABEL_36:
  __break(1u);
  return result;
}

void SGNode.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  char v9;
  __int128 v10;
  __int128 v11;
  id v12;
  _BYTE v13[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SGNode.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SGNode.CodingKeys and conformance SGNode.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v2)
  {
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    type metadata accessor for SGError();
    v12 = v2;
    SGError.__allocating_init(_:)(v2);
    swift_willThrow();

  }
  else
  {
    v9 = *(_BYTE *)(v3 + OBJC_IVAR___SGNode_data + 80);
    v10 = *(_OWORD *)(v3 + OBJC_IVAR___SGNode_data + 16);
    v14 = *(_OWORD *)(v3 + OBJC_IVAR___SGNode_data);
    v15 = v10;
    v11 = *(_OWORD *)(v3 + OBJC_IVAR___SGNode_data + 48);
    v16 = *(_OWORD *)(v3 + OBJC_IVAR___SGNode_data + 32);
    v17 = v11;
    v18 = *(_OWORD *)(v3 + OBJC_IVAR___SGNode_data + 64);
    v19 = v9;
    v13[15] = 3;
    lazy protocol witness table accessor for type NodeData and conformance NodeData();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  }
}

id SGNode.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SGNode.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SGNode.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

char *protocol witness for Decodable.init(from:) in conformance SGNode@<X0>(_QWORD *a1@<X0>, char **a2@<X8>)
{
  objc_class *v2;
  uint64_t v3;
  id v6;
  char *result;

  v6 = objc_allocWithZone(v2);
  result = SGNode.init(from:)(a1);
  if (!v3)
    *a2 = result;
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance SGNode(_QWORD *a1)
{
  SGNode.encode(to:)(a1);
}

char *static SGNode.create(graph:name:)(void *a1, uint64_t a2, char *a3)
{
  return specialized static SGNode.create(graph:name:)(a1, a2, a3);
}

char *static SGNode.create(_:type:name:)(void *a1, uint64_t a2, uint64_t a3, char *a4)
{
  return specialized static SGNode.create(_:type:name:)(a1, a2, a3, a4);
}

{
  return specialized static SGNode.create(_:type:name:)(a1, a2, a3, a4);
}

char *static SGNode.create(_:name:)(char a1, uint64_t a2, char *a3)
{
  id v5;
  char *v6;

  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithBool_, a1 & 1);
  v6 = specialized static SGNode.create(_:type:name:)(v5, 1, a2, a3);

  return v6;
}

id @objc static SGNode.create(_:type:name:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;

  if (a5)
  {
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v12 = v11;
  }
  else
  {
    v10 = 0;
    v12 = 0;
  }
  v13 = a3;
  v14 = (void *)a7(a3, a4, v10, v12);

  swift_bridgeObjectRelease();
  return v14;
}

char *static SGNode.create(value:type:name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  return specialized static SGNode.create(value:type:name:)(a1, a2, a3, a4, a5);
}

char *static SGNode.createColor3(color:name:)(void *a1, uint64_t a2, void *a3)
{
  return static SGNode.createColor3(color:name:)(a1, a2, a3, 3);
}

char *static SGNode.createColor4(color:name:)(void *a1, uint64_t a2, void *a3)
{
  return static SGNode.createColor3(color:name:)(a1, a2, a3, 4);
}

char *static SGNode.createColor3(color:name:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  char *v4;
  uint64_t v9;

  if (a3)
  {
    swift_bridgeObjectRetain();
    v4 = specialized static SGNode.create(color:name:numComponents:)(a1, a2, a3, a4);
    swift_bridgeObjectRelease();
  }
  else
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(_OWORD *)v9 = xmmword_245FBF5D0;
    *(_BYTE *)(v9 + 16) = 1;
    swift_willThrow();
  }
  return v4;
}

char *@objc static SGNode.createColor3(color:name:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  char *v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;

  if (a4)
  {
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v10;
    v12 = a3;
    v13 = specialized static SGNode.create(color:name:numComponents:)(a3, v9, v11, a6);
    swift_bridgeObjectRelease();

  }
  else
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v16 = (void *)swift_allocError();
    *(_OWORD *)v17 = xmmword_245FBF5D0;
    *(_BYTE *)(v17 + 16) = 1;
    swift_willThrow();
    if (a5)
    {
      v14 = (void *)_convertErrorToNSError(_:)();

      v15 = v14;
      v13 = 0;
      *a5 = v14;
    }
    else
    {

      v13 = 0;
    }
  }
  return v13;
}

uint64_t SGNode.input.getter()
{
  return SGNode.input.getter();
}

{
  swift_getKeyPath();
  return swift_bridgeObjectRetain();
}

uint64_t SGNode.output.getter()
{
  return SGNode.input.getter();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17BuiltInDefinitionV9InputSpecVG_AF7SGInputCs5NeverOTg504_s11d78Graph14recreateInputs33_C327379532F5DB2AB731A2524F70C776LL4from8nodeNameSayAA7k24CGAA8NodeDataO_SStFAgA17fgh2V9iJ6VXEfU_SSTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  objc_class *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  objc_super v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v17 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v8 = (objc_class *)type metadata accessor for SGInput();
    v9 = (uint64_t *)(a1 + 48);
    do
    {
      v11 = *(v9 - 2);
      v10 = *(v9 - 1);
      v12 = *v9;
      v9 += 4;
      v13 = (char *)objc_allocWithZone(v8);
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakInit();
      v14 = &v13[OBJC_IVAR___SGInput_name];
      *(_QWORD *)v14 = v11;
      *((_QWORD *)v14 + 1) = v10;
      *(_QWORD *)&v13[OBJC_IVAR___SGInput_type] = v12;
      v15 = &v13[OBJC_IVAR___SGInput_attachment];
      *(_QWORD *)v15 = a2;
      *((_QWORD *)v15 + 1) = a3;
      v16.receiver = v13;
      v16.super_class = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      objc_msgSendSuper2(&v16, sel_init);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v4;
    }
    while (v4);
    return v17;
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph7SGInputCG_AHs5NeverOTg504_s11d78Graph14recreateInputs33_C327379532F5DB2AB731A2524F70C776LL4from8nodeNameSayAA7F28CGAA8NodeDataO_SStFA2GXEfU0_SSTf1cn_nTf4ng_n(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  objc_class *v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  objc_super v21;
  uint64_t v22;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_14;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = MEMORY[0x24BEE4AF8];
    if (!v4)
      break;
    v22 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v4 < 0)
    {
      __break(1u);
      return result;
    }
    v6 = 0;
    v17 = v3 & 0xC000000000000001;
    v18 = v3;
    while (v4 != v6)
    {
      if (v17)
        v7 = (char *)MEMORY[0x24954B748](v6, v3);
      else
        v7 = (char *)*(id *)(v3 + 8 * v6 + 32);
      v8 = v7;
      ++v6;
      v9 = *(_QWORD *)&v7[OBJC_IVAR___SGInput_name];
      v10 = *(_QWORD *)&v7[OBJC_IVAR___SGInput_name + 8];
      v11 = &v7[OBJC_IVAR___SGInput_type];
      swift_beginAccess();
      v12 = *(_QWORD *)v11;
      v13 = (objc_class *)type metadata accessor for SGInput();
      v14 = (char *)objc_allocWithZone(v13);
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakInit();
      v15 = &v14[OBJC_IVAR___SGInput_name];
      *(_QWORD *)v15 = v9;
      *((_QWORD *)v15 + 1) = v10;
      *(_QWORD *)&v14[OBJC_IVAR___SGInput_type] = v12;
      v16 = &v14[OBJC_IVAR___SGInput_attachment];
      *(_QWORD *)v16 = a2;
      *((_QWORD *)v16 + 1) = a3;
      v21.receiver = v14;
      v21.super_class = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      objc_msgSendSuper2(&v21, sel_init);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v3 = v18;
      if (v4 == v6)
        return v22;
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph8SGOutputCG_AHs5NeverOTg504_s11d79Graph15recreateOutputs33_C327379532F5DB2AB731A2524F70C776LL4from8nodeNameSayAA8F28CGAA8NodeDataO_SStFA2GXEfU0_SSTf1cn_nTf4ng_n(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  objc_class *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  objc_super v23;
  uint64_t v24;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_14;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = MEMORY[0x24BEE4AF8];
    if (!v4)
      break;
    v24 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v4 < 0)
    {
      __break(1u);
      return result;
    }
    v6 = 0;
    v18 = v3 & 0xC000000000000001;
    v19 = v4;
    v20 = v3;
    while (v4 != v6)
    {
      if (v18)
        v7 = (char *)MEMORY[0x24954B748](v6, v3);
      else
        v7 = (char *)*(id *)(v3 + 8 * v6 + 32);
      v8 = v7;
      ++v6;
      v9 = *(_QWORD *)&v7[OBJC_IVAR___SGOutput_name];
      v10 = *(_QWORD *)&v7[OBJC_IVAR___SGOutput_name + 8];
      v11 = &v7[OBJC_IVAR___SGOutput_type];
      swift_beginAccess();
      v12 = *(_QWORD *)v11;
      v13 = (objc_class *)type metadata accessor for SGOutput();
      v14 = (char *)objc_allocWithZone(v13);
      v15 = &v14[OBJC_IVAR___SGOutput_attachment];
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
      v16 = &v14[OBJC_IVAR___SGOutput_edges];
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = MEMORY[0x24BEE4AF8];
      swift_unknownObjectWeakInit();
      v17 = &v14[OBJC_IVAR___SGOutput_name];
      *(_QWORD *)v17 = v9;
      *((_QWORD *)v17 + 1) = v10;
      *(_QWORD *)&v14[OBJC_IVAR___SGOutput_type] = v12;
      swift_beginAccess();
      *(_QWORD *)v15 = a2;
      *((_QWORD *)v15 + 1) = a3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v23.receiver = v14;
      v23.super_class = v13;
      objc_msgSendSuper2(&v23, sel_init);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v4 = v19;
      v3 = v20;
      if (v19 == v6)
        return v24;
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

char *specialized static SGNode.create(nodeDefName:name:)(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  Swift::String v8;
  Swift::String v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  void *v14;
  uint64_t v15;
  __int128 v16;
  char *v17;
  id v18;
  char *result;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  objc_class *v26;
  char *v27;
  uint64_t *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  objc_class *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  void *v57;
  objc_class *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  objc_super v68;
  objc_super v69;
  _QWORD v70[6];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  if (!a2)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v11 = (void *)swift_allocError();
    v16 = xmmword_245FC4800;
LABEL_8:
    *(_OWORD *)v15 = v16;
    *(_BYTE *)(v15 + 16) = 1;
LABEL_9:
    swift_willThrow();
    goto LABEL_10;
  }
  if (!a4)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v11 = (void *)swift_allocError();
    v16 = xmmword_245FBF5D0;
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = a1;
  v8._object = a2;
  v9._countAndFlagsBits = 0x4E66654465646F6ELL;
  v9._object = (void *)0xEB00000000656D61;
  validate(_:named:)(v8, v9);
  v11 = v10;
  if (v10
    || (v12._countAndFlagsBits = a3,
        v12._object = a4,
        v13._countAndFlagsBits = 1701667182,
        v13._object = (void *)0xE400000000000000,
        validate(_:named:)(v12, v13),
        (v11 = v14) != 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_10:
    v17 = (char *)type metadata accessor for SGError();
    v18 = v11;
    SGError.__allocating_init(_:)(v11);
    swift_willThrow();

    return v17;
  }
  if (one-time initialization token for shared != -1)
    swift_once();
  v21 = *(_QWORD *)(static BuiltInDefinitionStore.shared + 40);
  v20 = *(_QWORD **)(static BuiltInDefinitionStore.shared + 48);
  v22 = *(_QWORD *)(static BuiltInDefinitionStore.shared + 56);
  swift_bridgeObjectRetain();
  specialized OrderedDictionary.subscript.getter(a1, (uint64_t)a2, v21, v20, v22, v70);
  swift_bridgeObjectRelease();
  outlined init with take of BuiltInDefinition?((uint64_t)v70, (uint64_t)&v71);
  v23 = v72;
  if (!v72)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v11 = (void *)swift_allocError();
    *(_QWORD *)v45 = a1;
    *(_QWORD *)(v45 + 8) = a2;
    *(_BYTE *)(v45 + 16) = 0;
    goto LABEL_9;
  }
  v60 = v71;
  v24 = v73;
  v25 = v74;
  v64 = v76;
  v65 = v75;
  swift_bridgeObjectRelease();
  v26 = (objc_class *)type metadata accessor for SGNode();
  v27 = (char *)objc_allocWithZone(v26);
  swift_unknownObjectWeakInit();
  v28 = (uint64_t *)&v27[OBJC_IVAR___SGNode_name];
  *v28 = a3;
  v28[1] = (uint64_t)a4;
  swift_bridgeObjectRetain();
  v29 = v27;
  v30 = swift_bridgeObjectRetain();
  v31 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17BuiltInDefinitionV9InputSpecVG_AF7SGInputCs5NeverOTg504_s11d78Graph14recreateInputs33_C327379532F5DB2AB731A2524F70C7764from8nodeNameSayAA7k24CGAA8NodeDataO_SStFAgA17fgh2V9iJ6VXEfU_SSTf1cn_nTf4ng_n(v30, a3, (uint64_t)a4);
  v63 = v24;
  swift_bridgeObjectRelease();
  v32 = &demangling cache variable for type metadata for KeyedEncodingContainer<SGGraph.CodingKeys>;
  v59 = v29;
  *(_QWORD *)&v29[OBJC_IVAR___SGNode_inputs] = v31;
  v33 = *(_QWORD *)(v25 + 16);
  v61 = v25;
  v62 = v23;
  if (v33)
  {
    v58 = v26;
    v67 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    v66 = (uint64_t)a4;
    v34 = (uint64_t *)(v25 + 48);
    v35 = (objc_class *)type metadata accessor for SGOutput();
    do
    {
      v37 = *(v34 - 2);
      v36 = *(v34 - 1);
      v38 = *v34;
      v34 += 3;
      v39 = (char *)objc_allocWithZone(v35);
      v40 = (uint64_t *)&v39[OBJC_IVAR___SGOutput_attachment];
      *v40 = 0;
      v40[1] = 0;
      v41 = &v39[OBJC_IVAR___SGOutput_edges];
      *(_QWORD *)v41 = 0;
      *((_QWORD *)v41 + 1) = MEMORY[0x24BEE4AF8];
      swift_unknownObjectWeakInit();
      v42 = &v39[OBJC_IVAR___SGOutput_name];
      *(_QWORD *)v42 = v37;
      *((_QWORD *)v42 + 1) = v36;
      *(_QWORD *)&v39[OBJC_IVAR___SGOutput_type] = v38;
      swift_beginAccess();
      *v40 = a3;
      v40[1] = v66;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v69.receiver = v39;
      v69.super_class = v35;
      objc_msgSendSuper2(&v69, sel_init);
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v33;
    }
    while (v33);
    v43 = (uint64_t)&selRef_materialFromGraph_configuration_error_;
    v44 = v67;
    v25 = v61;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v23 = v62;
    v26 = v58;
    v32 = (_QWORD *)&demangling cache variable for type metadata for KeyedEncodingContainer<SGGraph.CodingKeys>;
  }
  else
  {
    v43 = 0x1F34D2000;
    swift_bridgeObjectRelease();
    v44 = MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)&v59[OBJC_IVAR___SGNode_outputs] = v44;
  v46 = &v59[OBJC_IVAR___SGNode_data];
  *(_QWORD *)v46 = v60;
  *((_QWORD *)v46 + 1) = v23;
  *((_QWORD *)v46 + 2) = v63;
  *((_QWORD *)v46 + 3) = v25;
  *((_QWORD *)v46 + 4) = v65;
  *((_QWORD *)v46 + 5) = v64;
  *((_OWORD *)v46 + 3) = 0u;
  *((_OWORD *)v46 + 4) = 0u;
  v46[80] = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of MaterialXAvailability(v65, v64);

  v68.receiver = v59;
  v68.super_class = v26;
  v17 = (char *)objc_msgSendSuper2(&v68, *(SEL *)(v43 + 160));
  v47 = *(_QWORD *)&v17[v32[126]];
  if (v47 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v52 = v17;
    result = (char *)_CocoaArrayWrapper.endIndex.getter();
    v48 = (uint64_t)result;
    if (!result)
      goto LABEL_30;
  }
  else
  {
    v48 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    result = v17;
    if (!v48)
      goto LABEL_30;
  }
  if (v48 < 1)
  {
    __break(1u);
    goto LABEL_42;
  }
  v49 = 0;
  do
  {
    if ((v47 & 0xC000000000000001) != 0)
      v50 = (id)MEMORY[0x24954B748](v49, v47);
    else
      v50 = *(id *)(v47 + 8 * v49 + 32);
    v51 = v50;
    ++v49;
    swift_beginAccess();
    swift_unknownObjectWeakAssign();

  }
  while (v48 != v49);
LABEL_30:
  swift_bridgeObjectRelease_n();
  v53 = *(_QWORD *)&v17[OBJC_IVAR___SGNode_outputs];
  if (v53 >> 62)
  {
    swift_bridgeObjectRetain_n();
    result = (char *)_CocoaArrayWrapper.endIndex.getter();
    v54 = (uint64_t)result;
  }
  else
  {
    v54 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (char *)swift_bridgeObjectRetain_n();
  }
  if (!v54)
  {
LABEL_39:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MaterialXAvailability(v65, v64);
    swift_bridgeObjectRelease();
    return v17;
  }
  if (v54 >= 1)
  {
    v55 = 0;
    do
    {
      if ((v53 & 0xC000000000000001) != 0)
        v56 = (id)MEMORY[0x24954B748](v55, v53);
      else
        v56 = *(id *)(v53 + 8 * v55 + 32);
      v57 = v56;
      ++v55;
      swift_beginAccess();
      swift_unknownObjectWeakAssign();

    }
    while (v54 != v55);
    goto LABEL_39;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t outlined init with copy of NodeData(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for NodeData(a2, a1);
  return a2;
}

unint64_t specialized SGNode.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SGNode.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type SGNode.CodingKeys and conformance SGNode.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGNode.CodingKeys and conformance SGNode.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGNode.CodingKeys and conformance SGNode.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGNode.CodingKeys, &type metadata for SGNode.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGNode.CodingKeys and conformance SGNode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGNode.CodingKeys and conformance SGNode.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGNode.CodingKeys and conformance SGNode.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGNode.CodingKeys, &type metadata for SGNode.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGNode.CodingKeys and conformance SGNode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGNode.CodingKeys and conformance SGNode.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGNode.CodingKeys and conformance SGNode.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGNode.CodingKeys, &type metadata for SGNode.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGNode.CodingKeys and conformance SGNode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGNode.CodingKeys and conformance SGNode.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGNode.CodingKeys and conformance SGNode.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGNode.CodingKeys, &type metadata for SGNode.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGNode.CodingKeys and conformance SGNode.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NodeData and conformance NodeData()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NodeData and conformance NodeData;
  if (!lazy protocol witness table cache variable for type NodeData and conformance NodeData)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for NodeData, &type metadata for NodeData);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeData and conformance NodeData);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NodeData and conformance NodeData;
  if (!lazy protocol witness table cache variable for type NodeData and conformance NodeData)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for NodeData, &type metadata for NodeData);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeData and conformance NodeData);
  }
  return result;
}

char *specialized static SGNode.create(graph:name:)(void *a1, uint64_t a2, char *a3)
{
  char *v3;
  id v6;
  Swift::String v7;
  Swift::String v8;
  void *v9;
  void *v10;
  uint64_t v11;
  __int128 v12;
  id v13;
  char *result;
  objc_class *v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  id v36;
  objc_super v37;

  if (!a1)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v10 = (void *)swift_allocError();
    v12 = xmmword_245FBFF80;
LABEL_7:
    *(_OWORD *)v11 = v12;
    *(_BYTE *)(v11 + 16) = 1;
    swift_willThrow();
    goto LABEL_8;
  }
  v3 = a3;
  if (!a3)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v10 = (void *)swift_allocError();
    v12 = xmmword_245FBF5D0;
    goto LABEL_7;
  }
  v6 = a1;
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = a2;
  v7._object = v3;
  v8._countAndFlagsBits = 1701667182;
  v8._object = (void *)0xE400000000000000;
  validate(_:named:)(v7, v8);
  v10 = v9;
  if (v9)
  {

    swift_bridgeObjectRelease();
LABEL_8:
    type metadata accessor for SGError();
    v13 = v10;
    SGError.__allocating_init(_:)(v10);
    swift_willThrow();

    return v3;
  }
  v15 = (objc_class *)type metadata accessor for SGNode();
  v16 = (char *)objc_allocWithZone(v15);
  swift_unknownObjectWeakInit();
  v17 = (uint64_t *)&v16[OBJC_IVAR___SGNode_name];
  *v17 = a2;
  v17[1] = (uint64_t)v3;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v18 = v16;
  v19 = swift_bridgeObjectRetain();
  v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph7SGInputCG_AHs5NeverOTg504_s11d78Graph14recreateInputs33_C327379532F5DB2AB731A2524F70C7764from8nodeNameSayAA7F28CGAA8NodeDataO_SStFA2GXEfU0_SSTf1cn_nTf4ng_n(v19, a2, (uint64_t)v3);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v18[OBJC_IVAR___SGNode_inputs] = v20;
  swift_beginAccess();
  v21 = v6;
  swift_bridgeObjectRetain();
  v22 = swift_bridgeObjectRetain();
  v23 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph8SGOutputCG_AHs5NeverOTg504_s11d79Graph15recreateOutputs33_C327379532F5DB2AB731A2524F70C7764from8nodeNameSayAA8F28CGAA8NodeDataO_SStFA2GXEfU0_SSTf1cn_nTf4ng_n(v22, a2, (uint64_t)v3);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease_n();
  *(_QWORD *)&v18[OBJC_IVAR___SGNode_outputs] = v23;
  v24 = &v18[OBJC_IVAR___SGNode_data];
  *(_QWORD *)v24 = a1;
  *(_OWORD *)(v24 + 8) = 0u;
  *(_OWORD *)(v24 + 24) = 0u;
  *(_OWORD *)(v24 + 40) = 0u;
  *(_OWORD *)(v24 + 56) = 0u;
  *((_QWORD *)v24 + 9) = 0;
  v24[80] = 64;
  v36 = v21;

  v37.receiver = v18;
  v37.super_class = v15;
  v3 = (char *)objc_msgSendSuper2(&v37, sel_init);
  v25 = *(_QWORD *)&v3[OBJC_IVAR___SGNode_inputs];
  if (v25 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v30 = v3;
    result = (char *)_CocoaArrayWrapper.endIndex.getter();
    v26 = (uint64_t)result;
    if (!result)
      goto LABEL_19;
  }
  else
  {
    v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    result = v3;
    if (!v26)
      goto LABEL_19;
  }
  if (v26 < 1)
  {
    __break(1u);
    goto LABEL_30;
  }
  v27 = 0;
  do
  {
    if ((v25 & 0xC000000000000001) != 0)
      v28 = (id)MEMORY[0x24954B748](v27, v25);
    else
      v28 = *(id *)(v25 + 8 * v27 + 32);
    v29 = v28;
    ++v27;
    swift_beginAccess();
    swift_unknownObjectWeakAssign();

  }
  while (v26 != v27);
LABEL_19:
  swift_bridgeObjectRelease_n();
  v31 = *(_QWORD *)&v3[OBJC_IVAR___SGNode_outputs];
  if (!(v31 >> 62))
  {
    v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (char *)swift_bridgeObjectRetain_n();
    if (v32)
      goto LABEL_21;
LABEL_28:

    swift_bridgeObjectRelease_n();
    return v3;
  }
  swift_bridgeObjectRetain_n();
  result = (char *)_CocoaArrayWrapper.endIndex.getter();
  v32 = (uint64_t)result;
  if (!result)
    goto LABEL_28;
LABEL_21:
  if (v32 >= 1)
  {
    v33 = 0;
    do
    {
      if ((v31 & 0xC000000000000001) != 0)
        v34 = (id)MEMORY[0x24954B748](v33, v31);
      else
        v34 = *(id *)(v31 + 8 * v33 + 32);
      v35 = v34;
      ++v33;
      swift_beginAccess();
      swift_unknownObjectWeakAssign();

    }
    while (v32 != v33);
    goto LABEL_28;
  }
LABEL_30:
  __break(1u);
  return result;
}

char *specialized static SGNode.create(_:type:name:)(void *a1, uint64_t a2, uint64_t a3, char *a4)
{
  char *v4;
  id v7;
  Swift::String v8;
  Swift::String v9;
  void *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  id v14;
  char *result;
  id v16;
  char v17;
  objc_class *v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  objc_super v34;
  _OWORD v35[4];
  char v36;
  _QWORD v37[2];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;
  id v43;

  if (!a1)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v11 = (void *)swift_allocError();
    v13 = xmmword_245FC4810;
LABEL_7:
    *(_OWORD *)v12 = v13;
    *(_BYTE *)(v12 + 16) = 1;
    swift_willThrow();
    goto LABEL_8;
  }
  v4 = a4;
  if (!a4)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v11 = (void *)swift_allocError();
    v13 = xmmword_245FBF5D0;
    goto LABEL_7;
  }
  v7 = a1;
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = a3;
  v8._object = v4;
  v9._countAndFlagsBits = 1701667182;
  v9._object = (void *)0xE400000000000000;
  validate(_:named:)(v8, v9);
  v11 = v10;
  if (v10)
  {

    swift_bridgeObjectRelease();
LABEL_8:
    type metadata accessor for SGError();
    v14 = v11;
    SGError.__allocating_init(_:)(v11);
    swift_willThrow();

    return v4;
  }
  v16 = v7;
  specialized SGDataTypeStorage.init(type:scalar:)(v16, a2, (uint64_t)v35);
  v17 = v36;
  v43 = v16;

  v37[0] = a2;
  v37[1] = 0;
  v38 = v35[0];
  v39 = v35[1];
  v40 = v35[2];
  v41 = v35[3];
  v42 = v17 | 0x80;
  v18 = (objc_class *)type metadata accessor for SGNode();
  v19 = (char *)objc_allocWithZone(v18);
  swift_unknownObjectWeakInit();
  v20 = (uint64_t *)&v19[OBJC_IVAR___SGNode_name];
  *v20 = a3;
  v20[1] = (uint64_t)v4;
  *(_QWORD *)&v19[OBJC_IVAR___SGNode_inputs] = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  v21 = v19;
  v22 = recreateOutputs(from:nodeName:)((uint64_t)v37, a3, (uint64_t)v4);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v21[OBJC_IVAR___SGNode_outputs] = v22;
  outlined init with take of NodeData((uint64_t)v37, (uint64_t)&v21[OBJC_IVAR___SGNode_data]);
  outlined retain of SGDataTypeStorage((uint64_t)v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of SGDataTypeStorage);

  v34.receiver = v21;
  v34.super_class = v18;
  v4 = (char *)objc_msgSendSuper2(&v34, sel_init);
  v23 = *(_QWORD *)&v4[OBJC_IVAR___SGNode_inputs];
  if (v23 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v28 = v4;
    result = (char *)_CocoaArrayWrapper.endIndex.getter();
    v24 = (uint64_t)result;
    if (!result)
      goto LABEL_19;
  }
  else
  {
    v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    result = v4;
    if (!v24)
      goto LABEL_19;
  }
  if (v24 < 1)
  {
    __break(1u);
    goto LABEL_30;
  }
  v25 = 0;
  do
  {
    if ((v23 & 0xC000000000000001) != 0)
      v26 = (id)MEMORY[0x24954B748](v25, v23);
    else
      v26 = *(id *)(v23 + 8 * v25 + 32);
    v27 = v26;
    ++v25;
    swift_beginAccess();
    swift_unknownObjectWeakAssign();

  }
  while (v24 != v25);
LABEL_19:
  swift_bridgeObjectRelease_n();
  v29 = *(_QWORD *)&v4[OBJC_IVAR___SGNode_outputs];
  if (!(v29 >> 62))
  {
    v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (char *)swift_bridgeObjectRetain_n();
    if (v30)
      goto LABEL_21;
LABEL_28:

    swift_bridgeObjectRelease();
    outlined retain of SGDataTypeStorage((uint64_t)v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of SGDataTypeStorage);

    swift_bridgeObjectRelease();
    return v4;
  }
  swift_bridgeObjectRetain_n();
  result = (char *)_CocoaArrayWrapper.endIndex.getter();
  v30 = (uint64_t)result;
  if (!result)
    goto LABEL_28;
LABEL_21:
  if (v30 >= 1)
  {
    v31 = 0;
    do
    {
      if ((v29 & 0xC000000000000001) != 0)
        v32 = (id)MEMORY[0x24954B748](v31, v29);
      else
        v32 = *(id *)(v29 + 8 * v31 + 32);
      v33 = v32;
      ++v31;
      swift_beginAccess();
      swift_unknownObjectWeakAssign();

    }
    while (v30 != v31);
    goto LABEL_28;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  char *v4;
  id v7;
  Swift::String v8;
  Swift::String v9;
  void *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  id v14;
  char *result;
  id v16;
  objc_class *v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  objc_super v33;
  _OWORD v34[4];
  char v35;
  _QWORD v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char v41;
  id v42;

  if (!a1)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v11 = (void *)swift_allocError();
    v13 = xmmword_245FC4820;
LABEL_7:
    *(_OWORD *)v12 = v13;
    *(_BYTE *)(v12 + 16) = 1;
    swift_willThrow();
    goto LABEL_8;
  }
  v4 = a4;
  if (!a4)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v11 = (void *)swift_allocError();
    v13 = xmmword_245FBF5D0;
    goto LABEL_7;
  }
  v7 = a1;
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = a3;
  v8._object = v4;
  v9._countAndFlagsBits = 1701667182;
  v9._object = (void *)0xE400000000000000;
  validate(_:named:)(v8, v9);
  v11 = v10;
  if (v10)
  {

    swift_bridgeObjectRelease();
LABEL_8:
    type metadata accessor for SGError();
    v14 = v11;
    SGError.__allocating_init(_:)(v11);
    swift_willThrow();

    return v4;
  }
  v16 = v7;
  specialized SGDataTypeStorage.init(type:value:)(a2, v16, (uint64_t)v34);
  v36[0] = a2;
  v36[1] = 0;
  v37 = v34[0];
  v38 = v34[1];
  v39 = v34[2];
  v40 = v34[3];
  v41 = v35 | 0x80;
  v17 = (objc_class *)type metadata accessor for SGNode();
  v18 = (char *)objc_allocWithZone(v17);
  swift_unknownObjectWeakInit();
  v19 = (uint64_t *)&v18[OBJC_IVAR___SGNode_name];
  *v19 = a3;
  v19[1] = (uint64_t)v4;
  *(_QWORD *)&v18[OBJC_IVAR___SGNode_inputs] = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  v20 = v18;
  v21 = recreateOutputs(from:nodeName:)((uint64_t)v36, a3, (uint64_t)v4);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v20[OBJC_IVAR___SGNode_outputs] = v21;
  outlined init with take of NodeData((uint64_t)v36, (uint64_t)&v20[OBJC_IVAR___SGNode_data]);
  outlined retain of SGDataTypeStorage((uint64_t)v34, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of SGDataTypeStorage);

  v33.receiver = v20;
  v33.super_class = v17;
  v4 = (char *)objc_msgSendSuper2(&v33, sel_init);
  v22 = *(_QWORD *)&v4[OBJC_IVAR___SGNode_inputs];
  v42 = v16;
  if (v22 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v27 = v4;
    result = (char *)_CocoaArrayWrapper.endIndex.getter();
    v23 = (uint64_t)result;
    if (!result)
      goto LABEL_19;
  }
  else
  {
    v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    result = v4;
    if (!v23)
      goto LABEL_19;
  }
  if (v23 < 1)
  {
    __break(1u);
    goto LABEL_30;
  }
  v24 = 0;
  do
  {
    if ((v22 & 0xC000000000000001) != 0)
      v25 = (id)MEMORY[0x24954B748](v24, v22);
    else
      v25 = *(id *)(v22 + 8 * v24 + 32);
    v26 = v25;
    ++v24;
    swift_beginAccess();
    swift_unknownObjectWeakAssign();

  }
  while (v23 != v24);
LABEL_19:
  swift_bridgeObjectRelease_n();
  v28 = *(_QWORD *)&v4[OBJC_IVAR___SGNode_outputs];
  if (!(v28 >> 62))
  {
    v29 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (char *)swift_bridgeObjectRetain_n();
    if (v29)
      goto LABEL_21;
LABEL_28:

    swift_bridgeObjectRelease();
    outlined retain of SGDataTypeStorage((uint64_t)v34, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of SGDataTypeStorage);

    swift_bridgeObjectRelease();
    return v4;
  }
  swift_bridgeObjectRetain_n();
  result = (char *)_CocoaArrayWrapper.endIndex.getter();
  v29 = (uint64_t)result;
  if (!result)
    goto LABEL_28;
LABEL_21:
  if (v29 >= 1)
  {
    v30 = 0;
    do
    {
      if ((v28 & 0xC000000000000001) != 0)
        v31 = (id)MEMORY[0x24954B748](v30, v28);
      else
        v31 = *(id *)(v28 + 8 * v30 + 32);
      v32 = v31;
      ++v30;
      swift_beginAccess();
      swift_unknownObjectWeakAssign();

    }
    while (v29 != v30);
    goto LABEL_28;
  }
LABEL_30:
  __break(1u);
  return result;
}

char *specialized static SGNode.create(value:type:name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  char *v5;
  Swift::String v10;
  Swift::String v11;
  void *v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  char v16;
  id v17;
  char *result;
  objc_class *v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  objc_super v37;
  _QWORD v38[4];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;
  uint64_t v43;

  if (!a2)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v13 = (void *)swift_allocError();
    v15 = xmmword_245FC4820;
LABEL_7:
    *(_OWORD *)v14 = v15;
    v16 = 1;
LABEL_8:
    *(_BYTE *)(v14 + 16) = v16;
    swift_willThrow();
    goto LABEL_9;
  }
  v5 = a5;
  if (!a5)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v13 = (void *)swift_allocError();
    v15 = xmmword_245FBF5D0;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = a4;
  v10._object = v5;
  v11._countAndFlagsBits = 1701667182;
  v11._object = (void *)0xE400000000000000;
  validate(_:named:)(v10, v11);
  if (v12)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = v12;
LABEL_9:
    type metadata accessor for SGError();
    v17 = v13;
    SGError.__allocating_init(_:)(v13);
    swift_willThrow();

    return v5;
  }
  if ((unint64_t)(a3 - 11) >= 3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v29 = SGDataType.stringValue.getter(a3);
    v5 = v30;
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v13 = (void *)swift_allocError();
    *(_QWORD *)v14 = v29;
    *(_QWORD *)(v14 + 8) = v5;
    v16 = 4;
    goto LABEL_8;
  }
  v38[0] = a3;
  v38[1] = 0;
  v38[2] = a1;
  v38[3] = a2;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = -122;
  v19 = (objc_class *)type metadata accessor for SGNode();
  v20 = (char *)objc_allocWithZone(v19);
  swift_unknownObjectWeakInit();
  v21 = (uint64_t *)&v20[OBJC_IVAR___SGNode_name];
  *v21 = a4;
  v21[1] = (uint64_t)v5;
  *(_QWORD *)&v20[OBJC_IVAR___SGNode_inputs] = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  v22 = v20;
  v23 = recreateOutputs(from:nodeName:)((uint64_t)v38, a4, (uint64_t)v5);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v22[OBJC_IVAR___SGNode_outputs] = v23;
  outlined init with take of NodeData((uint64_t)v38, (uint64_t)&v22[OBJC_IVAR___SGNode_data]);
  swift_bridgeObjectRetain();

  v37.receiver = v22;
  v37.super_class = v19;
  v5 = (char *)objc_msgSendSuper2(&v37, sel_init);
  v24 = *(_QWORD *)&v5[OBJC_IVAR___SGNode_inputs];
  v43 = a2;
  if (v24 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v31 = v5;
    result = (char *)_CocoaArrayWrapper.endIndex.getter();
    v25 = (uint64_t)result;
    if (!result)
      goto LABEL_22;
  }
  else
  {
    v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    result = v5;
    if (!v25)
      goto LABEL_22;
  }
  if (v25 < 1)
  {
    __break(1u);
    goto LABEL_33;
  }
  v26 = 0;
  do
  {
    if ((v24 & 0xC000000000000001) != 0)
      v27 = (id)MEMORY[0x24954B748](v26, v24);
    else
      v27 = *(id *)(v24 + 8 * v26 + 32);
    v28 = v27;
    ++v26;
    swift_beginAccess();
    swift_unknownObjectWeakAssign();

  }
  while (v25 != v26);
LABEL_22:
  swift_bridgeObjectRelease_n();
  v32 = *(_QWORD *)&v5[OBJC_IVAR___SGNode_outputs];
  if (!(v32 >> 62))
  {
    v33 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (char *)swift_bridgeObjectRetain_n();
    if (v33)
      goto LABEL_24;
LABEL_31:

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    return v5;
  }
  swift_bridgeObjectRetain_n();
  result = (char *)_CocoaArrayWrapper.endIndex.getter();
  v33 = (uint64_t)result;
  if (!result)
    goto LABEL_31;
LABEL_24:
  if (v33 >= 1)
  {
    v34 = 0;
    do
    {
      if ((v32 & 0xC000000000000001) != 0)
        v35 = (id)MEMORY[0x24954B748](v34, v32);
      else
        v35 = *(id *)(v32 + 8 * v34 + 32);
      v36 = v35;
      ++v34;
      swift_beginAccess();
      swift_unknownObjectWeakAssign();

    }
    while (v33 != v34);
    goto LABEL_31;
  }
LABEL_33:
  __break(1u);
  return result;
}

char *specialized static SGNode.create(color:name:numComponents:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v8;
  Swift::String v9;
  Swift::String v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  objc_class *v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  id v20;
  unint64_t v21;
  uint64_t v22;
  char *result;
  uint64_t v24;
  id v25;
  void *v26;
  objc_class *v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  id v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  id v43;
  void *v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  objc_super v51;
  objc_super v52;
  __int128 v53;
  void *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  char v59;
  __int128 v60;
  void *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  char v66;
  id v67;

  if (!a1)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v12 = (char *)swift_allocError();
    *(_OWORD *)v13 = xmmword_245FC4850;
    *(_BYTE *)(v13 + 16) = 1;
    swift_willThrow();
    goto LABEL_5;
  }
  v8 = a1;
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = a2;
  v9._object = a3;
  v10._countAndFlagsBits = 1701667182;
  v10._object = (void *)0xE400000000000000;
  validate(_:named:)(v9, v10);
  if (v11)
  {

    swift_bridgeObjectRelease();
    v12 = v11;
LABEL_5:
    type metadata accessor for SGError();
    v14 = v12;
    SGError.__allocating_init(_:)(v12);
    swift_willThrow();

    return v12;
  }
  v67 = v8;
  if (a4 == 3)
  {
    v53 = xmmword_245FC4840;
    v54 = a1;
    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    v58 = 0;
    v59 = -106;
    v15 = (objc_class *)type metadata accessor for SGNode();
    v16 = (char *)objc_allocWithZone(v15);
    swift_unknownObjectWeakInit();
    v17 = (uint64_t *)&v16[OBJC_IVAR___SGNode_name];
    *v17 = a2;
    v17[1] = (uint64_t)a3;
    *(_QWORD *)&v16[OBJC_IVAR___SGNode_inputs] = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    v18 = v16;
    v19 = recreateOutputs(from:nodeName:)((uint64_t)&v53, a2, (uint64_t)a3);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v18[OBJC_IVAR___SGNode_outputs] = v19;
    outlined init with take of NodeData((uint64_t)&v53, (uint64_t)&v18[OBJC_IVAR___SGNode_data]);
    v20 = v8;

    v51.receiver = v18;
    v51.super_class = v15;
    v12 = (char *)objc_msgSendSuper2(&v51, sel_init);
    v21 = *(_QWORD *)&v12[OBJC_IVAR___SGNode_inputs];
    if (v21 >> 62)
    {
      swift_bridgeObjectRetain_n();
      v38 = v12;
      result = (char *)_CocoaArrayWrapper.endIndex.getter();
      v22 = (uint64_t)result;
      if (result)
        goto LABEL_9;
    }
    else
    {
      v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      result = v12;
      if (v22)
      {
LABEL_9:
        if (v22 >= 1)
        {
          v24 = 0;
          do
          {
            if ((v21 & 0xC000000000000001) != 0)
              v25 = (id)MEMORY[0x24954B748](v24, v21);
            else
              v25 = *(id *)(v21 + 8 * v24 + 32);
            v26 = v25;
            ++v24;
            swift_beginAccess();
            swift_unknownObjectWeakAssign();

          }
          while (v22 != v24);
          goto LABEL_24;
        }
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
    }
LABEL_24:
    swift_bridgeObjectRelease_n();
    v39 = *(_QWORD *)&v12[OBJC_IVAR___SGNode_outputs];
    if (v39 >> 62)
    {
      swift_bridgeObjectRetain_n();
      result = (char *)_CocoaArrayWrapper.endIndex.getter();
      v40 = (uint64_t)result;
      v41 = v67;
      if (!result)
        goto LABEL_42;
LABEL_26:
      if (v40 >= 1)
      {
        v42 = 0;
        do
        {
          if ((v39 & 0xC000000000000001) != 0)
            v43 = (id)MEMORY[0x24954B748](v42, v39);
          else
            v43 = *(id *)(v39 + 8 * v42 + 32);
          v44 = v43;
          ++v42;
          swift_beginAccess();
          swift_unknownObjectWeakAssign();

        }
        while (v40 != v42);
LABEL_41:
        v41 = v67;
        goto LABEL_42;
      }
      goto LABEL_50;
    }
    v40 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (char *)swift_bridgeObjectRetain_n();
    v41 = v67;
    if (v40)
      goto LABEL_26;
LABEL_42:

    swift_bridgeObjectRelease_n();
    return v12;
  }
  v60 = xmmword_245FC4830;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = a1;
  v65 = 0;
  v66 = -105;
  v27 = (objc_class *)type metadata accessor for SGNode();
  v28 = (char *)objc_allocWithZone(v27);
  swift_unknownObjectWeakInit();
  v29 = (uint64_t *)&v28[OBJC_IVAR___SGNode_name];
  *v29 = a2;
  v29[1] = (uint64_t)a3;
  *(_QWORD *)&v28[OBJC_IVAR___SGNode_inputs] = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  v30 = v28;
  v31 = recreateOutputs(from:nodeName:)((uint64_t)&v60, a2, (uint64_t)a3);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v30[OBJC_IVAR___SGNode_outputs] = v31;
  outlined init with take of NodeData((uint64_t)&v60, (uint64_t)&v30[OBJC_IVAR___SGNode_data]);
  v32 = v8;

  v52.receiver = v30;
  v52.super_class = v27;
  v12 = (char *)objc_msgSendSuper2(&v52, sel_init);
  v33 = *(_QWORD *)&v12[OBJC_IVAR___SGNode_inputs];
  if (v33 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v45 = v12;
    result = (char *)_CocoaArrayWrapper.endIndex.getter();
    v34 = (uint64_t)result;
    if (!result)
      goto LABEL_33;
  }
  else
  {
    v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    result = v12;
    if (!v34)
      goto LABEL_33;
  }
  if (v34 < 1)
    goto LABEL_49;
  v35 = 0;
  do
  {
    if ((v33 & 0xC000000000000001) != 0)
      v36 = (id)MEMORY[0x24954B748](v35, v33);
    else
      v36 = *(id *)(v33 + 8 * v35 + 32);
    v37 = v36;
    ++v35;
    swift_beginAccess();
    swift_unknownObjectWeakAssign();

  }
  while (v34 != v35);
LABEL_33:
  swift_bridgeObjectRelease_n();
  v46 = *(_QWORD *)&v12[OBJC_IVAR___SGNode_outputs];
  if (v46 >> 62)
  {
    swift_bridgeObjectRetain_n();
    result = (char *)_CocoaArrayWrapper.endIndex.getter();
    v47 = (uint64_t)result;
    v41 = v67;
    if (!result)
      goto LABEL_42;
  }
  else
  {
    v47 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (char *)swift_bridgeObjectRetain_n();
    v41 = v67;
    if (!v47)
      goto LABEL_42;
  }
  if (v47 >= 1)
  {
    v48 = 0;
    do
    {
      if ((v46 & 0xC000000000000001) != 0)
        v49 = (id)MEMORY[0x24954B748](v48, v46);
      else
        v49 = *(id *)(v46 + 8 * v48 + 32);
      v50 = v49;
      ++v48;
      swift_beginAccess();
      swift_unknownObjectWeakAssign();

    }
    while (v47 != v48);
    goto LABEL_41;
  }
LABEL_51:
  __break(1u);
  return result;
}

uint64_t sub_245F82430()
{
  swift_beginAccess();
  return swift_unknownObjectWeakAssign();
}

uint64_t type metadata accessor for SGNode()
{
  return objc_opt_self();
}

uint64_t method lookup function for SGNode()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SGNode.__allocating_init(name:data:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  uint64_t (*v5)(uint64_t, uint64_t, _OWORD *);
  __int128 v6;
  __int128 v7;
  _OWORD v9[5];
  char v10;

  v4 = *(_BYTE *)(a3 + 80);
  v5 = *(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(v3 + 120);
  v6 = *(_OWORD *)(a3 + 16);
  v9[0] = *(_OWORD *)a3;
  v9[1] = v6;
  v7 = *(_OWORD *)(a3 + 48);
  v9[2] = *(_OWORD *)(a3 + 32);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(a3 + 64);
  v10 = v4;
  return v5(a1, a2, v9);
}

uint64_t dispatch thunk of SGNode.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t storeEnumTagSinglePayload for SGNode.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_245F82558 + 4 * byte_245FC4889[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_245F8258C + 4 * byte_245FC4884[v4]))();
}

uint64_t sub_245F8258C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_245F82594(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x245F8259CLL);
  return result;
}

uint64_t sub_245F825A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x245F825B0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_245F825B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_245F825BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SGNode.CodingKeys()
{
  return &type metadata for SGNode.CodingKeys;
}

uint64_t outlined init with take of BuiltInDefinition?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BuiltInDefinition?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _HashTable.update<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return _HashTable.update<A>(_:)(a1, a2, a3);
}

{
  return a1(a3 + 16, a3 + 32);
}

uint64_t static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(uint64_t a1, int64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;

  v14 = dispatch thunk of Collection.count.getter();
  v15 = specialized static _HashTable.scale(forCapacity:)(v14);
  v16 = 0;
  if ((a3 & 1) != 0)
    v17 = 0;
  else
    v17 = a2;
  if (v17 <= v15)
    v17 = v15;
  if (v17 <= a4)
    v18 = a4;
  else
    v18 = v17;
  if (v18 >= 5)
  {
    v16 = specialized _HashTable.init(scale:reservedScale:)(v18, a4);
    _HashTable.UnsafeHandle.fill<A>(uncheckedUniqueElements:)(a1, (_QWORD *)(v16 + 16), v16 + 32, a5, a6, a7);
  }
  return v16;
}

uint64_t static _HashTable.create<A>(untilFirstDuplicateIn:scale:reservedScale:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(char *, uint64_t, uint64_t), uint64_t a8)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  Swift::Int v33;
  uint64_t v34;
  uint64_t AssociatedConformanceWitness;
  char *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t *, _QWORD);
  void (*v42)(char *);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t TupleTypeMetadata2;
  uint64_t (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62[4];
  uint64_t v63;

  v59 = a8;
  v53 = a7;
  v54 = a5;
  LODWORD(v55) = a4;
  v56 = a3;
  v50 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v49 = (char *)&v44 - v11;
  v12 = swift_getAssociatedTypeWitness();
  v48 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v57 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v44 - v16;
  v61 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v44 - v18;
  v20 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v44 - v21;
  v23 = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](v23);
  v47 = (char *)&v44 - v24;
  v46 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v58 = swift_getAssociatedTypeWitness();
  v45 = *(_QWORD *)(v58 - 8);
  MEMORY[0x24BDAC7A8](v58);
  v60 = (char *)&v44 - v25;
  v26 = a2;
  v27 = dispatch thunk of Collection.count.getter();
  v28 = specialized static _HashTable.scale(forCapacity:)(v27);
  v29 = v56;
  if ((v55 & 1) != 0)
    v29 = 0;
  if (v29 <= v28)
    v29 = v28;
  if (v29 <= v54)
    v30 = v54;
  else
    v30 = v29;
  if (v30 <= 4)
  {
    if (dispatch thunk of Collection.count.getter() > 1)
    {
      v63 = static Array._allocateUninitialized(_:)();
      v33 = dispatch thunk of Collection.count.getter();
      v34 = type metadata accessor for Array();
      v56 = a2;
      v49 = (char *)v34;
      Array.reserveCapacity(_:)(v33);
      v55 = a6;
      dispatch thunk of Collection.indices.getter();
      dispatch thunk of Sequence.makeIterator()();
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v36 = v49;
      v54 = AssociatedConformanceWitness;
      dispatch thunk of IteratorProtocol.next()();
      v37 = v61;
      v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v61 + 48);
      v38 = v53(v22, 1, AssociatedTypeWitness);
      v39 = v48;
      if (v38 != 1)
      {
        v40 = *(_QWORD *)(v37 + 32);
        v51 = v22;
        TupleTypeMetadata2 = v40;
        while (1)
        {
          ((void (*)(char *, char *, uint64_t))TupleTypeMetadata2)(v19, v22, AssociatedTypeWitness);
          v41 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
          v42 = *(void (**)(char *))(v39 + 16);
          v42(v17);
          v41(v62, 0);
          v62[0] = v63;
          MEMORY[0x24954C264](MEMORY[0x24BEE12C8], v36);
          if ((Sequence<>.contains(_:)() & 1) != 0)
            break;
          ((void (*)(char *, char *, uint64_t))v42)(v57, v17, v12);
          v22 = v51;
          Array.append(_:)();
          (*(void (**)(char *, uint64_t))(v39 + 8))(v17, v12);
          (*(void (**)(char *, uint64_t))(v61 + 8))(v19, AssociatedTypeWitness);
          dispatch thunk of IteratorProtocol.next()();
          if (v53(v22, 1, AssociatedTypeWitness) == 1)
            goto LABEL_16;
        }
        (*(void (**)(char *, uint64_t))(v39 + 8))(v17, v12);
        (*(void (**)(char *, uint64_t))(v45 + 8))(v60, v58);
        swift_bridgeObjectRelease();
        ((void (*)(uint64_t, char *, uint64_t))TupleTypeMetadata2)(v50, v19, AssociatedTypeWitness);
        return 0;
      }
LABEL_16:
      (*(void (**)(char *, uint64_t))(v45 + 8))(v60, v58);
      swift_bridgeObjectRelease();
    }
    dispatch thunk of Collection.endIndex.getter();
    return 0;
  }
  v31 = specialized _HashTable.init(scale:reservedScale:)(v30, v54);
  v32 = &v49[*(int *)(TupleTypeMetadata2 + 48)];
  _HashTable.UnsafeHandle.fill<A>(untilFirstDuplicateIn:)(v32, v26, (_QWORD *)(v31 + 16), v31 + 32, a6, (uint64_t)v53, v59);
  (*(void (**)(uint64_t, char *, uint64_t))(v61 + 32))(v50, v32, AssociatedTypeWitness);
  return v31;
}

uint64_t _HashTable.read<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return _HashTable.update<A>(_:)(a1, a2, a3);
}

uint64_t _HashTable._storage.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*_HashTable._storage.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t _HashTable.Storage.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t _HashTable.Storage.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t _HashTable.copy()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;

  v1 = a1[2];
  v2 = (v1 & 0x3F) << v1;
  v3 = v2 + 64;
  if (__OFADD__(v2, 64))
  {
    __break(1u);
  }
  else
  {
    v5 = v2 + 63;
    if (v3 < 1)
      v5 = v3 + 62;
    v6 = v5 >> 6;
    type metadata accessor for _HashTable.Storage();
    v7 = 8 * v6;
    v8 = swift_allocObject();
    v9 = a1[3];
    *(_QWORD *)(v8 + 16) = v1;
    *(_QWORD *)(v8 + 24) = v9;
    if (v3 > -63)
    {
      v10 = v8;
      v11 = (char *)(v8 + 32);
      if (a1 + 4 >= (_QWORD *)&v11[v7] || v11 >= (char *)&a1[v7 / 8 + 4])
      {
        memcpy(v11, a1 + 4, v7);
        return v10;
      }
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

__n128 _HashTable.header.getter@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  swift_beginAccess();
  result = a1[1];
  *a2 = result;
  return result;
}

uint64_t (*_HashTable.header.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.StringNode.children.modify;
}

__n128 _HashTable.header.setter(__n128 *a1, __n128 *a2)
{
  __n128 result;

  swift_beginAccess();
  result = *a1;
  a2[1] = *a1;
  return result;
}

uint64_t _HashTable.capacity.getter(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  double v4;

  result = swift_beginAccess();
  v3 = *(_QWORD *)(a1 + 16) & 0x3FLL;
  if (v3 < 5)
    return 15;
  v4 = (double)(1 << v3) * 0.75;
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  return (uint64_t)v4;
}

uint64_t _HashTable.minimumCapacity.getter(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  double v5;

  swift_beginAccess();
  result = 0;
  v3 = *(_QWORD *)(a1 + 16) & 0x3FLL;
  if (v3 >= 5 && v3 != (*(_QWORD *)(a1 + 24) & 0x3FLL))
  {
    v5 = (double)(1 << v3) * 0.25;
    if ((~*(_QWORD *)&v5 & 0x7FF0000000000000) != 0)
    {
      if (v5 > -9.22337204e18)
      {
        if (v5 < 9.22337204e18)
          return (uint64_t)v5;
LABEL_12:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

uint64_t _HashTable.scale.getter(uint64_t a1)
{
  swift_beginAccess();
  return *(_QWORD *)(a1 + 16) & 0x3FLL;
}

uint64_t _HashTable.reservedScale.getter(uint64_t a1)
{
  swift_beginAccess();
  return *(_QWORD *)(a1 + 24) & 0x3FLL;
}

uint64_t _HashTable.bias.getter(uint64_t a1)
{
  swift_beginAccess();
  return *(uint64_t *)(a1 + 24) >> 6;
}

uint64_t specialized _HashTable.init(scale:reservedScale:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;

  v2 = (result << result) + 63;
  if (__OFADD__(result << result, 63))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  v4 = result;
  v5 = (result << result) + 126;
  if (v2 >= 0)
    v5 = (result << result) + 63;
  v6 = v5 >> 6;
  type metadata accessor for _HashTable.Storage();
  v7 = 8 * v6;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v4 | (result << 6);
  *(_QWORD *)(result + 24) = a2;
  if (v2 < -63)
    goto LABEL_9;
  v8 = result;
  if ((unint64_t)(v2 + 63) >= 0x7F)
    bzero((void *)(result + 32), v7);
  return v8;
}

uint64_t type metadata accessor for _HashTable.Storage()
{
  uint64_t result;

  result = type metadata singleton initialization cache for _HashTable.Storage;
  if (!type metadata singleton initialization cache for _HashTable.Storage)
    return swift_getSingletonMetadata();
  return result;
}

__n128 sub_245F83208@<Q0>(__n128 **a1@<X0>, __n128 *a2@<X8>)
{
  __n128 *v3;
  __n128 result;

  v3 = *a1;
  swift_beginAccess();
  result = v3[1];
  *a2 = result;
  return result;
}

uint64_t sub_245F8324C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  result = swift_beginAccess();
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _HashTable()
{
  return &type metadata for _HashTable;
}

uint64_t type metadata completion function for _HashTable.Storage()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for _HashTable.Storage()
{
  return type metadata accessor for _HashTable.Storage();
}

uint64_t MetalShaderProgram.createLiteralValue(type:value:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = v2;
  v4 = *(_QWORD *)(v2 + 48);
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v6 = result;
    *(_QWORD *)(v3 + 48) = v4 + 1;
    type metadata accessor for MetalLiteralValueNode();
    v7 = swift_allocObject();
    swift_retain();
    outlined retain of SGDataTypeStorage(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of SGDataTypeStorage);
    MetalLiteralValueNode.init(id:resultType:value:)(v4, v6, a2);
    v8 = specialized MetalShaderProgram.add<A>(_:)(v7);
    swift_retain();
    swift_release();
    return v8;
  }
  return result;
}

uint64_t MetalShaderProgram.createCallFunction(resultType:functionName:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;

  v4 = v3;
  v5 = *(_QWORD *)(v3 + 48);
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v8 = result;
    *(_QWORD *)(v4 + 48) = v5 + 1;
    type metadata accessor for MetalFunctionCallNode();
    v9 = swift_allocObject();
    v10 = MEMORY[0x24BEE4AF8];
    *(_BYTE *)(v9 + 72) = 0;
    *(_QWORD *)(v9 + 40) = 0;
    *(_QWORD *)(v9 + 24) = v10;
    *(_QWORD *)(v9 + 32) = v8;
    *(_QWORD *)(v9 + 48) = 0;
    *(_QWORD *)(v9 + 56) = a2;
    *(_QWORD *)(v9 + 64) = a3;
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    v11._countAndFlagsBits = 0x6974636E75666E5CLL;
    v11._object = (void *)0xEA00000000006E6FLL;
    String.append(_:)(v11);
    swift_release();
    swift_beginAccess();
    *(_QWORD *)(v9 + 40) = a2;
    *(_QWORD *)(v9 + 48) = a3;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v9 + 16) = v5;
    v12 = specialized MetalShaderProgram.add<A>(_:)(v9);
    swift_retain();
    swift_release();
    return v12;
  }
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(__int128 *);
  uint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(__int128 *);
  __int128 v15[2];
  __int128 v16[2];
  unint64_t v17;

  v5 = MEMORY[0x24BEE4AF8];
  v17 = MEMORY[0x24BEE4AF8];
  v6 = *(_QWORD *)(a3 + 16);
  if (v6)
  {
    v7 = (uint64_t (*)(__int128 *))result;
    v5 = 0;
    v8 = a3 + 32;
    v9 = MEMORY[0x24BEE4AF8];
    v13 = *(_QWORD *)(a3 + 16);
    v14 = (uint64_t (*)(__int128 *))result;
    while (v5 < *(_QWORD *)(a3 + 16))
    {
      outlined init with copy of MetalFunctionNode(v8, (uint64_t)v16);
      v10 = v7(v16);
      if (v3)
      {
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
        swift_release();
        swift_bridgeObjectRelease();
        return v5;
      }
      if ((v10 & 1) != 0)
      {
        outlined init with take of MetalFunctionNode(v16, (uint64_t)v15);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1);
        v9 = v17;
        v12 = *(_QWORD *)(v17 + 16);
        v11 = *(_QWORD *)(v17 + 24);
        if (v12 >= v11 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
          v9 = v17;
        }
        *(_QWORD *)(v9 + 16) = v12 + 1;
        result = outlined init with take of MetalFunctionNode(v15, v9 + 40 * v12 + 32);
        v6 = v13;
        v7 = v14;
      }
      else
      {
        result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
      }
      ++v5;
      v8 += 40;
      if (v6 == v5)
      {
        v5 = v17;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v5;
  }
  return result;
}

uint64_t MetalShaderProgram.createRESurfaceShaderFunctionNode(named:paramsInput:uniformsInput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v15 = *(_QWORD *)(v9 + 48);
  if (__OFADD__(v15, 1))
  {
    __break(1u);
    goto LABEL_5;
  }
  v11 = a7;
  v14 = a6;
  v12 = a5;
  v13 = a4;
  v8 = a2;
  v19 = a3;
  v20 = a1;
  v21 = *(_QWORD *)(v9 + 48);
  *(_QWORD *)(v9 + 48) = v15 + 1;
  type metadata accessor for RESurfaceShaderFunctionNode();
  v10 = (_QWORD *)swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of (name: String, type: MetalDataType)?(v14, v11);
  v9 = a8;
  if (one-time initialization token for void != -1)
LABEL_5:
    swift_once();
  v10[10] = static MetalDataType.void;
  v10[12] = MEMORY[0x24BEE4AF8];
  v10[14] = 0;
  v10[13] = 0;
  v10[2] = v20;
  v10[3] = v8;
  v10[4] = v19;
  v10[5] = v13;
  v10[6] = v12;
  v10[7] = v14;
  v10[8] = v11;
  v10[9] = v9;
  swift_beginAccess();
  v10[13] = v20;
  v10[14] = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  v10[11] = v21;
  v17 = specialized MetalShaderProgram.add<A>(_:)((uint64_t)v10);
  swift_retain();
  swift_release();
  return v17;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17MetalFunctionNode_pG_AF0gH2IDVs5NeverOTg504_s11d7Graph05f34A7ProgramC13terminalNodesSayAA0C12gH76_pGyFAA0gH2IDVAaE_pcfu0_33_1b49366b6b5eb08d4ad03fe09aa17e46AaE_pAHTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v11;
    v4 = (_QWORD *)(a1 + 32);
    do
    {
      v5 = v4[3];
      v6 = v4[4];
      __swift_project_boxed_opaque_existential_1(v4, v5);
      v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 24))(v5, v6);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v11 + 16) + 1, 1);
      v9 = *(_QWORD *)(v11 + 16);
      v8 = *(_QWORD *)(v11 + 24);
      if (v9 >= v8 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      *(_QWORD *)(v11 + 16) = v9 + 1;
      *(_QWORD *)(v11 + 8 * v9 + 32) = v7;
      v4 += 5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t MetalShaderProgram.createGetArgument(resultType:argumentName:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(v3 + 48);
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v7 = result;
    *(_QWORD *)(v3 + 48) = v4 + 1;
    type metadata accessor for MetalFunctionParameterNode();
    v8 = (_QWORD *)swift_allocObject();
    v9 = MEMORY[0x24BEE4AF8];
    v8[5] = 0;
    v8[3] = v9;
    v8[4] = v7;
    v8[6] = 0;
    v8[7] = a2;
    v8[8] = a3;
    swift_beginAccess();
    v8[5] = a2;
    v8[6] = a3;
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRelease();
    v8[2] = v4;
    v10 = specialized MetalShaderProgram.add<A>(_:)((uint64_t)v8);
    swift_retain();
    swift_release();
    return v10;
  }
  return result;
}

uint64_t MetalShaderProgram.createPassthrough(valueType:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v1 + 48);
  if (__OFADD__(v2, 1))
  {
    __break(1u);
  }
  else
  {
    v3 = result;
    *(_QWORD *)(v1 + 48) = v2 + 1;
    type metadata accessor for MetalPassthroughNode();
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = 0;
    *(_QWORD *)(v4 + 48) = MEMORY[0x24BEE4AF8];
    *(_BYTE *)(v4 + 56) = 0;
    *(_QWORD *)(v4 + 16) = v2;
    *(_QWORD *)(v4 + 24) = v3;
    swift_retain();
    v5 = specialized MetalShaderProgram.add<A>(_:)(v4);
    swift_retain();
    swift_release();
    return v5;
  }
  return result;
}

_QWORD *MetalShaderProgram.__allocating_init()()
{
  _QWORD *v0;
  uint64_t v1;

  v0 = (_QWORD *)swift_allocObject();
  v1 = MEMORY[0x24BEE4AF8];
  v0[2] = MEMORY[0x24BEE4AF8];
  v0[3] = specialized Dictionary.init(dictionaryLiteral:)(v1);
  v0[4] = v1;
  v0[5] = v1;
  v0[6] = 1;
  return v0;
}

_QWORD *MetalShaderProgram.terminalNodes()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;

  v1 = v0;
  v2 = *(uint64_t (**)(void))(*(_QWORD *)v0 + 120);
  v3 = v2();
  v17 = MEMORY[0x24BEE4AF8];
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (_QWORD *)(v3 + 32);
    do
    {
      v6 = v5[3];
      v7 = v5[4];
      __swift_project_boxed_opaque_existential_1(v5, v6);
      v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 48))(v6, v7);
      specialized Array.append<A>(contentsOf:)(v8);
      v5 += 5;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    v9 = v17;
  }
  else
  {
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x24BEE4AF8];
  }
  v10 = specialized Set.init<A>(_:)(v9);
  v11 = swift_bridgeObjectRelease();
  v12 = ((uint64_t (*)(uint64_t))v2)(v11);
  v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17MetalFunctionNode_pG_AF0gH2IDVs5NeverOTg504_s11d7Graph05f34A7ProgramC13terminalNodesSayAA0C12gH76_pGyFAA0gH2IDVAaE_pcfu0_33_1b49366b6b5eb08d4ad03fe09aa17e46AaE_pAHTf3nnnpk_nTf1cn_n(v12);
  swift_bridgeObjectRelease();
  v14 = specialized Set.init<A>(_:)(v13);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v10 + 16) <= *(_QWORD *)(v14 + 16) >> 3)
    specialized Set._subtract<A>(_:)(v10);
  else
    v14 = specialized _NativeSet.subtracting<A>(_:)(v10, v14);
  swift_bridgeObjectRelease();
  swift_retain();
  v15 = specialized Sequence.compactMap<A>(_:)(v14, v1);
  swift_bridgeObjectRelease();
  swift_release();
  return v15;
}

uint64_t MetalShaderProgram.topologicalSort(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = MEMORY[0x24BEE4B08];
  v5 = MEMORY[0x24BEE4B08];
  v3 = MEMORY[0x24BEE4AF8];
  v4 = MEMORY[0x24BEE4AF8];
  MetalShaderProgram._dfsHelper(node:visited:onStack:preOrder:postOrder:)(a1, &v6, &v5, &v4, &v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1)
    return swift_bridgeObjectRelease();
  else
    return v3;
}

uint64_t MetalShaderProgram.createFunctionDefinitionNode(argumentTypes:resultType:functionName:specifier:)(uint64_t result, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v7 = v6;
  v8 = *(_QWORD *)(v6 + 48);
  if (__OFADD__(v8, 1))
  {
    __break(1u);
  }
  else
  {
    v14 = result;
    *(_QWORD *)(v7 + 48) = v8 + 1;
    type metadata accessor for MetalFunctionDefinitionNode();
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    v15 = specialized MetalFunctionDefinitionNode.init(id:argumentTypes:resultType:functionName:specifier:)(v8, v14, a2, a3, a4, a5, a6);
    swift_release();
    v16 = specialized MetalShaderProgram.add<A>(_:)((uint64_t)v15);
    swift_retain();
    swift_release();
    return v16;
  }
  return result;
}

uint64_t defaultCreateMetalInvocation(in:for:functionDefinitionName:)(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  _QWORD *v19;

  v7 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 112))();
  v8 = a2[3];
  v9 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 48))(v8, v9);
  swift_retain();
  v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph14FunctionNodeIDVG_AF05MetalfG0_psAE_pTg504_s11d19Graph09RESurfaceA12fg11C19generateI53Source2inyAA0gA8CompilerC_tKFAA0gdE0_pAA0dE2IDVKXEfU_AF0idR0CTf1cn_nTf4ng_n(v10, a1);
  swift_bridgeObjectRelease();
  swift_release();
  if (v3)
    return swift_release();
  v19 = (_QWORD *)MEMORY[0x24BEE4AF8];
  swift_retain();
  swift_retain();
  specialized Sequence.compactMap<A>(_:)(v11, v7, a1, &v19);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v13 = BidirectionalCollection<>.joined(separator:)();
  v15 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v16._countAndFlagsBits = 40;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = v13;
  v17._object = v15;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 15145;
  v18._object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  swift_release();
  return a3;
}

uint64_t closure #1 in implicit closure #1 in closure #2 in defaultCreateMetalInvocation(in:for:functionDefinitionName:)(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t countAndFlagsBits;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  Swift::String v22;
  __int128 v23;
  _QWORD *v24;
  _QWORD *v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  Swift::String v44;
  _QWORD *v45;
  _QWORD *v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  Swift::String v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56[2];
  _QWORD **v57;

  outlined init with copy of MetalFunctionNode((uint64_t)a1, (uint64_t)v56);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetalFunctionNode);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HasMetalInvocation);
  swift_dynamicCast();
  v9 = *((_QWORD *)&v54 + 1);
  v10 = v55;
  __swift_project_boxed_opaque_existential_1(&v53, *((uint64_t *)&v54 + 1));
  countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 8))(a2, v9, v10);
  v13 = v12;
  v15 = v14;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v53);
  if (!v4)
  {
    v57 = a4;
    outlined init with copy of MetalFunctionNode((uint64_t)a1, (uint64_t)v56);
    type metadata accessor for MetalLiteralValueNode();
    if (swift_dynamicCast())
    {
      swift_release();
      outlined init with copy of MetalFunctionNode((uint64_t)a1, (uint64_t)v56);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v56);
    }
    else
    {
      outlined init with copy of MetalFunctionNode((uint64_t)a1, (uint64_t)v56);
      outlined init with take of MetalFunctionNode(v56, (uint64_t)&v53);
      type metadata accessor for MetalFunctionParameterNode();
      if (swift_dynamicCast())
      {
        swift_bridgeObjectRelease();
        swift_release();
      }
      else
      {
        v52._countAndFlagsBits = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)a3 + 304))(a1);
        v17 = v16;
        specialized Array.append<A>(contentsOf:)(v15);
        v18 = a1[3];
        v19 = a1[4];
        __swift_project_boxed_opaque_existential_1(a1, v18);
        v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 16))(v18, v19);
        if (one-time initialization token for void != -1)
          swift_once();
        v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 128))(static MetalDataType.void);
        swift_release();
        if ((v21 & 1) != 0)
        {
          *(_QWORD *)&v53 = countAndFlagsBits;
          *((_QWORD *)&v53 + 1) = v13;
          v22._countAndFlagsBits = 59;
          v22._object = (void *)0xE100000000000000;
          String.append(_:)(v22);
          v23 = v53;
          v24 = v57;
          v25 = *v57;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *v24 = v25;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
            *v24 = v25;
          }
          countAndFlagsBits = v52._countAndFlagsBits;
          v28 = v25[2];
          v27 = v25[3];
          if (v28 >= v27 >> 1)
          {
            v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v25);
            *v57 = v25;
          }
          v25[2] = v28 + 1;
          *(_OWORD *)&v25[2 * v28 + 4] = v23;
        }
        else
        {
          v29 = a1[3];
          v30 = a1[4];
          __swift_project_boxed_opaque_existential_1(a1, v29);
          v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 16))(v29, v30);
          v33 = *(_QWORD *)(v31 + 24);
          v32 = *(_QWORD *)(v31 + 32);
          swift_bridgeObjectRetain();
          swift_release();
          *(_QWORD *)&v53 = v33;
          *((_QWORD *)&v53 + 1) = v32;
          v34._countAndFlagsBits = 32;
          v34._object = (void *)0xE100000000000000;
          String.append(_:)(v34);
          v35._countAndFlagsBits = v52._countAndFlagsBits;
          v35._object = v17;
          String.append(_:)(v35);
          v36._countAndFlagsBits = 2112800;
          v36._object = (void *)0xE300000000000000;
          String.append(_:)(v36);
          v37._countAndFlagsBits = countAndFlagsBits;
          v37._object = v13;
          String.append(_:)(v37);
          swift_bridgeObjectRelease();
          v38._countAndFlagsBits = 59;
          v38._object = (void *)0xE100000000000000;
          String.append(_:)(v38);
          v40 = (void *)*((_QWORD *)&v53 + 1);
          v39 = v53;
          outlined init with copy of MetalFunctionNode((uint64_t)a1, (uint64_t)&v52._object);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetalConstExprFunctionNode);
          if (swift_dynamicCast())
          {
            v41 = *((_QWORD *)&v54 + 1);
            v42 = v55;
            __swift_project_boxed_opaque_existential_1(&v53, *((uint64_t *)&v54 + 1));
            v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 16))(v41, v42);
            __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v53);
            if ((v43 & 1) != 0)
            {
              *(_QWORD *)&v53 = 0x70786574736E6F63;
              *((_QWORD *)&v53 + 1) = 0xEA00000000002072;
              v44._countAndFlagsBits = v39;
              v44._object = v40;
              String.append(_:)(v44);
              swift_bridgeObjectRelease();
              v40 = (void *)*((_QWORD *)&v53 + 1);
              v39 = v53;
            }
          }
          else
          {
            v55 = 0;
            v53 = 0u;
            v54 = 0u;
            outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v53, &demangling cache variable for type metadata for MetalConstExprFunctionNode?);
          }
          v45 = v57;
          v46 = *v57;
          v47 = swift_isUniquelyReferenced_nonNull_native();
          *v45 = v46;
          if ((v47 & 1) == 0)
          {
            v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v46[2] + 1, 1, v46);
            *v45 = v46;
          }
          v49 = v46[2];
          v48 = v46[3];
          if (v49 >= v48 >> 1)
          {
            v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v48 > 1), v49 + 1, 1, v46);
            *v45 = v46;
          }
          v46[2] = v49 + 1;
          v50 = &v46[2 * v49];
          v50[4] = v39;
          v50[5] = v40;
          return v52._countAndFlagsBits;
        }
      }
    }
  }
  return countAndFlagsBits;
}

uint64_t (*MetalFunctionNodeBase.id.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalFunctionNodeBase.metalFunctionTemplate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetalFunctionNodeBase.inputs.setter(uint64_t a1)
{
  return MetalFunctionNodeBase.inputs.setter(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BEE4BC0]);
}

uint64_t (*MetalFunctionNodeBase.inputs.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalFunctionNodeBase.debugLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetalFunctionNodeBase.debugLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*MetalFunctionNodeBase.debugLabel.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalFunctionNodeBase.resultType.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t MetalFunctionNodeBase.resultType.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 64) = a1;
  return swift_release();
}

uint64_t (*MetalFunctionNodeBase.resultType.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalFunctionNodeBase.functionDefinitionName.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;

  (*(void (**)(void))(*(_QWORD *)v0 + 120))();
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 25705;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return 0x6E6F6974636E7566;
}

_QWORD *MetalFunctionNodeBase.__allocating_init(id:resultType:template:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v9;

  result = (_QWORD *)swift_allocObject();
  v9 = MEMORY[0x24BEE4AF8];
  result[6] = 0;
  result[7] = 0;
  result[8] = a2;
  result[4] = a4;
  result[5] = v9;
  result[2] = a1;
  result[3] = a3;
  return result;
}

_QWORD *MetalFunctionNodeBase.init(id:resultType:template:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[7] = 0;
  v4[5] = MEMORY[0x24BEE4AF8];
  v4[6] = 0;
  v4[8] = a2;
  v4[3] = a3;
  v4[4] = a4;
  v4[2] = a1;
  return v4;
}

Swift::Void __swiftcall MetalFunctionNodeBase.setInputs(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *((_QWORD *)a1._rawValue + 2);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v14 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v5 = (char *)a1._rawValue + 32;
    v3 = v14;
    do
    {
      outlined init with copy of MetalFunctionNode((uint64_t)v5, (uint64_t)v11);
      v6 = v12;
      v7 = v13;
      __swift_project_boxed_opaque_existential_1(v11, v12);
      v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(v6, v7);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v14;
      }
      v10 = *(_QWORD *)(v3 + 16);
      v9 = *(_QWORD *)(v3 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        v3 = v14;
      }
      *(_QWORD *)(v3 + 16) = v10 + 1;
      *(_QWORD *)(v3 + 8 * v10 + 32) = v8;
      v5 += 40;
      --v2;
    }
    while (v2);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 152))(v3);
}

uint64_t MetalFunctionNodeBase.generateMetalSource(in:)(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  uint64_t v50;
  void *v51;
  Swift::String v52;
  Swift::String v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t *, _QWORD);
  _QWORD **v63;
  _QWORD *v64;
  _QWORD *v65;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v71;
  uint64_t v72;
  void (*v73)(uint64_t *__return_ptr, _QWORD);
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v3 = v2;
  v4 = v1;
  v72 = ((uint64_t (*)(void))(*a1)[14])();
  v6 = (*(uint64_t (**)(void))(*v1 + 144))();
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v71 = v1;
    v8 = 0;
    v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v73 = *(void (**)(uint64_t *__return_ptr, _QWORD))(*a1[2] + 272);
    v73(&v74, *(_QWORD *)(v6 + 32));
    while (1)
    {
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_release();
      }
      v11 = v76;
      v12 = v77;
      __swift_project_boxed_opaque_existential_1(&v74, v76);
      v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(v11, v12);
      if (one-time initialization token for void != -1)
        swift_once();
      v14 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 128);
      v15 = swift_retain();
      v16 = v14(v15);
      swift_release();
      swift_release();
      if ((v16 & 1) == 0)
      {
        v17 = v76;
        v18 = v77;
        __swift_project_boxed_opaque_existential_1(&v74, v76);
        v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(v17, v18);
        v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 240))(v19);
        v22 = v21;
        swift_release();
        v23._countAndFlagsBits = 9248;
        v23._object = (void *)0xE200000000000000;
        String.append(_:)(v23);
        v78 = v8;
        v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
        v26 = v9[2];
        v25 = v9[3];
        if (v26 >= v25 >> 1)
          v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v9);
        v9[2] = v26 + 1;
        v10 = &v9[2 * v26];
        v10[4] = v20;
        v10[5] = v22;
      }
      ++v8;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v74);
      if (v7 == v8)
        break;
      v73(&v74, *(_QWORD *)(v6 + 8 * v8 + 32));
    }
    swift_bridgeObjectRelease();
    v4 = v71;
  }
  else
  {
    swift_bridgeObjectRelease();
    v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v74 = (uint64_t)v9;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v27 = BidirectionalCollection<>.joined(separator:)();
  v29 = v28;
  v30 = swift_bridgeObjectRelease();
  v31 = (*(uint64_t (**)(uint64_t))(*v4 + 168))(v30);
  if (v32)
  {
    v33 = v4;
    v74 = 2109231;
    v75 = 0xE300000000000000;
    String.append(_:)(*(Swift::String *)&v31);
    swift_bridgeObjectRelease();
    v34 = v74;
    v35 = v75;
    v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v38 = v36[2];
    v37 = v36[3];
    if (v38 >= v37 >> 1)
      v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v38 + 1, 1, v36);
    v36[2] = v38 + 1;
    v39 = &v36[2 * v38];
    v39[4] = v34;
    v39[5] = v35;
    v4 = v33;
  }
  else
  {
    v36 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v74 = 0;
  v75 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  v40 = swift_bridgeObjectRelease();
  v74 = 0x20656E696C6E69;
  v75 = 0xE700000000000000;
  v41 = (*(uint64_t (**)(uint64_t))(*v4 + 192))(v40);
  v42 = *(_QWORD *)(v41 + 24);
  v43 = *(void **)(v41 + 32);
  swift_bridgeObjectRetain();
  swift_release();
  v44._countAndFlagsBits = v42;
  v44._object = v43;
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  v45._countAndFlagsBits = 32;
  v45._object = (void *)0xE100000000000000;
  String.append(_:)(v45);
  v46._countAndFlagsBits = (*(uint64_t (**)(void))(*v4 + 216))();
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  v47._countAndFlagsBits = 40;
  v47._object = (void *)0xE100000000000000;
  String.append(_:)(v47);
  v48._countAndFlagsBits = v27;
  v48._object = v29;
  String.append(_:)(v48);
  swift_bridgeObjectRelease();
  v49._countAndFlagsBits = 0x202020200A7B2029;
  v49._object = (void *)0xE800000000000000;
  String.append(_:)(v49);
  v50 = v4[3];
  v51 = (void *)v4[4];
  swift_bridgeObjectRetain();
  v52._countAndFlagsBits = v50;
  v52._object = v51;
  String.append(_:)(v52);
  swift_bridgeObjectRelease();
  v53._countAndFlagsBits = 32010;
  v53._object = (void *)0xE200000000000000;
  String.append(_:)(v53);
  v54 = v74;
  v55 = v75;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
  v57 = v36[2];
  v56 = v36[3];
  if (v57 >= v56 >> 1)
    v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v56 > 1), v57 + 1, 1, v36);
  v36[2] = v57 + 1;
  v58 = &v36[2 * v57];
  v58[4] = v54;
  v58[5] = v55;
  v74 = (uint64_t)v36;
  v59 = BidirectionalCollection<>.joined(separator:)();
  v61 = v60;
  swift_bridgeObjectRelease();
  v62 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*(_QWORD *)v72 + 352))(&v74);
  v64 = v63;
  v65 = *v63;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v64 = v65;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v65[2] + 1, 1, v65);
    *v64 = v65;
  }
  v68 = v65[2];
  v67 = v65[3];
  if (v68 >= v67 >> 1)
  {
    v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v67 > 1), v68 + 1, 1, v65);
    *v64 = v65;
  }
  v65[2] = v68 + 1;
  v69 = &v65[2 * v68];
  v69[4] = v59;
  v69[5] = v61;
  v62(&v74, 0);
  return swift_release();
}

uint64_t MetalFunctionNodeBase.createMetalInvocation(in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];

  v3 = v2;
  v10[3] = type metadata accessor for MetalFunctionNodeBase();
  v10[4] = &protocol witness table for MetalFunctionNodeBase;
  v10[0] = v1;
  v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 216);
  v6 = swift_retain();
  v7 = v5(v6);
  v8 = defaultCreateMetalInvocation(in:for:functionDefinitionName:)(a1, v10, v7);
  if (!v3)
    v1 = v8;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
  return v1;
}

uint64_t MetalFunctionNodeBase.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t MetalFunctionNodeBase.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for MetalFunctionNode.resultType.getter in conformance MetalFunctionNodeBase()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 192))();
}

uint64_t (*protocol witness for MetalFunctionNode.id.modify in conformance MetalFunctionNodeBase(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 136))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for MetalFunctionNode.inputs.getter in conformance MetalFunctionNodeBase()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 144))();
}

uint64_t protocol witness for MetalFunctionNode.inputs.setter in conformance MetalFunctionNodeBase()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 152))();
}

uint64_t (*protocol witness for MetalFunctionNode.inputs.modify in conformance MetalFunctionNodeBase(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 160))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for MetalSourceGenerator.generateMetalSource(in:) in conformance MetalFunctionNodeBase()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 240))();
}

uint64_t protocol witness for HasMetalInvocation.createMetalInvocation(in:) in conformance MetalFunctionNodeBase()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v0 + 248))();
  if (v1)
    return v3;
  return result;
}

uint64_t protocol witness for HasDebugLabel.debugLabel.getter in conformance MetalFunctionNodeBase()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 168))();
}

uint64_t protocol witness for HasDebugLabel.debugLabel.setter in conformance MetalFunctionNodeBase()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 176))();
}

uint64_t (*protocol witness for HasDebugLabel.debugLabel.modify in conformance MetalFunctionNodeBase(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 184))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t MetalLiteralValueNode.id.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 16);
}

uint64_t MetalLiteralValueNode.id.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*MetalLiteralValueNode.id.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t (*MetalLiteralValueNode.inputs.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalLiteralValueNode.resultType.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t MetalLiteralValueNode.resultType.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = a1;
  return swift_release();
}

uint64_t (*MetalLiteralValueNode.resultType.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t (*MetalLiteralValueNode.debugLabel.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

id MetalLiteralValueNode.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  id result;

  swift_beginAccess();
  v3 = *(void **)(v1 + 64);
  v4 = *(void **)(v1 + 72);
  v5 = *(_QWORD *)(v1 + 80);
  v6 = *(_QWORD *)(v1 + 88);
  v7 = *(_QWORD *)(v1 + 96);
  v8 = *(_QWORD *)(v1 + 104);
  v9 = *(_QWORD *)(v1 + 112);
  v10 = *(_QWORD *)(v1 + 120);
  v11 = *(_BYTE *)(v1 + 128);
  result = outlined copy of SGDataTypeStorage(v3, v4, v5, v6, v7, v8, v9, v10, v11);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  return result;
}

void MetalLiteralValueNode.value.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v2 = v1 + 64;
  swift_beginAccess();
  v3 = *(void **)(v1 + 64);
  v4 = *(void **)(v1 + 72);
  v5 = *(_QWORD *)(v1 + 80);
  v6 = *(_QWORD *)(v1 + 88);
  v7 = *(_QWORD *)(v1 + 96);
  v8 = *(_QWORD *)(v1 + 104);
  v10 = *(_QWORD *)(v1 + 112);
  v9 = *(_QWORD *)(v1 + 120);
  v11 = *(_BYTE *)(v1 + 128);
  outlined init with take of SGDataTypeStorage(a1, v2);
  outlined consume of SGDataTypeStorage(v3, v4, v5, v6, v7, v8, v10, v9, v11);
}

uint64_t (*MetalLiteralValueNode.value.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalLiteralValueNode.isConstExpr.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 129);
}

uint64_t MetalLiteralValueNode.isConstExpr.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 129) = a1;
  return result;
}

uint64_t (*MetalLiteralValueNode.isConstExpr.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalLiteralValueNode.__allocating_init(id:resultType:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  MetalLiteralValueNode.init(id:resultType:value:)(a1, a2, a3);
  return v6;
}

uint64_t type metadata accessor for MetalLiteralValueNode()
{
  return objc_opt_self();
}

uint64_t MetalLiteralValueNode.init(id:resultType:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v4 = v3;
  v7 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v3 + 129) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  v8 = (uint64_t *)(v3 + 40);
  *(_QWORD *)(v3 + 24) = v7;
  *(_QWORD *)(v3 + 32) = a2;
  outlined init with take of SGDataTypeStorage(a3, v3 + 64);
  outlined init with take of SGDataTypeStorage(a3, (uint64_t)&v14);
  outlined retain of SGDataTypeStorage(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of SGDataTypeStorage);
  outlined retain of SGDataTypeStorage(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of SGDataTypeStorage);
  swift_retain();
  v14 = String.init<A>(describing:)();
  v15 = v9;
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = 0x61726574696C6E5CLL;
  v10._object = (void *)0xE90000000000006CLL;
  String.append(_:)(v10);
  outlined retain of SGDataTypeStorage(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of SGDataTypeStorage);
  swift_bridgeObjectRelease();
  swift_release();
  v11 = v14;
  v12 = v15;
  swift_beginAccess();
  *v8 = v11;
  *(_QWORD *)(v4 + 48) = v12;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 16) = a1;
  return v4;
}

Swift::Void __swiftcall MetalLiteralValueNode.setInputs(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  NSObject *oslog;
  uint64_t v6;

  if (one-time initialization token for logger != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)logger);
  oslog = Logger.logObject.getter();
  v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v6 = v4;
    *(_DWORD *)v3 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x7475706E49746573, 0xED0000293A5F2873, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_arrayDestroy();
    MEMORY[0x24954C33C](v4, -1, -1);
    MEMORY[0x24954C33C](v3, -1, -1);

  }
  else
  {

  }
}

uint64_t MetalLiteralValueNode.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of SGDataTypeStorage(*(void **)(v0 + 64), *(id *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_BYTE *)(v0 + 128));
  return v0;
}

uint64_t MetalLiteralValueNode.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of SGDataTypeStorage(*(void **)(v0 + 64), *(id *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_BYTE *)(v0 + 128));
  return swift_deallocClassInstance();
}

uint64_t (*protocol witness for MetalFunctionNode.id.modify in conformance MetalLiteralValueNode(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 144))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t (*protocol witness for MetalFunctionNode.inputs.modify in conformance MetalLiteralValueNode(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 168))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t (*protocol witness for HasDebugLabel.debugLabel.modify in conformance MetalLiteralValueNode(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 216))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for MetalConstExprFunctionNode.isConstExpr.getter in conformance MetalLiteralValueNode()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 248))() & 1;
}

uint64_t protocol witness for MetalConstExprFunctionNode.isConstExpr.setter in conformance MetalLiteralValueNode()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 256))();
}

uint64_t (*protocol witness for MetalConstExprFunctionNode.isConstExpr.modify in conformance MetalLiteralValueNode(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 264))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t (*MetalFunctionCallNode.id.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t (*MetalFunctionCallNode.inputs.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalFunctionCallNode.resultType.setter(uint64_t a1)
{
  return MetalFunctionCallNode.resultType.setter(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BEE4EF8]);
}

uint64_t (*MetalFunctionCallNode.resultType.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t (*MetalFunctionCallNode.debugLabel.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalFunctionCallNode.functionName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetalFunctionCallNode.isConstExpr.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t MetalFunctionCallNode.isConstExpr.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 72) = a1;
  return result;
}

uint64_t (*MetalFunctionCallNode.isConstExpr.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalFunctionCallNode.__allocating_init(id:resultType:functionName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;

  v8 = swift_allocObject();
  v9 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 24) = v9;
  *(_QWORD *)(v8 + 32) = a2;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = a3;
  *(_QWORD *)(v8 + 64) = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = 0x6974636E75666E5CLL;
  v10._object = (void *)0xEA00000000006E6FLL;
  String.append(_:)(v10);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v8 + 40) = a3;
  *(_QWORD *)(v8 + 48) = a4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + 16) = a1;
  return v8;
}

uint64_t MetalFunctionCallNode.init(id:resultType:functionName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  Swift::String v7;

  *(_BYTE *)(v4 + 72) = 0;
  v6 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 24) = v6;
  *(_QWORD *)(v4 + 32) = a2;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = a3;
  *(_QWORD *)(v4 + 64) = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = 0x6974636E75666E5CLL;
  v7._object = (void *)0xEA00000000006E6FLL;
  String.append(_:)(v7);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v4 + 40) = a3;
  *(_QWORD *)(v4 + 48) = a4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 16) = a1;
  return v4;
}

uint64_t MetalFunctionCallNode.createMetalInvocation(in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  v3 = v2;
  v8[3] = type metadata accessor for MetalFunctionCallNode();
  v8[4] = &protocol witness table for MetalFunctionCallNode;
  v8[0] = v1;
  v5 = *(_QWORD *)(v1 + 56);
  swift_retain();
  v6 = defaultCreateMetalInvocation(in:for:functionDefinitionName:)(a1, v8, v5);
  if (!v3)
    v1 = v6;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
  return v1;
}

uint64_t MetalFunctionCallNode.__deallocating_deinit()
{
  return MetalFunctionCallNode.__deallocating_deinit();
}

{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for MetalFunctionNode.id.getter in conformance MetalFunctionCallNode()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 128))();
}

uint64_t protocol witness for MetalFunctionNode.id.setter in conformance MetalFunctionCallNode()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 136))();
}

uint64_t protocol witness for MetalFunctionNode.inputs.setter in conformance MetalFunctionCallNode()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 160))();
}

uint64_t protocol witness for HasDebugLabel.debugLabel.getter in conformance MetalFunctionCallNode()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 200))();
}

uint64_t protocol witness for HasDebugLabel.debugLabel.setter in conformance MetalFunctionCallNode()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 208))();
}

uint64_t protocol witness for HasMetalInvocation.createMetalInvocation(in:) in conformance MetalFunctionCallNode()
{
  return protocol witness for HasMetalInvocation.createMetalInvocation(in:) in conformance MetalFunctionCallNode();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v0 + 264))();
  if (v1)
    return v3;
  return result;
}

uint64_t protocol witness for MetalConstExprFunctionNode.isConstExpr.getter in conformance MetalFunctionCallNode()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 224))() & 1;
}

uint64_t protocol witness for MetalConstExprFunctionNode.isConstExpr.setter in conformance MetalFunctionCallNode()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 232))();
}

uint64_t (*protocol witness for MetalConstExprFunctionNode.isConstExpr.modify in conformance MetalFunctionCallNode(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 240))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t (*MetalFunctionParameterNode.id.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t (*MetalFunctionParameterNode.inputs.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalFunctionParameterNode.resultType.getter()
{
  return swift_retain();
}

uint64_t (*MetalFunctionParameterNode.debugLabel.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalFunctionParameterNode.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetalFunctionParameterNode.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*MetalFunctionParameterNode.name.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

_QWORD *MetalFunctionParameterNode.__allocating_init(id:resultType:name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;

  v8 = (_QWORD *)swift_allocObject();
  v9 = MEMORY[0x24BEE4AF8];
  v8[5] = 0;
  v8[3] = v9;
  v8[4] = a2;
  v8[6] = 0;
  v8[7] = a3;
  v8[8] = a4;
  swift_beginAccess();
  v8[5] = a3;
  v8[6] = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[2] = a1;
  return v8;
}

_QWORD *MetalFunctionParameterNode.init(id:resultType:name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;

  v8 = MEMORY[0x24BEE4AF8];
  v4[5] = 0;
  v4[3] = v8;
  v4[4] = a2;
  v4[6] = 0;
  v4[7] = a3;
  v4[8] = a4;
  swift_beginAccess();
  v4[5] = a3;
  v4[6] = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4[2] = a1;
  return v4;
}

uint64_t MetalFunctionParameterNode.createMetalInvocation(in:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t MetalFunctionCallNode.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MetalFunctionParameterNode.__deallocating_deinit()
{
  return MetalFunctionCallNode.__deallocating_deinit();
}

uint64_t protocol witness for MetalFunctionNode.resultType.getter in conformance MetalFunctionParameterNode()
{
  return swift_retain();
}

uint64_t protocol witness for HasMetalInvocation.createMetalInvocation(in:) in conformance MetalFunctionParameterNode()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v0 + 224))();
  if (v1)
    return v3;
  return result;
}

uint64_t (*MetalFunctionDefinitionNode.id.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t (*MetalFunctionDefinitionNode.inputs.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalFunctionDefinitionNode.resultType.setter(uint64_t a1)
{
  return MetalFunctionCallNode.resultType.setter(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BEE4EF8]);
}

uint64_t (*MetalFunctionDefinitionNode.resultType.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalLiteralValueNode.debugLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetalLiteralValueNode.debugLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*MetalFunctionDefinitionNode.debugLabel.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalFunctionDefinitionNode.specifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetalFunctionDefinitionNode.specifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 72) = a1;
  *(_QWORD *)(v2 + 80) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*MetalFunctionDefinitionNode.specifier.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalFunctionDefinitionNode.argumentTypes.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t MetalFunctionDefinitionNode.argumentTypes.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 88) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*MetalFunctionDefinitionNode.argumentTypes.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

_QWORD *MetalFunctionDefinitionNode.__allocating_init(id:argumentTypes:resultType:functionName:specifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, unint64_t a7)
{
  _QWORD *v14;

  swift_allocObject();
  v14 = specialized MetalFunctionDefinitionNode.init(id:argumentTypes:resultType:functionName:specifier:)(a1, a2, a3, a4, a5, a6, a7);
  swift_release();
  return v14;
}

_QWORD *MetalFunctionDefinitionNode.init(id:argumentTypes:resultType:functionName:specifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, unint64_t a7)
{
  _QWORD *v7;

  v7 = specialized MetalFunctionDefinitionNode.init(id:argumentTypes:resultType:functionName:specifier:)(a1, a2, a3, a4, a5, a6, a7);
  swift_release();
  return v7;
}

Swift::Void __swiftcall MetalFunctionDefinitionNode.setInputs(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *((_QWORD *)a1._rawValue + 2);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v14 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v5 = (char *)a1._rawValue + 32;
    v3 = v14;
    do
    {
      outlined init with copy of MetalFunctionNode((uint64_t)v5, (uint64_t)v11);
      v6 = v12;
      v7 = v13;
      __swift_project_boxed_opaque_existential_1(v11, v12);
      v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(v6, v7);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v14;
      }
      v10 = *(_QWORD *)(v3 + 16);
      v9 = *(_QWORD *)(v3 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        v3 = v14;
      }
      *(_QWORD *)(v3 + 16) = v10 + 1;
      *(_QWORD *)(v3 + 8 * v10 + 32) = v8;
      v5 += 40;
      --v2;
    }
    while (v2);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 168))(v3);
}

uint64_t MetalFunctionDefinitionNode.functionDeclarationString()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  Swift::String v27;
  Swift::String v28;
  void *v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = (uint64_t *)(v1 + 48);
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      v7 = *(v3 - 2);
      v6 = (void *)*(v3 - 1);
      v8 = *v3;
      v9 = one-time initialization token for void;
      swift_bridgeObjectRetain();
      swift_retain();
      if (v9 != -1)
        swift_once();
      v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 128);
      v11 = swift_retain();
      v12 = v10(v11);
      v13 = swift_release();
      if ((v12 & 1) == 0)
      {
        v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 240))(v13);
        v39 = v14;
        v15._countAndFlagsBits = 32;
        v15._object = (void *)0xE100000000000000;
        String.append(_:)(v15);
        v16._countAndFlagsBits = v7;
        v16._object = v6;
        String.append(_:)(v16);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
        v18 = v4[2];
        v17 = v4[3];
        if (v18 >= v17 >> 1)
          v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v4);
        v4[2] = v18 + 1;
        v5 = &v4[2 * v18];
        v5[4] = v37;
        v5[5] = v39;
      }
      swift_release();
      swift_bridgeObjectRelease();
      v3 += 3;
      --v2;
    }
    while (v2);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v19 = BidirectionalCollection<>.joined(separator:)();
  v21 = v20;
  v22 = swift_bridgeObjectRelease();
  v38 = (*(uint64_t (**)(uint64_t))(*v36 + 232))(v22);
  v23._countAndFlagsBits = 32;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  v24 = (*(uint64_t (**)(void))(*v36 + 184))();
  v25 = *(_QWORD *)(v24 + 24);
  v26 = *(void **)(v24 + 32);
  swift_bridgeObjectRetain();
  swift_release();
  v27._countAndFlagsBits = v25;
  v27._object = v26;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 32;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  v30 = v36[7];
  v29 = (void *)v36[8];
  swift_bridgeObjectRetain();
  v31._countAndFlagsBits = v30;
  v31._object = v29;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = 40;
  v32._object = (void *)0xE100000000000000;
  String.append(_:)(v32);
  v33._countAndFlagsBits = v19;
  v33._object = v21;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v34._countAndFlagsBits = 41;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  return v38;
}

Swift::String __swiftcall MetalFunctionDefinitionNode.forwardDeclaration()()
{
  void *v0;
  Swift::String v1;
  uint64_t v2;
  void *v3;
  Swift::String result;
  uint64_t v5;
  void *v6;

  v5 = MetalFunctionDefinitionNode.functionDeclarationString()();
  v6 = v0;
  swift_bridgeObjectRetain();
  v1._countAndFlagsBits = 59;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2 = v5;
  v3 = v6;
  result._object = v3;
  result._countAndFlagsBits = v2;
  return result;
}

uint64_t MetalFunctionDefinitionNode.generateMetalSource(in:)(uint64_t a1)
{
  _QWORD v2[3];

  v2[2] = a1;
  return (*(uint64_t (**)(_QWORD *(*)(uint64_t), _QWORD *, uint64_t))(*(_QWORD *)a1 + 152))(partial apply for closure #1 in MetalFunctionDefinitionNode.generateMetalSource(in:), v2, MEMORY[0x24BEE4AE0] + 8);
}

_QWORD *closure #1 in MetalFunctionDefinitionNode.generateMetalSource(in:)(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  Swift::String v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  char v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  Swift::String v52;
  Swift::String v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t *, _QWORD);
  _QWORD **v64;
  _QWORD *v65;
  _QWORD *v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  _BYTE v71[40];
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD v78[3];
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v7 = a2;
  v9 = a2[2];
  v10 = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 160))();
  if (!*(_QWORD *)(v10 + 16))
  {
    __break(1u);
LABEL_40:
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    goto LABEL_7;
  }
  v11 = *(_QWORD *)(v10 + 32);
  swift_bridgeObjectRelease();
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v9 + 272))(v78, v11);
  if (v3)
    return result;
  outlined init with copy of MetalFunctionNode((uint64_t)v78, (uint64_t)&v73);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetalFunctionNode);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HasMetalInvocation);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of MetalFunctionNode((__int128 *)&v71[8], (uint64_t)&v74);
    v13 = v76;
    v14 = v77;
    __swift_project_boxed_opaque_existential_1(&v74, v76);
    v5 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 8))(v7, v13, v14);
    v7 = v15;
    v4 = v16;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v74);
  }
  else
  {
    v72 = 0;
    memset(&v71[8], 0, 32);
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v71[8], &demangling cache variable for type metadata for HasMetalInvocation?);
    v5 = 0;
    v7 = (void *)0xE000000000000000;
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_40;
LABEL_7:
  v20 = v18[2];
  v19 = v18[3];
  v81 = a1;
  if (v20 >= v19 >> 1)
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v18);
  v18[2] = v20 + 1;
  v21 = &v18[2 * v20];
  *(_QWORD *)v71 = v5;
  v21[4] = v5;
  v21[5] = v7;
  v22 = swift_bridgeObjectRelease();
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 208))(v22);
  if (v24)
  {
    v74 = 2109231;
    v75 = 0xE300000000000000;
    String.append(_:)(*(Swift::String *)&v23);
    swift_bridgeObjectRelease();
    v26 = v74;
    v25 = v75;
    v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v29 = v27[2];
    v28 = v27[3];
    if (v29 >= v28 >> 1)
      v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v27);
    v27[2] = v29 + 1;
    v30 = &v27[2 * v29];
    v30[4] = v26;
    v30[5] = v25;
  }
  else
  {
    v27 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v74 = MetalFunctionDefinitionNode.functionDeclarationString()();
  v75 = v31;
  swift_bridgeObjectRetain();
  v32._countAndFlagsBits = 31520;
  v32._object = (void *)0xE200000000000000;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33 = v74;
  v34 = v75;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
  v36 = v27[2];
  v35 = v27[3];
  if (v36 >= v35 >> 1)
    v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v35 > 1), v36 + 1, 1, v27);
  v27[2] = v36 + 1;
  v37 = &v27[2 * v36];
  v37[4] = v33;
  v37[5] = v34;
  v73 = v27;
  v38 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v38);
  v39 = v79;
  v40 = v80;
  __swift_project_boxed_opaque_existential_1(v78, v79);
  v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 16))(v39, v40);
  if (one-time initialization token for void != -1)
    swift_once();
  v42 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 128);
  v43 = swift_retain();
  v44 = v42(v43);
  swift_release();
  swift_release();
  if ((v44 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v45 = v73;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45[2] + 1, 1, v45);
    v46 = v81;
    v48 = v45[2];
    v47 = v45[3];
    v49 = v48 + 1;
    if (v48 >= v47 >> 1)
      v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v47 > 1), v48 + 1, 1, v45);
    v45[2] = v49;
    v50 = &v45[2 * v48];
    v50[4] = *(_QWORD *)v71;
    v51 = v50 + 4;
  }
  else
  {
    swift_bridgeObjectRelease();
    v74 = 0x206E7275746572;
    v75 = 0xE700000000000000;
    v52._countAndFlagsBits = *(_QWORD *)v71;
    v52._object = v7;
    String.append(_:)(v52);
    swift_bridgeObjectRelease();
    v53._countAndFlagsBits = 59;
    v53._object = (void *)0xE100000000000000;
    String.append(_:)(v53);
    v54 = v74;
    v7 = (void *)v75;
    v45 = v73;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45[2] + 1, 1, v45);
    v46 = v81;
    v56 = v45[2];
    v55 = v45[3];
    v49 = v56 + 1;
    if (v56 >= v55 >> 1)
      v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v55 > 1), v56 + 1, 1, v45);
    v45[2] = v49;
    v57 = &v45[2 * v56];
    v57[4] = v54;
    v51 = v57 + 4;
  }
  v51[1] = v7;
  v58 = v45[3];
  if (v49 >= v58 >> 1)
    v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v58 > 1), v49 + 1, 1, v45);
  v45[2] = v49 + 1;
  v59 = &v45[2 * v49];
  v59[4] = 125;
  v59[5] = 0xE100000000000000;
  v74 = (uint64_t)v45;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v60 = BidirectionalCollection<>.joined(separator:)();
  v62 = v61;
  swift_bridgeObjectRelease();
  v63 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*(_QWORD *)v46 + 352))(&v74);
  v65 = v64;
  v66 = *v64;
  v67 = swift_isUniquelyReferenced_nonNull_native();
  *v65 = v66;
  if ((v67 & 1) == 0)
  {
    v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v66[2] + 1, 1, v66);
    *v65 = v66;
  }
  v69 = v66[2];
  v68 = v66[3];
  if (v69 >= v68 >> 1)
  {
    v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v68 > 1), v69 + 1, 1, v66);
    *v65 = v66;
  }
  v66[2] = v69 + 1;
  v70 = &v66[2 * v69];
  v70[4] = v60;
  v70[5] = v62;
  v63(&v74, 0);
  return (_QWORD *)__swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v78);
}

uint64_t MetalFunctionDefinitionNode.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MetalFunctionDefinitionNode.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for MetalFunctionNode.resultType.getter in conformance MetalFunctionDefinitionNode()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 184))();
}

uint64_t (*protocol witness for MetalFunctionNode.id.modify in conformance MetalFunctionDefinitionNode(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 152))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t (*protocol witness for MetalFunctionNode.inputs.modify in conformance MetalFunctionDefinitionNode(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 176))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for HasDebugLabel.debugLabel.setter in conformance MetalFunctionDefinitionNode()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 216))();
}

uint64_t (*protocol witness for HasDebugLabel.debugLabel.modify in conformance MetalFunctionDefinitionNode(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 224))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for MetalSourceGenerator.generateMetalSource(in:) in conformance MetalFunctionDefinitionNode()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 312))();
}

uint64_t (*MetalStructGetterOffsetNode.id.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t (*MetalStructGetterOffsetNode.inputs.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalStructGetterOffsetNode.inputType.setter(uint64_t a1)
{
  return MetalFunctionCallNode.resultType.setter(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BEE4EF8]);
}

uint64_t (*MetalStructGetterOffsetNode.inputType.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalStructGetterOffsetNode.resultType.setter(uint64_t a1)
{
  return MetalFunctionNodeBase.inputs.setter(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BEE4EF8]);
}

uint64_t (*MetalStructGetterOffsetNode.resultType.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalStructGetterOffsetNode.offset.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 48);
}

uint64_t MetalStructGetterOffsetNode.debugLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetalStructGetterOffsetNode.debugLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*MetalStructGetterOffsetNode.debugLabel.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalStructGetterOffsetNode.__allocating_init(id:inputType:resultType:offset:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  MetalStructGetterOffsetNode.init(id:inputType:resultType:offset:)(a1, a2, a3, a4);
  return v8;
}

uint64_t MetalStructGetterOffsetNode.init(id:inputType:resultType:offset:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v10;
  uint64_t v11;

  v6 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 32) = a2;
  *(_QWORD *)(v4 + 40) = a3;
  *(_QWORD *)(v4 + 24) = v6;
  *(_DWORD *)(v4 + 48) = a4;
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = 0x657366666F204020;
  v7._object = (void *)0xEA00000000002074;
  String.append(_:)(v7);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v4 + 56) = v10;
  *(_QWORD *)(v4 + 64) = v11;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 16) = a1;
  return v4;
}

uint64_t MetalStructGetterOffsetNode.createMetalInvocation(in:)(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  _DWORD *v5;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  void *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE v51[40];

  v5 = v1;
  v7 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v1 + 152))();
  swift_retain();
  v8 = (_QWORD *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph14FunctionNodeIDVG_AF05MetalfG0_psAE_pTg504_s11d19Graph09RESurfaceA12fg11C19generateI53Source2inyAA0gA8CompilerC_tKFAA0gdE0_pAA0dE2IDVKXEfU_AF0idR0CTf1cn_nTf4ng_n((uint64_t)v7, a1);
  swift_bridgeObjectRelease();
  swift_release();
  if (v2)
    return (uint64_t)v8;
  if (!v8[2])
  {
    __break(1u);
    goto LABEL_17;
  }
  outlined init with copy of MetalFunctionNode((uint64_t)(v8 + 4), (uint64_t)v51);
  v9 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 176))(v9);
  type metadata accessor for MetalDataType.Pointer();
  v10 = swift_dynamicCastClass();
  swift_release();
  if (v10)
  {
    outlined init with copy of MetalFunctionNode((uint64_t)v51, (uint64_t)&v49);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetalFunctionNode);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HasMetalInvocation);
    swift_dynamicCast();
    v11 = v47;
    v12 = v48;
    __swift_project_boxed_opaque_existential_1(v46, v47);
    v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 8))(a1, v11, v12);
    v7 = v14;
    v15 = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v46);
    v4 = *(uint64_t (**)(void))(*(_QWORD *)v5 + 200);
    v8 = (_QWORD *)((uint64_t (*)(uint64_t))v4)(v15);
    if (one-time initialization token for color3 == -1)
    {
LABEL_7:
      v16 = *(uint64_t (**)(uint64_t))(*v8 + 128);
      v17 = swift_retain();
      v18 = v16(v17);
      swift_release();
      v19 = swift_release();
      if ((v18 & 1) != 0)
      {
        v49 = 0;
        v50 = 0xE000000000000000;
        _StringGuts.grow(_:)(32);
        v20 = v4();
        v22 = *(_QWORD *)(v20 + 24);
        v21 = *(_QWORD *)(v20 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_release();
        v49 = v22;
        v50 = v21;
        v23 = "(*(constant float3*)(";
      }
      else
      {
        v24 = ((uint64_t (*)(uint64_t))v4)(v19);
        if (one-time initialization token for color4 != -1)
          swift_once();
        v25 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 128);
        v26 = swift_retain();
        v27 = v25(v26);
        swift_release();
        swift_release();
        if ((v27 & 1) == 0)
        {
          v49 = 0;
          v50 = 0xE000000000000000;
          _StringGuts.grow(_:)(24);
          v37 = swift_bridgeObjectRelease();
          v49 = 0x6174736E6F63282ALL;
          v50 = 0xEB0000000020746ELL;
          v38 = ((uint64_t (*)(uint64_t))v4)(v37);
          v39 = *(_QWORD *)(v38 + 24);
          v40 = *(void **)(v38 + 32);
          swift_bridgeObjectRetain();
          swift_release();
          v41._countAndFlagsBits = v39;
          v41._object = v40;
          String.append(_:)(v41);
          swift_bridgeObjectRelease();
          v42._countAndFlagsBits = 2631978;
          v42._object = (void *)0xE300000000000000;
          String.append(_:)(v42);
          v43._countAndFlagsBits = v3;
          v43._object = v7;
          String.append(_:)(v43);
          swift_bridgeObjectRelease();
          v44._countAndFlagsBits = 2108192;
          v44._object = (void *)0xE300000000000000;
          String.append(_:)(v44);
          LODWORD(v46[0]) = v5[12];
          v45._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v45);
          swift_bridgeObjectRelease();
          v35 = 41;
          v36 = 0xE100000000000000;
          goto LABEL_15;
        }
        v49 = 0;
        v50 = 0xE000000000000000;
        _StringGuts.grow(_:)(32);
        v28 = v4();
        v30 = *(_QWORD *)(v28 + 24);
        v29 = *(_QWORD *)(v28 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_release();
        v49 = v30;
        v50 = v29;
        v23 = "(*(constant float4*)(";
      }
      v31._object = (void *)((unint64_t)(v23 - 32) | 0x8000000000000000);
      v31._countAndFlagsBits = 0xD000000000000015;
      String.append(_:)(v31);
      v32._countAndFlagsBits = v3;
      v32._object = v7;
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      v33._countAndFlagsBits = 2108192;
      v33._object = (void *)0xE300000000000000;
      String.append(_:)(v33);
      LODWORD(v46[0]) = v5[12];
      v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      v35 = 10537;
      v36 = 0xE200000000000000;
LABEL_15:
      String.append(_:)(*(Swift::String *)&v35);
      v8 = (_QWORD *)v49;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v51);
      return (uint64_t)v8;
    }
LABEL_17:
    swift_once();
    goto LABEL_7;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t MetalStructGetterOffsetNode.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MetalStructGetterOffsetNode.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t (*MetalStructGetterNode.id.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalLiteralValueNode.inputs.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 24) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*MetalStructGetterNode.inputs.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalFunctionCallNode.resultType.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t MetalStructGetterNode.inputType.setter(uint64_t a1)
{
  return MetalFunctionCallNode.resultType.setter(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BEE4EF8]);
}

uint64_t (*MetalStructGetterNode.inputType.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalStructGetterOffsetNode.resultType.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t MetalStructGetterNode.resultType.setter(uint64_t a1)
{
  return MetalFunctionNodeBase.inputs.setter(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BEE4EF8]);
}

uint64_t (*MetalStructGetterNode.resultType.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalStructGetterNode.fieldName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetalStructGetterNode.debugLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetalStructGetterNode.debugLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*MetalStructGetterNode.debugLabel.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalStructGetterNode.__allocating_init(id:inputType:resultType:fieldName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10;

  v10 = swift_allocObject();
  MetalStructGetterNode.init(id:inputType:resultType:fieldName:)(a1, a2, a3, a4, a5);
  return v10;
}

_QWORD *MetalStructGetterNode.init(id:inputType:resultType:fieldName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  _QWORD *v5;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v13;
  uint64_t v14;

  v9 = MEMORY[0x24BEE4AF8];
  v5[9] = 0;
  v5[8] = 0;
  v5[3] = v9;
  v5[4] = a2;
  v5[5] = a3;
  v5[6] = a4;
  v5[7] = a5;
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = 46;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = a4;
  v11._object = a5;
  String.append(_:)(v11);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v5[8] = v13;
  v5[9] = v14;
  swift_bridgeObjectRelease();
  v5[2] = a1;
  return v5;
}

uint64_t MetalFunctionCallNode.setInputs(_:)(uint64_t a1)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v15 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v5 = a1 + 32;
    v3 = v15;
    do
    {
      outlined init with copy of MetalFunctionNode(v5, (uint64_t)v12);
      v6 = v13;
      v7 = v14;
      __swift_project_boxed_opaque_existential_1(v12, v13);
      v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(v6, v7);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v15;
      }
      v10 = *(_QWORD *)(v3 + 16);
      v9 = *(_QWORD *)(v3 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        v3 = v15;
      }
      *(_QWORD *)(v3 + 16) = v10 + 1;
      *(_QWORD *)(v3 + 8 * v10 + 32) = v8;
      v5 += 40;
      --v2;
    }
    while (v2);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 160))(v3);
}

_QWORD *MetalStructGetterNode.createMetalInvocation(in:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t (*v4)(uint64_t);
  _QWORD *v5;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  void *v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  void *v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t countAndFlagsBits;
  void *v44;
  _BYTE v45[40];
  uint64_t v46;

  v5 = v1;
  v7 = (void *)(*(uint64_t (**)(void))(*v1 + 152))();
  swift_retain();
  v8 = (_QWORD *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph14FunctionNodeIDVG_AF05MetalfG0_psAE_pTg504_s11d19Graph09RESurfaceA12fg11C19generateI53Source2inyAA0gA8CompilerC_tKFAA0gdE0_pAA0dE2IDVKXEfU_AF0idR0CTf1cn_nTf4ng_n((uint64_t)v7, a1);
  swift_bridgeObjectRelease();
  swift_release();
  if (v2)
    return v8;
  if (v8[2])
  {
    outlined init with copy of MetalFunctionNode((uint64_t)(v8 + 4), (uint64_t)v45);
    v9 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*v5 + 176))(v9);
    type metadata accessor for MetalDataType.Reference();
    if (swift_dynamicCastClass())
    {
      swift_release();
      v7 = (void *)0xE100000000000000;
      v10 = 46;
    }
    else
    {
      type metadata accessor for MetalDataType.Pointer();
      v11 = swift_dynamicCastClass();
      swift_release();
      if (v11)
        v10 = 15917;
      else
        v10 = 46;
      if (v11)
        v7 = (void *)0xE200000000000000;
      else
        v7 = (void *)0xE100000000000000;
    }
    outlined init with copy of MetalFunctionNode((uint64_t)v45, (uint64_t)&countAndFlagsBits);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetalFunctionNode);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HasMetalInvocation);
    swift_dynamicCast();
    v12 = v41;
    v13 = v42;
    __swift_project_boxed_opaque_existential_1(&v40._object, v41);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 8))(a1, v12, v13);
    v3 = v16;
    v40._countAndFlagsBits = v14;
    v46 = v10;
    v17 = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v40._object);
    v4 = *(uint64_t (**)(uint64_t))(*v5 + 200);
    v8 = (_QWORD *)v4(v17);
    if (one-time initialization token for color3 == -1)
      goto LABEL_14;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_14:
  v18 = *(uint64_t (**)(uint64_t))(*v8 + 128);
  v19 = swift_retain();
  v20 = v18(v19);
  swift_release();
  v21 = swift_release();
  if ((v20 & 1) != 0)
    goto LABEL_18;
  v22 = v4(v21);
  if (one-time initialization token for color4 != -1)
    swift_once();
  v23 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 128);
  v24 = swift_retain();
  v25 = v23(v24);
  swift_release();
  v21 = swift_release();
  if ((v25 & 1) != 0)
  {
LABEL_18:
    v26 = v4(v21);
    v28 = *(_QWORD *)(v26 + 24);
    v27 = *(void **)(v26 + 32);
    swift_bridgeObjectRetain();
    swift_release();
    countAndFlagsBits = v28;
    v44 = v27;
    v29._countAndFlagsBits = 40;
    v29._object = (void *)0xE100000000000000;
    String.append(_:)(v29);
    v30._countAndFlagsBits = v40._countAndFlagsBits;
    v30._object = v3;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._countAndFlagsBits = v46;
    v31._object = v7;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32 = v5[6];
    v33 = (void *)v5[7];
    swift_bridgeObjectRetain();
    v34._countAndFlagsBits = v32;
    v34._object = v33;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 41;
    v35._object = (void *)0xE100000000000000;
    String.append(_:)(v35);
  }
  else
  {
    countAndFlagsBits = v40._countAndFlagsBits;
    v44 = v3;
    v36._countAndFlagsBits = v46;
    v36._object = v7;
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37 = v5[6];
    v38 = (void *)v5[7];
    swift_bridgeObjectRetain();
    v39._countAndFlagsBits = v37;
    v39._object = v38;
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
  }
  v8 = (_QWORD *)countAndFlagsBits;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v45);
  return v8;
}

uint64_t MetalStructGetterNode.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MetalStructGetterNode.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for HasDebugLabel.debugLabel.getter in conformance MetalStructGetterNode()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 224))();
}

uint64_t MetalPassthroughNode.id.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 16);
}

uint64_t MetalPassthroughNode.id.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*MetalPassthroughNode.id.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalPassthroughNode.resultType.getter()
{
  return swift_retain();
}

uint64_t MetalPassthroughNode.debugLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetalPassthroughNode.debugLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*MetalPassthroughNode.debugLabel.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalPassthroughNode.inputs.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t MetalPassthroughNode.inputs.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*MetalPassthroughNode.inputs.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalPassthroughNode.isConstExpr.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t MetalPassthroughNode.isConstExpr.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 56) = a1;
  return result;
}

uint64_t (*MetalPassthroughNode.isConstExpr.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalPassthroughNode.__allocating_init(id:resultType:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = swift_allocObject();
  v5 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = v5;
  *(_BYTE *)(result + 56) = 0;
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t MetalPassthroughNode.init(id:resultType:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = v3;
  *(_BYTE *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t MetalPassthroughNode.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MetalPassthroughNode.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for MetalFunctionNode.resultType.getter in conformance MetalPassthroughNode()
{
  return swift_retain();
}

uint64_t protocol witness for MetalFunctionNode.id.getter in conformance MetalPassthroughNode()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))();
}

uint64_t protocol witness for MetalConstExprFunctionNode.isConstExpr.getter in conformance MetalPassthroughNode()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 192))() & 1;
}

uint64_t (*protocol witness for MetalConstExprFunctionNode.isConstExpr.modify in conformance MetalPassthroughNode(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 208))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t MetalShaderProgram.createGetField(inputType:resultType:fieldName:)(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v4;
  v6 = *(_QWORD *)(v4 + 48);
  if (__OFADD__(v6, 1))
  {
    __break(1u);
  }
  else
  {
    v10 = result;
    *(_QWORD *)(v5 + 48) = v6 + 1;
    type metadata accessor for MetalStructGetterNode();
    v11 = swift_allocObject();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    MetalStructGetterNode.init(id:inputType:resultType:fieldName:)(v6, v10, a2, a3, a4);
    v12 = specialized MetalShaderProgram.add<A>(_:)(v11);
    swift_retain();
    swift_release();
    return v12;
  }
  return result;
}

uint64_t MetalShaderProgram.createStructGetterNode(inputType:resultType:offset:)(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = v3;
  v5 = *(_QWORD *)(v3 + 48);
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v8 = result;
    *(_QWORD *)(v4 + 48) = v5 + 1;
    type metadata accessor for MetalStructGetterOffsetNode();
    v9 = swift_allocObject();
    swift_retain();
    swift_retain();
    MetalStructGetterOffsetNode.init(id:inputType:resultType:offset:)(v5, v8, a2, a3);
    v10 = specialized MetalShaderProgram.add<A>(_:)(v9);
    swift_retain();
    swift_release();
    return v10;
  }
  return result;
}

uint64_t key path setter for MetalShaderProgram.nodes : MetalShaderProgram(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 16) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t MetalShaderProgram.nodes.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for MetalShaderProgram.nodeMap : MetalShaderProgram(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 24) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t MetalLiteralValueNode.inputs.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t MetalShaderProgram.customFragmentShaderConstants.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t MetalShaderProgram.customFragmentShaderConstants.setter(uint64_t a1)
{
  return MetalFunctionCallNode.resultType.setter(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BEE4BC0]);
}

uint64_t MetalFunctionCallNode.resultType.setter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v5;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = a1;
  return a2(v5);
}

uint64_t (*MetalShaderProgram.customFragmentShaderConstants.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.StringNode.children.modify;
}

uint64_t MetalFunctionNodeBase.inputs.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t MetalShaderProgram.customMetalContent.setter(uint64_t a1)
{
  return MetalFunctionNodeBase.inputs.setter(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BEE4BC0]);
}

uint64_t MetalFunctionNodeBase.inputs.setter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v5;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 40) = a1;
  return a2(v5);
}

uint64_t (*MetalShaderProgram.customMetalContent.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

_QWORD *MetalShaderProgram.importPaths.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27[2];
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
  v2 = MEMORY[0x24BEE4AF8];
  v31 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    v4 = v1 + 32;
    do
    {
      outlined init with copy of MetalFunctionNode(v4, (uint64_t)v28);
      outlined init with copy of MetalFunctionNode((uint64_t)v28, (uint64_t)&v24);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v28);
      if (v25)
      {
        outlined init with take of MetalFunctionNode(&v24, (uint64_t)v27);
        outlined init with take of MetalFunctionNode(v27, (uint64_t)&v24);
        v5 = v31;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
          v31 = v5;
        }
        v7 = v5[2];
        v6 = v5[3];
        if (v7 >= v6 >> 1)
          v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
        v8 = v25;
        v9 = v26;
        v10 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v24, v25);
        MEMORY[0x24BDAC7A8](v10);
        v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v13 + 16))(v12);
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, (uint64_t)v12, (uint64_t *)&v31, v8, v9);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v24);
      }
      else
      {
        outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v24, (uint64_t *)&demangling cache variable for type metadata for MetalFunctionNode?);
      }
      v4 += 40;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    v14 = (uint64_t)v31;
  }
  else
  {
    swift_bridgeObjectRelease();
    v14 = MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)&v27[0] = v2;
  v15 = *(_QWORD *)(v14 + 16);
  if (v15)
  {
    v16 = v14 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of MetalFunctionNode(v16, (uint64_t)v28);
      v17 = v29;
      v18 = v30;
      __swift_project_boxed_opaque_existential_1(v28, v29);
      v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v28);
      specialized Array.append<A>(contentsOf:)(v19);
      v16 += 40;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease_n();
    v20 = *(_QWORD *)&v27[0];
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = MEMORY[0x24BEE4AF8];
  }
  v21 = specialized Set.init<A>(_:)(v20);
  swift_bridgeObjectRelease();
  v22 = specialized _copyCollectionToContiguousArray<A>(_:)(v21);
  swift_bridgeObjectRelease();
  return v22;
}

_QWORD *MetalShaderProgram.init()()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = MEMORY[0x24BEE4AF8];
  v0[2] = MEMORY[0x24BEE4AF8];
  v0[3] = specialized Dictionary.init(dictionaryLiteral:)(v1);
  v0[4] = v1;
  v0[5] = v1;
  v0[6] = 1;
  return v0;
}

uint64_t MetalShaderProgram.generateMetalSource(in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18[2];
  _BYTE v19[40];
  uint64_t v20;

  v4 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 120))();
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v20 = v4;
    v6 = v4 + 32;
    v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      outlined init with copy of MetalFunctionNode(v6, (uint64_t)v19);
      outlined init with copy of MetalFunctionNode((uint64_t)v19, (uint64_t)v18);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetalFunctionNode);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MetalSourceGenerator);
      if ((swift_dynamicCast() & 1) == 0)
      {
        v17 = 0;
        v15 = 0u;
        v16 = 0u;
      }
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
      if (*((_QWORD *)&v16 + 1))
      {
        outlined init with take of MetalFunctionNode(&v15, (uint64_t)v18);
        outlined init with take of MetalFunctionNode(v18, (uint64_t)&v15);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
        v9 = v7[2];
        v8 = v7[3];
        if (v9 >= v8 >> 1)
          v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v7);
        v7[2] = v9 + 1;
        outlined init with take of MetalFunctionNode(&v15, (uint64_t)&v7[5 * v9 + 4]);
      }
      else
      {
        outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v15, &demangling cache variable for type metadata for MetalSourceGenerator?);
      }
      v6 += 40;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    v10 = v7[2];
    if (v10)
      goto LABEL_14;
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v10 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
  if (!v10)
    return swift_bridgeObjectRelease();
LABEL_14:
  v11 = v7 + 4;
  swift_bridgeObjectRetain();
  do
  {
    v12 = v11[3];
    v13 = v11[4];
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 8))(a1, v12, v13);
    if (v2)
      break;
    v11 += 5;
    --v10;
  }
  while (v10);
  return swift_bridgeObjectRelease_n();
}

uint64_t MetalShaderProgram.node(withIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v5 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 144))();
  if (*(_QWORD *)(v5 + 16) && (v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v7 & 1) != 0))
  {
    outlined init with copy of MetalFunctionNode(*(_QWORD *)(v5 + 56) + 40 * v6, (uint64_t)&v10);
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v11 + 1))
      return outlined init with take of MetalFunctionNode(&v10, a2);
  }
  else
  {
    v12 = 0;
    v10 = 0u;
    v11 = 0u;
    swift_bridgeObjectRelease();
  }
  outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v10, (uint64_t *)&demangling cache variable for type metadata for MetalFunctionNode?);
  lazy protocol witness table accessor for type MetalFunctionGraphError and conformance MetalFunctionGraphError();
  swift_allocError();
  *(_QWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_BYTE *)(v9 + 32) = 4;
  *(_QWORD *)(v9 + 40) = 0;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)(v9 + 56) = MEMORY[0x24BEE4AF8];
  return swift_willThrow();
}

uint64_t MetalShaderProgram.filtered(by:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  _QWORD *i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35[2];
  __int128 v36[2];
  _QWORD *v37;

  v4 = v2;
  v7 = *(uint64_t (**)(void))(*(_QWORD *)v2 + 120);
  v8 = v7();
  result = specialized _ArrayProtocol.filter(_:)(a1, a2, v8);
  if (v3)
    return result;
  v10 = result;
  swift_beginAccess();
  *(_QWORD *)(v4 + 16) = v10;
  swift_bridgeObjectRelease();
  v11 = (_QWORD *)(v4 + 24);
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 16))
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v35[0] = *v11;
    *v11 = 0x8000000000000000;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<FunctionNodeID, MetalFunctionNode>);
    _NativeDictionary.removeAll(isUnique:)(isUniquelyReferenced_nonNull_native);
    *v11 = *(_QWORD *)&v35[0];
    swift_bridgeObjectRelease();
  }
  v13 = swift_endAccess();
  v34 = ((uint64_t (*)(uint64_t))v7)(v13);
  v14 = *(_QWORD *)(v34 + 16);
  if (!v14)
    return swift_bridgeObjectRelease();
  for (i = (_QWORD *)(v34 + 32); ; i += 5)
  {
    v17 = i[3];
    v18 = i[4];
    __swift_project_boxed_opaque_existential_1(i, v17);
    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 24))(v17, v18);
    outlined init with copy of MetalFunctionNode((uint64_t)i, (uint64_t)v36);
    swift_beginAccess();
    outlined init with take of MetalFunctionNode(v36, (uint64_t)v35);
    v20 = swift_isUniquelyReferenced_nonNull_native();
    v37 = (_QWORD *)*v11;
    v21 = v37;
    *v11 = 0x8000000000000000;
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(v19);
    v24 = v21[2];
    v25 = (v22 & 1) == 0;
    v26 = v24 + v25;
    if (__OFADD__(v24, v25))
      break;
    v27 = v22;
    if (v21[3] >= v26)
    {
      if ((v20 & 1) != 0)
      {
        v30 = v37;
        if ((v22 & 1) != 0)
          goto LABEL_6;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v30 = v37;
        if ((v27 & 1) != 0)
          goto LABEL_6;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, v20);
      v28 = specialized __RawDictionaryStorage.find<A>(_:)(v19);
      if ((v27 & 1) != (v29 & 1))
        goto LABEL_23;
      v23 = v28;
      v30 = v37;
      if ((v27 & 1) != 0)
      {
LABEL_6:
        v16 = v30[7] + 40 * v23;
        __swift_destroy_boxed_opaque_existential_1Tm(v16);
        outlined init with take of MetalFunctionNode(v35, v16);
        goto LABEL_7;
      }
    }
    v30[(v23 >> 6) + 8] |= 1 << v23;
    *(_QWORD *)(v30[6] + 8 * v23) = v19;
    outlined init with take of MetalFunctionNode(v35, v30[7] + 40 * v23);
    v31 = v30[2];
    v32 = __OFADD__(v31, 1);
    v33 = v31 + 1;
    if (v32)
      goto LABEL_22;
    v30[2] = v33;
LABEL_7:
    *v11 = v30;
    swift_bridgeObjectRelease();
    swift_endAccess();
    if (!--v14)
      return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t MetalShaderProgram.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MetalShaderProgram.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for MetalSourceGenerator.generateMetalSource(in:) in conformance MetalShaderProgram()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 264))();
}

uint64_t MetalShaderProgram.allNodesUpstream(of:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = MEMORY[0x24BEE4B08];
  v5 = MEMORY[0x24BEE4B08];
  v3 = MEMORY[0x24BEE4AF8];
  v4 = MEMORY[0x24BEE4AF8];
  MetalShaderProgram._dfsHelper(node:visited:onStack:preOrder:postOrder:)(a1, &v6, &v5, &v4, &v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1)
    return swift_bridgeObjectRelease();
  else
    return v4;
}

uint64_t MetalShaderProgram._dfsHelper(node:visited:onStack:preOrder:postOrder:)(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  Swift::UInt v15;
  uint64_t v16;
  uint64_t v17;
  Swift::UInt v18;
  _QWORD *v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::UInt v35;
  uint64_t v36;
  Swift::Int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  _QWORD *v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::UInt v61;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  Swift::UInt v70[3];
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;

  v7 = v6;
  v8 = v5;
  v69 = a5;
  v12 = a1;
  v14 = a1[3];
  v13 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v14);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 24))(v14, v13);
  v73 = a3;
  specialized Set._Variant.insert(_:)(v70, v15);
  v16 = v12[3];
  v17 = v12[4];
  __swift_project_boxed_opaque_existential_1(v12, v16);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 24))(v16, v17);
  specialized Set._Variant.insert(_:)(v70, v18);
  outlined init with copy of MetalFunctionNode((uint64_t)v12, (uint64_t)v70);
  v19 = (_QWORD *)*a4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v68 = a4;
  *a4 = (uint64_t)v19;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
    *v68 = (uint64_t)v19;
  }
  v22 = v19[2];
  v21 = v19[3];
  if (v22 >= v21 >> 1)
    *v68 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v19);
  v23 = v71;
  v24 = v72;
  v25 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v70, v71);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v65 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v28 + 16))(v27);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, (uint64_t)v27, v68, v23, v24);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v70);
  v29 = v12[3];
  v30 = v12[4];
  __swift_project_boxed_opaque_existential_1(v12, v29);
  v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 48))(v29, v30);
  v32 = *(_QWORD *)(v31 + 16);
  if (!v32)
  {
    swift_bridgeObjectRelease();
LABEL_25:
    outlined init with copy of MetalFunctionNode((uint64_t)v12, (uint64_t)v70);
    v48 = v69;
    v49 = (_QWORD *)*v69;
    v50 = swift_isUniquelyReferenced_nonNull_native();
    *v48 = (uint64_t)v49;
    if ((v50 & 1) == 0)
    {
      v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49[2] + 1, 1, v49);
      *v69 = (uint64_t)v49;
    }
    v52 = v49[2];
    v51 = v49[3];
    if (v52 >= v51 >> 1)
    {
      v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v51 > 1), v52 + 1, 1, v49);
      *v69 = (uint64_t)v64;
    }
    v53 = v71;
    v54 = v72;
    v55 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v70, v71);
    MEMORY[0x24BDAC7A8](v55);
    v57 = (char *)&v65 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v58 + 16))(v57);
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v52, (uint64_t)v57, v69, v53, v54);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v70);
    v59 = v12[3];
    v60 = v12[4];
    __swift_project_boxed_opaque_existential_1(v12, v59);
    v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 24))(v59, v60);
    return specialized Set._Variant.remove(_:)(v61);
  }
  v66 = v12;
  v67 = v31;
  v33 = 0;
  v34 = v31 + 32;
  while (1)
  {
    v35 = *(_QWORD *)(v34 + 8 * v33);
    v36 = *a2;
    if (*(_QWORD *)(*a2 + 16))
    {
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v35);
      v37 = Hasher._finalize()();
      v38 = -1 << *(_BYTE *)(v36 + 32);
      v39 = v37 & ~v38;
      if (((*(_QWORD *)(v36 + 56 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) != 0)
        break;
    }
LABEL_21:
    (*(void (**)(Swift::UInt *__return_ptr, Swift::UInt))(*(_QWORD *)v8 + 272))(v70, v35);
    if (v7)
      return swift_bridgeObjectRelease();
    MetalShaderProgram._dfsHelper(node:visited:onStack:preOrder:postOrder:)(v70, a2, v73, v68, v69);
    v7 = 0;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v70);
LABEL_7:
    if (++v33 == v32)
    {
      swift_bridgeObjectRelease();
      v12 = v66;
      goto LABEL_25;
    }
  }
  v40 = *(_QWORD *)(v36 + 48);
  if (*(_QWORD *)(v40 + 8 * v39) != v35)
  {
    v41 = ~v38;
    do
    {
      v39 = (v39 + 1) & v41;
      if (((*(_QWORD *)(v36 + 56 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
        goto LABEL_21;
    }
    while (*(_QWORD *)(v40 + 8 * v39) != v35);
  }
  v42 = *v73;
  if (!*(_QWORD *)(*v73 + 16))
    goto LABEL_7;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v35);
  v43 = Hasher._finalize()();
  v44 = -1 << *(_BYTE *)(v42 + 32);
  v45 = v43 & ~v44;
  if (((*(_QWORD *)(v42 + 56 + ((v45 >> 3) & 0xFFFFFFFFFFFFF8)) >> v45) & 1) == 0)
    goto LABEL_7;
  v46 = *(_QWORD *)(v42 + 48);
  if (*(_QWORD *)(v46 + 8 * v45) != v35)
  {
    v47 = ~v44;
    do
    {
      v45 = (v45 + 1) & v47;
      if (((*(_QWORD *)(v42 + 56 + ((v45 >> 3) & 0xFFFFFFFFFFFFF8)) >> v45) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v46 + 8 * v45) != v35);
  }
  lazy protocol witness table accessor for type MetalFunctionGraphError and conformance MetalFunctionGraphError();
  swift_allocError();
  *(_OWORD *)v63 = 0u;
  *(_OWORD *)(v63 + 16) = 0u;
  *(_BYTE *)(v63 + 32) = 4;
  *(_QWORD *)(v63 + 40) = 0;
  *(_QWORD *)(v63 + 48) = 0;
  *(_QWORD *)(v63 + 56) = MEMORY[0x24BEE4AF8];
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

uint64_t MetalShaderProgram.parameterNodes(connectedTo:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16[2];
  __int128 v17[2];
  uint64_t v18;

  result = MetalShaderProgram.allNodesUpstream(of:)(a1);
  if (v2)
    return v1;
  v4 = result;
  v1 = MEMORY[0x24BEE4AF8];
  v18 = MEMORY[0x24BEE4AF8];
  v5 = *(_QWORD *)(result + 16);
  if (!v5)
  {
    v11 = MEMORY[0x24BEE4AF8];
LABEL_15:
    swift_bridgeObjectRelease();
    v18 = v1;
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v13 = v11 + 32;
      swift_retain();
      do
      {
        outlined init with copy of MetalFunctionNode(v13, (uint64_t)v17);
        outlined init with copy of MetalFunctionNode((uint64_t)v17, (uint64_t)v16);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetalFunctionNode);
        type metadata accessor for MetalFunctionParameterNode();
        if ((swift_dynamicCast() & 1) == 0)
          v15 = 0;
        v14 = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
        if (v15)
        {
          MEMORY[0x24954B1A8](v14);
          if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        v13 += 40;
        --v12;
      }
      while (v12);
      swift_release();
      v1 = v18;
    }
    swift_release();
    return v1;
  }
  v6 = 0;
  v7 = result + 32;
  while (v6 < *(_QWORD *)(v4 + 16))
  {
    outlined init with copy of MetalFunctionNode(v7, (uint64_t)v17);
    outlined init with copy of MetalFunctionNode((uint64_t)v17, (uint64_t)v16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetalFunctionNode);
    type metadata accessor for MetalFunctionParameterNode();
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_release();
      outlined init with take of MetalFunctionNode(v17, (uint64_t)v16);
      v8 = v18;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v8 + 16) + 1, 1);
        v8 = v18;
      }
      v10 = *(_QWORD *)(v8 + 16);
      v9 = *(_QWORD *)(v8 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        v8 = v18;
      }
      *(_QWORD *)(v8 + 16) = v10 + 1;
      result = outlined init with take of MetalFunctionNode(v16, v8 + 40 * v10 + 32);
    }
    else
    {
      result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
    }
    ++v6;
    v7 += 40;
    if (v5 == v6)
    {
      v11 = v18;
      v1 = MEMORY[0x24BEE4AF8];
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant.remove(_:)(Swift::UInt a1)
{
  uint64_t *v1;
  uint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = *v1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = v4 & ~v5;
  if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v7 = *(_QWORD *)(v3 + 48);
  if (*(_QWORD *)(v7 + 8 * v6) != a1)
  {
    v8 = ~v5;
    do
    {
      v6 = (v6 + 1) & v8;
      if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(v7 + 8 * v6) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *v1;
  v13 = *v1;
  *v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    v10 = v13;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v6);
  specialized _NativeSet._delete(at:)(v6);
  *v1 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t specialized Set._Variant.remove(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v19;

  v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  v9 = *(_QWORD *)(v5 + 48);
  v10 = (_QWORD *)(v9 + 16 * v8);
  v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    v15 = ~v7;
    do
    {
      v8 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_18;
      v16 = (_QWORD *)(v9 + 16 * v8);
      v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13 = *v2;
  v19 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    v13 = v19;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 16 * v8);
  specialized _NativeSet._delete(at:)(v8);
  *v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::UInt v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9)
            goto LABEL_5;
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(v3 + 48);
          v13 = (_QWORD *)(v12 + 8 * v2);
          v14 = (_QWORD *)(v12 + 8 * v6);
          if (v2 != v6 || (v2 = v6, v13 >= v14 + 1))
          {
            *v13 = *v14;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v15 = *(_QWORD *)(v3 + 16);
  v16 = __OFSUB__(v15, 1);
  v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9)
            goto LABEL_5;
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(v3 + 48);
          v13 = (_OWORD *)(v12 + 16 * v2);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (v2 = v6, v13 >= v14 + 1))
          {
            *v13 = *v14;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v15 = *(_QWORD *)(v3 + 16);
  v16 = __OFSUB__(v15, 1);
  v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *boxed_opaque_existential_0;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a4;
  v14 = a5;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_0, a2, a4);
  v10 = *a3;
  *(_QWORD *)(v10 + 16) = a1 + 1;
  return outlined init with take of MetalFunctionNode(&v12, v10 + 40 * a1 + 32);
}

uint64_t type metadata accessor for MetalFunctionCallNode()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for MetalFunctionParameterNode()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for MetalPassthroughNode()
{
  return objc_opt_self();
}

_QWORD *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  unint64_t v15;
  int64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33[2];
  _QWORD *v34;

  v3 = v2;
  v5 = (_QWORD *)a1;
  v34 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v6 = *(_QWORD *)(a1 + 56);
  v28 = a1 + 56;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v6;
  v29 = (unint64_t)(v7 + 63) >> 6;
  result = (_QWORD *)swift_bridgeObjectRetain();
  v11 = 0;
  v27 = result;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD))(*(_QWORD *)a2 + 272))(&v30, *(_QWORD *)(v5[6] + 8 * i));
    if (v3)
    {

      v32 = 0;
      v30 = 0u;
      v31 = 0u;
      result = (_QWORD *)outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v30, (uint64_t *)&demangling cache variable for type metadata for MetalFunctionNode?);
      v3 = 0;
      if (v9)
        goto LABEL_4;
    }
    else
    {
      outlined init with take of MetalFunctionNode(&v30, (uint64_t)v33);
      outlined init with take of MetalFunctionNode(v33, (uint64_t)&v30);
      v17 = v34;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
        v34 = v17;
      }
      v19 = v17[2];
      v18 = v17[3];
      if (v19 >= v18 >> 1)
        v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v17);
      v20 = *((_QWORD *)&v31 + 1);
      v21 = v32;
      v22 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, *((uint64_t *)&v31 + 1));
      MEMORY[0x24BDAC7A8](v22);
      v24 = (char *)&v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v25 + 16))(v24);
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, (uint64_t)v24, (uint64_t *)&v34, v20, v21);
      result = (_QWORD *)__swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v30);
      v5 = v27;
      if (v9)
        goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v11 >= v29)
      goto LABEL_31;
    v15 = *(_QWORD *)(v28 + 8 * v11);
    if (!v15)
      break;
LABEL_17:
    v9 = (v15 - 1) & v15;
  }
  v16 = v11 + 1;
  if (v11 + 1 >= v29)
    goto LABEL_31;
  v15 = *(_QWORD *)(v28 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v11 + 2;
  if (v11 + 2 >= v29)
    goto LABEL_31;
  v15 = *(_QWORD *)(v28 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v11 + 3;
  if (v11 + 3 >= v29)
    goto LABEL_31;
  v15 = *(_QWORD *)(v28 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v11 + 4;
  if (v11 + 4 >= v29)
  {
LABEL_31:
    swift_release();
    return v34;
  }
  v15 = *(_QWORD *)(v28 + 8 * v16);
  if (v15)
  {
LABEL_16:
    v11 = v16;
    goto LABEL_17;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v29)
      goto LABEL_31;
    v15 = *(_QWORD *)(v28 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_17;
  }
LABEL_33:
  __break(1u);
  return result;
}

_QWORD *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v24;
  _QWORD v25[5];
  uint64_t (*v26)(_QWORD *);

  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = a2;
    v7 = (_QWORD *)(a1 + 32);
    v26 = *(uint64_t (**)(_QWORD *))(*(_QWORD *)a2 + 296);
    swift_bridgeObjectRetain();
    v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v24 = v6;
    while (1)
    {
      v9 = v26(v7);
      v11 = v10;
      outlined init with copy of MetalFunctionNode((uint64_t)v7, (uint64_t)v25);
      if (!v11)
      {
        v12 = closure #1 in implicit closure #1 in closure #2 in defaultCreateMetalInvocation(in:for:functionDefinitionName:)(v25, a3, v6, a4);
        if (v4)
        {
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v8;
        }
        v9 = v12;
        v11 = v13;
      }
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
      v14 = v7[3];
      v15 = v7[4];
      __swift_project_boxed_opaque_existential_1(v7, v14);
      v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v14, v15);
      if (one-time initialization token for void != -1)
        swift_once();
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 128))(static MetalDataType.void);
      swift_release();
      if ((v17 & 1) != 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
        v19 = v8[2];
        v18 = v8[3];
        if (v19 >= v18 >> 1)
          v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v8);
        v8[2] = v19 + 1;
        v20 = &v8[2 * v19];
        v20[4] = v9;
        v20[5] = v11;
      }
      v7 += 5;
      --v5;
      v6 = v24;
      if (!v5)
      {
        swift_bridgeObjectRelease();
        return v8;
      }
    }
  }
  return (_QWORD *)MEMORY[0x24BEE4AF8];
}

uint64_t type metadata accessor for MetalFunctionDefinitionNode()
{
  return objc_opt_self();
}

_QWORD *specialized MetalFunctionDefinitionNode.init(id:argumentTypes:resultType:functionName:specifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, unint64_t a7)
{
  _QWORD *v7;
  uint64_t v13;
  Swift::String v14;
  uint64_t v15;
  unint64_t v16;

  v13 = MEMORY[0x24BEE4AF8];
  v7[11] = a2;
  v7[5] = 0;
  v7[3] = v13;
  v7[4] = a3;
  v7[6] = 0;
  v7[7] = a4;
  v7[8] = a5;
  swift_retain();
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = a4;
  v14._object = a5;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v7[5] = 0xD000000000000015;
  v7[6] = 0x8000000245FCDF50;
  swift_bridgeObjectRelease();
  if (a7)
    v15 = a6;
  else
    v15 = 0;
  if (a7)
    v16 = a7;
  else
    v16 = 0xE000000000000000;
  v7[9] = v15;
  v7[10] = v16;
  v7[2] = a1;
  return v7;
}

uint64_t type metadata accessor for MetalFunctionNodeBase()
{
  return objc_opt_self();
}

_QWORD *partial apply for closure #1 in MetalFunctionDefinitionNode.generateMetalSource(in:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in MetalFunctionDefinitionNode.generateMetalSource(in:)(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t type metadata accessor for MetalStructGetterNode()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for MetalStructGetterOffsetNode()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type MetalFunctionGraphError and conformance MetalFunctionGraphError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MetalFunctionGraphError and conformance MetalFunctionGraphError;
  if (!lazy protocol witness table cache variable for type MetalFunctionGraphError and conformance MetalFunctionGraphError)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for MetalFunctionGraphError, &type metadata for MetalFunctionGraphError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MetalFunctionGraphError and conformance MetalFunctionGraphError);
  }
  return result;
}

uint64_t sub_245F8B04C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 120))();
  *a2 = result;
  return result;
}

uint64_t sub_245F8B07C(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 128))(*a1);
}

uint64_t sub_245F8B0A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 144))();
  *a2 = result;
  return result;
}

uint64_t sub_245F8B0E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 192))();
  *a2 = result;
  return result;
}

uint64_t sub_245F8B114(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 200);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_245F8B148@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 176))();
  *a2 = result;
  return result;
}

uint64_t sub_245F8B184@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD v4[10];

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)a1 + 224))(v4);
  return outlined init with take of SGDataTypeStorage((uint64_t)v4, a2);
}

uint64_t sub_245F8B1C8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(_BYTE *);
  _BYTE v5[80];

  outlined init with take of SGDataTypeStorage(a1, (uint64_t)v5);
  v3 = *(uint64_t (**)(_BYTE *))(**(_QWORD **)a2 + 232);
  outlined retain of SGDataTypeStorage((uint64_t)v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of SGDataTypeStorage);
  return v3(v5);
}

uint64_t sub_245F8B218@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 248))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_245F8B24C(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 256))(*a1);
}

uint64_t sub_245F8B278@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 128))();
  *a2 = result;
  return result;
}

uint64_t sub_245F8B2A8(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 136))(*a1);
}

uint64_t sub_245F8B2D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 152))();
  *a2 = result;
  return result;
}

uint64_t keypath_get_13Tm@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 200))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t keypath_set_14Tm(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 208);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_245F8B388@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 224))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_245F8B3BC(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 232))(*a1);
}

uint64_t keypath_set_2Tm(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 152);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t keypath_get_3Tm@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 168))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t keypath_set_4Tm(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 176);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_245F8B498@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 192))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_245F8B4C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 200);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_245F8B50C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 136))();
  *a2 = result;
  return result;
}

uint64_t sub_245F8B53C(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 144))(*a1);
}

uint64_t sub_245F8B568@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 160))();
  *a2 = result;
  return result;
}

uint64_t sub_245F8B598(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 168);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_245F8B5C8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 184))();
  *a2 = result;
  return result;
}

uint64_t sub_245F8B5F8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 192);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_245F8B628@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 208))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_245F8B658(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 216);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_245F8B69C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 232))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_245F8B6CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 240);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_245F8B710@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 256))();
  *a2 = result;
  return result;
}

uint64_t sub_245F8B740(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 264);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_245F8B778@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 200))();
  *a2 = result;
  return result;
}

uint64_t keypath_set_10Tm(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 160);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t keypath_set_12Tm(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 184);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t keypath_set_56Tm(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 208);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t keypath_get_57Tm@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 224))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t keypath_set_58Tm(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 232);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_245F8B8CC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 144))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_245F8B8FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 152);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_245F8B940@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 168))();
  *a2 = result;
  return result;
}

uint64_t sub_245F8B974@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 192))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_245F8B9A8(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 200))(*a1);
}

uint64_t sub_245F8B9D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 120))();
  *a2 = result;
  return result;
}

uint64_t keypath_set_74Tm(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 176);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_245F8BA40@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 192))();
  *a2 = result;
  return result;
}

uint64_t sub_245F8BA70(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 200);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t method lookup function for MetalFunctionNodeBase()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MetalFunctionNodeBase.inputs.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of MetalFunctionNodeBase.debugLabel.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of MetalFunctionNodeBase.debugLabel.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of MetalFunctionNodeBase.functionDefinitionName.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of MetalFunctionNodeBase.__allocating_init(id:resultType:template:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t dispatch thunk of MetalFunctionNodeBase.setInputs(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of MetalFunctionNodeBase.generateMetalSource(in:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of MetalFunctionNodeBase.createMetalInvocation(in:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t method lookup function for MetalLiteralValueNode()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MetalLiteralValueNode.value.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of MetalLiteralValueNode.value.setter(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t (*v3)(_OWORD *);
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  char v8;

  v2 = *(_BYTE *)(a1 + 64);
  v3 = *(uint64_t (**)(_OWORD *))(*(_QWORD *)v1 + 232);
  v4 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v4;
  v5 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v5;
  v8 = v2;
  return v3(v7);
}

uint64_t dispatch thunk of MetalLiteralValueNode.isConstExpr.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of MetalLiteralValueNode.isConstExpr.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of MetalLiteralValueNode.isConstExpr.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of MetalLiteralValueNode.__allocating_init(id:resultType:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  uint64_t (*v5)(uint64_t, uint64_t, _OWORD *);
  __int128 v6;
  __int128 v7;
  _OWORD v9[4];
  char v10;

  v4 = *(_BYTE *)(a3 + 64);
  v5 = *(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(v3 + 272);
  v6 = *(_OWORD *)(a3 + 16);
  v9[0] = *(_OWORD *)a3;
  v9[1] = v6;
  v7 = *(_OWORD *)(a3 + 48);
  v9[2] = *(_OWORD *)(a3 + 32);
  v9[3] = v7;
  v10 = v4;
  return v5(a1, a2, v9);
}

uint64_t dispatch thunk of MetalLiteralValueNode.setInputs(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t method lookup function for MetalFunctionCallNode()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MetalFunctionCallNode.id.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.id.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.id.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.inputs.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.inputs.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.inputs.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.resultType.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.resultType.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.resultType.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.debugLabel.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.debugLabel.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.debugLabel.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.isConstExpr.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.isConstExpr.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.isConstExpr.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.__allocating_init(id:resultType:functionName:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.setInputs(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.createMetalInvocation(in:)()
{
  return dispatch thunk of MetalFunctionCallNode.createMetalInvocation(in:)();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t method lookup function for MetalFunctionParameterNode()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MetalFunctionParameterNode.name.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of MetalFunctionParameterNode.name.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of MetalFunctionParameterNode.__allocating_init(id:resultType:name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of MetalFunctionParameterNode.createMetalInvocation(in:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t method lookup function for MetalFunctionDefinitionNode()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.id.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.id.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.id.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.inputs.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.inputs.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.inputs.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.resultType.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.resultType.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.resultType.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.debugLabel.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.debugLabel.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.debugLabel.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.specifier.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.specifier.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.specifier.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.argumentTypes.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.argumentTypes.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.argumentTypes.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.__allocating_init(id:argumentTypes:resultType:functionName:specifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.setInputs(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.forwardDeclaration()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.generateMetalSource(in:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t method lookup function for MetalStructGetterOffsetNode()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MetalStructGetterOffsetNode.__allocating_init(id:inputType:resultType:offset:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of MetalStructGetterOffsetNode.createMetalInvocation(in:)()
{
  return dispatch thunk of MetalFunctionCallNode.createMetalInvocation(in:)();
}

uint64_t method lookup function for MetalStructGetterNode()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MetalStructGetterNode.resultType.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of MetalStructGetterNode.resultType.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of MetalStructGetterNode.debugLabel.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of MetalStructGetterNode.debugLabel.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of MetalStructGetterNode.__allocating_init(id:inputType:resultType:fieldName:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of MetalStructGetterNode.createMetalInvocation(in:)()
{
  return dispatch thunk of MetalFunctionCallNode.createMetalInvocation(in:)();
}

uint64_t method lookup function for MetalPassthroughNode()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MetalPassthroughNode.id.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of MetalPassthroughNode.id.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of MetalPassthroughNode.debugLabel.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of MetalPassthroughNode.debugLabel.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of MetalPassthroughNode.debugLabel.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of MetalPassthroughNode.isConstExpr.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of MetalPassthroughNode.isConstExpr.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of MetalPassthroughNode.__allocating_init(id:resultType:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t type metadata accessor for MetalShaderProgram()
{
  return objc_opt_self();
}

uint64_t method lookup function for MetalShaderProgram()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MetalShaderProgram.nodes.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of MetalShaderProgram.nodeMap.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of MetalShaderProgram.customFragmentShaderConstants.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of MetalShaderProgram.customFragmentShaderConstants.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of MetalShaderProgram.customFragmentShaderConstants.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of MetalShaderProgram.customMetalContent.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of MetalShaderProgram.customMetalContent.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of MetalShaderProgram.customMetalContent.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of MetalShaderProgram.importPaths.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of MetalShaderProgram.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t dispatch thunk of MetalShaderProgram.generateMetalSource(in:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of MetalShaderProgram.node(withIdentifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of MetalShaderProgram.filtered(by:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t static OrderedDictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((static OrderedSet.== infix(_:_:)(a1, a2, a4, a5, a7, a9) & 1) != 0)
    return static ContiguousArray<A>.== infix(_:_:)();
  else
    return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> OrderedDictionary<A, B>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  return static OrderedDictionary<>.== infix(_:_:)(*a1, a1[1], a1[2], *a2, a2[1], a2[2], a3[2], a3[3], a3[4]) & 1;
}

uint64_t _HashTable.Header.scale.getter()
{
  _QWORD *v0;

  return *v0 & 0x3FLL;
}

uint64_t _HashTable.Header.reservedScale.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8) & 0x3FLL;
}

uint64_t _HashTable.Header.seed.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t _HashTable.Header.bias.getter()
{
  uint64_t v0;

  return *(uint64_t *)(v0 + 8) >> 6;
}

uint64_t _HashTable.Header.bias.setter(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;

  v2 = 1 << *v1;
  v3 = __OFSUB__(v2, 1);
  v4 = v2 - 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    v5 = (v4 & (result >> 63)) + result;
    if (v5 < v4)
      v4 = 0;
    v1[1] = v1[1] & 0x3FLL | ((v5 - v4) << 6);
  }
  return result;
}

uint64_t _HashTable.Header.reservedScale.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = *(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFC0 | result & 0x3F;
  return result;
}

uint64_t _HashTable.Header.init(scale:reservedScale:seed:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = result | (a3 << 6);
  a4[1] = a2;
  return result;
}

uint64_t _HashTable.Header.capacity.getter()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t result;
  double v3;

  v1 = *v0 & 0x3FLL;
  if (v1 < 5)
    return 15;
  v3 = (double)(1 << v1) * 0.75;
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v3 < 9.22337204e18)
    return (uint64_t)v3;
LABEL_9:
  __break(1u);
  return result;
}

uint64_t _HashTable.Header._scaleAndSeed.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t _HashTable.Header._scaleAndSeed.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_HashTable.Header._scaleAndSeed.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t _HashTable.Header._reservedScaleAndBias.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t _HashTable.Header._reservedScaleAndBias.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*_HashTable.Header._reservedScaleAndBias.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

_QWORD *(*_HashTable.Header.reservedScale.modify(uint64_t *a1))(_QWORD *result)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8) & 0x3FLL;
  a1[1] = v1;
  return _HashTable.Header.reservedScale.modify;
}

_QWORD *_HashTable.Header.reservedScale.modify(_QWORD *result)
{
  *(_QWORD *)(result[1] + 8) = *(_QWORD *)(result[1] + 8) & 0xFFFFFFFFFFFFFFC0 | *result & 0x3FLL;
  return result;
}

uint64_t (*_HashTable.Header.bias.modify(uint64_t *a1))(uint64_t *a1)
{
  uint64_t v1;

  *a1 = *(uint64_t *)(v1 + 8) >> 6;
  a1[1] = v1;
  return _HashTable.Header.bias.modify;
}

uint64_t _HashTable.Header.bias.modify(uint64_t *a1)
{
  return _HashTable.Header.bias.setter(*a1);
}

uint64_t sub_245F8C444@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 8) & 0x3FLL;
  return result;
}

_QWORD *sub_245F8C454(_QWORD *result, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFC0 | *result & 0x3FLL;
  return result;
}

uint64_t sub_245F8C468@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  *a2 = *(uint64_t *)(result + 8) >> 6;
  return result;
}

uint64_t sub_245F8C478(uint64_t *a1)
{
  return _HashTable.Header.bias.setter(*a1);
}

uint64_t getEnumTagSinglePayload for _HashTable.Header(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _HashTable.Header(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _HashTable.Header()
{
  return &type metadata for _HashTable.Header;
}

uint64_t RandomAccessCollection._offset(of:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v3 = (char *)&v6 - v2;
  dispatch thunk of Collection.startIndex.getter();
  v4 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
  return v4;
}

uint64_t RandomAccessCollection.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  void (*v9)(_BYTE *, uint64_t);
  void (*v10)(_BYTE *, _QWORD);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[32];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v4);
  v8 = &v15[-v7];
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  v9 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
  v9(v6, AssociatedTypeWitness);
  v10 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
  v12 = v11;
  v13 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, v12, v13);
  v10(v15, 0);
  return ((uint64_t (*)(_BYTE *, uint64_t))v9)(v8, AssociatedTypeWitness);
}

uint64_t RandomAccessCollection._index(at:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v3 = (char *)&v5 - v2;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x7463656A626FLL;
    else
      v3 = 0x646C726F77;
    if (v2 == 1)
      v4 = 0xE600000000000000;
    else
      v4 = 0xE500000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x7463656A626FLL;
      else
        v6 = 0x646C726F77;
      if (v5 == 1)
        v7 = 0xE600000000000000;
      else
        v7 = 0xE500000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE500000000000000;
    v3 = 0x6C65646F6DLL;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE500000000000000;
  if (v3 != 0x6C65646F6DLL)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void specialized == infix<A>(_:_:)(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_245F8C954(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_245F8C9EC + 4 * byte_245FC5046[a2]))(0x6C616D726F6ELL);
}

uint64_t sub_245F8C9EC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6C616D726F6ELL && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void specialized RawRepresentable<>.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_245F8CB24()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, char a2)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_245F8CC14()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph11GeomPropDefV_G_AH19NodeDefinitionStoreV0gH0Vs5NeverOTg504_s11e7Graph19jkl10VACycfcAC8gh7VAA0fG3I6Vcfu0_Tf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v3 = a1;
  v41 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v41;
  result = specialized Dictionary.Values.startIndex.getter(v3);
  v6 = result;
  v7 = 0;
  v8 = v3 + 64;
  v9 = *(_BYTE *)(v3 + 32);
  v29 = v3 + 80;
  v30 = v1;
  v32 = v3 + 64;
  v33 = v3;
  v31 = v5;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << v9)
  {
    v12 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_26;
    if (*(_DWORD *)(v3 + 36) != v5)
      goto LABEL_27;
    v13 = *(_QWORD *)(v3 + 56) + (v6 << 6);
    v14 = *(_QWORD *)(v13 + 8);
    v36 = *(_QWORD *)v13;
    v15 = *(_QWORD **)(v13 + 16);
    v16 = *(_QWORD *)(v13 + 24);
    v17 = *(_QWORD *)(v13 + 32);
    v18 = *(_BYTE *)(v13 + 40);
    v39 = *(_BYTE *)(v13 + 41);
    v19 = v15[3];
    v34 = v7;
    v35 = v15[4];
    v20 = v15[5];
    swift_bridgeObjectRetain();
    v40 = v18;
    if ((v18 & 1) != 0)
    {
      v37 = v17;
      v38 = v16;
      swift_bridgeObjectRetain();
    }
    else
    {
      v37 = 0;
      v38 = v16;
    }
    v22 = *(_QWORD *)(v41 + 16);
    v21 = *(_QWORD *)(v41 + 24);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    if (v22 >= v21 >> 1)
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
    *(_QWORD *)(v41 + 16) = v22 + 1;
    v23 = v41 + (v22 << 6);
    *(_QWORD *)(v23 + 32) = v36;
    *(_QWORD *)(v23 + 40) = v14;
    *(_QWORD *)(v23 + 48) = v19;
    *(_QWORD *)(v23 + 56) = v35;
    *(_QWORD *)(v23 + 64) = v20;
    *(_QWORD *)(v23 + 72) = v38;
    *(_QWORD *)(v23 + 80) = v37;
    *(_BYTE *)(v23 + 88) = v40;
    *(_BYTE *)(v23 + 89) = v39;
    v3 = v33;
    v9 = *(_BYTE *)(v33 + 32);
    v10 = 1 << v9;
    if (v6 >= 1 << v9)
      goto LABEL_28;
    v8 = v32;
    v24 = *(_QWORD *)(v32 + 8 * v12);
    if ((v24 & (1 << v6)) == 0)
      goto LABEL_29;
    v5 = v31;
    if (*(_DWORD *)(v33 + 36) != v31)
      goto LABEL_30;
    v25 = v24 & (-2 << (v6 & 0x3F));
    if (v25)
    {
      v10 = __clz(__rbit64(v25)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v11 = v30;
    }
    else
    {
      v26 = v12 + 1;
      v27 = (v10 + 63) >> 6;
      v11 = v30;
      if (v12 + 1 < v27)
      {
        v28 = *(_QWORD *)(v32 + 8 * v26);
        if (v28)
        {
LABEL_23:
          v10 = __clz(__rbit64(v28)) + (v26 << 6);
        }
        else
        {
          while (v27 - 2 != v12)
          {
            v28 = *(_QWORD *)(v29 + 8 * v12++);
            if (v28)
            {
              v26 = v12 + 1;
              goto LABEL_23;
            }
          }
        }
      }
    }
    v7 = v34 + 1;
    v6 = v10;
    if (v34 + 1 == v11)
      return v2;
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t NodeDefinitionStore.MaterialXDataType.init(_:_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = a3;
  a4[1] = result;
  a4[2] = a2;
  return result;
}

uint64_t NodeDefinitionStore.MaterialXDataType.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = result;
  a3[2] = a2;
  return result;
}

uint64_t static NodeDefinitionStore.MaterialXDataType.Kind.== infix(_:_:)(_QWORD **a1, _QWORD **a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *a1;
  v3 = *a2;
  if (v2)
  {
    if (v3)
      return specialized static Array<A>.== infix(_:_:)(v2, v3);
    return 0;
  }
  if (v3)
    return 0;
  swift_bridgeObjectRelease_n();
  return 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys()
{
  lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys()
{
  lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys()
{
  lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys()
{
  lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys()
{
  lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys()
{
  lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t NodeDefinitionStore.MaterialXDataType.Kind.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys>);
  v18 = *(_QWORD *)(v3 - 8);
  v19 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys>);
  v16 = *(_QWORD *)(v6 - 8);
  v17 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys>);
  v20 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v12)
  {
    v23 = 1;
    lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v21 = v12;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A], MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
    v13 = v19;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v5, v13);
  }
  else
  {
    v22 = 0;
    lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v11, v9);
}

unint64_t lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys;
  if (!lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys, &unk_251713768);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys;
  if (!lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys, &unk_251713768);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys;
  if (!lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys, &unk_251713768);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys;
  if (!lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys, &unk_251713768);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys;
  if (!lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys, &unk_251713818);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys;
  if (!lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys, &unk_251713818);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys;
  if (!lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys, &unk_251713818);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys;
  if (!lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys, &unk_251713818);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys;
  if (!lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys, &unk_251713788);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys;
  if (!lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys, &unk_251713788);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys;
  if (!lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys, &unk_251713788);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys);
  }
  return result;
}

uint64_t NodeDefinitionStore.MaterialXDataType.Kind.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;

  v31 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  v29 = v3;
  v30 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v32 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v33 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys();
  v15 = v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15)
    goto LABEL_7;
  v16 = v6;
  v17 = v32;
  v34 = v11;
  v18 = KeyedDecodingContainer.allKeys.getter();
  if (*(_QWORD *)(v18 + 16) != 1)
  {
    v22 = type metadata accessor for DecodingError();
    swift_allocError();
    v23 = v10;
    v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v25 = &type metadata for NodeDefinitionStore.MaterialXDataType.Kind;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v25, *MEMORY[0x24BEE26D0], v22);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v23);
LABEL_7:
    v26 = (uint64_t)v33;
    return __swift_destroy_boxed_opaque_existential_1Tm(v26);
  }
  if ((*(_BYTE *)(v18 + 32) & 1) != 0)
  {
    v37 = 1;
    lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A], MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
    v19 = v10;
    v20 = v29;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v20);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v19);
    v21 = v35;
  }
  else
  {
    v36 = 0;
    lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v16);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v10);
    v21 = 0;
  }
  v26 = (uint64_t)v33;
  *v31 = v21;
  return __swift_destroy_boxed_opaque_existential_1Tm(v26);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NodeDefinitionStore.MaterialXDataType.Kind@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return NodeDefinitionStore.MaterialXDataType.Kind.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NodeDefinitionStore.MaterialXDataType.Kind(_QWORD *a1)
{
  return NodeDefinitionStore.MaterialXDataType.Kind.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NodeDefinitionStore.MaterialXDataType.Kind(_QWORD **a1, _QWORD **a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *a1;
  v3 = *a2;
  if (v2)
  {
    if (v3)
      return specialized static Array<A>.== infix(_:_:)(v2, v3);
    return 0;
  }
  if (v3)
    return 0;
  swift_bridgeObjectRelease_n();
  return 1;
}

uint64_t NodeDefinitionStore.MaterialXDataType.kind.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t NodeDefinitionStore.MaterialXDataType.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDefinitionStore.MaterialXDataType.description.getter()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v7;

  v1 = v0[1];
  v2 = (void *)v0[2];
  if (*v0)
    v3 = 0x7465733A786C746DLL;
  else
    v3 = 0x6D616E3A786C746DLL;
  v7 = v3;
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v1;
  v4._object = v2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return v7;
}

id outlined copy of NodeDefinitionStore.TypeStorage?(id result, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int8 a9)
{
  if (a9 != 255)
    return outlined copy of SGDataTypeStorage(result, a2, a3, a4, a5, a6, a7, a8, a9);
  return result;
}

uint64_t static NodeDefinitionStore.Output.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static NodeDefinitionStore.Input.== infix(_:_:)(a1, a2) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NodeDefinitionStore.Output(uint64_t a1, uint64_t a2)
{
  return specialized static NodeDefinitionStore.Input.== infix(_:_:)(a1, a2) & 1;
}

uint64_t NodeDefinitionStore.Input.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDefinitionStore.Output.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 32);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(a1 + 16) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

id NodeDefinitionStore.Output.defaultValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;

  v2 = *(void **)(v1 + 48);
  v3 = *(void **)(v1 + 56);
  v4 = *(_QWORD *)(v1 + 64);
  v5 = *(_QWORD *)(v1 + 72);
  v6 = *(_QWORD *)(v1 + 80);
  v7 = *(_QWORD *)(v1 + 88);
  v8 = *(_QWORD *)(v1 + 96);
  v9 = *(_QWORD *)(v1 + 104);
  v10 = *(_BYTE *)(v1 + 112);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_BYTE *)(a1 + 64) = v10;
  return outlined copy of NodeDefinitionStore.TypeStorage?(v2, v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t NodeDefinitionStore.Input.defaultGeomProp.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDefinitionStore.Input.isUniform.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 136);
}

uint64_t static NodeDefinitionStore.Input.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static NodeDefinitionStore.Input.== infix(_:_:)(a1, a2) & 1;
}

__n128 NodeDefinitionStore.Output.init(name:type:defaultValue:defaultGeomProp:isUniform:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  char v9;
  __int128 v10;
  __n128 result;
  __int128 v12;

  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_BYTE *)(a4 + 64);
  *(_QWORD *)a8 = a1;
  *(_QWORD *)(a8 + 8) = a2;
  *(_OWORD *)(a8 + 16) = *(_OWORD *)a3;
  *(_QWORD *)(a8 + 32) = v8;
  v10 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a8 + 48) = *(_OWORD *)a4;
  *(_OWORD *)(a8 + 64) = v10;
  result = *(__n128 *)(a4 + 32);
  v12 = *(_OWORD *)(a4 + 48);
  *(__n128 *)(a8 + 80) = result;
  *(_OWORD *)(a8 + 96) = v12;
  *(_BYTE *)(a8 + 112) = v9;
  *(_QWORD *)(a8 + 120) = a5;
  *(_QWORD *)(a8 + 128) = a6;
  *(_BYTE *)(a8 + 136) = a7;
  return result;
}

uint64_t NodeDefinitionStore.Node.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDefinitionStore.Node.nodeName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDefinitionStore.Node.inherit.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDefinitionStore.Node.nodeGroup.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDefinitionStore.Node.version.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDefinitionStore.Node.isDefaultVersion.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t NodeDefinitionStore.Node.targets.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NodeDefinitionStore.Node.uiName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDefinitionStore.Node.inputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NodeDefinitionStore.Node.outputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NodeDefinitionStore.Node.availability.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDefinitionStore.Node.availabilityMessage.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDefinitionStore.Node.init(nodeDef:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[8];
  _BYTE v28[16];

  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  v23 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 128);
  swift_bridgeObjectRetain();
  v24 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined retain of NodeDef(a1);
  v22 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph7NodeDefV6IOSpecVG_AF0F15DefinitionStoreV5InputVs5NeverOTg504_s11d7Graph19fij10V0C0V7nodeg16AeA0cG0V_tcfcAC5k4VAH6H6VXEfU_AHTf1cn_nTf4ng_nTm(v5, (uint64_t *)a1, (uint64_t)v28, (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), "could not generate type storage for input %s with default value %s for node %s in NodeDefinitionStore. Skipping this node.");
  outlined release of NodeDef(a1);
  swift_bridgeObjectRelease();
  outlined retain of NodeDef(a1);
  v6 = swift_bridgeObjectRetain();
  v21 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph7NodeDefV6IOSpecVG_AF0F15DefinitionStoreV5InputVs5NeverOTg504_s11d7Graph19fij10V0C0V7nodeg16AeA0cG0V_tcfcAC5k4VAH6H6VXEfU_AHTf1cn_nTf4ng_nTm(v6, (uint64_t *)a1, (uint64_t)v27, (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), "could not generate type storage for output %s with default value %s for node %s in NodeDefinitionStore. Skipping this node.");
  outlined release of NodeDef(a1);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a1 + 120);
  if (v7 == 1)
  {
    v7 = 0;
    v19 = 0xE900000000000064;
    v20 = 0;
    v8 = 0x6574726F70707573;
  }
  else if (v7 == 2)
  {
    v7 = 0;
    v19 = 0xEB00000000646574;
    v20 = 0;
    v8 = 0x726F707075736E75;
  }
  else
  {
    v20 = *(_QWORD *)(a1 + 112);
    swift_bridgeObjectRetain();
    v19 = 0xEA00000000006465;
    v8 = 0x7461636572706564;
  }
  v18 = v8;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_BYTE *)(a1 + 80);
  v14 = *(_QWORD *)(a1 + 88);
  v17 = *(_QWORD *)(a1 + 96);
  v15 = *(_QWORD *)(a1 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = outlined release of NodeDef(a1);
  *(_QWORD *)a2 = v25;
  *(_QWORD *)(a2 + 8) = v26;
  *(_QWORD *)(a2 + 16) = v23;
  *(_QWORD *)(a2 + 24) = v24;
  *(_QWORD *)(a2 + 32) = v9;
  *(_QWORD *)(a2 + 40) = v10;
  *(_QWORD *)(a2 + 48) = v11;
  *(_QWORD *)(a2 + 56) = v12;
  *(_QWORD *)(a2 + 64) = v11;
  *(_QWORD *)(a2 + 72) = v12;
  *(_BYTE *)(a2 + 80) = v13;
  *(_QWORD *)(a2 + 88) = v14;
  *(_QWORD *)(a2 + 96) = v17;
  *(_QWORD *)(a2 + 104) = v15;
  *(_QWORD *)(a2 + 112) = v22;
  *(_QWORD *)(a2 + 120) = v21;
  *(_QWORD *)(a2 + 128) = v18;
  *(_QWORD *)(a2 + 136) = v19;
  *(_QWORD *)(a2 + 144) = v20;
  *(_QWORD *)(a2 + 152) = v7;
  return result;
}

uint64_t closure #1 in NodeDefinitionStore.Node.init(nodeDef:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const char *a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *log;
  uint64_t v27;
  uint64_t v28;
  char *formata;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39[8];
  char v40;
  uint64_t v41;

  v6 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 32);
  v35 = *(_QWORD *)(a1 + 40);
  v36 = *(_QWORD *)(a1 + 48);
  v34 = *(_BYTE *)(a1 + 56);
  v33 = *(_QWORD *)a1;
  if (!v8)
  {
    v14 = *(_QWORD *)(a1 + 8);
    formata = 0;
    v32 = 0;
    v28 = 0;
LABEL_10:
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
LABEL_14:
    v21 = -1;
    goto LABEL_15;
  }
  v9 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain();
  if (!MaterialXDataType.asMetalDataType.getter())
  {
    v14 = v5;
    swift_bridgeObjectRelease();
    formata = 0;
    v32 = 0;
    v28 = 0;
    v8 = 0;
    goto LABEL_10;
  }
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  NodeDefinitionStore.TypeStorage.init(materialXValue:type:)(v9, v8, v7);
  if (v38)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)logger);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    outlined retain of NodeDef((uint64_t)a2);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    outlined retain of NodeDef((uint64_t)a2);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      log = v11;
      v13 = swift_slowAlloc();
      v27 = swift_slowAlloc();
      v39[0] = v27;
      *(_DWORD *)v13 = 136315650;
      swift_bridgeObjectRetain();
      v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      v14 = v5;
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v13 + 12) = 2080;
      swift_bridgeObjectRetain();
      v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v8, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v13 + 22) = 2080;
      v15 = *a2;
      v16 = a2[1];
      swift_bridgeObjectRetain();
      v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of NodeDef((uint64_t)a2);
      outlined release of NodeDef((uint64_t)a2);
      _os_log_impl(&dword_245E46000, log, v12, a3, (uint8_t *)v13, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v27, -1, -1);
      MEMORY[0x24954C33C](v13, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      v14 = v5;
      swift_bridgeObjectRelease_n();
      outlined release of NodeDef((uint64_t)a2);
      outlined release of NodeDef((uint64_t)a2);

    }
    formata = 0;
    v32 = 0;
    v28 = 0;
    v8 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    goto LABEL_14;
  }
  v14 = v5;
  swift_bridgeObjectRelease();
  formata = (char *)v39[1];
  v32 = v39[0];
  v8 = v39[3];
  v28 = v39[2];
  v17 = v39[4];
  v18 = v39[5];
  v19 = v39[6];
  v20 = v39[7];
  v21 = v40;
LABEL_15:
  v22 = *(_QWORD *)(v37 + 24);
  v23 = *(_QWORD *)(v37 + 32);
  v24 = swift_bridgeObjectRetain();
  *(_QWORD *)a4 = v33;
  *(_QWORD *)(a4 + 8) = v14;
  *(_QWORD *)(a4 + 16) = v22;
  *(_QWORD *)(a4 + 24) = v23;
  *(_QWORD *)(a4 + 32) = v24;
  *(_QWORD *)(a4 + 48) = v32;
  *(_QWORD *)(a4 + 56) = formata;
  *(_QWORD *)(a4 + 64) = v28;
  *(_QWORD *)(a4 + 72) = v8;
  *(_QWORD *)(a4 + 80) = v17;
  *(_QWORD *)(a4 + 88) = v18;
  *(_QWORD *)(a4 + 96) = v19;
  *(_QWORD *)(a4 + 104) = v20;
  *(_BYTE *)(a4 + 112) = v21;
  *(_QWORD *)(a4 + 120) = v35;
  *(_QWORD *)(a4 + 128) = v36;
  *(_BYTE *)(a4 + 136) = v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

ShaderGraph::NodeDefinitionStore::BuiltinGeomProp_optional __swiftcall NodeDefinitionStore.BuiltinGeomProp.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  ShaderGraph::NodeDefinitionStore::BuiltinGeomProp_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of NodeDefinitionStore.BuiltinGeomProp.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 6;
  if (v5 < 6)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t NodeDefinitionStore.BuiltinGeomProp.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_245F8E570 + 4 * byte_245FC5058[*v0]))(0x6E6F697469736F70, 0xE800000000000000);
}

uint64_t sub_245F8E570()
{
  return 0x6C616D726F6ELL;
}

uint64_t sub_245F8E584()
{
  return 0x746E65676E6174;
}

uint64_t sub_245F8E59C()
{
  return 0x6E65676E61746962;
}

uint64_t sub_245F8E5BC()
{
  return 0x64726F6F63786574;
}

uint64_t sub_245F8E5D0()
{
  return 0x6F6C6F636D6F6567;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance NodeDefinitionStore.BuiltinGeomProp(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

ShaderGraph::NodeDefinitionStore::BuiltinGeomProp_optional protocol witness for RawRepresentable.init(rawValue:) in conformance NodeDefinitionStore.BuiltinGeomProp(Swift::String *a1)
{
  return NodeDefinitionStore.BuiltinGeomProp.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NodeDefinitionStore.BuiltinGeomProp()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_245F8E634 + 4 * byte_245FC505E[*v0]))();
}

void sub_245F8E634(_QWORD *a1@<X8>)
{
  *a1 = 0x6C616D726F6ELL;
  a1[1] = 0xE600000000000000;
}

void sub_245F8E64C(_QWORD *a1@<X8>)
{
  *a1 = 0x746E65676E6174;
  a1[1] = 0xE700000000000000;
}

void sub_245F8E668(_QWORD *a1@<X8>)
{
  *a1 = 0x6E65676E61746962;
  a1[1] = 0xE900000000000074;
}

void sub_245F8E68C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x64726F6F63786574;
  a1[1] = v1;
}

void sub_245F8E6A4(_QWORD *a1@<X8>)
{
  *a1 = 0x6F6C6F636D6F6567;
  a1[1] = 0xE900000000000072;
}

void protocol witness for Hashable.hashValue.getter in conformance NodeDefinitionStore.BuiltinGeomProp()
{
  char *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance NodeDefinitionStore.BuiltinGeomProp()
{
  __asm { BR              X10 }
}

uint64_t sub_245F8E708()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance NodeDefinitionStore.BuiltinGeomProp(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

ShaderGraph::NodeDefinitionStore::Space_optional __swiftcall NodeDefinitionStore.Space.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  ShaderGraph::NodeDefinitionStore::Space_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of NodeDefinitionStore.Space.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t NodeDefinitionStore.Space.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7463656A626FLL;
  if (*v0 != 1)
    v1 = 0x646C726F77;
  if (*v0)
    return v1;
  else
    return 0x6C65646F6DLL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NodeDefinitionStore.Space(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

ShaderGraph::NodeDefinitionStore::Space_optional protocol witness for RawRepresentable.init(rawValue:) in conformance NodeDefinitionStore.Space(Swift::String *a1)
{
  return NodeDefinitionStore.Space.init(rawValue:)(*a1);
}

uint64_t NodeDefinitionStore.GeomProp.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDefinitionStore.GeomProp.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 32);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(a1 + 16) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t NodeDefinitionStore.GeomProp.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(v1 + 40);
  v3 = *(_QWORD *)(v1 + 48);
  v4 = *(_BYTE *)(v1 + 56);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  return outlined copy of GeomPropDef.GeomProp(v2, v3, v4);
}

void NodeDefinitionStore.GeomProp.space.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 57);
}

uint64_t NodeDefinitionStore.GeomProp.init(geomPropDef:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  char v14;
  __n128 v15;
  __n128 v16;
  char v17;

  v4 = *(_QWORD **)(a1 + 16);
  v5 = v4[3];
  v6 = v4[4];
  v7 = v4[5];
  swift_bridgeObjectRetain();
  v9 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  outlined init with take of GeomPropDef.GeomProp((__n128 *)(a1 + 24), &v15);
  outlined init with take of GeomPropDef.GeomProp(&v15, &v16);
  v10 = v17;
  if ((v17 & 1) != 0)
  {
    v12 = v16.n128_u64[1];
    v11 = v16.n128_u64[0];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined retain of GeomPropDef.GeomProp((uint64_t)&v15);
    outlined release of GeomPropDef(a1);
  }
  else
  {
    v11 = v16.n128_u8[0];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined release of GeomPropDef(a1);
    v12 = 0;
  }
  outlined init with take of MetalFunctionNode?(a1 + 41, (uint64_t)&v14, (uint64_t *)&demangling cache variable for type metadata for GeomPropDef.Space?);
  result = outlined init with take of MetalFunctionNode?((uint64_t)&v14, a2 + 57, (uint64_t *)&demangling cache variable for type metadata for GeomPropDef.Space?);
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 40) = v11;
  *(_QWORD *)(a2 + 48) = v12;
  *(_BYTE *)(a2 + 56) = v10;
  return result;
}

uint64_t NodeDefinitionStore.nodes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NodeDefinitionStore.geomProps.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NodeDefinitionStore.nodesLookupId.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NodeDefinitionStore.geomPropsLookupId.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NodeDefinitionStore.nodesLookupName.getter()
{
  return swift_bridgeObjectRetain();
}

void __swiftcall NodeDefinitionStore.init()(ShaderGraph::NodeDefinitionStore *__return_ptr retstr)
{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t j;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  _OWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  char v59;
  _QWORD *v60;
  int v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t k;
  __int128 v73;
  char isUniquelyReferenced_nonNull_native;
  char v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _BOOL8 v79;
  uint64_t v80;
  char v81;
  unint64_t v82;
  char v83;
  __int128 *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _OWORD *v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  BOOL v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  _QWORD *v118;
  char *v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  char v131;
  char v132;
  unint64_t v133;
  uint64_t v134;
  _BOOL8 v135;
  uint64_t v136;
  char v137;
  unint64_t v138;
  char v139;
  uint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  unint64_t v154;
  uint64_t v155;
  _BOOL8 v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  unint64_t v160;
  char v161;
  uint64_t v162;
  _QWORD *v163;
  char v164;
  unint64_t v165;
  unint64_t v166;
  _OWORD *v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  _OWORD *v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  char v194;
  uint64_t v195;
  _BOOL8 v196;
  uint64_t v198;
  int64_t v199;
  void *v200;
  uint64_t v201;
  _QWORD *v202;
  __int128 v203;
  char v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char v213;
  uint64_t v214;
  char v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  _BYTE v239[32];
  __int128 v240;
  uint64_t v241;
  _QWORD *v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  uint64_t v252;
  _QWORD v253[3];

  if (one-time initialization token for shared != -1)
    goto LABEL_91;
  while (1)
  {
    v1 = swift_bridgeObjectRetain();
    v2 = specialized Sequence.filter(_:)(v1);
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      v242 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v199 = v3;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
      v4 = 0;
      v5 = v242;
      v198 = v2 + 32;
      do
      {
        v220 = v4;
        v6 = (__int128 *)(v198 + 144 * v4);
        v243 = *v6;
        v7 = v6[1];
        v8 = v6[2];
        v9 = v6[4];
        v246 = v6[3];
        v247 = v9;
        v244 = v7;
        v245 = v8;
        v10 = v6[5];
        v11 = v6[6];
        v12 = v6[8];
        v250 = v6[7];
        v251 = v12;
        v248 = v10;
        v249 = v11;
        v13 = v12;
        v253[0] = v12;
        v216 = *((_QWORD *)&v244 + 1);
        v219 = v244;
        v212 = *((_QWORD *)&v243 + 1);
        v214 = v243;
        v14 = *(_QWORD *)(v12 + 16);
        if (v14)
        {
          outlined retain of NodeDef((uint64_t)&v243);
          outlined retain of NodeDef((uint64_t)&v243);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined retain of [Input]((uint64_t)v253);
          v241 = MEMORY[0x24BEE4AF8];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
          v15 = v241;
          v16 = (uint64_t *)(v13 + 48);
          for (i = v14 - 1; ; --i)
          {
            v18 = *(v16 - 1);
            v20 = *v16;
            v19 = v16[1];
            v21 = v16[4];
            v22 = *((_BYTE *)v16 + 40);
            *(_QWORD *)&v222 = *(v16 - 2);
            *((_QWORD *)&v222 + 1) = v18;
            *(_QWORD *)&v223 = v20;
            *((_QWORD *)&v223 + 1) = v19;
            v224 = *((_OWORD *)v16 + 1);
            *(_QWORD *)&v225 = v21;
            BYTE8(v225) = v22;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            closure #1 in NodeDefinitionStore.Node.init(nodeDef:)((uint64_t)&v222, (uint64_t *)&v243, "could not generate type storage for input %s with default value %s for node %s in NodeDefinitionStore. Skipping this node.", (uint64_t)&v232);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            v241 = v15;
            v24 = *(_QWORD *)(v15 + 16);
            v23 = *(_QWORD *)(v15 + 24);
            if (v24 >= v23 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
              v15 = v241;
            }
            *(_QWORD *)(v15 + 16) = v24 + 1;
            v25 = (_OWORD *)(v15 + 144 * v24);
            v25[2] = v232;
            v26 = v233;
            v27 = v234;
            v28 = v236;
            v25[5] = v235;
            v25[6] = v28;
            v25[3] = v26;
            v25[4] = v27;
            v29 = v237;
            v30 = v238;
            v31 = *(_OWORD *)v239;
            *(_OWORD *)((char *)v25 + 153) = *(_OWORD *)&v239[9];
            v25[8] = v30;
            v25[9] = v31;
            v25[7] = v29;
            if (!i)
              break;
            v16 += 8;
          }
          outlined release of NodeDef((uint64_t)&v243);
          outlined release of [Input]((uint64_t)v253);
        }
        else
        {
          outlined retain of NodeDef((uint64_t)&v243);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v15 = MEMORY[0x24BEE4AF8];
        }
        v32 = *((_QWORD *)&v251 + 1);
        v252 = *((_QWORD *)&v251 + 1);
        v33 = *(_QWORD *)(*((_QWORD *)&v251 + 1) + 16);
        if (v33)
        {
          outlined retain of NodeDef((uint64_t)&v243);
          outlined retain of [Input]((uint64_t)&v252);
          v241 = MEMORY[0x24BEE4AF8];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33, 0);
          v34 = v241;
          v35 = (uint64_t *)(v32 + 48);
          for (j = v33 - 1; ; --j)
          {
            v37 = *(v35 - 1);
            v39 = *v35;
            v38 = v35[1];
            v40 = v35[4];
            v41 = *((_BYTE *)v35 + 40);
            *(_QWORD *)&v222 = *(v35 - 2);
            *((_QWORD *)&v222 + 1) = v37;
            *(_QWORD *)&v223 = v39;
            *((_QWORD *)&v223 + 1) = v38;
            v224 = *((_OWORD *)v35 + 1);
            *(_QWORD *)&v225 = v40;
            BYTE8(v225) = v41;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            closure #1 in NodeDefinitionStore.Node.init(nodeDef:)((uint64_t)&v222, (uint64_t *)&v243, "could not generate type storage for output %s with default value %s for node %s in NodeDefinitionStore. Skipping this node.", (uint64_t)&v232);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            v241 = v34;
            v43 = *(_QWORD *)(v34 + 16);
            v42 = *(_QWORD *)(v34 + 24);
            if (v43 >= v42 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
              v34 = v241;
            }
            *(_QWORD *)(v34 + 16) = v43 + 1;
            v44 = (_OWORD *)(v34 + 144 * v43);
            v44[2] = v232;
            v45 = v233;
            v46 = v234;
            v47 = v236;
            v44[5] = v235;
            v44[6] = v47;
            v44[3] = v45;
            v44[4] = v46;
            v48 = v237;
            v49 = v238;
            v50 = *(_OWORD *)v239;
            *(_OWORD *)((char *)v44 + 153) = *(_OWORD *)&v239[9];
            v44[8] = v49;
            v44[9] = v50;
            v44[7] = v48;
            if (!j)
              break;
            v35 += 8;
          }
          outlined release of NodeDef((uint64_t)&v243);
          outlined release of [Input]((uint64_t)&v252);
        }
        else
        {
          v34 = MEMORY[0x24BEE4AF8];
        }
        v51 = *((_QWORD *)&v250 + 1);
        if (*((_QWORD *)&v250 + 1) == 1)
        {
          v51 = 0;
          v208 = 0xE900000000000064;
          v210 = 0;
          v52 = 0x6574726F70707573;
        }
        else if (*((_QWORD *)&v250 + 1) == 2)
        {
          v51 = 0;
          v208 = 0xEB00000000646574;
          v210 = 0;
          v52 = 0x726F707075736E75;
        }
        else
        {
          v210 = v250;
          swift_bridgeObjectRetain();
          v208 = 0xEA00000000006465;
          v52 = 0x7461636572706564;
        }
        v206 = v52;
        v53 = *((_QWORD *)&v248 + 1);
        v54 = v246;
        v55 = *((_QWORD *)&v245 + 1);
        v201 = v245;
        v203 = v249;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined release of NodeDef((uint64_t)&v243);
        v242 = v5;
        v57 = v5[2];
        v56 = v5[3];
        v58 = v5;
        if (v57 >= v56 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v57 + 1, 1);
          v58 = v242;
        }
        v4 = v220 + 1;
        v59 = v248;
        v58[2] = v57 + 1;
        v60 = &v58[20 * v57];
        v60[4] = v214;
        v60[5] = v212;
        v60[6] = v219;
        v60[7] = v216;
        v60[8] = v201;
        v60[9] = v55;
        *((_OWORD *)v60 + 5) = v54;
        *((_OWORD *)v60 + 6) = v54;
        *((_BYTE *)v60 + 112) = v59;
        v61 = *(_DWORD *)((char *)&v232 + 3);
        *(_DWORD *)((char *)v60 + 113) = v232;
        *((_DWORD *)v60 + 29) = v61;
        v60[15] = v53;
        *((_OWORD *)v60 + 8) = v203;
        v60[18] = v15;
        v60[19] = v34;
        v60[20] = v206;
        v60[21] = v208;
        v60[22] = v210;
        v60[23] = v51;
        v5 = v58;
      }
      while (v220 + 1 != v199);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    swift_bridgeObjectRetain();
    v62 = swift_bridgeObjectRetain();
    v63 = (_QWORD *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph11GeomPropDefV_G_AH19NodeDefinitionStoreV0gH0Vs5NeverOTg504_s11e7Graph19jkl10VACycfcAC8gh7VAA0fG3I6Vcfu0_Tf1cn_n(v62);
    swift_bridgeObjectRelease();
    v64 = v5[2];
    v221 = v5;
    v202 = v63;
    if (v64)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v65 = *((_OWORD *)v5 + 9);
      v238 = *((_OWORD *)v5 + 8);
      *(_OWORD *)v239 = v65;
      v66 = *((_OWORD *)v5 + 11);
      *(_OWORD *)&v239[16] = *((_OWORD *)v5 + 10);
      v240 = v66;
      v67 = *((_OWORD *)v5 + 5);
      v234 = *((_OWORD *)v5 + 4);
      v235 = v67;
      v68 = *((_OWORD *)v5 + 7);
      v236 = *((_OWORD *)v5 + 6);
      v237 = v68;
      v69 = *((_OWORD *)v5 + 3);
      v232 = *((_OWORD *)v5 + 2);
      v233 = v69;
      v70 = v64 - 1;
      v71 = (_QWORD *)MEMORY[0x24BEE4B00];
      for (k = 24; ; k += 20)
      {
        v73 = v232;
        outlined retain of NodeDefinitionStore.Node((uint64_t)&v232);
        outlined retain of NodeDefinitionStore.Node((uint64_t)&v232);
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v242 = v71;
        v76 = specialized __RawDictionaryStorage.find<A>(_:)(v73, *((uint64_t *)&v73 + 1));
        v77 = v71;
        v78 = v71[2];
        v79 = (v75 & 1) == 0;
        v80 = v78 + v79;
        if (__OFADD__(v78, v79))
        {
          __break(1u);
LABEL_86:
          __break(1u);
          goto LABEL_87;
        }
        v81 = v75;
        if (v77[3] >= v80)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            if ((v75 & 1) != 0)
              goto LABEL_39;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            if ((v81 & 1) != 0)
              goto LABEL_39;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v80, isUniquelyReferenced_nonNull_native);
          v82 = specialized __RawDictionaryStorage.find<A>(_:)(v73, *((uint64_t *)&v73 + 1));
          if ((v81 & 1) != (v83 & 1))
          {
LABEL_92:
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return;
          }
          v76 = v82;
          if ((v81 & 1) != 0)
          {
LABEL_39:
            v71 = v242;
            v84 = (__int128 *)(v242[7] + 160 * v76);
            v85 = v84[1];
            v222 = *v84;
            v223 = v85;
            v86 = v84[5];
            v88 = v84[2];
            v87 = v84[3];
            v226 = v84[4];
            v227 = v86;
            v224 = v88;
            v225 = v87;
            v89 = v84[9];
            v91 = v84[6];
            v90 = v84[7];
            v230 = v84[8];
            v231 = v89;
            v228 = v91;
            v229 = v90;
            outlined release of NodeDefinitionStore.Node((uint64_t)&v222);
            v92 = v233;
            *v84 = v232;
            v84[1] = v92;
            v93 = v237;
            v95 = v234;
            v94 = v235;
            v84[4] = v236;
            v84[5] = v93;
            v84[2] = v95;
            v84[3] = v94;
            v96 = v240;
            v98 = v238;
            v97 = *(_OWORD *)v239;
            v84[8] = *(_OWORD *)&v239[16];
            v84[9] = v96;
            v84[6] = v98;
            v84[7] = v97;
            goto LABEL_43;
          }
        }
        v71 = v242;
        v242[(v76 >> 6) + 8] |= 1 << v76;
        *(_OWORD *)(v71[6] + 16 * v76) = v73;
        v99 = (_OWORD *)(v71[7] + 160 * v76);
        v101 = *(_OWORD *)&v239[16];
        v100 = v240;
        v102 = *(_OWORD *)v239;
        v99[6] = v238;
        v99[7] = v102;
        v99[8] = v101;
        v99[9] = v100;
        v104 = v236;
        v103 = v237;
        v105 = v235;
        v99[2] = v234;
        v99[3] = v105;
        v99[4] = v104;
        v99[5] = v103;
        v106 = v233;
        *v99 = v232;
        v99[1] = v106;
        v107 = v71[2];
        v108 = __OFADD__(v107, 1);
        v109 = v107 + 1;
        if (v108)
          goto LABEL_88;
        v71[2] = v109;
        swift_bridgeObjectRetain();
LABEL_43:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined release of NodeDefinitionStore.Node((uint64_t)&v232);
        if (!v70)
        {
          swift_bridgeObjectRelease();
          goto LABEL_47;
        }
        v110 = *(_OWORD *)&v5[k + 2];
        v232 = *(_OWORD *)&v5[k];
        v233 = v110;
        v111 = *(_OWORD *)&v5[k + 4];
        v112 = *(_OWORD *)&v5[k + 6];
        v113 = *(_OWORD *)&v5[k + 10];
        v236 = *(_OWORD *)&v5[k + 8];
        v237 = v113;
        v234 = v111;
        v235 = v112;
        v114 = *(_OWORD *)&v5[k + 12];
        v115 = *(_OWORD *)&v5[k + 14];
        v116 = *(_OWORD *)&v5[k + 18];
        *(_OWORD *)&v239[16] = *(_OWORD *)&v5[k + 16];
        v240 = v116;
        v238 = v114;
        *(_OWORD *)v239 = v115;
        --v70;
      }
    }
    swift_bridgeObjectRetain();
    v71 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_47:
    v200 = v71;
    v117 = v63[2];
    v118 = (_QWORD *)MEMORY[0x24BEE4B00];
    if (v117)
    {
      swift_bridgeObjectRetain();
      v119 = (char *)v63 + 89;
      v120 = (_QWORD *)MEMORY[0x24BEE4B00];
      while (1)
      {
        v209 = v117;
        v124 = *(_QWORD *)(v119 - 57);
        v125 = *(_QWORD *)(v119 - 49);
        v126 = *(_QWORD *)(v119 - 41);
        v211 = *(_QWORD *)(v119 - 33);
        v127 = *(_QWORD *)(v119 - 25);
        v128 = *(_QWORD *)(v119 - 17);
        v129 = *(_QWORD *)(v119 - 9);
        v130 = *(v119 - 1);
        v213 = *v119;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of GeomPropDef.GeomProp(v128, v129, v130);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v217 = v129;
        v215 = v130;
        outlined copy of GeomPropDef.GeomProp(v128, v129, v130);
        swift_bridgeObjectRetain();
        v131 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v232 = v120;
        v133 = specialized __RawDictionaryStorage.find<A>(_:)(v124, v125);
        v134 = v120[2];
        v135 = (v132 & 1) == 0;
        v136 = v134 + v135;
        if (__OFADD__(v134, v135))
          goto LABEL_86;
        v137 = v132;
        if (v120[3] >= v136)
        {
          if ((v131 & 1) != 0)
          {
            v120 = (_QWORD *)v232;
            if ((v132 & 1) == 0)
              goto LABEL_58;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            v120 = (_QWORD *)v232;
            if ((v137 & 1) == 0)
              goto LABEL_58;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v136, v131);
          v138 = specialized __RawDictionaryStorage.find<A>(_:)(v124, v125);
          if ((v137 & 1) != (v139 & 1))
            goto LABEL_92;
          v133 = v138;
          v120 = (_QWORD *)v232;
          if ((v137 & 1) == 0)
          {
LABEL_58:
            v120[(v133 >> 6) + 8] |= 1 << v133;
            v140 = (uint64_t *)(v120[6] + 16 * v133);
            *v140 = v124;
            v140[1] = v125;
            v141 = v120[7] + (v133 << 6);
            *(_QWORD *)v141 = v124;
            *(_QWORD *)(v141 + 8) = v125;
            *(_QWORD *)(v141 + 16) = v126;
            *(_QWORD *)(v141 + 24) = v211;
            v122 = v217;
            *(_QWORD *)(v141 + 32) = v127;
            *(_QWORD *)(v141 + 40) = v128;
            *(_QWORD *)(v141 + 48) = v217;
            v123 = v215;
            *(_BYTE *)(v141 + 56) = v215;
            *(_BYTE *)(v141 + 57) = v213;
            v142 = v120[2];
            v108 = __OFADD__(v142, 1);
            v143 = v142 + 1;
            if (v108)
              goto LABEL_89;
            v120[2] = v143;
            swift_bridgeObjectRetain();
            goto LABEL_50;
          }
        }
        v121 = v120[7] + (v133 << 6);
        v205 = *(_QWORD *)(v121 + 48);
        v207 = *(_QWORD *)(v121 + 40);
        v204 = *(_BYTE *)(v121 + 56);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of GeomPropDef.GeomProp(v207, v205, v204);
        *(_QWORD *)v121 = v124;
        *(_QWORD *)(v121 + 8) = v125;
        *(_QWORD *)(v121 + 16) = v126;
        *(_QWORD *)(v121 + 24) = v211;
        v122 = v217;
        *(_QWORD *)(v121 + 32) = v127;
        *(_QWORD *)(v121 + 40) = v128;
        *(_QWORD *)(v121 + 48) = v217;
        v123 = v215;
        *(_BYTE *)(v121 + 56) = v215;
        *(_BYTE *)(v121 + 57) = v213;
LABEL_50:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        outlined consume of GeomPropDef.GeomProp(v128, v122, v123);
        v119 += 64;
        v117 = v209 - 1;
        if (v209 == 1)
        {
          v63 = v202;
          swift_bridgeObjectRelease();
          v144 = v221;
          v118 = (_QWORD *)MEMORY[0x24BEE4B00];
          goto LABEL_64;
        }
      }
    }
    v144 = v5;
    v120 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_64:
    v218 = v120;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v222 = v118;
    v145 = v144[2];
    if (!v145)
      break;
    v146 = *((_OWORD *)v144 + 9);
    v238 = *((_OWORD *)v144 + 8);
    *(_OWORD *)v239 = v146;
    v147 = *((_OWORD *)v144 + 11);
    *(_OWORD *)&v239[16] = *((_OWORD *)v144 + 10);
    v240 = v147;
    v148 = *((_OWORD *)v144 + 5);
    v234 = *((_OWORD *)v144 + 4);
    v235 = v148;
    v149 = *((_OWORD *)v144 + 7);
    v236 = *((_OWORD *)v144 + 6);
    v237 = v149;
    v150 = *((_OWORD *)v144 + 3);
    v232 = *((_OWORD *)v144 + 2);
    v233 = v150;
    v151 = *((_QWORD *)&v150 + 1);
    v152 = v150;
    outlined retain of NodeDefinitionStore.Node((uint64_t)&v232);
    swift_bridgeObjectRetain();
    v154 = specialized __RawDictionaryStorage.find<A>(_:)(v152, v151);
    v155 = v118[2];
    v156 = (v153 & 1) == 0;
    v157 = v155 + v156;
    if (!__OFADD__(v155, v156))
    {
      v158 = v153;
      v159 = 24;
      do
      {
        if (v118[3] < v157)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v157, 1);
          v118 = (_QWORD *)v222;
          v160 = specialized __RawDictionaryStorage.find<A>(_:)(v152, v151);
          if ((v158 & 1) != (v161 & 1))
            goto LABEL_92;
          v154 = v160;
        }
        if ((v158 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v162 = v118[7];
          v163 = *(_QWORD **)(v162 + 8 * v154);
          v164 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v162 + 8 * v154) = v163;
          if ((v164 & 1) == 0)
          {
            v163 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v163[2] + 1, 1, v163);
            *(_QWORD *)(v162 + 8 * v154) = v163;
          }
          v166 = v163[2];
          v165 = v163[3];
          if (v166 >= v165 >> 1)
          {
            v163 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v165 > 1), v166 + 1, 1, v163);
            *(_QWORD *)(v162 + 8 * v154) = v163;
          }
          v163[2] = v166 + 1;
          v167 = &v163[20 * v166];
          v168 = v233;
          v167[2] = v232;
          v167[3] = v168;
          v169 = v234;
          v170 = v235;
          v171 = v237;
          v167[6] = v236;
          v167[7] = v171;
          v167[4] = v169;
          v167[5] = v170;
          v172 = v238;
          v173 = *(_OWORD *)v239;
          v174 = v240;
          v167[10] = *(_OWORD *)&v239[16];
          v167[11] = v174;
          v167[8] = v172;
          v167[9] = v173;
          if (!--v145)
            goto LABEL_82;
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NodeDefinitionStore.Node>);
          v175 = (_OWORD *)swift_allocObject();
          v176 = v238;
          v177 = *(_OWORD *)&v239[16];
          v178 = v240;
          v175[9] = *(_OWORD *)v239;
          v175[10] = v177;
          v175[11] = v178;
          v179 = v234;
          v180 = v236;
          v181 = v237;
          v175[5] = v235;
          v175[6] = v180;
          v175[7] = v181;
          v175[8] = v176;
          v182 = v232;
          v183 = v233;
          v175[1] = xmmword_245FBECD0;
          v175[2] = v182;
          v175[3] = v183;
          v175[4] = v179;
          v118[(v154 >> 6) + 8] |= 1 << v154;
          v184 = (uint64_t *)(v118[6] + 16 * v154);
          *v184 = v152;
          v184[1] = v151;
          *(_QWORD *)(v118[7] + 8 * v154) = v175;
          v185 = v118[2];
          v108 = __OFADD__(v185, 1);
          v186 = v185 + 1;
          if (v108)
            goto LABEL_90;
          v118[2] = v186;
          if (!--v145)
          {
LABEL_82:
            v144 = v221;
            swift_bridgeObjectRelease();
            v63 = v202;
            goto LABEL_84;
          }
        }
        v187 = *(_OWORD *)&v221[v159 + 2];
        v232 = *(_OWORD *)&v221[v159];
        v233 = v187;
        v188 = *(_OWORD *)&v221[v159 + 4];
        v189 = *(_OWORD *)&v221[v159 + 6];
        v190 = *(_OWORD *)&v221[v159 + 10];
        v236 = *(_OWORD *)&v221[v159 + 8];
        v237 = v190;
        v234 = v188;
        v235 = v189;
        v191 = *(_OWORD *)&v221[v159 + 12];
        v192 = *(_OWORD *)&v221[v159 + 14];
        v193 = *(_OWORD *)&v221[v159 + 18];
        *(_OWORD *)&v239[16] = *(_OWORD *)&v221[v159 + 16];
        v240 = v193;
        v238 = v191;
        *(_OWORD *)v239 = v192;
        v151 = *((_QWORD *)&v233 + 1);
        v152 = v233;
        outlined retain of NodeDefinitionStore.Node((uint64_t)&v232);
        swift_bridgeObjectRetain();
        v154 = specialized __RawDictionaryStorage.find<A>(_:)(v152, v151);
        v158 = v194;
        v195 = v118[2];
        v196 = (v194 & 1) == 0;
        v159 += 20;
        v157 = v195 + v196;
      }
      while (!__OFADD__(v195, v196));
    }
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    swift_once();
  }
  swift_bridgeObjectRelease();
LABEL_84:
  retstr->nodes._rawValue = v144;
  retstr->geomProps._rawValue = v63;
  retstr->nodesLookupId._rawValue = v200;
  retstr->geomPropsLookupId._rawValue = v218;
  retstr->nodesLookupName._rawValue = v118;
}

uint64_t Array.toDictionary<A>(with:)(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Bool IsNativeType;
  void (*v22)(char *, unint64_t, uint64_t);
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v27 = a1;
  v28 = a2;
  v10 = type metadata accessor for Optional();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v25 - v12;
  v14 = MEMORY[0x24BDAC7A8](v11);
  v15 = *(_QWORD *)(a4 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a5;
  v30 = a6;
  v18 = Dictionary.init()();
  v32 = v18;
  v19 = swift_bridgeObjectRetain();
  if (MEMORY[0x24954B268](v19, a4))
  {
    v26 = v16;
    v20 = 0;
    while (1)
    {
      IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        v22 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
        v22(v17, a3+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v20, a4);
        v23 = v20 + 1;
        if (__OFADD__(v20, 1))
          goto LABEL_10;
      }
      else
      {
        result = _ArrayBuffer._getElementSlowPath(_:)();
        if (v26 != 8)
        {
          __break(1u);
          return result;
        }
        v31 = result;
        v22 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
        v22(v17, (unint64_t)&v31, a4);
        swift_unknownObjectRelease();
        v23 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
LABEL_10:
          __break(1u);
LABEL_11:
          swift_bridgeObjectRelease();
          return v32;
        }
      }
      v27(v17);
      v22(v13, (unint64_t)v17, a4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, a4);
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a4);
      ++v20;
      if (v23 == MEMORY[0x24954B268](a3, a4))
        goto LABEL_11;
    }
  }
  swift_bridgeObjectRelease();
  return v18;
}

void __swiftcall NodeDefinitionStore.getNodeDefinition(id:)(ShaderGraph::NodeDefinitionStore::Node_optional *__return_ptr retstr, Swift::String id)
{
  uint64_t v2;
  uint64_t v4;
  void *object;
  uint64_t countAndFlagsBits;
  unint64_t v7;
  char v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[10];

  v4 = *(_QWORD *)(v2 + 16);
  if (*(_QWORD *)(v4 + 16))
  {
    object = id._object;
    countAndFlagsBits = id._countAndFlagsBits;
    swift_bridgeObjectRetain();
    v7 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
    if ((v8 & 1) != 0)
    {
      v9 = (_OWORD *)(*(_QWORD *)(v4 + 56) + 160 * v7);
      v10 = v9[1];
      v17[0] = *v9;
      v17[1] = v10;
      v11 = v9[5];
      v13 = v9[2];
      v12 = v9[3];
      v17[4] = v9[4];
      v17[5] = v11;
      v17[2] = v13;
      v17[3] = v12;
      v14 = v9[6];
      v15 = v9[7];
      v16 = v9[9];
      v17[8] = v9[8];
      v17[9] = v16;
      v17[6] = v14;
      v17[7] = v15;
      memmove(retstr, v9, 0xA0uLL);
      destructiveProjectEnumData for NodePersonality.ShaderType(retstr);
      outlined retain of NodeDefinitionStore.Node((uint64_t)v17);
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
  }
  _s11ShaderGraph19NodeDefinitionStoreV0C0VSgWOi0_(v17);
  outlined init with take of MetalFunctionNode?((uint64_t)v17, (uint64_t)retstr, &demangling cache variable for type metadata for NodeDefinitionStore.Node?);
}

Swift::OpaquePointer_optional __swiftcall NodeDefinitionStore.getNodeDefinition(name:)(Swift::String name)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  unint64_t v5;
  char v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v1 + 32);
  if (*(_QWORD *)(v2 + 16))
  {
    object = name._object;
    countAndFlagsBits = name._countAndFlagsBits;
    swift_bridgeObjectRetain();
    v5 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
    if ((v6 & 1) != 0)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v5);
      swift_bridgeObjectRetain();
    }
    else
    {
      v7 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  name._countAndFlagsBits = v7;
  return *(Swift::OpaquePointer_optional *)&name._countAndFlagsBits;
}

double NodeDefinitionStore.getGeomProp(id:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  double result;

  v5 = *(_QWORD *)(v3 + 24);
  if (*(_QWORD *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(v5 + 56) + (v8 << 6);
      v11 = *(_QWORD *)(v10 + 8);
      v12 = *(_QWORD *)(v10 + 32);
      v13 = *(_QWORD *)(v10 + 40);
      v14 = *(_QWORD *)(v10 + 48);
      v15 = *(_BYTE *)(v10 + 56);
      v16 = *(_BYTE *)(v10 + 57);
      *(_QWORD *)a3 = *(_QWORD *)v10;
      *(_QWORD *)(a3 + 8) = v11;
      *(_OWORD *)(a3 + 16) = *(_OWORD *)(v10 + 16);
      *(_QWORD *)(a3 + 32) = v12;
      *(_QWORD *)(a3 + 40) = v13;
      *(_QWORD *)(a3 + 48) = v14;
      *(_BYTE *)(a3 + 56) = v15;
      *(_BYTE *)(a3 + 57) = v16;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of GeomPropDef.GeomProp(v13, v14, v15);
      swift_bridgeObjectRelease();
      return result;
    }
    swift_bridgeObjectRelease();
  }
  result = 0.0;
  *(_OWORD *)(a3 + 42) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  return result;
}

uint64_t specialized Dictionary.Values.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

void specialized static NodeDefinitionStore.TypeStorage.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_245F8FE10(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, int a6)
{
  void *v6;
  char v7;
  void *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _BOOL4 v13;
  char v14;
  char v15;
  _BYTE v17[320];

  if (v9)
  {
    outlined copy of SGDataTypeStorage(v6, v8, a3, a4, v10, a6, v12, v11, v9);
    outlined release of (NodeDefinitionStore.TypeStorage, NodeDefinitionStore.TypeStorage)((uint64_t)v17, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of SGDataTypeStorage);
    v15 = 0;
  }
  else
  {
    v13 = (v7 & 1) == 0;
    v14 = (char)v6;
    outlined release of (NodeDefinitionStore.TypeStorage, NodeDefinitionStore.TypeStorage)((uint64_t)v17, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of SGDataTypeStorage);
    v15 = v13 ^ v14;
  }
  return v15 & 1;
}

uint64_t specialized static NodeDefinitionStore.Input.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t result;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  unsigned __int8 v21;
  BOOL v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44[2];
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 v66;

  v2 = *(_QWORD **)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v45 = *(void **)(a1 + 48);
  v46 = *(void **)(a1 + 56);
  v47 = *(_QWORD *)(a1 + 64);
  v48 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)v44 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v43 = *(unsigned __int8 *)(a1 + 112);
  v32 = *(_QWORD *)(a1 + 120);
  v30 = *(unsigned __int8 *)(a1 + 136);
  v9 = *(_QWORD **)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v34 = *(_QWORD *)(a1 + 128);
  v35 = *(void **)(a2 + 48);
  v36 = *(void **)(a2 + 56);
  v37 = *(_QWORD *)(a2 + 64);
  v38 = *(_QWORD *)(a2 + 72);
  v39 = *(_QWORD *)(a2 + 80);
  v40 = *(_QWORD *)(a2 + 88);
  v41 = *(_QWORD *)(a2 + 96);
  v42 = *(_QWORD *)(a2 + 104);
  v11 = *(unsigned __int8 *)(a2 + 112);
  v31 = *(_QWORD *)(a2 + 120);
  v33 = *(_QWORD *)(a2 + 128);
  v29 = *(unsigned __int8 *)(a2 + 136);
  if (*(_QWORD *)a1 != *(_QWORD *)a2 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = 0;
    if ((v12 & 1) == 0)
      return result;
  }
  if (v4 != v8 || v3 != v10)
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = 0;
    if ((v14 & 1) == 0)
      return result;
  }
  if (v2)
  {
    if (!v9 || (specialized static Array<A>.== infix(_:_:)(v2, v9) & 1) == 0)
      return 0;
  }
  else
  {
    if (v9)
      return 0;
    swift_bridgeObjectRelease_n();
  }
  v15 = v43;
  if (v43 == 255)
  {
    v21 = v11;
    v22 = v11 == 255;
    v18 = v6;
    v17 = v7;
    v16 = v5;
    v24 = *(_QWORD *)v44;
    v23 = v45;
    v26 = v47;
    v25 = v48;
    v27 = v46;
    if (v22)
      goto LABEL_19;
LABEL_26:
    v49 = v23;
    v50 = v27;
    v51 = v26;
    v52 = v25;
    v53 = v24;
    v54 = v16;
    v55 = v17;
    v56 = v18;
    v57 = v15;
    v58 = v35;
    v59 = v36;
    v60 = v37;
    v61 = v38;
    v62 = v39;
    v63 = v40;
    v64 = v41;
    v65 = v42;
    v66 = v21;
    outlined copy of NodeDefinitionStore.TypeStorage?(v35, v36, v37, v38, v39, v40, v41, v42, v21);
    outlined release of (NodeDefinitionStore.TypeStorage, NodeDefinitionStore.TypeStorage)((uint64_t)&v49, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of NodeDefinitionStore.TypeStorage?);
    return 0;
  }
  v49 = v45;
  v50 = v46;
  v51 = v47;
  v52 = v48;
  v53 = *(_QWORD *)v44;
  v54 = v5;
  v16 = v5;
  v17 = v7;
  v55 = v7;
  v56 = v6;
  v18 = v6;
  v57 = v43;
  if (v11 == 255)
  {
    outlined copy of SGDataTypeStorage(v45, v46, v47, v48, v44[0], v5, v7, v6, v43);
    outlined copy of SGDataTypeStorage(v45, v46, v47, v48, v44[0], v5, v7, v6, v43);
    outlined consume of SGDataTypeStorage(v45, v46, v47, v48, v44[0], v5, v7, v6, v43);
    v21 = -1;
    v15 = v43;
    v23 = v45;
    v27 = v46;
    v26 = v47;
    v25 = v48;
    v24 = *(_QWORD *)v44;
    goto LABEL_26;
  }
  outlined copy of NodeDefinitionStore.TypeStorage?(v45, v46, v47, v48, v44[0], v5, v7, v6, v43);
  outlined copy of SGDataTypeStorage(v45, v46, v47, v48, v44[0], v5, v7, v6, v43);
  specialized static NodeDefinitionStore.TypeStorage.== infix(_:_:)((uint64_t)&v49);
  v20 = v19;
  outlined consume of SGDataTypeStorage(v49, v50, v51, v52, v53, v54, v55, v56, v57);
  outlined consume of NodeDefinitionStore.TypeStorage?(v45, v46, v47, v48, v44[0], v5, v7, v6, v43);
  if ((v20 & 1) == 0)
    return 0;
LABEL_19:
  if (!v34)
  {
    if (!v33)
      return v30 ^ v29 ^ 1u;
    return 0;
  }
  if (!v33)
    return 0;
  if (v32 == v31 && v34 == v33)
    return v30 ^ v29 ^ 1u;
  v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = 0;
  if ((v28 & 1) != 0)
    return v30 ^ v29 ^ 1u;
  return result;
}

BOOL specialized static NodeDefinitionStore.Node.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BOOL8 result;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v43 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v41 = *(_QWORD *)(a1 + 64);
  v45 = *(_QWORD *)(a1 + 72);
  v39 = *(unsigned __int8 *)(a1 + 80);
  v37 = *(_QWORD **)(a1 + 88);
  v33 = *(_QWORD *)(a1 + 96);
  v35 = *(_QWORD *)(a1 + 104);
  v31 = *(_QWORD *)(a1 + 112);
  v29 = *(_QWORD *)(a1 + 120);
  v27 = *(_QWORD *)(a1 + 128);
  v25 = *(_QWORD *)(a1 + 136);
  v21 = *(_QWORD *)(a1 + 144);
  v23 = *(_QWORD *)(a1 + 152);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 56);
  v42 = *(_QWORD *)(a2 + 48);
  v40 = *(_QWORD *)(a2 + 64);
  v44 = *(_QWORD *)(a2 + 72);
  v38 = *(unsigned __int8 *)(a2 + 80);
  v36 = *(_QWORD **)(a2 + 88);
  v32 = *(_QWORD *)(a2 + 96);
  v34 = *(_QWORD *)(a2 + 104);
  v30 = *(_QWORD *)(a2 + 112);
  v28 = *(_QWORD *)(a2 + 120);
  v26 = *(_QWORD *)(a2 + 128);
  v24 = *(_QWORD *)(a2 + 136);
  v20 = *(_QWORD *)(a2 + 144);
  v22 = *(_QWORD *)(a2 + 152);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v12 & 1) != 0))
  {
    if (v2 == v7 && v3 == v8 || (v14 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v14 & 1) != 0))
    {
      if (v5)
      {
        if (!v9)
          return 0;
        if (v4 != v10 || v5 != v9)
        {
          v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
          result = 0;
          if ((v15 & 1) == 0)
            return result;
        }
      }
      else if (v9)
      {
        return 0;
      }
      if (v6)
      {
        if (!v11)
          return 0;
        if (v43 != v42 || v6 != v11)
        {
          v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
          result = 0;
          if ((v16 & 1) == 0)
            return result;
        }
      }
      else if (v11)
      {
        return 0;
      }
      if (v45)
      {
        if (!v44)
          return 0;
        if (v41 != v40 || v45 != v44)
        {
          v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
          result = 0;
          if ((v17 & 1) == 0)
            return result;
        }
      }
      else if (v44)
      {
        return 0;
      }
      if (v39 == 2)
      {
        if (v38 != 2)
          return 0;
      }
      else
      {
        result = 0;
        if (v38 == 2 || ((((v39 & 1) == 0) ^ v38) & 1) == 0)
          return result;
      }
      if ((specialized static Array<A>.== infix(_:_:)(v37, v36) & 1) != 0)
      {
        if (v35)
        {
          if (!v34)
            return 0;
          if (v33 != v32 || v35 != v34)
          {
            v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
            result = 0;
            if ((v18 & 1) == 0)
              return result;
          }
        }
        else if (v34)
        {
          return 0;
        }
        if ((specialized static Array<A>.== infix(_:_:)(v31, v30) & 1) == 0
          || (specialized static Array<A>.== infix(_:_:)(v29, v28) & 1) == 0)
        {
          return 0;
        }
        if (v27 != v26 || v25 != v24)
        {
          v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          result = 0;
          if ((v19 & 1) == 0)
            return result;
        }
        if (v23)
          return v22 && (v21 == v20 && v23 == v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0);
        if (!v22)
          return 1;
      }
      return 0;
    }
  }
  return result;
}

uint64_t specialized static NodeDefinitionStore.GeomPropValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v9;
  char v10;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 16);
  if ((v4 & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 1) == 0)
    {
      specialized == infix<A>(_:_:)(*(_QWORD *)a1);
      v9 = v10;
      v4 = 0;
      v7 = 0;
      goto LABEL_14;
    }
LABEL_11:
    outlined copy of GeomPropDef.GeomProp(v5, v6, v7);
    v9 = 0;
    goto LABEL_14;
  }
  if ((*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    swift_bridgeObjectRetain();
    goto LABEL_11;
  }
  if (v2 == v5 && v3 == v6)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v4 = 1;
  outlined copy of GeomPropDef.GeomProp(v5, v6, 1);
  outlined copy of GeomPropDef.GeomProp(v2, v3, 1);
  v7 = 1;
LABEL_14:
  outlined consume of GeomPropDef.GeomProp(v2, v3, v4);
  outlined consume of GeomPropDef.GeomProp(v5, v6, v7);
  return v9 & 1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph7NodeDefV6IOSpecVG_AF0F15DefinitionStoreV5InputVs5NeverOTg504_s11d7Graph19fij10V0C0V7nodeg16AeA0cG0V_tcfcAC5k4VAH6H6VXEfU_AHTf1cn_nTf4ng_nTm(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(BOOL, uint64_t, uint64_t), const char *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[25];
  _QWORD v31[4];
  __int128 v32;
  uint64_t v33;
  char v34;
  _OWORD v35[7];
  _OWORD v36[3];
  uint64_t v37;

  v6 = v5;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = MEMORY[0x24BEE4AF8];
  if (v7)
  {
    v37 = MEMORY[0x24BEE4AF8];
    a4(0, v7, 0);
    v8 = v37;
    v11 = (uint64_t *)(a1 + 48);
    while (1)
    {
      v12 = *(v11 - 1);
      v14 = *v11;
      v13 = v11[1];
      v15 = v11[4];
      v16 = *((_BYTE *)v11 + 40);
      v31[0] = *(v11 - 2);
      v31[1] = v12;
      v31[2] = v14;
      v31[3] = v13;
      v32 = *((_OWORD *)v11 + 1);
      v33 = v15;
      v34 = v16;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      closure #1 in NodeDefinitionStore.Node.init(nodeDef:)((uint64_t)v31, a2, a5, (uint64_t)v35);
      if (v6)
        break;
      v6 = 0;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      v25 = v35[2];
      v26 = v35[3];
      *(_OWORD *)&v30[9] = *(_OWORD *)((char *)v36 + 9);
      v29 = v35[6];
      *(_OWORD *)v30 = v36[0];
      v27 = v35[4];
      v28 = v35[5];
      v23 = v35[0];
      v24 = v35[1];
      v18 = *(_QWORD *)(v8 + 16);
      v17 = *(_QWORD *)(v8 + 24);
      v37 = v8;
      if (v18 >= v17 >> 1)
      {
        a4(v17 > 1, v18 + 1, 1);
        v8 = v37;
      }
      v11 += 8;
      *(_QWORD *)(v8 + 16) = v18 + 1;
      v19 = (_OWORD *)(v8 + 144 * v18);
      v19[2] = v23;
      v19[5] = v26;
      v19[6] = v27;
      v19[3] = v24;
      v19[4] = v25;
      *(_OWORD *)((char *)v19 + 153) = *(_OWORD *)&v30[9];
      v19[8] = v29;
      v19[9] = *(_OWORD *)v30;
      v19[7] = v28;
      if (!--v7)
        return v8;
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v8;
}

__n128 *outlined init with take of GeomPropDef.GeomProp(__n128 *a1, __n128 *a2)
{
  __swift_memcpy17_8(a2, a1);
  return a2;
}

uint64_t outlined retain of GeomPropDef.GeomProp(uint64_t a1)
{
  outlined copy of GeomPropDef.GeomProp(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t outlined release of NodeDefinitionStore.Node(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

double _s11ShaderGraph19NodeDefinitionStoreV0C0VSgWOi0_(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

unint64_t lazy protocol witness table accessor for type NodeDefinitionStore.BuiltinGeomProp and conformance NodeDefinitionStore.BuiltinGeomProp()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NodeDefinitionStore.BuiltinGeomProp and conformance NodeDefinitionStore.BuiltinGeomProp;
  if (!lazy protocol witness table cache variable for type NodeDefinitionStore.BuiltinGeomProp and conformance NodeDefinitionStore.BuiltinGeomProp)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for NodeDefinitionStore.BuiltinGeomProp, &type metadata for NodeDefinitionStore.BuiltinGeomProp);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDefinitionStore.BuiltinGeomProp and conformance NodeDefinitionStore.BuiltinGeomProp);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NodeDefinitionStore.Space and conformance NodeDefinitionStore.Space()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NodeDefinitionStore.Space and conformance NodeDefinitionStore.Space;
  if (!lazy protocol witness table cache variable for type NodeDefinitionStore.Space and conformance NodeDefinitionStore.Space)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for NodeDefinitionStore.Space, &type metadata for NodeDefinitionStore.Space);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDefinitionStore.Space and conformance NodeDefinitionStore.Space);
  }
  return result;
}

uint64_t destroy for NodeDefinitionStore()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for NodeDefinitionStore(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for NodeDefinitionStore(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NodeDefinitionStore(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NodeDefinitionStore(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NodeDefinitionStore(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NodeDefinitionStore()
{
  return &type metadata for NodeDefinitionStore;
}

_QWORD *assignWithCopy for NodeDefinitionStore.MaterialXDataType(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for NodeDefinitionStore.MaterialXDataType(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NodeDefinitionStore.MaterialXDataType(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NodeDefinitionStore.MaterialXDataType(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NodeDefinitionStore.MaterialXDataType()
{
  return &type metadata for NodeDefinitionStore.MaterialXDataType;
}

ValueMetadata *type metadata accessor for NodeDefinitionStore.MaterialXDataType.Kind()
{
  return &type metadata for NodeDefinitionStore.MaterialXDataType.Kind;
}

uint64_t outlined destroy of NodeDefinitionStore.TypeStorage(uint64_t a1)
{
  destroy for SGDataTypeStorage(a1);
  return a1;
}

__n128 __swift_memcpy137_16(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

ValueMetadata *type metadata accessor for NodeDefinitionStore.Output()
{
  return &type metadata for NodeDefinitionStore.Output;
}

uint64_t destroy for NodeDefinitionStore.Output(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(unsigned __int8 *)(a1 + 112) != 255)
    outlined consume of SGDataTypeStorage(*(void **)(a1 + 48), *(id *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_BYTE *)(a1 + 112));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NodeDefinitionStore.Output(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v18;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(unsigned __int8 *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 == 255)
  {
    v14 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v14;
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    v15 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v15;
  }
  else
  {
    v7 = *(void **)(a2 + 48);
    v8 = *(void **)(a2 + 56);
    v9 = *(_QWORD *)(a2 + 72);
    v18 = *(_QWORD *)(a2 + 64);
    v10 = *(_QWORD *)(a2 + 80);
    v11 = *(_QWORD *)(a2 + 88);
    v12 = *(_QWORD *)(a2 + 96);
    v13 = *(_QWORD *)(a2 + 104);
    outlined copy of SGDataTypeStorage(v7, v8, v18, v9, v10, v11, v12, v13, v6);
    *(_QWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = v18;
    *(_QWORD *)(a1 + 72) = v9;
    *(_QWORD *)(a1 + 80) = v10;
    *(_QWORD *)(a1 + 88) = v11;
    *(_QWORD *)(a1 + 96) = v12;
    *(_QWORD *)(a1 + 104) = v13;
    *(_BYTE *)(a1 + 112) = v6;
  }
  v16 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v16;
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NodeDefinitionStore.Output(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  void *v37;
  void *v38;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 48);
  v5 = (_OWORD *)(a2 + 48);
  v6 = *(unsigned __int8 *)(a2 + 112);
  if (*(unsigned __int8 *)(a1 + 112) == 255)
  {
    if (v6 == 255)
    {
      *v4 = *v5;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_OWORD *)(a2 + 80);
      v35 = *(_OWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      *(_OWORD *)(a1 + 80) = v34;
      *(_OWORD *)(a1 + 96) = v35;
      *(_OWORD *)(a1 + 64) = v33;
    }
    else
    {
      v23 = *(void **)(a2 + 48);
      v38 = *(void **)(a2 + 56);
      v24 = *(_QWORD *)(a2 + 64);
      v25 = *(_QWORD *)(a2 + 72);
      v26 = *(_QWORD *)(a2 + 80);
      v27 = *(_QWORD *)(a2 + 88);
      v28 = *(_QWORD *)(a2 + 96);
      v29 = *(_QWORD *)(a2 + 104);
      outlined copy of SGDataTypeStorage(v23, v38, v24, v25, v26, v27, v28, v29, v6);
      *(_QWORD *)(a1 + 48) = v23;
      *(_QWORD *)(a1 + 56) = v38;
      *(_QWORD *)(a1 + 64) = v24;
      *(_QWORD *)(a1 + 72) = v25;
      *(_QWORD *)(a1 + 80) = v26;
      *(_QWORD *)(a1 + 88) = v27;
      *(_QWORD *)(a1 + 96) = v28;
      *(_QWORD *)(a1 + 104) = v29;
      *(_BYTE *)(a1 + 112) = v6;
    }
  }
  else if (v6 == 255)
  {
    outlined destroy of NodeDefinitionStore.TypeStorage(a1 + 48);
    *v4 = *v5;
    v31 = *(_OWORD *)(a2 + 80);
    v30 = *(_OWORD *)(a2 + 96);
    v32 = *(_OWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    *(_OWORD *)(a1 + 80) = v31;
    *(_OWORD *)(a1 + 96) = v30;
    *(_OWORD *)(a1 + 64) = v32;
  }
  else
  {
    v7 = *(void **)(a2 + 48);
    v37 = *(void **)(a2 + 56);
    v8 = *(_QWORD *)(a2 + 64);
    v9 = *(_QWORD *)(a2 + 72);
    v10 = *(_QWORD *)(a2 + 80);
    v11 = *(_QWORD *)(a2 + 88);
    v12 = *(_QWORD *)(a2 + 96);
    v13 = *(_QWORD *)(a2 + 104);
    outlined copy of SGDataTypeStorage(v7, v37, v8, v9, v10, v11, v12, v13, v6);
    v14 = *(void **)(a1 + 48);
    v15 = *(void **)(a1 + 56);
    v16 = *(_QWORD *)(a1 + 64);
    v17 = *(_QWORD *)(a1 + 72);
    v18 = *(_QWORD *)(a1 + 80);
    v19 = *(_QWORD *)(a1 + 88);
    v20 = *(_QWORD *)(a1 + 96);
    v21 = *(_QWORD *)(a1 + 104);
    v22 = *(_BYTE *)(a1 + 112);
    *(_QWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a1 + 56) = v37;
    *(_QWORD *)(a1 + 64) = v8;
    *(_QWORD *)(a1 + 72) = v9;
    *(_QWORD *)(a1 + 80) = v10;
    *(_QWORD *)(a1 + 88) = v11;
    *(_QWORD *)(a1 + 96) = v12;
    *(_QWORD *)(a1 + 104) = v13;
    *(_BYTE *)(a1 + 112) = v6;
    outlined consume of SGDataTypeStorage(v14, v15, v16, v17, v18, v19, v20, v21, v22);
  }
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  return a1;
}

uint64_t assignWithTake for NodeDefinitionStore.Output(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  v6 = *(unsigned __int8 *)(a1 + 112);
  if (v6 == 255)
    goto LABEL_5;
  v7 = *(unsigned __int8 *)(a2 + 112);
  if (v7 == 255)
  {
    outlined destroy of NodeDefinitionStore.TypeStorage(a1 + 48);
LABEL_5:
    v18 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v18;
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    v19 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v19;
    goto LABEL_6;
  }
  v8 = *(void **)(a1 + 48);
  v9 = *(void **)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 88);
  v14 = *(_QWORD *)(a1 + 96);
  v15 = *(_QWORD *)(a1 + 104);
  v16 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v16;
  v17 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v17;
  *(_BYTE *)(a1 + 112) = v7;
  outlined consume of SGDataTypeStorage(v8, v9, v10, v11, v12, v13, v14, v15, v6);
LABEL_6:
  v20 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v20;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  return a1;
}

uint64_t getEnumTagSinglePayload for NodeDefinitionStore.Output(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 137))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NodeDefinitionStore.Output(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 136) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 137) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 137) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NodeDefinitionStore.Input()
{
  return &type metadata for NodeDefinitionStore.Input;
}

uint64_t destroy for NodeDefinitionStore.Node()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NodeDefinitionStore.Node(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  v9 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v9;
  v10 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v10;
  v11 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v11;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NodeDefinitionStore.Node(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy160_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for NodeDefinitionStore.Node(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NodeDefinitionStore.Node(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 160))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NodeDefinitionStore.Node(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 160) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NodeDefinitionStore.Node()
{
  return &type metadata for NodeDefinitionStore.Node;
}

ValueMetadata *type metadata accessor for NodeDefinitionStore.GeomPropValue()
{
  return &type metadata for NodeDefinitionStore.GeomPropValue;
}

uint64_t storeEnumTagSinglePayload for NodeDefinitionStore.BuiltinGeomProp(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_245F92820 + 4 * byte_245FC509F[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_245F92854 + 4 * byte_245FC509A[v4]))();
}

uint64_t sub_245F92854(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_245F9285C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x245F92864);
  return result;
}

uint64_t sub_245F92870(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x245F92878);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_245F9287C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_245F92884(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NodeDefinitionStore.BuiltinGeomProp()
{
  return &type metadata for NodeDefinitionStore.BuiltinGeomProp;
}

uint64_t storeEnumTagSinglePayload for NodeDefinitionStore.Space(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_245F928EC + 4 * byte_245FC50A9[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_245F92920 + 4 * byte_245FC50A4[v4]))();
}

uint64_t sub_245F92920(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_245F92928(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x245F92930);
  return result;
}

uint64_t sub_245F9293C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x245F92944);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_245F92948(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_245F92950(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NodeDefinitionStore.Space()
{
  return &type metadata for NodeDefinitionStore.Space;
}

uint64_t destroy for NodeDefinitionStore.GeomProp(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return outlined consume of GeomPropDef.GeomProp(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
}

uint64_t initializeWithCopy for NodeDefinitionStore.GeomProp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of GeomPropDef.GeomProp(v6, v7, v8);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = v8;
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

uint64_t assignWithCopy for NodeDefinitionStore.GeomProp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_BYTE *)(a2 + 56);
  outlined copy of GeomPropDef.GeomProp(v4, v5, v6);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = v6;
  outlined consume of GeomPropDef.GeomProp(v7, v8, v9);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

__n128 __swift_memcpy58_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for NodeDefinitionStore.GeomProp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_BYTE *)(a2 + 56);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_BYTE *)(a1 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = v5;
  outlined consume of GeomPropDef.GeomProp(v6, v7, v8);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

uint64_t getEnumTagSinglePayload for NodeDefinitionStore.GeomProp(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 58))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NodeDefinitionStore.GeomProp(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 58) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 58) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NodeDefinitionStore.GeomProp()
{
  return &type metadata for NodeDefinitionStore.GeomProp;
}

ValueMetadata *type metadata accessor for NodeDefinitionStore.TypeStorage()
{
  return &type metadata for NodeDefinitionStore.TypeStorage;
}

uint64_t storeEnumTagSinglePayload for NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_245F92C90 + 4 * byte_245FC50B3[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_245F92CC4 + 4 * byte_245FC50AE[v4]))();
}

uint64_t sub_245F92CC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_245F92CCC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x245F92CD4);
  return result;
}

uint64_t sub_245F92CE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x245F92CE8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_245F92CEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_245F92CF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys()
{
  return &unk_251713768;
}

void *type metadata accessor for NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys()
{
  return &unk_251713788;
}

uint64_t storeEnumTagSinglePayload for NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_245F92D60 + 4 * byte_245FC50B8[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_245F92D80 + 4 * byte_245FC50BD[v4]))();
}

_BYTE *sub_245F92D60(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_245F92D80(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_245F92D88(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_245F92D90(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_245F92D98(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_245F92DA0(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys()
{
  return &unk_251713818;
}

uint64_t outlined release of (NodeDefinitionStore.TypeStorage, NodeDefinitionStore.TypeStorage)(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 88);
  v15 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 128);
  v10 = *(_QWORD *)(a1 + 136);
  v11 = *(_BYTE *)(a1 + 144);
  v13 = *(_BYTE *)(a1 + 64);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v13);
  LOBYTE(v14) = v11;
  a2(v15, v4, v5, v6, v7, v8, v9, v10, v14);
  return a1;
}

void outlined consume of NodeDefinitionStore.TypeStorage?(void *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int8 a9)
{
  if (a9 != 255)
    outlined consume of SGDataTypeStorage(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t Graph.insertMaterialXDefaultValue(_:ofType:toFeedInput:)(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t inited;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15[10];
  unint64_t v16[6];
  _BYTE v17[8];
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;

  v6 = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  result = specialized SGDataTypeStorage.init(materialXValue:type:)(a1, a2, a3, v15);
  if (!v5)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_245FBECD0;
    *(_QWORD *)(inited + 32) = 7632239;
    *(_QWORD *)(inited + 40) = 0xE300000000000000;
    *(_QWORD *)(inited + 48) = a3;
    v13 = swift_allocObject();
    outlined init with take of SGDataTypeStorage((uint64_t)v15, v13 + 16);
    *(_QWORD *)(v13 + 88) = a3;
    v14 = *(_QWORD *)(v6 + 40);
    swift_retain_n();
    outlined retain of SGDataTypeStorage((uint64_t)v15, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of SGDataTypeStorage);
    specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v14, MEMORY[0x24BEE4AF8], inited, v13, v6 + 64, v6, v16);
    swift_release();
    swift_setDeallocating();
    swift_arrayDestroy();
    ShaderGraphNode.out.getter((uint64_t)v17);
    Graph.connect(_:to:)((uint64_t)v17, a4);
    swift_release();
    v22 = v18;
    outlined release of String((uint64_t)&v22);
    outlined init with take of NodePersonality(v16, &v21);
    outlined release of NodePersonality(&v21);
    v20 = v16[1];
    outlined release of [Input]((uint64_t)&v20);
    v19 = v16[2];
    outlined release of [Input]((uint64_t)&v19);
    return outlined retain of SGDataTypeStorage((uint64_t)v15, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of SGDataTypeStorage);
  }
  return result;
}

uint64_t Graph.insertMaterialXDefaultGeomProp(_:ofType:toFeedInput:fromNodeDefStore:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized Graph.insertMaterialXDefaultGeomProp(_:ofType:toFeedInput:fromNodeDefStore:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_245F932F0()
{
  uint64_t v0;

  outlined consume of SGDataTypeStorage(*(void **)(v0 + 16), *(id *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80));
  swift_release();
  return swift_deallocObject();
}

uint64_t specialized Graph.insertMaterialXDefaultGeomProp(_:ofType:toFeedInput:fromNodeDefStore:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v13;
  char v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[12];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _BYTE v38[8];
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  _OWORD v44[2];
  _BYTE v45[25];

  if (!*(_QWORD *)(a6 + 16))
    goto LABEL_6;
  swift_bridgeObjectRetain();
  v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    v19 = *(_QWORD *)(a4 + 24);
    *(_QWORD *)&v31 = *(_QWORD *)(a4 + 16);
    *((_QWORD *)&v31 + 1) = v19;
    v32 = a1;
    v33 = a2;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi12_((uint64_t)&v31);
    outlined init with take of UserGraphError.ErrorType(&v31, (uint64_t)v34);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v35 = 0uLL;
    swift_allocError();
    *v20 = v34[0];
    v21 = v34[4];
    v23 = v34[1];
    v22 = v34[2];
    v20[3] = v34[3];
    v20[4] = v21;
    v20[1] = v23;
    v20[2] = v22;
    v24 = v34[8];
    v26 = v34[5];
    v25 = v34[6];
    v20[7] = v34[7];
    v20[8] = v24;
    v20[5] = v26;
    v20[6] = v25;
    v27 = v35;
    v29 = v34[9];
    v28 = v34[10];
    v20[11] = v34[11];
    v20[12] = v27;
    v20[9] = v29;
    v20[10] = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  v15 = (__int128 *)(*(_QWORD *)(a6 + 56) + (v13 << 6));
  v17 = v15[1];
  v16 = v15[2];
  v18 = *v15;
  *(_OWORD *)&v45[9] = *(__int128 *)((char *)v15 + 41);
  v44[1] = v17;
  *(_OWORD *)v45 = v16;
  v44[0] = v18;
  outlined retain of GeomPropDef((uint64_t)v44);
  swift_bridgeObjectRelease();
  specialized Graph.insertGeomPropGetter(_:outputType:nodeDefStore:)((uint64_t)v44, a3, a5, &v36);
  if (!v6)
  {
    ShaderGraphNode.out.getter((uint64_t)v38);
    Graph.connect(_:to:)((uint64_t)v38, a4);
    swift_release();
    v43 = v39;
    outlined release of String((uint64_t)&v43);
    outlined init with take of NodePersonality(&v36, &v42);
    outlined release of NodePersonality(&v42);
    v41 = *((_QWORD *)&v36 + 1);
    outlined release of [Input]((uint64_t)&v41);
    v40 = v37;
    outlined release of [Input]((uint64_t)&v40);
  }
  return outlined release of GeomPropDef((uint64_t)v44);
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi12_(uint64_t result)
{
  *(_QWORD *)(result + 168) = *(_QWORD *)(result + 168) & 1 | 0x3400000000000000;
  return result;
}

uint64_t OrderedSet.union(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = specialized OrderedSet.union(_:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  return v6;
}

{
  uint64_t v6;

  v6 = specialized OrderedSet.union(_:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  return v6;
}

uint64_t OrderedSet.formUnion(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return OrderedSet.formUnion(_:)(a1, a2, a3, (void (*)(void))specialized OrderedSet.formUnion(_:));
}

{
  _QWORD v5[2];

  v5[0] = a1;
  v5[1] = a2;
  MEMORY[0x24954C264](&protocol conformance descriptor for OrderedSet<A>, a3);
  OrderedSet.append<A>(contentsOf:)((uint64_t)v5, a3, a3);
  swift_release();
  return swift_release();
}

uint64_t OrderedSet.formUnion<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OrderedSet.formUnion<A>(_:)(a1, a2, a3, a4, (void (*)(void))specialized OrderedSet.formUnion<A>(_:));
}

uint64_t OrderedSet.union<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;

  v8 = specialized OrderedSet.union<A>(_:)(a1, a2, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a1, a5);
  return v8;
}

uint64_t OrderedSet.intersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = specialized OrderedSet.intersection(_:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  return v6;
}

{
  uint64_t v6;

  v6 = specialized OrderedSet.intersection(_:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  return v6;
}

uint64_t OrderedSet.formIntersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = specialized OrderedSet.intersection(_:)(a1, a2, *v3, v3[1], *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
  v6 = v5;
  swift_release();
  result = swift_release();
  *v3 = v4;
  v3[1] = v6;
  return result;
}

uint64_t OrderedSet.intersection<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = specialized OrderedSet.intersection<A>(_:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  return v6;
}

uint64_t OrderedSet.formIntersection<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = specialized OrderedSet.intersection<A>(_:)(a1, *v3, v3[1], *(_QWORD *)(a2 + 16), a3, *(_QWORD *)(a2 + 24));
  v6 = v5;
  swift_release();
  result = swift_release();
  *v3 = v4;
  v3[1] = v6;
  return result;
}

uint64_t OrderedSet.symmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = specialized OrderedSet.symmetricDifference(_:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v6;
}

{
  uint64_t v6;

  v6 = specialized OrderedSet.symmetricDifference(_:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v6;
}

uint64_t OrderedSet.formSymmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return OrderedSet.formUnion(_:)(a1, a2, a3, (void (*)(void))specialized OrderedSet.formSymmetricDifference(_:));
}

{
  specialized OrderedSet.formSymmetricDifference(_:)(a1, a2, a3);
  swift_release();
  return swift_release();
}

uint64_t OrderedSet.formUnion(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  swift_release();
  return swift_release();
}

uint64_t OrderedSet.symmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;

  v8 = specialized OrderedSet.symmetricDifference<A>(_:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a1, a5);
  return v8;
}

uint64_t OrderedSet.formSymmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OrderedSet.formUnion<A>(_:)(a1, a2, a3, a4, (void (*)(void))specialized OrderedSet.formSymmetricDifference<A>(_:));
}

uint64_t OrderedSet.formUnion<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  a5();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
}

uint64_t OrderedSet.subtracting(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  _QWORD v12[2];

  v12[0] = a1;
  v12[1] = a2;
  v10 = type metadata accessor for OrderedSet(0, a5, a6, a4);
  MEMORY[0x24954C264](&protocol conformance descriptor for OrderedSet<A>, v10);
  return OrderedSet._subtracting<A>(_:)((uint64_t)v12, a3, a4, a5, v10, a6);
}

{
  uint64_t v10;
  _QWORD v12[2];

  v12[0] = a1;
  v12[1] = a2;
  v10 = type metadata accessor for OrderedSet(0, a5, a6, a4);
  MEMORY[0x24954C264](&protocol conformance descriptor for OrderedSet<A>, v10);
  return OrderedSet._subtracting<A>(_:)((uint64_t)v12, a3, a4, a5, v10, a6);
}

uint64_t OrderedSet.subtract(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _QWORD v11[2];

  v5 = *v3;
  v6 = v3[1];
  v11[0] = a1;
  v11[1] = a2;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(a3 + 24);
  MEMORY[0x24954C264](&protocol conformance descriptor for OrderedSet<A>, a3);
  result = OrderedSet._subtracting<A>(_:)((uint64_t)v11, v5, v6, v7, a3, v8);
  *v3 = result;
  v3[1] = v10;
  return result;
}

{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _QWORD v11[2];

  v5 = *v3;
  v6 = v3[1];
  v11[0] = a1;
  v11[1] = a2;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(a3 + 24);
  MEMORY[0x24954C264](&protocol conformance descriptor for OrderedSet<A>, a3);
  result = OrderedSet._subtracting<A>(_:)((uint64_t)v11, v5, v6, v7, a3, v8);
  *v3 = result;
  v3[1] = v10;
  return result;
}

uint64_t OrderedSet.subtract<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;

  result = OrderedSet._subtracting<A>(_:)(a1, *v3, v3[1], *(_QWORD *)(a2 + 16), a3, *(_QWORD *)(a2 + 24));
  *v3 = result;
  v3[1] = v5;
  return result;
}

Swift::Int closure #1 in OrderedSet.intersection<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, Swift::Int *a8@<X8>)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int result;
  Swift::Int *v31;
  Swift::Int v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  Swift::Int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(char *, char *, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;

  v55 = a3;
  v56 = a7;
  v53 = a2;
  v54 = a4;
  v48 = a8;
  v49 = *(_QWORD *)(a5 - 8);
  v50 = a1;
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Optional();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v46 - v14;
  v16 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v47 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v21 = (char *)&v46 - v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v53, a6);
  dispatch thunk of Sequence.makeIterator()();
  v22 = v49;
  swift_getAssociatedConformanceWitness();
  v52 = v21;
  v53 = AssociatedTypeWitness;
  dispatch thunk of IteratorProtocol.next()();
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  if (v23(v15, 1, a5) == 1)
  {
LABEL_2:
    (*(void (**)(char *, uint64_t))(v47 + 8))(v52, v53);
    v24 = *(uint64_t **)v50;
    v25 = *(_QWORD *)(v50 + 8);
    v26 = *(_QWORD *)(v50 + 16);
    v27 = specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)();
    v28 = v55;
    swift_retain();
    v29 = v54;
    swift_retain();
    result = OrderedSet._extractSubset(using:extraCapacity:)(v24, v25, v26, v27, v28, v29, a5, v56);
    v31 = v48;
    *v48 = result;
    v31[1] = v32;
    return result;
  }
  v51 = *(uint64_t (**)(char *, char *, uint64_t))(v22 + 32);
  v33 = v54;
  while (1)
  {
    v34 = v15;
    v35 = v51(v11, v15, a5);
    MEMORY[0x24BDAC7A8](v35);
    v36 = v56;
    *(&v46 - 6) = a5;
    *(&v46 - 5) = v36;
    *(&v46 - 4) = v55;
    *(&v46 - 3) = v33;
    v38 = v37;
    *(&v46 - 2) = (uint64_t)v37;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (index: Int?, bucket: _HashTable.Bucket));
    v39 = v59;
    result = ContiguousArray.withUnsafeBufferPointer<A>(_:)();
    if ((v58 & 1) != 0)
      goto LABEL_4;
    v40 = (v57 >> 3) & 0x1FFFFFFFFFFFFFF8;
    v41 = 1 << v57;
    v42 = *(_QWORD *)(*(_QWORD *)v50 + v40);
    *(_QWORD *)(*(_QWORD *)v50 + v40) = v42 | (1 << v57);
    if ((v42 & v41) != 0)
      goto LABEL_4;
    v43 = *(_QWORD *)(v50 + 16);
    v44 = __OFADD__(v43, 1);
    v45 = v43 + 1;
    if (v44)
      break;
    *(_QWORD *)(v50 + 16) = v45;
LABEL_4:
    v59 = v39;
    v11 = v38;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v38, a5);
    v15 = v34;
    dispatch thunk of IteratorProtocol.next()();
    if (v23(v34, 1, a5) == 1)
      goto LABEL_2;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in OrderedSet.symmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v9 = ContiguousArray.count.getter();
  type metadata accessor for OrderedSet(0, a6, a7, v10);
  specialized static _UnsafeBitset._withTemporaryBitset(capacity:run:)(v9, (uint64_t (*)(_QWORD **))closure #1 in static _UnsafeBitset.withTemporaryBitset<A>(capacity:run:)partial apply);
  if (!v12)
    __break(1u);
  result = outlined consume of OrderedSet<Input>?(0, 0);
  __break(1u);
  return result;
}

unint64_t closure #1 in closure #1 in OrderedSet.symmetricDifference(_:)@<X0>(uint64_t **a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, unint64_t *a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  BOOL v36;
  uint64_t *v37;
  Swift::Int v38;
  uint64_t **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t result;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  Swift::Int v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD v67[2];
  uint64_t **v68;
  unint64_t *v69;
  char *v70;
  uint64_t **v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;

  v68 = a1;
  v77 = a7;
  v73 = a3;
  v74 = a5;
  v12 = *(_QWORD *)(a6 - 8);
  v13 = MEMORY[0x24BDAC7A8](a1);
  v70 = (char *)v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v67 - v16;
  v18 = MEMORY[0x24BDAC7A8](v15);
  v72 = (char *)v67 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)v67 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)v67 - v23;
  v26 = v25;
  v27 = ContiguousArray.count.getter();
  v71 = a2;
  _UnsafeBitset.insertAll(upTo:)(v27);
  v28 = a8;
  v29 = *(_QWORD *)(v74 + 16);
  v69 = v28;
  if (!v29)
    goto LABEL_10;
  v67[1] = a4;
  swift_retain();
  swift_retain();
  v30 = 0;
  while (1)
  {
    ContiguousArray.subscript.getter();
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v22, v24, a6);
    v31 = OrderedSet._find(_:)();
    if ((v32 & 1) != 0)
      goto LABEL_3;
    v33 = (v31 >> 3) & 0x1FFFFFFFFFFFFFF8;
    v34 = *(uint64_t *)((char *)*v71 + v33);
    *(uint64_t *)((char *)*v71 + v33) = v34 & ~(1 << v31);
    if ((v34 & (1 << v31)) == 0)
      goto LABEL_3;
    v35 = v71[2];
    v36 = __OFSUB__(v35, 1);
    v37 = (uint64_t *)((char *)v35 - 1);
    if (v36)
      break;
    v71[2] = v37;
LABEL_3:
    ++v30;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v22, a6);
    if (v29 == v30)
      goto LABEL_9;
  }
  __break(1u);
LABEL_9:
  swift_release();
  swift_release();
LABEL_10:
  v38 = ContiguousArray.count.getter();
  v39 = v68;
  _UnsafeBitset.insertAll(upTo:)(v38);
  v40 = v26;
  v41 = *(_QWORD *)(v26 + 16);
  v42 = v73;
  if (v41)
  {
    swift_retain();
    swift_retain();
    v43 = 0;
    v44 = v72;
    do
    {
      ContiguousArray.subscript.getter();
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v44, a6);
      result = OrderedSet._find(_:)();
      if ((v46 & 1) == 0)
      {
        v47 = (result >> 3) & 0x1FFFFFFFFFFFFFF8;
        v48 = *(uint64_t *)((char *)*v39 + v47);
        *(uint64_t *)((char *)*v39 + v47) = v48 & ~(1 << result);
        if ((v48 & (1 << result)) != 0)
        {
          v49 = v39[2];
          v36 = __OFSUB__(v49, 1);
          v50 = (uint64_t *)((char *)v49 - 1);
          if (v36)
            goto LABEL_35;
          v39[2] = v50;
        }
      }
      ++v43;
      (*(void (**)(char *, uint64_t))(v12 + 8))(v17, a6);
    }
    while (v41 != v43);
    v40 = v26;
    swift_release();
    v42 = v73;
    swift_release();
  }
  v52 = *v71;
  v51 = (uint64_t)v71[1];
  v53 = (uint64_t)v71[2];
  v54 = (Swift::Int)v39[2];
  swift_retain();
  swift_retain();
  result = OrderedSet._extractSubset(using:extraCapacity:)(v52, v51, v53, v54, v42, v40, a6, v77);
  v75 = result;
  v76 = v55;
  v56 = *v39;
  v57 = (uint64_t)v39[1];
  if (v57 < 1)
    v58 = 0;
  else
    v58 = *v56;
  v59 = 0;
  v60 = (uint64_t)v70;
  while (2)
  {
    if (v58)
    {
      v58 &= v58 - 1;
LABEL_23:
      ContiguousArray.subscript.getter();
      v62 = type metadata accessor for OrderedSet(0, a6, v77, v61);
      OrderedSet._appendNew(_:)(v60, v62);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v60, a6);
      continue;
    }
    break;
  }
  v63 = v59 + 1;
  if (__OFADD__(v59, 1))
    goto LABEL_36;
  v64 = v69;
  if (v63 >= v57)
  {
LABEL_33:
    v66 = v76;
    *v69 = v75;
    v64[1] = v66;
    return result;
  }
  v65 = v56[v63];
  if (v65)
  {
    ++v59;
LABEL_32:
    v58 = (v65 - 1) & v65;
    goto LABEL_23;
  }
  while (1)
  {
    v59 = v63 + 1;
    if (__OFADD__(v63, 1))
      break;
    if (v59 >= v57)
      goto LABEL_33;
    v65 = v56[v59];
    ++v63;
    if (v65)
      goto LABEL_32;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

unint64_t closure #1 in OrderedSet.symmetricDifference<A>(_:)@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, Swift::Int *a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  Swift::Int v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::Int v34;
  uint64_t v35;
  Swift::Int v36;
  Swift::Int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t result;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  Swift::Int v44;
  Swift::Int v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  BOOL v53;
  uint64_t *v54;
  Swift::Int *v55;
  Swift::Int *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t **v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *AssociatedTypeWitness;
  Swift::Int v65;
  Swift::Int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v56 = a9;
  v58 = a8;
  v61 = (char *)a4;
  v62 = a2;
  v69 = a3;
  v60 = a1;
  v12 = *(_QWORD *)(a5 - 8);
  v13 = MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v56 - v16;
  v18 = type metadata accessor for Optional();
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v56 - v20;
  v59 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = (uint64_t *)swift_getAssociatedTypeWitness();
  v57 = *(AssociatedTypeWitness - 1);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v25 = (char *)&v56 - v24;
  v63 = a7;
  v67 = OrderedSet.init()();
  v68 = v26;
  v27 = ContiguousArray.count.getter();
  _UnsafeBitset.insertAll(upTo:)(v27);
  (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v23, v61, a6);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  v61 = v25;
  dispatch thunk of IteratorProtocol.next()();
  v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v28(v21, 1, a5) != 1)
  {
    v46 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v46(v15, v21, a5);
    while (1)
    {
      v47 = v63;
      result = OrderedSet._find(_:)();
      if ((v49 & 1) != 0)
      {
        type metadata accessor for OrderedSet(0, a5, v47, v48);
        OrderedSet._append(_:)((uint64_t)v15);
      }
      else
      {
        v50 = (result >> 3) & 0x1FFFFFFFFFFFFFF8;
        v51 = *(uint64_t *)((char *)*v60 + v50);
        *(uint64_t *)((char *)*v60 + v50) = v51 & ~(1 << result);
        if ((v51 & (1 << result)) != 0)
        {
          v52 = v60[2];
          v53 = __OFSUB__(v52, 1);
          v54 = (uint64_t *)((char *)v52 - 1);
          if (v53)
            goto LABEL_18;
          v60[2] = v54;
        }
      }
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, a5);
      dispatch thunk of IteratorProtocol.next()();
      if (v28(v21, 1, a5) == 1)
        break;
      v46(v15, v21, a5);
    }
  }
  (*(void (**)(char *, uint64_t *))(v57 + 8))(v61, AssociatedTypeWitness);
  v29 = (uint64_t)v60[1];
  AssociatedTypeWitness = *v60;
  v61 = (char *)v60[2];
  v30 = v68;
  swift_retain();
  swift_retain();
  v31 = v62;
  swift_retain();
  v32 = v69;
  swift_retain();
  v33 = ContiguousArray.count.getter();
  swift_release();
  swift_release();
  v34 = v33;
  v35 = v63;
  v36 = OrderedSet._extractSubset(using:extraCapacity:)(AssociatedTypeWitness, v29, (uint64_t)v61, v34, v31, v32, a5, v63);
  v65 = v36;
  v66 = v37;
  v38 = *(_QWORD *)(v30 + 16);
  if (v38)
  {
    v39 = v30 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    result = swift_retain();
    v41 = 0;
    while (v41 < *(_QWORD *)(v30 + 16))
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v17, v39 + *(_QWORD *)(v12 + 72) * v41++, a5);
      v43 = type metadata accessor for OrderedSet(0, a5, v35, v42);
      OrderedSet._appendNew(_:)((uint64_t)v17, v43);
      result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v17, a5);
      if (v38 == v41)
      {
        swift_release();
        v44 = v65;
        v45 = v66;
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
  }
  else
  {
    v44 = v36;
    v45 = v37;
LABEL_16:
    swift_release();
    result = swift_release();
    v55 = v56;
    *v56 = v44;
    v55[1] = v45;
  }
  return result;
}

uint64_t OrderedSet._subtracting<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (ContiguousArray.count.getter() < 1)
  {
    v11 = OrderedSet.init()();
    goto LABEL_5;
  }
  v8 = ContiguousArray.count.getter();
  v13 = (uint64_t)&v13;
  v9 = MEMORY[0x24BDAC7A8](v8);
  v14 = 0;
  v15 = 0;
  MEMORY[0x24BDAC7A8](v9);
  type metadata accessor for OrderedSet(0, a4, a6, v10);
  specialized static _UnsafeBitset._withTemporaryBitset(capacity:run:)(v8, (uint64_t (*)(_QWORD **))partial apply for closure #1 in static _UnsafeBitset.withTemporaryBitset<A>(capacity:run:));
  if (v15)
  {
    v11 = v14;
LABEL_5:
    swift_release();
    swift_release();
    return v11;
  }
  __break(1u);
  result = outlined consume of OrderedSet<Input>?(v14, v15);
  __break(1u);
  return result;
}

unint64_t closure #1 in OrderedSet._subtracting<A>(_:)@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t AssociatedTypeWitness;
  uint64_t v22;
  char *v23;
  Swift::Int v24;
  char *v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  void (*v39)(char *, char *, uint64_t);
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  BOOL v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t **v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v50 = a8;
  v56 = a7;
  v53 = a4;
  v54 = a2;
  v49 = a9;
  v51 = *(_QWORD *)(a5 - 8);
  v52 = a1;
  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Optional();
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v47 - v16;
  v18 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v48 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v23 = (char *)&v47 - v22;
  v55 = a3;
  v24 = ContiguousArray.count.getter();
  _UnsafeBitset.insertAll(upTo:)(v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v53, a6);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  v25 = v23;
  v53 = AssociatedTypeWitness;
  dispatch thunk of IteratorProtocol.next()();
  v26 = v51;
  v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
  if (v27(v17, 1, a5) != 1)
  {
    v39 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    v39(v13, v17, a5);
    while (1)
    {
      result = OrderedSet._find(_:)();
      if ((v40 & 1) == 0)
      {
        v41 = (result >> 3) & 0x1FFFFFFFFFFFFFF8;
        v42 = *(uint64_t *)((char *)*v52 + v41);
        *(uint64_t *)((char *)*v52 + v41) = v42 & ~(1 << result);
        if ((v42 & (1 << result)) != 0)
        {
          v43 = v52[2];
          v44 = __OFSUB__(v43, 1);
          v45 = (uint64_t *)((char *)v43 - 1);
          if (v44)
          {
            __break(1u);
            return result;
          }
          v52[2] = v45;
          if (!v45)
          {
            v35 = OrderedSet.init()();
            v37 = v46;
            (*(void (**)(char *, uint64_t))(v26 + 8))(v13, a5);
            result = (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v25, v53);
            goto LABEL_3;
          }
        }
      }
      (*(void (**)(char *, uint64_t))(v26 + 8))(v13, a5);
      dispatch thunk of IteratorProtocol.next()();
      if (v27(v17, 1, a5) == 1)
        break;
      v39(v13, v17, a5);
    }
  }
  (*(void (**)(char *, uint64_t))(v48 + 8))(v25, v53);
  v28 = *v52;
  v29 = (uint64_t)v52[1];
  v30 = (uint64_t)v52[2];
  v31 = specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)();
  v32 = v54;
  swift_retain();
  v33 = v55;
  swift_retain();
  result = OrderedSet._extractSubset(using:extraCapacity:)(v28, v29, v30, v31, v32, v33, a5, v56);
  v35 = result;
  v37 = v36;
LABEL_3:
  v38 = v49;
  *v49 = v35;
  v38[1] = v37;
  return result;
}

uint64_t specialized OrderedSet.intersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;

  v22[1] = a2;
  v10 = *(_QWORD *)(a5 - 8);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v22 - v14;
  result = OrderedSet.init()();
  v23 = result;
  v24 = v17;
  v18 = *(_QWORD *)(a4 + 16);
  if (v18)
  {
    v22[0] = a3;
    swift_retain();
    swift_retain();
    for (i = 0; i != v18; ++i)
    {
      ContiguousArray.subscript.getter();
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v15, a5);
      if (OrderedSet.contains(_:)())
      {
        v21 = type metadata accessor for OrderedSet(0, a5, a6, v20);
        OrderedSet._appendNew(_:)((uint64_t)v13, v21);
      }
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, a5);
    }
    swift_release();
    swift_release();
    return v23;
  }
  return result;
}

uint64_t specialized OrderedSet.formUnion(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v5[2];

  v5[0] = a1;
  v5[1] = a2;
  MEMORY[0x24954C264](&protocol conformance descriptor for OrderedSet<A>, a3);
  return OrderedSet.append<A>(contentsOf:)((uint64_t)v5, a3, a3);
}

uint64_t specialized OrderedSet.union(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  _QWORD v11[2];

  v8 = type metadata accessor for OrderedSet(0, a5, a6, a4);
  v11[0] = a1;
  v11[1] = a2;
  MEMORY[0x24954C264](&protocol conformance descriptor for OrderedSet<A>, v8);
  OrderedSet.append<A>(contentsOf:)((uint64_t)v11, v8, v8);
  return a3;
}

uint64_t specialized OrderedSet.symmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v8 = ContiguousArray.count.getter();
  v11 = 0;
  type metadata accessor for OrderedSet(0, a5, a6, v9);
  specialized static _UnsafeBitset._withTemporaryBitset(capacity:run:)(v8, (uint64_t (*)(_QWORD **))closure #1 in static _UnsafeBitset.withTemporaryBitset<A>(capacity:run:)partial apply);
  __break(1u);
  result = outlined consume of OrderedSet<Input>?(0, v11);
  __break(1u);
  return result;
}

uint64_t specialized OrderedSet.formSymmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = specialized OrderedSet.symmetricDifference(_:)(a1, a2, *v3, v3[1], *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
  v6 = v5;
  swift_release();
  result = swift_release();
  *v3 = v4;
  v3[1] = v6;
  return result;
}

uint64_t specialized OrderedSet.union<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;

  v8 = type metadata accessor for OrderedSet(0, a4, a6, a4);
  OrderedSet.append<A>(contentsOf:)(a1, v8, a5);
  return a2;
}

uint64_t specialized OrderedSet.intersection<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v8 = ContiguousArray.count.getter();
  v11 = 0;
  type metadata accessor for OrderedSet(0, a4, a6, v9);
  specialized static _UnsafeBitset._withTemporaryBitset(capacity:run:)(v8, (uint64_t (*)(_QWORD **))closure #1 in static _UnsafeBitset.withTemporaryBitset<A>(capacity:run:)partial apply);
  __break(1u);
  result = outlined consume of OrderedSet<Input>?(0, v11);
  __break(1u);
  return result;
}

uint64_t specialized OrderedSet.symmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v8 = ContiguousArray.count.getter();
  v11 = 0;
  type metadata accessor for OrderedSet(0, a4, a6, v9);
  specialized static _UnsafeBitset._withTemporaryBitset(capacity:run:)(v8, (uint64_t (*)(_QWORD **))closure #1 in static _UnsafeBitset.withTemporaryBitset<A>(capacity:run:)partial apply);
  __break(1u);
  result = outlined consume of OrderedSet<Input>?(0, v11);
  __break(1u);
  return result;
}

uint64_t specialized OrderedSet.formSymmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = specialized OrderedSet.symmetricDifference<A>(_:)(a1, *v3, v3[1], *(_QWORD *)(a2 + 16), a3, *(_QWORD *)(a2 + 24));
  v6 = v5;
  swift_release();
  result = swift_release();
  *v3 = v4;
  v3[1] = v6;
  return result;
}

uint64_t partial apply for closure #1 in OrderedSet._subtracting<A>(_:)(uint64_t a1)
{
  return partial apply for closure #1 in OrderedSet.isSubset<A>(of:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in OrderedSet._subtracting<A>(_:));
}

uint64_t partial apply for closure #1 in OrderedSet.symmetricDifference<A>(_:)(uint64_t a1)
{
  return partial apply for closure #1 in OrderedSet.isSubset<A>(of:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in OrderedSet.symmetricDifference<A>(_:));
}

uint64_t partial apply for closure #1 in OrderedSet.symmetricDifference(_:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in OrderedSet.symmetricDifference(_:)(a1, v1[4], v1[5], v1[6], v1[7], v1[2], v1[3]);
}

unint64_t partial apply for closure #1 in closure #1 in OrderedSet.symmetricDifference(_:)@<X0>(uint64_t **a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in closure #1 in OrderedSet.symmetricDifference(_:)(a1, *(uint64_t ***)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

Swift::Int partial apply for closure #1 in OrderedSet.intersection<A>(_:)@<X0>(uint64_t a1@<X0>, Swift::Int *a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in OrderedSet.intersection<A>(_:)(a1, v2[6], v2[7], v2[8], v2[2], v2[3], v2[4], a2);
}

uint64_t closure #1 in static _UnsafeBitset.withTemporaryBitset<A>(capacity:run:)partial apply(uint64_t a1)
{
  return partial apply for closure #1 in static _UnsafeBitset.withTemporaryBitset<A>(capacity:run:)(a1);
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

id MetalStitchingBackend.specializeGetter(for:field:offset:library:)(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v4;
  id result;
  uint64_t v6;

  result = specialized MetalStitchingBackend.specializeGetter(for:field:offset:library:)(a1, *(_QWORD *)a2, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16), *(id *)(a2 + 40), a3, a4);
  if (v4)
    return (id)v6;
  return result;
}

char *MetalStitchingBackend.compile(program:uniformDefinition:additionalLibraries:options:device:)(char *a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5, uint64_t a6, unint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  id v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  uint64_t v39;
  void *v40;
  char *v41;
  char *v42;
  unint64_t v43;
  NSObject *v44;
  os_signpost_type_t v45;
  char v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void *v50;
  os_signpost_id_t v51;
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  char *v54;
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  char *v57;
  NSObject *v58;
  os_signpost_type_t v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  void *v63;
  os_signpost_id_t v64;
  uint64_t v65;
  void (**v66)(char *, char *, uint64_t);
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  Class isa;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  unint64_t v105;
  Class v106;
  NSObject *v107;
  char *v108;
  os_signpost_type_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  const char *v115;
  void (*v116)(char *, char *, uint64_t);
  char *v117;
  uint8_t *v118;
  os_signpost_id_t v119;
  char *v120;
  unint64_t v121;
  NSObject *v122;
  int v123;
  char *v124;
  void (**v125)(char *, char *, uint64_t);
  uint64_t v126;
  void *v127;
  os_signpost_id_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  id v135;
  NSObject *v136;
  char *v137;
  os_signpost_type_t v138;
  char v139;
  char *v140;
  uint64_t v141;
  const char *v142;
  uint64_t v143;
  void (*v144)(char *, char *, uint64_t);
  char *v145;
  char *v146;
  uint64_t v147;
  uint8_t *v148;
  os_signpost_id_t v149;
  char *v150;
  char *v151;
  unint64_t v152;
  NSObject *v153;
  int v154;
  uint64_t v155;
  void *v156;
  void *v157;
  char *v158;
  os_signpost_id_t v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  char *v165;
  char *v166;
  char *v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  void (*v178)(char *, char *, uint64_t);
  char *v179;
  uint64_t v180;
  void *v181;
  char *v182;
  char *v183;
  uint64_t v184;
  void (**v185)(char *, char *, uint64_t);
  uint64_t v186;
  id v187[5];
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;

  v180 = a6;
  v170 = a3;
  v172 = a2;
  v173 = a1;
  v193 = *MEMORY[0x24BDAC8D0];
  v164 = type metadata accessor for OSSignpostError();
  v169 = *(_QWORD *)(v164 - 8);
  v10 = MEMORY[0x24BDAC7A8](v164);
  v12 = (char *)&v160 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v160 - v13;
  v184 = type metadata accessor for OSSignpostID();
  v185 = *(void (***)(char *, char *, uint64_t))(v184 - 8);
  v15 = MEMORY[0x24BDAC7A8](v184);
  v17 = (char *)&v160 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v160 - v19;
  v21 = MEMORY[0x24BDAC7A8](v18);
  v168 = (char *)&v160 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v166 = (char *)&v160 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v179 = (char *)&v160 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v175 = (char *)&v160 - v28;
  MEMORY[0x24BDAC7A8](v27);
  v183 = (char *)&v160 - v29;
  v177 = type metadata accessor for OSSignposter();
  v176 = *(_QWORD *)(v177 - 8);
  MEMORY[0x24BDAC7A8](v177);
  v31 = (char *)&v160 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v181 = a5;
  v32 = objc_msgSend(a5, sel_argumentBuffersSupport);
  v33 = 0x8000000245FCDFB0;
  v171 = a4;
  if (v32)
  {
    v34 = 0xD000000000000010;
    if ((*(_BYTE *)(a4 + OBJC_IVAR___SGREMaterialCompilationOptions_forceEnableTier1FallbackSupport) & 1) == 0)
    {
      if (one-time initialization token for tier1SupportOverrideEnabled != -1)
        swift_once();
      swift_beginAccess();
      if (static DebugConfig.tier1SupportOverrideEnabled)
        v34 = 0xD000000000000010;
      else
        v34 = 0;
      if (static DebugConfig.tier1SupportOverrideEnabled)
        v33 = 0x8000000245FCDFB0;
      else
        v33 = 0xE000000000000000;
    }
  }
  else
  {
    v34 = 0xD000000000000010;
  }
  v174 = v34;
  v165 = v17;
  if (one-time initialization token for logger != -1)
    swift_once();
  v35 = type metadata accessor for Logger();
  __swift_project_value_buffer(v35, (uint64_t)logger);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v36 = Logger.logObject.getter();
  v37 = static os_log_type_t.info.getter();
  v38 = os_log_type_enabled(v36, v37);
  v167 = v14;
  v182 = v31;
  v163 = v20;
  v162 = v12;
  if (v38)
  {
    v39 = swift_slowAlloc();
    v40 = (void *)swift_slowAlloc();
    v187[0] = v40;
    *(_DWORD *)v39 = 136315394;
    swift_bridgeObjectRetain();
    v188 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v180, a7, (uint64_t *)v187);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v39 + 12) = 2080;
    swift_bridgeObjectRetain();
    v188 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v174, v33, (uint64_t *)v187);
    v41 = v182;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_245E46000, v36, v37, "Compiling ShaderGraph material: %s %s", (uint8_t *)v39, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24954C33C](v40, -1, -1);
    MEMORY[0x24954C33C](v39, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    v41 = v31;
  }
  v42 = v183;
  OSSignposter.init(subsystem:category:)();
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  swift_bridgeObjectRetain_n();
  v43 = a7;
  v44 = OSSignposter.logHandle.getter();
  v45 = static os_signpost_type_t.event.getter();
  v46 = OS_os_log.signpostsEnabled.getter();
  v47 = v184;
  if ((v46 & 1) != 0)
  {
    v48 = v175;
    v185[2](v175, v42, v184);
    v49 = swift_slowAlloc();
    v50 = (void *)swift_slowAlloc();
    v187[0] = v50;
    *(_DWORD *)v49 = 141558275;
    v188 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v49 + 12) = 2081;
    swift_bridgeObjectRetain();
    v188 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v180, v43, (uint64_t *)v187);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    v51 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_245E46000, v44, v45, v51, "begin", "%{private,mask.hash}s", (uint8_t *)v49, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24954C33C](v50, -1, -1);
    MEMORY[0x24954C33C](v49, -1, -1);

    v52 = v185[1];
    ((void (*)(char *, uint64_t))v52)(v183, v47);
    v53 = v48;
    v41 = v182;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    v52 = v185[1];
    v53 = v42;
  }
  ((void (*)(char *, uint64_t))v52)(v53, v47);
  v54 = (char *)v43;
  v55 = v178;
  v56 = (char *)specialized MetalStitchingBackend.builtinLibrary(for:)(v181);
  v57 = v179;
  if (!v55)
  {
    v178 = v52;
    v183 = v56;
    OSSignposter.logHandle.getter();
    OSSignpostID.init(log:)();
    swift_bridgeObjectRetain_n();
    v58 = OSSignposter.logHandle.getter();
    v59 = static os_signpost_type_t.begin.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v185 = (void (**)(char *, char *, uint64_t))v185[2];
      v60 = v175;
      ((void (*)(char *, char *, uint64_t))v185)(v175, v57, v184);
      v61 = (unint64_t)v54;
      v62 = swift_slowAlloc();
      v63 = (void *)swift_slowAlloc();
      v187[0] = v63;
      *(_DWORD *)v62 = 141558275;
      v188 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v62 + 12) = 2081;
      swift_bridgeObjectRetain();
      v188 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v180, v61, (uint64_t *)v187);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      v64 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_245E46000, v58, v59, v64, "stitchingGraph", "%{private,mask.hash}s", (uint8_t *)v62, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v63, -1, -1);
      v65 = v62;
      v54 = (char *)v61;
      v57 = v179;
      MEMORY[0x24954C33C](v65, -1, -1);

      v66 = v185;
      v67 = v184;
      v68 = v178;
      ((void (*)(char *, uint64_t))v178)(v60, v184);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      v66 = (void (**)(char *, char *, uint64_t))v185[2];
      v67 = v184;
      v60 = v175;
      v68 = v178;
    }
    ((void (*)(char *, char *, uint64_t))v66)(v60, v57, v67);
    v179 = (char *)type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    v69 = OSSignpostIntervalState.init(id:isOpen:)();
    ((void (*)(char *, uint64_t))v68)(v57, v67);
    v70 = (void *)MEMORY[0x24BEE4AF8];
    v190 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x24BEE4AF8]);
    v191 = v71;
    v192 = v72;
    v73 = objc_msgSend(v181, sel_argumentBuffersSupport);
    v74 = (uint64_t)v173;
    v75 = v182;
    if (!v73
      || (*(_BYTE *)(v171 + OBJC_IVAR___SGREMaterialCompilationOptions_forceEnableTier1FallbackSupport) & 1) != 0)
    {
      goto LABEL_30;
    }
    if (one-time initialization token for tier1SupportOverrideEnabled != -1)
      swift_once();
    swift_beginAccess();
    if (static DebugConfig.tier1SupportOverrideEnabled == 1)
    {
LABEL_30:
      v76 = v183;
      specialized MetalStitchingBackend.generateFallbackTier1Getters(for:augmenting:library:)(v172, (uint64_t)&v190, v183);
    }
    else
    {
      v76 = v183;
      specialized MetalStitchingBackend.generateStructGetters(for:augmenting:library:)(v172, &v190, v183);
    }
    v172 = MetalStitchingBackend.stitchingGraphs(for:augmenting:coreLibrary:additionalLibraries:)(v74, &v190, v76, v170);
    v185 = v66;
    v174 = v69;
    v171 = 0;
    v77 = (*(uint64_t (**)(void))(*(_QWORD *)v74 + 120))();
    v186 = (uint64_t)v70;
    v78 = *(_QWORD *)(v77 + 16);
    if (v78)
    {
      v75 = v54;
      v79 = v77 + 32;
      do
      {
        outlined init with copy of MetalFunctionNode(v79, (uint64_t)v187);
        outlined init with copy of MetalFunctionNode((uint64_t)v187, (uint64_t)&v188);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetalFunctionNode);
        type metadata accessor for MetalFunctionCallNode();
        if ((swift_dynamicCast() & 1) == 0)
          v189 = 0;
        v80 = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v187);
        if (v189)
        {
          MEMORY[0x24954B1A8](v80);
          if (*(_QWORD *)((v186 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v186 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        v79 += 40;
        --v78;
      }
      while (v78);
      v82 = v186;
    }
    else
    {
      v82 = (unint64_t)v70;
    }
    swift_bridgeObjectRelease();
    v161 = (unint64_t)v54;
    if (v82 >> 62)
    {
      swift_bridgeObjectRetain();
      v83 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v83)
        goto LABEL_47;
    }
    else
    {
      v83 = *(_QWORD *)((v82 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v83)
      {
LABEL_47:
        v187[0] = v70;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v83 & ~(v83 >> 63), 0);
        if (v83 < 0)
        {
          __break(1u);
          goto LABEL_90;
        }
        v84 = 0;
        v85 = v187[0];
        do
        {
          if ((v82 & 0xC000000000000001) != 0)
          {
            v86 = MEMORY[0x24954B748](v84, v82);
          }
          else
          {
            v86 = *(_QWORD *)(v82 + 8 * v84 + 32);
            swift_retain();
          }
          v88 = *(_QWORD *)(v86 + 56);
          v87 = *(_QWORD *)(v86 + 64);
          swift_bridgeObjectRetain();
          swift_release();
          v187[0] = v85;
          v90 = v85[2];
          v89 = v85[3];
          if (v90 >= v89 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v89 > 1, v90 + 1, 1);
            v85 = v187[0];
          }
          ++v84;
          v85[2] = v90 + 1;
          v91 = &v85[2 * v90];
          v91[4] = v88;
          v91[5] = v87;
        }
        while (v83 != v84);
        swift_bridgeObjectRelease();
LABEL_58:
        v92 = v190;
        v93 = v191;
        v94 = v192;
        swift_retain();
        swift_retain();
        v95 = specialized Set.init<A>(_:)(v92, v93);
        v96 = (_QWORD *)specialized Set.init<A>(_:)((uint64_t)v85);
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v95 + 16) <= v96[2] >> 3)
        {
          v187[0] = v96;
          specialized Set._subtract<A>(_:)(v95);
          swift_bridgeObjectRelease();
          v97 = v187[0];
        }
        else
        {
          v97 = (_QWORD *)specialized _NativeSet.subtracting<A>(_:)(v95, (uint64_t)v96);
          swift_bridgeObjectRelease();
        }
        if (v97[2])
        {
          swift_bridgeObjectRelease();
          v187[0] = v97;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
          lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type Set<String> and conformance Set<A>, &demangling cache variable for type metadata for Set<String>, MEMORY[0x24BEE1718]);
          lazy protocol witness table accessor for type String and conformance String();
          v54 = (char *)Sequence<>.joined(separator:)();
          v99 = v98;
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type MetalStitchingBackendErrors and conformance MetalStitchingBackendErrors();
          swift_allocError();
          *(_QWORD *)v100 = v54;
          *(_QWORD *)(v100 + 8) = v99;
          *(_BYTE *)(v100 + 16) = 2;
          swift_willThrow();
          swift_release();
          swift_unknownObjectRelease();
          goto LABEL_63;
        }
        swift_bridgeObjectRelease();
        v75 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD720]), sel_init);
        swift_retain();
        swift_retain();
        swift_retain();
        specialized _copyCollectionToContiguousArray<A>(_:)(v92, v93, v94);
        swift_release();
        swift_release();
        swift_release();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MTLFunction);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_release();
        objc_msgSend(v75, sel_setFunctions_, isa);

        if (one-time initialization token for debugMode == -1)
        {
LABEL_65:
          swift_beginAccess();
          v102 = static DebugConfig.debugMode;
          v103 = *(_QWORD *)(static DebugConfig.debugMode + 16);
          v104 = v167;
          v173 = v75;
          if (v103)
          {
            Hasher.init(_seed:)();
            swift_bridgeObjectRetain();
            String.hash(into:)();
            v105 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v102 + 32));
            if (((*(_QWORD *)(v102 + 56 + ((v105 >> 3) & 0xFFFFFFFFFFFFF8)) >> v105) & 1) != 0)
              __asm { BR              X9 }
            swift_bridgeObjectRelease();
          }
          type metadata accessor for NSObject(0, &lazy cache variable for type metadata for MTLFunctionStitchingGraph);
          v106 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v75, sel_setFunctionGraphs_, v106);

          v107 = OSSignposter.logHandle.getter();
          v108 = v166;
          OSSignpostIntervalState.signpostID.getter();
          v109 = static os_signpost_type_t.end.getter();
          v110 = OS_os_log.signpostsEnabled.getter();
          v111 = v184;
          v112 = v169;
          v113 = v168;
          if ((v110 & 1) != 0)
          {
            swift_retain();
            checkForErrorAndConsumeState(state:)();
            swift_release();
            v114 = v164;
            if ((*(unsigned int (**)(char *, uint64_t))(v112 + 88))(v104, v164) == *MEMORY[0x24BEE7810])
            {
              v115 = "[Error] Interval already ended";
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v112 + 8))(v104, v114);
              v115 = "";
            }
            v117 = v175;
            ((void (*)(char *, char *, uint64_t))v185)(v175, v108, v111);
            v118 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v118 = 0;
            v119 = OSSignpostID.rawValue.getter();
            _os_signpost_emit_with_name_impl(&dword_245E46000, v107, v109, v119, "stitchingGraph", v115, v118, 2u);
            MEMORY[0x24954C33C](v118, -1, -1);

            v116 = v178;
            ((void (*)(char *, uint64_t))v178)(v108, v111);
            ((void (*)(char *, uint64_t))v116)(v117, v111);
          }
          else
          {

            v116 = v178;
            ((void (*)(char *, uint64_t))v178)(v108, v111);
          }
          OSSignposter.logHandle.getter();
          OSSignpostID.init(log:)();
          v120 = v113;
          v121 = v161;
          swift_bridgeObjectRetain_n();
          v122 = OSSignposter.logHandle.getter();
          v123 = static os_signpost_type_t.begin.getter();
          if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
          {
            v124 = v175;
            LODWORD(v172) = v123;
            v125 = v185;
            ((void (*)(char *, char *, uint64_t))v185)(v175, v120, v111);
            v126 = swift_slowAlloc();
            v127 = (void *)swift_slowAlloc();
            v187[0] = v127;
            *(_DWORD *)v126 = 141558275;
            v186 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v126 + 12) = 2081;
            swift_bridgeObjectRetain();
            v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v180, v121, (uint64_t *)v187);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            v128 = OSSignpostID.rawValue.getter();
            _os_signpost_emit_with_name_impl(&dword_245E46000, v122, (os_signpost_type_t)v172, v128, "metalStitcher", "%{private,mask.hash}s", (uint8_t *)v126, 0x16u);
            swift_arrayDestroy();
            v129 = v127;
            v111 = v184;
            MEMORY[0x24954C33C](v129, -1, -1);
            v130 = v126;
            v120 = v168;
            MEMORY[0x24954C33C](v130, -1, -1);

            ((void (*)(char *, uint64_t))v116)(v124, v111);
          }
          else
          {
            swift_bridgeObjectRelease_n();

            v124 = v175;
            v125 = v185;
          }
          ((void (*)(char *, char *, uint64_t))v125)(v124, v120, v111);
          swift_allocObject();
          v131 = OSSignpostIntervalState.init(id:isOpen:)();
          ((void (*)(char *, uint64_t))v116)(v120, v111);
          v187[0] = 0;
          v132 = v173;
          v133 = (char *)objc_msgSend(v181, sel_newLibraryWithStitchedDescriptor_error_, v173, v187);
          v134 = v169;
          if (v133)
          {
            v54 = v133;
            v135 = v187[0];
            v136 = OSSignposter.logHandle.getter();
            v137 = v163;
            OSSignpostIntervalState.signpostID.getter();
            v138 = static os_signpost_type_t.end.getter();
            v139 = OS_os_log.signpostsEnabled.getter();
            v179 = (char *)v131;
            if ((v139 & 1) != 0)
            {
              swift_retain();
              v140 = v162;
              checkForErrorAndConsumeState(state:)();
              swift_release();
              v141 = v164;
              if ((*(unsigned int (**)(char *, uint64_t))(v134 + 88))(v140, v164) == *MEMORY[0x24BEE7810])
              {
                v142 = "[Error] Interval already ended";
              }
              else
              {
                (*(void (**)(char *, uint64_t))(v134 + 8))(v140, v141);
                v142 = "";
              }
              v145 = v175;
              v146 = v137;
              v147 = v184;
              ((void (*)(char *, char *, uint64_t))v185)(v175, v137, v184);
              v148 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v148 = 0;
              v149 = OSSignpostID.rawValue.getter();
              _os_signpost_emit_with_name_impl(&dword_245E46000, v136, v138, v149, "metalStitcher", v142, v148, 2u);
              MEMORY[0x24954C33C](v148, -1, -1);

              v143 = v147;
              v144 = v178;
              ((void (*)(char *, uint64_t))v178)(v146, v147);
              ((void (*)(char *, uint64_t))v144)(v145, v147);
            }
            else
            {

              v143 = v184;
              v144 = v178;
              ((void (*)(char *, uint64_t))v178)(v137, v184);
            }
            v150 = v182;
            OSSignposter.logHandle.getter();
            v151 = v165;
            OSSignpostID.init(log:)();
            v152 = v161;
            swift_bridgeObjectRetain_n();
            v153 = OSSignposter.logHandle.getter();
            v154 = static os_signpost_type_t.event.getter();
            if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
            {
              ((void (*)(char *, char *, uint64_t))v185)(v175, v151, v143);
              v155 = swift_slowAlloc();
              v156 = (void *)swift_slowAlloc();
              LODWORD(v185) = v154;
              v157 = v156;
              v187[0] = v156;
              *(_DWORD *)v155 = 141558275;
              v186 = 1752392040;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v155 + 12) = 2081;
              swift_bridgeObjectRetain();
              v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v180, v152, (uint64_t *)v187);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              v158 = v175;
              v159 = OSSignpostID.rawValue.getter();
              _os_signpost_emit_with_name_impl(&dword_245E46000, v153, (os_signpost_type_t)v185, v159, "end", "%{private,mask.hash}s", (uint8_t *)v155, 0x16u);
              swift_arrayDestroy();
              MEMORY[0x24954C33C](v157, -1, -1);
              MEMORY[0x24954C33C](v155, -1, -1);
              swift_release();
              swift_release();

              swift_unknownObjectRelease();
              ((void (*)(char *, uint64_t))v144)(v165, v143);
              (*(void (**)(char *, uint64_t))(v176 + 8))(v182, v177);
              ((void (*)(char *, uint64_t))v144)(v158, v143);
            }
            else
            {
              swift_bridgeObjectRelease_n();
              swift_release();
              swift_release();

              swift_unknownObjectRelease();
              ((void (*)(char *, uint64_t))v144)(v151, v143);
              (*(void (**)(char *, uint64_t))(v176 + 8))(v150, v177);
            }
            goto LABEL_41;
          }
          v54 = (char *)v187[0];
          _convertNSErrorToError(_:)();

          swift_willThrow();
          swift_release();
          swift_release();
          swift_unknownObjectRelease();

LABEL_63:
          (*(void (**)(char *, uint64_t))(v176 + 8))(v182, v177);
LABEL_41:
          swift_release();
          swift_release();
          swift_release();
          return v54;
        }
LABEL_90:
        swift_once();
        goto LABEL_65;
      }
    }
    swift_bridgeObjectRelease();
    v85 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_58;
  }
  (*(void (**)(char *, uint64_t))(v176 + 8))(v41, v177);
  return v54;
}

int64_t specialized OrderedSet._reserveCapacity(_:persistent:)(int64_t result, char a2, void (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t, _QWORD, uint64_t))
{
  uint64_t *v4;
  uint64_t *v7;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (result < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v7 = v4;
  v9 = result;
  v12 = v4[1];
  v10 = v4 + 1;
  v11 = v12;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v10 = v12;
  if (isUniquelyReferenced_nonNull_native && v9 <= *(_QWORD *)(v11 + 24) >> 1)
  {
    v14 = *v7;
    if (*v7)
      goto LABEL_5;
  }
  else
  {
    a3();
    v11 = *v10;
    v14 = *v7;
    if (*v7)
    {
LABEL_5:
      swift_beginAccess();
      v15 = *(_QWORD *)(v14 + 16) & 0x3FLL;
      v16 = specialized static _HashTable.scale(forCapacity:)(v9);
      v17 = v16;
      if ((a2 & 1) != 0)
      {
        v18 = v16;
        if (v15 >= v16)
          goto LABEL_17;
      }
      else
      {
        swift_beginAccess();
        v18 = *(_QWORD *)(v14 + 24) & 0x3FLL;
        if (v15 >= v17)
          goto LABEL_17;
      }
LABEL_13:
      if (v18 <= v17)
        v20 = v17;
      else
        v20 = v18;
      goto LABEL_26;
    }
  }
  v19 = specialized static _HashTable.scale(forCapacity:)(v9);
  v17 = v19;
  v15 = 0;
  if ((a2 & 1) != 0)
    v18 = v19;
  else
    v18 = 0;
  if (v19 > 0)
    goto LABEL_13;
LABEL_17:
  result = specialized static _HashTable.scale(forCapacity:)(*(_QWORD *)(v11 + 16));
  if (v18 <= v17)
    v21 = v17;
  else
    v21 = v18;
  if (result > v21)
    v21 = result;
  if (v21 < v15)
  {
    if (v18 <= v21)
      v20 = v21;
    else
      v20 = v18;
LABEL_26:
    v22 = a4(v11, v20, 0, v18);
    result = swift_release();
    *v7 = v22;
    return result;
  }
  if (!v14 || (result = swift_isUniquelyReferenced_native(), (_DWORD)result))
  {
    v23 = *v7;
    if (*v7)
      goto LABEL_31;
LABEL_35:
    if (!v18)
      return result;
    __break(1u);
    goto LABEL_37;
  }
  result = *v7;
  if (!*v7)
  {
LABEL_38:
    __break(1u);
    return result;
  }
  v23 = _HashTable.copy()((_QWORD *)result);
  result = swift_release();
  *v7 = v23;
  if (!v23)
    goto LABEL_35;
LABEL_31:
  result = swift_beginAccess();
  if ((*(_QWORD *)(v23 + 24) & 0x3FLL) != v18)
    *(_QWORD *)(v23 + 24) = *(_QWORD *)(v23 + 24) & 0xFFFFFFFFFFFFFFC0 | v18 & 0x3F;
  return result;
}

uint64_t MetalStitchingBackend.programName.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t MetalStitchingBackend.programName.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MetalStitchingBackend.programName.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t MetalStitchingBackend.stitchingGraphs(for:augmenting:coreLibrary:additionalLibraries:)(uint64_t a1, uint64_t *a2, void *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  char v32[48];
  uint64_t v33;

  v5 = v4;
  v7 = MetalShaderProgram.terminalNodes()();
  v8 = MEMORY[0x24BEE4AF8];
  v31[0] = MEMORY[0x24BEE4AF8];
  v9 = v7[2];
  if (v9)
  {
    v10 = (uint64_t)(v7 + 4);
    do
    {
      outlined init with copy of MetalFunctionNode(v10, (uint64_t)&v28);
      outlined init with copy of MetalFunctionNode((uint64_t)&v28, (uint64_t)v32);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetalFunctionNode);
      type metadata accessor for MetalFunctionDefinitionNode();
      if ((swift_dynamicCast() & 1) == 0)
        v33 = 0;
      v11 = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v28);
      if (v33)
      {
        MEMORY[0x24954B1A8](v11);
        if (*(_QWORD *)((v31[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v31[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v10 += 40;
      --v9;
    }
    while (v9);
    v12 = v31[0];
    v8 = MEMORY[0x24BEE4AF8];
    v5 = v4;
    swift_bridgeObjectRelease();
    if (v12 < 0)
    {
LABEL_34:
      v24 = swift_bridgeObjectRetain();
      v13 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v24);
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
  }
  else
  {
    v12 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    if (v8 < 0)
      goto LABEL_34;
  }
  if ((v12 & 0x4000000000000000) != 0)
    goto LABEL_34;
  v13 = v12 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
LABEL_15:
  v28 = v13;
  specialized MutableCollection<>.sort(by:)(&v28);
  if (v5)
  {
    swift_release();
    __break(1u);
    JUMPOUT(0x245F97AFCLL);
  }
  v5 = 0;
  swift_bridgeObjectRelease();
  v14 = v28;
  v33 = v8;
  v31[0] = 0;
  v31[1] = 0xE000000000000000;
  v30 = 0;
  v29 = specialized Dictionary.init(dictionaryLiteral:)(v8);
  if (v14 < 0 || (v14 & 0x4000000000000000) != 0)
  {
    swift_retain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    if (v15)
      goto LABEL_19;
  }
  else
  {
    v15 = *(_QWORD *)(v14 + 16);
    swift_retain();
    if (v15)
    {
LABEL_19:
      v16 = 4;
      do
      {
        v17 = v16 - 4;
        if ((v14 & 0xC000000000000001) != 0)
        {
          v8 = MEMORY[0x24954B748](v16 - 4, v14);
          v18 = __OFADD__(v17, 1);
          v19 = v16 - 3;
          if (v18)
            goto LABEL_33;
        }
        else
        {
          v8 = *(_QWORD *)(v14 + 8 * v16);
          swift_retain();
          v18 = __OFADD__(v17, 1);
          v19 = v16 - 3;
          if (v18)
          {
LABEL_33:
            __break(1u);
            goto LABEL_34;
          }
        }
        v28 = v8;
        specialized closure #3 in MetalStitchingBackend.stitchingGraphs(for:augmenting:coreLibrary:additionalLibraries:)(&v28, a1, (uint64_t *)&v29, &v30, a3, a2, a4, (uint64_t)v31, &v33);
        swift_release();
        ++v16;
      }
      while (v19 != v15);
    }
  }
  swift_release_n();
  if (one-time initialization token for debugMode != -1)
    swift_once();
  swift_beginAccess();
  v20 = static DebugConfig.debugMode;
  if (*(_QWORD *)(static DebugConfig.debugMode + 16))
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v21 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v20 + 32));
    if (((*(_QWORD *)(v20 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
      __asm { BR              X9 }
    swift_bridgeObjectRelease();
  }
  v22 = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t closure #3 in MetalStitchingBackend.compile(program:uniformDefinition:additionalLibraries:options:device:)@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v3 = *a1;
  v4 = specialized MetalStitchingBackend.mtlFunctionHash(_:)();
  if (v5)
  {
    v6 = v4;
    v7 = v5;
    v8 = objc_msgSend(v3, sel_name);
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v10;

    v29 = v9;
    v30 = v11;
    v12._countAndFlagsBits = 8250;
    v12._object = (void *)0xE200000000000000;
    String.append(_:)(v12);
    v13 = v6;
  }
  else
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)logger);
    swift_unknownObjectRetain_n();
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v29 = v28;
      *(_DWORD *)v17 = 136315138;
      v18 = objc_msgSend(v3, sel_name);
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v21 = v20;

      v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_245E46000, v15, v16, "Unable to obtain hash for function %s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v28, -1, -1);
      MEMORY[0x24954C33C](v17, -1, -1);

    }
    else
    {

      swift_unknownObjectRelease_n();
    }
    v29 = 0;
    v30 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    v29 = 0xD000000000000016;
    v30 = 0x8000000245FCE0D0;
    v22 = objc_msgSend(v3, sel_name);
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v24;

    v13 = v23;
  }
  v25 = v7;
  String.append(_:)(*(Swift::String *)&v13);
  result = swift_bridgeObjectRelease();
  v27 = v30;
  *a2 = v29;
  a2[1] = v27;
  return result;
}

uint64_t *MetalStitchingBackend.typeToLookupFunctionMap.unsafeMutableAddressor()
{
  if (one-time initialization token for typeToLookupFunctionMap != -1)
    swift_once();
  return &static MetalStitchingBackend.typeToLookupFunctionMap;
}

char *protocol witness for GraphCompilerBackend.compile(program:uniformDefinition:additionalLibraries:options:device:) in conformance MetalStitchingBackend(char *a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;

  return MetalStitchingBackend.compile(program:uniformDefinition:additionalLibraries:options:device:)(a1, a2, a3, a4, a5, *(_QWORD *)v5, *(_QWORD *)(v5 + 8));
}

uint64_t protocol witness for GraphCompilerBackend.programName.getter in conformance MetalStitchingBackend()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for GraphCompilerBackend.programName.setter in conformance MetalStitchingBackend(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*protocol witness for GraphCompilerBackend.programName.modify in conformance MetalStitchingBackend())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

unint64_t one-time initialization function for typeToLookupFunctionMap()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(MetalDataType, String)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_245FC57E0;
  if (one-time initialization token for BOOL != -1)
    swift_once();
  *(_QWORD *)(inited + 32) = static MetalDataType.BOOL;
  *(_QWORD *)(inited + 40) = 0x625F70756B6F6F6CLL;
  *(_QWORD *)(inited + 48) = 0xEB000000006C6F6FLL;
  v1 = one-time initialization token for int32;
  swift_retain();
  if (v1 != -1)
    swift_once();
  *(_QWORD *)(inited + 56) = static MetalDataType.int32;
  *(_QWORD *)(inited + 64) = 0x695F70756B6F6F6CLL;
  *(_QWORD *)(inited + 72) = 0xEA0000000000746ELL;
  v2 = one-time initialization token for uint32;
  swift_retain();
  if (v2 != -1)
    swift_once();
  *(_QWORD *)(inited + 80) = static MetalDataType.uint32;
  *(_QWORD *)(inited + 88) = 0x755F70756B6F6F6CLL;
  *(_QWORD *)(inited + 96) = 0xEB00000000746E69;
  v3 = one-time initialization token for float;
  swift_retain();
  if (v3 != -1)
    swift_once();
  *(_QWORD *)(inited + 104) = static MetalDataType.float;
  strcpy((char *)(inited + 112), "lookup_float");
  *(_BYTE *)(inited + 125) = 0;
  *(_WORD *)(inited + 126) = -5120;
  v4 = one-time initialization token for half;
  swift_retain();
  if (v4 != -1)
    swift_once();
  *(_QWORD *)(inited + 128) = static MetalDataType.half;
  *(_QWORD *)(inited + 136) = 0x685F70756B6F6F6CLL;
  *(_QWORD *)(inited + 144) = 0xEB00000000666C61;
  v5 = one-time initialization token for float2;
  swift_retain();
  if (v5 != -1)
    swift_once();
  *(_QWORD *)(inited + 152) = static MetalDataType.float2;
  strcpy((char *)(inited + 160), "lookup_float2");
  *(_WORD *)(inited + 174) = -4864;
  v6 = one-time initialization token for float3;
  swift_retain();
  if (v6 != -1)
    swift_once();
  *(_QWORD *)(inited + 176) = static MetalDataType.float3;
  strcpy((char *)(inited + 184), "lookup_float3");
  *(_WORD *)(inited + 198) = -4864;
  v7 = one-time initialization token for float4;
  swift_retain();
  if (v7 != -1)
    swift_once();
  *(_QWORD *)(inited + 200) = static MetalDataType.float4;
  strcpy((char *)(inited + 208), "lookup_float4");
  *(_WORD *)(inited + 222) = -4864;
  v8 = one-time initialization token for int2;
  swift_retain();
  if (v8 != -1)
    swift_once();
  *(_QWORD *)(inited + 224) = static MetalDataType.int2;
  *(_QWORD *)(inited + 232) = 0x695F70756B6F6F6CLL;
  *(_QWORD *)(inited + 240) = 0xEB0000000032746ELL;
  v9 = one-time initialization token for int3;
  swift_retain();
  if (v9 != -1)
    swift_once();
  *(_QWORD *)(inited + 248) = static MetalDataType.int3;
  *(_QWORD *)(inited + 256) = 0x695F70756B6F6F6CLL;
  *(_QWORD *)(inited + 264) = 0xEB0000000033746ELL;
  v10 = one-time initialization token for int4;
  swift_retain();
  if (v10 != -1)
    swift_once();
  *(_QWORD *)(inited + 272) = static MetalDataType.int4;
  *(_QWORD *)(inited + 280) = 0x695F70756B6F6F6CLL;
  *(_QWORD *)(inited + 288) = 0xEB0000000034746ELL;
  v11 = one-time initialization token for half2;
  swift_retain();
  if (v11 != -1)
    swift_once();
  *(_QWORD *)(inited + 296) = static MetalDataType.half2;
  strcpy((char *)(inited + 304), "lookup_half2");
  *(_BYTE *)(inited + 317) = 0;
  *(_WORD *)(inited + 318) = -5120;
  v12 = one-time initialization token for half3;
  swift_retain();
  if (v12 != -1)
    swift_once();
  *(_QWORD *)(inited + 320) = static MetalDataType.half3;
  strcpy((char *)(inited + 328), "lookup_half3");
  *(_BYTE *)(inited + 341) = 0;
  *(_WORD *)(inited + 342) = -5120;
  v13 = one-time initialization token for half4;
  swift_retain();
  if (v13 != -1)
    swift_once();
  *(_QWORD *)(inited + 344) = static MetalDataType.half4;
  strcpy((char *)(inited + 352), "lookup_half4");
  *(_BYTE *)(inited + 365) = 0;
  *(_WORD *)(inited + 366) = -5120;
  v14 = one-time initialization token for color3;
  swift_retain();
  if (v14 != -1)
    swift_once();
  *(_QWORD *)(inited + 368) = static MetalDataType.color3;
  strcpy((char *)(inited + 376), "lookup_color3");
  *(_WORD *)(inited + 390) = -4864;
  v15 = one-time initialization token for color4;
  swift_retain();
  if (v15 != -1)
    swift_once();
  *(_QWORD *)(inited + 392) = static MetalDataType.color4;
  strcpy((char *)(inited + 400), "lookup_color4");
  *(_WORD *)(inited + 414) = -4864;
  v16 = one-time initialization token for float2x2;
  swift_retain();
  if (v16 != -1)
    swift_once();
  *(_QWORD *)(inited + 416) = static MetalDataType.float2x2;
  *(_QWORD *)(inited + 424) = 0x665F70756B6F6F6CLL;
  *(_QWORD *)(inited + 432) = 0xEF32783274616F6CLL;
  v17 = one-time initialization token for float3x3;
  swift_retain();
  if (v17 != -1)
    swift_once();
  *(_QWORD *)(inited + 440) = static MetalDataType.float3x3;
  *(_QWORD *)(inited + 448) = 0x665F70756B6F6F6CLL;
  *(_QWORD *)(inited + 456) = 0xEF33783374616F6CLL;
  v18 = one-time initialization token for float4x4;
  swift_retain();
  if (v18 != -1)
    swift_once();
  *(_QWORD *)(inited + 464) = static MetalDataType.float4x4;
  *(_QWORD *)(inited + 472) = 0x665F70756B6F6F6CLL;
  *(_QWORD *)(inited + 480) = 0xEF34783474616F6CLL;
  v19 = one-time initialization token for texture2d_float;
  swift_retain();
  if (v19 != -1)
    swift_once();
  *(_QWORD *)(inited + 488) = static MetalDataType.texture2d_float;
  *(_QWORD *)(inited + 496) = 0xD000000000000015;
  *(_QWORD *)(inited + 504) = 0x8000000245FCDFD0;
  v20 = one-time initialization token for texture2d_half;
  swift_retain();
  if (v20 != -1)
    swift_once();
  *(_QWORD *)(inited + 512) = static MetalDataType.texture2d_half;
  *(_QWORD *)(inited + 520) = 0xD000000000000014;
  *(_QWORD *)(inited + 528) = 0x8000000245FCDFF0;
  v21 = one-time initialization token for texture2darray_float;
  swift_retain();
  if (v21 != -1)
    swift_once();
  *(_QWORD *)(inited + 536) = static MetalDataType.texture2darray_float;
  *(_QWORD *)(inited + 544) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 552) = 0x8000000245FCE010;
  v22 = one-time initialization token for texture2darray_half;
  swift_retain();
  if (v22 != -1)
    swift_once();
  *(_QWORD *)(inited + 560) = static MetalDataType.texture2darray_half;
  *(_QWORD *)(inited + 568) = 0xD000000000000019;
  *(_QWORD *)(inited + 576) = 0x8000000245FCE030;
  v23 = one-time initialization token for texture3d_float;
  swift_retain();
  if (v23 != -1)
    swift_once();
  *(_QWORD *)(inited + 584) = static MetalDataType.texture3d_float;
  *(_QWORD *)(inited + 592) = 0xD000000000000015;
  *(_QWORD *)(inited + 600) = 0x8000000245FCE050;
  v24 = one-time initialization token for texture3d_half;
  swift_retain();
  if (v24 != -1)
    swift_once();
  *(_QWORD *)(inited + 608) = static MetalDataType.texture3d_half;
  *(_QWORD *)(inited + 616) = 0xD000000000000014;
  *(_QWORD *)(inited + 624) = 0x8000000245FCE070;
  v25 = one-time initialization token for texturecube_float;
  swift_retain();
  if (v25 != -1)
    swift_once();
  *(_QWORD *)(inited + 632) = static MetalDataType.texturecube_float;
  *(_QWORD *)(inited + 640) = 0xD000000000000017;
  *(_QWORD *)(inited + 648) = 0x8000000245FCE090;
  v26 = one-time initialization token for texturecube_half;
  swift_retain();
  if (v26 != -1)
    swift_once();
  *(_QWORD *)(inited + 656) = static MetalDataType.texturecube_half;
  *(_QWORD *)(inited + 664) = 0xD000000000000016;
  *(_QWORD *)(inited + 672) = 0x8000000245FCE0B0;
  swift_retain();
  result = specialized Dictionary.init(dictionaryLiteral:)(inited);
  static MetalStitchingBackend.typeToLookupFunctionMap = result;
  return result;
}

uint64_t static MetalStitchingBackend.typeToLookupFunctionMap.getter()
{
  if (one-time initialization token for typeToLookupFunctionMap != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static MetalStitchingBackend.typeToLookupFunctionMap.setter(uint64_t a1)
{
  if (one-time initialization token for typeToLookupFunctionMap != -1)
    swift_once();
  swift_beginAccess();
  static MetalStitchingBackend.typeToLookupFunctionMap = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static MetalStitchingBackend.typeToLookupFunctionMap.modify())()
{
  if (one-time initialization token for typeToLookupFunctionMap != -1)
    swift_once();
  swift_beginAccess();
  return XMLParserDelegate.StringNode.children.modify;
}

uint64_t specialized Set._subtract<A>(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return result;
  v2 = result;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v7)
      return swift_release();
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v7)
        return swift_release();
      v12 = *(_QWORD *)(v3 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v7)
          return swift_release();
        v12 = *(_QWORD *)(v3 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v7)
            return swift_release();
          v12 = *(_QWORD *)(v3 + 8 * v8);
          if (!v12)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_6:
    result = specialized Set._Variant.remove(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v10));
  }
  v13 = v11 + 4;
  if (v13 >= v7)
    return swift_release();
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v7)
      return swift_release();
    v12 = *(_QWORD *)(v3 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return result;
  v2 = result;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v14 >= v7)
      return swift_release();
    v15 = *(_QWORD *)(v3 + 8 * v14);
    ++v8;
    if (!v15)
    {
      v8 = v14 + 1;
      if (v14 + 1 >= v7)
        return swift_release();
      v15 = *(_QWORD *)(v3 + 8 * v8);
      if (!v15)
      {
        v8 = v14 + 2;
        if (v14 + 2 >= v7)
          return swift_release();
        v15 = *(_QWORD *)(v3 + 8 * v8);
        if (!v15)
        {
          v8 = v14 + 3;
          if (v14 + 3 >= v7)
            return swift_release();
          v15 = *(_QWORD *)(v3 + 8 * v8);
          if (!v15)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_6:
    v11 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.remove(_:)(v12, v13);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  v16 = v14 + 4;
  if (v16 >= v7)
    return swift_release();
  v15 = *(_QWORD *)(v3 + 8 * v16);
  if (v15)
  {
    v8 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v8 >= v7)
      return swift_release();
    v15 = *(_QWORD *)(v3 + 8 * v8);
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

Swift::Int specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  Swift::UInt v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t isStackAllocationSafe;
  uint64_t v26;
  char *v27;
  Swift::Int v28;
  void *v29;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[6];

  v2 = a2;
  v33[5] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = 0;
    v6 = a1 + 56;
    v5 = *(_QWORD *)(a1 + 56);
    v7 = -1 << *(_BYTE *)(a1 + 32);
    v32 = ~v7;
    if (-v7 < 64)
      v8 = ~(-1 << -(char)v7);
    else
      v8 = -1;
    v9 = v8 & v5;
    v10 = (unint64_t)(63 - v7) >> 6;
    v11 = a2 + 56;
    while (1)
    {
      do
      {
        if (v9)
        {
          v12 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          v13 = v12 | (v4 << 6);
        }
        else
        {
          v14 = v4 + 1;
          if (__OFADD__(v4, 1))
          {
            __break(1u);
            goto LABEL_37;
          }
          if (v14 >= v10)
            goto LABEL_35;
          v15 = *(_QWORD *)(v6 + 8 * v14);
          v16 = v4 + 1;
          if (!v15)
          {
            v16 = v4 + 2;
            if (v4 + 2 >= v10)
              goto LABEL_35;
            v15 = *(_QWORD *)(v6 + 8 * v16);
            if (!v15)
            {
              v16 = v4 + 3;
              if (v4 + 3 >= v10)
                goto LABEL_35;
              v15 = *(_QWORD *)(v6 + 8 * v16);
              if (!v15)
              {
                v16 = v4 + 4;
                if (v4 + 4 >= v10)
                  goto LABEL_35;
                v15 = *(_QWORD *)(v6 + 8 * v16);
                if (!v15)
                {
                  v17 = v4 + 5;
                  if (v4 + 5 >= v10)
                  {
LABEL_35:
                    swift_bridgeObjectRetain();
                    outlined consume of [String : InputSpec].Iterator._Variant();
                    return v2;
                  }
                  v15 = *(_QWORD *)(v6 + 8 * v17);
                  if (!v15)
                  {
                    while (1)
                    {
                      v16 = v17 + 1;
                      if (__OFADD__(v17, 1))
                        break;
                      if (v16 >= v10)
                        goto LABEL_35;
                      v15 = *(_QWORD *)(v6 + 8 * v16);
                      ++v17;
                      if (v15)
                        goto LABEL_23;
                    }
LABEL_37:
                    __break(1u);
                  }
                  v16 = v4 + 5;
                }
              }
            }
          }
LABEL_23:
          v9 = (v15 - 1) & v15;
          v13 = __clz(__rbit64(v15)) + (v16 << 6);
          v4 = v16;
        }
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v13);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v18);
        v19 = Hasher._finalize()();
        v20 = -1 << *(_BYTE *)(v2 + 32);
        v21 = v19 & ~v20;
      }
      while (((*(_QWORD *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0);
      v22 = *(_QWORD *)(v2 + 48);
      if (*(_QWORD *)(v22 + 8 * v21) == v18)
        break;
      while (1)
      {
        v21 = (v21 + 1) & ~v20;
        if (((*(_QWORD *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          break;
        if (*(_QWORD *)(v22 + 8 * v21) == v18)
          goto LABEL_28;
      }
    }
LABEL_28:
    v33[0] = a1;
    v33[1] = v6;
    v33[2] = v32;
    v33[3] = v4;
    v33[4] = v9;
    v23 = (unint64_t)(63 - v20) >> 6;
    v24 = 8 * v23;
    isStackAllocationSafe = swift_bridgeObjectRetain();
    if (v23 < 0x81 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
    {
      MEMORY[0x24BDAC7A8](isStackAllocationSafe);
      v27 = (char *)&v31 - v26;
      memcpy((char *)&v31 - v26, (const void *)(v2 + 56), v24);
      v28 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((Swift::Int)v27, v23, v2, v21, v33);
      swift_release();
      outlined consume of [String : InputSpec].Iterator._Variant();
    }
    else
    {
      v29 = (void *)swift_slowAlloc();
      memcpy(v29, (const void *)(v2 + 56), v24);
      v28 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((Swift::Int)v29, v23, v2, v21, v33);
      swift_release();
      outlined consume of [String : InputSpec].Iterator._Variant();
      MEMORY[0x24954C33C](v29, -1, -1);
    }
    return v28;
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4B08];
  }
}

uint64_t specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t isStackAllocationSafe;
  char v29;
  unint64_t v30;
  size_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  unint64_t v42;
  uint64_t v43;

  v2 = a2;
  v43 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = *(_QWORD *)(a1 + 56);
    v37 = a1 + 56;
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v35 = ~v5;
    if (-v5 < 64)
      v6 = ~(-1 << -(char)v5);
    else
      v6 = -1;
    v7 = v6 & v4;
    v36 = (unint64_t)(63 - v5) >> 6;
    v8 = a2 + 56;
    swift_bridgeObjectRetain();
    v9 = 0;
    while (1)
    {
      if (v7)
      {
        v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v11 = v10 | (v9 << 6);
      }
      else
      {
        v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_49;
        }
        if (v12 >= v36)
          goto LABEL_47;
        v13 = *(_QWORD *)(v37 + 8 * v12);
        v14 = v9 + 1;
        if (!v13)
        {
          v14 = v9 + 2;
          if (v9 + 2 >= v36)
            goto LABEL_47;
          v13 = *(_QWORD *)(v37 + 8 * v14);
          if (!v13)
          {
            v14 = v9 + 3;
            if (v9 + 3 >= v36)
              goto LABEL_47;
            v13 = *(_QWORD *)(v37 + 8 * v14);
            if (!v13)
            {
              v14 = v9 + 4;
              if (v9 + 4 >= v36)
                goto LABEL_47;
              v13 = *(_QWORD *)(v37 + 8 * v14);
              if (!v13)
              {
                v15 = v9 + 5;
                if (v9 + 5 >= v36)
                {
LABEL_47:
                  outlined consume of [String : InputSpec].Iterator._Variant();
                  return v2;
                }
                v13 = *(_QWORD *)(v37 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    v14 = v15 + 1;
                    if (__OFADD__(v15, 1))
                      break;
                    if (v14 >= v36)
                      goto LABEL_47;
                    v13 = *(_QWORD *)(v37 + 8 * v14);
                    ++v15;
                    if (v13)
                      goto LABEL_24;
                  }
LABEL_49:
                  __break(1u);
                }
                v14 = v9 + 5;
              }
            }
          }
        }
LABEL_24:
        v7 = (v13 - 1) & v13;
        v11 = __clz(__rbit64(v13)) + (v14 << 6);
        v9 = v14;
      }
      v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
      v18 = *v16;
      v17 = v16[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v19 = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v2 + 32);
      v21 = v19 & ~v20;
      if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
        break;
LABEL_6:
      swift_bridgeObjectRelease();
    }
    v22 = *(_QWORD *)(v2 + 48);
    v23 = (_QWORD *)(v22 + 16 * v21);
    v24 = *v23 == v18 && v23[1] == v17;
    if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      isStackAllocationSafe = swift_bridgeObjectRelease();
      v38 = a1;
      v39 = v37;
      v40 = v35;
      v41 = v9;
      v42 = v7;
    }
    else
    {
      v25 = ~v20;
      do
      {
        v21 = (v21 + 1) & v25;
        if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          goto LABEL_6;
        v26 = (_QWORD *)(v22 + 16 * v21);
        v27 = *v26 == v18 && v26[1] == v17;
      }
      while (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
      v38 = a1;
      v39 = v37;
      v40 = v35;
      v41 = v9;
      v42 = v7;
      isStackAllocationSafe = swift_bridgeObjectRelease();
    }
    v29 = *(_BYTE *)(v2 + 32);
    v30 = (unint64_t)((1 << v29) + 63) >> 6;
    v31 = 8 * v30;
    if ((v29 & 0x3Fu) < 0xE
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
    {
      MEMORY[0x24BDAC7A8](isStackAllocationSafe);
      memcpy((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v31);
      v32 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0), v30, v2, v21, &v38);
      swift_release();
      outlined consume of [String : InputSpec].Iterator._Variant();
    }
    else
    {
      v33 = (void *)swift_slowAlloc();
      memcpy(v33, (const void *)(v2 + 56), v31);
      v32 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)v33, v30, v2, v21, &v38);
      swift_release();
      outlined consume of [String : InputSpec].Iterator._Variant();
      MEMORY[0x24954C33C](v33, -1, -1);
    }
    return v32;
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4B08];
  }
}

Swift::Int specialized closure #1 in _NativeSet.subtracting<A>(_:)(Swift::Int result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  Swift::UInt v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t i;
  unint64_t v30;
  int64_t v31;

  v7 = (unint64_t *)result;
  v8 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v9 = v8 - 1;
  v10 = a3 + 56;
  while (1)
  {
    v15 = a5[3];
    v16 = a5[4];
    if (!v16)
      break;
    v17 = (v16 - 1) & v16;
    v18 = __clz(__rbit64(v16)) | (v15 << 6);
LABEL_16:
    v25 = *(_QWORD *)(*(_QWORD *)(*a5 + 48) + 8 * v18);
    a5[3] = v15;
    a5[4] = v17;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v25);
    result = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(a3 + 32);
    v27 = result & ~v26;
    v11 = v27 >> 6;
    v12 = 1 << v27;
    if (((1 << v27) & *(_QWORD *)(v10 + 8 * (v27 >> 6))) != 0)
    {
      v28 = *(_QWORD *)(a3 + 48);
      if (*(_QWORD *)(v28 + 8 * v27) == v25)
      {
LABEL_3:
        v13 = v11;
        v14 = v7[v11];
        v7[v13] = v14 & ~v12;
        if ((v12 & v14) != 0)
        {
          if (__OFSUB__(v9--, 1))
            goto LABEL_36;
          if (!v9)
            return MEMORY[0x24BEE4B08];
        }
      }
      else
      {
        for (i = v27 + 1; ; i = v30 + 1)
        {
          v30 = i & ~v26;
          if (((*(_QWORD *)(v10 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
            break;
          if (*(_QWORD *)(v28 + 8 * v30) == v25)
          {
            v11 = v30 >> 6;
            v12 = 1 << v30;
            goto LABEL_3;
          }
        }
      }
    }
  }
  v19 = v15 + 1;
  if (!__OFADD__(v15, 1))
  {
    v20 = (unint64_t)(a5[2] + 64) >> 6;
    v21 = a5[3];
    if (v19 >= v20)
      goto LABEL_33;
    v22 = a5[1];
    v23 = *(_QWORD *)(v22 + 8 * v19);
    if (v23)
      goto LABEL_15;
    v24 = v15 + 2;
    v21 = v15 + 1;
    if (v15 + 2 >= v20)
      goto LABEL_33;
    v23 = *(_QWORD *)(v22 + 8 * v24);
    if (!v23)
    {
      v21 = v15 + 2;
      if (v15 + 3 >= v20)
        goto LABEL_33;
      v23 = *(_QWORD *)(v22 + 8 * (v15 + 3));
      if (v23)
      {
        v19 = v15 + 3;
        goto LABEL_15;
      }
      v24 = v15 + 4;
      v21 = v15 + 3;
      if (v15 + 4 >= v20)
        goto LABEL_33;
      v23 = *(_QWORD *)(v22 + 8 * v24);
      if (!v23)
      {
        v19 = v15 + 5;
        v21 = v15 + 4;
        if (v15 + 5 >= v20)
          goto LABEL_33;
        v23 = *(_QWORD *)(v22 + 8 * v19);
        if (!v23)
        {
          v21 = v20 - 1;
          v31 = v15 + 6;
          while (v20 != v31)
          {
            v23 = *(_QWORD *)(v22 + 8 * v31++);
            if (v23)
            {
              v19 = v31 - 1;
              goto LABEL_15;
            }
          }
LABEL_33:
          a5[3] = v21;
          a5[4] = 0;
          swift_retain();
          return specialized _NativeSet.extractSubset(using:count:)(v7, a2, v9, a3);
        }
        goto LABEL_15;
      }
    }
    v19 = v24;
LABEL_15:
    v17 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v19 << 6);
    v15 = v19;
    goto LABEL_16;
  }
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in _NativeSet.subtracting<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t i;
  unint64_t v33;
  _QWORD *v34;
  BOOL v35;
  int64_t v36;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;

  v7 = *(_QWORD *)(a3 + 16);
  v39 = (unint64_t *)result;
  *(_QWORD *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v8 = v7 - 1;
  v40 = a3 + 56;
  while (2)
  {
    v38 = v8;
    do
    {
      while (1)
      {
        v9 = a5[3];
        v10 = a5[4];
        if (v10)
        {
          v11 = (v10 - 1) & v10;
          v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_16;
        }
        v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_47;
        }
        v14 = (unint64_t)(a5[2] + 64) >> 6;
        v15 = a5[3];
        if (v13 >= v14)
          goto LABEL_45;
        v16 = a5[1];
        v17 = *(_QWORD *)(v16 + 8 * v13);
        if (!v17)
        {
          v18 = v9 + 2;
          v15 = v9 + 1;
          if (v9 + 2 >= v14)
            goto LABEL_45;
          v17 = *(_QWORD *)(v16 + 8 * v18);
          if (!v17)
          {
            v15 = v9 + 2;
            if (v9 + 3 >= v14)
              goto LABEL_45;
            v17 = *(_QWORD *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              v13 = v9 + 3;
              goto LABEL_15;
            }
            v18 = v9 + 4;
            v15 = v9 + 3;
            if (v9 + 4 >= v14)
              goto LABEL_45;
            v17 = *(_QWORD *)(v16 + 8 * v18);
            if (!v17)
            {
              v13 = v9 + 5;
              v15 = v9 + 4;
              if (v9 + 5 >= v14)
                goto LABEL_45;
              v17 = *(_QWORD *)(v16 + 8 * v13);
              if (!v17)
              {
                v15 = v14 - 1;
                v36 = v9 + 6;
                while (v14 != v36)
                {
                  v17 = *(_QWORD *)(v16 + 8 * v36++);
                  if (v17)
                  {
                    v13 = v36 - 1;
                    goto LABEL_15;
                  }
                }
LABEL_45:
                a5[3] = v15;
                a5[4] = 0;
                swift_retain();
                return specialized _NativeSet.extractSubset(using:count:)(v39, a2, v38, a3);
              }
              goto LABEL_15;
            }
          }
          v13 = v18;
        }
LABEL_15:
        v11 = (v17 - 1) & v17;
        v12 = __clz(__rbit64(v17)) + (v13 << 6);
        v9 = v13;
LABEL_16:
        v19 = (uint64_t *)(*(_QWORD *)(*a5 + 48) + 16 * v12);
        v21 = *v19;
        v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v22 = Hasher._finalize()();
        v23 = -1 << *(_BYTE *)(a3 + 32);
        v24 = v22 & ~v23;
        v25 = v24 >> 6;
        v26 = 1 << v24;
        if (((1 << v24) & *(_QWORD *)(v40 + 8 * (v24 >> 6))) == 0)
          goto LABEL_3;
        v27 = *(_QWORD *)(a3 + 48);
        v28 = (_QWORD *)(v27 + 16 * v24);
        v29 = *v28 == v21 && v28[1] == v20;
        if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          break;
        v31 = ~v23;
        for (i = v24 + 1; ; i = v33 + 1)
        {
          v33 = i & v31;
          if (((*(_QWORD *)(v40 + (((i & v31) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v31)) & 1) == 0)
            break;
          v34 = (_QWORD *)(v27 + 16 * v33);
          v35 = *v34 == v21 && v34[1] == v20;
          if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            result = swift_bridgeObjectRelease();
            v25 = v33 >> 6;
            v26 = 1 << v33;
            goto LABEL_23;
          }
        }
LABEL_3:
        result = swift_bridgeObjectRelease();
      }
      result = swift_bridgeObjectRelease();
LABEL_23:
      v30 = v39[v25];
      v39[v25] = v30 & ~v26;
    }
    while ((v26 & v30) == 0);
    v8 = v38 - 1;
    if (__OFSUB__(v38, 1))
    {
LABEL_47:
      __break(1u);
      return result;
    }
    if (v38 != 1)
      continue;
    return MEMORY[0x24BEE4B08];
  }
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t *v28;

  v4 = a4;
  if (!a3)
  {
    v9 = MEMORY[0x24BEE4B08];
LABEL_36:
    swift_release();
    return v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<FunctionNodeID>);
  result = static _SetStorage.allocate(capacity:)();
  v9 = result;
  v28 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= a2)
      goto LABEL_36;
    v16 = v28[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_36;
      v16 = v28[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_36;
        v16 = v28[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    result = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(v9 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v22) = v18;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_36;
  v16 = v28[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_36;
    v16 = v28[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;

  v4 = a4;
  if (!a3)
  {
    v8 = MEMORY[0x24BEE4B08];
LABEL_36:
    swift_release();
    return v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  result = static _SetStorage.allocate(capacity:)();
  v8 = result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;

  v2 = MEMORY[0x24BEE4AF8];
  v26 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v3 = *(_QWORD *)(a1 + 16);
  specialized OrderedSet._reserveCapacity(_:persistent:)(v3, 0, (void (*)(void))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  v4 = v2;
  swift_bridgeObjectRetain();
  v22 = v3;
  if (v3)
  {
    v5 = 0;
    v21 = a1 + 32;
    do
    {
      v6 = v21 + 56 * v5;
      v24 = *(_OWORD *)(v6 + 40);
      v7 = *(_QWORD *)(v6 + 16);
      v8 = *(_QWORD *)(v6 + 24);
      v9 = *(_QWORD *)(v6 + 32);
      v10 = *(_QWORD *)v6;
      v11 = *(_QWORD *)(v6 + 8);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      result = swift_retain();
      if (!v7)
        break;
      v13 = v26[2];
      if (v13)
      {
        if (v26[4] == v10)
          goto LABEL_22;
        if (v13 != 1)
        {
          if (v26[5] == v10)
            goto LABEL_22;
          if (v13 != 2)
          {
            if (v26[6] == v10)
            {
LABEL_22:
              __break(1u);
              return result;
            }
            v18 = v13 - 3;
            v19 = v26 + 7;
            while (v18)
            {
              v20 = *v19++;
              --v18;
              if (v20 == v10)
                goto LABEL_22;
            }
          }
        }
        v14 = v4;
        v13 = 0;
      }
      else
      {
        v14 = v4;
      }
      specialized OrderedSet._appendNew(_:in:)(v10, v13);
      v4 = v14;
      v25 = v14;
      v15 = *(_QWORD *)(v14 + 16);
      v16 = *(_QWORD *)(v4 + 24);
      v23 = v15 + 1;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      if (v15 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v23, 1);
        v4 = v25;
      }
      ++v5;
      *(_QWORD *)(v4 + 16) = v23;
      v17 = v4 + 48 * v15;
      *(_QWORD *)(v17 + 32) = v11;
      *(_QWORD *)(v17 + 40) = v7;
      *(_QWORD *)(v17 + 48) = v8;
      *(_QWORD *)(v17 + 56) = v9;
      *(_OWORD *)(v17 + 64) = v24;
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    while (v5 != v22);
  }
  swift_bridgeObjectRelease();
  return 0;
}

{
  _QWORD *v2;
  int64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char v9;

  v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0)
    specialized _copyCollectionToContiguousArray<A>(_:)(MEMORY[0x24BEE4AF8]);
  v3 = *(_QWORD *)(a1 + 16);
  specialized OrderedSet._reserveCapacity(_:persistent:)(v3, 0, (void (*)(void))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!v3)
    return 0;
  swift_bridgeObjectRetain();
  for (i = a1 + 48; ; i += 24)
  {
    v6 = *(_QWORD *)(i - 16);
    v5 = *(_QWORD *)(i - 8);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    result = specialized OrderedSet._find(_:)(v6, v5, 0, v2);
    if ((v9 & 1) == 0)
      break;
    specialized OrderedSet._appendNew(_:in:)(v6, v5, v8);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    swift_bridgeObjectRelease();
    if (!--v3)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0)
    specialized _copyCollectionToContiguousArray<A>(_:)(MEMORY[0x24BEE4AF8]);
  v3 = *(_QWORD *)(a1 + 16);
  specialized OrderedSet._reserveCapacity(_:persistent:)(v3, 0, (void (*)(void))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!v3)
    return 0;
  swift_bridgeObjectRetain();
  v4 = 0;
  while (1)
  {
    v5 = *(_QWORD *)(a1 + 32 + 16 * v4);
    v6 = v2[2];
    if (v6)
    {
      if (v2[4] == v5)
        goto LABEL_15;
      if (v6 != 1)
      {
        if (v2[5] == v5)
          goto LABEL_15;
        if (v6 != 2)
          break;
      }
    }
LABEL_5:
    ++v4;
    swift_unknownObjectRetain();
    specialized OrderedSet._appendNew(_:in:)(v5, 0);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (v4 == v3)
      goto LABEL_16;
  }
  if (v2[6] != v5)
  {
    v7 = v6 - 3;
    v8 = v2 + 7;
    while (v7)
    {
      v9 = *v8++;
      --v7;
      if (v9 == v5)
        goto LABEL_15;
    }
    goto LABEL_5;
  }
LABEL_15:
  __break(1u);
LABEL_16:
  swift_bridgeObjectRelease();
  return 0;
}

{
  _QWORD *v2;
  int64_t v3;
  void **i;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t result;
  uint64_t v10;
  char v11;

  v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0)
    specialized _copyCollectionToContiguousArray<A>(_:)(MEMORY[0x24BEE4AF8]);
  v3 = *(_QWORD *)(a1 + 16);
  specialized OrderedSet._reserveCapacity(_:persistent:)(v3, 0, (void (*)(void))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!v3)
    return 0;
  swift_bridgeObjectRetain();
  for (i = (void **)(a1 + 48); ; i += 3)
  {
    v6 = (uint64_t)*(i - 2);
    v5 = (uint64_t)*(i - 1);
    v7 = *i;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = specialized OrderedSet._find(_:)(v6, v5, 0, v2);
    if ((v11 & 1) == 0)
      break;
    specialized OrderedSet._appendNew(_:in:)(v6, v5, v10);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    swift_bridgeObjectRelease();
    if (!--v3)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized MetalStitchingBackend.mtlFunctionHash(_:)()
{
  uint64_t result;
  void *v1;
  _BYTE *v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  Swift::String v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  Swift::String v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  Swift::String v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  Swift::String v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  Swift::String v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  Swift::String v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  Swift::String v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  Swift::String v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  Swift::String v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  void *v94;
  Swift::String v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  void *v99;
  Swift::String v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  void *v104;
  Swift::String v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  void *v109;
  Swift::String v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  void *v114;
  Swift::String v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  void *v119;
  Swift::String v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  void *v124;
  Swift::String v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  void *v129;
  Swift::String v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  void *v134;
  Swift::String v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  void *v139;
  Swift::String v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  void *v144;
  Swift::String v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  void *v149;
  Swift::String v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  void *v154;
  Swift::String v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  void *v159;
  Swift::String v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  void *v164;
  Swift::String v165;
  char v166;
  char v167;
  char v168;
  char v169;
  char v170;
  char v171;
  char v172;
  char v173;
  char v174;
  char v175;
  char v176;
  char v177;
  char v178;
  char v179;
  char v180;
  char v181;
  char v182;
  char v183;
  char v184;
  char v185;
  char v186;
  char v187;
  char v188;
  char v189;
  char v190;
  char v191;
  char v192;

  result = swift_dynamicCastObjCProtocolConditional();
  if (result)
  {
    v1 = (void *)result;
    swift_unknownObjectRetain();
    v2 = objc_msgSend(v1, sel_bitCodeHash);
    LOBYTE(v1) = *v2;
    v3 = v2[1];
    v4 = v2[2];
    v5 = v2[3];
    v6 = v2[4];
    v166 = v2[5];
    v167 = v2[6];
    v168 = v2[7];
    v169 = v2[8];
    v170 = v2[9];
    v171 = v2[10];
    v172 = v2[11];
    v173 = v2[12];
    v174 = v2[13];
    v175 = v2[14];
    v176 = v2[15];
    v177 = v2[16];
    v178 = v2[17];
    v179 = v2[18];
    v180 = v2[19];
    v181 = v2[20];
    v182 = v2[21];
    v183 = v2[22];
    v184 = v2[23];
    v185 = v2[24];
    v186 = v2[25];
    v187 = v2[26];
    v188 = v2[27];
    v189 = v2[28];
    v190 = v2[29];
    v191 = v2[30];
    v192 = v2[31];
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v7 = swift_allocObject();
    v8 = MEMORY[0x24BEE4260];
    *(_OWORD *)(v7 + 16) = xmmword_245FBECD0;
    v9 = MEMORY[0x24BEE42B0];
    *(_QWORD *)(v7 + 56) = v8;
    *(_QWORD *)(v7 + 64) = v9;
    *(_BYTE *)(v7 + 32) = (_BYTE)v1;
    v10 = String.init(format:_:)();
    v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v11 + 56) = v8;
    *(_QWORD *)(v11 + 64) = v9;
    *(_BYTE *)(v11 + 32) = v3;
    v12 = String.init(format:_:)();
    v14 = v13;
    swift_bridgeObjectRetain();
    v15._countAndFlagsBits = v12;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v16 + 56) = v8;
    *(_QWORD *)(v16 + 64) = v9;
    *(_BYTE *)(v16 + 32) = v4;
    v17 = String.init(format:_:)();
    v19 = v18;
    swift_bridgeObjectRetain();
    v20._countAndFlagsBits = v17;
    v20._object = v19;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v21 + 56) = v8;
    *(_QWORD *)(v21 + 64) = v9;
    *(_BYTE *)(v21 + 32) = v5;
    v22 = String.init(format:_:)();
    v24 = v23;
    swift_bridgeObjectRetain();
    v25._countAndFlagsBits = v22;
    v25._object = v24;
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v26 + 56) = v8;
    *(_QWORD *)(v26 + 64) = v9;
    *(_BYTE *)(v26 + 32) = v6;
    v27 = String.init(format:_:)();
    v29 = v28;
    swift_bridgeObjectRetain();
    v30._countAndFlagsBits = v27;
    v30._object = v29;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v31 + 56) = v8;
    *(_QWORD *)(v31 + 64) = v9;
    *(_BYTE *)(v31 + 32) = v166;
    v32 = String.init(format:_:)();
    v34 = v33;
    swift_bridgeObjectRetain();
    v35._countAndFlagsBits = v32;
    v35._object = v34;
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v36 + 56) = v8;
    *(_QWORD *)(v36 + 64) = v9;
    *(_BYTE *)(v36 + 32) = v167;
    v37 = String.init(format:_:)();
    v39 = v38;
    swift_bridgeObjectRetain();
    v40._countAndFlagsBits = v37;
    v40._object = v39;
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v41 + 56) = v8;
    *(_QWORD *)(v41 + 64) = v9;
    *(_BYTE *)(v41 + 32) = v168;
    v42 = String.init(format:_:)();
    v44 = v43;
    swift_bridgeObjectRetain();
    v45._countAndFlagsBits = v42;
    v45._object = v44;
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v46 + 56) = v8;
    *(_QWORD *)(v46 + 64) = v9;
    *(_BYTE *)(v46 + 32) = v169;
    v47 = String.init(format:_:)();
    v49 = v48;
    swift_bridgeObjectRetain();
    v50._countAndFlagsBits = v47;
    v50._object = v49;
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v51 + 56) = v8;
    *(_QWORD *)(v51 + 64) = v9;
    *(_BYTE *)(v51 + 32) = v170;
    v52 = String.init(format:_:)();
    v54 = v53;
    swift_bridgeObjectRetain();
    v55._countAndFlagsBits = v52;
    v55._object = v54;
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v56 = swift_allocObject();
    *(_OWORD *)(v56 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v56 + 56) = v8;
    *(_QWORD *)(v56 + 64) = v9;
    *(_BYTE *)(v56 + 32) = v171;
    v57 = String.init(format:_:)();
    v59 = v58;
    swift_bridgeObjectRetain();
    v60._countAndFlagsBits = v57;
    v60._object = v59;
    String.append(_:)(v60);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v61 = swift_allocObject();
    *(_OWORD *)(v61 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v61 + 56) = v8;
    *(_QWORD *)(v61 + 64) = v9;
    *(_BYTE *)(v61 + 32) = v172;
    v62 = String.init(format:_:)();
    v64 = v63;
    swift_bridgeObjectRetain();
    v65._countAndFlagsBits = v62;
    v65._object = v64;
    String.append(_:)(v65);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v66 = swift_allocObject();
    *(_OWORD *)(v66 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v66 + 56) = v8;
    *(_QWORD *)(v66 + 64) = v9;
    *(_BYTE *)(v66 + 32) = v173;
    v67 = String.init(format:_:)();
    v69 = v68;
    swift_bridgeObjectRetain();
    v70._countAndFlagsBits = v67;
    v70._object = v69;
    String.append(_:)(v70);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v71 = swift_allocObject();
    *(_OWORD *)(v71 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v71 + 56) = v8;
    *(_QWORD *)(v71 + 64) = v9;
    *(_BYTE *)(v71 + 32) = v174;
    v72 = String.init(format:_:)();
    v74 = v73;
    swift_bridgeObjectRetain();
    v75._countAndFlagsBits = v72;
    v75._object = v74;
    String.append(_:)(v75);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v76 = swift_allocObject();
    *(_OWORD *)(v76 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v76 + 56) = v8;
    *(_QWORD *)(v76 + 64) = v9;
    *(_BYTE *)(v76 + 32) = v175;
    v77 = String.init(format:_:)();
    v79 = v78;
    swift_bridgeObjectRetain();
    v80._countAndFlagsBits = v77;
    v80._object = v79;
    String.append(_:)(v80);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v81 = swift_allocObject();
    *(_OWORD *)(v81 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v81 + 56) = v8;
    *(_QWORD *)(v81 + 64) = v9;
    *(_BYTE *)(v81 + 32) = v176;
    v82 = String.init(format:_:)();
    v84 = v83;
    swift_bridgeObjectRetain();
    v85._countAndFlagsBits = v82;
    v85._object = v84;
    String.append(_:)(v85);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v86 = swift_allocObject();
    *(_OWORD *)(v86 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v86 + 56) = v8;
    *(_QWORD *)(v86 + 64) = v9;
    *(_BYTE *)(v86 + 32) = v177;
    v87 = String.init(format:_:)();
    v89 = v88;
    swift_bridgeObjectRetain();
    v90._countAndFlagsBits = v87;
    v90._object = v89;
    String.append(_:)(v90);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v91 = swift_allocObject();
    *(_OWORD *)(v91 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v91 + 56) = v8;
    *(_QWORD *)(v91 + 64) = v9;
    *(_BYTE *)(v91 + 32) = v178;
    v92 = String.init(format:_:)();
    v94 = v93;
    swift_bridgeObjectRetain();
    v95._countAndFlagsBits = v92;
    v95._object = v94;
    String.append(_:)(v95);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v96 = swift_allocObject();
    *(_OWORD *)(v96 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v96 + 56) = v8;
    *(_QWORD *)(v96 + 64) = v9;
    *(_BYTE *)(v96 + 32) = v179;
    v97 = String.init(format:_:)();
    v99 = v98;
    swift_bridgeObjectRetain();
    v100._countAndFlagsBits = v97;
    v100._object = v99;
    String.append(_:)(v100);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v101 = swift_allocObject();
    *(_OWORD *)(v101 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v101 + 56) = v8;
    *(_QWORD *)(v101 + 64) = v9;
    *(_BYTE *)(v101 + 32) = v180;
    v102 = String.init(format:_:)();
    v104 = v103;
    swift_bridgeObjectRetain();
    v105._countAndFlagsBits = v102;
    v105._object = v104;
    String.append(_:)(v105);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v106 = swift_allocObject();
    *(_OWORD *)(v106 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v106 + 56) = v8;
    *(_QWORD *)(v106 + 64) = v9;
    *(_BYTE *)(v106 + 32) = v181;
    v107 = String.init(format:_:)();
    v109 = v108;
    swift_bridgeObjectRetain();
    v110._countAndFlagsBits = v107;
    v110._object = v109;
    String.append(_:)(v110);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v111 = swift_allocObject();
    *(_OWORD *)(v111 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v111 + 56) = v8;
    *(_QWORD *)(v111 + 64) = v9;
    *(_BYTE *)(v111 + 32) = v182;
    v112 = String.init(format:_:)();
    v114 = v113;
    swift_bridgeObjectRetain();
    v115._countAndFlagsBits = v112;
    v115._object = v114;
    String.append(_:)(v115);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v116 = swift_allocObject();
    *(_OWORD *)(v116 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v116 + 56) = v8;
    *(_QWORD *)(v116 + 64) = v9;
    *(_BYTE *)(v116 + 32) = v183;
    v117 = String.init(format:_:)();
    v119 = v118;
    swift_bridgeObjectRetain();
    v120._countAndFlagsBits = v117;
    v120._object = v119;
    String.append(_:)(v120);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v121 = swift_allocObject();
    *(_OWORD *)(v121 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v121 + 56) = v8;
    *(_QWORD *)(v121 + 64) = v9;
    *(_BYTE *)(v121 + 32) = v184;
    v122 = String.init(format:_:)();
    v124 = v123;
    swift_bridgeObjectRetain();
    v125._countAndFlagsBits = v122;
    v125._object = v124;
    String.append(_:)(v125);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v126 = swift_allocObject();
    *(_OWORD *)(v126 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v126 + 56) = v8;
    *(_QWORD *)(v126 + 64) = v9;
    *(_BYTE *)(v126 + 32) = v185;
    v127 = String.init(format:_:)();
    v129 = v128;
    swift_bridgeObjectRetain();
    v130._countAndFlagsBits = v127;
    v130._object = v129;
    String.append(_:)(v130);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v131 = swift_allocObject();
    *(_OWORD *)(v131 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v131 + 56) = v8;
    *(_QWORD *)(v131 + 64) = v9;
    *(_BYTE *)(v131 + 32) = v186;
    v132 = String.init(format:_:)();
    v134 = v133;
    swift_bridgeObjectRetain();
    v135._countAndFlagsBits = v132;
    v135._object = v134;
    String.append(_:)(v135);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v136 = swift_allocObject();
    *(_OWORD *)(v136 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v136 + 56) = v8;
    *(_QWORD *)(v136 + 64) = v9;
    *(_BYTE *)(v136 + 32) = v187;
    v137 = String.init(format:_:)();
    v139 = v138;
    swift_bridgeObjectRetain();
    v140._countAndFlagsBits = v137;
    v140._object = v139;
    String.append(_:)(v140);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v141 = swift_allocObject();
    *(_OWORD *)(v141 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v141 + 56) = v8;
    *(_QWORD *)(v141 + 64) = v9;
    *(_BYTE *)(v141 + 32) = v188;
    v142 = String.init(format:_:)();
    v144 = v143;
    swift_bridgeObjectRetain();
    v145._countAndFlagsBits = v142;
    v145._object = v144;
    String.append(_:)(v145);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v146 = swift_allocObject();
    *(_OWORD *)(v146 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v146 + 56) = v8;
    *(_QWORD *)(v146 + 64) = v9;
    *(_BYTE *)(v146 + 32) = v189;
    v147 = String.init(format:_:)();
    v149 = v148;
    swift_bridgeObjectRetain();
    v150._countAndFlagsBits = v147;
    v150._object = v149;
    String.append(_:)(v150);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v151 = swift_allocObject();
    *(_OWORD *)(v151 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v151 + 56) = v8;
    *(_QWORD *)(v151 + 64) = v9;
    *(_BYTE *)(v151 + 32) = v190;
    v152 = String.init(format:_:)();
    v154 = v153;
    swift_bridgeObjectRetain();
    v155._countAndFlagsBits = v152;
    v155._object = v154;
    String.append(_:)(v155);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v156 = swift_allocObject();
    *(_OWORD *)(v156 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v156 + 56) = v8;
    *(_QWORD *)(v156 + 64) = v9;
    *(_BYTE *)(v156 + 32) = v191;
    v157 = String.init(format:_:)();
    v159 = v158;
    swift_bridgeObjectRetain();
    v160._countAndFlagsBits = v157;
    v160._object = v159;
    String.append(_:)(v160);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v161 = swift_allocObject();
    *(_OWORD *)(v161 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v161 + 56) = v8;
    *(_QWORD *)(v161 + 64) = v9;
    *(_BYTE *)(v161 + 32) = v192;
    v162 = String.init(format:_:)();
    v164 = v163;
    swift_bridgeObjectRetain();
    v165._countAndFlagsBits = v162;
    v165._object = v164;
    String.append(_:)(v165);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v10;
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo11MTLFunction_pG_SSs5NeverOTg50223_s11ShaderGraph21MetalStitchingBackendV7compile7program17uniformDefinition19additionalLibraries7options6deviceSo10MTLLibrary_pAA0cA7ProgramC_AA0C8DataTypeCSaySoAJ_pGAA30SGREMaterialCompilationOptionsCSo9MTLDevice_ptKFSSSo11D8_pXEfU1_0G5Graph0ijK0VTf1cn_nTf4ng_n(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD v15[2];
  uint64_t v16;

  v2 = v1;
  if (a1 >> 62)
    goto LABEL_18;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v5 = MEMORY[0x24BEE4AF8];
    if (!v4)
      return v5;
    v16 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0)
      break;
    v7 = 0;
    v5 = v16;
    while (v4 != v7)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v8 = (void *)MEMORY[0x24954B748](v7, a1);
      }
      else
      {
        v8 = *(void **)(a1 + 8 * v7 + 32);
        swift_unknownObjectRetain();
      }
      v14 = v8;
      closure #3 in MetalStitchingBackend.compile(program:uniformDefinition:additionalLibraries:options:device:)(&v14, v15);
      if (v2)
      {
        swift_release();
        swift_unknownObjectRelease();
        return v5;
      }
      v2 = 0;
      swift_unknownObjectRelease();
      v9 = v15[0];
      v10 = v15[1];
      v16 = v5;
      v12 = *(_QWORD *)(v5 + 16);
      v11 = *(_QWORD *)(v5 + 24);
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        v5 = v16;
      }
      ++v7;
      *(_QWORD *)(v5 + 16) = v12 + 1;
      v13 = v5 + 16 * v12;
      *(_QWORD *)(v13 + 32) = v9;
      *(_QWORD *)(v13 + 40) = v10;
      if (v4 == v7)
        return v5;
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

id specialized Sequence.reduce<A>(into:_:)(id a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;

  if (a2 >> 62)
  {
LABEL_15:
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7)
      goto LABEL_3;
  }
  else
  {
    v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
    {
LABEL_3:
      v8 = 0;
      while (1)
      {
        if ((a2 & 0xC000000000000001) != 0)
        {
          v9 = (void *)MEMORY[0x24954B748](v8, a2);
          v10 = v8 + 1;
          if (__OFADD__(v8, 1))
            goto LABEL_14;
        }
        else
        {
          v9 = *(void **)(a2 + 8 * v8 + 32);
          swift_unknownObjectRetain();
          v10 = v8 + 1;
          if (__OFADD__(v8, 1))
          {
LABEL_14:
            __break(1u);
            goto LABEL_15;
          }
        }
        if (a1)
        {
          swift_unknownObjectRelease();
          ++v8;
          if (v10 == v7)
            break;
        }
        else
        {
          v11 = (void *)MEMORY[0x24954AF98](a3, a4);
          a1 = objc_msgSend(v9, sel_newFunctionWithName_, v11);
          swift_unknownObjectRelease();

          v8 = v10;
          if (v10 == v7)
            break;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;

  v2 = MEMORY[0x24BEE4AF8];
  v19 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v3 = *(_QWORD *)(a1 + 16);
  specialized OrderedSet._reserveCapacity(_:persistent:)(v3, 0, (void (*)(void))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  v4 = v2;
  if (!v3)
    return 0;
  v5 = a1 + 32;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    v8 = (uint64_t *)(v5 + 24 * v7);
    v10 = *v8;
    v9 = v8[1];
    v11 = v8[2];
    v12 = v19[2];
    if (v12)
    {
      if (v19[4] == v10)
        goto LABEL_18;
      if (v12 != 1)
      {
        if (v19[5] == v10)
          goto LABEL_18;
        if (v12 != 2)
          break;
      }
    }
LABEL_8:
    swift_bridgeObjectRetain();
    result = specialized OrderedSet._appendNew(_:in:)(v10, 0);
    v14 = *(_QWORD *)(v4 + 16);
    v13 = *(_QWORD *)(v4 + 24);
    if (v14 >= v13 >> 1)
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
    ++v7;
    *(_QWORD *)(v4 + 16) = v14 + 1;
    v15 = v4 + 16 * v14;
    *(_QWORD *)(v15 + 32) = v9;
    *(_QWORD *)(v15 + 40) = v11;
    if (v7 == v3)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  if (v19[6] != v10)
  {
    v16 = v12 - 3;
    v17 = v19 + 7;
    while (v16)
    {
      v18 = *v17++;
      --v16;
      if (v18 == v10)
        goto LABEL_18;
    }
    goto LABEL_8;
  }
LABEL_18:
  __break(1u);
  return result;
}

id specialized MetalStitchingBackend.builtinLibrary(for:)(void *a1)
{
  uint64_t ObjCClassFromMetadata;
  id v3;
  id v4;
  id v5;
  id v6;
  id v8[2];

  v8[1] = *(id *)MEMORY[0x24BDAC8D0];
  type metadata accessor for SGGraph();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v3 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v8[0] = 0;
  v4 = objc_msgSend(a1, sel_newDefaultLibraryWithBundle_error_, v3, v8);
  if (v4)
  {
    v5 = v8[0];
  }
  else
  {
    v6 = v8[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }

  return v4;
}

id specialized MetalStitchingBackend.specializeGetter(for:field:offset:library:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, id a5, int a6, void *a7)
{
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  id v30;
  void *v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t (*v41)(uint64_t);
  uint64_t v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  id v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  if (one-time initialization token for typeToLookupFunctionMap != -1)
    swift_once();
  swift_beginAccess();
  v14 = static MetalStitchingBackend.typeToLookupFunctionMap;
  if (!*(_QWORD *)(static MetalStitchingBackend.typeToLookupFunctionMap + 16))
    goto LABEL_11;
  v15 = swift_retain();
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
  if ((v17 & 1) == 0)
  {
    swift_release();
LABEL_11:
    swift_endAccess();
    v37 = *(_QWORD *)(a1 + 32);
    v56 = *(id *)(a1 + 24);
    v57 = v37;
    swift_bridgeObjectRetain();
    v38._countAndFlagsBits = 46;
    v38._object = (void *)0xE100000000000000;
    String.append(_:)(v38);
    swift_bridgeObjectRetain();
    v39._countAndFlagsBits = a2;
    v39._object = a3;
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    v40._countAndFlagsBits = 10272;
    v40._object = (void *)0xE200000000000000;
    String.append(_:)(v40);
    v41 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 136);
    v42 = swift_retain();
    v43._countAndFlagsBits = v41(v42);
    String.append(_:)(v43);
    swift_release();
    swift_bridgeObjectRelease();
    v44._countAndFlagsBits = 41;
    v44._object = (void *)0xE100000000000000;
    String.append(_:)(v44);
    v45 = v57;
    lazy protocol witness table accessor for type MetalStitchingBackendErrors and conformance MetalStitchingBackendErrors();
    swift_allocError();
    *(_QWORD *)v46 = v56;
    *(_QWORD *)(v46 + 8) = v45;
    *(_BYTE *)(v46 + 16) = 4;
    swift_willThrow();
    return a5;
  }
  v18 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 16 * v16);
  v54 = *v18;
  v55 = a7;
  v53 = v18[1];
  swift_endAccess();
  swift_bridgeObjectRetain();
  swift_release();
  v19 = lazy protocol witness table accessor for type String and conformance String();
  v20 = MEMORY[0x24BEE0D00];
  v56 = (id)StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v57 = v21;
  v51 = v19;
  v52 = v19;
  v49 = v20;
  v50 = v19;
  v22 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v24 = v23;
  swift_bridgeObjectRelease();
  v25 = *(_QWORD *)(a1 + 32);
  v56 = *(id *)(a1 + 24);
  v57 = v25;
  swift_bridgeObjectRetain();
  v26._countAndFlagsBits = 95;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 95;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  v29._countAndFlagsBits = v22;
  v29._object = v24;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  a5 = v56;
  v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD5B0]), sel_init, v49, v50, v51, v52);
  v31 = (void *)MEMORY[0x24954AF98](v56, v57);
  objc_msgSend(v30, sel_setSpecializedName_, v31);

  v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD5A0]), sel_init);
  objc_msgSend(v30, sel_setConstantValues_, v32);

  v33 = (void *)MEMORY[0x24954AF98](v54, v53);
  swift_bridgeObjectRelease();
  objc_msgSend(v30, sel_setName_, v33);

  LODWORD(v56) = a6;
  v34 = objc_msgSend(v30, sel_constantValues);
  if (v34)
  {
    v35 = v34;
    objc_msgSend(v34, sel_setConstantValue_type_atIndex_, &v56, 33, 100);

  }
  v56 = 0;
  if (objc_msgSend(v55, sel_newFunctionWithDescriptor_error_, v30, &v56))
  {
    v36 = v56;
  }
  else
  {
    v48 = v56;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }

  return a5;
}

void specialized MetalStitchingBackend.generateStructGetters(for:augmenting:library:)(uint64_t a1, _QWORD *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  void *v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v46;
  char isUniquelyReferenced_nonNull_native;
  BOOL v48;
  _QWORD *v49;
  uint64_t v50;
  char v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62[3];
  _QWORD v63[4];
  char v64;
  uint64_t v65;
  _QWORD *v66;

  type metadata accessor for MetalDataType.Struct();
  v5 = swift_dynamicCastClass();
  if (!v5)
  {
    if (one-time initialization token for logger != -1)
      goto LABEL_63;
    goto LABEL_7;
  }
  v6 = v5;
  swift_beginAccess();
  v7 = *(_QWORD *)(v6 + 16);
  v66 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v61 = 0;
  v8 = *(_QWORD *)(v7 + 16);
  v56 = v6;
  if (v8)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    v9 = (_QWORD *)(v7 + 72);
    do
    {
      v10 = *(v9 - 5);
      v11 = *(v9 - 4);
      v12 = *(v9 - 3);
      v13 = *(v9 - 2);
      v14 = *((_BYTE *)v9 - 8);
      v15 = *v9;
      v9 += 6;
      v63[0] = v10;
      v63[1] = v11;
      v63[2] = v12;
      v63[3] = v13;
      v64 = v14;
      v65 = v15;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      specialized closure #1 in calculateOffsets(for:)((uint64_t)v63, &v61, &v66);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    v16 = v66;
  }
  else
  {
    swift_retain();
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v55 = v16[2];
  if (!v55)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  v54 = v16 + 4;
  v24 = a2 + 2;
  swift_bridgeObjectRetain();
  a1 = 0;
  v53 = a2;
  while (1)
  {
    v26 = &v54[7 * a1];
    v27 = v26[2];
    v28 = *((_DWORD *)v26 + 12);
    v29 = (void *)v26[5];
    v30 = *v26;
    v31 = (void *)v26[1];
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    v32 = specialized MetalStitchingBackend.specializeGetter(for:field:offset:library:)(v56, v30, v31, v27, v29, v28, a3);
    if (v60)
    {
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
LABEL_59:
      swift_bridgeObjectRelease_n();
      return;
    }
    v35 = (uint64_t)v32;
    v36 = v33;
    v59 = v34;
    v37 = v24;
    v39 = *a2;
    v38 = (_QWORD *)a2[1];
    v40 = v38[2];
    if (*a2)
    {
      swift_retain();
      swift_retain();
      v58 = v36;
      v41 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v35, v36, (uint64_t)(v38 + 4), v40, (_QWORD *)(v39 + 16), v39 + 32);
      v43 = v42;
      v25 = v44;
      swift_release();
      swift_release();
      if ((v43 & 1) == 0)
      {
        a2 = v53;
        v24 = v37;
        goto LABEL_29;
      }
      a2 = v53;
      v24 = v37;
      goto LABEL_27;
    }
    v24 = v37;
    if (v40)
      break;
    v25 = 0;
LABEL_13:
    swift_unknownObjectRetain();
    specialized OrderedSet._appendNew(_:in:)(v35, v36, v25);
    swift_unknownObjectRetain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
LABEL_14:
    ++a1;
    specialized ContiguousArray._endMutation()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease_n();
    if (a1 == v55)
    {
      swift_release();
      goto LABEL_59;
    }
  }
  if ((id)v38[4] == v32 && v38[5] == v33)
  {
    v41 = 0;
    goto LABEL_29;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v41 = 0;
    goto LABEL_29;
  }
  if (v40 == 1)
    goto LABEL_35;
  v48 = v38[6] == v35 && v38[7] == v36;
  if (v48 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v41 = 1;
    goto LABEL_29;
  }
  if (v40 == 2)
  {
LABEL_35:
    v25 = 0;
    goto LABEL_13;
  }
  v58 = v36;
  if ((v38[8] != v35 || v38[9] != v36) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    v49 = v38 + 11;
    v50 = 3;
    while (v40 != v50)
    {
      v41 = v50;
      if (*(v49 - 1) != v35 || *v49 != v58)
      {
        v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v50 = v41 + 1;
        v49 += 2;
        if ((v52 & 1) == 0)
          continue;
      }
      goto LABEL_29;
    }
    v25 = 0;
LABEL_27:
    v36 = v58;
    goto LABEL_13;
  }
  v41 = 2;
LABEL_29:
  v46 = *v24;
  swift_unknownObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v24 = v46;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v46);
  if ((v41 & 0x8000000000000000) == 0)
  {
    if (v41 >= *(_QWORD *)(v46 + 16))
      goto LABEL_62;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(_QWORD *)(v46 + 8 * v41 + 32) = v59;
    goto LABEL_14;
  }
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  swift_once();
LABEL_7:
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)logger);
  swift_retain();
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    v21 = swift_slowAlloc();
    v62[0] = v21;
    *(_DWORD *)v20 = 136315138;
    v22 = *(_QWORD *)(a1 + 24);
    v23 = *(_QWORD *)(a1 + 32);
    swift_bridgeObjectRetain();
    v66 = (_QWORD *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_245E46000, v18, v19, "Can not generate getters for a non-struct type %s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24954C33C](v21, -1, -1);
    MEMORY[0x24954C33C](v20, -1, -1);

  }
  else
  {

    swift_release();
  }
}

uint64_t outlined copy of MetalStitchingBackendErrors(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 5u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for MetalStitchingBackendErrors(uint64_t a1)
{
  return outlined consume of MetalStitchingBackendErrors(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of MetalStitchingBackendErrors(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 5u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MetalStitchingBackendErrors(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of MetalStitchingBackendErrors(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for MetalStitchingBackendErrors(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of MetalStitchingBackendErrors(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of MetalStitchingBackendErrors(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for MetalStitchingBackendErrors(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of MetalStitchingBackendErrors(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetalStitchingBackendErrors(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 250);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 6)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MetalStitchingBackendErrors(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 250;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for MetalStitchingBackendErrors(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 5u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 6);
}

uint64_t destructiveInjectEnumTag for MetalStitchingBackendErrors(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(_QWORD *)result = a2 - 6;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 6;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MetalStitchingBackendErrors()
{
  return &type metadata for MetalStitchingBackendErrors;
}

ValueMetadata *type metadata accessor for MetalStitchingBackend()
{
  return &type metadata for MetalStitchingBackend;
}

void specialized MetalStitchingBackend.constantFunction(for:name:type:library:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  id v8;
  _BYTE v9[72];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD5B0]), sel_init);
  v7 = (void *)MEMORY[0x24954AF98](a2, a3);
  objc_msgSend(v6, sel_setSpecializedName_, v7);

  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD5A0]), sel_init);
  objc_msgSend(v6, sel_setConstantValues_, v8);

  outlined init with take of SGDataTypeStorage(a1, (uint64_t)v9);
  __asm { BR              X10 }
}

uint64_t sub_245F9D064()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  outlined init with take of SGDataTypeStorage(v1, (uint64_t)&v4);
  _print_unlocked<A, B>(_:_:)();
  lazy protocol witness table accessor for type MetalStitchingBackendErrors and conformance MetalStitchingBackendErrors();
  swift_allocError();
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0xE000000000000000;
  *(_BYTE *)(v2 + 16) = 3;
  swift_willThrow();

  return 0;
}

uint64_t specialized closure #3 in closure #3 in MetalStitchingBackend.stitchingGraphs(for:augmenting:coreLibrary:additionalLibraries:)(uint64_t a1, uint64_t *a2, _QWORD *a3, void *a4, uint64_t *a5, _QWORD *a6, _QWORD *a7, unint64_t a8)
{
  uint64_t v8;
  _QWORD *v15;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  id object;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char isUniquelyReferenced_nonNull_native;
  id v51;
  void *v52;
  Class v53;
  Class v54;
  id v55;
  uint64_t v56;
  id v57;
  void *v58;
  id v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t);
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  Class isa;
  Class v70;
  id v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(_QWORD *);
  _QWORD *(*v77)(_OWORD *__return_ptr);
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE v86[40];
  _OWORD v87[3];
  uint64_t v88;
  uint64_t v89;
  char v90;
  _QWORD v91[10];
  _OWORD v92[3];
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t *v97;

  v97 = a5;
  v15 = (_QWORD *)a1;
  outlined init with copy of MetalFunctionNode(a1, (uint64_t)v86);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetalFunctionNode);
  type metadata accessor for MetalFunctionParameterNode();
  if (swift_dynamicCast())
    goto LABEL_3;
  type metadata accessor for MetalFunctionDefinitionNode();
  if (swift_dynamicCast())
    goto LABEL_3;
  type metadata accessor for MetalLiteralValueNode();
  if (!swift_dynamicCast())
  {
    type metadata accessor for MetalFunctionCallNode();
    if (!swift_dynamicCast())
    {
LABEL_14:
      __swift_project_boxed_opaque_existential_1(v15, v15[3]);
      swift_getDynamicType();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetalFunctionNode.Type);
      v41 = String.init<A>(describing:)();
      v43 = v42;
      lazy protocol witness table accessor for type MetalStitchingBackendErrors and conformance MetalStitchingBackendErrors();
      swift_allocError();
      *(_QWORD *)v44 = v41;
      *(_QWORD *)(v44 + 8) = v43;
      *(_BYTE *)(v44 + 16) = 1;
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v86);
    }
    v81 = a7;
    v30 = *(_QWORD *)(v83 + 56);
    v31 = *(_QWORD *)(v83 + 64);
    v32 = *v97;
    v33 = (_QWORD *)v97[1];
    v34 = v97[2];
    swift_bridgeObjectRetain_n();
    v35 = specialized OrderedSet._find(_:)(v30, v31, v32, v33);
    v82 = a6;
    if ((v36 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v58 = (void *)MEMORY[0x24954AF98](v30, v31);
      v59 = objc_msgSend(a4, sel_newFunctionWithName_, v58);

      v60 = v30;
      if (v59)
      {
        v40 = v83;
      }
      else
      {
        swift_bridgeObjectRetain();
        v59 = specialized Sequence.reduce<A>(into:_:)(0, a8, v30, v31);
        swift_bridgeObjectRelease();
        v40 = v83;
        if (!v59)
        {
          lazy protocol witness table accessor for type MetalStitchingBackendErrors and conformance MetalStitchingBackendErrors();
          swift_allocError();
          *(_QWORD *)v75 = v60;
          *(_QWORD *)(v75 + 8) = v31;
          *(_BYTE *)(v75 + 16) = 0;
          goto LABEL_32;
        }
      }
      swift_bridgeObjectRetain();
      v37 = v60;
      v39 = specialized OrderedDictionary.subscript.setter((uint64_t)v59, v60, v31);
    }
    else
    {
      v15 = (_QWORD *)v35;
      if (v35 < 0)
      {
        __break(1u);
        goto LABEL_38;
      }
      v37 = v30;
      v38 = *(_QWORD *)(v34 + 16);
      v39 = swift_bridgeObjectRelease();
      v40 = v83;
      if ((unint64_t)v15 >= v38)
      {
        __break(1u);
        goto LABEL_14;
      }
    }
    v61 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 152);
    v62 = v61(v39);
    v63 = specialized Sequence.compactMap<A>(_:)(v62, v82);
    v64 = swift_bridgeObjectRelease();
    if (v63 >> 62)
    {
      swift_bridgeObjectRetain();
      v65 = _CocoaArrayWrapper.endIndex.getter();
      v64 = swift_bridgeObjectRelease();
    }
    else
    {
      v65 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v66 = *(_QWORD *)(v61(v64) + 16);
    swift_bridgeObjectRelease();
    if (v65 == v66)
    {
      v67 = objc_allocWithZone(MEMORY[0x24BDDD5C8]);
      v68 = (void *)MEMORY[0x24954AF98](v37, v31);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MTLFunctionStitchingNode);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for MTLFunctionStitchingFunctionNode);
      v70 = Array._bridgeToObjectiveC()().super.isa;
      v71 = objc_msgSend(v67, sel_initWithName_arguments_controlDependencies_, v68, isa, v70);

      v72 = (*(uint64_t (**)(void))(*(_QWORD *)v40 + 128))();
      v73 = v71;
      specialized OrderedDictionary.subscript.setter((uint64_t)v71, v72);
      v15 = v73;
      MEMORY[0x24954B1A8]();
      if (*(_QWORD *)((*v81 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*v81 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      {
LABEL_30:
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_release();

        return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v86);
      }
LABEL_38:
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      goto LABEL_30;
    }
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MetalStitchingBackendErrors and conformance MetalStitchingBackendErrors();
    swift_allocError();
    *(_QWORD *)v74 = v37;
    *(_QWORD *)(v74 + 8) = v31;
    *(_BYTE *)(v74 + 16) = 5;
LABEL_32:
    swift_willThrow();
    goto LABEL_3;
  }
  v77 = *(_QWORD *(**)(_OWORD *__return_ptr))(*(_QWORD *)v85 + 224);
  v17 = v77(v87);
  v79 = v87[1];
  v80 = v87[0];
  v78 = v87[2];
  v18 = a7;
  v19 = v88;
  v20 = v89;
  v21 = v90;
  v76 = *(uint64_t (**)(_QWORD *))(*(_QWORD *)v85 + 176);
  v22 = v76(v17);
  v23 = *a2;
  v92[0] = v80;
  v92[1] = v79;
  v92[2] = v78;
  v93 = v19;
  v94 = v20;
  v24 = v18;
  v95 = v21;
  v96 = v22;
  if (*(_QWORD *)(v23 + 16))
  {
    outlined retain of SGDataTypeStorage((uint64_t)v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of SGDataTypeStorage);
    swift_retain();
    v25 = specialized __RawDictionaryStorage.find<A>(_:)(v92);
    if ((v26 & 1) != 0)
    {
      v27 = (unint64_t *)(*(_QWORD *)(v23 + 56) + 16 * v25);
      v28 = *v27;
      v29 = v27[1];
      swift_bridgeObjectRetain();
      outlined retain of SGDataTypeStorage((uint64_t)v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of SGDataTypeStorage);
      swift_release();
      goto LABEL_20;
    }
    outlined retain of SGDataTypeStorage((uint64_t)v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of SGDataTypeStorage);
    swift_release();
  }
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v45._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  object = v45._object;
  String.append(_:)(v45);
  v47 = swift_bridgeObjectRelease();
  if (__OFADD__(*a3, 1))
  {
    __break(1u);
    goto LABEL_35;
  }
  v28 = 0xD000000000000010;
  v29 = 0x8000000245FCE0F0;
  ++*a3;
  v48 = ((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))v77)(v91, v47);
  v76(v48);
  specialized MetalStitchingBackend.constantFunction(for:name:type:library:)((uint64_t)v91, 0xD000000000000010, 0x8000000245FCE0F0);
  if (!v8)
  {
    swift_release();
    outlined retain of SGDataTypeStorage((uint64_t)v91, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of SGDataTypeStorage);
    swift_bridgeObjectRetain();
    v49 = swift_unknownObjectRetain();
    specialized OrderedDictionary.subscript.setter(v49, 0xD000000000000010, 0x8000000245FCE0F0);
    outlined retain of SGDataTypeStorage((uint64_t)v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of SGDataTypeStorage);
    swift_retain();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v84 = *a2;
    *a2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0xD000000000000010, 0x8000000245FCE0F0, v92, isUniquelyReferenced_nonNull_native);
    *a2 = v84;
    swift_bridgeObjectRelease();
    outlined retain of SGDataTypeStorage((uint64_t)v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of SGDataTypeStorage);
    swift_unknownObjectRelease();
    swift_release();
LABEL_20:
    v51 = objc_allocWithZone(MEMORY[0x24BDDD5C8]);
    v52 = (void *)MEMORY[0x24954AF98](v28, v29);
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MTLFunctionStitchingNode);
    v53 = Array._bridgeToObjectiveC()().super.isa;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for MTLFunctionStitchingFunctionNode);
    v54 = Array._bridgeToObjectiveC()().super.isa;
    v55 = objc_msgSend(v51, sel_initWithName_arguments_controlDependencies_, v52, v53, v54);

    v56 = (*(uint64_t (**)(void))(*(_QWORD *)v85 + 128))();
    v57 = v55;
    specialized OrderedDictionary.subscript.setter((uint64_t)v55, v56);
    object = v57;
    MEMORY[0x24954B1A8]();
    if (*(_QWORD *)((*v24 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    {
LABEL_21:
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      outlined retain of SGDataTypeStorage((uint64_t)v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of SGDataTypeStorage);
      swift_release();

      goto LABEL_3;
    }
LABEL_35:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_21;
  }
  swift_bridgeObjectRelease();
  outlined retain of SGDataTypeStorage((uint64_t)v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of SGDataTypeStorage);
  swift_release();
  swift_release();
  outlined retain of SGDataTypeStorage((uint64_t)v91, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of SGDataTypeStorage);
LABEL_3:
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v86);
}

void specialized closure #4 in closure #3 in MetalStitchingBackend.stitchingGraphs(for:augmenting:coreLibrary:additionalLibraries:)(id *a1, uint64_t a2)
{
  unint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Swift::String v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  id v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  _QWORD *v47;

  v3 = (unint64_t)*a1;
  v4 = objc_msgSend(*a1, sel_name);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  v8 = *(_QWORD *)(a2 + 16);
  v9 = specialized OrderedSet._find(_:)(v5, v7, *(_QWORD *)a2, *(_QWORD **)(a2 + 8));
  if ((v10 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return;
  }
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v9 >= *(_QWORD *)(v8 + 16))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  a2 = *(_QWORD *)(v8 + 8 * v9 + 32);
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  v11 = specialized MetalStitchingBackend.mtlFunctionHash(_:)();
  if (!v12)
  {
    if (one-time initialization token for logger == -1)
      goto LABEL_18;
    goto LABEL_27;
  }
  v13 = v11;
  v14 = v12;
  _StringGuts.grow(_:)(18);
  v47 = objc_msgSend((id)v3, sel_hash);
  v15 = dispatch thunk of CustomStringConvertible.description.getter();
  v17 = v16;
  swift_bridgeObjectRelease();
  v46._countAndFlagsBits = v15;
  v46._object = v17;
  v18._countAndFlagsBits = 2128928;
  v18._object = (void *)0xE300000000000000;
  String.append(_:)(v18);
  v19 = objc_msgSend((id)v3, sel_name);
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v22 = v21;

  v23._countAndFlagsBits = v20;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 2128928;
  v24._object = (void *)0xE300000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = v13;
  v25._object = v14;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 2128928;
  v26._object = (void *)0xE300000000000000;
  String.append(_:)(v26);
  v27 = objc_msgSend((id)v3, sel_arguments);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MTLFunctionStitchingNode);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 >> 62)
  {
LABEL_23:
    swift_bridgeObjectRetain();
    v28 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v28)
      goto LABEL_7;
LABEL_24:
    swift_bridgeObjectRelease();
    v30 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_25:
    v44._countAndFlagsBits = MEMORY[0x24954B1D8](v30, MEMORY[0x24BEE1768]);
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v45._countAndFlagsBits = 10;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    String.append(_:)(v46);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  v28 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v28)
    goto LABEL_24;
LABEL_7:
  v47 = (_QWORD *)MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28 & ~(v28 >> 63), 0);
  if ((v28 & 0x8000000000000000) == 0)
  {
    v29 = 0;
    v30 = v47;
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        v31 = (void *)MEMORY[0x24954B748](v29, v3);
      }
      else
      {
        v31 = *(void **)(v3 + 8 * v29 + 32);
        swift_unknownObjectRetain();
      }
      v32 = objc_msgSend(v31, sel_hash);
      swift_unknownObjectRelease();
      v47 = v30;
      v34 = v30[2];
      v33 = v30[3];
      if (v34 >= v33 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
        v30 = v47;
      }
      ++v29;
      v30[2] = v34 + 1;
      v30[v34 + 4] = v32;
    }
    while (v28 != v29);
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  __break(1u);
LABEL_27:
  swift_once();
LABEL_18:
  v35 = type metadata accessor for Logger();
  __swift_project_value_buffer(v35, (uint64_t)logger);
  swift_unknownObjectRetain_n();
  v36 = Logger.logObject.getter();
  v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc();
    v39 = swift_slowAlloc();
    v46._countAndFlagsBits = v39;
    *(_DWORD *)v38 = 136315138;
    v40 = objc_msgSend((id)a2, sel_name);
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v43 = v42;

    v47 = (_QWORD *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v43, &v46._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_245E46000, v36, v37, "Unable to obtain hash for function %s", v38, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24954C33C](v39, -1, -1);
    MEMORY[0x24954C33C](v38, -1, -1);
    swift_unknownObjectRelease();

  }
  else
  {

    swift_unknownObjectRelease_n();
  }
}

uint64_t specialized closure #3 in MetalStitchingBackend.stitchingGraphs(for:augmenting:coreLibrary:additionalLibraries:)(_QWORD *a1, uint64_t a2, uint64_t *a3, _QWORD *a4, void *a5, uint64_t *a6, unint64_t a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v9;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  id v31;
  id v32;
  id v33;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t *v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  _QWORD *v55;
  id v56;
  uint64_t v57;
  Swift::UInt v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  Swift::Int v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  void *v85;
  Class isa;
  Class v87;
  id v88;
  id v89;
  uint64_t *v90;
  void *v91;
  unint64_t v92;
  uint64_t *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  _UNKNOWN **v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;

  v15 = (_QWORD *)*a1;
  v16 = type metadata accessor for MetalFunctionDefinitionNode();
  v102 = v16;
  v103 = &protocol witness table for MetalFunctionDefinitionNode;
  v101 = v15;
  swift_retain();
  v17 = MetalShaderProgram.topologicalSort(from:)(&v101);
  if (v9)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v101);
  v97 = v17;
  v92 = a7;
  v93 = a6;
  v95 = v16;
  v98 = a4;
  v90 = a3;
  v91 = a5;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v101);
  v19 = MEMORY[0x24BEE4AF8];
  v104 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x24BEE4AF8]);
  v105 = v20;
  v106 = v21;
  v107 = v19;
  v22 = (*(uint64_t (**)(void))(*v15 + 256))();
  v23 = specialized Dictionary.init(dictionaryLiteral:)(v19);
  v24 = (_QWORD *)v23;
  v99 = *(_QWORD *)(v22 + 16);
  v94 = v15;
  if (v99)
  {
    swift_bridgeObjectRetain();
    v25 = 0;
    v26 = (_QWORD *)(v22 + 48);
    while (1)
    {
      v28 = *(v26 - 2);
      v29 = *(v26 - 1);
      v30 = (_QWORD *)*v26;
      v31 = objc_allocWithZone(MEMORY[0x24BDDD5D8]);
      swift_bridgeObjectRetain();
      v100 = v30;
      swift_retain();
      v32 = objc_msgSend(v31, sel_initWithArgumentIndex_, v25);
      swift_bridgeObjectRetain();
      v33 = v32;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v101 = v24;
      v36 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v29);
      v37 = v24[2];
      v38 = (v35 & 1) == 0;
      v39 = v37 + v38;
      if (__OFADD__(v37, v38))
      {
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
        goto LABEL_67;
      }
      a7 = v35;
      if (v24[3] >= v39)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v24 = v101;
          if ((v35 & 1) == 0)
            goto LABEL_14;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v24 = v101;
          if ((a7 & 1) == 0)
            goto LABEL_14;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v39, isUniquelyReferenced_nonNull_native);
        v40 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v29);
        if ((a7 & 1) != (v41 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          JUMPOUT(0x245F9FA84);
        }
        v36 = v40;
        v24 = v101;
        if ((a7 & 1) == 0)
        {
LABEL_14:
          v24[(v36 >> 6) + 8] |= 1 << v36;
          v42 = (uint64_t *)(v24[6] + 16 * v36);
          *v42 = v28;
          v42[1] = v29;
          *(_QWORD *)(v24[7] + 8 * v36) = v33;
          v43 = v24[2];
          v44 = __OFADD__(v43, 1);
          v45 = v43 + 1;
          if (v44)
            goto LABEL_65;
          v24[2] = v45;
          swift_bridgeObjectRetain();
          goto LABEL_6;
        }
      }
      v27 = v24[7];

      *(_QWORD *)(v27 + 8 * v36) = v33;
LABEL_6:
      swift_release();

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      ++v25;
      v26 += 3;
      if (v99 == v25)
      {
        v100 = v24;
        swift_bridgeObjectRelease();
        v15 = v94;
        goto LABEL_20;
      }
    }
  }
  v100 = (_QWORD *)v23;
LABEL_20:
  swift_bridgeObjectRelease();
  v102 = v95;
  v103 = &protocol witness table for MetalFunctionDefinitionNode;
  v101 = v15;
  swift_retain();
  a7 = MetalShaderProgram.parameterNodes(connectedTo:)(&v101);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v101);
  v99 = a7 >> 62;
  if (a7 >> 62)
  {
LABEL_67:
    swift_bridgeObjectRetain();
    v46 = _CocoaArrayWrapper.endIndex.getter();
    v47 = v98;
    if (v46)
    {
LABEL_22:
      if ((a7 & 0xC000000000000001) != 0)
        goto LABEL_92;
      v48 = *(_QWORD *)(a7 + 32);
      v49 = swift_retain();
LABEL_24:
      v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 192))(v49);
      if (v100[2])
      {
        v52 = specialized __RawDictionaryStorage.find<A>(_:)(v50, v51);
        if ((v53 & 1) != 0)
        {
          v96 = v46;
          v54 = 1;
          v55 = v100;
          while (1)
          {
            v56 = *(id *)(v55[7] + 8 * v52);
            v57 = swift_bridgeObjectRelease();
            v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 120))(v57);
            v59 = v58;
            v60 = v105 + 4;
            v61 = v105[2];
            if (v104)
            {
              v62 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v58, (uint64_t)v60, v61, (_QWORD *)(v104 + 16), v104 + 32);
              if ((v64 & 1) != 0)
              {
                v67 = v63;
                goto LABEL_41;
              }
              v65 = v62;
            }
            else
            {
              if (!v61)
                goto LABEL_40;
              if (*v60 == v58)
              {
                v65 = 0;
              }
              else
              {
                if (v61 == 1)
                  goto LABEL_40;
                if (v105[5] == v58)
                {
                  v65 = 1;
                }
                else
                {
                  if (v61 == 2)
                    goto LABEL_40;
                  if (v105[6] == v58)
                  {
                    v65 = 2;
                  }
                  else
                  {
                    if (v61 == 3)
                      goto LABEL_40;
                    if (v105[7] != v58)
                    {
                      v71 = 0;
                      while (v61 - 4 != v71)
                      {
                        v72 = v105[v71++ + 8];
                        if (v72 == v58)
                        {
                          v65 = v71 + 3;
                          goto LABEL_33;
                        }
                      }
LABEL_40:
                      v67 = 0;
LABEL_41:
                      swift_unknownObjectRetain();
                      specialized OrderedSet._appendNew(_:in:)(v59, v67);
                      swift_unknownObjectRetain();
                      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                      goto LABEL_42;
                    }
                    v65 = 3;
                  }
                }
              }
            }
LABEL_33:
            v46 = v106;
            v66 = v56;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v46);
            if ((v65 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_91:
              __break(1u);
LABEL_92:
              v49 = MEMORY[0x24954B748](0, a7);
              v48 = v49;
              goto LABEL_24;
            }
            if (v65 >= *(_QWORD *)(v46 + 16))
              goto LABEL_91;
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            *(_QWORD *)(v46 + 8 * v65 + 32) = v66;
            v46 = v96;
LABEL_42:
            specialized ContiguousArray._endMutation()();

            swift_release();
            v47 = v98;
            if (v54 == v46)
              goto LABEL_68;
            if ((a7 & 0xC000000000000001) != 0)
            {
              v48 = MEMORY[0x24954B748](v54, a7);
              v44 = __OFADD__(v54++, 1);
              if (v44)
                goto LABEL_66;
            }
            else
            {
              v48 = *(_QWORD *)(a7 + 32 + 8 * v54);
              swift_retain();
              v44 = __OFADD__(v54++, 1);
              if (v44)
                goto LABEL_66;
            }
            v68 = (*(uint64_t (**)(void))(*(_QWORD *)v48 + 192))();
            if (v100[2])
            {
              v52 = specialized __RawDictionaryStorage.find<A>(_:)(v68, v69);
              v55 = v100;
              if ((v70 & 1) != 0)
                continue;
            }
            break;
          }
        }
      }
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type MetalStitchingBackendErrors and conformance MetalStitchingBackendErrors();
      swift_allocError();
      *(_OWORD *)v73 = xmmword_245FC1E10;
      *(_BYTE *)(v73 + 16) = 6;
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_release();
      goto LABEL_85;
    }
  }
  else
  {
    v46 = *(_QWORD *)((a7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v47 = v98;
    if (v46)
      goto LABEL_22;
  }
LABEL_68:
  swift_bridgeObjectRelease();
  v74 = *(_QWORD *)(v97 + 16);
  if (v74)
  {
    v75 = v97 + 32;
    swift_bridgeObjectRetain();
    do
    {
      specialized closure #3 in closure #3 in MetalStitchingBackend.stitchingGraphs(for:augmenting:coreLibrary:additionalLibraries:)(v75, v90, v47, v91, v93, &v104, &v107, v92);
      v75 += 40;
      --v74;
    }
    while (v74);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (v107 >> 62)
  {
    swift_bridgeObjectRetain();
    v76 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v76 = *(_QWORD *)((v107 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v77 = *(_QWORD *)(v106 + 16);
  if (v99)
  {
    swift_bridgeObjectRetain();
    v78 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v78 = *(_QWORD *)((a7 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (__OFSUB__(v77, v78))
  {
    __break(1u);
LABEL_95:
    swift_once();
    goto LABEL_82;
  }
  if (v76 != v77 - v78)
  {
    lazy protocol witness table accessor for type MetalStitchingBackendErrors and conformance MetalStitchingBackendErrors();
    swift_allocError();
    *(_OWORD *)v81 = xmmword_245FC2060;
    *(_BYTE *)(v81 + 16) = 6;
    swift_willThrow();
    swift_bridgeObjectRelease();
LABEL_85:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_release();
  }
  if (one-time initialization token for debugMode != -1)
    goto LABEL_95;
LABEL_82:
  swift_beginAccess();
  v79 = static DebugConfig.debugMode;
  if (*(_QWORD *)(static DebugConfig.debugMode + 16))
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v80 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v79 + 32));
    if (((*(_QWORD *)(v79 + 56 + ((v80 >> 3) & 0xFFFFFFFFFFFFF8)) >> v80) & 1) != 0)
      __asm { BR              X9 }
    swift_bridgeObjectRelease();
  }
  v82 = v94[7];
  v83 = v94[8];
  v84 = objc_allocWithZone(MEMORY[0x24BDDD5D0]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v85 = (void *)MEMORY[0x24954AF98](v82, v83);
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for MTLFunctionStitchingFunctionNode);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MTLFunctionStitchingAttribute);
  v87 = Array._bridgeToObjectiveC()().super.isa;
  v88 = objc_msgSend(v84, sel_initWithFunctionName_nodes_outputNode_attributes_, v85, isa, 0, v87);

  v89 = v88;
  MEMORY[0x24954B1A8]();
  if (*(_QWORD *)((*a9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  return swift_release();
}

ValueMetadata *type metadata accessor for ConstantKey #1 in MetalStitchingBackend.stitchingGraphs(for:augmenting:coreLibrary:additionalLibraries:)()
{
  return &type metadata for ConstantKey #1 in MetalStitchingBackend.stitchingGraphs(for:augmenting:coreLibrary:additionalLibraries:);
}

unint64_t lazy protocol witness table accessor for type ConstantKey #1 in MetalStitchingBackend.stitchingGraphs(for:augmenting:coreLibrary:additionalLibraries:) and conformance ConstantKey #1 in MetalStitchingBackend.stitchingGraphs(for:augmenting:coreLibrary:additionalLibraries:)()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConstantKey #1 in MetalStitchingBackend.stitchingGraphs(for:augmenting:coreLibrary:additionalLibraries:) and conformance ConstantKey #1 in MetalStitchingBackend.stitchingGraphs(for:augmenting:coreLibrary:additionalLibraries:);
  if (!lazy protocol witness table cache variable for type ConstantKey #1 in MetalStitchingBackend.stitchingGraphs(for:augmenting:coreLibrary:additionalLibraries:) and conformance ConstantKey #1 in MetalStitchingBackend.stitchingGraphs(for:augmenting:coreLibrary:additionalLibraries:))
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for ConstantKey #1 in MetalStitchingBackend.stitchingGraphs(for:augmenting:coreLibrary:additionalLibraries:), &type metadata for ConstantKey #1 in MetalStitchingBackend.stitchingGraphs(for:augmenting:coreLibrary:additionalLibraries:));
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantKey #1 in MetalStitchingBackend.stitchingGraphs(for:augmenting:coreLibrary:additionalLibraries:) and conformance ConstantKey #1 in MetalStitchingBackend.stitchingGraphs(for:augmenting:coreLibrary:additionalLibraries:));
  }
  return result;
}

uint64_t OrderedSet.SubSequence._slice.getter()
{
  return ContiguousArray.subscript.getter();
}

uint64_t OrderedSet.SubSequence._base.getter(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t OrderedSet.SubSequence._base.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  swift_release();
  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*OrderedSet.SubSequence._base.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t OrderedSet.SubSequence._bounds.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t OrderedSet.SubSequence._bounds.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*OrderedSet.SubSequence._bounds.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t OrderedSet.SubSequence._index(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  char v8;
  uint64_t v11;

  result = OrderedSet._find(_:)();
  if (result < a4 || result >= a5)
    v11 = 0;
  else
    v11 = result;
  if ((v8 & 1) == 0)
    return v11;
  return result;
}

BOOL OrderedSet.SubSequence._customContainsEquatableElement(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  char v8;

  v7 = OrderedSet._find(_:)();
  return (v8 & 1) == 0 && v7 >= a4 && v7 < a5;
}

uint64_t OrderedSet.SubSequence._copyToContiguousArray()()
{
  uint64_t v0;

  v0 = specialized OrderedSet.SubSequence._copyToContiguousArray()();
  swift_release();
  swift_release();
  return v0;
}

uint64_t OrderedSet.SubSequence._copyContents(initializing:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[3];
  uint64_t v15;

  v10 = 0;
  v11 = a3;
  if (a3 != a4
    && (v12 = ContiguousArray.subscript.getter(),
        v14[1] = v14,
        MEMORY[0x24BDAC7A8](v12),
        ArraySlice.withUnsafeBufferPointer<A>(_:)(),
        result = swift_unknownObjectRelease(),
        v10 = v15,
        v11 = a3 + v15,
        __OFADD__(a3, v15)))
  {
    __break(1u);
  }
  else
  {
    *a5 = a1;
    a5[1] = a2;
    a5[2] = a3;
    a5[3] = a4;
    a5[4] = v11;
    a5[5] = v10;
  }
  return result;
}

BOOL OrderedSet.SubSequence.isEmpty.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3 == a4;
}

uint64_t closure #1 in OrderedSet.SubSequence._copyContents(initializing:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = UnsafeBufferPointer.baseAddress.getter();
  if (result)
  {
    if (a2 >= a1)
      a2 = a1;
    if (a2 < 1)
      goto LABEL_7;
    result = UnsafeBufferPointer.baseAddress.getter();
    if (result)
    {
      result = UnsafeMutablePointer.initialize(from:count:)();
LABEL_7:
      *a3 = a2;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t OrderedSet.SubSequence.withContiguousStorageIfAvailable<A>(_:)()
{
  ContiguousArray.subscript.getter();
  ArraySlice.withContiguousStorageIfAvailable<A>(_:)();
  return swift_unknownObjectRelease();
}

__n128 protocol witness for Sequence.makeIterator() in conformance OrderedSet<A>.SubSequence@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;

  v2 = v1->n128_u64[1];
  a1->n128_u64[0] = v1->n128_u64[0];
  a1->n128_u64[1] = v2;
  result = v1[1];
  a1[1] = result;
  a1[2].n128_u64[0] = result.n128_u64[0];
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance OrderedSet<A>.SubSequence(uint64_t a1)
{
  MEMORY[0x24954C264](&protocol conformance descriptor for OrderedSet<A>.SubSequence, a1);
  return Collection.underestimatedCount.getter();
}

BOOL protocol witness for Sequence._customContainsEquatableElement(_:) in conformance OrderedSet<A>.SubSequence(uint64_t a1)
{
  uint64_t *v1;

  return OrderedSet.SubSequence._customContainsEquatableElement(_:)(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance OrderedSet<A>.SubSequence()
{
  uint64_t v0;

  v0 = specialized OrderedSet.SubSequence._copyToContiguousArray()();
  swift_release();
  swift_release();
  return v0;
}

__n128 protocol witness for Sequence._copyContents(initializing:) in conformance OrderedSet<A>.SubSequence(__n128 *a1)
{
  uint64_t *v1;
  unint64_t v3;
  unint64_t v4;
  __n128 result;
  _QWORD v6[2];
  __n128 v7;
  unint64_t v8;

  OrderedSet.SubSequence._copyContents(initializing:)(*v1, v1[1], v1[2], v1[3], v6);
  v3 = v6[1];
  v4 = v8;
  result = v7;
  a1->n128_u64[0] = v6[0];
  a1->n128_u64[1] = v3;
  a1[1] = result;
  a1[2].n128_u64[0] = v4;
  return result;
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance OrderedSet<A>.SubSequence()
{
  return OrderedSet.SubSequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t OrderedSet.SubSequence.startIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t OrderedSet.SubSequence.endIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t OrderedSet.SubSequence.indices.getter()
{
  uint64_t v0;
  uint64_t v2;

  ContiguousArray.subscript.getter();
  v0 = type metadata accessor for ArraySlice();
  MEMORY[0x24954C264](MEMORY[0x24BEE2188], v0);
  RandomAccessCollection<>.indices.getter();
  swift_unknownObjectRelease();
  return v2;
}

Swift::Int __swiftcall OrderedSet.SubSequence.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Int __swiftcall OrderedSet.SubSequence.index(before:)(Swift::Int before)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFSUB__(before, 1);
  result = before - 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Void __swiftcall OrderedSet.SubSequence.formIndex(after:)(Swift::Int *after)
{
  if (__OFADD__(*after, 1))
    __break(1u);
  else
    ++*after;
}

Swift::Void __swiftcall OrderedSet.SubSequence.formIndex(before:)(Swift::Int *before)
{
  if (__OFSUB__(*before, 1))
    __break(1u);
  else
    --*before;
}

Swift::Int __swiftcall OrderedSet.SubSequence.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFADD__(_, offsetBy);
  result = _ + offsetBy;
  if (v2)
    __break(1u);
  return result;
}

Swift::Int_optional __swiftcall OrderedSet.SubSequence.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Int v6;
  Swift::Bool v7;
  Swift::Int v8;
  Swift::Int_optional result;

  ContiguousArray.subscript.getter();
  v6 = swift_unknownObjectRelease();
  v8 = limitedBy - _;
  if (__OFSUB__(limitedBy, _))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (offsetBy < 1)
  {
    if (v8 > 0 || v8 <= offsetBy)
    {
LABEL_9:
      v6 = _ + offsetBy;
      if (!__OFADD__(_, offsetBy))
      {
        v7 = 0;
        goto LABEL_13;
      }
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v8 < 0 || v8 >= (unint64_t)offsetBy)
  {
    goto LABEL_9;
  }
  v6 = 0;
  v7 = 1;
LABEL_13:
  result.value = v6;
  result.is_nil = v7;
  return result;
}

Swift::Int __swiftcall OrderedSet.SubSequence.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFSUB__(to, from);
  result = to - from;
  if (v2)
    __break(1u);
  return result;
}

uint64_t OrderedSet.SubSequence.subscript.getter()
{
  ContiguousArray.subscript.getter();
  ArraySlice.subscript.getter();
  return swift_unknownObjectRelease();
}

uint64_t OrderedSet.SubSequence.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a6 < a5)
  {
    __break(1u);
  }
  else
  {
    ContiguousArray.subscript.getter();
    swift_unknownObjectRelease();
    swift_retain();
    swift_retain();
    return a3;
  }
  return result;
}

uint64_t OrderedSet.SubSequence._failEarlyRangeCheck(_:bounds:)()
{
  ContiguousArray.subscript.getter();
  return swift_unknownObjectRelease();
}

{
  ContiguousArray.subscript.getter();
  return swift_unknownObjectRelease();
}

uint64_t OrderedSet.SubSequence.count.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = a4 - a3;
  if (__OFSUB__(a4, a3))
    __break(1u);
  return result;
}

uint64_t OrderedSet.SubSequence._customIndexOfEquatableElement(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  char v8;
  uint64_t v11;

  result = OrderedSet._find(_:)();
  if (result < a4 || result >= a5)
    v11 = 0;
  else
    v11 = result;
  if ((v8 & 1) == 0)
    return v11;
  return result;
}

uint64_t OrderedSet.SubSequence._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD v8[2];
  uint64_t v9;

  ContiguousArray.subscript.getter();
  v8[1] = a3;
  v9 = a1;
  v8[0] = a2;
  v6 = type metadata accessor for ArraySlice();
  MEMORY[0x24954C264](MEMORY[0x24BEE2190], v6);
  specialized Collection._failEarlyRangeCheck(_:bounds:)((uint64_t)&v9, (uint64_t)v8);
  return swift_unknownObjectRelease();
}

void protocol witness for Collection.startIndex.getter in conformance OrderedSet<A>.SubSequence(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
}

void (*protocol witness for Collection.subscript.read in conformance OrderedSet<A>.SubSequence(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = malloc(*(_QWORD *)(v4 + 64));
  OrderedSet.SubSequence._slice.getter();
  ArraySlice.subscript.getter();
  swift_unknownObjectRelease();
  return protocol witness for Collection.subscript.read in conformance OrderedDictionary<A, B>.Values;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance OrderedSet<A>.SubSequence@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (v2[3] < v2[2])
  {
    __break(1u);
  }
  else
  {
    v6 = v2;
    v4 = *v2;
    v5 = v6[1];
    v8 = *result;
    v7 = result[1];
    OrderedSet.SubSequence._slice.getter();
    swift_unknownObjectRelease();
    *a2 = v4;
    a2[1] = v5;
    a2[2] = v8;
    a2[3] = v7;
    swift_retain();
    return (uint64_t *)swift_retain();
  }
  return result;
}

double protocol witness for Collection.indices.getter in conformance OrderedSet<A>.SubSequence@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v4;

  OrderedSet.SubSequence._slice.getter();
  v2 = type metadata accessor for ArraySlice();
  MEMORY[0x24954C264](MEMORY[0x24BEE2188], v2);
  RandomAccessCollection<>.indices.getter();
  swift_unknownObjectRelease();
  result = *(double *)&v4;
  *a1 = v4;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance OrderedSet<A>.SubSequence()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16) == *(_QWORD *)(v0 + 24);
}

uint64_t protocol witness for Collection.count.getter in conformance OrderedSet<A>.SubSequence()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  result = v2 - v1;
  if (__OFSUB__(v2, v1))
    __break(1u);
  return result;
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance OrderedSet<A>.SubSequence@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;
  char v5;

  result = OrderedSet.SubSequence._index(of:)(a1, *v2, v2[1], v2[2], v2[3]);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v5 & 1;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance OrderedSet<A>.SubSequence@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t result;

  v6 = *a1;
  v7 = *a3;
  OrderedSet.SubSequence._slice.getter();
  v8 = specialized ContiguousArray.index(_:offsetBy:limitedBy:)(v6, a2, v7);
  LOBYTE(v6) = v9;
  result = swift_unknownObjectRelease();
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance OrderedSet<A>.SubSequence()
{
  OrderedSet.SubSequence._slice.getter();
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance OrderedSet<A>.SubSequence(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  v4 = a2[1];
  OrderedSet.SubSequence._slice.getter();
  v7[1] = v4;
  v8 = v2;
  v7[0] = v3;
  v5 = type metadata accessor for ArraySlice();
  MEMORY[0x24954C264](MEMORY[0x24BEE2190], v5);
  specialized Collection._failEarlyRangeCheck(_:bounds:)((uint64_t)&v8, (uint64_t)v7);
  return swift_unknownObjectRelease();
}

uint64_t static OrderedSet.SubSequence.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  v10 = type metadata accessor for OrderedSet.SubSequence(0, a9, a10, a4);
  MEMORY[0x24954C264](&protocol conformance descriptor for OrderedSet<A>.SubSequence, v10);
  return Sequence<>.elementsEqual<A>(_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance OrderedSet<A>.SubSequence(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static OrderedSet.SubSequence.== infix(_:_:)(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3], *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24)) & 1;
}

void OrderedSet.SubSequence.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[2];

  v10 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (__OFSUB__(v12, v11))
  {
    __break(1u);
    goto LABEL_9;
  }
  Hasher._combine(_:)(v12 - v11);
  if (a4 == a5)
    return;
  if (a4 >= a5)
  {
LABEL_9:
    __break(1u);
    return;
  }
  v16[1] = a2;
  swift_retain();
  swift_retain();
  v15 = a4;
  do
  {
    ContiguousArray.subscript.getter();
    ArraySlice.subscript.getter();
    swift_unknownObjectRelease();
    ++v15;
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, a6);
  }
  while (a5 != v15);
  swift_release();
  swift_release();
}

Swift::Int OrderedSet.SubSequence.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE v11[72];

  Hasher.init(_seed:)();
  OrderedSet.SubSequence.hash(into:)((uint64_t)v11, a1, a2, a3, a4, a5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance OrderedSet<A>.SubSequence(uint64_t a1)
{
  uint64_t *v1;

  return OrderedSet.SubSequence.hashValue.getter(*v1, v1[1], v1[2], v1[3], *(_QWORD *)(a1 + 16));
}

void protocol witness for Hashable.hash(into:) in conformance OrderedSet<A>.SubSequence(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  OrderedSet.SubSequence.hash(into:)(a1, *v2, v2[1], v2[2], v2[3], *(_QWORD *)(a2 + 16));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OrderedSet<A>.SubSequence(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _BYTE v5[72];

  Hasher.init(_seed:)();
  OrderedSet.SubSequence.hash(into:)((uint64_t)v5, *v2, v2[1], v2[2], v2[3], *(_QWORD *)(a2 + 16));
  return Hasher._finalize()();
}

uint64_t specialized OrderedSet.SubSequence._copyToContiguousArray()()
{
  ContiguousArray.subscript.getter();
  return ArraySlice._copyToContiguousArray()();
}

uint64_t partial apply for closure #1 in OrderedSet.SubSequence._copyContents(initializing:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in OrderedSet.SubSequence._copyContents(initializing:)(a1, *(_QWORD *)(v2 + 40), a2);
}

uint64_t type metadata accessor for OrderedSet.SubSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrderedSet.SubSequence);
}

void base witness table accessor for BidirectionalCollection in OrderedSet<A>.SubSequence()
{
  JUMPOUT(0x24954C264);
}

void associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in OrderedSet<A>.SubSequence()
{
  JUMPOUT(0x24954C264);
}

void base witness table accessor for Collection in OrderedSet<A>.SubSequence()
{
  JUMPOUT(0x24954C264);
}

void base witness table accessor for Sequence in OrderedSet<A>.SubSequence()
{
  JUMPOUT(0x24954C264);
}

void base witness table accessor for Equatable in OrderedSet<A>.SubSequence()
{
  JUMPOUT(0x24954C264);
}

uint64_t initializeWithCopy for OrderedSet.SubSequence(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for OrderedSet.SubSequence(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

_OWORD *assignWithTake for OrderedSet.SubSequence(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

void MetalFunctionGraphError.description.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_245FA0D94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(53);
  v5._countAndFlagsBits = 0xD00000000000001BLL;
  v5._object = (void *)0x8000000245FCE2C0;
  String.append(_:)(v5);
  v6._countAndFlagsBits = v2;
  v6._object = v3;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._object = (void *)0x8000000245FCE2E0;
  v7._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v7);
  v8._countAndFlagsBits = v1;
  v8._object = v4;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 2108967;
  v9._object = (void *)0xE300000000000000;
  String.append(_:)(v9);
  if (*(_QWORD *)(v0 + 48))
  {
    swift_bridgeObjectRetain_n();
    v10 = String.init<A>(describing:)();
    v12 = v11;
  }
  else
  {
    v10 = 0x3E6C696E3CLL;
    v12 = 0xE500000000000000;
  }
  v13 = v12;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

double MetalFunctionGraphError.init(_:details:underlyingErrors:)@<D0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v9;
  double result;
  __int128 v11;
  _OWORD v12[2];
  char v13;

  outlined init with take of MetalFunctionGraphError.ErrorType(a1, (uint64_t)v12);
  v9 = v13;
  result = *(double *)v12;
  v11 = v12[1];
  *(_OWORD *)a5 = v12[0];
  *(_OWORD *)(a5 + 16) = v11;
  *(_BYTE *)(a5 + 32) = v9;
  *(_QWORD *)(a5 + 40) = a2;
  *(_QWORD *)(a5 + 48) = a3;
  *(_QWORD *)(a5 + 56) = a4;
  return result;
}

uint64_t outlined init with take of MetalFunctionGraphError.ErrorType(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_BYTE *)(a2 + 32) = *((_BYTE *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t MetalFunctionGraphError.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of MetalFunctionGraphError.ErrorType(v1, a1);
}

uint64_t outlined init with copy of MetalFunctionGraphError.ErrorType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 32);
  outlined copy of MetalFunctionGraphError.ErrorType(*(_QWORD *)a1, v4, v5, v6, v7);
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  *(_BYTE *)(a2 + 32) = v7;
  return a2;
}

uint64_t MetalFunctionGraphError.details.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetalFunctionGraphError.underlyingErrors.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for MetalFunctionGraphError(uint64_t a1)
{
  outlined consume of MetalFunctionGraphError.ErrorType(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MetalFunctionGraphError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  outlined copy of MetalFunctionGraphError.ErrorType(*(_QWORD *)a2, v5, v6, v7, v8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MetalFunctionGraphError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  outlined copy of MetalFunctionGraphError.ErrorType(*(_QWORD *)a2, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v13 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v8;
  outlined consume of MetalFunctionGraphError.ErrorType(v9, v10, v11, v12, v13);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MetalFunctionGraphError(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;

  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  v10 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v4;
  outlined consume of MetalFunctionGraphError.ErrorType(v5, v6, v7, v8, v10);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MetalFunctionGraphError(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MetalFunctionGraphError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MetalFunctionGraphError()
{
  return &type metadata for MetalFunctionGraphError;
}

uint64_t destroy for MetalFunctionGraphError.ErrorType(uint64_t a1)
{
  return outlined consume of MetalFunctionGraphError.ErrorType(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for MetalFunctionGraphError.ErrorType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of MetalFunctionGraphError.ErrorType(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for MetalFunctionGraphError.ErrorType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of MetalFunctionGraphError.ErrorType(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of MetalFunctionGraphError.ErrorType(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for MetalFunctionGraphError.ErrorType(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  outlined consume of MetalFunctionGraphError.ErrorType(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetalFunctionGraphError.ErrorType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MetalFunctionGraphError.ErrorType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 252;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for MetalFunctionGraphError.ErrorType(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 3u)
    return *(unsigned __int8 *)(a1 + 32);
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t destructiveInjectEnumTag for MetalFunctionGraphError.ErrorType(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(_QWORD *)result = a2 - 4;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 4;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MetalFunctionGraphError.ErrorType()
{
  return &type metadata for MetalFunctionGraphError.ErrorType;
}

uint64_t *realityKitGeometryGetterFuncs.unsafeMutableAddressor()
{
  if (one-time initialization token for realityKitGeometryGetterFuncs != -1)
    swift_once();
  return &realityKitGeometryGetterFuncs;
}

uint64_t *realityKitSurfaceGetterFuncs.unsafeMutableAddressor()
{
  if (one-time initialization token for realityKitSurfaceGetterFuncs != -1)
    swift_once();
  return &realityKitSurfaceGetterFuncs;
}

uint64_t one-time initialization function for realityKitGeometryGetterFuncs()
{
  Swift::Int v0;
  uint64_t result;

  v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for realityKitGeometryGetterFuncs);
  result = swift_arrayDestroy();
  realityKitGeometryGetterFuncs = v0;
  return result;
}

uint64_t one-time initialization function for realityKitSurfaceGetterFuncs()
{
  Swift::Int v0;
  uint64_t result;

  v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for realityKitSurfaceGetterFuncs);
  result = swift_arrayDestroy();
  realityKitSurfaceGetterFuncs = v0;
  return result;
}

uint64_t MetalShaderCompiler.__allocating_init(compiling:)(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = a1;
  type metadata accessor for MetalShaderCompiler.Scope();
  v3 = (_QWORD *)swift_allocObject();
  v4 = MEMORY[0x24BEE4AF8];
  v3[2] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v3[3] = 0;
  swift_weakInit();
  v3[5] = v4;
  v3[6] = specialized Dictionary.init(dictionaryLiteral:)(v4);
  v3[7] = v4;
  v3[8] = v4;
  v3[9] = v4;
  v3[10] = v4;
  swift_beginAccess();
  swift_weakAssign();
  *(_QWORD *)(v2 + 24) = v3;
  return v2;
}

uint64_t MetalLiteralValueNode.createMetalInvocation(in:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[10];

  v1 = (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)v0 + 224))(v5);
  (*(void (**)(_QWORD *))(*(_QWORD *)v0 + 176))(v1);
  SGDataTypeStorage.metalLiteralValue(type:)();
  v3 = v2;
  swift_release();
  outlined release of SGDataTypeStorage((uint64_t)v5);
  return v3;
}

uint64_t protocol witness for HasMetalInvocation.createMetalInvocation(in:) in conformance MetalLiteralValueNode()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[10];

  v1 = *v0;
  v2 = (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)v1 + 224))(v6);
  (*(void (**)(_QWORD *))(*(_QWORD *)v1 + 176))(v2);
  SGDataTypeStorage.metalLiteralValue(type:)();
  v4 = v3;
  swift_release();
  outlined release of SGDataTypeStorage((uint64_t)v6);
  return v4;
}

uint64_t MetalShaderCompiler.program.getter()
{
  return swift_retain();
}

uint64_t MetalShaderCompiler.init(compiling:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 16) = a1;
  type metadata accessor for MetalShaderCompiler.Scope();
  v2 = (_QWORD *)swift_allocObject();
  v3 = MEMORY[0x24BEE4AF8];
  v2[2] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v2[3] = 0;
  swift_weakInit();
  v2[5] = v3;
  v2[6] = specialized Dictionary.init(dictionaryLiteral:)(v3);
  v2[7] = v3;
  v2[8] = v3;
  v2[9] = v3;
  v2[10] = v3;
  swift_beginAccess();
  swift_weakAssign();
  *(_QWORD *)(v1 + 24) = v2;
  return v1;
}

_QWORD *MetalShaderCompiler.Scope.__allocating_init(enclosingScope:)()
{
  _QWORD *v0;
  uint64_t v1;

  v0 = (_QWORD *)swift_allocObject();
  v1 = MEMORY[0x24BEE4AF8];
  v0[2] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v0[3] = 0;
  swift_weakInit();
  v0[5] = v1;
  v0[6] = specialized Dictionary.init(dictionaryLiteral:)(v1);
  v0[7] = v1;
  v0[8] = v1;
  v0[9] = v1;
  v0[10] = v1;
  swift_beginAccess();
  swift_weakAssign();
  swift_release();
  return v0;
}

uint64_t type metadata accessor for MetalShaderCompiler.Scope()
{
  return objc_opt_self();
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MetalShaderCompiler.compile()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  void *v24;
  Swift::String v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  Swift::String v55;
  Swift::String v56;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  Swift::String v72;
  Swift::String v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  Swift::String result;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  int64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  _QWORD v115[2];
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;

  v2 = (*(uint64_t (**)(void))(*v0 + 112))();
  v4 = v0;
  v5 = v0[2];
  v3 = (void *)v5;
  v6 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v5 + 264))(v4);
  if (v1)
  {
    swift_release();
    goto LABEL_3;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 288))(v6);
  v10 = v9;
  v121 = MEMORY[0x24BEE4AF8];
  v110 = MEMORY[0x24BEE4AF8];
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v11 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v92 = v5;
  v95 = v11;
  if (v11)
  {
    v12 = v10 & 0xC000000000000001;
    v13 = v10 & 0xFFFFFFFFFFFFFF8;
    v14 = v10 + 32;
    v15 = v11;
    while (1)
    {
      v18 = __OFSUB__(v15--, 1);
      if (v18)
        break;
      if (v12)
      {
        v16 = MEMORY[0x24954B748](v15, v10);
      }
      else
      {
        if ((v15 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          swift_bridgeObjectRelease();
          specialized Array.append<A>(contentsOf:)(v110);
          v120 = MEMORY[0x24BEE4AF8];
          swift_bridgeObjectRetain();
          v37 = v14;
          v96 = v13;
          v97 = v12;
          while (1)
          {
            v18 = __OFSUB__(v37, 1);
            v7 = v37 - 1;
            if (v18)
              goto LABEL_104;
            v93 = v7;
            if (v12)
            {
              v39 = MEMORY[0x24954B748]();
            }
            else
            {
              if ((v7 & 0x8000000000000000) != 0)
              {
                __break(1u);
LABEL_109:
                __break(1u);
                goto LABEL_110;
              }
              if (v7 >= *(_QWORD *)(v13 + 16))
                goto LABEL_109;
              v39 = *(_QWORD *)(v109 + 8 * v7);
              swift_retain();
            }
            v40 = (*(uint64_t (**)(void))(*(_QWORD *)v39 + 248))();
            v41 = *(_QWORD *)(v40 + 16);
            if (v41)
              break;
            swift_release();
            swift_bridgeObjectRelease();
            v38 = MEMORY[0x24BEE4AF8];
LABEL_48:
            specialized Array.append<A>(contentsOf:)(v38);
            v37 = v93;
            if (!v93)
              goto LABEL_105;
          }
          v119 = MEMORY[0x24BEE4AF8];
          v102 = v40;
          v99 = v41;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v41, 0);
          v42 = v102;
          v108 = v119;
          v43 = specialized Dictionary.Values.startIndex.getter(v102);
          v45 = 0;
          v46 = v102 + 64;
          v47 = *(_BYTE *)(v102 + 32);
          v100 = v44;
          v101 = v102 + 64;
          while (2)
          {
            if ((v43 & 0x8000000000000000) != 0 || (uint64_t)v43 >= 1 << v47)
              goto LABEL_96;
            if ((*(_QWORD *)(v46 + 8 * (v43 >> 6)) & (1 << v43)) == 0)
              goto LABEL_97;
            if (*(_DWORD *)(v42 + 36) != v44)
              goto LABEL_98;
            v104 = v44;
            v105 = 1 << v43;
            v106 = v43 >> 6;
            v107 = v43;
            v103 = v45;
            v51 = (uint64_t *)(*(_QWORD *)(v42 + 48) + 16 * v43);
            v52 = *v51;
            v53 = (void *)v51[1];
            v54 = *(_QWORD *)(*(_QWORD *)(v42 + 56) + 8 * v43);
            v110 = 0x20746375727473;
            *(_QWORD *)&v111 = 0xE700000000000000;
            swift_bridgeObjectRetain();
            swift_retain();
            v55._countAndFlagsBits = v52;
            v55._object = v53;
            String.append(_:)(v55);
            v56._countAndFlagsBits = 686880;
            v56._object = (void *)0xE300000000000000;
            String.append(_:)(v56);
            v117 = v110;
            v118 = v111;
            v57 = (*(uint64_t (**)(void))(*(_QWORD *)v54 + 88))();
            v58 = *(_QWORD *)(v57 + 16);
            if (v58)
            {
              v116 = MEMORY[0x24BEE4AF8];
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v58, 0);
              v59 = v116;
              v60 = (_QWORD *)(v57 + 72);
              do
              {
                v61 = *(v60 - 2);
                v62 = *((_BYTE *)v60 - 8);
                v63 = *v60;
                v110 = *(v60 - 5);
                v111 = *((_OWORD *)v60 - 2);
                v112 = v61;
                v113 = v62;
                v114 = v63;
                closure #1 in closure #1 in closure #4 in MetalShaderCompiler.compile()(&v110, v115);
                v64 = v115[0];
                v65 = v115[1];
                v116 = v59;
                v67 = *(_QWORD *)(v59 + 16);
                v66 = *(_QWORD *)(v59 + 24);
                if (v67 >= v66 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1);
                  v59 = v116;
                }
                v60 += 6;
                *(_QWORD *)(v59 + 16) = v67 + 1;
                v68 = v59 + 16 * v67;
                *(_QWORD *)(v68 + 32) = v64;
                *(_QWORD *)(v68 + 40) = v65;
                --v58;
              }
              while (v58);
              swift_bridgeObjectRelease();
              v2 = v94;
              v14 = v95;
            }
            else
            {
              swift_bridgeObjectRelease();
              v59 = MEMORY[0x24BEE4AF8];
            }
            v110 = v59;
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
            lazy protocol witness table accessor for type [String] and conformance [A]();
            v69 = BidirectionalCollection<>.joined(separator:)();
            v71 = v70;
            swift_bridgeObjectRelease();
            v72._countAndFlagsBits = v69;
            v72._object = v71;
            String.append(_:)(v72);
            swift_bridgeObjectRelease();
            v73._countAndFlagsBits = 171670794;
            v73._object = (void *)0xE400000000000000;
            String.append(_:)(v73);
            swift_release();
            swift_bridgeObjectRelease();
            v74 = v117;
            v75 = v118;
            v76 = v108;
            v119 = v108;
            v78 = *(_QWORD *)(v108 + 16);
            v77 = *(_QWORD *)(v108 + 24);
            if (v78 >= v77 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v77 > 1, v78 + 1, 1);
              v76 = v119;
            }
            *(_QWORD *)(v76 + 16) = v78 + 1;
            v79 = v76 + 16 * v78;
            *(_QWORD *)(v79 + 32) = v74;
            *(_QWORD *)(v79 + 40) = v75;
            v42 = v102;
            v47 = *(_BYTE *)(v102 + 32);
            v48 = 1 << v47;
            v10 = v98;
            if (v107 >= 1 << v47)
              goto LABEL_99;
            v46 = v102 + 64;
            v80 = v106;
            v81 = *(_QWORD *)(v101 + 8 * v106);
            if ((v81 & v105) == 0)
              goto LABEL_100;
            if (*(_DWORD *)(v102 + 36) != v104)
              goto LABEL_101;
            v108 = v76;
            v82 = v81 & (-2 << (v107 & 0x3F));
            if (v82)
            {
              v48 = __clz(__rbit64(v82)) | v107 & 0xFFFFFFFFFFFFFFC0;
              v13 = v96;
              v12 = v97;
              v49 = v99;
              v50 = v103;
              goto LABEL_58;
            }
            v83 = v106 + 1;
            v84 = (v48 + 63) >> 6;
            v13 = v96;
            v12 = v97;
            v50 = v103;
            if (v106 + 1 < v84)
            {
              v85 = *(_QWORD *)(v101 + 8 * v83);
              if (v85)
              {
LABEL_78:
                v49 = v99;
LABEL_79:
                v48 = __clz(__rbit64(v85)) + (v83 << 6);
                goto LABEL_58;
              }
              v83 = v106 + 2;
              if (v106 + 2 < v84)
              {
                v85 = *(_QWORD *)(v101 + 8 * v83);
                if (v85)
                  goto LABEL_78;
                v83 = v106 + 3;
                if (v106 + 3 < v84)
                {
                  v85 = *(_QWORD *)(v101 + 8 * v83);
                  if (v85)
                    goto LABEL_78;
                  v86 = v84 - 4;
                  v49 = v99;
                  while (v86 != v80)
                  {
                    v85 = *(_QWORD *)(v102 + 96 + 8 * v80++);
                    if (v85)
                    {
                      v83 = v80 + 3;
                      goto LABEL_79;
                    }
                  }
LABEL_58:
                  v45 = v50 + 1;
                  v44 = v100;
                  v43 = v48;
                  if (v45 == v49)
                  {
                    swift_release();
                    swift_bridgeObjectRelease();
                    v38 = v108;
                    goto LABEL_48;
                  }
                  continue;
                }
              }
            }
            break;
          }
          v49 = v99;
          goto LABEL_58;
        }
        if (v15 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_44;
        v16 = *(_QWORD *)(v14 + 8 * v15);
        swift_retain();
      }
      v17 = (*(uint64_t (**)(void))(*(_QWORD *)v16 + 312))();
      swift_release();
      specialized Array.append<A>(contentsOf:)(v17);
      if (!v15)
        goto LABEL_16;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRelease();
    v19 = v110;
  }
  else
  {
    swift_bridgeObjectRelease();
    v19 = MEMORY[0x24BEE4AF8];
  }
  v20 = *(_QWORD *)(v19 + 16);
  v94 = v2;
  v98 = v10;
  if (v20)
  {
    v117 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
    v21 = v117;
    v22 = (void **)(v19 + 40);
    do
    {
      v23 = (uint64_t)*(v22 - 1);
      v24 = *v22;
      v110 = 0x6564756C636E6923;
      *(_QWORD *)&v111 = 0xE900000000000020;
      swift_bridgeObjectRetain();
      v25._countAndFlagsBits = v23;
      v25._object = v24;
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      v117 = v21;
      v27 = *(_QWORD *)(v21 + 16);
      v26 = *(_QWORD *)(v21 + 24);
      if (v27 >= v26 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
        v21 = v117;
      }
      v22 += 2;
      *(_QWORD *)(v21 + 16) = v27 + 1;
      v28 = v21 + 16 * v27;
      *(_QWORD *)(v28 + 32) = 0x6564756C636E6923;
      *(_QWORD *)(v28 + 40) = 0xE900000000000020;
      --v20;
    }
    while (v20);
    swift_bridgeObjectRelease();
    v2 = v94;
    v10 = v98;
  }
  else
  {
    swift_bridgeObjectRelease();
    v21 = MEMORY[0x24BEE4AF8];
  }
  specialized Array.append<A>(contentsOf:)(v21);
  v110 = MEMORY[0x24BEE4AF8];
  v14 = v95;
  if (!v95)
  {
    v32 = MEMORY[0x24BEE4AF8];
    specialized Array.append<A>(contentsOf:)(MEMORY[0x24BEE4AF8]);
    goto LABEL_34;
  }
  v12 = v10 & 0xC000000000000001;
  v13 = v10 & 0xFFFFFFFFFFFFFF8;
  v109 = v10 + 32;
  swift_bridgeObjectRetain();
  v29 = v95;
  while (1)
  {
    v18 = __OFSUB__(v29--, 1);
    if (v18)
      goto LABEL_45;
    if (v12)
    {
      v30 = MEMORY[0x24954B748](v29, v10);
      goto LABEL_27;
    }
    if ((v29 & 0x8000000000000000) != 0)
      break;
    if (v29 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_95;
    v30 = *(_QWORD *)(v109 + 8 * v29);
    swift_retain();
LABEL_27:
    v31 = (*(uint64_t (**)(void))(*(_QWORD *)v30 + 360))();
    swift_release();
    specialized Array.append<A>(contentsOf:)(v31);
    if (!v29)
      goto LABEL_46;
  }
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  swift_bridgeObjectRelease();
  v32 = v120;
LABEL_34:
  v33 = specialized Array.append<A>(contentsOf:)(v32);
  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v92 + 192))(v33);
  specialized Array.append<A>(contentsOf:)(v34);
  v110 = MEMORY[0x24BEE4AF8];
  if (v14)
  {
    swift_bridgeObjectRetain();
    while (1)
    {
      v18 = __OFSUB__(v14--, 1);
      if (v18)
        break;
      if ((v10 & 0xC000000000000001) != 0)
      {
        v35 = MEMORY[0x24954B748](v14, v10);
      }
      else
      {
        if ((v14 & 0x8000000000000000) != 0)
          goto LABEL_102;
        if (v14 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_103;
        v35 = *(_QWORD *)(v10 + 32 + 8 * v14);
        swift_retain();
      }
      v36 = (*(uint64_t (**)(void))(*(_QWORD *)v35 + 336))();
      swift_release();
      specialized Array.append<A>(contentsOf:)(v36);
      if (!v14)
        goto LABEL_92;
    }
    __break(1u);
LABEL_92:
    swift_bridgeObjectRelease_n();
    v87 = v110;
  }
  else
  {
    swift_bridgeObjectRelease();
    v87 = MEMORY[0x24BEE4AF8];
  }
  v88 = specialized Array.append<A>(contentsOf:)(v87);
  v89 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 384))(v88);
  specialized Array.append<A>(contentsOf:)(v89);
  v110 = v121;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v5 = BidirectionalCollection<>.joined(separator:)();
  v3 = v90;
  swift_bridgeObjectRelease();
  swift_release();
LABEL_3:
  v7 = v5;
  v8 = v3;
LABEL_110:
  result._object = v8;
  result._countAndFlagsBits = v7;
  return result;
}

void closure #1 in closure #1 in closure #4 in MetalShaderCompiler.compile()(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  void **v7;
  void *v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  void *v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;

  v3 = (void *)a1[1];
  v33 = *a1;
  v5 = a1[2];
  v4 = a1[3];
  v6 = *(_QWORD *)(v4 + 16);
  if (v6)
  {
    v31 = a1[2];
    v32 = (void *)a1[1];
    v34 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    v7 = (void **)(v4 + 40);
    do
    {
      v9 = (uint64_t)*(v7 - 1);
      v8 = *v7;
      swift_bridgeObjectRetain();
      v10._countAndFlagsBits = v9;
      v10._object = v8;
      String.append(_:)(v10);
      v11._countAndFlagsBits = 23901;
      v11._object = (void *)0xE200000000000000;
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      v13 = *(_QWORD *)(v34 + 16);
      v12 = *(_QWORD *)(v34 + 24);
      if (v13 >= v12 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      v7 += 2;
      *(_QWORD *)(v34 + 16) = v13 + 1;
      v14 = v34 + 16 * v13;
      *(_QWORD *)(v14 + 32) = 23387;
      *(_QWORD *)(v14 + 40) = 0xE200000000000000;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    v5 = v31;
    v3 = v32;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v15 = BidirectionalCollection<>.joined(separator:)();
  v17 = v16;
  swift_bridgeObjectRelease();
  v18 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of closure #1 in closure #1 in closure #4 in MetalShaderCompiler.compile());
  if (!*(_QWORD *)(v18 + 16))
    goto LABEL_11;
  v20 = *(_QWORD *)(v5 + 24);
  v19 = *(_QWORD *)(v5 + 32);
  swift_bridgeObjectRetain();
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v19);
  if ((v22 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    swift_bridgeObjectRelease();
    v24 = *(_QWORD *)(v5 + 24);
    v25 = *(void **)(v5 + 32);
    swift_bridgeObjectRetain();
    goto LABEL_12;
  }
  v23 = (uint64_t *)(*(_QWORD *)(v18 + 56) + 16 * v21);
  v24 = *v23;
  v25 = (void *)v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_12:
  v26._countAndFlagsBits = v24;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 32;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  swift_bridgeObjectRetain();
  v28._countAndFlagsBits = v33;
  v28._object = v3;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = v15;
  v29._object = v17;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 59;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  *a2 = 9;
  a2[1] = 0xE100000000000000;
}

uint64_t MetalShaderCompiler.currentScope.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t MetalShaderCompiler.currentScope.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 24) = a1;
  return swift_release();
}

uint64_t (*MetalShaderCompiler.currentScope.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.StringNode.children.modify;
}

uint64_t MetalShaderCompiler.pushScope()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v4)(void);

  v4 = *(uint64_t (**)(void))(*(_QWORD *)v0 + 112);
  v1 = v4();
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 408))(v1);
  swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 120))(v2);
  return v4();
}

Swift::Void __swiftcall MetalShaderCompiler.popScope()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_BYTE *, _QWORD);
  _BYTE v10[32];

  v1 = v0;
  v2 = *(uint64_t (**)(void))(*(_QWORD *)v0 + 112);
  v3 = v2();
  v4 = v2();
  v5 = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 200))();
  swift_release();
  if (v5)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 120))(v5);
    v7 = ((uint64_t (*)(uint64_t))v2)(v6);
    v8 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 384))();
    v9 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v7 + 400))(v10);
    specialized Array.append<A>(contentsOf:)(v8);
    v9(v10, 0);
    swift_release();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t MetalShaderCompiler.withChildScope<A>(_:)(uint64_t (*a1)(void))
{
  uint64_t v1;
  uint64_t v3;

  (*(void (**)(void))(*(_QWORD *)v1 + 136))();
  v3 = a1();
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 144))(v3);
  return swift_release();
}

uint64_t MetalShaderCompiler.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return v0;
}

uint64_t MetalShaderCompiler.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t MetalShaderCompiler.Scope.nodesToResultVariableNameMap.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t MetalShaderCompiler.Scope.lastResultVariableIndex.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 24);
}

uint64_t MetalShaderCompiler.Scope.enclosingScope.getter()
{
  swift_beginAccess();
  return swift_weakLoadStrong();
}

uint64_t key path setter for MetalShaderCompiler.Scope.childScopes : MetalShaderCompiler.Scope(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 40) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t MetalShaderCompiler.Scope.childScopes.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for MetalShaderCompiler.Scope.definedTypes : MetalShaderCompiler.Scope(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 48) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t MetalShaderCompiler.Scope.definedTypes.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t MetalShaderCompiler.Scope.global.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
  if (v1)
    return v1;
  swift_retain();
  return v0;
}

_QWORD *MetalShaderCompiler.Scope.init(enclosingScope:)()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = MEMORY[0x24BEE4AF8];
  v0[2] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v0[3] = 0;
  swift_weakInit();
  v0[5] = v1;
  v0[6] = specialized Dictionary.init(dictionaryLiteral:)(v1);
  v0[7] = v1;
  v0[8] = v1;
  v0[9] = v1;
  v0[10] = v1;
  swift_beginAccess();
  swift_weakAssign();
  swift_release();
  return v0;
}

unint64_t MetalShaderCompiler.Scope.allScopes()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_245FBF370;
  *(_QWORD *)(v1 + 32) = v0;
  v11 = v1;
  specialized Array._endMutation()();
  v2 = v11;
  if (v11 >> 62)
  {
LABEL_14:
    swift_retain();
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9 >= 1)
      goto LABEL_3;
  }
  else
  {
    v3 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    if (v3 >= 1)
    {
LABEL_3:
      for (i = 0; i < v8; ++i)
      {
        if ((v2 & 0xC000000000000001) != 0)
        {
          v6 = MEMORY[0x24954B748](i, v2);
          v5 = v6;
        }
        else
        {
          if ((unint64_t)i >= *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_14;
          }
          v5 = *(_QWORD *)(v2 + 8 * i + 32);
          v6 = swift_retain();
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 224))(v6);
        v7 = swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v7);
        swift_bridgeObjectRelease();
        swift_release();
        v2 = v11;
        if (v11 >> 62)
        {
          swift_bridgeObjectRetain();
          v8 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v8 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
      }
    }
  }
  return v2;
}

uint64_t MetalShaderCompiler.Scope.resultVariableName(for:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v2 = a1[3];
  v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(v2, v3);
  v5 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 152))();
  if (*(_QWORD *)(v5 + 16) && (v6 = specialized __RawDictionaryStorage.find<A>(_:)(v4), (v7 & 1) != 0))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 16 * v6);
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = 0;
  }
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t MetalShaderCompiler.Scope.createResultVariableName(for:)(_QWORD *a1)
{
  _QWORD *v1;
  Swift::String v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;

  (*(void (**)(void))(*v1 + 176))();
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  result = swift_beginAccess();
  v5 = v1[3];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
  {
    __break(1u);
  }
  else
  {
    v1[3] = v7;
    v8 = a1[3];
    v9 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v8);
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 24))(v8, v9);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = v1[2];
    v1[2] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x746C7573657224, 0xE700000000000000, v10, isUniquelyReferenced_nonNull_native);
    v1[2] = v12;
    swift_bridgeObjectRelease();
    swift_endAccess();
    return 0x746C7573657224;
  }
  return result;
}

uint64_t MetalShaderCompiler.Scope.includePaths.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t MetalShaderCompiler.Scope.includePaths.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 56) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*MetalShaderCompiler.Scope.includePaths.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalShaderCompiler.Scope.globalDeclarations.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t MetalShaderCompiler.Scope.globalDeclarations.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 64) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*MetalShaderCompiler.Scope.globalDeclarations.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalShaderCompiler.Scope.topGlobalDeclarations.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t MetalShaderCompiler.Scope.topGlobalDeclarations.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 72) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*MetalShaderCompiler.Scope.topGlobalDeclarations.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalShaderCompiler.Scope.metalSourceSegments.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t MetalShaderCompiler.Scope.metalSourceSegments.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 80) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*MetalShaderCompiler.Scope.metalSourceSegments.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

_QWORD *MetalShaderCompiler.Scope.createChildScope()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0;
  type metadata accessor for MetalShaderCompiler.Scope();
  v2 = (_QWORD *)swift_allocObject();
  v3 = MEMORY[0x24BEE4AF8];
  v2[2] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v2[3] = 0;
  swift_weakInit();
  v2[5] = v3;
  swift_retain();
  v2[6] = specialized Dictionary.init(dictionaryLiteral:)(v3);
  v2[7] = v3;
  v2[8] = v3;
  v2[9] = v3;
  v2[10] = v3;
  swift_beginAccess();
  swift_weakAssign();
  swift_release();
  swift_beginAccess();
  v4 = swift_retain();
  MEMORY[0x24954B1A8](v4);
  if (*(_QWORD *)((*(_QWORD *)(v1 + 40) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v1 + 40) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  return v2;
}

uint64_t MetalShaderCompiler.Scope.addStructTypeDefinition(_:name:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;

  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *(_QWORD *)(v3 + 48);
  *(_QWORD *)(v3 + 48) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v3 + 48) = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t MetalShaderCompiler.Scope.structTypeDefinition(named:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = v2;
  v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 248);
  v7 = swift_bridgeObjectRetain();
  v8 = v6(v7);
  if (*(_QWORD *)(v8 + 16) && (v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v10 & 1) != 0))
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9);
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v12 = swift_bridgeObjectRelease();
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 200))(v12);
    if (v13)
    {
      v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 424))(a1, a2);
      swift_release();
      return v14;
    }
    return 0;
  }
  return v11;
}

uint64_t MetalShaderCompiler.Scope.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MetalShaderCompiler.Scope.__deallocating_deinit()
{
  MetalShaderCompiler.Scope.deinit();
  return swift_deallocClassInstance();
}

uint64_t outlined release of SGDataTypeStorage(uint64_t a1)
{
  outlined consume of SGDataTypeStorage(*(void **)a1, *(id *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  return a1;
}

uint64_t sub_245FA36B8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 112))();
  *a2 = result;
  return result;
}

uint64_t sub_245FA36E8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 120);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_245FA3718@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 152))();
  *a2 = result;
  return result;
}

uint64_t sub_245FA374C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 176))();
  *a2 = result;
  return result;
}

uint64_t sub_245FA377C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_QWORD *)(v3 + 24) = v2;
  return result;
}

uint64_t sub_245FA37BC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 200))();
  *a2 = result;
  return result;
}

uint64_t sub_245FA37EC()
{
  swift_beginAccess();
  return swift_weakAssign();
}

uint64_t sub_245FA3838@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 224))();
  *a2 = result;
  return result;
}

uint64_t sub_245FA386C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 248))();
  *a2 = result;
  return result;
}

uint64_t sub_245FA38A0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 312))();
  *a2 = result;
  return result;
}

uint64_t sub_245FA38D0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 320);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_245FA3900@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 336))();
  *a2 = result;
  return result;
}

uint64_t sub_245FA3930(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 344);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_245FA3960@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 360))();
  *a2 = result;
  return result;
}

uint64_t sub_245FA3990(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 368);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_245FA39C0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 384))();
  *a2 = result;
  return result;
}

uint64_t sub_245FA39F0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 392);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t dispatch thunk of HasMetalInvocation.createMetalInvocation(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of MetalSourceGenerator.generateMetalSource(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t type metadata accessor for MetalShaderCompiler()
{
  return objc_opt_self();
}

uint64_t method lookup function for MetalShaderCompiler()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MetalShaderCompiler.__allocating_init(compiling:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of MetalShaderCompiler.compile()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of MetalShaderCompiler.currentScope.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of MetalShaderCompiler.currentScope.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of MetalShaderCompiler.currentScope.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of MetalShaderCompiler.pushScope()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of MetalShaderCompiler.popScope()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of MetalShaderCompiler.withChildScope<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t method lookup function for MetalShaderCompiler.Scope()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MetalShaderCompiler.Scope.nodesToResultVariableNameMap.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of MetalShaderCompiler.Scope.lastResultVariableIndex.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of MetalShaderCompiler.Scope.enclosingScope.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of MetalShaderCompiler.Scope.childScopes.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of MetalShaderCompiler.Scope.definedTypes.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of MetalShaderCompiler.Scope.global.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of MetalShaderCompiler.Scope.__allocating_init(enclosingScope:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t dispatch thunk of MetalShaderCompiler.Scope.allScopes()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of MetalShaderCompiler.Scope.resultVariableName(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of MetalShaderCompiler.Scope.createResultVariableName(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of MetalShaderCompiler.Scope.includePaths.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of MetalShaderCompiler.Scope.includePaths.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of MetalShaderCompiler.Scope.includePaths.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of MetalShaderCompiler.Scope.globalDeclarations.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of MetalShaderCompiler.Scope.globalDeclarations.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of MetalShaderCompiler.Scope.globalDeclarations.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of MetalShaderCompiler.Scope.topGlobalDeclarations.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of MetalShaderCompiler.Scope.topGlobalDeclarations.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of MetalShaderCompiler.Scope.topGlobalDeclarations.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of MetalShaderCompiler.Scope.metalSourceSegments.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of MetalShaderCompiler.Scope.metalSourceSegments.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of MetalShaderCompiler.Scope.metalSourceSegments.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of MetalShaderCompiler.Scope.createChildScope()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of MetalShaderCompiler.Scope.addStructTypeDefinition(_:name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t dispatch thunk of MetalShaderCompiler.Scope.structTypeDefinition(named:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
}

uint64_t static DataType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a2) & 1;
}

uint64_t DataType.init(properties:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t DataType.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t DataType.properties.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t DataType.properties.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*DataType.properties.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.StringNode.children.modify;
}

Swift::Int DataType.hashValue.getter()
{
  uint64_t v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v0 + 120))(v2);
  return Hasher._finalize()();
}

uint64_t DataTypeProperty.init(label:type:attributes:index:visible:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  *(_QWORD *)a7 = result;
  *(_QWORD *)(a7 + 8) = a2;
  *(_QWORD *)(a7 + 16) = a3;
  *(_QWORD *)(a7 + 24) = a4;
  *(_BYTE *)(a7 + 32) = a6;
  *(_QWORD *)(a7 + 40) = a5;
  return result;
}

uint64_t DataType.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 88))();
  specialized Array<A>.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t DataType.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD *v18;

  v7 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 88))();
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v18 = a3;
    v9 = (uint64_t *)(v7 + 72);
    while (1)
    {
      v10 = *(v9 - 5);
      v11 = *(v9 - 4);
      v12 = *(v9 - 3);
      v13 = *(v9 - 2);
      v14 = *((unsigned __int8 *)v9 - 8);
      v15 = *v9;
      if (v10 == a1 && v11 == a2)
        break;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_12;
      v9 += 6;
      if (!--v8)
      {
        result = swift_bridgeObjectRelease();
        v10 = 0;
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v15 = 0;
        goto LABEL_13;
      }
    }
    v10 = a1;
    v11 = a2;
LABEL_12:
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRelease();
LABEL_13:
    a3 = v18;
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
  }
  *a3 = v10;
  a3[1] = v11;
  a3[2] = v12;
  a3[3] = v13;
  a3[4] = v14;
  a3[5] = v15;
  return result;
}

uint64_t DataType.__allocating_init(properties:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

BOOL DataType.isEqual(to:)(uint64_t a1)
{
  uint64_t v1;

  return v1 == a1;
}

uint64_t DataType.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v29 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v3 = (uint64_t *)(v1 + 56);
    do
    {
      v5 = *(v3 - 1);
      v4 = *v3;
      v27 = *(v3 - 3);
      v28 = *(v3 - 2);
      swift_bridgeObjectRetain();
      v6._countAndFlagsBits = 8250;
      v6._object = (void *)0xE200000000000000;
      String.append(_:)(v6);
      v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 136);
      v8 = swift_retain();
      v9._countAndFlagsBits = v7(v8);
      String.append(_:)(v9);
      swift_release();
      swift_bridgeObjectRelease();
      v10 = v27;
      v11 = v28;
      if (*(_QWORD *)(v4 + 16))
      {
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [String] and conformance [A]();
        v12 = BidirectionalCollection<>.joined(separator:)();
        v14 = v13;
        swift_bridgeObjectRelease();
        v15._countAndFlagsBits = v12;
        v15._object = v14;
        String.append(_:)(v15);
        swift_bridgeObjectRelease();
        v10 = v27;
        v11 = v28;
      }
      v17 = *(_QWORD *)(v29 + 16);
      v16 = *(_QWORD *)(v29 + 24);
      if (v17 >= v16 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
      *(_QWORD *)(v29 + 16) = v17 + 1;
      v18 = v29 + 16 * v17;
      *(_QWORD *)(v18 + 32) = v10;
      *(_QWORD *)(v18 + 40) = v11;
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v19 = BidirectionalCollection<>.joined(separator:)();
  v21 = v20;
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 31550;
  v23._object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  v24._countAndFlagsBits = v19;
  v24._object = v21;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 125;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  return 60;
}

uint64_t DataType.asMetalDataType.getter()
{
  return 0;
}

uint64_t DataType.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DataType()
{
  uint64_t v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(**(_QWORD **)v0 + 120))(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DataType(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 128))(*a2) & 1;
}

uint64_t DataTypeProperty.label.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DataTypeProperty.label.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*DataTypeProperty.label.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t DataTypeProperty.type.getter()
{
  return swift_retain();
}

uint64_t DataTypeProperty.type.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*DataTypeProperty.type.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t DataTypeProperty.attributes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DataTypeProperty.attributes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*DataTypeProperty.attributes.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t DataTypeProperty.visible.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t DataTypeProperty.visible.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = result;
  return result;
}

uint64_t (*DataTypeProperty.visible.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t DataTypeProperty.index.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t DataTypeProperty.index.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*DataTypeProperty.index.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

void DataTypeProperty.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);
  uint64_t v4;
  Swift::UInt v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v3 = *(void (**)(uint64_t))(**(_QWORD **)(v1 + 16) + 120);
  swift_retain();
  v3(a1);
  swift_release();
  v4 = *(_QWORD *)(v1 + 24);
  v7 = v4;
  v5 = *(_QWORD *)(v4 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v6 = v4 + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v6 += 16;
      --v5;
    }
    while (v5);
    outlined release of [Input]((uint64_t)&v7);
  }
  Hasher._combine(_:)(*(_BYTE *)(v1 + 32) & 1);
  Hasher._combine(_:)(*(_QWORD *)(v1 + 40));
}

Swift::Int DataTypeProperty.hashValue.getter()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  DataTypeProperty.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DataTypeProperty()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  DataTypeProperty.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DataTypeProperty()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  DataTypeProperty.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance DataTypeProperty(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return specialized static DataTypeProperty.== infix(_:_:)((uint64_t)v7, (uint64_t)v8);
}

void specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::UInt8 v9;
  Swift::UInt v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  Swift::UInt v13;
  uint64_t v14;
  uint64_t v15;
  Swift::UInt v16;
  Swift::UInt8 v17;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  v16 = v4;
  if (v4)
  {
    v5 = 0;
    v15 = a2 + 32;
    do
    {
      v6 = v15 + 48 * v5;
      v7 = *(_QWORD *)(v6 + 16);
      v8 = *(_QWORD *)(v6 + 24);
      v9 = *(_BYTE *)(v6 + 32);
      v10 = *(_QWORD *)(v6 + 40);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v11 = *(void (**)(uint64_t))(*(_QWORD *)v7 + 120);
      swift_retain();
      v11(a1);
      swift_release();
      Hasher._combine(_:)(*(_QWORD *)(v8 + 16));
      v12 = *(_QWORD *)(v8 + 16);
      if (v12)
      {
        v17 = v9;
        v13 = v10;
        swift_bridgeObjectRetain();
        v14 = v8 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v14 += 16;
          --v12;
        }
        while (v12);
        swift_bridgeObjectRelease();
        v10 = v13;
        v9 = v17;
      }
      ++v5;
      Hasher._combine(_:)(v9);
      Hasher._combine(_:)(v10);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
    }
    while (v5 != v16);
  }
}

{
  Swift::UInt v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::UInt v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::UInt v20;
  uint64_t v21;
  Swift::UInt8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt8 v28;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  v20 = v4;
  if (!v4)
    return;
  v5 = 0;
  v19 = a2 + 32;
  while (1)
  {
    v6 = v19 + (v5 << 6);
    v7 = *(_QWORD *)(v6 + 16);
    v8 = *(_QWORD *)(v6 + 32);
    v22 = *(_BYTE *)(v6 + 56);
    v23 = *(_QWORD *)(v6 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_retain();
    v24 = v8;
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v9 = *(_QWORD *)(v7 + 16);
    Hasher._combine(_:)(*(_QWORD *)(v9 + 16));
    v27 = *(_QWORD *)(v9 + 16);
    if (v27)
      break;
LABEL_14:
    if (v24)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (!v23)
        goto LABEL_18;
    }
    else
    {
      Hasher._combine(_:)(0);
      if (!v23)
      {
LABEL_18:
        Hasher._combine(_:)(0);
        goto LABEL_4;
      }
    }
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
LABEL_4:
    ++v5;
    Hasher._combine(_:)(v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    if (v5 == v20)
      return;
  }
  v21 = v5;
  v26 = v9 + 32;
  swift_retain();
  swift_bridgeObjectRetain();
  v10 = 0;
  v25 = v9;
  while (v10 < *(_QWORD *)(v9 + 16))
  {
    v11 = v26 + 48 * v10;
    v13 = *(_QWORD *)(v11 + 16);
    v12 = *(_QWORD *)(v11 + 24);
    v28 = *(_BYTE *)(v11 + 32);
    v14 = *(_QWORD *)(v11 + 40);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v15 = *(void (**)(uint64_t))(*(_QWORD *)v13 + 120);
    swift_retain();
    v15(a1);
    swift_release();
    Hasher._combine(_:)(*(_QWORD *)(v12 + 16));
    v16 = *(_QWORD *)(v12 + 16);
    if (v16)
    {
      v17 = v7;
      swift_bridgeObjectRetain();
      v18 = v12 + 40;
      do
      {
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v18 += 16;
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease();
      v7 = v17;
      v9 = v25;
    }
    ++v10;
    Hasher._combine(_:)(v28);
    Hasher._combine(_:)(v14);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    if (v10 == v27)
    {
      swift_release();
      swift_bridgeObjectRelease();
      v5 = v21;
      goto LABEL_14;
    }
  }
  __break(1u);
}

{
  Swift::UInt v4;
  Swift::UInt *v5;
  uint64_t v6;
  int v7;
  Swift::UInt v8;
  void (*v9)(uint64_t);
  Swift::UInt v10;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = (Swift::UInt *)(a2 + 80);
    do
    {
      v6 = *(v5 - 5);
      v10 = *(v5 - 2);
      v7 = *((unsigned __int8 *)v5 - 8);
      v8 = *v5;
      Hasher._combine(_:)(*(v5 - 6));
      v9 = *(void (**)(uint64_t))(*(_QWORD *)v6 + 120);
      swift_retain();
      swift_bridgeObjectRetain();
      v9(a1);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v7 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v10);
      }
      v5 += 7;
      Hasher._combine(_:)(v8);
      swift_bridgeObjectRelease();
      swift_release();
      --v4;
    }
    while (v4);
  }
}

{
  Swift::UInt v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt *v11;
  uint64_t v12;
  int v13;
  Swift::UInt v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  Swift::UInt *v17;
  uint64_t v18;
  int v19;
  Swift::UInt v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  Swift::UInt v23;
  Swift::UInt v24;
  unint64_t v25;
  uint64_t v26;
  Swift::UInt v27;
  char v28;
  uint64_t v29;
  Swift::UInt v30;
  Swift::UInt v31;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  v23 = v4;
  if (v4)
  {
    v5 = 0;
    v22 = a2 + 32;
    do
    {
      v26 = v5;
      v6 = v22 + 48 * v5;
      v7 = *(_QWORD *)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v9 = *(_QWORD *)(v6 + 16);
      v27 = *(_QWORD *)(v6 + 24);
      v24 = *(_QWORD *)(v6 + 32);
      v28 = *(_BYTE *)(v6 + 40);
      outlined copy of NodePersonality(*(_QWORD *)v6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v25 = v7;
      NodePersonality.hash(into:)(a1, v7);
      Hasher._combine(_:)(*(_QWORD *)(v8 + 16));
      v10 = *(_QWORD *)(v8 + 16);
      v29 = v9;
      if (v10)
      {
        swift_bridgeObjectRetain();
        v11 = (Swift::UInt *)(v8 + 80);
        do
        {
          v12 = *(v11 - 5);
          v30 = *(v11 - 2);
          v13 = *((unsigned __int8 *)v11 - 8);
          v14 = *v11;
          Hasher._combine(_:)(*(v11 - 6));
          v15 = *(void (**)(uint64_t))(*(_QWORD *)v12 + 120);
          swift_retain();
          swift_bridgeObjectRetain();
          v15(a1);
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          if (v13 == 1)
          {
            Hasher._combine(_:)(0);
          }
          else
          {
            Hasher._combine(_:)(1u);
            Hasher._combine(_:)(v30);
          }
          v11 += 7;
          Hasher._combine(_:)(v14);
          swift_bridgeObjectRelease();
          swift_release();
          --v10;
        }
        while (v10);
        swift_bridgeObjectRelease();
        v9 = v29;
      }
      Hasher._combine(_:)(*(_QWORD *)(v9 + 16));
      v16 = *(_QWORD *)(v9 + 16);
      if (v16)
      {
        swift_bridgeObjectRetain();
        v17 = (Swift::UInt *)(v9 + 80);
        do
        {
          v18 = *(v17 - 5);
          v31 = *(v17 - 2);
          v19 = *((unsigned __int8 *)v17 - 8);
          v20 = *v17;
          Hasher._combine(_:)(*(v17 - 6));
          v21 = *(void (**)(uint64_t))(*(_QWORD *)v18 + 120);
          swift_retain();
          swift_bridgeObjectRetain();
          v21(a1);
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          if (v19 == 1)
          {
            Hasher._combine(_:)(0);
          }
          else
          {
            Hasher._combine(_:)(1u);
            Hasher._combine(_:)(v31);
          }
          v17 += 7;
          Hasher._combine(_:)(v20);
          swift_bridgeObjectRelease();
          swift_release();
          --v16;
        }
        while (v16);
        swift_bridgeObjectRelease();
      }
      Hasher._combine(_:)(v27);
      if ((v28 & 1) != 0)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v24);
      }
      v5 = v26 + 1;
      outlined consume of NodePersonality(v25);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    while (v26 + 1 != v23);
  }
}

{
  Swift::UInt v4;
  uint64_t *v5;
  uint64_t v6;
  void (*v7)(uint64_t);

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = (uint64_t *)(a2 + 48);
    do
    {
      v6 = *v5;
      v5 += 3;
      swift_bridgeObjectRetain();
      swift_retain();
      String.hash(into:)();
      v7 = *(void (**)(uint64_t))(*(_QWORD *)v6 + 120);
      swift_retain();
      v7(a1);
      swift_bridgeObjectRelease();
      swift_release_n();
      --v4;
    }
    while (v4);
  }
}

BOOL specialized static DataTypeProperty.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v5;
  _BOOL8 result;

  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
    return ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 128))(*(_QWORD *)(a2 + 16)) & 1) != 0
        && (specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(a1 + 24), *(_QWORD **)(a2 + 24)) & 1) != 0
        && ((*(unsigned __int8 *)(a1 + 32) ^ *(unsigned __int8 *)(a2 + 32)) & 1) == 0
        && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40);
  v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = 0;
  if ((v5 & 1) != 0)
    return ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 128))(*(_QWORD *)(a2 + 16)) & 1) != 0
        && (specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(a1 + 24), *(_QWORD **)(a2 + 24)) & 1) != 0
        && ((*(unsigned __int8 *)(a1 + 32) ^ *(unsigned __int8 *)(a2 + 32)) & 1) == 0
        && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40);
  return result;
}

unint64_t lazy protocol witness table accessor for type DataType and conformance DataType()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DataType and conformance DataType;
  if (!lazy protocol witness table cache variable for type DataType and conformance DataType)
  {
    v1 = type metadata accessor for DataType();
    result = MEMORY[0x24954C264](&protocol conformance descriptor for DataType, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DataType and conformance DataType);
  }
  return result;
}

uint64_t type metadata accessor for DataType()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type DataTypeProperty and conformance DataTypeProperty()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DataTypeProperty and conformance DataTypeProperty;
  if (!lazy protocol witness table cache variable for type DataTypeProperty and conformance DataTypeProperty)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for DataTypeProperty, &type metadata for DataTypeProperty);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DataTypeProperty and conformance DataTypeProperty);
  }
  return result;
}

uint64_t sub_245FA5160@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 88))();
  *a2 = result;
  return result;
}

uint64_t sub_245FA5190(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 96);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t method lookup function for DataType()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DataType.properties.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of DataType.properties.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of DataType.properties.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of DataType.__allocating_init(properties:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of DataType.hash(into:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of DataType.isEqual(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of DataType.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of DataType.asMetalDataType.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of DataType.hashValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t destroy for DataTypeProperty()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DataTypeProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DataTypeProperty(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for DataTypeProperty(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for DataTypeProperty()
{
  return &type metadata for DataTypeProperty;
}

_QWORD *specialized Sequence.compactMap<A>(_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  _QWORD *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  __int128 v19;
  _QWORD *v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  __int128 v27;
  __int128 v28;
  _QWORD *v29;

  v29 = a2;
  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v24 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v11 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v25 = *(_QWORD *)(v5 + 72);
    v26 = v12;
    v23 = a1;
    swift_bridgeObjectRetain();
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v14 = (uint64_t)v24;
    while (1)
    {
      v26(v9, v11, v4);
      v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
      v15(v9, 0, 1, v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4) == 1)
        break;
      (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v14, v9, v4);
      closure #5 in NodeDefStore.loadLibrary()(v14, v29, (uint64_t *)&v28);
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v14, v4);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v13;
      }
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v14, v4);
      if ((_QWORD)v28)
      {
        v27 = v28;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
        v17 = v13[2];
        v16 = v13[3];
        v18 = v13;
        v19 = v27;
        if (v17 >= v16 >> 1)
        {
          v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v13);
          v19 = v27;
          v18 = v20;
        }
        v18[2] = v17 + 1;
        v13 = v18;
        *(_OWORD *)&v18[2 * v17 + 4] = v19;
        v14 = (uint64_t)v24;
      }
      v11 += v25;
      if (!--v10)
      {
        v15(v9, 1, 1, v4);
        break;
      }
    }
  }
  else
  {
    v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    swift_bridgeObjectRetain();
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v21(v9, 1, 1, v4);
  }
  swift_bridgeObjectRelease();
  return v13;
}

_QWORD *specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v4 = 32;
  do
  {
    v6 = *(_QWORD *)(a1 + v4);
    swift_getObjectType();
    v7 = swift_conformsToProtocol2();
    if (v7)
      v8 = v6;
    else
      v8 = 0;
    if (v7)
      v9 = v7;
    else
      v9 = 0;
    if (v8)
    {
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
      v11 = v3[2];
      v10 = v3[3];
      if (v11 >= v10 >> 1)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v3);
      v3[2] = v11 + 1;
      v5 = &v3[2 * v11];
      v5[4] = v8;
      v5[5] = v9;
    }
    v4 += 16;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph7NodeDefVG_SSs5NeverOTg504_s11d7Graph12fG120StoreV06createC03for2inAA0abC0VAA10XMLElement_p_AA0B0VztKFSSAA0cD0Vcfu0_32dc54af7003c11ac2eedf40a685444c7bAMSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v11;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      v4 += 18;
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36[18];
  _OWORD v37[9];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    return result;
  v4 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  v33 = a2;
  while (1)
  {
    v5 = *v4;
    v6 = swift_unknownObjectRetain();
    createNodeDef(for:)(v6, v5, (uint64_t)v36);
    outlined init with take of MetalFunctionNode?((uint64_t)v36, (uint64_t)v37, &demangling cache variable for type metadata for NodeDef?);
    if (getEnumTag for IOAttachment((uint64_t)v37) == 1)
      goto LABEL_4;
    v44 = v37[6];
    v45 = v37[7];
    v46 = v37[8];
    v40 = v37[2];
    v41 = v37[3];
    v42 = v37[4];
    v43 = v37[5];
    v38 = v37[0];
    v39 = v37[1];
    swift_getObjectType();
    v7 = XMLNode.subscript.getter(1701667182, 0xE400000000000000);
    if (!v8)
    {
      outlined release of NodeDef?(v36);
LABEL_4:
      swift_unknownObjectRelease();
      goto LABEL_5;
    }
    v9 = v7;
    v10 = v8;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *a2;
    v34 = v9;
    v35 = (_QWORD *)*a2;
    *a2 = 0x8000000000000000;
    v47 = v10;
    v14 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10);
    v15 = *(_QWORD *)(v12 + 16);
    v16 = (v13 & 1) == 0;
    v17 = v15 + v16;
    if (__OFADD__(v15, v16))
      break;
    v18 = v13;
    if (*(_QWORD *)(v12 + 24) >= v17)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, isUniquelyReferenced_nonNull_native);
      v19 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v47);
      if ((v18 & 1) != (v20 & 1))
        goto LABEL_23;
      v14 = v19;
    }
    if ((v18 & 1) != 0)
    {
      outlined assign with take of NodeDef((uint64_t)&v38, v35[7] + 144 * v14);
    }
    else
    {
      v35[(v14 >> 6) + 8] |= 1 << v14;
      v21 = (uint64_t *)(v35[6] + 16 * v14);
      v22 = v47;
      *v21 = v34;
      v21[1] = v22;
      v23 = (_OWORD *)(v35[7] + 144 * v14);
      *v23 = v38;
      v24 = v39;
      v25 = v40;
      v26 = v42;
      v23[3] = v41;
      v23[4] = v26;
      v23[1] = v24;
      v23[2] = v25;
      v27 = v43;
      v28 = v44;
      v29 = v46;
      v23[7] = v45;
      v23[8] = v29;
      v23[5] = v27;
      v23[6] = v28;
      v30 = v35[2];
      v31 = __OFADD__(v30, 1);
      v32 = v30 + 1;
      if (v31)
        goto LABEL_22;
      v35[2] = v32;
      swift_bridgeObjectRetain();
    }
    a2 = v33;
    *v33 = v35;
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    v4 += 2;
    if (!--v2)
      return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;

  v3 = v2;
  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    for (i = (uint64_t *)(swift_bridgeObjectRetain() + 40); ; i += 2)
    {
      v7 = *i;
      v8 = swift_unknownObjectRetain();
      collectNodeDefs(_:into:)(v8, v7, a2);
      if (v3)
        break;
      swift_unknownObjectRelease();
      if (!--v4)
        return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t *NodeDefStore.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return &static NodeDefStore.shared;
}

uint64_t NodeDefStore.nodeDef(named:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8;
  char v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v18[9];
  _OWORD __dst[9];
  _BYTE v20[144];

  if (!*(_QWORD *)(a3 + 16))
    goto LABEL_5;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    _s11ShaderGraph7NodeDefVSgWOi0_(__dst);
    goto LABEL_6;
  }
  v10 = (_OWORD *)(*(_QWORD *)(a3 + 56) + 144 * v8);
  v18[0] = *v10;
  v11 = v10[4];
  v13 = v10[1];
  v12 = v10[2];
  v18[3] = v10[3];
  v18[4] = v11;
  v18[1] = v13;
  v18[2] = v12;
  v14 = v10[8];
  v16 = v10[5];
  v15 = v10[6];
  v18[7] = v10[7];
  v18[8] = v14;
  v18[5] = v16;
  v18[6] = v15;
  memmove(__dst, v10, 0x90uLL);
  destructiveProjectEnumData for NodePersonality.ShaderType(__dst);
  outlined retain of NodeDef((uint64_t)v18);
  swift_bridgeObjectRelease();
LABEL_6:
  outlined init with take of MetalFunctionNode?((uint64_t)__dst, (uint64_t)v20, &demangling cache variable for type metadata for NodeDef?);
  return outlined init with take of MetalFunctionNode?((uint64_t)v20, a4, &demangling cache variable for type metadata for NodeDef?);
}

uint64_t NodeDefStore.createNode(in:nodeDefName:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, _OWORD *a5@<X8>)
{
  unint64_t v10;
  char v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t result;
  __int128 v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31[12];
  _OWORD v32[12];
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];
  _OWORD v36[9];

  if (*(_QWORD *)(a4 + 16))
  {
    swift_bridgeObjectRetain();
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v11 & 1) != 0)
    {
      v12 = (_OWORD *)(*(_QWORD *)(a4 + 56) + 144 * v10);
      v36[0] = *v12;
      v13 = v12[4];
      v15 = v12[1];
      v14 = v12[2];
      v36[3] = v12[3];
      v36[4] = v13;
      v36[1] = v15;
      v36[2] = v14;
      v16 = v12[8];
      v18 = v12[5];
      v17 = v12[6];
      v36[7] = v12[7];
      v36[8] = v16;
      v36[5] = v18;
      v36[6] = v17;
      outlined retain of NodeDef((uint64_t)v36);
      swift_bridgeObjectRelease();
      specialized NodeDefStore.createNode(in:from:label:)(a1, v36, &v34);
      result = outlined release of NodeDef((uint64_t)v36);
      v20 = v35[0];
      *a5 = v34;
      a5[1] = v20;
      *(_OWORD *)((char *)a5 + 25) = *(_OWORD *)((char *)v35 + 9);
      return result;
    }
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)&v31[0] = a2;
  *((_QWORD *)&v31[0] + 1) = a3;
  _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi18_((uint64_t)v31);
  outlined init with take of UserGraphError.ErrorType(v31, (uint64_t)v32);
  lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
  v33 = 0uLL;
  swift_allocError();
  *v21 = v32[0];
  v22 = v32[4];
  v24 = v32[1];
  v23 = v32[2];
  v21[3] = v32[3];
  v21[4] = v22;
  v21[1] = v24;
  v21[2] = v23;
  v25 = v32[8];
  v27 = v32[5];
  v26 = v32[6];
  v21[7] = v32[7];
  v21[8] = v25;
  v21[5] = v27;
  v21[6] = v26;
  v28 = v33;
  v30 = v32[9];
  v29 = v32[10];
  v21[11] = v32[11];
  v21[12] = v28;
  v21[9] = v30;
  v21[10] = v29;
  swift_bridgeObjectRetain();
  return swift_willThrow();
}

ShaderGraph::NodeDefStore __swiftcall NodeDefStore.init()()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  ShaderGraph::NodeDefStore result;

  v0 = MEMORY[0x24BEE4AF8];
  v1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v2 = specialized Dictionary.init(dictionaryLiteral:)(v0);
  v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)(v0);
  v4 = (void *)v1;
  v5 = (void *)v2;
  result.implementations._rawValue = v3;
  result.geomPropDefs._rawValue = v5;
  result.nodeDefs._rawValue = v4;
  return result;
}

void specialized thunk for @callee_guaranteed () -> (@owned [NodeDef.Implementation])(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
}

double NodeDefStore.createNode(for:in:)@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  double result;
  __int128 v6;
  __int128 v7;
  _OWORD v8[2];

  specialized NodeDefStore.createNode(for:in:)(a1, a2, &v7);
  if (!v3)
  {
    v6 = v8[0];
    *a3 = v7;
    a3[1] = v6;
    result = *(double *)((char *)v8 + 9);
    *(_OWORD *)((char *)a3 + 25) = *(_OWORD *)((char *)v8 + 9);
  }
  return result;
}

uint64_t NodeDefStore.implementations(for:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;

  if (!*(_QWORD *)(a4 + 16))
    return MEMORY[0x24BEE4AF8];
  v6 = *a1;
  v5 = a1[1];
  swift_bridgeObjectRetain();
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v5);
  if ((v8 & 1) != 0)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v7);
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t NodeDefStore.implementation(for:target:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;

  v8 = type metadata accessor for NodeDef.Implementation(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NodeDef.Implementation?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a3 + 16))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a4, 1, 1, v8);
  v16 = *a1;
  v15 = (void *)a1[1];
  swift_bridgeObjectRetain();
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(v16, (uint64_t)v15);
  if ((v18 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a4, 1, 1, v8);
  }
  v19 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(v19 + 16);
  if (v20)
  {
    v37 = v16;
    v38 = v15;
    v39 = v14;
    v40 = a4;
    v21 = v9;
    v22 = v19 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v35 = v19;
    v36 = v21;
    v23 = *(_QWORD *)(v21 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of NodeDef.Implementation.Kind(v22, (uint64_t)v11, type metadata accessor for NodeDef.Implementation);
      v24 = *(_QWORD *)&v11[*(int *)(v8 + 20)];
      if ((v24 & 0xC000000000000001) != 0)
      {
        if (!__CocoaSet.count.getter())
          break;
      }
      else if (!*(_QWORD *)(v24 + 16))
      {
        break;
      }
      swift_retain();
      v25 = swift_bridgeObjectRetain();
      v26 = specialized Sequence.contains(where:)(v25);
      swift_bridgeObjectRelease();
      swift_release();
      if ((v26 & 1) != 0)
        break;
      outlined destroy of NodeDef.Implementation((uint64_t)v11, type metadata accessor for NodeDef.Implementation);
      v22 += v23;
      if (!--v20)
      {
        swift_bridgeObjectRelease();
        v27 = 1;
        v14 = v39;
        a4 = v40;
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRelease();
    v14 = v39;
    outlined init with take of NodeDef.Implementation.Kind((uint64_t)v11, (uint64_t)v39, type metadata accessor for NodeDef.Implementation);
    v27 = 0;
    a4 = v40;
LABEL_15:
    v16 = v37;
    v15 = v38;
    v9 = v36;
  }
  else
  {
    v27 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v14, v27, 1, v8);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8) == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_245FBECD0;
    v42 = 0;
    v43 = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    v30._object = (void *)0x8000000245FCE460;
    v30._countAndFlagsBits = 0xD000000000000024;
    String.append(_:)(v30);
    swift_bridgeObjectRetain();
    v31._countAndFlagsBits = v16;
    v31._object = v15;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = 0x2074656772617420;
    v32._object = (void *)0xE800000000000000;
    String.append(_:)(v32);
    v41 = a2;
    type metadata accessor for MaterialXTarget();
    _print_unlocked<A, B>(_:_:)();
    v33 = v42;
    v34 = v43;
    *(_QWORD *)(v29 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v29 + 32) = v33;
    *(_QWORD *)(v29 + 40) = v34;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
  }
  return outlined init with take of MetalFunctionNode?((uint64_t)v14, a4, (uint64_t *)&demangling cache variable for type metadata for NodeDef.Implementation?);
}

uint64_t NodeDefStore.geomPropDef(named:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;

  if (*(_QWORD *)(a3 + 16))
  {
    v7 = result;
    swift_bridgeObjectRetain();
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(v7, a2);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 56) + (v8 << 6);
      v11 = *(_QWORD *)(v10 + 8);
      v21 = *(_QWORD *)v10;
      v12 = *(_QWORD *)(v10 + 16);
      v13 = *(_QWORD *)(v10 + 24);
      v14 = *(_QWORD *)(v10 + 32);
      v15 = *(unsigned __int8 *)(v10 + 40);
      v16 = *(_QWORD *)(v10 + 48);
      v17 = *(_BYTE *)(v10 + 56);
      v18 = v15 | ((unint64_t)*(unsigned __int8 *)(v10 + 41) << 8);
      swift_bridgeObjectRetain();
      swift_retain();
      v19 = v15;
      v20 = v21;
      outlined copy of GeomPropDef.GeomProp(v13, v14, v19);
    }
    else
    {
      v20 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v18 = 0;
      v16 = 0;
      v17 = 0;
    }
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v20 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v18 = 0;
    v16 = 0;
    v17 = 0;
  }
  *(_QWORD *)a4 = v20;
  *(_QWORD *)(a4 + 8) = v11;
  *(_QWORD *)(a4 + 16) = v12;
  *(_QWORD *)(a4 + 24) = v13;
  *(_QWORD *)(a4 + 32) = v14;
  *(_QWORD *)(a4 + 40) = v18;
  *(_QWORD *)(a4 + 48) = v16;
  *(_BYTE *)(a4 + 56) = v17;
  return result;
}

uint64_t static NodeDefStore.createShared()()
{
  return specialized static NodeDefStore.createDefault()();
}

uint64_t static NodeDefStore.shared.getter()
{
  uint64_t v0;

  if (one-time initialization token for shared != -1)
    swift_once();
  v0 = static NodeDefStore.shared;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t NodeDefStore.nodeDefs.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*NodeDefStore.nodeDefs.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t NodeDefStore.geomPropDefs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NodeDefStore.geomPropDefs.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*NodeDefStore.geomPropDefs.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t NodeDefStore.implementations.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NodeDefStore.implementations.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*NodeDefStore.implementations.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

ShaderGraph::NodeDefStore __swiftcall NodeDefStore.init(nodeDefs:geomPropDefs:implementations:)(Swift::OpaquePointer nodeDefs, Swift::OpaquePointer geomPropDefs, Swift::OpaquePointer implementations)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t i;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  _QWORD *rawValue;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  ShaderGraph::NodeDefStore result;

  v4 = *((_QWORD *)nodeDefs._rawValue + 2);
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v63 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    v6 = v63;
    v7 = v4 - 1;
    for (i = 32; ; i += 144)
    {
      v9 = *(_OWORD *)((char *)nodeDefs._rawValue + i + 112);
      v60 = *(_OWORD *)((char *)nodeDefs._rawValue + i + 96);
      v61 = v9;
      v62 = *(_OWORD *)((char *)nodeDefs._rawValue + i + 128);
      v10 = *(_OWORD *)((char *)nodeDefs._rawValue + i + 16);
      v54 = *(_OWORD *)((char *)nodeDefs._rawValue + i);
      v55 = v10;
      v11 = *(_OWORD *)((char *)nodeDefs._rawValue + i + 48);
      v56 = *(_OWORD *)((char *)nodeDefs._rawValue + i + 32);
      v57 = v11;
      v12 = *(_OWORD *)((char *)nodeDefs._rawValue + i + 80);
      v58 = *(_OWORD *)((char *)nodeDefs._rawValue + i + 64);
      v59 = v12;
      v13 = v54;
      outlined retain of NodeDef((uint64_t)&v54);
      v63 = v6;
      v15 = *(_QWORD *)(v6 + 16);
      v14 = *(_QWORD *)(v6 + 24);
      swift_bridgeObjectRetain();
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v6 = v63;
      }
      v47 = v56;
      v48 = v57;
      v53 = v62;
      v51 = v60;
      v52 = v61;
      v49 = v58;
      v50 = v59;
      v45 = v54;
      v46 = v55;
      *(_QWORD *)(v6 + 16) = v15 + 1;
      v16 = (_OWORD *)(v6 + 160 * v15);
      v16[2] = v13;
      v16[3] = v45;
      v16[6] = v48;
      v16[7] = v49;
      v16[4] = v46;
      v16[5] = v47;
      v16[10] = v52;
      v16[11] = v53;
      v16[8] = v50;
      v16[9] = v51;
      if (!v7)
        break;
      --v7;
    }
    swift_bridgeObjectRelease();
    rawValue = geomPropDefs._rawValue;
    v5 = MEMORY[0x24BEE4AF8];
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_8;
  }
  else
  {
    rawValue = geomPropDefs._rawValue;
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    {
LABEL_8:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NodeDef>);
      v18 = static _DictionaryStorage.allocate(capacity:)();
      goto LABEL_11;
    }
  }
  v18 = MEMORY[0x24BEE4B00];
LABEL_11:
  *(_QWORD *)&v54 = v18;
  v19 = swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v19, 1, &v54);
  swift_bridgeObjectRelease();
  v20 = (void *)v54;
  v21 = rawValue[2];
  if (v21)
  {
    v37 = (void *)v54;
    *(_QWORD *)&v54 = v5;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
    v22 = 0;
    v23 = v54;
    do
    {
      v24 = rawValue[v22 + 5];
      v43 = rawValue[v22 + 4];
      v25 = rawValue[v22 + 6];
      v26 = rawValue[v22 + 7];
      v27 = rawValue[v22 + 8];
      v28 = rawValue[v22 + 9];
      v42 = BYTE1(rawValue[v22 + 9]);
      v41 = rawValue[v22 + 10];
      v40 = rawValue[v22 + 11];
      swift_bridgeObjectRetain();
      swift_retain();
      v44 = v27;
      outlined copy of GeomPropDef.GeomProp(v26, v27, v28);
      *(_QWORD *)&v54 = v23;
      v30 = *(_QWORD *)(v23 + 16);
      v29 = *(_QWORD *)(v23 + 24);
      swift_bridgeObjectRetain();
      if (v30 >= v29 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
        v23 = v54;
      }
      *(_QWORD *)(v23 + 16) = v30 + 1;
      v31 = v23 + 80 * v30;
      *(_QWORD *)(v31 + 32) = v43;
      *(_QWORD *)(v31 + 40) = v24;
      *(_QWORD *)(v31 + 48) = v43;
      *(_QWORD *)(v31 + 56) = v24;
      *(_QWORD *)(v31 + 64) = v25;
      *(_QWORD *)(v31 + 72) = v26;
      *(_QWORD *)(v31 + 80) = v44;
      *(_BYTE *)(v31 + 88) = v28;
      *(_BYTE *)(v31 + 89) = v42;
      *(_QWORD *)(v31 + 96) = v41;
      *(_BYTE *)(v31 + 104) = v40;
      v22 += 8;
      --v21;
      rawValue = geomPropDefs._rawValue;
    }
    while (v21);
    swift_bridgeObjectRelease();
    v20 = v37;
    if (*(_QWORD *)(v23 + 16))
      goto LABEL_17;
LABEL_19:
    v32 = MEMORY[0x24BEE4B00];
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_19;
LABEL_17:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, GeomPropDef>);
  v32 = static _DictionaryStorage.allocate(capacity:)();
LABEL_20:
  *(_QWORD *)&v54 = v32;
  v33 = swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v33, 1, &v54);
  swift_bridgeObjectRelease();
  v34 = (void *)v54;
  v35 = v20;
  v36 = implementations._rawValue;
  result.implementations._rawValue = v36;
  result.geomPropDefs._rawValue = v34;
  result.nodeDefs._rawValue = v35;
  return result;
}

uint64_t NodeDefStore.implementation(for:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t inited;

  type metadata accessor for MaterialXTarget();
  inited = swift_initStaticObject();
  return NodeDefStore.implementation(for:target:)(a1, inited, a2, a3);
}

BOOL static NodeDefStore.Errors.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void NodeDefStore.Errors.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int NodeDefStore.Errors.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

uint64_t static NodeDefStore.createDefault()()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = specialized static NodeDefStore.createDefault()();
  if (v0)
    return v2;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NodeDefStore.loadLibrary()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  _QWORD *v42;
  uint64_t v43;
  void *v44;
  id v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  char v63;
  _BYTE *v64;
  _BYTE *v65;
  char *v66;
  char *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  _QWORD *v72;
  id v73;
  void *v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(char *, uint64_t);
  char *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  void *v98;
  _QWORD *v99;
  void *v100;
  id v101;
  char *v102;
  uint64_t v103;
  uint64_t ObjectType;
  uint64_t v105;
  _QWORD *v106;
  void *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  unint64_t v124;
  uint64_t v125;
  _BOOL8 v126;
  uint64_t v127;
  unint64_t v128;
  int v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t *v132;
  _OWORD *v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  BOOL v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  _QWORD *v152;
  char v153;
  uint64_t v154;
  char v155;
  unint64_t v156;
  uint64_t v157;
  _BOOL8 v158;
  uint64_t v159;
  char v160;
  unint64_t v161;
  char v162;
  _QWORD *v163;
  _QWORD *v164;
  uint64_t v165;
  _OWORD *v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  id v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  _QWORD *v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v223;
  char v224;
  uint64_t v225;
  char v226;
  unint64_t v227;
  uint64_t v228;
  _BOOL8 v229;
  uint64_t v230;
  char v231;
  unint64_t v232;
  char v233;
  _QWORD *v234;
  char **v235;
  char *v236;
  _OWORD *v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  void *v265;
  uint64_t v266;
  void *v267;
  _QWORD *v268;
  _QWORD *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  char *v279;
  uint64_t v280;
  char v281;
  _QWORD *v282;
  char v283;
  uint64_t v284;
  char v285;
  unint64_t v286;
  uint64_t v287;
  _BOOL8 v288;
  uint64_t v289;
  char v290;
  unint64_t v291;
  char v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  void *v313;
  _QWORD *v314;
  void *v315;
  _QWORD *v316;
  uint64_t v317;
  _QWORD *v318;
  uint64_t v319;
  void *v320;
  unint64_t IsNativeType;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  _QWORD *v325;
  void *v326;
  uint64_t v327;
  unint64_t *v328;
  void *v329;
  char *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  _QWORD *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  uint64_t v340;
  _BOOL8 v341;
  uint64_t v342;
  unint64_t v343;
  int v344;
  uint64_t v345;
  _QWORD *v346;
  uint64_t *v347;
  _OWORD *v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  uint64_t v352;
  uint64_t v353;
  char v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  void *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  _QWORD *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t i;
  uint64_t v400;
  void (*v401)(char *, unint64_t);
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  id v407;
  _QWORD *v408;
  _QWORD *v409;
  uint64_t v410;
  char *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  char *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  _QWORD *v427;
  uint64_t *v428;
  char *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t v437;
  uint64_t v438;
  uint64_t v439;
  _QWORD *v440;
  char *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  BOOL v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  BOOL v453;
  _QWORD *v454;
  uint64_t v455;
  uint64_t v456;
  id v457;
  __int128 v458;
  _OWORD *v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  uint64_t v464;
  char v465;
  uint64_t v466;
  char v467;
  unint64_t v468;
  uint64_t v469;
  _BOOL8 v470;
  uint64_t v471;
  char v472;
  unint64_t v473;
  char v474;
  _QWORD *v475;
  _QWORD *v476;
  _QWORD *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  id v485;
  _QWORD *v486;
  uint64_t v487;
  uint64_t v488;
  id v489;
  uint64_t v490;
  uint64_t v491;
  _QWORD *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  _QWORD *v497;
  char *v498;
  uint64_t v499;
  id v500;
  char *v501;
  char *v502;
  id v503;
  char *v504;
  uint64_t v505;
  char *v506;
  _OWORD *v507;
  uint64_t v508;
  id v509;
  uint64_t v510;
  unint64_t v511;
  char *v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  char *v520;
  void *v521;
  char *v522;
  _QWORD *v523;
  __int128 v524;
  uint64_t v525;
  _OWORD v526[2];
  uint64_t v527;
  uint64_t v528;
  uint64_t v529[18];
  uint64_t v530[18];
  uint64_t v531[18];
  _OWORD v532[2];
  _OWORD v533[2];
  _OWORD v534[2];
  _OWORD v535[2];
  uint64_t v536;
  __int128 v537;
  __int128 v538;
  unsigned __int8 v539;
  unsigned __int8 v540;
  uint64_t v541;
  char v542;
  _OWORD v543[9];
  _OWORD v544[2];
  _OWORD v545[9];
  _OWORD v546[9];
  _OWORD v547[9];
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  _OWORD v557[9];
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  uint64_t v567;
  __int128 v568;
  __int128 v569;
  unint64_t v570;
  uint64_t v571;
  char v572;
  _QWORD *v573;

  v505 = type metadata accessor for NodeDef.Implementation(0);
  v0 = MEMORY[0x24BDAC7A8](v505);
  v2 = (char *)&v484 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v0);
  v507 = (_OWORD *)((char *)&v484 - v3);
  v4 = type metadata accessor for CharacterSet();
  v518 = *(_QWORD *)(v4 - 8);
  v519 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v501 = (char *)&v484 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v517 = type metadata accessor for NSFastEnumerationIterator();
  v6 = *(_QWORD *)(v517 - 8);
  v7 = MEMORY[0x24BDAC7A8](v517);
  v510 = (uint64_t)&v484 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v573 = (uint64_t *)((char *)&v484 - v9);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v512 = (char *)&v484 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v484 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v484 - v16;
  v18 = type metadata accessor for URL();
  v515 = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v514 = (uint64_t)&v484 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v502 = (char *)&v484 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v520 = (char *)&v484 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v504 = (char *)&v484 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v484 - v28;
  MEMORY[0x24BDAC7A8](v27);
  v506 = (char *)&v484 - v30;
  v31 = (void *)MEMORY[0x24954AF98](0xD000000000000015, 0x8000000245FC83C0);
  v32 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v31);

  if (!v32)
  {
    lazy protocol witness table accessor for type NodeDefStore.Errors and conformance NodeDefStore.Errors();
    swift_allocError();
    *v64 = 0;
    swift_willThrow();
    return;
  }
  v503 = v32;
  v33 = objc_msgSend(v32, sel_resourceURL);
  if (!v33)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v515 + 56))(v17, 1, 1, v18);
    goto LABEL_20;
  }
  v34 = v33;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  v35 = v515;
  v36 = *(void (**)(char *, char *, uint64_t))(v515 + 32);
  v36(v17, v29, v18);
  v516 = *(_QWORD *)(v35 + 56);
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v516)(v17, 0, 1, v18);
  v513 = *(_QWORD *)(v35 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v513)(v17, 1, v18) == 1)
  {
LABEL_20:
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v17, &demangling cache variable for type metadata for URL?);
    lazy protocol witness table accessor for type NodeDefStore.Errors and conformance NodeDefStore.Errors();
    swift_allocError();
    *v65 = 1;
    swift_willThrow();

    return;
  }
  v498 = v2;
  v522 = (char *)v36;
  v36(v506, v17, v18);
  v37 = v504;
  URL.appendingPathComponent(_:isDirectory:)();
  v509 = (id)objc_opt_self();
  v38 = objc_msgSend(v509, sel_defaultManager);
  v508 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>);
  v39 = swift_allocObject();
  v40 = specialized static Array._adoptStorage(_:count:)(v39, 1);
  v41 = (void *)*MEMORY[0x24BDBCCD0];
  *v42 = *MEMORY[0x24BDBCCD0];
  destructiveProjectEnumData for NodePersonality.ShaderType(v40);
  v43 = v18;
  v500 = v41;
  v44 = (void *)NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)();

  swift_bridgeObjectRelease();
  if (!v44)
  {

    v93 = *(void (**)(char *, uint64_t))(v515 + 8);
    v93(v37, v18);
    v94 = v506;
    v95 = v18;
LABEL_311:
    v93(v94, v95);
    return;
  }
  v511 = v6;
  v527 = specialized ContiguousArray.init()();
  specialized ContiguousArray.reserveCapacity(_:)(0);
  v45 = v44;
  v46 = v573;
  NSEnumerator.makeIterator()();
  v489 = v45;

  v47 = lazy protocol witness table accessor for type SGDataType and conformance SGDataType(&lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator, (uint64_t (*)(uint64_t))MEMORY[0x24BDCD520], MEMORY[0x24BDCD530]);
  v48 = v517;
  dispatch thunk of IteratorProtocol.next()();
  while (v525)
  {
    outlined init with take of Any(&v524, v526);
    outlined init with copy of Any((uint64_t)v526, (uint64_t)&v524);
    swift_dynamicCast();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v526);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    v49 = *(_QWORD *)(v527 + 16);
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v49);
    v50 = v49;
    v46 = v573;
    v51 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v50, (uint64_t)v29);
    destructiveProjectEnumData for NodePersonality.ShaderType(v51);
    dispatch thunk of IteratorProtocol.next()();
  }
  v499 = v47;
  v497 = *(_QWORD **)(v511 + 8);
  ((void (*)(_QWORD *, uint64_t))v497)(v46, v48);
  outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v524, &demangling cache variable for type metadata for Any?);
  v52 = v527;
  *(_QWORD *)&v526[0] = specialized ContiguousArray.init()();
  v53 = specialized Array.count.getter(v52);
  v54 = v43;
  v511 = v43;
  v55 = (void (*)(char *, char *, uint64_t))v522;
  v573 = (_QWORD *)v53;
  if (v53)
  {
    v56 = 0;
    do
    {
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v56, 1, v52);
      (*(void (**)(char *, unint64_t, uint64_t))(v515 + 16))(v15, v52+ ((*(unsigned __int8 *)(v515 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v515 + 80))+ *(_QWORD *)(v515 + 72) * v56, v54);
      v61 = (_QWORD *)(v56 + 1);
      if (__OFADD__(v56, 1))
        goto LABEL_401;
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v516)(v15, 0, 1, v54);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v513)(v15, 1, v54) == 1)
        goto LABEL_22;
      v55(v520, v15, v54);
      if (URL.pathExtension.getter() == 2020373613 && v62 == 0xE400000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v63 & 1) == 0)
        {
          v54 = v511;
          (*(void (**)(char *, unint64_t))(v515 + 8))(v520, v511);
          goto LABEL_11;
        }
      }
      v57 = v511;
      ((void (*)(char *, char *, unint64_t))v522)(v29, v520, v511);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v58 = *(_QWORD *)(*(_QWORD *)&v526[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v58);
      v59 = v58;
      v54 = v57;
      v55 = (void (*)(char *, char *, uint64_t))v522;
      v60 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v59, (uint64_t)v29);
      destructiveProjectEnumData for NodePersonality.ShaderType(v60);
LABEL_11:
      ++v56;
    }
    while (v61 != v573);
  }
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v516)(v15, 1, 1, v54);
LABEL_22:
  swift_release();
  outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v15, &demangling cache variable for type metadata for URL?);
  v528 = *(_QWORD *)&v526[0];
  v66 = v502;
  v67 = v506;
  URL.appendingPathComponent(_:isDirectory:)();
  v68 = objc_msgSend(v509, sel_defaultManager);
  v69 = swift_allocObject();
  v70 = specialized static Array._adoptStorage(_:count:)(v69, 1);
  v71 = v500;
  *v72 = v500;
  destructiveProjectEnumData for NodePersonality.ShaderType(v70);
  v73 = v71;
  v74 = (void *)NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)();

  swift_bridgeObjectRelease();
  if (!v74)
  {

    v93 = *(void (**)(char *, uint64_t))(v515 + 8);
    v93(v66, v54);
    swift_bridgeObjectRelease();
    v93(v504, v54);
    v94 = v67;
    v95 = v54;
    goto LABEL_311;
  }
  v527 = specialized ContiguousArray.init()();
  specialized ContiguousArray.reserveCapacity(_:)(0);
  v75 = v74;
  v76 = v510;
  NSEnumerator.makeIterator()();
  v485 = v75;

  v77 = v517;
  dispatch thunk of IteratorProtocol.next()();
  while (v525)
  {
    outlined init with take of Any(&v524, v526);
    outlined init with copy of Any((uint64_t)v526, (uint64_t)&v524);
    swift_dynamicCast();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v526);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    v78 = *(_QWORD *)(v527 + 16);
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v78);
    v79 = v78;
    v77 = v517;
    v80 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v79, (uint64_t)v29);
    destructiveProjectEnumData for NodePersonality.ShaderType(v80);
    dispatch thunk of IteratorProtocol.next()();
  }
  ((void (*)(uint64_t, uint64_t))v497)(v76, v77);
  outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v524, &demangling cache variable for type metadata for Any?);
  v81 = v527;
  *(_QWORD *)&v526[0] = specialized ContiguousArray.init()();
  v82 = specialized Array.count.getter(v81);
  v83 = (uint64_t)v512;
  if (v82)
  {
    v84 = v82;
    v85 = 0;
    v86 = v514;
    while (1)
    {
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v85, 1, v81);
      v87 = v511;
      (*(void (**)(uint64_t, unint64_t, unint64_t))(v515 + 16))(v83, v81+ ((*(unsigned __int8 *)(v515 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v515 + 80))+ *(_QWORD *)(v515 + 72) * v85, v511);
      v88 = v85 + 1;
      if (__OFADD__(v85, 1))
        goto LABEL_405;
      ((void (*)(uint64_t, _QWORD, uint64_t, unint64_t))v516)(v83, 0, 1, v87);
      if (((unsigned int (*)(uint64_t, uint64_t, unint64_t))v513)(v83, 1, v87) == 1)
        goto LABEL_38;
      ((void (*)(uint64_t, uint64_t, unint64_t))v522)(v86, v83, v87);
      if (URL.pathExtension.getter() == 2020373613 && v89 == 0xE400000000000000)
        break;
      v90 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v90 & 1) != 0)
        goto LABEL_35;
      (*(void (**)(uint64_t, unint64_t))(v515 + 8))(v514, v511);
LABEL_28:
      ++v85;
      v83 = (uint64_t)v512;
      if (v88 == v84)
        goto LABEL_37;
    }
    swift_bridgeObjectRelease();
LABEL_35:
    ((void (*)(char *, uint64_t, unint64_t))v522)(v29, v514, v511);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    v91 = *(_QWORD *)(*(_QWORD *)&v526[0] + 16);
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v91);
    v92 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v91, (uint64_t)v29);
    destructiveProjectEnumData for NodePersonality.ShaderType(v92);
    goto LABEL_28;
  }
LABEL_37:
  ((void (*)(uint64_t, uint64_t, uint64_t, unint64_t))v516)(v83, 1, 1, v511);
LABEL_38:
  swift_release();
  outlined destroy of (input: Input, fNode: MetalFunctionNode?)(v83, &demangling cache variable for type metadata for URL?);
  specialized Array.append<A>(contentsOf:)(*(uint64_t *)&v526[0]);
  v96 = swift_bridgeObjectRetain();
  v97 = v523;
  v98 = v521;
  v99 = specialized Sequence.compactMap<A>(_:)(v96, v523);
  v100 = v98;
  swift_bridgeObjectRelease();
  v496 = specialized Array._getCount()(v99);
  v486 = v99;
  if (!v496)
  {

    IsNativeType = v511;
LABEL_313:

    v401 = *(void (**)(char *, unint64_t))(v515 + 8);
    v401(v502, IsNativeType);
    swift_bridgeObjectRelease();
    v401(v504, IsNativeType);
    v401(v506, IsNativeType);
    swift_bridgeObjectRelease();
    return;
  }
  v497 = v99 + 4;
  v573 = v97 + 1;
  swift_bridgeObjectRetain();
  v101 = 0;
  while (1)
  {
    if (__OFADD__(v101, 1))
      goto LABEL_409;
    v500 = (char *)v101 + 1;
    v102 = (char *)v497[2 * (_QWORD)v101];
    v103 = v497[2 * (_QWORD)v101 + 1];
    ObjectType = swift_getObjectType();
    v105 = *(_QWORD *)(v103 + 8);
    swift_unknownObjectRetain();
    v517 = ObjectType;
    v514 = v105;
    v512 = v102;
    v106 = XMLNode.elements(forXPath:)(0x656465646F6E2F2ELL, 0xE900000000000066, ObjectType, v105);
    if (v100)
    {

      v107 = 0;
      v108 = v517;
      goto LABEL_45;
    }
    v141 = (uint64_t)v106;
    v521 = 0;
    v522 = (char *)specialized Array._getCount()(v106);
    if (v522)
      break;
    swift_bridgeObjectRelease();
LABEL_88:
    v176 = (*(uint64_t (**)(uint64_t))(v514 + 24))(v517);
    if (!v176)
    {
      v108 = v517;
      v107 = v521;
      goto LABEL_45;
    }
    v177 = v176;
    v178 = specialized static Array._allocateUninitialized(_:)(0);
    *(_QWORD *)&v526[0] = v178;
    v179 = specialized Array._getCount()(v177);
    if (v179)
    {
      v180 = v179;
      if (v179 < 1)
        goto LABEL_420;
      swift_bridgeObjectRetain();
      v181 = 32;
      do
      {
        v182 = *(_QWORD *)(v177 + v181);
        swift_getObjectType();
        v183 = swift_conformsToProtocol2();
        if (v183)
          v184 = v183;
        else
          v184 = 0;
        if (v183)
          v185 = v182;
        else
          v185 = 0;
        if (v185)
        {
          swift_unknownObjectRetain();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          v186 = *(_QWORD *)(*(_QWORD *)&v526[0] + 16);
          specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v186);
          v187 = v186;
          v97 = v523;
          v188 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v187, v185, v184);
          destructiveProjectEnumData for NodePersonality.ShaderType(v188);
        }
        v181 += 16;
        --v180;
      }
      while (v180);
      swift_bridgeObjectRelease_n();
      v178 = *(_QWORD *)&v526[0];
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v201 = specialized Array._getCount()(v178);
    v108 = v517;
    v490 = v201;
    if (!v201)
    {
      swift_bridgeObjectRelease();
      v107 = v521;
      goto LABEL_45;
    }
    v491 = v178 + 32;
    v488 = v178;
    swift_bridgeObjectRetain();
    v202 = 0;
    while (1)
    {
      v499 = v202 + 1;
      if (__OFADD__(v202, 1))
        goto LABEL_414;
      v203 = *(_QWORD *)(v491 + 16 * v202);
      v204 = *(_QWORD *)(v491 + 16 * v202 + 8);
      v205 = (id)swift_getObjectType();
      v206 = *(_QWORD *)(v204 + 8);
      swift_unknownObjectRetain();
      v513 = v206;
      v207 = v206;
      v510 = v203;
      v208 = v521;
      v209 = XMLNode.elements(forXPath:)(0x656465646F6E2F2ELL, 0xE900000000000066, (uint64_t)v205, v207);
      v521 = v208;
      if (v208)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        v315 = v521;
        goto LABEL_308;
      }
      v210 = v209;
      v211 = specialized Array._getCount()(v209);
      if (v211)
      {
        v212 = v211;
        v509 = v205;
        swift_bridgeObjectRetain();
        v213 = 0;
        v508 = (uint64_t)v210;
        v214 = v210 + 5;
        v516 = v212;
        while (1)
        {
          v215 = v213 + 1;
          if (__OFADD__(v213, 1))
            goto LABEL_392;
          v216 = *v214;
          v217 = swift_unknownObjectRetain();
          createNodeDef(for:)(v217, v216, (uint64_t)v530);
          outlined init with take of MetalFunctionNode?((uint64_t)v530, (uint64_t)v547, &demangling cache variable for type metadata for NodeDef?);
          if (getEnumTag for IOAttachment((uint64_t)v547) != 1)
          {
            v554 = v547[6];
            v555 = v547[7];
            v556 = v547[8];
            v550 = v547[2];
            v551 = v547[3];
            v553 = v547[5];
            v552 = v547[4];
            v549 = v547[1];
            v548 = v547[0];
            swift_getObjectType();
            v218 = XMLNode.subscript.getter(1701667182, 0xE400000000000000);
            if (v219)
            {
              v220 = v219;
              v221 = v218;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v223 = v97;
              v224 = isUniquelyReferenced_nonNull_native;
              *(_QWORD *)&v526[0] = *v223;
              v225 = *(_QWORD *)&v526[0];
              *v223 = 0x8000000000000000;
              v520 = (char *)v221;
              v522 = v220;
              v227 = specialized __RawDictionaryStorage.find<A>(_:)(v221, (uint64_t)v220);
              v228 = *(_QWORD *)(v225 + 16);
              v229 = (v226 & 1) == 0;
              v230 = v228 + v229;
              if (__OFADD__(v228, v229))
                goto LABEL_402;
              v231 = v226;
              if (*(_QWORD *)(v225 + 24) >= v230)
              {
                if ((v224 & 1) != 0)
                {
                  v234 = *(_QWORD **)&v526[0];
                  if ((v226 & 1) == 0)
                    goto LABEL_141;
                }
                else
                {
                  specialized _NativeDictionary.copy()();
                  v234 = *(_QWORD **)&v526[0];
                  if ((v231 & 1) == 0)
                    goto LABEL_141;
                }
              }
              else
              {
                specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v230, v224);
                v232 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v520, (uint64_t)v522);
                if ((v231 & 1) != (v233 & 1))
                  goto LABEL_424;
                v227 = v232;
                v234 = *(_QWORD **)&v526[0];
                if ((v231 & 1) == 0)
                {
LABEL_141:
                  v234[(v227 >> 6) + 8] |= 1 << v227;
                  v235 = (char **)(v234[6] + 16 * v227);
                  v236 = v522;
                  *v235 = v520;
                  v235[1] = v236;
                  v237 = (_OWORD *)(v234[7] + 144 * v227);
                  *v237 = v548;
                  v238 = v549;
                  v239 = v550;
                  v240 = v552;
                  v237[3] = v551;
                  v237[4] = v240;
                  v237[1] = v238;
                  v237[2] = v239;
                  v241 = v553;
                  v242 = v554;
                  v243 = v556;
                  v237[7] = v555;
                  v237[8] = v243;
                  v237[5] = v241;
                  v237[6] = v242;
                  v244 = v234[2];
                  v138 = __OFADD__(v244, 1);
                  v245 = v244 + 1;
                  if (v138)
                    goto LABEL_408;
                  v234[2] = v245;
                  swift_bridgeObjectRetain();
                  goto LABEL_143;
                }
              }
              outlined assign with take of NodeDef((uint64_t)&v548, v234[7] + 144 * v227);
LABEL_143:
              v246 = v523;
              *v523 = v234;
              v97 = v246;
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v212 = v516;
              goto LABEL_128;
            }
            outlined release of NodeDef?(v530);
          }
          swift_unknownObjectRelease();
LABEL_128:
          v214 += 2;
          ++v213;
          if (v215 == v212)
          {
            swift_bridgeObjectRelease_n();
            v205 = v509;
            goto LABEL_146;
          }
        }
      }
      swift_bridgeObjectRelease();
LABEL_146:
      v247 = (*(uint64_t (**)(id))(v513 + 24))(v205);
      if (!v247)
      {
        swift_unknownObjectRelease();
        v108 = v517;
        goto LABEL_214;
      }
      v248 = v247;
      v249 = specialized static Array._allocateUninitialized(_:)(0);
      *(_QWORD *)&v526[0] = v249;
      v250 = specialized Array._getCount()(v248);
      if (v250)
      {
        v251 = v250;
        if (v250 < 1)
          goto LABEL_422;
        swift_bridgeObjectRetain();
        v252 = 32;
        do
        {
          v253 = *(_QWORD *)(v248 + v252);
          swift_getObjectType();
          v254 = swift_conformsToProtocol2();
          if (v254)
            v255 = v254;
          else
            v255 = 0;
          if (v254)
            v256 = v253;
          else
            v256 = 0;
          if (v256)
          {
            swift_unknownObjectRetain();
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            v257 = *(_QWORD *)(*(_QWORD *)&v526[0] + 16);
            specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v257);
            v258 = v257;
            v97 = v523;
            v259 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v258, v256, v255);
            destructiveProjectEnumData for NodePersonality.ShaderType(v259);
          }
          v252 += 16;
          --v251;
        }
        while (v251);
        swift_bridgeObjectRelease_n();
        v249 = *(_QWORD *)&v526[0];
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v260 = specialized Array._getCount()(v249);
      v108 = v517;
      v494 = v260;
      if (!v260)
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_214;
      }
      v495 = v249 + 32;
      v487 = v249;
      swift_bridgeObjectRetain();
      v261 = 0;
LABEL_166:
      v508 = v261 + 1;
      if (__OFADD__(v261, 1))
        goto LABEL_413;
      v262 = *(_QWORD *)(v495 + 16 * v261);
      v263 = *(_QWORD *)(v495 + 16 * v261 + 8);
      v264 = swift_getObjectType();
      v265 = *(void **)(v263 + 8);
      swift_unknownObjectRetain();
      v509 = v265;
      v266 = (uint64_t)v265;
      v513 = v262;
      v267 = v521;
      v268 = XMLNode.elements(forXPath:)(0x656465646F6E2F2ELL, 0xE900000000000066, v264, v266);
      v521 = v267;
      if (v267)
        break;
      v269 = v268;
      v270 = specialized Array._getCount()(v268);
      if (v270)
      {
        v271 = v270;
        v493 = v264;
        swift_bridgeObjectRetain();
        v272 = 0;
        v492 = v269;
        v273 = v269 + 5;
        v516 = v271;
        while (1)
        {
          v274 = v272 + 1;
          if (__OFADD__(v272, 1))
          {
LABEL_388:
            __break(1u);
LABEL_389:
            __break(1u);
            goto LABEL_390;
          }
          v275 = *v273;
          v276 = swift_unknownObjectRetain();
          createNodeDef(for:)(v276, v275, (uint64_t)v531);
          outlined init with take of MetalFunctionNode?((uint64_t)v531, (uint64_t)v545, &demangling cache variable for type metadata for NodeDef?);
          if (getEnumTag for IOAttachment((uint64_t)v545) != 1)
          {
            v546[6] = v545[6];
            v546[7] = v545[7];
            v546[8] = v545[8];
            v546[2] = v545[2];
            v546[3] = v545[3];
            v546[5] = v545[5];
            v546[4] = v545[4];
            v546[1] = v545[1];
            v546[0] = v545[0];
            swift_getObjectType();
            v277 = XMLNode.subscript.getter(1701667182, 0xE400000000000000);
            if (v278)
            {
              v279 = v278;
              v280 = v277;
              v281 = swift_isUniquelyReferenced_nonNull_native();
              v282 = v97;
              v283 = v281;
              *(_QWORD *)&v526[0] = *v282;
              v284 = *(_QWORD *)&v526[0];
              *v282 = 0x8000000000000000;
              v520 = (char *)v280;
              v522 = v279;
              v286 = specialized __RawDictionaryStorage.find<A>(_:)(v280, (uint64_t)v279);
              v287 = *(_QWORD *)(v284 + 16);
              v288 = (v285 & 1) == 0;
              v289 = v287 + v288;
              if (__OFADD__(v287, v288))
                goto LABEL_397;
              v290 = v285;
              if (*(_QWORD *)(v284 + 24) >= v289)
              {
                if ((v283 & 1) == 0)
                  specialized _NativeDictionary.copy()();
              }
              else
              {
                specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v289, v283);
                v291 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v520, (uint64_t)v522);
                if ((v290 & 1) != (v292 & 1))
                  goto LABEL_424;
                v286 = v291;
              }
              v97 = v523;
              v293 = *(_QWORD *)&v526[0];
              if ((v290 & 1) != 0)
              {
                outlined assign with take of NodeDef((uint64_t)v546, *(_QWORD *)(*(_QWORD *)&v526[0] + 56) + 144 * v286);
              }
              else
              {
                specialized _NativeDictionary._insert(at:key:value:)(v286, (uint64_t)v520, (uint64_t)v522, v546, *(_QWORD **)&v526[0]);
                swift_bridgeObjectRetain();
              }
              *v97 = v293;
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v271 = v516;
              goto LABEL_172;
            }
            outlined release of NodeDef?(v531);
          }
          swift_unknownObjectRelease();
LABEL_172:
          v273 += 2;
          ++v272;
          if (v274 == v271)
          {
            swift_bridgeObjectRelease_n();
            v264 = v493;
            goto LABEL_188;
          }
        }
      }
      swift_bridgeObjectRelease();
LABEL_188:
      v294 = (*((uint64_t (**)(uint64_t))v509 + 3))(v264);
      if (!v294)
      {
        swift_unknownObjectRelease();
        v108 = v517;
        goto LABEL_165;
      }
      v295 = v294;
      v296 = specialized static Array._allocateUninitialized(_:)(0);
      *(_QWORD *)&v526[0] = v296;
      v297 = specialized Array._getCount()(v295);
      if (v297)
      {
        v298 = v297;
        if (v297 < 1)
          goto LABEL_419;
        swift_bridgeObjectRetain();
        v299 = 32;
        do
        {
          v300 = *(_QWORD *)(v295 + v299);
          swift_getObjectType();
          v301 = swift_conformsToProtocol2();
          if (v301)
            v302 = v301;
          else
            v302 = 0;
          if (v301)
            v303 = v300;
          else
            v303 = 0;
          if (v303)
          {
            swift_unknownObjectRetain();
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            v304 = *(_QWORD *)(*(_QWORD *)&v526[0] + 16);
            specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v304);
            v305 = v304;
            v97 = v523;
            v306 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v305, v303, v302);
            destructiveProjectEnumData for NodePersonality.ShaderType(v306);
          }
          v299 += 16;
          --v298;
        }
        while (v298);
        swift_bridgeObjectRelease_n();
        v296 = *(_QWORD *)&v526[0];
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v307 = specialized Array._getCount()(v296);
      v108 = v517;
      v520 = (char *)v307;
      if (!v307)
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_165;
      }
      swift_bridgeObjectRetain();
      v308 = 0;
      v516 = v296;
      v309 = (uint64_t *)(v296 + 40);
      do
      {
        if (__OFADD__(v308, 1))
          goto LABEL_403;
        v522 = (char *)(v308 + 1);
        v310 = *v309;
        v311 = swift_getObjectType();
        v312 = *(_QWORD *)(v310 + 8);
        swift_unknownObjectRetain();
        v313 = v521;
        v314 = XMLNode.elements(forXPath:)(0x656465646F6E2F2ELL, 0xE900000000000066, v311, v312);
        v315 = v313;
        if (v313)
        {
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease();
          v97 = v523;
          goto LABEL_307;
        }
        v316 = v523;
        specialized Sequence.forEach(_:)((uint64_t)v314, v523);
        swift_bridgeObjectRelease();
        v317 = (*(uint64_t (**)(uint64_t, uint64_t))(v312 + 24))(v311, v312);
        if (v317)
        {
          v318 = specialized Sequence.compactMap<A>(_:)(v317);
          swift_bridgeObjectRelease();
          specialized Sequence.forEach(_:)((uint64_t)v318, v316);
          v521 = 0;
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          v97 = v523;
        }
        else
        {
          v521 = 0;
          swift_unknownObjectRelease();
          v97 = v316;
        }
        v108 = v517;
        v309 += 2;
        ++v308;
      }
      while (v522 != v520);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease_n();
LABEL_165:
      v261 = v508;
      if (v508 != v494)
        goto LABEL_166;
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease_n();
LABEL_214:
      v202 = v499;
      if (v499 == v490)
      {
        swift_bridgeObjectRelease_n();
        v107 = v521;
        goto LABEL_45;
      }
    }
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    v315 = v521;
LABEL_307:
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
LABEL_308:
    swift_bridgeObjectRelease();

    v107 = 0;
LABEL_45:
    v109 = XMLNode.elements(forXPath:)(0x72706D6F65672F2ELL, 0xED0000666564706FLL, v108, v514);
    if (v107)
    {

      swift_unknownObjectRelease();
      v100 = 0;
    }
    else
    {
      v110 = (uint64_t)v109;
      v100 = 0;
      v522 = (char *)specialized Array._getCount()(v109);
      if (v522)
      {
        swift_bridgeObjectRetain();
        v111 = 0;
        v513 = v110;
        v112 = (uint64_t *)(v110 + 40);
        do
        {
          v113 = (char *)(v111 + 1);
          if (__OFADD__(v111, 1))
            goto LABEL_391;
          v114 = *v112;
          swift_getObjectType();
          swift_unknownObjectRetain();
          v115 = XMLNode.subscript.getter(1701667182, 0xE400000000000000);
          if (v116)
          {
            v117 = v115;
            v118 = v116;
            createGeomPropDef(for:)(v114, (uint64_t)v532);
            if (v100)
            {

              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
              v100 = 0;
            }
            else
            {
              v521 = 0;
              v119 = v573;
              v120 = swift_isUniquelyReferenced_nonNull_native();
              v121 = v117;
              *(_QWORD *)&v526[0] = *v119;
              v122 = *(_QWORD *)&v526[0];
              *v119 = 0x8000000000000000;
              v520 = (char *)v121;
              v124 = specialized __RawDictionaryStorage.find<A>(_:)(v121, v118);
              v125 = *(_QWORD *)(v122 + 16);
              v126 = (v123 & 1) == 0;
              v127 = v125 + v126;
              if (__OFADD__(v125, v126))
                goto LABEL_404;
              if (*(_QWORD *)(v122 + 24) >= v127)
              {
                if ((v120 & 1) == 0)
                {
                  v140 = v123;
                  specialized _NativeDictionary.copy()();
                  LOBYTE(v123) = v140;
                }
              }
              else
              {
                LODWORD(v516) = v123;
                specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v127, v120);
                v128 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v520, v118);
                v129 = v123 & 1;
                LOBYTE(v123) = v516;
                if ((v516 & 1) != v129)
                  goto LABEL_424;
                v124 = v128;
              }
              v130 = (uint64_t)v520;
              v131 = *(_QWORD **)&v526[0];
              if ((v123 & 1) != 0)
              {
                outlined assign with take of GeomPropDef((uint64_t)v532, *(_QWORD *)(*(_QWORD *)&v526[0] + 56) + (v124 << 6));
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)&v526[0] + 8 * (v124 >> 6) + 64) |= 1 << v124;
                v132 = (uint64_t *)(v131[6] + 16 * v124);
                *v132 = v130;
                v132[1] = v118;
                v133 = (_OWORD *)(v131[7] + (v124 << 6));
                v134 = v532[0];
                v135 = v532[1];
                v136 = v533[0];
                *(_OWORD *)((char *)v133 + 41) = *(_OWORD *)((char *)v533 + 9);
                v133[1] = v135;
                v133[2] = v136;
                *v133 = v134;
                v137 = v131[2];
                v138 = __OFADD__(v137, 1);
                v139 = v137 + 1;
                if (v138)
                  goto LABEL_410;
                v131[2] = v139;
                swift_bridgeObjectRetain();
              }
              *v573 = v131;
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v100 = v521;
            }
          }
          else
          {
            swift_unknownObjectRelease();
          }
          v112 += 2;
          ++v111;
        }
        while (v113 != v522);
        swift_bridgeObjectRelease_n();
        v97 = v523;
        v108 = v517;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v189 = (*(uint64_t (**)(uint64_t))(v514 + 24))(v108);
      if (v189)
      {
        v190 = v189;
        v191 = specialized static Array._allocateUninitialized(_:)(0);
        *(_QWORD *)&v526[0] = v191;
        v192 = specialized Array._getCount()(v190);
        if (!v192)
        {
          swift_bridgeObjectRelease();
          goto LABEL_219;
        }
        v193 = v192;
        if (v192 < 1)
          goto LABEL_421;
        swift_bridgeObjectRetain();
        v194 = 32;
        do
        {
          v195 = *(_QWORD *)(v190 + v194);
          swift_getObjectType();
          v196 = swift_conformsToProtocol2();
          if (v196)
            v197 = v196;
          else
            v197 = 0;
          if (v196)
            v198 = v195;
          else
            v198 = 0;
          if (v198)
          {
            swift_unknownObjectRetain();
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            v199 = *(_QWORD *)(*(_QWORD *)&v526[0] + 16);
            specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v199);
            v200 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v199, v198, v197);
            destructiveProjectEnumData for NodePersonality.ShaderType(v200);
          }
          v194 += 16;
          --v193;
        }
        while (v193);
        swift_bridgeObjectRelease_n();
        v191 = *(_QWORD *)&v526[0];
        v97 = v523;
LABEL_219:
        v510 = specialized Array._getCount()(v191);
        if (v510)
        {
          v509 = (id)(v191 + 32);
          v495 = v191;
          swift_bridgeObjectRetain();
          v319 = 0;
          v320 = v100;
          do
          {
            if (__OFADD__(v319, 1))
              goto LABEL_395;
            v513 = v319 + 1;
            IsNativeType = *((_QWORD *)v509 + 2 * v319);
            v322 = *((_QWORD *)v509 + 2 * v319 + 1);
            v323 = swift_getObjectType();
            v324 = *(_QWORD *)(v322 + 8);
            swift_unknownObjectRetain();
            v325 = XMLNode.elements(forXPath:)(0x72706D6F65672F2ELL, 0xED0000666564706FLL, v323, v324);
            if (v320)
            {

              swift_unknownObjectRelease();
              v320 = 0;
            }
            else
            {
              v508 = IsNativeType;
              v326 = 0;
              v522 = (char *)specialized Array._getCount()(v325);
              if (v522)
              {
                v514 = v324;
                v516 = v323;
                v327 = 0;
                v499 = swift_bridgeObjectRetain();
                v328 = (unint64_t *)(v499 + 40);
                v329 = 0;
                while (1)
                {
                  v330 = (char *)(v327 + 1);
                  if (__OFADD__(v327, 1))
                    break;
                  IsNativeType = *v328;
                  swift_getObjectType();
                  swift_unknownObjectRetain();
                  v331 = XMLNode.subscript.getter(1701667182, 0xE400000000000000);
                  if (v332)
                  {
                    v333 = v331;
                    v334 = v332;
                    createGeomPropDef(for:)(IsNativeType, (uint64_t)v534);
                    if (v329)
                    {

                      swift_unknownObjectRelease();
                      swift_bridgeObjectRelease();
                      v329 = 0;
                    }
                    else
                    {
                      v521 = 0;
                      v335 = v573;
                      v336 = swift_isUniquelyReferenced_nonNull_native();
                      v337 = v333;
                      *(_QWORD *)&v526[0] = *v335;
                      v338 = *(_QWORD *)&v526[0];
                      *v335 = 0x8000000000000000;
                      v520 = (char *)v337;
                      IsNativeType = specialized __RawDictionaryStorage.find<A>(_:)(v337, v334);
                      v340 = *(_QWORD *)(v338 + 16);
                      v341 = (v339 & 1) == 0;
                      v342 = v340 + v341;
                      if (__OFADD__(v340, v341))
                        goto LABEL_393;
                      if (*(_QWORD *)(v338 + 24) >= v342)
                      {
                        if ((v336 & 1) == 0)
                        {
                          v354 = v339;
                          specialized _NativeDictionary.copy()();
                          LOBYTE(v339) = v354;
                        }
                      }
                      else
                      {
                        LODWORD(v517) = v339;
                        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v342, v336);
                        v343 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v520, v334);
                        v344 = v339 & 1;
                        LOBYTE(v339) = v517;
                        if ((v517 & 1) != v344)
                          goto LABEL_424;
                        IsNativeType = v343;
                      }
                      v345 = (uint64_t)v520;
                      v346 = *(_QWORD **)&v526[0];
                      if ((v339 & 1) != 0)
                      {
                        outlined assign with take of GeomPropDef((uint64_t)v534, *(_QWORD *)(*(_QWORD *)&v526[0] + 56) + (IsNativeType << 6));
                      }
                      else
                      {
                        *(_QWORD *)(*(_QWORD *)&v526[0] + 8 * (IsNativeType >> 6) + 64) |= 1 << IsNativeType;
                        v347 = (uint64_t *)(v346[6] + 16 * IsNativeType);
                        *v347 = v345;
                        v347[1] = v334;
                        v348 = (_OWORD *)(v346[7] + (IsNativeType << 6));
                        v349 = v534[0];
                        v350 = v534[1];
                        v351 = v535[0];
                        *(_OWORD *)((char *)v348 + 41) = *(_OWORD *)((char *)v535 + 9);
                        v348[1] = v350;
                        v348[2] = v351;
                        *v348 = v349;
                        v352 = v346[2];
                        v138 = __OFADD__(v352, 1);
                        v353 = v352 + 1;
                        if (v138)
                          goto LABEL_396;
                        v346[2] = v353;
                        swift_bridgeObjectRetain();
                      }
                      *v573 = v346;
                      swift_unknownObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      v329 = v521;
                    }
                  }
                  else
                  {
                    swift_unknownObjectRelease();
                  }
                  v328 += 2;
                  ++v327;
                  if (v330 == v522)
                  {
                    v326 = v329;
                    swift_bridgeObjectRelease_n();
                    v97 = v523;
                    v323 = v516;
                    v324 = v514;
                    goto LABEL_246;
                  }
                }
LABEL_385:
                __break(1u);
LABEL_386:

                swift_bridgeObjectRelease();
                goto LABEL_313;
              }
              swift_bridgeObjectRelease();
LABEL_246:
              v355 = (*(uint64_t (**)(uint64_t, uint64_t))(v324 + 24))(v323, v324);
              if (v355)
              {
                v356 = v355;
                v357 = specialized static Array._allocateUninitialized(_:)(0);
                *(_QWORD *)&v526[0] = v357;
                v358 = specialized Array._getCount()(v356);
                if (v358)
                {
                  v359 = v358;
                  if (v358 < 1)
                    goto LABEL_412;
                  swift_bridgeObjectRetain();
                  v360 = 32;
                  do
                  {
                    v361 = *(_QWORD *)(v356 + v360);
                    swift_getObjectType();
                    v362 = swift_conformsToProtocol2();
                    if (v362)
                      v363 = v362;
                    else
                      v363 = 0;
                    if (v362)
                      v364 = v361;
                    else
                      v364 = 0;
                    if (v364)
                    {
                      swift_unknownObjectRetain();
                      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                      v365 = *(_QWORD *)(*(_QWORD *)&v526[0] + 16);
                      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v365);
                      v366 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v365, v364, v363);
                      destructiveProjectEnumData for NodePersonality.ShaderType(v366);
                    }
                    v360 += 16;
                    --v359;
                  }
                  while (v359);
                  swift_bridgeObjectRelease_n();
                  v357 = *(_QWORD *)&v526[0];
                  v97 = v523;
                }
                else
                {
                  swift_bridgeObjectRelease();
                }
                v367 = specialized Array._getCount()(v357);
                if (v367)
                {
                  v368 = v367;
                  v522 = (char *)(v357 + 32);
                  v499 = v357;
                  swift_bridgeObjectRetain();
                  v369 = 0;
                  v320 = v326;
                  v517 = v368;
                  while (1)
                  {
                    v370 = v369 + 1;
                    if (__OFADD__(v369, 1))
                    {
                      __break(1u);
                      goto LABEL_388;
                    }
                    v371 = *(void **)&v522[16 * v369];
                    v372 = *(_QWORD *)&v522[16 * v369 + 8];
                    v373 = swift_getObjectType();
                    v374 = *(_QWORD *)(v372 + 8);
                    swift_unknownObjectRetain();
                    v375 = XMLNode.elements(forXPath:)(0x72706D6F65672F2ELL, 0xED0000666564706FLL, v373, v374);
                    if (!v320)
                      break;

                    swift_unknownObjectRelease();
                    v320 = 0;
LABEL_265:
                    v369 = v370;
                    if (v370 == v368)
                    {
                      swift_unknownObjectRelease();
                      swift_bridgeObjectRelease_n();
                      goto LABEL_222;
                    }
                  }
                  v376 = (uint64_t)v375;
                  v520 = (char *)v370;
                  v521 = v371;
                  v377 = specialized Array._getCount()(v375);
                  if (v377)
                  {
                    v378 = v377;
                    if (v377 < 1)
                      goto LABEL_394;
                    v516 = v373;
                    swift_bridgeObjectRetain();
                    v514 = v376;
                    v379 = (uint64_t *)(v376 + 40);
                    do
                    {
                      v380 = *v379;
                      swift_getObjectType();
                      swift_unknownObjectRetain();
                      v381 = XMLNode.subscript.getter(1701667182, 0xE400000000000000);
                      if (v382)
                      {
                        v383 = v381;
                        v384 = v382;
                        createGeomPropDef(for:)(v380, (uint64_t)&v536);
                        v568 = v537;
                        v569 = v538;
                        v567 = v536;
                        v570 = v539 | ((unint64_t)v540 << 8);
                        v571 = v541;
                        v572 = v542;
                        specialized Dictionary.subscript.setter((uint64_t)&v567, v383, v384);
                      }
                      swift_unknownObjectRelease();
                      v379 += 2;
                      --v378;
                    }
                    while (v378);
                    swift_bridgeObjectRelease_n();
                    v97 = v523;
                    v373 = v516;
                  }
                  else
                  {
                    swift_bridgeObjectRelease();
                  }
                  v385 = (*(uint64_t (**)(uint64_t, uint64_t))(v374 + 24))(v373, v374);
                  v368 = v517;
                  if (v385)
                  {
                    v386 = v385;
                    v387 = specialized static Array._allocateUninitialized(_:)(0);
                    *(_QWORD *)&v526[0] = v387;
                    v388 = specialized Array._getCount()(v386);
                    if (v388)
                    {
                      v389 = v388;
                      if (v388 < 1)
                        goto LABEL_398;
                      swift_bridgeObjectRetain();
                      v390 = 32;
                      do
                      {
                        v391 = *(_QWORD *)(v386 + v390);
                        swift_getObjectType();
                        v392 = swift_conformsToProtocol2();
                        if (v392)
                          v393 = v392;
                        else
                          v393 = 0;
                        if (v392)
                          v394 = v391;
                        else
                          v394 = 0;
                        if (v394)
                        {
                          swift_unknownObjectRetain();
                          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                          v395 = *(_QWORD *)(*(_QWORD *)&v526[0] + 16);
                          specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v395);
                          v396 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v395, v394, v393);
                          destructiveProjectEnumData for NodePersonality.ShaderType(v396);
                        }
                        v390 += 16;
                        --v389;
                      }
                      while (v389);
                      swift_bridgeObjectRelease_n();
                      v387 = *(_QWORD *)&v526[0];
                      v97 = v523;
                      v368 = v517;
                    }
                    else
                    {
                      swift_bridgeObjectRelease();
                    }
                    v397 = specialized Array._getCount()(v387);
                    if (v397)
                    {
                      v398 = v397;
                      if (v397 < 1)
                        goto LABEL_399;
                      swift_bridgeObjectRetain();
                      for (i = 0; i != v398; ++i)
                      {
                        v400 = v387 + 16 * i;
                        v526[0] = *(_OWORD *)(v400 + 32);
                        closure #3 in collectGeomPropDefs(_:into:)((uint64_t *)v526, (uint64_t)v97);
                      }
                      v320 = 0;
                      swift_unknownObjectRelease();
                      swift_bridgeObjectRelease_n();
                      goto LABEL_299;
                    }
                    swift_unknownObjectRelease();
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    swift_unknownObjectRelease();
                  }
                  v320 = 0;
LABEL_299:
                  v370 = (uint64_t)v520;
                  goto LABEL_265;
                }
                swift_unknownObjectRelease();
                swift_bridgeObjectRelease();
              }
              else
              {
                swift_unknownObjectRelease();
              }
              v320 = v326;
            }
LABEL_222:
            v319 = v513;
          }
          while (v513 != v510);
          v100 = v320;
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease_n();
        }
        else
        {
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    v101 = v500;
    if (v500 == (id)v496)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v402 = 0;
      v493 = 0x8000000245FC8920;
      v490 = 0x8000000245FC8940;
      v491 = 0xD000000000000010;
      IsNativeType = v511;
      while (1)
      {
        v494 = v402 + 1;
        if (__OFADD__(v402, 1))
          goto LABEL_415;
        v403 = v497[2 * v402];
        v404 = v497[2 * v402 + 1];
        v405 = swift_getObjectType();
        v406 = *(_QWORD *)(v404 + 8);
        swift_unknownObjectRetain();
        v407 = v100;
        v408 = XMLNode.elements(forXPath:)(0xD000000000000015, v493, v405, v406);
        if (v100)
          goto LABEL_315;
        v409 = v408;
        v521 = (void *)v406;
        v500 = (id)v405;
        v509 = 0;
        v410 = specialized Array._getCount()(v408);
        v508 = v403;
        v499 = v410;
        if (v410)
        {
          v495 = (uint64_t)(v409 + 4);
          v492 = v409;
          swift_bridgeObjectRetain();
          v411 = 0;
          v412 = (uint64_t)v521;
          while (!__OFADD__(v411, 1))
          {
            v512 = v411 + 1;
            v417 = v495 + 16 * (_QWORD)v411;
            v419 = *(char **)v417;
            v418 = *(_QWORD *)(v417 + 8);
            swift_getObjectType();
            v510 = v418;
            swift_unknownObjectRetain();
            v513 = XMLNode.subscript.getter(0x66656465646F6ELL, 0xE700000000000000);
            v514 = v420;
            if (v420)
            {
              v421 = XMLNode.subscript.getter(0x746567726174, 0xE600000000000000);
              if (v422)
              {
                *(_QWORD *)&v526[0] = v421;
                *((_QWORD *)&v526[0] + 1) = v422;
                *(_QWORD *)&v524 = 44;
                *((_QWORD *)&v524 + 1) = 0xE100000000000000;
                v423 = lazy protocol witness table accessor for type String and conformance String();
                v424 = StringProtocol.components<A>(separatedBy:)();
                swift_bridgeObjectRelease();
                v425 = specialized Array.count.getter(v424);
                v522 = v419;
                if (v425)
                {
                  v426 = v425;
                  v427 = (_QWORD *)v423;
                  *(_QWORD *)&v524 = specialized ContiguousArray.init()();
                  specialized ContiguousArray.reserveCapacity(_:)(v426);
                  if (v426 < 0)
                    goto LABEL_417;
                  v520 = (char *)v424;
                  v428 = (uint64_t *)(v424 + 40);
                  v429 = v501;
                  v573 = v427;
                  do
                  {
                    v430 = *v428;
                    *(_QWORD *)&v526[0] = *(v428 - 1);
                    *((_QWORD *)&v526[0] + 1) = v430;
                    swift_bridgeObjectRetain();
                    static CharacterSet.whitespacesAndNewlines.getter();
                    v431 = StringProtocol.trimmingCharacters(in:)();
                    v433 = v432;
                    (*(void (**)(char *, uint64_t))(v518 + 8))(v429, v519);
                    swift_bridgeObjectRelease();
                    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                    v434 = *(_QWORD *)(v524 + 16);
                    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v434);
                    v435 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v434, v431, v433);
                    destructiveProjectEnumData for NodePersonality.ShaderType(v435);
                    v428 += 2;
                    --v426;
                  }
                  while (v426);
                  swift_bridgeObjectRelease();
                  v97 = v523;
                  v436 = v524;
                  v412 = (uint64_t)v521;
                  v419 = v522;
                }
                else
                {
                  v436 = specialized static Array._allocateUninitialized(_:)(0);
                  swift_bridgeObjectRelease();
                }
                v438 = specialized Array.count.getter(v436);
                if (v438)
                {
                  v439 = v438;
                  *(_QWORD *)&v526[0] = specialized ContiguousArray.init()();
                  specialized ContiguousArray.reserveCapacity(_:)();
                  if (v439 < 0)
                    goto LABEL_418;
                  v440 = 0;
                  v520 = (char *)(v436 + 32);
                  v516 = v439;
                  v517 = v436;
                  while (v440 != (_QWORD *)v439)
                  {
                    v573 = v440;
                    v441 = &v520[16 * (_QWORD)v440];
                    v443 = *(_QWORD *)v441;
                    v442 = *((_QWORD *)v441 + 1);
                    v444 = one-time initialization token for allTargets;
                    swift_bridgeObjectRetain();
                    if (v444 != -1)
                      swift_once();
                    v445 = static MaterialXTarget.allTargets;
                    swift_bridgeObjectRetain_n();
                    v446 = specialized Array.count.getter(v445);
                    if (!v446)
                      goto LABEL_423;
                    v447 = v446;
                    IsNativeType = specialized Array._hoistableIsNativeTypeChecked()(v445);
                    if ((IsNativeType & 1) != 0)
                    {
                      v448 = *(_QWORD *)(v445 + 32);
                      swift_retain();
                    }
                    else
                    {
                      v448 = MEMORY[0x24954B748](0, v445);
                    }
                    v449 = *(_QWORD *)(v448 + 16) == v443 && *(_QWORD *)(v448 + 24) == v442;
                    if (!v449 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                    {
                      swift_release();
                      if (v447 == 1)
                        goto LABEL_423;
                      v450 = 5;
                      while (1)
                      {
                        if ((IsNativeType & 1) != 0)
                        {
                          v451 = *(_QWORD *)(v445 + 8 * v450);
                          swift_retain();
                        }
                        else
                        {
                          v451 = MEMORY[0x24954B748](v450 - 4, v445);
                        }
                        v452 = v450 - 3;
                        if (__OFADD__(v450 - 4, 1))
                          break;
                        v453 = *(_QWORD *)(v451 + 16) == v443 && *(_QWORD *)(v451 + 24) == v442;
                        if (v453 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                          goto LABEL_336;
                        swift_release();
                        ++v450;
                        if (v452 == v447)
                          goto LABEL_423;
                      }
                      __break(1u);
                      goto LABEL_385;
                    }
LABEL_336:
                    v440 = (_QWORD *)((char *)v573 + 1);
                    swift_bridgeObjectRelease_n();
                    swift_bridgeObjectRelease();
                    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized ContiguousArray._endMutation()();
                    v439 = v516;
                    v419 = v522;
                    v97 = v523;
                    v412 = (uint64_t)v521;
                    if (v440 == (_QWORD *)v516)
                    {
                      v437 = *(_QWORD *)&v526[0];
                      goto LABEL_364;
                    }
                  }
                  goto LABEL_389;
                }
                v437 = specialized static Array._allocateUninitialized(_:)(0);
LABEL_364:
                swift_bridgeObjectRelease();
              }
              else
              {
                v437 = specialized static Array._allocateUninitialized(_:)(0);
              }
              v454 = (_QWORD *)*v97;
              v455 = v97[1];
              v456 = v97[2];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v457 = v509;
              createGraph(_:nodeDefStore:)(v419, v510, v454, v455, v456, v543);
              v509 = v457;
              if (v457)
              {
                swift_bridgeObjectRelease_n();
                swift_unknownObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                swift_unknownObjectRelease();
                v100 = 0;
                IsNativeType = v511;
                goto LABEL_316;
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v458 = v544[0];
              v459 = v507;
              v507[8] = v543[8];
              v459[9] = v458;
              *(_OWORD *)((char *)v459 + 153) = *(_OWORD *)((char *)v544 + 9);
              v460 = v543[5];
              v459[4] = v543[4];
              v459[5] = v460;
              v461 = v543[7];
              v459[6] = v543[6];
              v459[7] = v461;
              v462 = v543[1];
              *v459 = v543[0];
              v459[1] = v462;
              v463 = v543[3];
              v459[2] = v543[2];
              v459[3] = v463;
              type metadata accessor for NodeDef.Implementation.Kind(0);
              swift_storeEnumTagMultiPayload();
              outlined retain of Graph((uint64_t)v543);
              v464 = specialized Set.init<A>(_:)(v437);
              swift_bridgeObjectRelease();
              *(_QWORD *)((char *)v459 + *(int *)(v505 + 20)) = v464;
              outlined init with copy of NodeDef.Implementation.Kind((uint64_t)v459, (uint64_t)v498, type metadata accessor for NodeDef.Implementation);
              v465 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)&v526[0] = v97[2];
              v466 = *(_QWORD *)&v526[0];
              v97[2] = 0x8000000000000000;
              v468 = specialized __RawDictionaryStorage.find<A>(_:)(v513, v514);
              v469 = *(_QWORD *)(v466 + 16);
              v470 = (v467 & 1) == 0;
              v471 = v469 + v470;
              if (__OFADD__(v469, v470))
                goto LABEL_411;
              v472 = v467;
              if (*(_QWORD *)(v466 + 24) >= v471)
              {
                if ((v465 & 1) == 0)
                {
                  specialized _NativeDictionary.copy()();
                  v466 = *(_QWORD *)&v526[0];
                }
              }
              else
              {
                specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v471, v465);
                v466 = *(_QWORD *)&v526[0];
                v473 = specialized __RawDictionaryStorage.find<A>(_:)(v513, v514);
                if ((v472 & 1) != (v474 & 1))
                  goto LABEL_424;
                v468 = v473;
              }
              IsNativeType = v511;
              v97[2] = v466;
              swift_bridgeObjectRelease();
              v475 = (_QWORD *)v97[2];
              swift_bridgeObjectRetain();
              if ((v472 & 1) == 0)
              {
                specialized _NativeDictionary._insert(at:key:value:)(v468, v513, v514, MEMORY[0x24BEE4AF8], v475);
                swift_bridgeObjectRetain();
              }
              v413 = v475[7];
              swift_bridgeObjectRelease();
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              v414 = *(_QWORD *)(*(_QWORD *)(v413 + 8 * v468) + 16);
              specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v414);
              v415 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v414, (uint64_t)v498);
              destructiveProjectEnumData for NodePersonality.ShaderType(v415);
              outlined release of Graph((uint64_t)v543);
              swift_bridgeObjectRelease();
              outlined destroy of NodeDef.Implementation((uint64_t)v507, type metadata accessor for NodeDef.Implementation);
            }
            swift_unknownObjectRelease();
            v411 = v512;
            v416 = (uint64_t)v500;
            if (v512 == (char *)v499)
            {
              swift_bridgeObjectRelease();
              goto LABEL_376;
            }
          }
          goto LABEL_407;
        }
        v416 = (uint64_t)v500;
        v412 = (uint64_t)v521;
LABEL_376:
        swift_bridgeObjectRelease();
        v407 = v509;
        v476 = XMLNode.elements(forXPath:)(v491, v490, v416, v412);
        if (v407)
        {
LABEL_315:

          swift_unknownObjectRelease();
          v100 = 0;
        }
        else
        {
          v477 = v476;
          v100 = 0;
          v478 = specialized Array._getCount()(v476);
          if (v478)
          {
            v479 = v478;
            swift_bridgeObjectRetain();
            v480 = 0;
            v481 = v477 + 5;
            while (1)
            {
              v482 = v480 + 1;
              if (__OFADD__(v480, 1))
                goto LABEL_416;
              v483 = *v481;
              *(_QWORD *)&v526[0] = *(v481 - 1);
              *((_QWORD *)&v526[0] + 1) = v483;
              swift_unknownObjectRetain();
              closure #2 in collectImplementations(_:into:)((uint64_t *)v526, (uint64_t)v523);
              swift_unknownObjectRelease();
              v481 += 2;
              ++v480;
              if (v482 == v479)
              {
                swift_unknownObjectRelease();
                swift_bridgeObjectRelease_n();
                v97 = v523;
                IsNativeType = v511;
                goto LABEL_316;
              }
            }
          }
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
        }
LABEL_316:
        v402 = v494;
        if (v494 == v496)
          goto LABEL_386;
      }
    }
  }
  swift_bridgeObjectRetain();
  v142 = 0;
  v513 = v141;
  v143 = (uint64_t *)(v141 + 40);
  while (1)
  {
    v144 = (char *)(v142 + 1);
    if (__OFADD__(v142, 1))
      break;
    v145 = *v143;
    v146 = swift_unknownObjectRetain();
    createNodeDef(for:)(v146, v145, (uint64_t)v529);
    outlined init with take of MetalFunctionNode?((uint64_t)v529, (uint64_t)v557, &demangling cache variable for type metadata for NodeDef?);
    if (getEnumTag for IOAttachment((uint64_t)v557) != 1)
    {
      v564 = v557[6];
      v565 = v557[7];
      v566 = v557[8];
      v560 = v557[2];
      v561 = v557[3];
      v563 = v557[5];
      v562 = v557[4];
      v559 = v557[1];
      v558 = v557[0];
      swift_getObjectType();
      v147 = XMLNode.subscript.getter(1701667182, 0xE400000000000000);
      if (v148)
      {
        v149 = v147;
        v150 = v148;
        v151 = swift_isUniquelyReferenced_nonNull_native();
        v152 = v97;
        v153 = v151;
        *(_QWORD *)&v526[0] = *v152;
        v154 = *(_QWORD *)&v526[0];
        *v152 = 0x8000000000000000;
        v516 = v149;
        v520 = (char *)v150;
        v156 = specialized __RawDictionaryStorage.find<A>(_:)(v149, v150);
        v157 = *(_QWORD *)(v154 + 16);
        v158 = (v155 & 1) == 0;
        v159 = v157 + v158;
        if (__OFADD__(v157, v158))
          goto LABEL_400;
        v160 = v155;
        if (*(_QWORD *)(v154 + 24) >= v159)
        {
          if ((v153 & 1) != 0)
          {
            v163 = *(_QWORD **)&v526[0];
            if ((v155 & 1) == 0)
              goto LABEL_82;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            v163 = *(_QWORD **)&v526[0];
            if ((v160 & 1) == 0)
              goto LABEL_82;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v159, v153);
          v161 = specialized __RawDictionaryStorage.find<A>(_:)(v516, (uint64_t)v520);
          if ((v160 & 1) != (v162 & 1))
            goto LABEL_424;
          v156 = v161;
          v163 = *(_QWORD **)&v526[0];
          if ((v160 & 1) == 0)
          {
LABEL_82:
            v163[(v156 >> 6) + 8] |= 1 << v156;
            v164 = (_QWORD *)(v163[6] + 16 * v156);
            v165 = (uint64_t)v520;
            *v164 = v516;
            v164[1] = v165;
            v166 = (_OWORD *)(v163[7] + 144 * v156);
            *v166 = v558;
            v167 = v559;
            v168 = v560;
            v169 = v562;
            v166[3] = v561;
            v166[4] = v169;
            v166[1] = v167;
            v166[2] = v168;
            v170 = v563;
            v171 = v564;
            v172 = v566;
            v166[7] = v565;
            v166[8] = v172;
            v166[5] = v170;
            v166[6] = v171;
            v173 = v163[2];
            v138 = __OFADD__(v173, 1);
            v174 = v173 + 1;
            if (v138)
              goto LABEL_406;
            v163[2] = v174;
            swift_bridgeObjectRetain();
            goto LABEL_84;
          }
        }
        outlined assign with take of NodeDef((uint64_t)&v558, v163[7] + 144 * v156);
LABEL_84:
        v175 = v523;
        *v523 = v163;
        v97 = v175;
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_69;
      }
      outlined release of NodeDef?(v529);
    }
    swift_unknownObjectRelease();
LABEL_69:
    v143 += 2;
    ++v142;
    if (v144 == v522)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_88;
    }
  }
LABEL_390:
  __break(1u);
LABEL_391:
  __break(1u);
LABEL_392:
  __break(1u);
LABEL_393:
  __break(1u);
LABEL_394:
  __break(1u);
LABEL_395:
  __break(1u);
LABEL_396:
  __break(1u);
LABEL_397:
  __break(1u);
LABEL_398:
  __break(1u);
LABEL_399:
  __break(1u);
LABEL_400:
  __break(1u);
LABEL_401:
  __break(1u);
LABEL_402:
  __break(1u);
LABEL_403:
  __break(1u);
LABEL_404:
  __break(1u);
LABEL_405:
  __break(1u);
LABEL_406:
  __break(1u);
LABEL_407:
  __break(1u);
LABEL_408:
  __break(1u);
LABEL_409:
  __break(1u);
LABEL_410:
  __break(1u);
LABEL_411:
  __break(1u);
LABEL_412:
  __break(1u);
LABEL_413:
  __break(1u);
LABEL_414:
  __break(1u);
LABEL_415:
  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
LABEL_419:
  __break(1u);
LABEL_420:
  __break(1u);
LABEL_421:
  __break(1u);
LABEL_422:
  __break(1u);
LABEL_423:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_424:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

